const __CTFontDescriptor *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v4;
  uint64_t v5;
  const __CTFontDescriptor *v6;
  const __CTFontDescriptor *v7;
  uint64_t v8;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_18;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = (const __CFString *)*MEMORY[0x24BDC4D70];
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (const __CTFontDescriptor *)MEMORY[0x23B7C6D9C](v5 - 4, a1)
         : (const __CTFontDescriptor *)*(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if (CTFontDescriptorCopyAttribute(v6, v4) && swift_dynamicCast())
      {
        if (v14 == a2 && v15 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_16:
          swift_bridgeObjectRelease();
          return v7;
        }
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
          goto LABEL_16;
      }

      ++v5;
      if (v8 == v13)
        goto LABEL_19;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t specialized CodablePlatformFont.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t, double);
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  NSURL *v43;
  const __CFURL *v44;
  unint64_t v45;
  CFArrayRef FontDescriptorsFromURL;
  uint64_t v47;
  uint64_t v48;
  const __CTFontDescriptor *v49;
  const __CFDictionary *v50;
  const __CTFontDescriptor *CopyWithAttributes;
  double v52;
  uint64_t v53;
  id *v54;
  id v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  id v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  double *v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  _BOOL8 v156;
  id v157;
  id v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  id v166;
  id v167;
  _QWORD *v168;
  char v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL8 v173;
  char v174;
  unint64_t v175;
  char v176;
  id v177;
  _OWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  _QWORD *v183;
  char v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  id v189;
  char v190;
  unint64_t v191;
  char v192;
  int64_t v193;
  uint64_t v194;
  _BOOL8 v195;
  uint64_t v196;
  char v197;
  unint64_t v198;
  char v199;
  _QWORD *v200;
  id v201;
  _OWORD *v202;
  uint64_t v203;
  float *v204;
  float v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  id v210;
  unint64_t v211;
  char v212;
  void *v213;
  id v214;
  Class isa;
  NSDictionary v216;
  unint64_t v217;
  const __CFData *v218;
  const __CFDictionary *v219;
  const __CFData *v220;
  CFArrayRef FontDescriptorsFromData;
  uint64_t v222;
  uint64_t v223;
  const __CFDictionary *v224;
  CTFontDescriptorRef v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v232;
  void (*v233)(char *, uint64_t, uint64_t, uint64_t, double);
  id v234;
  id v235;
  id v236;
  uint64_t v237;
  id v238;
  id v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  int64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;

  v2 = v1;
  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v4);
  v251 = (char *)&v232 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (unint64_t)&v232 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v232 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v253 = (uint64_t)&v232 - v14;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t)&v232 - v17;
  v254 = v7;
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v7 + 56);
  v255 = v6;
  v19((char *)&v232 - v17, 1, 1, v6, v16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = MEMORY[0x24BEE4B00];
  if (v20 >= v21)
  {
    v249 = 0;
    v248 = 0;
    v256 = 0;
    v257 = 0;
    v250 = 0;
    v258 = 0;
    v247 = 0;
    v23 = 0.0;
    v259 = 0xF000000000000000;
LABEL_4:
    *(_QWORD *)(a1 + 24) = 0;
    v24 = v253;
    outlined init with copy of TypesettingLanguage(v18, v253, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    v25 = v254;
    v26 = v255;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v254 + 48))(v24, 1, v255) != 1)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v9, v24, v26);
      v42 = v26;
      a1 = v256;
      v27 = v257;
      if (v258)
      {
        swift_bridgeObjectRelease();
        URL._bridgeToObjectiveC()(v43);
        v45 = (unint64_t)v44;
        FontDescriptorsFromURL = CTFontManagerCreateFontDescriptorsFromURL(v44);

        if (FontDescriptorsFromURL)
        {
          *(_QWORD *)&v263 = 0;
          type metadata accessor for CTFontDescriptorRef(0);
          static Array._conditionallyBridgeFromObjectiveC(_:result:)();

          v45 = v263;
          if ((_QWORD)v263)
          {
            if ((unint64_t)v263 >> 62)
              goto LABEL_274;
            v47 = *(_QWORD *)((v263 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v47)
              goto LABEL_275;
            goto LABEL_15;
          }
        }
LABEL_276:
        swift_bridgeObjectRelease();
LABEL_277:
        lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data?(a1, v259);
        (*(void (**)(unint64_t, uint64_t))(v254 + 8))(v9, v255);
        goto LABEL_281;
      }
      (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v9, v42);
      goto LABEL_217;
    }
    outlined destroy of TypesettingConfiguration(v24, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    a1 = v256;
    v27 = v257;
    if (v259 >> 60 == 15)
    {
      v28 = v258;
      v29 = v250;
      if (v258)
      {
        v30._countAndFlagsBits = 0x534E46532ELL;
        v30._object = (void *)0xE500000000000000;
        if (String.hasPrefix(_:)(v30))
        {
          v31 = String.count.getter();
          v32 = specialized Collection.dropFirst(_:)(v31, v29, v28);
          v34 = v33;
          v36 = v35;
          v38 = v37;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v262 = 0x495546532ELL;
          *((_QWORD *)&v262 + 1) = 0xE500000000000000;
          *(_QWORD *)&v263 = v32;
          *((_QWORD *)&v263 + 1) = v34;
          *(_QWORD *)&v264 = v36;
          *((_QWORD *)&v264 + 1) = v38;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          String.append<A>(contentsOf:)();
          swift_bridgeObjectRelease();
          v28 = *((_QWORD *)&v262 + 1);
          v29 = v262;
        }
        v39 = (void *)*MEMORY[0x24BDC4D70];
        *((_QWORD *)&v264 + 1) = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v263 = v29;
        *((_QWORD *)&v263 + 1) = v28;
        outlined init with take of Any(&v263, &v262);
        v40 = v39;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v261 = (_QWORD *)v22;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v262, v40, isUniquelyReferenced_nonNull_native);

        swift_bridgeObjectRelease();
        v27 = v257;
      }
      goto LABEL_217;
    }
    if (!v258)
    {
LABEL_217:
      if (v27)
      {
        v213 = (void *)MEMORY[0x23B7C5DAC](v248, v27);
        swift_bridgeObjectRelease();
        v214 = (id)CTFontDescriptorGetContentSizeCategoryFromIndex();
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
        swift_bridgeObjectRetain();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CopyWithAttributes = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyleAndAttributes();

        goto LABEL_221;
      }
      type metadata accessor for CFStringRef(0);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
      swift_bridgeObjectRetain();
      v216.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CopyWithAttributes = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
      goto LABEL_220;
    }
    outlined copy of Data._Representation(v256, v259);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v22 + 16))
    {
      v210 = (id)*MEMORY[0x24BDC4E40];
      v211 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v210);
      if ((v212 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v22 + 56) + 32 * v211, (uint64_t)&v263);
      }
      else
      {
        v263 = 0u;
        v264 = 0u;
      }

      if (*((_QWORD *)&v264 + 1))
      {
        outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v263, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
        v217 = v259;
        v218 = Data._bridgeToObjectiveC()().super.isa;
        v216.super.isa = CTFontManagerCreateFontDescriptorFromData(v218);

        if (v216.super.isa)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
          swift_bridgeObjectRetain();
          v219 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v216.super.isa, v219);
          outlined consume of Data?(a1, v217);

LABEL_220:
          goto LABEL_221;
        }
LABEL_228:
        v220 = Data._bridgeToObjectiveC()().super.isa;
        FontDescriptorsFromData = CTFontManagerCreateFontDescriptorsFromData(v220);

        *(_QWORD *)&v263 = 0;
        type metadata accessor for CTFontDescriptorRef(0);
        static Array._forceBridgeFromObjectiveC(_:result:)();
        v45 = v263;
        if (!(_QWORD)v263)
          goto LABEL_287;

        if (v45 >> 62)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v229 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v229)
            goto LABEL_279;
        }
        else
        {
          v222 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v222)
            goto LABEL_279;
        }
        v223 = v258;
        swift_bridgeObjectRetain();
        CopyWithAttributes = specialized Sequence.first(where:)(v45, v250, v223);
        swift_bridgeObjectRelease();
        if (CopyWithAttributes)
        {
          if (!*(_QWORD *)(v22 + 16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data?(a1, v259);
            goto LABEL_221;
          }
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
          v224 = Dictionary._bridgeToObjectiveC()().super.isa;
          v225 = CTFontDescriptorCreateCopyWithAttributes(CopyWithAttributes, v224);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v225)
          {
            outlined consume of Data?(a1, v259);
            CopyWithAttributes = v225;
            goto LABEL_221;
          }
          goto LABEL_280;
        }
LABEL_279:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_280:
        lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
        swift_allocError();
        swift_willThrow();
        v230 = v259;
        outlined consume of Data?(a1, v259);
        outlined consume of Data?(a1, v230);
        goto LABEL_281;
      }
    }
    else
    {
      v263 = 0u;
      v264 = 0u;
    }
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v263, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    goto LABEL_228;
  }
  v233 = v19;
  v246 = v12;
  v247 = 0;
  v258 = 0;
  v250 = 0;
  v256 = 0;
  v257 = 0;
  v248 = 0;
  v249 = 0;
  v242 = *MEMORY[0x24BDC4DD0];
  v252 = (_QWORD *)(a1 + 40);
  v241 = *MEMORY[0x24BDC4D60];
  v240 = (id)*MEMORY[0x24BDC4D50];
  v235 = (id)*MEMORY[0x24BDC4CA8];
  v237 = *MEMORY[0x24BDC4D00];
  v239 = (id)*MEMORY[0x24BDC4E38];
  v259 = 0xF000000000000000;
  v23 = 0.0;
  v238 = (id)*MEMORY[0x24BDC4E40];
  v236 = (id)*MEMORY[0x24BDC4D20];
  v234 = (id)*MEMORY[0x24BDC4DE0];
  v260 = v9;
  while (2)
  {
    v45 = *(_QWORD *)(a1 + 24);
    if (!v45)
      goto LABEL_27;
    v57 = *(_QWORD *)(a1 + 32);
    if (v20 >= v57)
    {
      if (v57 < v20)
        goto LABEL_208;
      *(_QWORD *)(a1 + 24) = 0;
LABEL_27:
      v45 = a1;
      v58 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_209;
      v45 = v58;
      if (v58 < 8)
      {
LABEL_208:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_209;
      }
    }
    switch(v45 >> 3)
    {
      case 1uLL:
        if ((v45 & 7) != 2)
          goto LABEL_208;
        v59 = (_QWORD *)*v252;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
        v9 = v59[2];
        v60 = v59[3];
        if (v9 >= v60 >> 1)
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v9 + 1, 1, v59);
        v59[2] = v9 + 1;
        v59[v9 + 4] = v21;
        *(_QWORD *)(a1 + 40) = v59;
        v45 = a1;
        v61 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_209;
        if (v61 < 0)
          goto LABEL_253;
        v62 = *(_QWORD *)(a1 + 8) + v61;
        v9 = v260;
        if (v21 < v62)
          goto LABEL_208;
        *(_QWORD *)(a1 + 16) = v62;
        specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1, (uint64_t *)&v263);
        v45 = (unint64_t)v252;
        if (!specialized Array._getCount()(*v252))
          goto LABEL_259;
        v63 = specialized Array._customRemoveLast()();
        if (v63)
          goto LABEL_42;
        v64 = specialized Array._getCount()(*(_QWORD *)v45);
        v65 = __OFSUB__(v64, 1);
        v66 = v64 - 1;
        if (v65)
        {
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          type metadata accessor for CFStringRef(0);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x234B36780);
        }
        v63 = specialized Array.remove(at:)(v66);
LABEL_42:
        v67 = v63;
        outlined consume of Data?(v256, v259);
        *(_QWORD *)(a1 + 16) = v67;
        v259 = *((_QWORD *)&v263 + 1);
        v256 = v263;
        goto LABEL_22;
      case 2uLL:
        if ((v45 & 7) != 2)
          goto LABEL_208;
        v139 = (_QWORD *)*v252;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v139[2] + 1, 1, v139);
        v9 = v139[2];
        v140 = v139[3];
        if (v9 >= v140 >> 1)
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v140 > 1), v9 + 1, 1, v139);
        v139[2] = v9 + 1;
        v139[v9 + 4] = v21;
        *(_QWORD *)(a1 + 40) = v139;
        v45 = a1;
        v141 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_238;
        if (v141 < 0)
          goto LABEL_257;
        v142 = *(_QWORD *)(a1 + 8) + v141;
        v9 = v260;
        if (v21 < v142)
          goto LABEL_237;
        *(_QWORD *)(a1 + 16) = v142;
        URL.init(from:)(a1, (uint64_t)v246);
        v143 = (_QWORD *)*v252;
        if (!*(_QWORD *)(*v252 + 16))
          goto LABEL_261;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v144 = v143[2];
          if (!v144)
            goto LABEL_262;
        }
        else
        {
          v143 = specialized _ArrayBuffer._consumeAndCreateNew()(v143);
          v144 = v143[2];
          if (!v144)
            goto LABEL_262;
        }
        v145 = v144 - 1;
        v146 = v143[v145 + 4];
        v143[2] = v145;
        *(_QWORD *)(a1 + 40) = v143;
        *(_QWORD *)(a1 + 16) = v146;
        outlined destroy of TypesettingConfiguration(v18, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        v147 = (uint64_t)v246;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v233)(v246, 0, 1, v255);
        outlined init with take of LocalizedStringKey.FormatArgument(v147, v18, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        goto LABEL_22;
      case 3uLL:
        swift_bridgeObjectRelease();
        if ((v45 & 7) != 2)
          goto LABEL_236;
        v45 = a1;
        v119 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_249;
        v45 = v119;
        if (v119 < 0)
          goto LABEL_254;
        v120 = *(_QWORD *)(a1 + 8);
        if (v21 < v120 + v119)
        {
LABEL_236:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_249;
        }
        *(_QWORD *)(a1 + 8) = v120 + v119;
        if (v119)
        {
          v121 = v120 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v122 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v124 = v123;
          if (__OFADD__(v121, v45))
            goto LABEL_266;
          if ((uint64_t)(v121 + v45) < v121)
            goto LABEL_268;
          v125 = v122;
          v45 = Data._Representation.subscript.getter();
          v79 = v126;
          outlined consume of Data._Representation(v125, v124);
        }
        else
        {
          v79 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        v250 = String.init(data:encoding:)();
        if (!v186)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation(v45, v79);
LABEL_249:
          outlined consume of Data?(v256, v259);
LABEL_211:
          swift_bridgeObjectRelease();
LABEL_281:
          outlined destroy of TypesettingConfiguration(v18, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
LABEL_282:
          swift_bridgeObjectRelease();
          return v45;
        }
        v258 = v186;
        goto LABEL_172;
      case 4uLL:
        if ((v45 & 7) == 0)
          goto LABEL_114;
        if ((v45 & 7) != 2)
          goto LABEL_208;
        v45 = a1;
        v129 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_209;
        if (v129 < 0)
          goto LABEL_270;
        v130 = *(_QWORD *)(a1 + 8) + v129;
        if (v21 < v130)
          goto LABEL_208;
        *(_QWORD *)(a1 + 24) = 32;
        *(_QWORD *)(a1 + 32) = v130;
LABEL_114:
        v45 = a1;
        v131 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_209;
        v247 = v131;
        goto LABEL_22;
      case 5uLL:
        swift_bridgeObjectRelease();
        if ((v45 & 7) != 2)
          goto LABEL_235;
        v45 = a1;
        v71 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_247;
        v45 = v71;
        if (v71 < 0)
          goto LABEL_256;
        v72 = *(_QWORD *)(a1 + 8);
        if (v21 < v72 + v71)
        {
LABEL_235:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_247;
        }
        *(_QWORD *)(a1 + 8) = v72 + v71;
        if (v71)
        {
          v73 = v72 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v76 = v75;
          if (__OFADD__(v73, v45))
            goto LABEL_265;
          if ((uint64_t)(v73 + v45) < v73)
            goto LABEL_267;
          v77 = v74;
          v45 = Data._Representation.subscript.getter();
          v79 = v78;
          outlined consume of Data._Representation(v77, v76);
        }
        else
        {
          v79 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        v248 = String.init(data:encoding:)();
        v257 = v185;
        if (!v185)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation(v45, v79);
LABEL_247:
          v227 = v259;
          outlined destroy of TypesettingConfiguration(v18, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
          outlined consume of Data?(v256, v227);
          swift_bridgeObjectRelease();
          goto LABEL_282;
        }
LABEL_172:
        outlined consume of Data._Representation(v45, v79);
        goto LABEL_22;
      case 6uLL:
        if ((v45 & 7) == 0)
          goto LABEL_141;
        if ((v45 & 7) != 2)
          goto LABEL_208;
        v45 = a1;
        v148 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_209;
        if (v148 < 0)
          goto LABEL_271;
        v149 = *(_QWORD *)(a1 + 8) + v148;
        if (v21 < v149)
          goto LABEL_208;
        *(_QWORD *)(a1 + 24) = 48;
        *(_QWORD *)(a1 + 32) = v149;
LABEL_141:
        v45 = a1;
        v150 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_209;
        v249 = v150;
        goto LABEL_22;
      case 7uLL:
        v151 = v45 & 7;
        if (v151 == 5)
        {
          v204 = *(float **)(a1 + 8);
          if (v21 < (unint64_t)(v204 + 1))
            goto LABEL_208;
          v205 = *v204;
          *(_QWORD *)(a1 + 8) = v204 + 1;
          v23 = v205;
        }
        else
        {
          if (v151 == 2)
          {
            v45 = a1;
            v203 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_209;
            if (v203 < 0)
              goto LABEL_286;
            v152 = *(double **)(a1 + 8);
            if (v21 < (unint64_t)v152 + v203)
              goto LABEL_208;
            *(_QWORD *)(a1 + 24) = 57;
            *(_QWORD *)(a1 + 32) = (char *)v152 + v203;
          }
          else
          {
            if (v151 != 1)
              goto LABEL_208;
            v152 = *(double **)(a1 + 8);
          }
          if (v21 < (unint64_t)(v152 + 1))
            goto LABEL_208;
          v23 = *v152;
          *(_QWORD *)(a1 + 8) = v152 + 1;
        }
        goto LABEL_22;
      case 8uLL:
        if ((v45 & 7) != 2)
          goto LABEL_208;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v132 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v132);
        v133 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v132, v21);
        _ViewInputs.base.modify(v133, v134);
        v45 = a1;
        v135 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_209;
        if (v135 < 0)
          goto LABEL_255;
        v136 = *(_QWORD *)(a1 + 8) + v135;
        if (v21 < v136)
          goto LABEL_208;
        *(_QWORD *)(a1 + 16) = v136;
        v137 = specialized CodableFontTraits.init(from:)(a1);
        v45 = (unint64_t)v252;
        if (!specialized Array._getCount()(*v252))
          goto LABEL_260;
        v138 = specialized Array._customRemoveLast()();
        if (v138)
        {
          v9 = 0;
        }
        else
        {
          v187 = specialized Array._getCount()(*(_QWORD *)v45);
          v65 = __OFSUB__(v187, 1);
          v188 = v187 - 1;
          if (v65)
            goto LABEL_285;
          v9 = 0;
          v138 = specialized Array.remove(at:)(v188);
        }
        *(_QWORD *)(a1 + 16) = v138;
        *((_QWORD *)&v264 + 1) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSDictionary);
        *(_QWORD *)&v263 = v137;
        outlined init with take of Any(&v263, &v262);
        v93 = v234;
        v189 = v137;
        v190 = swift_isUniquelyReferenced_nonNull_native();
        v261 = (_QWORD *)v22;
        v45 = v22;
        v191 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v93);
        v193 = v22;
        v22 = v191;
        v194 = *(_QWORD *)(v193 + 16);
        v195 = (v192 & 1) == 0;
        v196 = v194 + v195;
        if (__OFADD__(v194, v195))
          goto LABEL_263;
        v197 = v192;
        if (*(_QWORD *)(v193 + 24) >= v196)
        {
          if ((v190 & 1) != 0)
          {
            v200 = v261;
            if ((v192 & 1) == 0)
              goto LABEL_179;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v200 = v261;
            if ((v197 & 1) == 0)
              goto LABEL_179;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v196, v190);
          v198 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v93);
          if ((v197 & 1) != (v199 & 1))
            goto LABEL_288;
          v22 = v198;
          v200 = v261;
          if ((v197 & 1) == 0)
          {
LABEL_179:
            specialized _NativeDictionary._insert(at:key:value:)(v22, (uint64_t)v93, &v262, v200);
            v201 = v93;
            goto LABEL_183;
          }
        }
        v202 = (_OWORD *)(v200[7] + 32 * v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v202);
        outlined init with take of Any(&v262, v202);
LABEL_183:
        v22 = (int64_t)v200;

        goto LABEL_184;
      case 9uLL:
        v243 = v22;
        v244 = v18;
        v157 = *(id *)a1;
        *(_QWORD *)&v263 = v45;
        v158 = v157;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v45 = a1;
        v159 = ProtobufDecoder.dataField(_:)(&v263);
        if (v2)
        {
          v245 = v2;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        else
        {
          v161 = v159;
          v162 = v160;
          type metadata accessor for PropertyListDecoder();
          swift_allocObject();
          v45 = PropertyListDecoder.init()();
          swift_bridgeObjectRetain();
          dispatch thunk of PropertyListDecoder.userInfo.setter();
          type metadata accessor for [JSONCodable<CFArrayRef>](0);
          lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [JSONCodable<CFArrayRef>] and conformance <A> [A], (uint64_t (*)(uint64_t))type metadata accessor for [JSONCodable<CFArrayRef>], lazy protocol witness table accessor for type JSONCodable<CFArrayRef> and conformance JSONCodable<A>);
          dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
          v245 = 0;
          v163 = v263;
          if (specialized Array._getCount()(v263))
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v163);
            v164 = *(id *)(v163 + 32);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v161, v162);
            type metadata accessor for CFArrayRef(0);
            *((_QWORD *)&v264 + 1) = v165;
            *(_QWORD *)&v263 = v164;
            outlined init with take of Any(&v263, &v262);
            v166 = v164;
            v167 = v236;
            v168 = (_QWORD *)v243;
            v169 = swift_isUniquelyReferenced_nonNull_native();
            v261 = v168;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v262, v167, v169);
            v22 = (int64_t)v261;

            swift_bridgeObjectRelease();
            v18 = v244;
            v2 = v245;
LABEL_185:
            v9 = v260;
            goto LABEL_22;
          }
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          v245 = swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation(v161, v162);
        }
        swift_bridgeObjectRelease();
        outlined consume of Data?(v256, v259);
        swift_bridgeObjectRelease();
        outlined destroy of TypesettingConfiguration(v244, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        swift_bridgeObjectRelease();
        return v45;
      case 0xAuLL:
        v100 = *(_OWORD *)(a1 + 16);
        v265 = *(_OWORD *)a1;
        v266 = v100;
        v267 = *(_OWORD *)(a1 + 32);
        v268 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)&v262 = v45;
        outlined retain of ProtobufDecoder((id *)&v265);
        v45 = a1;
        v101 = ProtobufDecoder.dataField(_:)(&v262);
        if (v2)
        {
          outlined release of ProtobufDecoder((void **)&v265);
          goto LABEL_209;
        }
        v103 = v101;
        v104 = v102;
        v45 = (unint64_t)&v265;
        specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)(&v263);
        v245 = 0;
        v243 = v22;
        v244 = v18;
        outlined release of ProtobufDecoder((void **)&v265);
        outlined consume of Data._Representation(v103, v104);
        v105 = v263;
        *(_QWORD *)&v263 = MEMORY[0x24BEE4B00];
        v106 = v105 + 64;
        v107 = 1 << *(_BYTE *)(v105 + 32);
        if (v107 < 64)
          v108 = ~(-1 << v107);
        else
          v108 = -1;
        v9 = v108 & *(_QWORD *)(v105 + 64);
        v22 = (unint64_t)(v107 + 63) >> 6;
        swift_bridgeObjectRetain();
        v18 = 0;
        while (2)
        {
          if (v9)
          {
            v109 = __clz(__rbit64(v9));
            v9 &= v9 - 1;
            v110 = v109 | (v18 << 6);
            goto LABEL_96;
          }
          v111 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
LABEL_259:
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
            goto LABEL_264;
          }
          v9 = v260;
          if (v111 >= v22)
            goto LABEL_165;
          v112 = *(_QWORD *)(v106 + 8 * v111);
          ++v18;
          if (v112)
            goto LABEL_95;
          v18 = v111 + 1;
          if (v111 + 1 >= v22)
            goto LABEL_165;
          v112 = *(_QWORD *)(v106 + 8 * v18);
          if (v112)
            goto LABEL_95;
          v18 = v111 + 2;
          if (v111 + 2 >= v22)
            goto LABEL_165;
          v112 = *(_QWORD *)(v106 + 8 * v18);
          if (v112)
            goto LABEL_95;
          v18 = v111 + 3;
          if (v111 + 3 >= v22)
            goto LABEL_165;
          v112 = *(_QWORD *)(v106 + 8 * v18);
          if (v112)
            goto LABEL_95;
          v18 = v111 + 4;
          if (v111 + 4 >= v22)
            goto LABEL_165;
          v112 = *(_QWORD *)(v106 + 8 * v18);
          if (v112)
            goto LABEL_95;
          v113 = v111 + 5;
          if (v113 >= v22)
          {
LABEL_165:
            swift_release();
            swift_bridgeObjectRelease();
            v180 = v263;
            type metadata accessor for [Int : CGFloat](0, &lazy cache variable for type metadata for [Int : CGFloat]);
            *((_QWORD *)&v264 + 1) = v181;
            *(_QWORD *)&v263 = v180;
            outlined init with take of Any(&v263, &v262);
            v182 = v238;
            v183 = (_QWORD *)v243;
            v184 = swift_isUniquelyReferenced_nonNull_native();
            v261 = v183;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v262, v182, v184);
            v22 = (int64_t)v261;

            swift_bridgeObjectRelease();
            v18 = v244;
            v2 = v245;
            goto LABEL_22;
          }
          v112 = *(_QWORD *)(v106 + 8 * v113);
          if (v112)
          {
            v18 = v113;
LABEL_95:
            v9 = (v112 - 1) & v112;
            v110 = __clz(__rbit64(v112)) + (v18 << 6);
LABEL_96:
            v114 = (unint64_t *)(*(_QWORD *)(v105 + 48) + 16 * v110);
            v45 = *v114;
            v115 = v114[1];
            v116 = *(_QWORD *)(*(_QWORD *)(v105 + 56) + 8 * v110);
            swift_bridgeObjectRetain_n();
            v117 = specialized FixedWidthInteger.init(_:)(v45, v115);
            if ((v118 & 1) == 0)
            {
              v45 = (unint64_t)&v263;
              specialized Dictionary.subscript.setter(v116, 0, v117);
            }
            swift_bridgeObjectRelease();
            continue;
          }
          break;
        }
        while (1)
        {
          v18 = v113 + 1;
          if (__OFADD__(v113, 1))
            break;
          if (v18 >= v22)
            goto LABEL_165;
          v112 = *(_QWORD *)(v106 + 8 * v18);
          ++v113;
          if (v112)
            goto LABEL_95;
        }
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v228 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v228)
        {
LABEL_275:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_276;
        }
LABEL_15:
        v48 = v258;
        swift_bridgeObjectRetain();
        v49 = specialized Sequence.first(where:)(v45, v250, v48);
        swift_bridgeObjectRelease();
        if (!v49)
          goto LABEL_275;
        if (*(_QWORD *)(v22 + 16))
        {
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
          v50 = Dictionary._bridgeToObjectiveC()().super.isa;
          CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v49, v50);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (!CopyWithAttributes)
            goto LABEL_277;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          CopyWithAttributes = v49;
        }
        (*(void (**)(unint64_t, uint64_t))(v254 + 8))(v9, v255);
LABEL_221:
        v45 = (unint64_t)CTFontCreateWithFontDescriptor(CopyWithAttributes, v23, 0);
        outlined consume of Data?(a1, v259);

        outlined destroy of TypesettingConfiguration(v18, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        swift_bridgeObjectRelease();
        return v45;
      case 0xBuLL:
        *(_QWORD *)&v263 = v45;
        v45 = a1;
        v170 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v263);
        if (v171)
          goto LABEL_209;
        v9 = 0;
        *((_QWORD *)&v264 + 1) = MEMORY[0x24BEE13C8];
        *(double *)&v263 = v170;
        outlined init with take of Any(&v263, &v262);
        v93 = v239;
        v94 = swift_isUniquelyReferenced_nonNull_native();
        v261 = (_QWORD *)v22;
        v45 = v22;
        v96 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v93);
        v172 = *(_QWORD *)(v22 + 16);
        v173 = (v95 & 1) == 0;
        v99 = v172 + v173;
        if (!__OFADD__(v172, v173))
          goto LABEL_156;
        goto LABEL_252;
      case 0xCuLL:
        if ((v45 & 7) == 0)
          goto LABEL_49;
        if ((v45 & 7) != 2)
          goto LABEL_237;
        v45 = a1;
        v68 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_238;
        if (v68 < 0)
          goto LABEL_269;
        v69 = *(_QWORD *)(a1 + 8) + v68;
        if (v21 < v69)
        {
LABEL_237:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_238:
          v226 = v259;
          swift_bridgeObjectRelease();
          v208 = v256;
          v209 = v226;
          goto LABEL_210;
        }
        *(_QWORD *)(a1 + 24) = 96;
        *(_QWORD *)(a1 + 32) = v69;
LABEL_49:
        v45 = a1;
        v70 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_238;
        *((_QWORD *)&v264 + 1) = MEMORY[0x24BEE1768];
        *(_QWORD *)&v263 = -(v70 & 1) ^ (v70 >> 1);
        outlined init with take of Any(&v263, &v262);
        v54 = (id *)&v264 + 1;
LABEL_21:
        v55 = *(v54 - 32);
        v56 = swift_isUniquelyReferenced_nonNull_native();
        v261 = (_QWORD *)v22;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v262, v55, v56);
        v22 = (int64_t)v261;

        swift_bridgeObjectRelease();
LABEL_22:
        v20 = *(_QWORD *)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 16);
        if (v20 >= v21)
          goto LABEL_4;
        continue;
      case 0xDuLL:
        if ((v45 & 7) != 2)
          goto LABEL_208;
        v45 = a1;
        v80 = ProtobufDecoder.decodeDataBuffer()();
        if (v2)
          goto LABEL_209;
        v82 = 0;
        v45 = 0xC000000000000000;
        if (!v80)
          goto LABEL_66;
        v9 = v81 - v80;
        if (v81 == v80)
          goto LABEL_66;
        v83 = v80 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
        v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v86 = v85;
        if (__OFADD__(v83, v9))
          goto LABEL_272;
        if ((uint64_t)(v83 + v9) < v83)
          goto LABEL_273;
        v87 = v84;
        v82 = Data._Representation.subscript.getter();
        v45 = v88;
        outlined consume of Data._Representation(v87, v86);
LABEL_66:
        static String.Encoding.utf8.getter();
        v89 = String.init(data:encoding:)();
        if (!v90)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation(v82, v45);
LABEL_209:
          swift_bridgeObjectRelease();
          v208 = v256;
          v209 = v259;
LABEL_210:
          outlined consume of Data?(v208, v209);
          goto LABEL_211;
        }
        v91 = v89;
        v92 = v90;
        v9 = 0;
        outlined consume of Data._Representation(v82, v45);
        *((_QWORD *)&v264 + 1) = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v263 = v91;
        *((_QWORD *)&v263 + 1) = v92;
        outlined init with take of Any(&v263, &v262);
        v93 = v235;
        v94 = swift_isUniquelyReferenced_nonNull_native();
        v261 = (_QWORD *)v22;
        v45 = v22;
        v96 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v93);
        v97 = *(_QWORD *)(v22 + 16);
        v98 = (v95 & 1) == 0;
        v99 = v97 + v98;
        if (__OFADD__(v97, v98))
          goto LABEL_258;
LABEL_156:
        v174 = v95;
        if (*(_QWORD *)(v22 + 24) < v99)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v99, v94);
          v175 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v93);
          if ((v174 & 1) != (v176 & 1))
            goto LABEL_288;
          v96 = v175;
          v22 = (int64_t)v261;
          if ((v174 & 1) == 0)
            goto LABEL_159;
LABEL_162:
          v178 = (_OWORD *)(*(_QWORD *)(v22 + 56) + 32 * v96);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v178);
          outlined init with take of Any(&v262, v178);
          goto LABEL_184;
        }
        if ((v94 & 1) != 0)
        {
          v22 = (int64_t)v261;
          if ((v95 & 1) != 0)
            goto LABEL_162;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v22 = (int64_t)v261;
          if ((v174 & 1) != 0)
            goto LABEL_162;
        }
LABEL_159:
        specialized _NativeDictionary._insert(at:key:value:)(v96, (uint64_t)v93, &v262, (_QWORD *)v22);
        v177 = v93;
LABEL_184:

        swift_bridgeObjectRelease();
        v2 = 0;
        goto LABEL_185;
      case 0xEuLL:
        *(_QWORD *)&v263 = v45;
        v45 = a1;
        v153 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v263);
        if (v154)
          goto LABEL_209;
        v9 = 0;
        *((_QWORD *)&v264 + 1) = MEMORY[0x24BEE13C8];
        *(double *)&v263 = v153;
        outlined init with take of Any(&v263, &v262);
        v93 = v240;
        v94 = swift_isUniquelyReferenced_nonNull_native();
        v261 = (_QWORD *)v22;
        v45 = v22;
        v96 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v93);
        v155 = *(_QWORD *)(v22 + 16);
        v156 = (v95 & 1) == 0;
        v99 = v155 + v156;
        if (!__OFADD__(v155, v156))
          goto LABEL_156;
        goto LABEL_251;
      case 0xFuLL:
        *(_QWORD *)&v263 = v45;
        v45 = a1;
        v52 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v263);
        v2 = v53;
        if (v53)
          goto LABEL_209;
        *((_QWORD *)&v264 + 1) = MEMORY[0x24BEE50B0];
        *(double *)&v263 = v52;
        outlined init with take of Any(&v263, &v262);
        v54 = (id *)&v266 + 1;
        goto LABEL_21;
      case 0x10uLL:
        *(_QWORD *)&v263 = v45;
        v45 = a1;
        v127 = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v263);
        v2 = v128;
        if (v128)
          goto LABEL_209;
        *((_QWORD *)&v264 + 1) = MEMORY[0x24BEE44F0];
        LODWORD(v263) = v127;
        outlined init with take of Any(&v263, &v262);
        v54 = (id *)&v267;
        goto LABEL_21;
      default:
        switch(v45 & 7)
        {
          case 0uLL:
            v45 = a1;
            v179 = v2;
            ProtobufDecoder.decodeVarint()();
            goto LABEL_197;
          case 1uLL:
            v206 = *(_QWORD *)(a1 + 8);
            v45 = v206 + 8;
            if (v21 < v206 + 8)
              goto LABEL_208;
            specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v206);
            goto LABEL_201;
          case 2uLL:
            v45 = a1;
            v179 = v2;
            ProtobufDecoder.decodeDataBuffer()();
LABEL_197:
            v2 = v179;
            if (v179)
              goto LABEL_209;
            goto LABEL_22;
          case 5uLL:
            v207 = *(_QWORD *)(a1 + 8);
            v45 = v207 + 4;
            if (v21 < v207 + 4)
              goto LABEL_208;
            specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v207);
LABEL_201:
            *(_QWORD *)(a1 + 8) = v45;
            break;
          default:
            goto LABEL_208;
        }
        goto LABEL_22;
    }
  }
}

id specialized CodableTextAttachment.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  const char **v2;
  uint64_t v3;
  id v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Class isa;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v3 = v1;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4B8]), sel_init);
  v6 = a1[1];
  v7 = a1[2];
  if (v6 >= v7)
  {
LABEL_46:
    a1[3] = 0;
    return v5;
  }
  while (1)
  {
    v9 = a1[3];
    if (v9)
    {
      v10 = a1[4];
      if (v6 < v10)
        goto LABEL_12;
      if (v10 < v6)
        goto LABEL_47;
      a1[3] = 0;
    }
    v9 = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_48;
    if (v9 < 8)
    {
LABEL_47:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_48:

      return v5;
    }
LABEL_12:
    v11 = v9 >> 3;
    if (v9 >> 3 == 3)
      goto LABEL_5;
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        if ((v9 & 7) != 2)
          goto LABEL_47;
        ProtobufDecoder.beginMessage()();
        if (v3)
          goto LABEL_48;
        CodablePlatformImage.init(from:)(a1, &v35);
        v3 = 0;
        v2 = (const char **)a1[5];
        if (!v2[2])
          goto LABEL_55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v12 = v2[2];
          if (!v12)
            goto LABEL_56;
        }
        else
        {
          v2 = (const char **)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          v12 = v2[2];
          if (!v12)
            goto LABEL_56;
        }
        v13 = v12 - 1;
        v14 = v2[(_QWORD)v13 + 4];
        v2[2] = v13;
        a1[5] = v2;
        a1[2] = v14;
        v15 = v35;
        v2 = (const char **)&v35[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage];
        swift_beginAccess();
        _NSTextAttachmentSetImage(v5, *v2);

      }
      else
      {
        switch(v9 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_48;
            goto LABEL_5;
          case 1uLL:
            v8 = a1[1] + 8;
            if (v7 >= v8)
              goto LABEL_4;
            goto LABEL_47;
          case 2uLL:
            v29 = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_48;
            if (v29 < 0)
              goto LABEL_58;
            v8 = a1[1] + v29;
            if (v7 < v8)
              goto LABEL_47;
LABEL_4:
            a1[1] = v8;
            break;
          case 5uLL:
            v8 = a1[1] + 4;
            if (v7 < v8)
              goto LABEL_47;
            goto LABEL_4;
          default:
            goto LABEL_47;
        }
      }
      goto LABEL_5;
    }
    if ((v9 & 7) != 2)
      goto LABEL_47;
    v2 = (const char **)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = (const char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)(v2[2] + 1), 1, v2);
    v17 = (unint64_t)v2[2];
    v16 = (unint64_t)v2[3];
    if (v17 >= v16 >> 1)
      v2 = (const char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v2);
    v2[2] = (const char *)(v17 + 1);
    v2[v17 + 4] = (const char *)v7;
    a1[5] = v2;
    v18 = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_48;
    if (v18 < 0)
      break;
    v19 = a1[1] + v18;
    if (v7 < v19)
      goto LABEL_47;
    a1[2] = v19;
    v20 = Data.init(from:)((uint64_t)a1);
    v22 = (_QWORD *)a1[5];
    if (!v22[2])
      goto LABEL_57;
    v2 = (const char **)v20;
    v23 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v24 = v22[2];
      if (!v24)
        goto LABEL_45;
    }
    else
    {
      v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v24 = v22[2];
      if (!v24)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    v25 = v24 - 1;
    v26 = v22[v25 + 4];
    v22[2] = v25;
    a1[5] = v22;
    a1[2] = v26;
    v27 = v5;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v27, sel_setContents_, isa);

    outlined consume of Data._Representation((uint64_t)v2, v23);
LABEL_5:
    v6 = a1[1];
    v7 = a1[2];
    if (v6 >= v7)
      goto LABEL_46;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  __break(1u);
  v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v32 = v31[2];
  if (!v32)
  {
    __break(1u);
    v31 = (_QWORD *)a1[5];
    if (v31[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v32 = v31[2];
        if (v32)
          goto LABEL_53;
LABEL_62:
        __break(1u);
        JUMPOUT(0x234B36C34);
      }
    }
    else
    {
      __break(1u);
    }
    v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
    v32 = v31[2];
    if (!v32)
      goto LABEL_62;
  }
LABEL_53:
  v33 = v32 - 1;
  v34 = v31[v33 + 4];
  v31[2] = v33;

  a1[5] = v31;
  a1[2] = v34;
  return v5;
}

void *specialized CodableAdaptiveImageGlyph.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class isa;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 < v6)
  {
    v1 = 0;
    while (1)
    {
      v7 = a1[3];
      if (!v7)
        goto LABEL_11;
      v8 = a1[4];
      if (v5 >= v8)
        break;
LABEL_13:
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((v7 & 7) != 2)
          goto LABEL_36;
        v3 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v10 = v3[2];
        v9 = v3[3];
        if (v10 >= v9 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v3);
        v3[2] = v10 + 1;
        v3[v10 + 4] = v6;
        a1[5] = v3;
        v11 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_37;
        if (v11 < 0)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          __break(1u);
          v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          v29 = v28[2];
          if (!v29)
          {
            __break(1u);
            JUMPOUT(0x234B36FA0);
          }
          v26 = v29 - 1;
          v27 = v28[v26 + 4];
          v28[2] = v26;

          a1[5] = v28;
          a1[2] = v27;
          return v1;
        }
        v12 = a1[1] + v11;
        if (v6 < v12)
          goto LABEL_36;
        a1[2] = v12;
        v13 = Data.init(from:)((uint64_t)a1);
        v15 = (_QWORD *)a1[5];
        if (!v15[2])
          goto LABEL_43;
        v3 = (_QWORD *)v13;
        v16 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v17 = v15[2];
          if (!v17)
            goto LABEL_35;
        }
        else
        {
          v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          v17 = v15[2];
          if (!v17)
          {
LABEL_35:
            __break(1u);
LABEL_36:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_37:

            return v1;
          }
        }
        v18 = v17 - 1;
        v19 = v15[v18 + 4];
        v15[2] = v18;
        a1[5] = v15;
        a1[2] = v19;
        v20 = objc_allocWithZone(MEMORY[0x24BEBB458]);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v22 = objc_msgSend(v20, sel_initWithImageContent_, isa);
        outlined consume of Data._Representation((uint64_t)v3, v16);

        v1 = v22;
      }
      else
      {
        switch(v7 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (!v2)
              break;
            goto LABEL_37;
          case 1uLL:
            v23 = a1[1] + 8;
            goto LABEL_32;
          case 2uLL:
            v24 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_37;
            if (v24 < 0)
              goto LABEL_44;
            v23 = a1[1] + v24;
LABEL_32:
            if (v6 < v23)
              goto LABEL_36;
            a1[1] = v23;
            break;
          case 5uLL:
            v23 = a1[1] + 4;
            goto LABEL_32;
          default:
            goto LABEL_36;
        }
      }
      v5 = a1[1];
      v6 = a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if (v1)
          return v1;
        goto LABEL_4;
      }
    }
    if (v8 < v5)
      goto LABEL_36;
    a1[3] = 0;
LABEL_11:
    v7 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_37;
    if (v7 < 8)
      goto LABEL_36;
    goto LABEL_13;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error();
  swift_allocError();
  swift_willThrow();
  return v1;
}

ValueMetadata *type metadata accessor for CodableAttributedString()
{
  return &type metadata for CodableAttributedString;
}

uint64_t initializeBufferWithCopyOfBuffer for CodableAttributedString.Range(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CodableAttributedString.Range()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for CodableAttributedString.Range(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CodableAttributedString.Range(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAttributedString.Range(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAttributedString.Range(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAttributedString.Range()
{
  return &type metadata for CodableAttributedString.Range;
}

void *type metadata accessor for CodableAttributedString.Range.Error()
{
  return &unk_2506371E0;
}

CGFontRef specialized CodableCGFont.init(from:)(uint64_t a1)
{
  CGFontRef v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CGFontRef v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v5 >= v6)
  {
    *(_QWORD *)(a1 + 24) = 0;
    goto LABEL_4;
  }
  v1 = 0;
  while (2)
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11)
      goto LABEL_12;
    v12 = *(_QWORD *)(a1 + 32);
    if (v5 >= v12)
    {
      if (v12 < v5)
        goto LABEL_80;
      *(_QWORD *)(a1 + 24) = 0;
LABEL_12:
      v11 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_81;
      if (v11 < 8)
        goto LABEL_80;
    }
    switch(v11 >> 3)
    {
      case 1uLL:
        if ((v11 & 7) != 2)
          goto LABEL_80;
        v3 = *(_QWORD **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v14 = v3[2];
        v13 = v3[3];
        if (v14 >= v13 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v3[2] = v14 + 1;
        v3[v14 + 4] = v6;
        *(_QWORD *)(a1 + 40) = v3;
        v15 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_81;
        if (v15 < 0)
        {
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
          __break(1u);
          v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          v42 = v41[2];
          if (v42)
            goto LABEL_94;
          __break(1u);
          v41 = *(_QWORD **)(a1 + 40);
          if (v41[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v42 = v41[2];
              if (v42)
                goto LABEL_94;
LABEL_88:
              __break(1u);
              v41 = *(_QWORD **)(a1 + 40);
              if (v41[2])
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  v42 = v41[2];
                  if (!v42)
                    goto LABEL_91;
LABEL_94:
                  v43 = v42 - 1;
                  v44 = v41[v43 + 4];
                  v41[2] = v43;

                  *(_QWORD *)(a1 + 40) = v41;
                  *(_QWORD *)(a1 + 16) = v44;
                  return v1;
                }
              }
              else
              {
                __break(1u);
              }
              v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
              v42 = v41[2];
              if (v42)
                goto LABEL_94;
LABEL_91:
              __break(1u);
              swift_bridgeObjectRelease();
              v41 = *(_QWORD **)(a1 + 40);
              if (v41[2])
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  v42 = v41[2];
                  if (v42)
                    goto LABEL_94;
LABEL_116:
                  __break(1u);
                  JUMPOUT(0x234B378E0);
                }
              }
              else
              {
                __break(1u);
              }
              v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
              v42 = v41[2];
              if (v42)
                goto LABEL_94;
              goto LABEL_116;
            }
          }
          else
          {
            __break(1u);
          }
          v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
          v42 = v41[2];
          if (v42)
            goto LABEL_94;
          goto LABEL_88;
        }
        v16 = *(_QWORD *)(a1 + 8) + v15;
        if (v6 < v16)
          goto LABEL_80;
        *(_QWORD *)(a1 + 16) = v16;
        v17 = specialized CodablePlatformFont.init(from:)(a1);
        v18 = *(_QWORD **)(a1 + 40);
        if (!v18[2])
          goto LABEL_99;
        v3 = (_QWORD *)v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v19 = v18[2];
          if (!v19)
            goto LABEL_104;
        }
        else
        {
          v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          v19 = v18[2];
          if (!v19)
            goto LABEL_104;
        }
LABEL_65:
        v35 = v19 - 1;
        v36 = v18[v35 + 4];
        v18[2] = v35;
        *(_QWORD *)(a1 + 40) = v18;
        *(_QWORD *)(a1 + 16) = v36;
        v3 = v3;
        v37 = CTFontCopyGraphicsFont((CTFontRef)v3, 0);

        v1 = v37;
LABEL_7:
        v5 = *(_QWORD *)(a1 + 8);
        v6 = *(_QWORD *)(a1 + 16);
        if (v5 < v6)
          continue;
        *(_QWORD *)(a1 + 24) = 0;
        if (!v1)
        {
LABEL_4:
          lazy protocol witness table accessor for type CodableCGFont.Error and conformance CodableCGFont.Error();
          swift_allocError();
          swift_willThrow();
        }
        return v1;
      case 2uLL:
        if ((v11 & 7) != 2)
          goto LABEL_80;
        v3 = *(_QWORD **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v21 = v3[2];
        v20 = v3[3];
        if (v21 >= v20 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v3);
        v3[2] = v21 + 1;
        v3[v21 + 4] = v6;
        *(_QWORD *)(a1 + 40) = v3;
        v22 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_81;
        if (v22 < 0)
          goto LABEL_96;
        v23 = *(_QWORD *)(a1 + 8) + v22;
        if (v6 < v23)
          goto LABEL_80;
        *(_QWORD *)(a1 + 16) = v23;
        v24 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
        v7 = *(_QWORD **)(a1 + 40);
        if (!v7[2])
          goto LABEL_100;
        v3 = (_QWORD *)v24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v8 = v7[2];
          if (!v8)
            goto LABEL_103;
        }
        else
        {
          v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          v8 = v7[2];
          if (!v8)
            goto LABEL_103;
        }
        goto LABEL_6;
      case 3uLL:
        if ((v11 & 7) != 2)
          goto LABEL_80;
        v3 = *(_QWORD **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v26 = v3[2];
        v25 = v3[3];
        if (v26 >= v25 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v3);
        v3[2] = v26 + 1;
        v3[v26 + 4] = v6;
        *(_QWORD *)(a1 + 40) = v3;
        v27 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_81;
        if (v27 < 0)
          goto LABEL_97;
        v28 = *(_QWORD *)(a1 + 8) + v27;
        if (v6 < v28)
          goto LABEL_80;
        *(_QWORD *)(a1 + 16) = v28;
        v29 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
        v7 = *(_QWORD **)(a1 + 40);
        if (!v7[2])
          goto LABEL_101;
        v3 = (_QWORD *)v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v8 = v7[2];
          if (!v8)
            goto LABEL_105;
        }
        else
        {
          v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          v8 = v7[2];
          if (!v8)
            goto LABEL_105;
        }
LABEL_6:
        v9 = v8 - 1;
        v10 = v7[v9 + 4];
        v7[2] = v9;

        *(_QWORD *)(a1 + 40) = v7;
        *(_QWORD *)(a1 + 16) = v10;
        v1 = (CGFontRef)v3;
        goto LABEL_7;
      case 4uLL:
        if ((v11 & 7) != 2)
          goto LABEL_80;
        v3 = *(_QWORD **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v31 = v3[2];
        v30 = v3[3];
        if (v31 >= v30 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v3);
        v3[2] = v31 + 1;
        v3[v31 + 4] = v6;
        *(_QWORD *)(a1 + 40) = v3;
        v32 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_81;
        if (v32 < 0)
          goto LABEL_98;
        v33 = *(_QWORD *)(a1 + 8) + v32;
        if (v6 < v33)
          goto LABEL_80;
        *(_QWORD *)(a1 + 16) = v33;
        v34 = *(_QWORD *)(a1 + 48);
        swift_bridgeObjectRetain_n();
        v3 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((id *)a1, v34);
        swift_bridgeObjectRelease();
        v18 = *(_QWORD **)(a1 + 40);
        if (!v18[2])
          goto LABEL_102;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v19 = v18[2];
          if (!v19)
            goto LABEL_79;
        }
        else
        {
          v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          v19 = v18[2];
          if (!v19)
          {
LABEL_79:
            __break(1u);
LABEL_80:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_81:

            return v1;
          }
        }
        goto LABEL_65;
      default:
        switch(v11 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_81;
            goto LABEL_7;
          case 1uLL:
            v38 = *(_QWORD *)(a1 + 8) + 8;
            if (v6 < v38)
              goto LABEL_80;
            goto LABEL_73;
          case 2uLL:
            v39 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_81;
            if (v39 < 0)
              goto LABEL_106;
            v38 = *(_QWORD *)(a1 + 8) + v39;
            if (v6 < v38)
              goto LABEL_80;
LABEL_73:
            *(_QWORD *)(a1 + 8) = v38;
            break;
          case 5uLL:
            v38 = *(_QWORD *)(a1 + 8) + 4;
            if (v6 >= v38)
              goto LABEL_73;
            goto LABEL_80;
          default:
            goto LABEL_80;
        }
        goto LABEL_7;
    }
  }
}

unint64_t lazy protocol witness table accessor for type CodableCGFont.Error and conformance CodableCGFont.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error;
  if (!lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableCGFont.Error, &unk_250616478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error;
  if (!lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableCGFont.Error, &unk_250616478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error);
  }
  return result;
}

void type metadata accessor for URL?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

id *outlined retain of ProtobufDecoder(id *a1)
{
  id v2;

  v2 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void **outlined release of ProtobufDecoder(void **a1)
{
  void *v2;

  v2 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

void type metadata accessor for [JSONCodable<CFArrayRef>](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [JSONCodable<CFArrayRef>], (uint64_t (*)(uint64_t))type metadata accessor for JSONCodable<CFArrayRef>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void type metadata accessor for JSONCodable<CFArrayRef>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for JSONCodable<CFArrayRef>, (uint64_t (*)(uint64_t))type metadata accessor for CFArrayRef, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for JSONCodable);
}

uint64_t lazy protocol witness table accessor for type JSONCodable<CFArrayRef> and conformance JSONCodable<A>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type JSONCodable<CFArrayRef> and conformance JSONCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for JSONCodable<CFArrayRef>, (uint64_t)&protocol conformance descriptor for JSONCodable<A>);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformFont.Error, &unk_25062C018);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformFont.Error, &unk_25062C018);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error);
  }
  return result;
}

void type metadata accessor for [JSONCodable<[String : CGFloat]>](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, (unint64_t *)&lazy cache variable for type metadata for [JSONCodable<[String : CGFloat]>], (uint64_t (*)(uint64_t))type metadata accessor for JSONCodable<[String : CGFloat]>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7 = a3();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D0], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of Font.Resolved(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void outlined consume of (key: Font.Resolved, hash: Int, value: CTFontRef)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a1)
  {
    swift_release();
    swift_bridgeObjectRelease();

  }
}

id outlined copy of (key: Font.Resolved, hash: Int, value: CTFontRef)?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return a8;
  }
  return result;
}

uint64_t outlined release of Font.Resolved(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error;
  if (!lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAdaptiveImageGlyph.Error, &unk_25063AD50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error;
  if (!lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAdaptiveImageGlyph.Error, &unk_25063AD50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error);
  }
  return result;
}

uint64_t type metadata accessor for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableAttributedString.Range.DecodingWrapper);
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t)&protocol witness table for ResolvableDateInterval);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]);
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t)&protocol witness table for ResolvableDateInterval);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAttributedString.Range.DecodingWrapper<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;

  type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t)&protocol witness table for ResolvableDateInterval);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?);
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate, (uint64_t)&protocol witness table for ResolvableAbsoluteDate);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]);
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate, (uint64_t)&protocol witness table for ResolvableAbsoluteDate);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate, (uint64_t)&protocol witness table for ResolvableAbsoluteDate);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?);
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol witness table for ResolvableCurrentDate);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]);
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol witness table for ResolvableCurrentDate);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol witness table for ResolvableCurrentDate);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?);
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableTimer, (uint64_t)&protocol witness table for ResolvableTimer);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]);
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableTimer> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableTimer, (uint64_t)&protocol witness table for ResolvableTimer);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableTimer, (uint64_t)&protocol witness table for ResolvableTimer);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?);
  }
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v9 = type metadata accessor for CodableAttributedString.Range.DecodingWrapper(a1, v7, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t)&protocol witness table for ResolvableProgress);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]);
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t)&protocol witness table for ResolvableProgress);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t)&protocol witness table for ResolvableProgress);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?);
  }
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>)
  {
    v4 = type metadata accessor for CodableAttributedString.Range.DecodingWrapper(0, (uint64_t)&type metadata for TimeDataFormatting, (uint64_t)&protocol witness table for TimeDataFormatting, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>], (uint64_t (*)(uint64_t))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting> and conformance CodableAttributedString.Range.DecodingWrapper<A>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting> and conformance CodableAttributedString.Range.DecodingWrapper<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>, (uint64_t)&protocol conformance descriptor for CodableAttributedString.Range.DecodingWrapper<A>);
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>?, (uint64_t (*)(uint64_t))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for [ResolvableTextSegmentAttribute.Value](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [ResolvableTextSegmentAttribute.Value], type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value);
}

unint64_t lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformFont, &type metadata for CodablePlatformFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformFont, &type metadata for CodablePlatformFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformFont, &type metadata for CodablePlatformFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformFont, &type metadata for CodablePlatformFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error;
  if (!lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextAttachment.Error, &unk_250631FB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error;
  if (!lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextAttachment.Error, &unk_250631FB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error);
  }
  return result;
}

uint64_t outlined init with copy of ResolvableStringAttribute?(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  type metadata accessor for AnyTrackedValue?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)()
{
  return implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)();
}

uint64_t type metadata accessor for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableAttributedString.Range.EncodingWrapper);
}

uint64_t type metadata completion function for CodableAttributedString.Range.EncodingWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CodableAttributedString.Range.EncodingWrapper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B38980 + 4 * byte_235283F90[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CodableAttributedString.Range.EncodingWrapper(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void *type metadata accessor for CodableTextAttachment.Error()
{
  return &unk_250631FB8;
}

ValueMetadata *type metadata accessor for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:)()
{
  return &type metadata for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:);
}

uint64_t destroy for CodableAttributedString.Range.DecodingWrapper(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAttributedString.Range.DecodingWrapper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

void *type metadata accessor for CodableAdaptiveImageGlyph.Error()
{
  return &unk_25063AD50;
}

ValueMetadata *type metadata accessor for CodablePlatformFont()
{
  return &type metadata for CodablePlatformFont;
}

void *type metadata accessor for CodablePlatformFont.Error()
{
  return &unk_25062C018;
}

uint64_t storeEnumTagSinglePayload for CodableAttributedString.Range.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234B38DFC + 4 * byte_235283F9E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234B38E1C + 4 * byte_235283FA3[v4]))();
}

_BYTE *sub_234B38DFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234B38E1C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234B38E24(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234B38E2C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234B38E34(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234B38E3C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for CodableCGFont.Error()
{
  return &unk_250616478;
}

unint64_t instantiation function for generic protocol witness table for CodablePlatformFont(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont();
  result = lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:);
  if (!lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:))
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:), &type metadata for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:));
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:);
  if (!lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:))
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:), &type metadata for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:));
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:));
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)specialized partial apply()
{
  return partial apply for specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)();
}

uint64_t VStack._tree.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _VStackLayout, *(_QWORD *)(a1 + 16), (uint64_t)&protocol witness table for _VStackLayout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t VStack._tree.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _VStackLayout, *(_QWORD *)(a2 + 16), (uint64_t)&protocol witness table for _VStackLayout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
}

uint64_t (*VStack._tree.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t VStack.init(alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  _QWORD v6[2];
  char v7;

  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return _VariadicView.Tree.init(_:content:)((uint64_t)v6, (void (*)(uint64_t))partial apply for closure #1 in ZStack.init(alignment:content:), (uint64_t)&type metadata for _VStackLayout, a4, (uint64_t)&protocol witness table for _VStackLayout, a5);
}

double static VStack._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int ShouldRecordTree;
  double result;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v32;
  uint64_t v33;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v28 = *((_DWORD *)a2 + 9);
  v29 = *((_DWORD *)a2 + 8);
  v11 = a2[5];
  v12 = a2[6];
  v26 = *((_DWORD *)a2 + 15);
  v27 = *((_DWORD *)a2 + 14);
  v24 = *((_DWORD *)a2 + 17);
  v25 = *((_DWORD *)a2 + 16);
  v22 = *((_DWORD *)a2 + 19);
  v23 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 7);
  v21 = *((_DWORD *)a2 + 20);
  v36 = a3;
  v37 = a4;
  LODWORD(v54) = v6;
  v13 = type metadata accessor for VStack(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v13, v14, v15);
  v16 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _VStackLayout, a3, (uint64_t)&protocol witness table for _VStackLayout);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static VStack._makeView(view:inputs:), v16, &v35);
  v17 = v35;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v54 = v7;
  v56 = v9;
  v55 = v8;
  v57 = v10;
  v58 = v20;
  v60 = v28;
  v61 = v11;
  v62 = v12;
  v63 = v27;
  v64 = v26;
  v65 = v25;
  v66 = v24;
  v67 = v23;
  v68 = v22;
  v69 = v21;
  v32 = v17;
  v38 = v7;
  v39 = v8;
  v40 = v9;
  v41 = v10;
  v42 = v20;
  v43 = 0;
  v44 = v28;
  v45 = v11;
  v46 = v12;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v51 = v23;
  v52 = v22;
  v53 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v32, (uint64_t)&v38, (uint64_t)&type metadata for _VStackLayout, a3, (uint64_t)&protocol witness table for _VStackLayout, a4, (uint64_t)&v33);
  v59 = v29;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v33, (uint64_t)&v54);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a5 = v33;
  result = v34;
  a5[1] = v34;
  return result;
}

uint64_t closure #1 in static VStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v9[2] = type metadata accessor for VStack(0, a2, a3, a4);
  v10 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _VStackLayout, a2, (uint64_t)&protocol witness table for _VStackLayout);
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, v10, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v11;
}

uint64_t partial apply for closure #1 in static VStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static VStack._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for VStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VStack);
}

double protocol witness for static View._makeView(view:inputs:) in conformance VStack<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static VStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t _VStackLayout.alignment.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_VStackLayout.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_VStackLayout.spacing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _VStackLayout.majorAxis.getter()
{
  return 1;
}

uint64_t protocol witness for HVStack.spacing.getter in conformance _VStackLayout()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t static _VStackLayout.implicitRoot.getter()
{
  if (one-time initialization token for center != -1)
    swift_once();
  return static HorizontalAlignment.center;
}

uint64_t protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _VStackLayout@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for center != -1)
    result = swift_once();
  *(_QWORD *)a1 = static HorizontalAlignment.center;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t VStackLayout.alignment.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*VStackLayout.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t VStackLayout.spacing.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t VStackLayout.spacing.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*VStackLayout.spacing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 protocol witness for DerivedLayout.base.getter in conformance VStackLayout@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> VStack<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type VStack<EmptyView> and conformance <> VStack<A>(&lazy protocol witness table cache variable for type VStack<EmptyView> and conformance <> VStack<A>, (uint64_t)&protocol conformance descriptor for <> VStack<A>, a3, a4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type VStack<EmptyView> and conformance <> VStack<A>(&lazy protocol witness table cache variable for type VStack<EmptyView> and conformance <> VStack<A>, (uint64_t)&protocol conformance descriptor for <> VStack<A>, a3, a4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for VStack<EmptyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for VStack<EmptyView>)
  {
    v4 = type metadata accessor for VStack(0, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for VStack<EmptyView>);
  }
}

unint64_t lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout;
  if (!lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VStackLayout, &type metadata for _VStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout;
  if (!lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VStackLayout, &type metadata for _VStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type VStack<EmptyView> and conformance <> VStack<A>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<EmptyView>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](a2, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment;
  if (!lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment)
  {
    result = MEMORY[0x23B7C9C04]("tP\n", &type metadata for HorizontalAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment;
  if (!lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalAlignment, &type metadata for HorizontalAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _VStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for VStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout;
  if (!lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VStackLayout, &type metadata for VStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout;
  if (!lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VStackLayout, &type metadata for VStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout);
  }
  return result;
}

uint64_t type metadata completion function for VStack(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for _VariadicView.Tree(319, (uint64_t)&type metadata for _VStackLayout, *(_QWORD *)(a1 + 16), (uint64_t)&protocol witness table for _VStackLayout);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for VStack(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 17) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 17) & ~v5, ((unint64_t)a2 + v5 + 17) & ~v5);
  }
  return v3;
}

uint64_t destroy for VStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t initializeWithTake for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for VStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 17) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B39D18 + 4 * byte_2352845E8[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for VStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 17) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 17) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for _VStackLayout()
{
  return &type metadata for _VStackLayout;
}

ValueMetadata *type metadata accessor for VStackLayout()
{
  return &type metadata for VStackLayout;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Array();
  _ViewInputs.base.modify(v0, v1);
}

uint64_t ArrayWith2Inline.storage.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for ArrayWith2Inline.Storage(0, *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v4, v6);
}

uint64_t type metadata accessor for ArrayWith2Inline.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayWith2Inline.Storage);
}

uint64_t ArrayWith2Inline.storage.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for ArrayWith2Inline.Storage(0, *(_QWORD *)(a2 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
}

uint64_t (*ArrayWith2Inline.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ArrayWith2Inline.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ArrayWith2Inline.Storage(0, a1, a3, a4);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ArrayWith2Inline.Storage(0, a2, v4, v5);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v8 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32);
  v9(a4, a1, a3);
  v9(v8, a2, a3);
  type metadata accessor for ArrayWith2Inline.Storage(0, a3, v10, v11);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.init<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  Swift::Int v36;
  char *v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t AssociatedConformanceWitness;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v83 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v70 = type metadata accessor for IteratorSequence();
  MEMORY[0x24BDAC7A8](v70);
  v69 = (char *)&v67 - v8;
  v9 = type metadata accessor for Optional();
  v76 = *(_QWORD *)(v9 - 8);
  v77 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v74 = (char *)&v67 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v78 = (char *)&v67 - v14;
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v73 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v72 = (char *)&v67 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v75 = (char *)&v67 - v21;
  v79 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v80 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](v22);
  v68 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v84 = (char *)&v67 - v25;
  v26 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = a2;
  v82 = type metadata accessor for ArrayWith2Inline.Storage(0, a2, v30, v31);
  v32 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v34 = (uint64_t *)((char *)&v67 - v33);
  v35 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v35 >= 3)
  {
    v36 = v35;
    if (type metadata accessor for Array() == a3 || type metadata accessor for ContiguousArray() == a3)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, a1, a3);
      v41 = Array.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(a1, a3);
      *v34 = v41;
      v42 = v82;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v32 + 32))(v83, v34, v42);
    }
    static Array._allocateUninitialized(_:)();
    v86 = ContiguousArray.init(arrayLiteral:)();
    ContiguousArray.reserveCapacity(_:)(v36);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, a1, a3);
    ContiguousArray.append<A>(contentsOf:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(a1, a3);
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, a1, a3);
  dispatch thunk of Sequence.makeIterator()();
  v37 = v78;
  v38 = v80;
  dispatch thunk of IteratorProtocol.next()();
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v40 = a1;
  if (v39(v37, 1, v85) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(a1, a3);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v84, v38);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v37, v77);
  }
  else
  {
    v67 = v15;
    v44 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v45 = v75;
    v46 = v37;
    v47 = v85;
    v44(v75, v46, v85);
    v48 = v74;
    dispatch thunk of IteratorProtocol.next()();
    if (v39(v48, 1, v47) == 1)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v40, a3);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v84, v38);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v48, v77);
      v44((char *)v83, v45, v85);
    }
    else
    {
      v78 = v40;
      v49 = v72;
      v50 = v85;
      v44(v72, v48, v85);
      v51 = v71;
      dispatch thunk of IteratorProtocol.next()();
      if (v39(v51, 1, v50) != 1)
      {
        v77 = a3;
        v54 = v85;
        v44(v73, v51, v85);
        getContiguousArrayStorageType<A>(for:)(v54, v54);
        v55 = v67;
        v56 = *(_QWORD *)(v67 + 72);
        swift_allocObject();
        v57 = static Array._adoptStorage(_:count:)();
        v59 = v58;
        v76 = v26;
        v60 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 16);
        v60(v58, v45, v54);
        v60(v59 + v56, v49, v54);
        v60(v59 + 2 * v56, v73, v54);
        v87 = v57;
        v61 = type metadata accessor for Array();
        _ViewInputs.base.modify(v61, v62);
        v86 = ContiguousArray.init(arrayLiteral:)();
        v63 = v79;
        v64 = v68;
        v65 = v84;
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v68, v84, v38);
        MEMORY[0x23B7C6FA0](v64, v38, AssociatedConformanceWitness);
        type metadata accessor for ContiguousArray();
        MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C30], v70);
        ContiguousArray.append<A>(contentsOf:)();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v77);
        v66 = *(void (**)(char *, uint64_t))(v67 + 8);
        v66(v73, v54);
        v66(v49, v54);
        v66(v75, v54);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v38);
LABEL_13:
        *v83 = v86;
        return swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v78, a3);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v84, v38);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v51, v77);
      v52 = v85;
      v53 = (char *)v83 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      v44((char *)v83, v45, v52);
      v44(v53, v49, v52);
    }
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.startIndex.getter()
{
  return 0;
}

void ArrayWith2Inline.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = type metadata accessor for ArrayWith2Inline.Storage(0, *(_QWORD *)(a1 + 16), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v10 - v8, v4, v5, v7);
  v9 = (char *)sub_234B3A958 + 4 * byte_2352847F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B3A958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return 1;
}

void ArrayWith2Inline.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  v8 = type metadata accessor for ArrayWith2Inline.Storage(0, v3, v6, v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - v11, v2, v8, v9);
  v12 = (char *)sub_234B3AAF0 + 4 * byte_2352847F4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B3AAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(v3, v4, v0);
  if (!v2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v1, v3, v0);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void key path setter for ArrayWith2Inline.subscript(_:) : <A>ArrayWith2Inline<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v14 - v6;
  v9 = *v8;
  (*(void (**)(char *, double))(v10 + 16))((char *)&v14 - v6, v5);
  v13 = type metadata accessor for ArrayWith2Inline(0, v4, v11, v12);
  ArrayWith2Inline.subscript.setter((uint64_t)v7, v9, v13);
}

void ArrayWith2Inline.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[6];

  v14[4] = a2;
  v4 = *(_QWORD *)(a3 + 16);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v5);
  v8 = type metadata accessor for ArrayWith2Inline.Storage(0, v4, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v14 - v12, v3, v8, v11);
  v13 = (char *)&loc_234B3AE20 + *((int *)qword_234B3B100 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_234B3AE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  if (*(_QWORD *)(v7 - 96))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x234B3B100);
  }
  v8 = v0;
  v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(v8, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v3, v2);
  swift_storeEnumTagMultiPayload();
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v5, v1);
}

void (*ArrayWith2Inline.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  ArrayWith2Inline.subscript.getter(a2, a3);
  return ArrayWith2Inline.subscript.modify;
}

void ArrayWith2Inline.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    v5 = v2[3];
    v6 = v2[4];
    v7 = v2[1];
    v8 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    ArrayWith2Inline.subscript.setter((uint64_t)v3, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ArrayWith2Inline.subscript.setter((*a1)[6], *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v2);
}

Swift::Int __swiftcall ArrayWith2Inline.index(after:)(Swift::Int after)
{
  return after + 1;
}

Swift::Int __swiftcall ArrayWith2Inline.index(before:)(Swift::Int before)
{
  return before - 1;
}

Swift::Int __swiftcall ArrayWith2Inline.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int __swiftcall ArrayWith2Inline.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t ArrayWith2Inline._copyToContiguousArray()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a1);
  v3 = type metadata accessor for LazySequence();
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - v4;
  v6 = *(_QWORD *)(a1 + 16);
  v15 = type metadata accessor for LazyMapSequence();
  MEMORY[0x24BDAC7A8](v15);
  v9 = type metadata accessor for ArrayWith2Inline.Storage(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (uint64_t *)((char *)&v15 - v12);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v15 - v12, v1, v9, v11);
  if (swift_getEnumCaseMultiPayload() == 2)
    return MEMORY[0x23B7C6E44](*v13, v6);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  Sequence.enumerated()();
  *(_QWORD *)(swift_allocObject() + 16) = v6;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE25B0], v3);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v3);
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE2B40], v15);
  return Array.init<A>(_:)();
}

void protocol witness for MutableCollection.subscript.setter in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  ArrayWith2Inline.subscript.setter(a1, *a2, a3);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ArrayWith2Inline<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ArrayWith2Inline.subscript.modify(v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  specialized MutableCollection<>.subscript.setter();
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a3);
  v5 = type metadata accessor for Slice();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ArrayWith2Inline<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a3);
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance ArrayWith2Inline<A>()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance ArrayWith2Inline<A>()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance ArrayWith2Inline<A>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result - 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ArrayWith2Inline<A>(_QWORD *result)
{
  --*result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ArrayWith2Inline<A>(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance ArrayWith2Inline<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;

  ArrayWith2Inline.endIndex.getter(a1, a2, a3, a4);
  *a5 = v6;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ArrayWith2Inline.subscript.read(v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*ArrayWith2Inline.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = malloc(*(_QWORD *)(v6 + 64));
  ArrayWith2Inline.subscript.getter(a2, a3);
  return ArraySlice.subscript.readspecialized ;
}

uint64_t protocol witness for Collection.subscript.getter in conformance ArrayWith2Inline<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>);
  return MutableCollection<>.subscript.getter(a1, a2, v6, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance ArrayWith2Inline<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a1);
  return RandomAccessCollection<>.indices.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ArrayWith2Inline<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ArrayWith2Inline<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance ArrayWith2Inline<A>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ArrayWith2Inline<A>(_QWORD *result)
{
  ++*result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ArrayWith2Inline<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a1);
  result = type metadata accessor for IndexingIterator();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ArrayWith2Inline<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ArrayWith2Inline<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = ArrayWith2Inline._copyToContiguousArray()(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

void ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[10];
  uint64_t TupleTypeMetadata2;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a1;
  v6 = v5;
  v32 = a2;
  v30 = a5;
  v35 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v26[6] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v26[9] = (char *)v26 - v9;
  v31 = a4;
  v29 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v28 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v26[8] = (char *)v26 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v26[7] = (char *)v26 - v15;
  v34 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v21 = type metadata accessor for ArrayWith2Inline.Storage(0, v8, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)v26 - v24, v6, v21, v23);
  v25 = (char *)sub_234B3BBB0 + 4 * byte_2352847F8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B3BBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 128) + 32);
  *(_QWORD *)(v6 - 192) = v7;
  v7(v5, v4, v1);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
  v8(v2, v3);
  v9 = swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v6 - 184) = &v21;
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v6 - 160);
  v17 = v1;
  v18 = v10;
  v11 = *(_QWORD *)(v6 - 152);
  v19 = *(_QWORD *)(v6 - 144);
  v20 = v11;
  v12 = type metadata accessor for Error();
  v13 = *(_QWORD *)(v6 - 216);
  v14 = *(_QWORD *)(v6 - 136);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:), (uint64_t)&v16, v1, v12, v10, MEMORY[0x24BEE3F20], v6 - 112);
  if (v14)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 128) + 8))(v5, v1);
  v8(v2, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 192))(v2, v5, v1);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 32))(*(_QWORD *)(v6 - 168), v13, v10);
}

uint64_t closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  unint64_t v12;
  uint64_t result;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = type metadata accessor for Error();
  result = _sSpsRi_zrlE17withMemoryRebound2to8capacity_qd_1_qd__m_Siqd_1_Spyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lF(a4, 2, (uint64_t)partial apply for closure #1 in closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:), (uint64_t)v14, a1, TupleTypeMetadata2, a4, v12, a5, MEMORY[0x24BEE3F20], (uint64_t)&v19);
  if (v6)
    *a6 = v19;
  return result;
}

void ArrayWith2Inline.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v4);
  v7 = type metadata accessor for ArrayWith2Inline.Storage(0, v3, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v13 - v11, v2, v7, v10);
  v12 = (char *)sub_234B3C214 + 4 * byte_2352847FC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B3C214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  v7 = v0 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v0, v5, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v1, v3);
  return swift_storeEnumTagMultiPayload();
}

Swift::Void __swiftcall ArrayWith2Inline.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  v5 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArrayWith2Inline.Storage(0, *(_QWORD *)(v8 + 16), v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v17 - v14;
  if (a1 >= 3)
  {
    (*(void (**)(char *, uint64_t *, uint64_t, double))(v12 + 16))(v15, v2, v11, v13);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v16 = ContiguousArray.capacity.getter();
      swift_release();
      if (v16 >= a1)
        return;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }
    static Array._allocateUninitialized(_:)();
    v18 = ContiguousArray.init(arrayLiteral:)();
    type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(a1);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 16))(v7, v2, v3);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v3);
    ContiguousArray.append<A>(contentsOf:)();
    (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v2, v11);
    *v2 = v18;
    swift_storeEnumTagMultiPayload();
  }
}

Swift::Void __swiftcall ArrayWith2Inline.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  void (*v12)(uint64_t *, uint64_t);
  void (*v13)(uint64_t *, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v5 = v4;
  v7 = type metadata accessor for ArrayWith2Inline.Storage(0, *(_QWORD *)(v1 + 16), v2, v3);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (uint64_t *)((char *)&v14 - v10);
  (*(void (**)(char *, uint64_t *, uint64_t, double))(v8 + 16))((char *)&v14 - v10, v4, v7, v9);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v15 = *v11;
    if (keepingCapacity)
    {
      v12 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
      v12(v4, v7);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for ContiguousArray();
      ContiguousArray.removeAll(keepingCapacity:)(1);
      v12(v4, v7);
      *v4 = v15;
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v4, v7);
    }
  }
  else
  {
    v13 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
    v13(v11, v7);
    v13(v5, v7);
  }
  swift_storeEnumTagMultiPayload();
}

void ArrayWith2Inline.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a4);
  v4 = type metadata accessor for Slice();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v4);
  type metadata accessor for ConcatenatedCollection();
}

void sub_234B3C808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ConcatenatedCollection<A, B>, a1);
  *(_QWORD *)(v3 - 120) = a1;
  *(_QWORD *)(v3 - 112) = v2;
  *(_QWORD *)(v3 - 240) = v5;
  *(_QWORD *)(v3 - 104) = v5;
  *(_QWORD *)(v3 - 96) = v1;
  *(_QWORD *)(v3 - 176) = v1;
  type metadata accessor for ConcatenatedCollection();
}

uint64_t sub_234B3C838(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void (*v32)(_QWORD *, uint64_t);
  uint64_t (*v34)(_QWORD, _QWORD, _QWORD);
  uint64_t v35;
  _BYTE v36[96];

  *(_QWORD *)(v6 - 232) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v6 - 248) = &v36[-v7];
  v8 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v6 - 192) = &v36[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v6 - 224) = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v6 - 184) = &v36[-v12];
  v13 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v6 - 208) = v1;
  *(_QWORD *)(v6 - 200) = v13;
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v6 - 256) = &v36[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v6 - 128) = &v36[-v17];
  *(_QWORD *)(v6 - 152) = v3;
  v18 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v36[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = *(_QWORD *)(v5 + 16);
  v25 = type metadata accessor for ArrayWith2Inline.Storage(0, v22, v23, v24);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v28 = v2;
  v30 = &v36[-v29];
  v31 = v28;
  (*(void (**)(double))(v26 + 16))(v27);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    *(_QWORD *)(v6 - 288) = v30;
    *(_QWORD *)(v6 - 280) = v26;
    *(_QWORD *)(v6 - 272) = v22;
    *(_QWORD *)(v6 - 264) = v8;
    *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 168);
    v34 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE2C58];
    type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for PartialRangeUpTo<Int>, MEMORY[0x24BEE2C58]);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v5);
    lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>, &lazy cache variable for type metadata for PartialRangeUpTo<Int>, v34, MEMORY[0x24BEE2C68]);
    v35 = *(_QWORD *)(v6 - 184);
    MutableCollection.subscript.getter();
    concatenate<A, B>(_:_:)(v35, *(_QWORD *)(v6 - 160), v4, *(_QWORD *)(v6 - 152), *(_QWORD *)(v6 - 176), *(_QWORD *)(v6 - 144), *(_QWORD *)(v6 - 128));
  }
  *(_QWORD *)(v6 - 120) = *v30;
  v32 = *(void (**)(_QWORD *, uint64_t))(v26 + 8);
  v32(v31, v25);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, _QWORD))(v18 + 16))(v21, *(_QWORD *)(v6 - 160), *(_QWORD *)(v6 - 152));
  type metadata accessor for ContiguousArray();
  ContiguousArray.replaceSubrange<A>(_:with:)();
  v32(v31, v25);
  *v31 = *(_QWORD *)(v6 - 120);
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ArrayWith2Inline.init()(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

void protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance ArrayWith2Inline<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ArrayWith2Inline.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5);
}

uint64_t sub_234B3CCF0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance ArrayWith2Inline<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return ArrayWith2Inline.init<A>(_:)(a1, *(_QWORD *)(a3 + 16), a2, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2)
{
  ArrayWith2Inline.append(_:)(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance ArrayWith2Inline<A>()
{
  return RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance ArrayWith2Inline<A>()
{
  return RangeReplaceableCollection.insert<A>(contentsOf:at:)();
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance ArrayWith2Inline<A>()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, a3);
  return RangeReplaceableCollection<>.removeAll(where:)();
}

void static ArrayWith2Inline<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  double v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  char *v31;
  _QWORD v32[12];
  uint64_t v33;
  uint64_t v34;

  v32[9] = a4;
  v33 = a1;
  v34 = a2;
  v32[11] = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v32[5] = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v32[4] = (char *)v32 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v32[3] = (char *)v32 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v32[8] = (char *)v32 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v32[7] = (char *)v32 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v32[6] = (char *)v32 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v32[2] = (char *)v32 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v32[1] = (char *)v32 - v18;
  v21 = type metadata accessor for ArrayWith2Inline.Storage(0, v19, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v23);
  MEMORY[0x24BDAC7A8](v24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v26 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v29 = (char *)v32 + *(int *)(v28 + 48) - v27;
  v32[10] = v22;
  v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  v30((char *)v32 - v27, v33, v21, v26);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v29, v34, v21);
  v31 = (char *)sub_234B3D078 + 4 * byte_235284800[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B3D078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v5(v6, v2, v0);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 104) + 8))(v6, v1);
    v9 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v8 - 104);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    v12 = *(_QWORD *)(v8 - 184);
    v11(v12, v6, v1);
    v13 = *(_QWORD *)(v8 - 176);
    v11(v13, v7, v1);
    v9 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v14(v13, v1);
    v14(v12, v1);
    v4 = *(_QWORD *)(v8 - 112);
    v3 = v0;
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return v9 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <A> ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static ArrayWith2Inline<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t ArrayWith2Inline.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ArrayWith2Inline(0, a2, a3, a4);
  Array.withUnsafeBufferPointer<A>(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ArrayWith2Inline.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v6 = type metadata accessor for UnsafeBufferPointer();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE09D8], v6);
  return ArrayWith2Inline.init<A>(_:)((char *)v8, a3, v6, a4);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ArrayWith2Inline.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), a3, a4);
}

void getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  else
    type metadata accessor for _ContiguousArrayStorage();
}

uint64_t sub_234B3D498()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArrayWith2Inline._copyToContiguousArray()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

_QWORD *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
        return (_QWORD *)type metadata accessor for ContiguousArray();
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;

  return closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

unint64_t type metadata accessor for Error()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Error;
  if (!lazy cache variable for type metadata for Error)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Error);
  }
  return result;
}

uint64_t partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, _QWORD *a2)
{
  return partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v5 = *(uint64_t (**)(_QWORD *))(v2 + 32);
  v8[0] = UnsafeMutableBufferPointer.init(start:count:)();
  v8[1] = v6;
  result = v5(v8);
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ArrayWith2Inline.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in ArrayWith2Inline.init(arrayLiteral:)(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t type metadata accessor for ArrayWith2Inline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayWith2Inline);
}

void base witness table accessor for BidirectionalCollection in ArrayWith2Inline<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ArrayWith2Inline<A>()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ArrayWith2Inline<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], a1, &v3);
}

void base witness table accessor for Collection in ArrayWith2Inline<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in ArrayWith2Inline<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4220], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ArrayWith2Inline<A>()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BA8]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE1B68]);
    v6 = v5;
    v7 = lazy protocol witness table accessor for type Int and conformance Int();
    v8[0] = MEMORY[0x24BEE17A8];
    v8[1] = v7;
    result = MEMORY[0x23B7C9C04](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ArrayWith2Inline<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for Sequence in ArrayWith2Inline<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ArrayWith2Inline<A>()
{
  return MEMORY[0x24BEE1780];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ArrayWith2Inline<A>()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD8]);
}

void associated type witness table accessor for Collection.SubSequence : Collection in ArrayWith2Inline<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ArrayWith2Inline<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in ArrayWith2Inline<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4240], a1, &v3);
}

void sub_234B3D844(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = type metadata accessor for ArrayWith2Inline(0, *(uint64_t *)((char *)a2 + a3 - 8), a3, a4);
  ArrayWith2Inline.subscript.getter(v4, v5);
}

uint64_t sub_234B3D898()
{
  return 8;
}

_QWORD *sub_234B3D8A4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for ArrayWith2Inline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ArrayWith2Inline.Storage(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ArrayWith2Inline(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5)
    v5 += (v5 + v6) & ~v6;
  if (v5 <= 8)
    v5 = 8;
  v8 = *(unsigned __int8 *)(a1 + v5);
  if (v8 >= 3)
  {
    if (v5 <= 3)
      v9 = v5;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
    return swift_release();
  if (v8 != 1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
  v11 = ~v6;
  v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v12(a1, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)((v7 + a1) & v11, v3);
}

_BYTE *initializeWithCopy for ArrayWith2Inline(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_BYTE *, unsigned __int8 *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7)
    v7 += (v7 + v8) & ~v8;
  if (v7 <= 8)
    v10 = 8;
  else
    v10 = v7;
  v11 = __src[v10];
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v10] = 2;
    swift_retain();
  }
  else if (v11 == 1)
  {
    v13 = ~v8;
    v14 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16);
    v14(__dst, __src, *(_QWORD *)(a3 + 16));
    v14((_BYTE *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
    __dst[v10] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for ArrayWith2Inline(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(unsigned __int8 *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(unsigned __int8 *, unsigned __int8 *, uint64_t);

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7)
      v7 += (v7 + v8) & ~v8;
    if (v7 <= 8)
      v10 = 8;
    else
      v10 = v7;
    v11 = __dst[v10];
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      swift_release();
    }
    else if (v11 == 1)
    {
      v14 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v14(__dst, *(_QWORD *)(a3 + 16));
      v14((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), v5);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    v15 = __src[v10];
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v10] = 2;
      swift_retain();
    }
    else if (v15 == 1)
    {
      v17 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v17(__dst, __src, v5);
      v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
      __dst[v10] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

_BYTE *initializeWithTake for ArrayWith2Inline(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_BYTE *, unsigned __int8 *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7)
    v7 += (v7 + v8) & ~v8;
  if (v7 <= 8)
    v10 = 8;
  else
    v10 = v7;
  v11 = __src[v10];
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v10] = 2;
  }
  else if (v11 == 1)
  {
    v13 = ~v8;
    v14 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32);
    v14(__dst, __src, *(_QWORD *)(a3 + 16));
    v14((_BYTE *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
    __dst[v10] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for ArrayWith2Inline(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(unsigned __int8 *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(unsigned __int8 *, unsigned __int8 *, uint64_t);

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7)
      v7 += (v7 + v8) & ~v8;
    if (v7 <= 8)
      v10 = 8;
    else
      v10 = v7;
    v11 = __dst[v10];
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      swift_release();
    }
    else if (v11 == 1)
    {
      v14 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v14(__dst, *(_QWORD *)(a3 + 16));
      v14((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), v5);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    v15 = __src[v10];
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v10] = 2;
    }
    else if (v15 == 1)
    {
      v17 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v17(__dst, __src, v5);
      v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
      __dst[v10] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for ArrayWith2Inline(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 <= v4)
    v5 = v4;
  v6 = 8;
  if (v5 > 8)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_23;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 4)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_23;
LABEL_16:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 253);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B3E294 + 4 * byte_235284827[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ArrayWith2Inline(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6)
    v7 = v6;
  if (v7 <= 8)
    v7 = 8;
  v8 = v7 + 1;
  if (a3 < 0xFD)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 252) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v10 = a2 - 253;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t type metadata completion function for ArrayWith2Inline.Storage()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v3 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v4 = &v2;
    v5 = MEMORY[0x24BEE0190] + 64;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ArrayWith2Inline(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, unsigned __int8 *, uint64_t);

  v4 = __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 > v7)
    v7 += (v7 + v8) & ~(unint64_t)v8;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  if (v8 > 7u || (v8 & 0x100000) != 0 || (unint64_t)(v11 + 1) > 0x18)
  {
    v14 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v14 + ((v8 & 0xF8 ^ 0x1F8u) & (v8 + 16)));
LABEL_15:
    swift_retain();
    return v4;
  }
  v16 = __src[v11];
  if (v16 >= 3)
  {
    if (v11 <= 3)
      v17 = v11;
    else
      v17 = 4;
    __asm { BR              X14 }
  }
  if (v16 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v11] = 2;
    goto LABEL_15;
  }
  if (v16 == 1)
  {
    v18 = ~v9;
    v19 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16);
    v19(__dst, __src, v5);
    v19((_BYTE *)(((unint64_t)v4 + v10) & v18), (unsigned __int8 *)((unint64_t)&__src[v10] & v18), v5);
    *((_BYTE *)v4 + v11) = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    *((_BYTE *)v4 + v11) = 0;
  }
  return v4;
}

uint64_t destroy for ArrayWith2Inline.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5)
    v5 += (v5 + v6) & ~v6;
  if (v5 <= 8)
    v5 = 8;
  v8 = *(unsigned __int8 *)(a1 + v5);
  if (v8 >= 3)
  {
    if (v5 <= 3)
      v9 = v5;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
    return swift_release();
  if (v8 != 1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
  v11 = ~v6;
  v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v12(a1, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)((v7 + a1) & v11, v3);
}

_BYTE *initializeWithCopy for ArrayWith2Inline.Storage(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_BYTE *, unsigned __int8 *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7)
    v7 += (v7 + v8) & ~v8;
  if (v7 <= 8)
    v10 = 8;
  else
    v10 = v7;
  v11 = __src[v10];
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v10] = 2;
    swift_retain();
  }
  else if (v11 == 1)
  {
    v13 = ~v8;
    v14 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16);
    v14(__dst, __src, *(_QWORD *)(a3 + 16));
    v14((_BYTE *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
    __dst[v10] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for ArrayWith2Inline.Storage(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(unsigned __int8 *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(unsigned __int8 *, unsigned __int8 *, uint64_t);

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7)
      v7 += (v7 + v8) & ~v8;
    if (v7 <= 8)
      v10 = 8;
    else
      v10 = v7;
    v11 = __dst[v10];
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      swift_release();
    }
    else if (v11 == 1)
    {
      v14 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v14(__dst, *(_QWORD *)(a3 + 16));
      v14((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), v5);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    v15 = __src[v10];
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v10] = 2;
      swift_retain();
    }
    else if (v15 == 1)
    {
      v17 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v17(__dst, __src, v5);
      v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
      __dst[v10] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

_BYTE *initializeWithTake for ArrayWith2Inline.Storage(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_BYTE *, unsigned __int8 *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7)
    v7 += (v7 + v8) & ~v8;
  if (v7 <= 8)
    v10 = 8;
  else
    v10 = v7;
  v11 = __src[v10];
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v10] = 2;
  }
  else if (v11 == 1)
  {
    v13 = ~v8;
    v14 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32);
    v14(__dst, __src, *(_QWORD *)(a3 + 16));
    v14((_BYTE *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
    __dst[v10] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for ArrayWith2Inline.Storage(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(unsigned __int8 *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(unsigned __int8 *, unsigned __int8 *, uint64_t);

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7)
      v7 += (v7 + v8) & ~v8;
    if (v7 <= 8)
      v10 = 8;
    else
      v10 = v7;
    v11 = __dst[v10];
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      swift_release();
    }
    else if (v11 == 1)
    {
      v14 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v14(__dst, *(_QWORD *)(a3 + 16));
      v14((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), v5);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    v15 = __src[v10];
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v10] = 2;
    }
    else if (v15 == 1)
    {
      v17 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v17(__dst, __src, v5);
      v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v13), (unsigned __int8 *)((unint64_t)&__src[v9] & v13), v5);
      __dst[v10] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for ArrayWith2Inline.Storage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 <= v4)
    v5 = v4;
  v6 = 8;
  if (v5 > 8)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_23;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 4)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_23;
LABEL_16:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 253);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B3F044 + 4 * byte_23528485D[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ArrayWith2Inline.Storage(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6)
    v7 = v6;
  if (v7 <= 8)
    v7 = 8;
  v8 = v7 + 1;
  if (a3 < 0xFD)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 252) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v10 = a2 - 253;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for ArrayWith2Inline.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 <= v3)
    v4 = v3;
  v5 = 8;
  if (v4 > 8)
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 3u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B3F2B0 + 4 * byte_23528486B[v6]))();
}

void destructiveInjectEnumTag for ArrayWith2Inline.Storage(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 <= v5)
    v6 = v5;
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  if (a2 > 2)
  {
    v8 = a2 - 3;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 3;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 3;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t partial apply for closure #1 in closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, _QWORD *a2)
{
  return partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(a1, a2);
}

void type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
}

uint64_t static Edge.Set.top.getter()
{
  return 1;
}

uint64_t static Edge.Set.leading.getter()
{
  return 2;
}

uint64_t static Edge.Set.bottom.getter()
{
  return 4;
}

uint64_t static Edge.Set.trailing.getter()
{
  return 8;
}

uint64_t static Edge.Set.all.getter()
{
  return 15;
}

uint64_t static Edge.Set.horizontal.getter()
{
  return 10;
}

uint64_t static Edge.Set.vertical.getter()
{
  return 5;
}

Swift::Bool __swiftcall Edge.Set.contains(_:)(SwiftUI::Edge a1)
{
  char v1;
  int v2;
  char v3;

  v2 = 1 << a1;
  if ((a1 & 0xF8) != 0)
    LOBYTE(v2) = 0;
  if (a1 <= 8u)
    v3 = v2;
  else
    v3 = 0;
  return (v3 & ~v1) == 0;
}

void *static Edge.allCases.getter()
{
  return &outlined read-only object #0 of static Edge.allCases.getter;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Edge@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Edge.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Edge(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Edge;
}

uint64_t VerticalEdge.rawValue.getter(char a1)
{
  return a1 & 1;
}

SwiftUI::Edge __swiftcall Edge.init(_vertical:)(SwiftUI::VerticalEdge _vertical)
{
  return 2 * (_vertical & 1);
}

SwiftUI::Edge __swiftcall Edge.init(_horizontal:)(SwiftUI::HorizontalEdge _horizontal)
{
  if ((_horizontal & 1) != 0)
    return 3;
  else
    return 1;
}

uint64_t Edge.opposite.getter(char a1)
{
  return 0x1000302u >> (8 * a1);
}

uint64_t Edge.Set.init(_:)(char a1)
{
  unsigned int v1;

  if ((a1 & 2) != 0)
    v1 = 15;
  else
    v1 = 10;
  if ((a1 & 1) != 0)
    return v1;
  else
    return ((char)(a1 << 6) >> 7) & 5;
}

uint64_t static HorizontalEdge.Set.leading.getter()
{
  return 1;
}

uint64_t static HorizontalEdge.Set.trailing.getter()
{
  return 2;
}

uint64_t static HorizontalEdge.Set.all.getter()
{
  return 3;
}

void *static HorizontalEdge.allCases.getter()
{
  return &outlined read-only object #0 of static HorizontalEdge.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance HorizontalEdge(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HorizontalEdge;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HorizontalEdge()
{
  lazy protocol witness table accessor for type HorizontalEdge and conformance HorizontalEdge();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HorizontalEdge()
{
  lazy protocol witness table accessor for type HorizontalEdge and conformance HorizontalEdge();
  return RawRepresentable<>.encode(to:)();
}

uint64_t VerticalEdge.Set.init(_:)(char a1)
{
  return (1 << (a1 & 1));
}

uint64_t static VerticalEdge.Set.top.getter()
{
  return 1;
}

uint64_t static VerticalEdge.Set.bottom.getter()
{
  return 2;
}

uint64_t static VerticalEdge.Set.all.getter()
{
  return 3;
}

Swift::Bool __swiftcall VerticalEdge.Set.contains(_:)(SwiftUI::VerticalEdge a1)
{
  unsigned __int8 v1;

  return (v1 >> (a1 & 1)) & 1;
}

SwiftUI::VerticalEdge_optional __swiftcall VerticalEdge.init(rawValue:)(Swift::Int8 rawValue)
{
  SwiftUI::VerticalEdge_optional v1;

  if (rawValue == 1)
    v1.value = SwiftUI_VerticalEdge_bottom;
  else
    v1.value = SwiftUI_VerticalEdge_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

void *static VerticalEdge.allCases.getter()
{
  return &outlined read-only object #0 of static VerticalEdge.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VerticalEdge(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance VerticalEdge;
}

uint64_t protocol witness for Decodable.init(from:) in conformance VerticalEdge()
{
  lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VerticalEdge()
{
  lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge();
  return RawRepresentable<>.encode(to:)();
}

void Edge.Set.viewDebugValue.getter(unsigned __int8 a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = 0;
  v4 = a1;
  v5 = MEMORY[0x24BEE4AF8];
  do
  {
    v8 = outlined read-only object #0 of Edge.Set.viewDebugValue.getter[v3 + 32];
    if (v8 - 9 < 0xEF || (v8 & 0x80) != 0 || v8 > 7 || ((1 << v8) & ~v4) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v7 = *(_QWORD *)(v5 + 16);
      v6 = *(_QWORD *)(v5 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v5 + 16) = v7 + 1;
      *(_BYTE *)(v5 + v7 + 32) = v8;
    }
    ++v3;
  }
  while (v3 != 4);
  type metadata accessor for [HorizontalDirection](0, &lazy cache variable for type metadata for [Edge]);
  a2[3] = v9;
  *a2 = v5;
}

void protocol witness for CustomViewDebugValueConvertible.viewDebugValue.getter in conformance Edge.Set(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  Edge.Set.viewDebugValue.getter(*v1, a1);
}

uint64_t static Edge.unwrap(codingProxy:)(uint64_t result)
{
  if ((result & 0xFC) != 0)
    return 0;
  else
    return result;
}

unsigned __int8 *protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance Edge@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 4)
    LOBYTE(v2) = 0;
  *a2 = v2;
  return result;
}

uint64_t specialized Edge.Set.init(_:)(unsigned __int8 a1)
{
  unsigned int v1;

  v1 = 1 << a1;
  if ((a1 & 0xF8) != 0)
    v1 = 0;
  if (a1 <= 8u)
    return v1;
  else
    return 0;
}

uint64_t specialized Edge.init(rawValue:)(uint64_t result)
{
  if ((result & 0xFC) != 0)
    return 4;
  else
    return result;
}

unint64_t lazy protocol witness table accessor for type Edge.Set and conformance Edge.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Edge.Set, &type metadata for Edge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Edge.Set, &type metadata for Edge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Edge.Set, &type metadata for Edge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Edge.Set, &type metadata for Edge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Edge and conformance Edge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Edge and conformance Edge;
  if (!lazy protocol witness table cache variable for type Edge and conformance Edge)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Edge, &type metadata for Edge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge and conformance Edge);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Edge()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [Edge] and conformance [A], &lazy cache variable for type metadata for [Edge]);
}

unint64_t lazy protocol witness table accessor for type HorizontalEdge.Set and conformance HorizontalEdge.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalEdge.Set, &type metadata for HorizontalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalEdge.Set, &type metadata for HorizontalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalEdge.Set, &type metadata for HorizontalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalEdge.Set, &type metadata for HorizontalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HorizontalEdge and conformance HorizontalEdge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge;
  if (!lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalEdge, &type metadata for HorizontalEdge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge;
  if (!lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalEdge, &type metadata for HorizontalEdge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HorizontalEdge()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [HorizontalEdge] and conformance [A], &lazy cache variable for type metadata for [HorizontalEdge]);
}

unint64_t lazy protocol witness table accessor for type VerticalEdge.Set and conformance VerticalEdge.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalEdge.Set, &type metadata for VerticalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalEdge.Set, &type metadata for VerticalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalEdge.Set, &type metadata for VerticalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalEdge.Set, &type metadata for VerticalEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge;
  if (!lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalEdge, &type metadata for VerticalEdge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge;
  if (!lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalEdge, &type metadata for VerticalEdge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VerticalEdge()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [VerticalEdge] and conformance [A], &lazy cache variable for type metadata for [VerticalEdge]);
}

uint64_t storeEnumTagSinglePayload for Edge(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234B3FE8C + 4 * byte_235284C55[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234B3FEC0 + 4 * byte_235284C50[v4]))();
}

uint64_t sub_234B3FEC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B3FEC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B3FED0);
  return result;
}

uint64_t sub_234B3FEDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B3FEE4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234B3FEE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B3FEF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Edge()
{
  return &type metadata for Edge;
}

ValueMetadata *type metadata accessor for Edge.Set()
{
  return &type metadata for Edge.Set;
}

ValueMetadata *type metadata accessor for HorizontalEdge()
{
  return &type metadata for HorizontalEdge;
}

ValueMetadata *type metadata accessor for HorizontalEdge.Set()
{
  return &type metadata for HorizontalEdge.Set;
}

uint64_t storeEnumTagSinglePayload for HorizontalEdge(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234B3FF8C + 4 * byte_235284C5F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234B3FFC0 + 4 * byte_235284C5A[v4]))();
}

uint64_t sub_234B3FFC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B3FFC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B3FFD0);
  return result;
}

uint64_t sub_234B3FFDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B3FFE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234B3FFE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B3FFF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalEdge()
{
  return &type metadata for VerticalEdge;
}

ValueMetadata *type metadata accessor for VerticalEdge.Set()
{
  return &type metadata for VerticalEdge.Set;
}

double static ViewSize.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ViewDimensions.subscript.getter(unint64_t a1)
{
  return ViewDimensions.subscript.getter(a1);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  _QWORD *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1)
    swift_once();
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (!_MovableLockIsOwner(static Update._lock))
      goto LABEL_16;
  }
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  (*(void (**)(unint64_t, uint64_t *))(*(_QWORD *)v3 + 144))(a1, &v19);
  v11 = v10;
  result = swift_release();
  if ((v11 & 1) == 0)
    return result;
  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v13 = static AlignmentKey._typeCache;
  v14 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v14);
  v15 = v13[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v14);
  swift_release();
  if (a1 < 2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a1 >> 1 > *(_QWORD *)(v15 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16 = v15 + 16 * ((a1 >> 1) - 1);
  v18 = *(_QWORD *)(v16 + 32);
  v17 = *(_QWORD *)(v16 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 8))(&v19, v18, v17);
}

__n128 ViewGeometry.init(origin:dimensions:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v4 = a1->n128_u64[0];
  v5 = a1->n128_i64[1];
  a2->n128_f64[0] = a3;
  a2->n128_f64[1] = a4;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u64[1] = v5;
  result = a1[1];
  v7 = a1[2];
  a2[2] = result;
  a2[3] = v7;
  return result;
}

double ViewDimensions.width.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double ViewDimensions.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double ViewSize.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t (*ViewOrigin.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewDimensions.guideComputer.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_retain();
}

__n128 ViewDimensions.size.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 ViewDimensions.size.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t (*ViewDimensions.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 ViewDimensions.init(guideComputer:size:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = a1[1];
  *(_QWORD *)a3 = *a1;
  *(_QWORD *)(a3 + 8) = v3;
  result = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 32) = v5;
  return result;
}

double ViewSize.width.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

_QWORD *ViewDimensions.init(guideComputer:size:proposal:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  double v6;
  double v7;

  v5 = result[1];
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 16);
  if (*(_BYTE *)(a2 + 8))
    v6 = NAN;
  if (*(_BYTE *)(a2 + 24))
    v7 = NAN;
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v5;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = v6;
  *(double *)(a3 + 40) = v7;
  return result;
}

uint64_t ViewSize.init(_:proposal:)@<X0>(uint64_t result@<X0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v4;
  double v5;

  v4 = *(double *)result;
  v5 = *(double *)(result + 16);
  if (*(_BYTE *)(result + 8))
    v4 = NAN;
  if (*(_BYTE *)(result + 24))
    v5 = NAN;
  *a2 = a3;
  a2[1] = a4;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

uint64_t ViewDimensions.subscript.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];

  v3 = *v1;
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v8 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v11[0] = v4;
    v11[1] = v5;
    v11[2] = v6;
    v11[3] = v7;
    v9 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 144))(a1, v11);
    swift_release();
    return v9;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];

  v3 = *v1;
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v8 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v11[0] = v4;
    v11[1] = v5;
    v11[2] = v6;
    v11[3] = v7;
    v9 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 144))(a1, v11);
    swift_release();
    return v9;
  }
  return result;
}

void ViewOrigin.value.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

int64x2_t ViewOrigin.init(invalid:)@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  return result;
}

SwiftUI::ViewOrigin __swiftcall ViewOrigin.init(_:)(SwiftUI::ViewOrigin result)
{
  CGFloat *v1;

  *v1 = result.value.x;
  v1[1] = result.value.y;
  return result;
}

SwiftUI::ViewOrigin __swiftcall ViewOrigin.init()()
{
  _QWORD *v0;
  SwiftUI::ViewOrigin result;

  *v0 = 0;
  v0[1] = 0;
  return result;
}

double ViewOrigin.x.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ViewOrigin.x.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*ViewOrigin.x.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double ViewOrigin.x.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)a1;
  return result;
}

double ViewOrigin.y.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void ViewOrigin.y.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double (*ViewOrigin.y.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return ViewOrigin.y.modify;
}

double ViewOrigin.y.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)a1;
  return result;
}

BOOL static ViewOrigin.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

double ViewOrigin.subscript.getter(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + 8;
  if ((a1 & 1) == 0)
    v2 = v1;
  return *(double *)v2;
}

uint64_t ViewOrigin.subscript.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

uint64_t (*ViewOrigin.subscript.modify(uint64_t a1, char a2))()
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = a2;
  v3 = v2 + 1;
  if ((a2 & 1) == 0)
    v3 = v2;
  *(_QWORD *)a1 = *v3;
  return ViewOrigin.subscript.modify;
}

double ViewOrigin.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ViewOrigin.animatableData.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

__n128 (*ViewOrigin.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

void ViewSize.value.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*ViewSize.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static ViewSize.fixed(_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a2;
  a1[3] = a3;
}

void ViewSize.width.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ViewSize.width.modify(_QWORD *a1))()
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

void ViewSize.height.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*ViewSize.height.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return ViewSize.height.modify;
}

void ViewSize.proposal.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = (~v2 & 0x7FF0000000000000) == 0 && (v2 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v4)
    v2 = 0;
  v5 = (~v3 & 0x7FF0000000000000) == 0 && (v3 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v5)
    v3 = 0;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v5;
}

void key path getter for ViewSize.proposal : ViewSize(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  ViewSize.proposal.getter((uint64_t)&v5);
  v2 = v6;
  v3 = v7;
  v4 = v8;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
}

uint64_t ViewSize.proposal.setter(uint64_t result)
{
  uint64_t v1;
  double v2;
  double v3;

  v2 = *(double *)result;
  v3 = *(double *)(result + 16);
  if (*(_BYTE *)(result + 8))
    v2 = NAN;
  if (*(_BYTE *)(result + 24))
    v3 = NAN;
  *(double *)(v1 + 16) = v2;
  *(double *)(v1 + 24) = v3;
  return result;
}

void (*ViewSize.proposal.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (~v4 & 0x7FF0000000000000) == 0 && (v4 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v6)
    v4 = 0;
  v7 = (~v5 & 0x7FF0000000000000) == 0 && (v5 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v7)
    v5 = 0;
  *v3 = v4;
  *((_BYTE *)v3 + 8) = v6;
  v3[2] = v5;
  *((_BYTE *)v3 + 24) = v7;
  return ViewSize.proposal.modify;
}

void ViewSize.proposal.modify(void **a1)
{
  void *v1;
  uint64_t v2;
  double v3;
  double v4;

  v1 = *a1;
  v2 = *((_QWORD *)v1 + 4);
  v3 = *(double *)v1;
  v4 = *((double *)v1 + 2);
  if (*((_BYTE *)v1 + 8))
    v3 = NAN;
  if (*((_BYTE *)v1 + 24))
    v4 = NAN;
  *(double *)(v2 + 16) = v3;
  *(double *)(v2 + 24) = v4;
  free(v1);
}

Swift::Void __swiftcall ViewSize.didSetAnimatableData(_:)(CGSize a1)
{
  uint64_t v1;

  *(CGFloat *)(v1 + 16) = a1.width;
  *(CGFloat *)(v1 + 24) = a1.height;
}

double static ViewSize.invalidValue.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (one-time initialization token for invalidValue != -1)
    swift_once();
  v3 = static CGSize.invalidValue;
  result = *(double *)&static CGSize.invalidValue;
  *a1 = static CGSize.invalidValue;
  a1[1] = v3;
  return result;
}

double ViewSize.subscript.getter(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + 8;
  if ((a1 & 1) == 0)
    v2 = v1;
  return *(double *)v2;
}

uint64_t ViewSize.subscript.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

uint64_t (*ViewSize.subscript.modify(uint64_t a1, char a2))()
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = a2;
  v3 = v2 + 1;
  if ((a2 & 1) == 0)
    v3 = v2;
  *(_QWORD *)a1 = *v3;
  return ViewOrigin.subscript.modify;
}

int8x16_t ViewSize.inset(by:)@<Q0>(uint64_t a1@<X8>, float64_t a2@<D0>, float64x2_t a3@<Q1>, float64_t a4@<D2>, float64x2_t a5@<Q3>)
{
  float64x2_t *v5;
  double v6;
  float64x2_t v7;
  double v8;
  double v9;
  float64x2_t v10;
  int64x2_t v11;
  float64x2_t v12;
  int8x16_t result;

  v6 = v5->f64[0];
  a3.f64[1] = a2;
  a5.f64[1] = a4;
  v7 = vaddq_f64(a3, a5);
  v8 = v5->f64[1] - v7.f64[1];
  v9 = 0.0;
  if (v8 < 0.0)
    v8 = 0.0;
  if (v6 - v7.f64[0] >= 0.0)
    v9 = v6 - v7.f64[0];
  *(double *)a1 = v9;
  *(double *)(a1 + 8) = v8;
  v10 = v5[1];
  v11 = vdupq_n_s64(0x7FF0000000000000uLL);
  v12 = vsubq_f64(v10, v7);
  result = vbslq_s8(vbicq_s8((int8x16_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)v10, (int8x16_t)v11), v11), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v10, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFuLL)))), (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL), vandq_s8((int8x16_t)v12, (int8x16_t)vcgezq_f64(v12)));
  *(int8x16_t *)(a1 + 16) = result;
  return result;
}

double ViewSize.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ViewSize.animatableData.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
  v2[2] = a1;
  v2[3] = a2;
}

uint64_t (*ViewSize.animatableData.modify(uint64_t a1))()
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return ViewSize.animatableData.modify;
}

double protocol witness for Animatable.animatableData.setter in conformance ViewSize(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v1 = *(_QWORD *)a1;
  *(_QWORD *)(v1 + 8) = v3;
  *(double *)(v1 + 16) = result;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance ViewSize(uint64_t a1))()
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return ViewSize.animatableData.modify;
}

double ViewSize.animatableData.modify(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v1 = *(_QWORD *)a1;
  *(_QWORD *)(v1 + 8) = v3;
  *(double *)(v1 + 16) = result;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

__n128 ViewGeometry.origin.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 ViewGeometry.origin.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*ViewGeometry.origin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewGeometry.dimensions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  return swift_retain();
}

__n128 ViewGeometry.dimensions.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __n128 result;
  __n128 v7;

  v2 = a1->n128_u64[0];
  v3 = a1->n128_u64[1];
  v7 = a1[1];
  v4 = a1[2].n128_u64[0];
  v5 = a1[2].n128_u64[1];
  swift_release();
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  result = v7;
  v1[2] = v7;
  v1[3].n128_u64[0] = v4;
  v1[3].n128_u64[1] = v5;
  return result;
}

uint64_t (*ViewGeometry.dimensions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 ViewGeometry.init(origin:dimensions:)@<Q0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;

  v3 = a2->n128_u64[0];
  v4 = a2->n128_i64[1];
  *(_OWORD *)a3 = *a1;
  *(_QWORD *)(a3 + 16) = v3;
  *(_QWORD *)(a3 + 24) = v4;
  result = a2[1];
  v6 = a2[2];
  *(__n128 *)(a3 + 32) = result;
  *(__n128 *)(a3 + 48) = v6;
  return result;
}

__n128 ViewGeometry.init(dimensions:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v2 = a1->n128_u64[0];
  v3 = a1->n128_i64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = v2;
  a2[1].n128_u64[1] = v3;
  result = a1[1];
  v5 = a1[2];
  a2[2] = result;
  a2[3] = v5;
  return result;
}

float64x2_t ViewGeometry.init(placement:dimensions:)@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64_t v6;
  float64_t v7;

  v3 = a2[1];
  v4 = a2[2];
  result = vsubq_f64(a1[3], vmulq_f64(a1[2], v3));
  v6 = a2->f64[0];
  v7 = a2->f64[1];
  *a3 = result;
  a3[1].f64[0] = v6;
  a3[1].f64[1] = v7;
  a3[2] = v3;
  a3[3] = v4;
  return result;
}

double ViewGeometry.subscript.getter(unint64_t a1)
{
  double *v1;
  double v2;
  double v3;

  v2 = *v1;
  ViewDimensions.subscript.getter(a1);
  return v2 + v3;
}

{
  uint64_t v1;
  double v2;
  double v3;

  v2 = *(double *)(v1 + 8);
  ViewDimensions.subscript.getter(a1);
  return v2 + v3;
}

{
  double *v1;
  double *v2;
  double v3;
  double v4;

  v2 = v1 + 1;
  if ((a1 & 1) == 0)
    v2 = v1;
  v3 = *v2;
  ViewDimensions.subscript.getter(a1);
  return v3 + v4;
}

uint64_t ViewGeometry.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  char v12;
  uint64_t result;
  _QWORD v14[4];

  v3 = *(double *)v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    *(double *)&result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
    __break(1u);
  }
  else
  {
LABEL_7:
    v14[0] = v5;
    v14[1] = v6;
    v14[2] = v7;
    v14[3] = v8;
    v10 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 144))(a1, v14));
    v12 = v11;
    swift_release();
    if ((v12 & 1) != 0)
      *(double *)&result = v10;
    else
      *(double *)&result = v3 + v10;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  char v12;
  uint64_t result;
  _QWORD v14[4];

  v3 = *(double *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    *(double *)&result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
    __break(1u);
  }
  else
  {
LABEL_7:
    v14[0] = v5;
    v14[1] = v6;
    v14[2] = v7;
    v14[3] = v8;
    v10 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 144))(a1, v14));
    v12 = v11;
    swift_release();
    if ((v12 & 1) != 0)
      *(double *)&result = v10;
    else
      *(double *)&result = v3 + v10;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  char v13;
  double v14;
  uint64_t result;
  _QWORD v16[4];

  v3 = *(double *)v1;
  v4 = *(double *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v10 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    *(double *)&result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
    __break(1u);
  }
  else
  {
LABEL_7:
    v16[0] = v6;
    v16[1] = v7;
    v16[2] = v8;
    v16[3] = v9;
    v11 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 144))(a1, v16));
    v13 = v12;
    swift_release();
    if ((a1 & 1) != 0)
      v14 = v4;
    else
      v14 = v3;
    if ((v13 & 1) != 0)
      *(double *)&result = v11;
    else
      *(double *)&result = v14 + v11;
  }
  return result;
}

__n128 ViewFrame.origin.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 ViewFrame.origin.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*ViewFrame.origin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*ViewFrame.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void __swiftcall ViewFrame.init(origin:size:)(SwiftUI::ViewFrame *__return_ptr retstr, SwiftUI::ViewOrigin origin, SwiftUI::ViewSize size)
{
  SwiftUI::ViewOrigin *v3;
  CGSize *v4;
  CGSize v5;
  CGSize v6;

  v5 = *v4;
  v6 = v4[1];
  retstr->origin = *v3;
  retstr->size.value = v5;
  retstr->size._proposal = v6;
}

void __swiftcall ViewFrame.init(size:)(SwiftUI::ViewFrame *__return_ptr retstr, SwiftUI::ViewSize size)
{
  CGSize *v2;
  CGSize v3;

  retstr->origin.value.x = 0.0;
  retstr->origin.value.y = 0.0;
  v3 = v2[1];
  retstr->size.value = *v2;
  retstr->size._proposal = v3;
}

double ViewFrame.round(toMultipleOf:)(double a1)
{
  __int128 *v1;
  double result;
  __int128 v3;
  __int128 v4;

  v3 = *v1;
  v4 = v1[1];
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(a1);
  result = *(double *)&v3;
  *v1 = v3;
  v1[1] = v4;
  return result;
}

__C::CGRect __swiftcall CGRect.init(_:)(SwiftUI::ViewFrame *a1)
{
  double x;
  double y;
  double width;
  double height;
  __C::CGRect result;

  x = a1->origin.value.x;
  y = a1->origin.value.y;
  width = a1->size.value.width;
  height = a1->size.value.height;
  result.size.height = height;
  result.size.width = width;
  result.origin.y = y;
  result.origin.x = x;
  return result;
}

double ViewFrame.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ViewFrame.animatableData.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

void (*ViewFrame.animatableData.modify(_QWORD *a1))(void **a1)
{
  _OWORD *v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return ViewFrame.animatableData.modify;
}

void ViewFrame.animatableData.modify(void **a1)
{
  _QWORD *v1;
  _OWORD *v2;
  __int128 v3;

  v1 = *a1;
  v2 = (_OWORD *)v1[4];
  v3 = *((_OWORD *)v1 + 1);
  *v2 = *(_OWORD *)v1;
  v2[1] = v3;
  free(v1);
}

__n128 protocol witness for Animatable.animatableData.getter in conformance ViewFrame@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance ViewFrame(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance ViewFrame(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ViewFrame.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t Attribute<A>.origin()()
{
  return AGGraphCreateOffsetAttribute2();
}

uint64_t Attribute<A>.size()()
{
  return AGGraphCreateOffsetAttribute2();
}

double one-time initialization function for invalidValue()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v0 = static LayoutComputer.defaultValue;
  v1 = *(_QWORD *)algn_25426F938;
  v2 = one-time initialization token for invalidValue;
  swift_retain();
  if (v2 != -1)
    swift_once();
  result = *(double *)&static CGSize.invalidValue;
  static ViewDimensions.invalidValue = (uint64_t)v0;
  unk_25426DBF0 = v1;
  xmmword_25426DBF8 = static CGSize.invalidValue;
  xmmword_25426DC08 = static CGSize.invalidValue;
  return result;
}

{
  double result;

  if (one-time initialization token for invalidValue != -1)
    swift_once();
  result = *(double *)&static CGSize.invalidValue;
  static SizeThatFitsMeasurer.invalidValue = static CGSize.invalidValue;
  return result;
}

uint64_t static ViewDimensions.invalidValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for invalidValue != -1)
    swift_once();
  v2 = unk_25426DBF0;
  *(_QWORD *)a1 = static ViewDimensions.invalidValue;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = xmmword_25426DC08;
  *(_OWORD *)(a1 + 16) = xmmword_25426DBF8;
  *(_OWORD *)(a1 + 32) = v3;
  return swift_retain();
}

uint64_t one-time initialization function for zero()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  static ViewDimensions.zero = (uint64_t)static LayoutComputer.defaultValue;
  *(_QWORD *)algn_256192EE8 = *(_QWORD *)algn_25426F938;
  xmmword_256192EF0 = 0u;
  unk_256192F00 = 0u;
  return swift_retain();
}

{
  if (one-time initialization token for zero != -1)
    swift_once();
  static ViewGeometry.zero = 0uLL;
  qword_256192EB0 = static ViewDimensions.zero;
  unk_256192EB8 = *(_QWORD *)algn_256192EE8;
  xmmword_256192EC0 = xmmword_256192EF0;
  unk_256192ED0 = unk_256192F00;
  return swift_retain();
}

{
  if (one-time initialization token for zero != -1)
    swift_once();
  static ViewSpacing.zero = static Spacing.zero;
  byte_2561B61A8 = 2;
  return swift_bridgeObjectRetain();
}

{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23528B7A0;
  *(_QWORD *)(inited + 32) = 0;
  *(_BYTE *)(inited + 40) = 1;
  *(_QWORD *)(inited + 88) = 0;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(_BYTE *)(inited + 80) = 0;
  *(_BYTE *)(inited + 96) = 3;
  *(_QWORD *)(inited + 144) = 0;
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 200) = 0;
  *(_OWORD *)(inited + 104) = 0u;
  *(_OWORD *)(inited + 120) = 0u;
  *(_BYTE *)(inited + 136) = 0;
  *(_OWORD *)(inited + 160) = 0u;
  *(_OWORD *)(inited + 176) = 0u;
  *(_BYTE *)(inited + 192) = 0;
  *(_BYTE *)(inited + 208) = 2;
  *(_BYTE *)(inited + 248) = 0;
  *(_OWORD *)(inited + 232) = 0u;
  *(_OWORD *)(inited + 216) = 0u;
  v1 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result = swift_setDeallocating();
  static Spacing.zero = v1;
  return result;
}

uint64_t static ViewDimensions.zero.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for zero != -1)
    swift_once();
  v2 = *(_QWORD *)algn_256192EE8;
  *(_QWORD *)a1 = static ViewDimensions.zero;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = unk_256192F00;
  *(_OWORD *)(a1 + 16) = xmmword_256192EF0;
  *(_OWORD *)(a1 + 32) = v3;
  return swift_retain();
}

uint64_t ViewDimensions.at(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *v3;
  v5 = v3[1];
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *((_OWORD *)v3 + 2);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)v3 + 1);
  *(_OWORD *)(a1 + 48) = v6;
  return swift_retain();
}

uint64_t ViewDimensions.centered(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  __int128 v8;

  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(double *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 40);
  v7 = (a2 - v5) * 0.5 + 0.0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(double *)(a1 + 32) = v5;
  v8 = *(_OWORD *)(v3 + 24);
  *(double *)a1 = v7;
  *(double *)(a1 + 8) = (a3 - *(double *)&v8) * 0.5 + 0.0;
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v6;
  return swift_retain();
}

double ViewGeometry.frame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t one-time initialization function for invalidValue()
{
  if (one-time initialization token for invalidValue != -1)
    swift_once();
  static ViewGeometry.invalidValue = (__int128)vdupq_n_s64(0x7FF8000000000000uLL);
  qword_25426DBB8 = static ViewDimensions.invalidValue;
  unk_25426DBC0 = unk_25426DBF0;
  xmmword_25426DBC8 = xmmword_25426DBF8;
  unk_25426DBD8 = xmmword_25426DC08;
  return swift_retain();
}

uint64_t static ViewGeometry.invalidValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  if (one-time initialization token for invalidValue != -1)
    swift_once();
  v2 = qword_25426DBB8;
  v3 = unk_25426DBC0;
  *(_OWORD *)a1 = static ViewGeometry.invalidValue;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = unk_25426DBD8;
  *(_OWORD *)(a1 + 32) = xmmword_25426DBC8;
  *(_OWORD *)(a1 + 48) = v4;
  return swift_retain();
}

BOOL ViewGeometry.isInvalid.getter()
{
  _QWORD *v0;

  return (*v0 & 0xFFFFFFFFFFFFFLL) != 0 && (~*v0 & 0x7FF0000000000000) == 0;
}

uint64_t static ViewGeometry.zero.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  if (one-time initialization token for zero != -1)
    swift_once();
  v2 = qword_256192EB0;
  v3 = unk_256192EB8;
  *(_OWORD *)a1 = static ViewGeometry.zero;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = unk_256192ED0;
  *(_OWORD *)(a1 + 32) = xmmword_256192EC0;
  *(_OWORD *)(a1 + 48) = v4;
  return swift_retain();
}

Swift::Void __swiftcall ViewGeometry.finalizeLayoutDirection(_:parentSize:)(SwiftUI::LayoutDirection _, CGSize parentSize)
{
  CGFloat *v2;
  double width;
  CGRect v4;

  if (*(_BYTE *)_ == 1)
  {
    width = parentSize.width;
    v4.origin.x = *v2;
    v4.origin.y = v2[1];
    v4.size.width = v2[4];
    v4.size.height = v2[5];
    *v2 = width - CGRectGetMaxX(v4);
  }
}

BOOL specialized static ViewDimensions.== infix(_:_:)(double *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  BOOL v11;
  _BOOL4 v12;

  if (a1[2] != *(double *)(a2 + 16) || a1[3] != *(double *)(a2 + 24))
    return 0;
  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(double *)(a2 + 32);
  v6 = *(double *)(a2 + 40);
  v9 = a1[4];
  v8 = a1[5];
  v10 = (~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0;
  if ((*(_QWORD *)&v8 & 0xFFFFFFFFFFFFFLL) == 0)
    v10 = 0;
  v11 = (~*(_QWORD *)&v7 & 0x7FF0000000000000) != 0;
  if ((*(_QWORD *)&v7 & 0xFFFFFFFFFFFFFLL) == 0)
    v11 = 1;
  v12 = (~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0;
  if ((*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFLL) == 0)
    v12 = 0;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v9 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    if (v9 != v7 || !v11)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if (v10)
  {
    if (v4 != v5 || !v12)
      return 0;
  }
  else
  {
    if (v12)
      return 0;
    if (v8 != v6 || v4 != v5)
      return 0;
  }
  return *(_QWORD *)&v3 == *(_QWORD *)a2;
}

BOOL specialized static ViewGeometry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  double v13[2];
  __int128 v14;
  __int128 v15;

  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 24);
    v6 = *(double *)(a1 + 24);
    v13[0] = *(double *)(a1 + 16);
    v13[1] = v6;
    v7 = *(_OWORD *)(a1 + 48);
    v14 = *(_OWORD *)(a1 + 32);
    v15 = v7;
    v10[0] = v5;
    v10[1] = v4;
    v8 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 32);
    v12 = v8;
    return specialized static ViewDimensions.== infix(_:_:)(v13, (uint64_t)v10);
  }
  else
  {
    return 0;
  }
}

BOOL specialized static ViewSize.== infix(_:_:)(double *a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;
  BOOL v8;
  _BOOL4 v9;

  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  v4 = a2[2];
  v3 = a2[3];
  v6 = a1[2];
  v5 = a1[3];
  v7 = (~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0;
  if ((*(_QWORD *)&v5 & 0xFFFFFFFFFFFFFLL) == 0)
    v7 = 0;
  v8 = (~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0;
  if ((*(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL) == 0)
    v8 = 1;
  v9 = (~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0;
  if ((*(_QWORD *)&v3 & 0xFFFFFFFFFFFFFLL) == 0)
    v9 = 1;
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    if (v6 != v4 || !v8)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  if (!v7)
    return v5 == v3 && v9;
  return !v9;
}

BOOL specialized static ViewFrame.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  _OWORD v8[2];

  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    v4 = *(_OWORD *)(a1 + 32);
    v8[0] = *(_OWORD *)(a1 + 16);
    v8[1] = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v7[0] = *(_OWORD *)(a2 + 16);
    v7[1] = v5;
    return specialized static ViewSize.== infix(_:_:)((double *)v8, (double *)v7);
  }
  else
  {
    return 0;
  }
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ViewOrigin()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ViewFrame()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
}

__n128 sub_234B419AC@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_234B419B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_234B419C4@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234B419D0(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234B419DC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_234B419E8(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

double sub_234B419F4@<D0>(double *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = a1 + 1;
  if (!*a2)
    v3 = a1;
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

_QWORD *sub_234B41A10(_QWORD *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = 8;
  if (!*a3)
    v3 = 0;
  *(_QWORD *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_234B41A2C()
{
  return 0;
}

__n128 sub_234B41A3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_234B41A48@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234B41A54(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234B41A60@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_234B41A6C(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

uint64_t sub_234B41A7C(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)result;
  v3 = *(double *)(result + 16);
  if (*(_BYTE *)(result + 8))
    v2 = NAN;
  if (*(_BYTE *)(result + 24))
    v3 = NAN;
  *(double *)(a2 + 16) = v2;
  *(double *)(a2 + 24) = v3;
  return result;
}

double sub_234B41AAC@<D0>(double *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = a1 + 1;
  if (!*a2)
    v3 = a1;
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

_QWORD *sub_234B41AC8(_QWORD *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = 8;
  if (!*a3)
    v3 = 0;
  *(_QWORD *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_234B41AE4()
{
  return 0;
}

__n128 sub_234B41AF4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_234B41B00(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(double *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

__n128 sub_234B41B10@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_234B41B1C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t initializeWithCopy for ViewDimensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ViewDimensions(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for ViewDimensions(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for ViewDimensions()
{
  return &type metadata for ViewDimensions;
}

ValueMetadata *type metadata accessor for ViewOrigin()
{
  return &type metadata for ViewOrigin;
}

ValueMetadata *type metadata accessor for ViewSize()
{
  return &type metadata for ViewSize;
}

uint64_t initializeWithCopy for ViewGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ViewGeometry(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for ViewGeometry(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewGeometry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewGeometry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewGeometry()
{
  return &type metadata for ViewGeometry;
}

ValueMetadata *type metadata accessor for ViewFrame()
{
  return &type metadata for ViewFrame;
}

SwiftUI::_FixedSizeLayout __swiftcall _FixedSizeLayout.init(horizontal:vertical:)(Swift::Bool horizontal, Swift::Bool vertical)
{
  __int16 v2;

  if (vertical)
    v2 = 256;
  else
    v2 = 0;
  return (SwiftUI::_FixedSizeLayout)(v2 & 0xFFFE | horizontal);
}

uint64_t _FixedSizeLayout.horizontal.getter(char a1)
{
  return a1 & 1;
}

uint64_t _FixedSizeLayout.horizontal.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_FixedSizeLayout.horizontal.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _FixedSizeLayout.vertical.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t _FixedSizeLayout.vertical.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*_FixedSizeLayout.vertical.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _FixedSizeLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, __int16 a2@<W2>, uint64_t a3@<X8>)
{
  double v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  double *InputValue;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v5 = *(double *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 48);
  v22 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v23);
  v7 = v23;
  v8 = v24;
  v9 = v25;
  v10 = v26;
  if ((v6 & 1) != 0)
  {
    InputValue = (double *)AGGraphGetInputValue();
    v12 = *InputValue;
    v13 = InputValue[1];
  }
  else
  {
    v12 = v5;
    v13 = *(double *)&v22;
  }
  if ((a2 & 0x100) != 0)
    v14 = 0;
  else
    v14 = v9;
  if ((a2 & 1) != 0)
    v15 = 0;
  else
    v15 = v7;
  __asm { FMOV            V1.2D, #0.5 }
  *(_OWORD *)(a3 + 32) = _Q1;
  result = v12 * 0.5;
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 8) = (a2 | v8) & 1;
  *(_QWORD *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 24) = (v10 | ((unsigned __int16)(a2 & 0x100) >> 8)) & 1;
  *(double *)(a3 + 48) = result;
  *(double *)(a3 + 56) = v13 * 0.5;
  return result;
}

uint64_t _FixedSizeLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  v8 = *((_DWORD *)a3 + 2);
  v15 = *a3;
  v16 = v8;
  if ((a4 & 1) != 0)
    v4 = 0;
  v9 = a4 | v5;
  if ((a4 & 0x100) != 0)
    v6 = 0;
  v11 = v4;
  v12 = v9 & 1;
  v13 = v6;
  v14 = v7 & 1 | HIBYTE(a4) & 1;
  return LayoutProxy.size(in:)(&v11);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _FixedSizeLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  __int16 v3;

  if (v2[1])
    v3 = 256;
  else
    v3 = 0;
  return _FixedSizeLayout.placement(of:in:)(a1, v3 | *v2, a2);
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _FixedSizeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;

  v4 = *v3;
  v5 = v3[1];
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *((_DWORD *)a3 + 2);
  v18 = *a3;
  v19 = v10;
  if (v4)
    v6 = 0;
  v11 = v4 | v7;
  if (v5)
    v12 = 0;
  else
    v12 = v8;
  v14 = v6;
  v15 = v11 & 1;
  v16 = v12;
  v17 = (v5 | v9) & 1;
  return LayoutProxy.size(in:)(&v14);
}

uint64_t View.fixedSize(horizontal:vertical:)(char a1, char a2, uint64_t a3, uint64_t a4)
{
  _BYTE v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return View.modifier<A>(_:)(v5, a3, &type metadata for _FixedSizeLayout, a4);
}

uint64_t View.fixedSize()(uint64_t a1, uint64_t a2)
{
  __int16 v3;

  v3 = 257;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for _FixedSizeLayout, a2);
}

unint64_t instantiation function for generic protocol witness table for _FixedSizeLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _FixedSizeLayout(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _FixedSizeLayout(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234B4226C + 4 * byte_235285615[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_234B422A0 + 4 * asc_235285610[v4]))();
}

uint64_t sub_234B422A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234B422A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234B422B0);
  return result;
}

uint64_t sub_234B422BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234B422C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234B422C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234B422D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _FixedSizeLayout()
{
  return &type metadata for _FixedSizeLayout;
}

uint64_t sub_234B422EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _FixedSizeLayout, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _FixedSizeLayout;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

unint64_t _DisplayList_StableIdentityMap.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16)
    && (result = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)result), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(v4 + 56) + 24 * result;
    *(_OWORD *)a2 = *(_OWORD *)v6;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v6 + 16);
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

__n128 _DisplayList_StableIdentity.hash.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = v1[1].n128_u32[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u32[0] = v2;
  return result;
}

__n128 _DisplayList_StableIdentity.hash.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = a1[1].n128_u32[0];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u32[0] = v2;
  return result;
}

uint64_t (*_DisplayList_StableIdentity.hash.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _DisplayList_StableIdentity.serial.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t _DisplayList_StableIdentity.serial.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*_DisplayList_StableIdentity.serial.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _DisplayList_StableIdentity.init(hash:serial:)@<Q0>(__n128 *a1@<X0>, unsigned __int32 a2@<W1>, __n128 *a3@<X8>)
{
  unsigned __int32 v3;
  __n128 result;

  v3 = a1[1].n128_u32[0];
  result = *a1;
  *a3 = *a1;
  a3[1].n128_u32[0] = v3;
  a3[1].n128_u32[1] = a2;
  return result;
}

void _DisplayList_StableIdentity.hash(into:)()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _DisplayList_StableIdentity.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6169726573;
  else
    return 1752392040;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _DisplayList_StableIdentity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized _DisplayList_StableIdentity.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DisplayList_StableIdentity.CodingKeys()
{
  lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _DisplayList_StableIdentity.CodingKeys()
{
  lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t _DisplayList_StableIdentity.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;

  v3 = v1;
  type metadata accessor for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  v10 = *((_DWORD *)v3 + 4);
  v17 = *((_DWORD *)v3 + 5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = v3[1];
  v14 = *v3;
  v15 = v11;
  v16 = v10;
  v18 = 0;
  lazy protocol witness table accessor for type StrongHash and conformance StrongHash();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int _DisplayList_StableIdentity.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _DisplayList_StableIdentity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v12;
  __int128 v13;
  __int128 v14;
  int v15;
  char v16;

  type metadata accessor for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<_DisplayList_StableIdentity.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v16 = 0;
    lazy protocol witness table accessor for type StrongHash and conformance StrongHash();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = v14;
    v10 = v15;
    LOBYTE(v14) = 1;
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_OWORD *)a2 = v13;
    *(_DWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 20) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _DisplayList_StableIdentity()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _DisplayList_StableIdentity()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _DisplayList_StableIdentity()
{
  uint64_t v0;
  Swift::UInt32 v1;

  Hasher.init(_seed:)();
  v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance _DisplayList_StableIdentity@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return _DisplayList_StableIdentity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _DisplayList_StableIdentity(_QWORD *a1)
{
  return _DisplayList_StableIdentity.encode(to:)(a1);
}

uint64_t _DisplayList_StableIdentityMap.map.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _DisplayList_StableIdentityMap.map.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*_DisplayList_StableIdentityMap.map.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_DisplayList_StableIdentityMap __swiftcall _DisplayList_StableIdentityMap.init()()
{
  _QWORD *v0;
  SwiftUI::_DisplayList_StableIdentityMap result;

  *v0 = MEMORY[0x24BEE4B00];
  return result;
}

BOOL _DisplayList_StableIdentityMap.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

unint64_t _DisplayList_StableIdentityMap.subscript.setter(uint64_t a1, Swift::UInt32 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  Swift::UInt32 v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v4 = *a2;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(*a2);
    if ((v6 & 1) == 0)
      return result;
    v7 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v14;
    }
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)a1;
    v13 = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, v11, v10, v4, v13);
    *v2 = v15;
  }
  return swift_bridgeObjectRelease();
}

void (*_DisplayList_StableIdentityMap.subscript.modify(_QWORD *a1, Swift::UInt32 *a2))(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v5;
  Swift::UInt32 v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = v2;
  v6 = *a2;
  *((_DWORD *)v5 + 7) = *a2;
  v7 = *v2;
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(v7 + 56) + 24 * v8;
    v11 = *(_QWORD *)(v10 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v10;
    v5[2] = v11;
    *((_BYTE *)v5 + 24) = 0;
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *((_BYTE *)v5 + 24) = 1;
  }
  return _DisplayList_StableIdentityMap.subscript.modify;
}

void _DisplayList_StableIdentityMap.subscript.modify(uint64_t **a1)
{
  uint64_t *v1;
  Swift::UInt32 v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v1 = *a1;
  v2 = *((_DWORD *)*a1 + 7);
  v3 = (uint64_t *)(*a1)[4];
  if (((*a1)[3] & 1) == 0)
  {
    v12 = v1[1];
    v11 = v1[2];
    v13 = *v1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, v12, v11, v2, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(*((_DWORD *)*a1 + 7));
  if ((v5 & 1) != 0)
  {
    v6 = v4;
    v7 = (uint64_t *)v1[4];
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v7;
    v15 = *v7;
    *v7 = 0x8000000000000000;
    if ((v8 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v15;
    }
    v10 = (uint64_t *)v1[4];
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v10 = v9;
    goto LABEL_7;
  }
LABEL_8:
  free(v1);
}

Swift::Void __swiftcall _DisplayList_StableIdentityMap.formUnion(_:)(SwiftUI::_DisplayList_StableIdentityMap a1)
{
  uint64_t *v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;

  v2 = *(_QWORD *)a1.map._rawValue;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  *v1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v4);
  *v1 = v4;
  swift_bridgeObjectRelease();
}

uint64_t _DisplayList_StableIdentityRoot.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t _DisplayList_StableIdentityRoot.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0;
  return result;
}

uint64_t _DisplayList_StableIdentityRoot.subscript.getter@<X0>(Swift::UInt32 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  int Attribute;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  Swift::UInt32 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t result;
  Swift::UInt32 v52;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  _QWORD *v60;

  v52 = *a1;
  v3 = (_QWORD *)(v2 + 24);
  swift_beginAccess();
  if (!*(_QWORD *)(v2 + 24))
  {
    v4 = v2 + 16;
    swift_beginAccess();
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
    if (v5)
    {
      v6 = 0;
      v7 = (_QWORD *)MEMORY[0x24BEE4B00];
      v8 = *MEMORY[0x24BE096C0];
      v55 = v4;
      v56 = v3;
      v54 = *MEMORY[0x24BE096C0];
      while (1)
      {
        while (1)
        {
          swift_beginAccess();
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_67;
          if (v6 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
          {
LABEL_68:
            __break(1u);
            goto LABEL_69;
          }
          Attribute = AGWeakAttributeGetAttribute();
          swift_endAccess();
          if (Attribute != v8)
            break;
          --v5;
          swift_beginAccess();
          if (v6 == v5)
            goto LABEL_14;
          v10 = *(_QWORD **)v4;
          v11 = *(_QWORD *)(*(_QWORD *)v4 + 16);
          if (v6 >= v11)
            goto LABEL_72;
          if (v5 >= v11)
            goto LABEL_73;
          v12 = v10[v6 + 4];
          v13 = v10[v5 + 4];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v4 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
            *(_QWORD *)v4 = v10;
          }
          v10[v6 + 4] = v13;
          *(_QWORD *)(*(_QWORD *)v4 + 8 * v5 + 32) = v12;
LABEL_14:
          v15 = *(_QWORD **)v4;
          if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
            goto LABEL_70;
          v16 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v4 = v15;
          if ((v16 & 1) != 0)
          {
            v17 = v15[2];
            if (!v17)
              goto LABEL_71;
          }
          else
          {
            v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
            *(_QWORD *)v4 = v15;
            v17 = v15[2];
            if (!v17)
              goto LABEL_71;
          }
          v15[2] = v17 - 1;
          *(_QWORD *)v4 = v15;
          swift_endAccess();
          if ((uint64_t)v6 >= (uint64_t)v5)
            goto LABEL_57;
        }
        v57 = v6;
        v58 = v5;
        v18 = *(_QWORD *)(AGGraphGetValue() + 32);
        swift_bridgeObjectRetain_n();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        v60 = v7;
        v20 = v18 + 64;
        v21 = -1 << *(_BYTE *)(v18 + 32);
        v22 = -v21 < 64 ? ~(-1 << -(char)v21) : -1;
        v23 = v22 & *(_QWORD *)(v18 + 64);
        v24 = (unint64_t)(63 - v21) >> 6;
        swift_bridgeObjectRetain();
        v25 = 0;
        if (v23)
          break;
LABEL_26:
        v28 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_66;
        if (v28 < v24)
        {
          v29 = *(_QWORD *)(v20 + 8 * v28);
          v30 = v25 + 1;
          if (v29)
            goto LABEL_41;
          v30 = v25 + 2;
          if (v25 + 2 < v24)
          {
            v29 = *(_QWORD *)(v20 + 8 * v30);
            if (v29)
              goto LABEL_41;
            v30 = v25 + 3;
            if (v25 + 3 < v24)
            {
              v29 = *(_QWORD *)(v20 + 8 * v30);
              if (v29)
                goto LABEL_41;
              v30 = v25 + 4;
              if (v25 + 4 < v24)
              {
                v29 = *(_QWORD *)(v20 + 8 * v30);
                if (v29)
                  goto LABEL_41;
                v31 = v25 + 5;
                if (v25 + 5 < v24)
                {
                  v29 = *(_QWORD *)(v20 + 8 * v31);
                  if (v29)
                  {
                    v30 = v25 + 5;
LABEL_41:
                    v23 = (v29 - 1) & v29;
                    v27 = __clz(__rbit64(v29)) + (v30 << 6);
                    v25 = v30;
                    goto LABEL_42;
                  }
                  while (1)
                  {
                    v30 = v31 + 1;
                    if (__OFADD__(v31, 1))
                      break;
                    if (v30 >= v24)
                      goto LABEL_4;
                    v29 = *(_QWORD *)(v20 + 8 * v30);
                    ++v31;
                    if (v29)
                      goto LABEL_41;
                  }
LABEL_69:
                  __break(1u);
LABEL_70:
                  __break(1u);
LABEL_71:
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  __break(1u);
                  goto LABEL_74;
                }
              }
            }
          }
        }
LABEL_4:
        swift_bridgeObjectRelease();
        outlined consume of Set<EventID>.Iterator._Variant();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v58;
        v6 = v57 + 1;
        v4 = v55;
        v3 = v56;
        v8 = v54;
        if ((uint64_t)(v57 + 1) >= v58)
          goto LABEL_57;
      }
      while (1)
      {
        while (1)
        {
          v26 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
          v27 = v26 | (v25 << 6);
LABEL_42:
          v32 = *(_DWORD *)(*(_QWORD *)(v18 + 48) + 4 * v27);
          v33 = *(_QWORD *)(v18 + 56) + 24 * v27;
          v59 = *(_OWORD *)v33;
          v34 = *(_QWORD *)(v33 + 16);
          v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
          v37 = v7[2];
          v38 = (v35 & 1) == 0;
          v39 = v37 + v38;
          if (__OFADD__(v37, v38))
          {
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
          v40 = v35;
          if (v7[3] >= v39)
            break;
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, v19 & 1);
          v41 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
          if ((v40 & 1) != (v42 & 1))
            goto LABEL_75;
          v36 = v41;
          if ((v40 & 1) == 0)
            goto LABEL_49;
LABEL_24:
          v19 = 1;
          v7 = v60;
          if (!v23)
            goto LABEL_26;
        }
        if ((v19 & 1) != 0)
        {
          if ((v35 & 1) != 0)
            goto LABEL_24;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v40 & 1) != 0)
            goto LABEL_24;
        }
LABEL_49:
        v7 = v60;
        v60[(v36 >> 6) + 8] |= 1 << v36;
        *(_DWORD *)(v60[6] + 4 * v36) = v32;
        v43 = v60[7] + 24 * v36;
        *(_OWORD *)v43 = v59;
        *(_QWORD *)(v43 + 16) = v34;
        v44 = v60[2];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        if (v45)
          goto LABEL_65;
        v60[2] = v46;
        v19 = 1;
        if (!v23)
          goto LABEL_26;
      }
    }
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_57:
    *v3 = v7;
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v47 = *v3;
  if (*v3)
  {
    if (*(_QWORD *)(v47 + 16) && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(v52), (v49 & 1) != 0))
    {
      v50 = *(_QWORD *)(v47 + 56) + 24 * v48;
      *(_OWORD *)a2 = *(_OWORD *)v50;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v50 + 16);
      *(_BYTE *)(a2 + 24) = 0;
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    return swift_endAccess();
  }
LABEL_74:
  __break(1u);
LABEL_75:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _DisplayList_StableIdentityRoot.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _DisplayList_StableIdentityRoot.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t static _DisplayList_StableIdentityScope.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return static _DisplayList_StableIdentityScope.defaultValue;
}

uint64_t _DisplayList_StableIdentityScope.root.getter()
{
  return swift_retain();
}

__n128 _DisplayList_StableIdentityScope.hash.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = *(_DWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 8);
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  return result;
}

uint64_t _DisplayList_StableIdentityScope.map.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t _DisplayList_StableIdentityScope.map.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  return result;
}

uint64_t (*_DisplayList_StableIdentityScope.map.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _DisplayList_StableIdentityScope.serial.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t _DisplayList_StableIdentityScope.serial.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*_DisplayList_StableIdentityScope.serial.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _DisplayList_StableIdentityScope.init(root:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CC_LONG h4;
  __n128 result;
  uint64_t v6;
  CC_SHA1_CTX v7;
  CC_SHA1_CTX c;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(&v7, 0, sizeof(v7));
  swift_retain();
  CC_SHA1_Init(&v7);
  c = v7;
  specialized StrongHasher.combine<A>(_:)(1953460082, 0xE400000000000000);
  memset(&v7, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&v7, &c);
  swift_release();
  h4 = v7.h4;
  result = *(__n128 *)&v7.h0;
  *(_QWORD *)a2 = a1;
  *(__n128 *)(a2 + 8) = result;
  v6 = MEMORY[0x24BEE4B00];
  *(_DWORD *)(a2 + 24) = h4;
  *(_QWORD *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t specialized StrongHasher.combine<A>(_:)(uint64_t result, unint64_t a2)
{
  CC_SHA1_CTX *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = result & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = String.utf8CString.getter();
    v5 = *(_QWORD *)(v4 + 16);
    if (HIDWORD(v5))
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      CC_SHA1_Update(v2, (const void *)(v4 + 32), v5);
      return swift_release();
    }
  }
  return result;
}

__n128 _DisplayList_StableIdentityScope.init<A>(id:parent:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  CC_LONG v11;
  uint64_t v12;
  CC_LONG h4;
  __n128 result;
  uint64_t v15;
  __n128 v16;
  CC_SHA1_CTX c;
  CC_SHA1_CTX v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 6);
  memset(&c, 0, sizeof(c));
  swift_retain();
  CC_SHA1_Init(&c);
  v18 = c;
  StrongHasher.combine<A>(_:)(a1, a3, a4);
  v12 = a2[2];
  *(_QWORD *)&c.h0 = a2[1];
  *(_QWORD *)&c.h2 = v12;
  c.h4 = v11;
  CC_SHA1_Update(&v18, &c, 0x14u);
  swift_bridgeObjectRelease();
  swift_release();
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &v18);
  h4 = c.h4;
  v16 = *(__n128 *)&c.h0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  *(_QWORD *)a5 = v10;
  result = v16;
  *(__n128 *)(a5 + 8) = v16;
  v15 = MEMORY[0x24BEE4B00];
  *(_DWORD *)(a5 + 24) = h4;
  *(_QWORD *)(a5 + 32) = v15;
  *(_DWORD *)(a5 + 40) = 0;
  return result;
}

__n128 _DisplayList_StableIdentityScope.makeIdentity()@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned __int32 v3;
  __n128 result;

  v2 = *(_DWORD *)(v1 + 40) + 1;
  *(_DWORD *)(v1 + 40) = v2;
  v3 = *(_DWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 8);
  *a1 = result;
  a1[1].n128_u32[0] = v3;
  a1[1].n128_u32[1] = v2;
  return result;
}

uint64_t _DisplayList_StableIdentityScope.pushIdentity(_:)(Swift::UInt32 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  Swift::UInt32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = *a1;
  v4 = (*((_DWORD *)v1 + 10) + 1);
  *((_DWORD *)v2 + 10) = v4;
  v5 = v2[1];
  v6 = v2[2];
  v7 = *((unsigned int *)v2 + 6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = v2[4];
  v2[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v6, v7 | (v4 << 32), v3, isUniquelyReferenced_nonNull_native);
  v2[4] = v11;
  swift_bridgeObjectRelease();
  v9 = *v2;
  swift_beginAccess();
  *(_QWORD *)(v9 + 24) = 0;
  return swift_bridgeObjectRelease();
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance _DisplayList_StableIdentityScope@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static _DisplayList_StableIdentityScope.defaultValue;
  *a1 = static _DisplayList_StableIdentityScope.defaultValue;
  return result;
}

void _DisplayList_StableIdentity.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  Swift::UInt v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(unsigned int *)(v1 + 20);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v4 = a1[1];
  v5 = (_QWORD *)a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  a1[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    a1[1] = v4 + 1;
    StrongHash.encode(to:)(a1);
    ProtobufEncoder.endLengthDelimited()();
    if ((_DWORD)v3)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v3);
    }
  }
}

unint64_t _DisplayList_StableIdentity.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    v7 = 0;
    v8 = 0;
    v23 = 0u;
LABEL_4:
    v3[3] = 0;
    *(_OWORD *)a2 = v23;
    *(_DWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 20) = v7;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v23 = 0u;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v10 = v3[4];
      if (v5 < v10)
        goto LABEL_14;
      if (v10 < v5)
        goto LABEL_47;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
      goto LABEL_47;
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_47;
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_52;
        v19 = v3[1] + result;
        if (v6 < v19)
          goto LABEL_47;
        v3[3] = 16;
        v3[4] = v19;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      v7 = result;
      goto LABEL_7;
    }
    if (result >> 3 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (!v2)
            goto LABEL_7;
          return result;
        case 1uLL:
          v9 = v3[1] + 8;
          if (v6 < v9)
            goto LABEL_47;
          goto LABEL_6;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_53;
          v9 = v3[1] + result;
          if (v6 < v9)
            goto LABEL_47;
LABEL_6:
          v3[1] = v9;
          break;
        case 5uLL:
          v9 = v3[1] + 4;
          if (v6 < v9)
            goto LABEL_47;
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_47;
    v11 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
    v11[2] = v13 + 1;
    v11[v13 + 4] = v6;
    v3[5] = v11;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if ((result & 0x8000000000000000) != 0)
      break;
    v14 = v3[1] + result;
    if (v6 < v14)
      goto LABEL_47;
    v3[2] = v14;
    StrongHash.init(from:)((unint64_t)v3, &v24);
    v15 = (_QWORD *)v3[5];
    if (!v15[2])
      goto LABEL_51;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v16 = v15[2];
      if (!v16)
        goto LABEL_46;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      v15 = (_QWORD *)result;
      v16 = *(_QWORD *)(result + 16);
      if (!v16)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    v17 = v16 - 1;
    v18 = v15[v17 + 4];
    v15[2] = v17;
    v3[5] = v15;
    v3[2] = v18;
    v23 = v24;
    v8 = v25;
LABEL_7:
    v5 = v3[1];
    v6 = v3[2];
    if (v5 >= v6)
      goto LABEL_4;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  __break(1u);
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v22 = *(_QWORD *)(result + 16);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x234B43CFCLL);
  }
  v20 = v22 - 1;
  v21 = *(_QWORD *)(result + 8 * v20 + 32);
  *(_QWORD *)(result + 16) = v20;
  v3[5] = result;
  v3[2] = v21;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _DisplayList_StableIdentity(_QWORD *a1)
{
  _DisplayList_StableIdentity.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _DisplayList_StableIdentity@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _DisplayList_StableIdentity.init(from:)(a1, a2);
}

int64_t _DisplayList_StableIdentityMap.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t result;
  int64_t i;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = 1 << *(_BYTE *)(*v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*v1 + 64);
  v31 = (unint64_t)(v3 + 63) >> 6;
  v32 = *v1;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v33)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (i << 6);
    }
    else
    {
      v10 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_51;
      if (v10 >= v31)
        return swift_release();
      v11 = *(_QWORD *)(v30 + 8 * v10);
      ++i;
      if (!v11)
      {
        i = v10 + 1;
        if (v10 + 1 >= v31)
          return swift_release();
        v11 = *(_QWORD *)(v30 + 8 * i);
        if (!v11)
        {
          i = v10 + 2;
          if (v10 + 2 >= v31)
            return swift_release();
          v11 = *(_QWORD *)(v30 + 8 * i);
          if (!v11)
          {
            v12 = v10 + 3;
            if (v12 >= v31)
              return swift_release();
            v11 = *(_QWORD *)(v30 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                i = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_52;
                if (i >= v31)
                  return swift_release();
                v11 = *(_QWORD *)(v30 + 8 * i);
                ++v12;
                if (v11)
                  goto LABEL_20;
              }
            }
            i = v12;
          }
        }
      }
LABEL_20:
      v5 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (i << 6);
    }
    v13 = *(unsigned int *)(*(_QWORD *)(v32 + 48) + 4 * v9);
    v14 = *(unsigned int *)(*(_QWORD *)(v32 + 56) + 24 * v9 + 20);
    v15 = a1[1];
    v16 = a1[2];
    v33 = i;
    if (v15 >= v16)
    {
      result = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_53;
      if (v16 < result)
      {
        v29 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(result);
      }
      else
      {
        a1[1] = result;
        v29 = (_BYTE *)(*a1 + v15);
      }
      *v29 = 10;
      v17 = a1[1];
    }
    else
    {
      *(_BYTE *)(*a1 + v15) = 10;
      v17 = v15 + 1;
      a1[1] = v15 + 1;
    }
    v18 = (_QWORD *)a1[3];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v18 = (_QWORD *)result;
    }
    v20 = v18[2];
    v19 = v18[3];
    if (v20 >= v19 >> 1)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
      v18 = (_QWORD *)result;
    }
    v18[2] = v20 + 1;
    v18[v20 + 4] = v17;
    a1[3] = v18;
    if (__OFADD__(v17, 1))
      break;
    a1[1] = v17 + 1;
    if ((_DWORD)v13)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(v13);
    }
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v21 = a1[1];
    v22 = (_QWORD *)a1[3];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      v22 = (_QWORD *)result;
    }
    v24 = v22[2];
    v23 = v22[3];
    if (v24 >= v23 >> 1)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
      v22 = (_QWORD *)result;
    }
    v22[2] = v24 + 1;
    v22[v24 + 4] = v21;
    a1[3] = v22;
    if (__OFADD__(v21, 1))
      goto LABEL_49;
    a1[1] = v21 + 1;
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    v25 = a1[1];
    v26 = (_QWORD *)a1[3];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
      v26 = (_QWORD *)result;
    }
    v28 = v26[2];
    v27 = v26[3];
    if (v28 >= v27 >> 1)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
      v26 = (_QWORD *)result;
    }
    v26[2] = v28 + 1;
    v26[v28 + 4] = v25;
    a1[3] = v26;
    if (__OFADD__(v25, 1))
      goto LABEL_50;
    a1[1] = v25 + 1;
    StrongHash.encode(to:)(a1);
    ProtobufEncoder.endLengthDelimited()();
    if ((_DWORD)v14)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v14);
    }
    ProtobufEncoder.endLengthDelimited()();
    result = ProtobufEncoder.endLengthDelimited()();
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

unint64_t _DisplayList_StableIdentityMap.init(from:)@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt32 v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v3 = v2;
  v4 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    if (v5 >= v6)
    {
      v4[3] = 0;
      *a2 = v7;
      return result;
    }
    result = v4[3];
    if (result)
    {
      v9 = v4[4];
      if (v5 < v9)
        goto LABEL_12;
      if (v9 < v5)
        goto LABEL_41;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      return swift_bridgeObjectRelease();
    if (result < 8)
    {
LABEL_41:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_12:
    if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
      break;
    switch(result & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          return swift_bridgeObjectRelease();
        break;
      case 1uLL:
        v8 = v4[1] + 8;
        if (v6 >= v8)
          goto LABEL_3;
        goto LABEL_41;
      case 2uLL:
        v10 = v4;
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          return swift_bridgeObjectRelease();
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_47;
        v8 = v4[1] + result;
        if (v6 < v8)
          goto LABEL_41;
LABEL_3:
        v4[1] = v8;
        break;
      case 5uLL:
        v8 = v4[1] + 4;
        if (v6 < v8)
          goto LABEL_41;
        goto LABEL_3;
      default:
        goto LABEL_41;
    }
LABEL_4:
    v5 = v4[1];
    v6 = v4[2];
  }
  if ((result & 7) != 2)
    goto LABEL_41;
  ProtobufDecoder.beginMessage()();
  if (v3)
    return swift_bridgeObjectRelease();
  closure #1 in _DisplayList_StableIdentityMap.init(from:)(v4, &v35);
  v3 = 0;
  v10 = (_QWORD *)v4[5];
  if (v10[2])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v11 = v10[2];
      if (!v11)
        goto LABEL_45;
    }
    else
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      v11 = v10[2];
      if (!v11)
        goto LABEL_45;
    }
    v12 = v11 - 1;
    v13 = v10[v12 + 4];
    v10[2] = v12;
    v4[5] = v10;
    v4[2] = v13;
    v15 = v35;
    v14 = HIDWORD(v35);
    v16 = v36;
    v32 = v38;
    v33 = v37;
    v41 = v39;
    v34 = v40;
    v10 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = v10;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    v20 = v10[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_46;
    v23 = v18;
    if (v10[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v7 = v35;
        if ((v18 & 1) == 0)
          goto LABEL_22;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v7 = v35;
        if ((v23 & 1) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_49;
      v19 = v24;
      v7 = v35;
      if ((v23 & 1) == 0)
      {
LABEL_22:
        specialized _NativeDictionary._insert(at:key:value:)(v19, v15, v14 | (v16 << 32), v33 | (v32 << 32), v41 | (v34 << 32), v7);
LABEL_29:
        result = swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    v26 = (_DWORD *)(v7[7] + 24 * v19);
    *v26 = v14;
    v26[1] = v16;
    v26[2] = v33;
    v26[3] = v32;
    v26[4] = v41;
    v26[5] = v34;
    goto LABEL_29;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  __break(1u);
  v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  v30 = v29[2];
  if (!v30)
  {
    __break(1u);
LABEL_49:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x234B444D0);
  }
  v27 = v30 - 1;
  v28 = v29[v27 + 4];
  v29[2] = v27;
  v4[5] = v29;
  v4[2] = v28;
  return swift_bridgeObjectRelease();
}

unint64_t closure #1 in _DisplayList_StableIdentityMap.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _DWORD *v27;

  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  if (v4 >= (unint64_t)v5)
  {
    a1[3] = 0;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  v27 = a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v11 = 1;
  while (1)
  {
    result = a1[3];
    if (result)
    {
      v14 = a1[4];
      if (v4 < v14)
        goto LABEL_15;
      if (v14 < v4)
        goto LABEL_4;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
      goto LABEL_4;
LABEL_15:
    if (result >> 3 == 2)
      break;
    if (result >> 3 == 1)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_4;
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_53;
        v15 = a1[1] + result;
        if ((unint64_t)v5 < v15)
          goto LABEL_4;
        a1[3] = 8;
        a1[4] = v15;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      v9 = result;
      v11 = 0;
    }
    else
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (!v2)
            break;
          return result;
        case 1uLL:
          v13 = a1[1] + 8;
          if ((unint64_t)v5 < v13)
            goto LABEL_4;
          goto LABEL_7;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_54;
          v13 = a1[1] + result;
          if ((unint64_t)v5 < v13)
            goto LABEL_4;
LABEL_7:
          a1[1] = v13;
          break;
        case 5uLL:
          v13 = a1[1] + 4;
          if ((unint64_t)v5 < v13)
            goto LABEL_4;
          goto LABEL_7;
        default:
          goto LABEL_4;
      }
    }
LABEL_8:
    v4 = a1[1];
    v5 = (_QWORD *)a1[2];
    if (v4 >= (unint64_t)v5)
      goto LABEL_48;
  }
  if ((result & 7) != 2)
    goto LABEL_4;
  v16 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  v6 = v16[2];
  v17 = v16[3];
  v7 = v6 + 1;
  if (v6 >= v17 >> 1)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v6 + 1, 1, v16);
  v16[2] = v7;
  v16[v6 + 4] = v5;
  a1[5] = v16;
  result = ProtobufDecoder.decodeVarint()();
  if (v2)
    return result;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    __break(1u);
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v25 = *(_QWORD *)(result + 16);
    if (!v25)
    {
      __break(1u);
      JUMPOUT(0x234B44878);
    }
    v23 = v25 - 1;
    v24 = *(_QWORD *)(result + 8 * v23 + 32);
    *(_QWORD *)(result + 16) = v23;
    a1[5] = result;
    a1[2] = v24;
    return result;
  }
  v18 = a1[1] + result;
  if ((unint64_t)v5 < v18)
    goto LABEL_4;
  a1[2] = v18;
  _DisplayList_StableIdentity.init(from:)((unint64_t)a1, (uint64_t)v26);
  v8 = (_QWORD *)a1[5];
  if (!v8[2])
    goto LABEL_52;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v19 = v8[2];
    if (!v19)
      goto LABEL_47;
    goto LABEL_36;
  }
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
  v8 = (_QWORD *)result;
  v19 = *(_QWORD *)(result + 16);
  if (v19)
  {
LABEL_36:
    v10 = 0;
    v20 = v19 - 1;
    v21 = v8[v20 + 4];
    v8[2] = v20;
    a1[5] = v8;
    a1[2] = v21;
    v6 = v26[0];
    v7 = v26[1];
    v8 = (_QWORD *)v26[2];
    goto LABEL_8;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  a1[3] = 0;
  if (((v11 | v10) & 1) != 0)
    goto LABEL_4;
  v22 = v27;
  *v27 = v9;
  *(_QWORD *)(v22 + 1) = v6;
  *(_QWORD *)(v22 + 3) = v7;
  *(_QWORD *)(v22 + 5) = v8;
  return result;
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _DisplayList_StableIdentityMap(_QWORD *a1)
{
  return _DisplayList_StableIdentityMap.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _DisplayList_StableIdentityMap@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return _DisplayList_StableIdentityMap.init(from:)(a1, a2);
}

uint64_t (*Attribute<A>.subscript.modify())(_QWORD, _QWORD)
{
  AGGraphGetValue();
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.configureStableIDs(root:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  CC_SHA1_CTX c;
  CC_SHA1_CTX v13;
  uint64_t v14;

  v2 = (uint64_t *)v1;
  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(v1 + 36);
  if ((v4 & 0x100) == 0)
    *(_DWORD *)(v1 + 36) = v4 | 0x100;
  memset(&c, 0, sizeof(c));
  swift_retain();
  CC_SHA1_Init(&c);
  v13 = c;
  specialized StrongHasher.combine<A>(_:)(1953460082, 0xE400000000000000);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &v13);
  *(_QWORD *)&v13.h0 = a1;
  *(_OWORD *)&v13.h2 = *(_OWORD *)&c.h0;
  v13.Nh = c.h4;
  *(_QWORD *)&v13.data[1] = MEMORY[0x24BEE4B00];
  v13.data[3] = 0;
  type metadata accessor for External<_DisplayList_StableIdentityScope>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>, MEMORY[0x24BE09678]);
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_release();
  v5 = AGCreateWeakAttribute();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v5);
  swift_release();
  v6 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  v7 = *(_QWORD **)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 16) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v5;
  return swift_endAccess();
}

Swift::UInt32 *_ViewInputs.pushIdentity(_:)(Swift::UInt32 *result)
{
  uint64_t v1;
  Swift::UInt32 v2;
  __int128 v3;
  __int128 v4;
  uint64_t (*v5)(_QWORD, _QWORD);
  _BYTE v6[36];
  Swift::UInt32 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v2 = *result;
  v3 = *(_OWORD *)(v1 + 48);
  v9 = *(_OWORD *)(v1 + 32);
  v10 = v3;
  v11 = *(_OWORD *)(v1 + 64);
  v12 = *(_DWORD *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v4;
  if ((BYTE5(v9) & 1) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)v8);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v8);
    result = (Swift::UInt32 *)AGWeakAttributeGetAttribute();
    if ((_DWORD)result == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v7 = v2;
      v5 = Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(&v7);
      return (Swift::UInt32 *)v5(v6, 0);
    }
  }
  return result;
}

uint64_t _ViewInputs.makeStableIdentity()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  __int128 v7;

  v3 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (!specialized find<A>(_:key:)(v3) && one-time initialization token for defaultValue != -1)
    swift_once();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
  {
    result = specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
    v5 = 0;
    v6 = 0;
    v7 = 0uLL;
  }
  else
  {
    result = AGGraphGetValue();
    v6 = *(_DWORD *)(result + 40) + 1;
    *(_DWORD *)(result + 40) = v6;
    v7 = *(_OWORD *)(result + 8);
    v5 = *(_DWORD *)(result + 24);
  }
  *(_OWORD *)a1 = v7;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v6;
  return result;
}

void _GraphInputs.pushStableID<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  if ((*(_BYTE *)(v2 + 37) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v11);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for StronglyHashable);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v19);
      v12 = v22;
      v13 = v23;
      v14 = __swift_project_boxed_opaque_existential_1(&v19, v22);
      _GraphInputs.pushScope<A>(id:)((uint64_t)v14, v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    }
    else
    {
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      outlined destroy of AnyTrackedValue?((uint64_t)&v16, &lazy cache variable for type metadata for StronglyHashable?, &lazy cache variable for type metadata for StronglyHashable);
      makeStableIDData<A>(from:)(a1, a2, (uint64_t)&v19);
      if ((v21 & 1) != 0)
      {
        UUID.init()();
        specialized StrongHash.init<A>(of:)(v7, (uint64_t)&v16);
        v15 = v17;
      }
      else
      {
        v15 = v20;
        v16 = v19;
      }
      specialized _GraphInputs.pushScope<A>(id:)(v16, *((uint64_t *)&v16 + 1), (_QWORD *)v15);
    }
  }
}

uint64_t specialized _GraphInputs.pushScope<A>(id:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  CC_LONG v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  CC_SHA1_CTX c;
  CC_SHA1_CTX v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = swift_retain();
  if (!specialized find<A>(_:key:)(v4) && one-time initialization token for defaultValue != -1)
    swift_once();
  swift_release();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v7 = *(_DWORD *)(Value + 24);
    v8 = *(_QWORD *)(Value + 8);
    v9 = *(_QWORD *)(Value + 16);
    memset(&c, 0, sizeof(c));
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    CC_SHA1_Init(&c);
    v15 = c;
    *(_QWORD *)&c.h0 = a1;
    CC_SHA1_Update(&v15, &c, 8u);
    *(_QWORD *)&c.h0 = v8;
    *(_QWORD *)&c.h2 = v9;
    c.h4 = v7;
    CC_SHA1_Update(&v15, &c, 0x14u);
    swift_bridgeObjectRelease();
    swift_release();
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &v15);
    *(_QWORD *)&v15.h0 = v6;
    *(_OWORD *)&v15.h2 = *(_OWORD *)&c.h0;
    v15.Nh = c.h4;
    *(_QWORD *)&v15.data[1] = MEMORY[0x24BEE4B00];
    v15.data[3] = 0;
    type metadata accessor for External<_DisplayList_StableIdentityScope>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>, MEMORY[0x24BE09678]);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_release();
    v2 = AGCreateWeakAttribute();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v1, v2);
    swift_release();
    v1 = (uint64_t *)(v6 + 16);
    swift_beginAccess();
    a1 = *(_QWORD **)(v6 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 16) = a1;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
  }
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *v1 = (uint64_t)a1;
LABEL_6:
  v12 = a1[2];
  v11 = a1[3];
  if (v12 >= v11 >> 1)
  {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, a1);
    *v1 = (uint64_t)a1;
  }
  a1[2] = v12 + 1;
  a1[v12 + 4] = v2;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized _GraphInputs.pushScope<A>(id:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t Value;
  uint64_t v9;
  CC_LONG v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  CC_SHA1_CTX c;
  CC_SHA1_CTX v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v7 = swift_retain();
  if (!specialized find<A>(_:key:)(v7) && one-time initialization token for defaultValue != -1)
    swift_once();
  swift_release();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    v9 = *(_QWORD *)Value;
    v10 = *(_DWORD *)(Value + 24);
    v11 = *(_QWORD *)(Value + 8);
    v12 = *(_QWORD *)(Value + 16);
    memset(&c, 0, sizeof(c));
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    CC_SHA1_Init(&c);
    v18 = c;
    *(_QWORD *)&c.h0 = a1;
    *(_QWORD *)&c.h2 = a2;
    c.h4 = a3;
    CC_SHA1_Update(&v18, &c, 0x14u);
    *(_QWORD *)&c.h0 = v11;
    *(_QWORD *)&c.h2 = v12;
    c.h4 = v10;
    CC_SHA1_Update(&v18, &c, 0x14u);
    swift_bridgeObjectRelease();
    swift_release();
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &v18);
    *(_QWORD *)&v18.h0 = v9;
    *(_OWORD *)&v18.h2 = *(_OWORD *)&c.h0;
    v18.Nh = c.h4;
    *(_QWORD *)&v18.data[1] = MEMORY[0x24BEE4B00];
    v18.data[3] = 0;
    type metadata accessor for External<_DisplayList_StableIdentityScope>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>, MEMORY[0x24BE09678]);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_release();
    a2 = AGCreateWeakAttribute();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, a2);
    swift_release();
    v3 = (uint64_t *)(v9 + 16);
    swift_beginAccess();
    a3 = *(_QWORD **)(v9 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v9 + 16) = a3;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
  }
  a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3[2] + 1, 1, a3);
  *v3 = (uint64_t)a3;
LABEL_6:
  v15 = a3[2];
  v14 = a3[3];
  if (v15 >= v14 >> 1)
  {
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, a3);
    *v3 = (uint64_t)a3;
  }
  a3[2] = v15 + 1;
  a3[v15 + 4] = a2;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _GraphInputs.pushScope<A>(id:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v5 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_retain();
  if (!specialized find<A>(_:key:)(v10) && one-time initialization token for defaultValue != -1)
    swift_once();
  swift_release();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v23 = v3;
    Value = AGGraphGetValue();
    v12 = *(_QWORD *)Value;
    v13 = (uint64_t)a3;
    v14 = *(_DWORD *)(Value + 24);
    v15 = *(_QWORD *)(Value + 32);
    v16 = *(_DWORD *)(Value + 40);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v22 = *(_OWORD *)(Value + 8);
    v17(v9, a1, v5);
    v24 = v12;
    v25 = v22;
    v26 = v14;
    v27 = v15;
    v28 = v16;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    _DisplayList_StableIdentityScope.init<A>(id:parent:)((uint64_t)v9, &v24, v5, v13, (uint64_t)&v29);
    v24 = v29;
    v25 = v30;
    v26 = v31;
    v27 = v32;
    v28 = v33;
    type metadata accessor for External<_DisplayList_StableIdentityScope>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>, MEMORY[0x24BE09678]);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_release();
    v5 = AGCreateWeakAttribute();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v23, v5);
    swift_release();
    v3 = (uint64_t *)(v12 + 16);
    swift_beginAccess();
    a3 = *(_QWORD **)(v12 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v12 + 16) = a3;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
  }
  a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3[2] + 1, 1, a3);
  *v3 = (uint64_t)a3;
LABEL_6:
  v20 = a3[2];
  v19 = a3[3];
  if (v20 >= v19 >> 1)
  {
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, a3);
    *v3 = (uint64_t)a3;
  }
  a3[2] = v20 + 1;
  a3[v20 + 4] = v5;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t makeStableIDData<A>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v6 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v6);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v22, (uint64_t)&v25);
    v9 = v27;
    v10 = __swift_project_boxed_opaque_existential_1(&v25, v27);
    v11 = MEMORY[0x24BDAC7A8](v10);
    v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v14 + 16))(v13, v11);
    StrongHash.init<A>(encodable:)((uint64_t)v13, v9, (uint64_t)&v22);
    v15 = 0;
    v18 = *((_QWORD *)&v22 + 1);
    v17 = v22;
    v19 = v23;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  }
  else
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    outlined destroy of AnyTrackedValue?((uint64_t)&v22, &lazy cache variable for type metadata for Encodable?, &lazy cache variable for type metadata for Encodable);
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v25 = 0xD00000000000001ALL;
    v26 = 0x80000002352DF640;
    swift_getDynamicType();
    v16._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(v25, v26);
    result = swift_bridgeObjectRelease();
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v15 = 1;
  }
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 16) = v19;
  *(_BYTE *)(a3 + 20) = v15;
  return result;
}

Swift::Void __swiftcall _GraphInputs.pushStableIndex(_:)(Swift::Int a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 37) & 1) != 0)
    specialized _GraphInputs.pushScope<A>(id:)((_QWORD *)a1);
}

uint64_t _GraphInputs.pushStableType(_:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  if ((*(_BYTE *)(v0 + 37) & 1) != 0)
  {
    AGTypeGetSignature();
    return specialized _GraphInputs.pushScope<A>(id:)(v2, v3, (_QWORD *)v4);
  }
  return result;
}

double makeStableTypeData(_:)@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  int v4;

  AGTypeGetSignature();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t _GraphInputs.stableIDScope.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(v0 + 37) & 1) == 0)
    return 0;
  v2 = *(_QWORD *)v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
    v5 = (unsigned int *)(v3 + 76);
  }
  else
  {
    v4 = &static _DisplayList_StableIdentityScope.defaultValue;
    v5 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
    {
      swift_once();
      v5 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
    }
  }
  v6 = *(unsigned int *)v4;
  v7 = *v5;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
    return 0;
  else
    return v6 | (v7 << 32);
}

uint64_t specialized StrongHash.init<A>(of:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  CC_LONG h4;
  uint64_t result;
  __int128 v10;
  CC_SHA1_CTX c;
  CC_SHA1_CTX v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(&c, 0, sizeof(c));
  CC_SHA1_Init(&c);
  v12 = c;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if ((v6 & 0x8000000000000000) != 0 || HIDWORD(v6))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v7 = v4;
    CC_SHA1_Update(&v12, a1, v6);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &v12);
    h4 = c.h4;
    v10 = *(_OWORD *)&c.h0;
    result = (*(uint64_t (**)(const void *, uint64_t))(v5 + 8))(a1, v7);
    *(_OWORD *)a2 = v10;
    *(_DWORD *)(a2 + 16) = h4;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_OWORD *)(v16 + 32 * v3);
            v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 2))
            {
              v9 = v18[1];
              *v17 = *v18;
              v17[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _BYTE v27[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v27);
        v9 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = outlined destroy of AnyHashable((uint64_t)v27);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= v10)
          {
LABEL_16:
            v13 = *(_QWORD *)(a2 + 48);
            v14 = v13 + 40 * v3;
            v15 = (__int128 *)(v13 + 40 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 40)
            {
              v16 = *v15;
              v17 = v15[1];
              *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
              *(_OWORD *)v14 = v16;
              *(_OWORD *)(v14 + 16) = v17;
            }
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
            {
              *v19 = *v20;
              v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= v10)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt32 v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_DWORD *)(v12 + 4 * v3);
          v14 = (_DWORD *)(v12 + 4 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= (unint64_t)v17 + 24))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt8 v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  Swift::UInt v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  uint64_t v37;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v33 = v4;
      v34 = (result + 1) & v7;
      v35 = v7;
      do
      {
        v8 = v3;
        v9 = v2;
        v37 = 56 * v6;
        v10 = *(_QWORD *)(v2 + 48) + 56 * v6;
        v11 = *(_QWORD *)v10;
        v12 = *(_QWORD *)(v10 + 8);
        v14 = *(_QWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v10 + 24);
        v15 = *(unsigned __int8 *)(v10 + 32);
        v36 = *(_QWORD *)(v10 + 40);
        v16 = *(unsigned __int8 *)(v10 + 48);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v14);
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v13);
        }
        v2 = v9;
        v3 = v8;
        if (v16)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v36);
        }
        result = Hasher._finalize()();
        v17 = result & v35;
        if (v8 >= (uint64_t)v34)
        {
          if (v17 >= v34 && v8 >= (uint64_t)v17)
          {
LABEL_18:
            v18 = *(_QWORD *)(v9 + 48);
            v19 = v18 + 56 * v8;
            v20 = (__int128 *)(v18 + v37);
            if (56 * v8 < v37 || v19 >= (unint64_t)v20 + 56 || v8 != v6)
            {
              v21 = *v20;
              v22 = v20[1];
              v23 = v20[2];
              *(_QWORD *)(v19 + 48) = *((_QWORD *)v20 + 6);
              *(_OWORD *)(v19 + 16) = v22;
              *(_OWORD *)(v19 + 32) = v23;
              *(_OWORD *)v19 = v21;
            }
            v24 = *(_QWORD *)(v9 + 56);
            v25 = (_QWORD *)(v24 + 8 * v8);
            v26 = (_QWORD *)(v24 + 8 * v6);
            v4 = v33;
            if (v8 != v6 || (v3 = v6, v25 >= v26 + 1))
            {
              *v25 = *v26;
              v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v17 >= v34 || v8 >= (uint64_t)v17)
        {
          goto LABEL_18;
        }
        v4 = v33;
LABEL_5:
        v6 = (v6 + 1) & v35;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v27 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v28 = *v27;
    v29 = (-1 << v3) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v4 + 8 * (result >> 6));
    v29 = *v27;
    v28 = (-1 << result) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(v2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v32;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  Swift::UInt32 *v12;
  uint64_t v13;
  Swift::UInt32 v14;
  Swift::UInt32 v15;
  int64_t v16;
  Swift::UInt32 v17;
  Swift::UInt32 v18;
  unint64_t v19;
  Swift::UInt32 v20;
  Swift::UInt32 v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v35 = v4;
      do
      {
        v11 = v2;
        v12 = (Swift::UInt32 *)(*(_QWORD *)(v2 + 48) + 16 * v6);
        v13 = v7;
        v14 = *v12;
        v15 = v12[1];
        v16 = v3;
        v17 = v12[2];
        v18 = v12[3];
        v19 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v14);
        v20 = v15;
        v7 = v13;
        Hasher._combine(_:)(v20);
        v21 = v17;
        v3 = v16;
        Hasher._combine(_:)(v21);
        Hasher._combine(_:)(v18);
        result = Hasher._finalize()();
        v8 = v19;
        v22 = result & v13;
        if (v16 >= (uint64_t)v19)
        {
          if (v22 < v19)
          {
            v4 = v35;
            v2 = v11;
          }
          else
          {
            v4 = v35;
            v2 = v11;
            if (v3 >= (uint64_t)v22)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v35;
          v2 = v11;
          if (v22 >= v8 || v3 >= (uint64_t)v22)
          {
LABEL_12:
            v23 = *(_QWORD *)(v2 + 48);
            v24 = (_OWORD *)(v23 + 16 * v3);
            v25 = (_OWORD *)(v23 + 16 * v6);
            if (v3 != v6 || v24 >= v25 + 1)
              *v24 = *v25;
            v26 = *(_QWORD *)(v2 + 56);
            v27 = v26 + 40 * v3;
            v28 = (__int128 *)(v26 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v27 >= (unint64_t)v28 + 40))
            {
              v9 = *v28;
              v10 = v28[1];
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)v27 = v9;
              *(_OWORD *)(v27 + 16) = v10;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v13;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v29 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v30 = *v29;
    v31 = (-1 << v3) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v4 + 8 * (result >> 6));
    v31 = *v29;
    v30 = (-1 << result) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(v2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v34;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        v11 = v10;
        String.hash(into:)();
        v12 = Hasher._finalize()();

        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 2))
          {
            v9 = v19[1];
            *v18 = *v19;
            v18[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::UInt *v11;
  Swift::UInt v12;
  Swift::UInt v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (Swift::UInt *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        result = Hasher._finalize()();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = v18 + 40 * v3;
          v20 = (__int128 *)(v18 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= (unint64_t)v20 + 40))
          {
            v9 = *v20;
            v10 = v20[1];
            *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
            *(_OWORD *)v19 = v9;
            *(_OWORD *)(v19 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AccessibilityCustomAttributes.Value() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  int v15;
  Swift::UInt64 v16;
  int v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v37 = v4;
      do
      {
        v9 = v8;
        v10 = v7;
        v11 = 32 * v6;
        v12 = v2;
        v13 = *(_QWORD *)(v2 + 48) + 32 * v6;
        v14 = *(_QWORD *)v13;
        v15 = *(unsigned __int8 *)(v13 + 8);
        v16 = *(_QWORD *)(v13 + 16);
        v17 = *(unsigned __int8 *)(v13 + 24);
        Hasher.init(_seed:)();
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
          if (v17)
            goto LABEL_16;
        }
        else
        {
          Hasher._combine(_:)(1u);
          if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0)
            v19 = v14;
          else
            v19 = 0;
          Hasher._combine(_:)(v19);
          if (v17)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_17;
          }
        }
        Hasher._combine(_:)(1u);
        if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v18 = v16;
        else
          v18 = 0;
        Hasher._combine(_:)(v18);
LABEL_17:
        v2 = v12;
        result = Hasher._finalize()();
        v7 = v10;
        v20 = result & v10;
        v8 = v9;
        if (v3 >= (uint64_t)v9)
        {
          if (v20 >= v9 && v3 >= (uint64_t)v20)
          {
LABEL_23:
            v21 = *(_QWORD *)(v12 + 48);
            v22 = (_OWORD *)(v21 + 32 * v3);
            v23 = (_OWORD *)(v21 + v11);
            if (32 * v3 != v11 || v22 >= v23 + 2)
            {
              v24 = v23[1];
              *v22 = *v23;
              v22[1] = v24;
            }
            v25 = *(_QWORD *)(v12 + 56);
            v26 = v25 + 56 * v3;
            v27 = (__int128 *)(v25 + 56 * v6);
            v4 = v37;
            if (v3 != v6 || (v3 = v6, v26 >= (unint64_t)v27 + 56))
            {
              v28 = *v27;
              v29 = v27[1];
              v30 = v27[2];
              *(_QWORD *)(v26 + 48) = *((_QWORD *)v27 + 6);
              *(_OWORD *)(v26 + 16) = v29;
              *(_OWORD *)(v26 + 32) = v30;
              *(_OWORD *)v26 = v28;
              v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v9 || v3 >= (uint64_t)v20)
        {
          goto LABEL_23;
        }
        v4 = v37;
LABEL_5:
        v6 = (v6 + 1) & v10;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v31 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v32 = *v31;
    v33 = (-1 << v3) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v4 + 8 * (result >> 6));
    v33 = *v31;
    v32 = (-1 << result) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(v2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v36;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            v16 = (_QWORD *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1)
              *v16 = *v12;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = v17 + 40 * v3;
            v19 = (__int128 *)(v17 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              v9 = *v19;
              v10 = v19[1];
              *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
              *(_OWORD *)v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt32 v10;
  Swift::UInt32 v11;
  int64_t v12;
  Swift::UInt32 v13;
  Swift::UInt32 v14;
  Swift::UInt8 v15;
  Swift::UInt32 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  const void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v30 = v2;
      v31 = v4;
      do
      {
        v32 = 20 * v6;
        v9 = *(_QWORD *)(v2 + 48) + 20 * v6;
        v10 = *(_DWORD *)v9;
        v11 = *(_DWORD *)(v9 + 4);
        v12 = v3;
        v13 = *(_DWORD *)(v9 + 8);
        v14 = *(_DWORD *)(v9 + 12);
        v15 = *(_BYTE *)(v9 + 16);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        v16 = v13;
        v3 = v12;
        Hasher._combine(_:)(v16);
        Hasher._combine(_:)(v14);
        Hasher._combine(_:)(v15);
        result = Hasher._finalize()();
        v17 = result & v7;
        if (v12 >= (uint64_t)v8)
        {
          if (v17 < v8)
          {
            v2 = v30;
            v4 = v31;
          }
          else
          {
            v2 = v30;
            v4 = v31;
            if (v3 >= (uint64_t)v17)
              goto LABEL_12;
          }
        }
        else
        {
          v2 = v30;
          v4 = v31;
          if (v17 >= v8 || v3 >= (uint64_t)v17)
          {
LABEL_12:
            v18 = *(_QWORD *)(v2 + 48);
            v19 = v18 + 20 * v3;
            v20 = (__int128 *)(v18 + v32);
            if (20 * v3 < v32 || v19 >= (unint64_t)v20 + 20 || v3 != v6)
            {
              v21 = *v20;
              *(_DWORD *)(v19 + 16) = *((_DWORD *)v20 + 4);
              *(_OWORD *)v19 = v21;
            }
            v22 = *(_QWORD *)(v2 + 56);
            result = v22 + 120 * v3;
            v23 = (const void *)(v22 + 120 * v6);
            if (v3 != v6 || (v3 = v6, result >= (unint64_t)v23 + 120))
            {
              result = (unint64_t)memmove((void *)result, v23, 0x78uLL);
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(v2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_QWORD *)(v12 + 8 * v3);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 20 * v3;
          v17 = (__int128 *)(v15 + 20 * v6);
          if (20 * v3 < (uint64_t)(20 * v6) || v16 >= (unint64_t)v17 + 20 || (v18 = v3 == v6, v3 = v6, !v18))
          {
            v9 = *v17;
            *(_DWORD *)(v16 + 16) = *((_DWORD *)v17 + 4);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 120 * v3;
          v15 = (const void *)(v14 + 120 * v6);
          if (120 * v3 < (uint64_t)(120 * v6)
            || result >= (unint64_t)v15 + 120
            || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x78uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (Swift::UInt *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_QWORD *)(v16 + 8 * v3);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE v25[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v25);
        v9 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = outlined destroy of AnyHashable((uint64_t)v25);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8 || v3 < v10)
            goto LABEL_6;
        }
        else if (v10 < v8 && v3 < v10)
        {
          goto LABEL_6;
        }
        v13 = *(_QWORD *)(a2 + 48);
        v14 = v13 + 40 * v3;
        v15 = (__int128 *)(v13 + 40 * v6);
        if (v3 != v6 || v14 >= (unint64_t)v15 + 40)
        {
          v16 = *v15;
          v17 = v15[1];
          *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
          *(_OWORD *)v14 = v16;
          *(_OWORD *)(v14 + 16) = v17;
        }
        if (v3 < (uint64_t)v6 || *(_QWORD *)(a2 + 56) + 8 * v3 >= *(_QWORD *)(a2 + 56) + 8 * v6 + 8)
        {
          type metadata accessor for WeakBox<AnyLocationBase>(0);
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v18 = v3 == v6;
          v3 = v6;
          if (v18)
            goto LABEL_6;
          type metadata accessor for WeakBox<AnyLocationBase>(0);
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (Swift::UInt *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (16 * v3 != 16 * v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt32 v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_BYTE *)(v12 + v3);
          v14 = (_BYTE *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  int v15;
  Swift::UInt64 v16;
  int v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v34 = v4;
      do
      {
        v9 = v8;
        v10 = v7;
        v11 = 32 * v6;
        v12 = v2;
        v13 = *(_QWORD *)(v2 + 48) + 32 * v6;
        v14 = *(_QWORD *)v13;
        v15 = *(unsigned __int8 *)(v13 + 8);
        v16 = *(_QWORD *)(v13 + 16);
        v17 = *(unsigned __int8 *)(v13 + 24);
        Hasher.init(_seed:)();
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
          if (v17)
            goto LABEL_16;
        }
        else
        {
          Hasher._combine(_:)(1u);
          if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0)
            v19 = v14;
          else
            v19 = 0;
          Hasher._combine(_:)(v19);
          if (v17)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_17;
          }
        }
        Hasher._combine(_:)(1u);
        if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v18 = v16;
        else
          v18 = 0;
        Hasher._combine(_:)(v18);
LABEL_17:
        result = Hasher._finalize()();
        v7 = v10;
        v20 = result & v10;
        v8 = v9;
        v2 = v12;
        if (v3 >= (uint64_t)v9)
        {
          if (v20 >= v9 && v3 >= (uint64_t)v20)
          {
LABEL_23:
            v21 = *(_QWORD *)(v12 + 48);
            v22 = (_OWORD *)(v21 + 32 * v3);
            v23 = (_OWORD *)(v21 + v11);
            if (32 * v3 != v11 || v22 >= v23 + 2)
            {
              v24 = v23[1];
              *v22 = *v23;
              v22[1] = v24;
            }
            v25 = *(_QWORD *)(v12 + 56);
            v26 = (_QWORD *)(v25 + 8 * v3);
            v27 = (_QWORD *)(v25 + 8 * v6);
            v4 = v34;
            if (v3 != v6 || (v3 = v6, v26 >= v27 + 1))
            {
              *v26 = *v27;
              v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v9 || v3 >= (uint64_t)v20)
        {
          goto LABEL_23;
        }
        v4 = v34;
LABEL_5:
        v6 = (v6 + 1) & v10;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v28 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v29 = *v28;
    v30 = (-1 << v3) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v4 + 8 * (result >> 6));
    v30 = *v28;
    v29 = (-1 << result) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(v2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v33;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  int v15;
  Swift::UInt64 v16;
  int v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v34 = v4;
      do
      {
        v9 = v8;
        v10 = v7;
        v11 = 32 * v6;
        v12 = v2;
        v13 = *(_QWORD *)(v2 + 48) + 32 * v6;
        v14 = *(_QWORD *)v13;
        v15 = *(unsigned __int8 *)(v13 + 8);
        v16 = *(_QWORD *)(v13 + 16);
        v17 = *(unsigned __int8 *)(v13 + 24);
        Hasher.init(_seed:)();
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
          if (v17)
            goto LABEL_16;
        }
        else
        {
          Hasher._combine(_:)(1u);
          if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0)
            v19 = v14;
          else
            v19 = 0;
          Hasher._combine(_:)(v19);
          if (v17)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_17;
          }
        }
        Hasher._combine(_:)(1u);
        if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v18 = v16;
        else
          v18 = 0;
        Hasher._combine(_:)(v18);
LABEL_17:
        result = Hasher._finalize()();
        v7 = v10;
        v20 = result & v10;
        v8 = v9;
        v2 = v12;
        if (v3 >= (uint64_t)v9)
        {
          if (v20 >= v9 && v3 >= (uint64_t)v20)
          {
LABEL_23:
            v21 = *(_QWORD *)(v12 + 48);
            v22 = (_OWORD *)(v21 + 32 * v3);
            v23 = (_OWORD *)(v21 + v11);
            if (32 * v3 != v11 || v22 >= v23 + 2)
            {
              v24 = v23[1];
              *v22 = *v23;
              v22[1] = v24;
            }
            v25 = *(_QWORD *)(v12 + 56);
            v26 = (_OWORD *)(v25 + 16 * v3);
            v27 = (_OWORD *)(v25 + 16 * v6);
            v4 = v34;
            if (v3 != v6 || (v3 = v6, v26 >= v27 + 1))
            {
              *v26 = *v27;
              v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v9 || v3 >= (uint64_t)v20)
        {
          goto LABEL_23;
        }
        v4 = v34;
LABEL_5:
        v6 = (v6 + 1) & v10;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v28 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v29 = *v28;
    v30 = (-1 << v3) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v4 + 8 * (result >> 6));
    v30 = *v28;
    v29 = (-1 << result) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(v2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v33;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for URL();
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v31 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v32 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v30(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v31)
        {
          if (v19 >= v31 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v7 = v14;
            if (v15 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            if (a1 < (uint64_t)v9 || *(_QWORD *)(a2 + 56) + 8 * a1 >= *(_QWORD *)(a2 + 56) + 8 * v9 + 8)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v9;
              v12 = v15;
              v13 = v17;
            }
            else
            {
              v22 = a1 == v9;
              a1 = v9;
              v12 = v15;
              v13 = v17;
              if (!v22)
              {
                swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                v12 = v15;
                a1 = v9;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v31 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v23 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v33 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v34 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v32(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v33)
        {
          if (v19 >= v33 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v7 = v14;
            if (v15 * a1 < v16
              || (v12 = v15, *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = (_QWORD *)(v22 + 8 * a1);
            v24 = (_QWORD *)(v22 + 8 * v9);
            if (a1 != v9 || (a1 = v9, v23 >= v24 + 1))
            {
              *v23 = *v24;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v33 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v25 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v25;
    v27 = (-1 << a1) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v25;
    v26 = (-1 << a1) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  void *v11;
  id v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
        v12 = v11;
        _CFObject.hash(into:)();
        v13 = Hasher._finalize()();

        v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_QWORD *)(v15 + 8 * v3);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v10 = v20[1];
            *v19 = *v20;
            v19[1] = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v23 = *v21;
    v22 = (-1 << a1) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for AGSubgraphRef(0);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, (uint64_t (*)(uint64_t))type metadata accessor for AGSubgraphRef, (uint64_t)&protocol conformance descriptor for AGSubgraphRef);
        v11 = v10;
        _CFObject.hash(into:)();
        v12 = Hasher._finalize()();

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9)
            goto LABEL_5;
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v22 = *v20;
    v21 = (-1 << a1) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt32 v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _BOOL8 v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  Swift::UInt32 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = -1 << *(_BYTE *)(a1 + 32);
  v9 = ~v8;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = -v8;
  v44 = a1;
  v45 = a1 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v46 = v9;
  v47 = 0;
  v48 = v12 & v10;
  v49 = a2;
  v50 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v40);
  if ((v43 & 1) != 0)
    goto LABEL_14;
  v13 = v40;
  v39 = v41;
  v14 = v42;
  v15 = (_QWORD *)*a5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
  v18 = v15[2];
  v19 = (v17 & 1) == 0;
  v20 = __OFADD__(v18, v19);
  v21 = v18 + v19;
  if (v20)
    goto LABEL_24;
  v5 = v17;
  if (v15[3] >= v21)
    goto LABEL_9;
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v5 & 1) != (v22 & 1))
  {
LABEL_8:
    v16 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_9:
    if ((a4 & 1) == 0)
      goto LABEL_25;
  }
  if ((v5 & 1) == 0)
    goto LABEL_11;
LABEL_13:
  while (1)
  {
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v40);
    if ((v43 & 1) != 0)
      break;
    v5 = 1;
    while (1)
    {
      v13 = v40;
      v39 = v41;
      v14 = v42;
      v28 = (_QWORD *)*a5;
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
      v30 = v28[2];
      v31 = (v29 & 1) == 0;
      v20 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v20)
        break;
      a4 = v29;
      if (v28[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
        v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
        if ((a4 & 1) != (v33 & 1))
          goto LABEL_8;
      }
      if ((a4 & 1) == 0)
      {
        v34 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
        *(_DWORD *)(v34[6] + 4 * v16) = v13;
        v35 = v34[7] + 24 * v16;
        *(_OWORD *)v35 = v39;
        *(_QWORD *)(v35 + 16) = v14;
        v36 = v34[2];
        v20 = __OFADD__(v36, 1);
        v37 = v36 + 1;
        if (v20)
          goto LABEL_23;
        v34[2] = v37;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v40);
      if ((v43 & 1) != 0)
        goto LABEL_14;
    }
LABEL_24:
    while (1)
    {
      __break(1u);
LABEL_25:
      v38 = v16;
      specialized _NativeDictionary.copy()();
      v16 = v38;
      if ((v5 & 1) != 0)
        break;
LABEL_11:
      v23 = (_QWORD *)*a5;
      *(_QWORD *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
      *(_DWORD *)(v23[6] + 4 * v16) = v13;
      v24 = v23[7] + 24 * v16;
      *(_OWORD *)v24 = v39;
      *(_QWORD *)(v24 + 16) = v14;
      v25 = v23[2];
      v20 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (!v20)
      {
        v23[2] = v26;
        goto LABEL_13;
      }
LABEL_23:
      __break(1u);
    }
  }
LABEL_14:
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Set<EventID>.Iterator._Variant();
  return swift_release();
}

{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  int v49;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_26;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = (_QWORD *)*a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v24 = (uint64_t *)(v22[6] + 16 * v15);
    *v24 = v10;
    v24[1] = v11;
    *(_DWORD *)(v22[7] + 4 * v15) = v12;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v22[2] = v27;
LABEL_14:
    v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      v31 = v28;
      v32 = v29;
      v33 = v30;
      do
      {
        v39 = (_QWORD *)*a5;
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        v42 = v39[2];
        v43 = (v40 & 1) == 0;
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
          goto LABEL_27;
        v45 = v40;
        if (v39[3] < v44)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, 1);
          v46 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
          if ((v45 & 1) != (v47 & 1))
            goto LABEL_30;
          v41 = v46;
        }
        v48 = (_QWORD *)*a5;
        if ((v45 & 1) != 0)
        {
          v49 = *(_DWORD *)(v48[7] + 4 * v41);
          swift_bridgeObjectRelease();
          if (__CFADD__(v49, v33))
            goto LABEL_29;
          *(_DWORD *)(v48[7] + 4 * v41) = v49 + v33;
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          v34 = (uint64_t *)(v48[6] + 16 * v41);
          *v34 = v31;
          v34[1] = v32;
          *(_DWORD *)(v48[7] + 4 * v41) = v33;
          v35 = v48[2];
          v26 = __OFADD__(v35, 1);
          v36 = v35 + 1;
          if (v26)
            goto LABEL_28;
          v48[2] = v36;
        }
        v31 = specialized LazyMapSequence.Iterator.next()();
        v32 = v37;
        v33 = v38;
      }
      while (v37);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v23 = *(_DWORD *)(v22[7] + 4 * v15);
    swift_bridgeObjectRelease();
    if (__CFADD__(v23, v12))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(_DWORD *)(v22[7] + 4 * v15) = v23 + v12;
    goto LABEL_14;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  int v49;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_26;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = (_QWORD *)*a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v24 = (uint64_t *)(v22[6] + 16 * v15);
    *v24 = v10;
    v24[1] = v11;
    *(_DWORD *)(v22[7] + 4 * v15) = v12;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v22[2] = v27;
LABEL_14:
    v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      v31 = v28;
      v32 = v29;
      v33 = v30;
      do
      {
        v39 = (_QWORD *)*a5;
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        v42 = v39[2];
        v43 = (v40 & 1) == 0;
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
          goto LABEL_27;
        v45 = v40;
        if (v39[3] < v44)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, 1);
          v46 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
          if ((v45 & 1) != (v47 & 1))
            goto LABEL_30;
          v41 = v46;
        }
        v48 = (_QWORD *)*a5;
        if ((v45 & 1) != 0)
        {
          v49 = *(_DWORD *)(v48[7] + 4 * v41);
          swift_bridgeObjectRelease();
          if (__CFADD__(v33, v49))
            goto LABEL_29;
          *(_DWORD *)(v48[7] + 4 * v41) = v33 + v49;
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          v34 = (uint64_t *)(v48[6] + 16 * v41);
          *v34 = v31;
          v34[1] = v32;
          *(_DWORD *)(v48[7] + 4 * v41) = v33;
          v35 = v48[2];
          v26 = __OFADD__(v35, 1);
          v36 = v35 + 1;
          if (v26)
            goto LABEL_28;
          v48[2] = v36;
        }
        v31 = specialized LazyMapSequence.Iterator.next()();
        v32 = v37;
        v33 = v38;
      }
      while (v37);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v23 = *(_DWORD *)(v22[7] + 4 * v15);
    swift_bridgeObjectRelease();
    if (__CFADD__(v12, v23))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(_DWORD *)(v22[7] + 4 * v15) = v12 + v23;
    goto LABEL_14;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(double *)(a1 + 16);
  *(double *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 24) = v2;
  return result;
}

BOOL specialized static _DisplayList_StableIdentity.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0])
  {
    return a1[1].i32[1] == a2[1].i32[1];
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_StableIdentity.CodingKeys, &unk_25063E498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_StableIdentity.CodingKeys, &unk_25063E498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_StableIdentity.CodingKeys, &unk_25063E498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_StableIdentity.CodingKeys, &unk_25063E498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StrongHash and conformance StrongHash()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StrongHash and conformance StrongHash;
  if (!lazy protocol witness table cache variable for type StrongHash and conformance StrongHash)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StrongHash, &type metadata for StrongHash);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrongHash and conformance StrongHash);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StrongHash and conformance StrongHash;
  if (!lazy protocol witness table cache variable for type StrongHash and conformance StrongHash)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StrongHash, &type metadata for StrongHash);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrongHash and conformance StrongHash);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StrongHash and conformance StrongHash;
  if (!lazy protocol witness table cache variable for type StrongHash and conformance StrongHash)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StrongHash, &type metadata for StrongHash);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrongHash and conformance StrongHash);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
    v7 = a3(a1, &unk_25063E498, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for External<_DisplayList_StableIdentityScope>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<_DisplayList_StableIdentityScope>)
  {
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<_DisplayList_StableIdentityScope>);
  }
}

uint64_t specialized _DisplayList_StableIdentity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1752392040 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6169726573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_StableIdentity, &type metadata for _DisplayList_StableIdentity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity);
  }
  return result;
}

double sub_234B49DEC@<D0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  double result;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  v4 = *a2;
  v9 = *a1;
  v8 = v4;
  _DisplayList_StableIdentityMap.subscript.getter((unint64_t)&v8, (uint64_t)&v10);
  v5 = v11;
  v6 = v12;
  result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(_QWORD *)(a3 + 16) = v5;
  *(_BYTE *)(a3 + 24) = v6;
  return result;
}

unint64_t sub_234B49E48(__int128 *a1, uint64_t a2, Swift::UInt32 *a3)
{
  Swift::UInt32 v3;
  uint64_t v4;
  char v5;
  Swift::UInt32 v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  v3 = *a3;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 24);
  v8 = *a1;
  v9 = v4;
  v10 = v5;
  v7 = v3;
  return _DisplayList_StableIdentityMap.subscript.setter((uint64_t)&v8, &v7);
}

uint64_t sub_234B49E98()
{
  return 0;
}

ValueMetadata *type metadata accessor for _DisplayList_StableIdentity()
{
  return &type metadata for _DisplayList_StableIdentity;
}

ValueMetadata *type metadata accessor for _DisplayList_StableIdentityMap()
{
  return &type metadata for _DisplayList_StableIdentityMap;
}

uint64_t type metadata accessor for _DisplayList_StableIdentityRoot()
{
  return objc_opt_self();
}

uint64_t method lookup function for _DisplayList_StableIdentityRoot()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _DisplayList_StableIdentityRoot.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t destroy for _DisplayList_StableIdentityScope()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _DisplayList_StableIdentityScope(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _DisplayList_StableIdentityScope(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy44_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for _DisplayList_StableIdentityScope(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DisplayList_StableIdentityScope(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 44))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DisplayList_StableIdentityScope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 44) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _DisplayList_StableIdentityScope()
{
  return &type metadata for _DisplayList_StableIdentityScope;
}

uint64_t storeEnumTagSinglePayload for _DisplayList_StableIdentity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234B4A164 + 4 * byte_2352856B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234B4A198 + 4 * asc_2352856B0[v4]))();
}

uint64_t sub_234B4A198(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B4A1A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B4A1A8);
  return result;
}

uint64_t sub_234B4A1B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B4A1BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234B4A1C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B4A1C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for _DisplayList_StableIdentity.CodingKeys()
{
  return &unk_25063E498;
}

uint64_t static PrimitiveCustomHoverContextEffect._makeCustomHoverEffect(effect:inputs:body:)(unsigned int *a1, uint64_t a2, void (*a3)(unint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  Swift::UInt32 v12;
  uint64_t KeyPath;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v27;
  int v30;
  __int128 v31;
  int v32;
  int v33;
  int v34;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v27 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  v30 = *(_DWORD *)(a2 + 32);
  v32 = *(_DWORD *)(a2 + 8);
  v33 = *(_DWORD *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_DWORD *)(a2 + 84);
  v34 = *(_DWORD *)(a2 + 80);
  v12 = ++lastIdentity;
  KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v14 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v39 = __PAIR64__(v27, v12);
  v40 = v11;
  v41 = v14;
  v37 = type metadata accessor for ApplyPrimitiveCustomHoverContextEffect(0, a5, a6, v15);
  v38 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ApplyPrimitiveCustomHoverContextEffect<A>, v37);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<HoverEffectContext>, (uint64_t)&type metadata for HoverEffectContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  v16 = v30 | 0x20;
  v17 = *(_QWORD *)(a2 + 24);
  v31 = *(_OWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 72);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v39, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v36, v37, MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v20);
  v21 = v52;
  swift_beginAccess();
  v39 = __PAIR64__(*(_DWORD *)(v8 + 16), v21);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  v22 = Attribute.init<A>(body:value:flags:update:)();
  v23 = MEMORY[0x24BEE4AF8];
  v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v25 = swift_allocObject();
  *(_DWORD *)(v25 + 16) = v22;
  *(_QWORD *)(v25 + 24) = v23;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_WORD *)(v25 + 80) = 256;
  *(_QWORD *)(v25 + 88) = v24;
  swift_release();
  v39 = v7;
  v40 = v32;
  v42 = v25;
  v43 = v17;
  v44 = v16;
  v45 = v33;
  v46 = v9;
  v47 = v10;
  v48 = v31;
  v49 = v18;
  v50 = v34;
  v51 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a3(&v39);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

_QWORD *PrimitiveCustomHoverContextEffect.systemHoverEffect.getter@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  BOOL v4;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(a1 + 24))(&v5);
  v4 = (v5 & 1) == 0;
  if ((v5 & 0xFE) == 2)
    v4 = 1;
  *a2 = 3;
  a2[1] = v4;
  return result;
}

uint64_t ApplyPrimitiveCustomHoverContextEffect.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t Value;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  Value = AGGraphGetValue();
  v11 = *(_BYTE *)(Value + 8);
  v12 = *(_QWORD *)(Value + 16);
  v13 = *(_BYTE *)(Value + 24);
  v14 = *(_BYTE *)(Value + 25);
  v15 = *(_BYTE *)(Value + 26);
  v29 = *(_QWORD *)Value;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v33 = v14;
  v34 = v15;
  v16 = AGGraphGetValue();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v17(v8, v16, v5);
  v28 = v9;
  v18 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t *, int *, uint64_t, uint64_t))(v18 + 16))(&v29, &v28, v5, v18);
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v8, v5);
  v20 = AGGraphGetValue();
  v17(v8, v20, v5);
  (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(v18 + 24))(&v28, v5, v18);
  result = ((uint64_t (*)(char *, uint64_t))v19)(v8, v5);
  if (v28 == 3)
    v22 = v34;
  else
    v22 = v28 | v34;
  v23 = v30;
  v24 = v31;
  v25 = v32;
  v26 = v33;
  *(_QWORD *)a2 = v29;
  *(_BYTE *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v24;
  *(_BYTE *)(a2 + 24) = v25;
  *(_BYTE *)(a2 + 25) = v26;
  *(_BYTE *)(a2 + 26) = v22 & 1;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance ApplyPrimitiveCustomHoverContextEffect<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  *(_WORD *)(a1 + 24) = 2;
}

uint64_t type metadata accessor for ApplyPrimitiveCustomHoverContextEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ApplyPrimitiveCustomHoverContextEffect);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext;
  if (!lazy protocol witness table cache variable for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UpdateEnvironmentCustomHoverEffectContext, &type metadata for UpdateEnvironmentCustomHoverEffectContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext);
  }
  return result;
}

uint64_t dispatch thunk of PrimitiveCustomHoverContextEffect.updateContext(_:identity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PrimitiveCustomHoverContextEffect.makeContextValue()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void base witness table accessor for _AttributeBody in ApplyPrimitiveCustomHoverContextEffect<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t static Animation.default.getter()
{
  if (one-time initialization token for default != -1)
    swift_once();
  return swift_retain();
}

uint64_t one-time initialization function for default()
{
  uint64_t result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0, &lazy cache variable for type metadata for InternalAnimationBox<DefaultAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation, (uint64_t)&type metadata for DefaultAnimation);
  result = swift_allocObject();
  static Animation.default = result;
  return result;
}

{
  unsigned int v0;
  uint64_t result;
  char v2;

  if (one-time initialization token for v4 != -1)
    swift_once();
  v0 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v0;
  if ((_DWORD)result)
    v2 = 2;
  else
    v2 = 0;
  static ResolvedGradient.ColorSpace.default = v2;
  return result;
}

_OWORD *one-time initialization function for base()
{
  unsigned int v0;
  _OWORD *result;
  _QWORD *v2;

  if (one-time initialization token for v5 != -1)
    swift_once();
  v0 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC != 1)
  {
    if (dword_25426FAB8 < v0)
      goto LABEL_7;
LABEL_9:
    type metadata accessor for InternalAnimationBox<BezierAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation, (uint64_t)&type metadata for FluidSpringAnimation);
    result = (_OWORD *)swift_allocObject();
    result[1] = xmmword_235285B50;
    v2 = result + 2;
    goto LABEL_10;
  }
  if ((dyld_program_minos_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  type metadata accessor for InternalAnimationBox<BezierAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation, (uint64_t)&type metadata for BezierAnimation);
  result = (_OWORD *)swift_allocObject();
  result[1] = xmmword_235285B20;
  result[2] = xmmword_235285B30;
  result[3] = xmmword_235285B40;
  v2 = result + 4;
LABEL_10:
  *v2 = 0;
  static DefaultAnimation.base = (uint64_t)result;
  return result;
}

_QWORD *DefaultAnimation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  __n128 v12;
  _QWORD *result;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _QWORD *(*v18)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  _OWORD v25[2];
  char v26;

  if (a3 == MEMORY[0x24BEE13C8])
  {
    v14 = *(_QWORD *)a1;
    if (one-time initialization token for base != -1)
      swift_once();
    *(_QWORD *)&v24[0] = v14;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)static DefaultAnimation.base + 120))(v25, v24, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a6);
    v15 = BYTE8(v25[0]);
    *(_QWORD *)a5 = *(_QWORD *)&v25[0];
    *(_BYTE *)(a5 + 8) = v15;
  }
  else if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == a3)
  {
    v16 = *(_OWORD *)a1;
    v17 = *(_OWORD *)(a1 + 16);
    if (one-time initialization token for base != -1)
    {
      v22 = *(_OWORD *)(a1 + 16);
      v23 = *(_OWORD *)a1;
      swift_once();
      v17 = v22;
      v16 = v23;
    }
    v24[0] = v16;
    v24[1] = v17;
    v18 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)static DefaultAnimation.base + 120);
    v19 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
    result = v18(v25, v24, a2, a3, v19, a6);
    v20 = v26;
    v21 = v25[1];
    *(_OWORD *)a5 = v25[0];
    *(_OWORD *)(a5 + 16) = v21;
    *(_BYTE *)(a5 + 32) = v20;
  }
  else
  {
    if (one-time initialization token for base != -1)
      swift_once();
    v12.n128_f64[0] = a6;
    return Animation.animate<A>(value:time:context:)(a1, a2, static DefaultAnimation.base, a3, a4, a5, v12);
  }
  return result;
}

uint64_t DefaultAnimation.velocity<A>(value:time:context:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((_BYTE *)a2 + 16);
  v10 = *((_BYTE *)a2 + 17);
  if (one-time initialization token for base != -1)
    swift_once();
  v12[0] = v7;
  v12[1] = v8;
  v13 = v9;
  v14 = v10;
  return Animation.velocity<A>(value:time:context:)(a1, (uint64_t)v12, static DefaultAnimation.base, a3, a4);
}

uint64_t DefaultAnimation.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for base != -1)
    swift_once();
  return Animation.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, static DefaultAnimation.base, a4, a5);
}

uint64_t DefaultAnimation.function.getter()
{
  if (one-time initialization token for base != -1)
    swift_once();
  return (*(uint64_t (**)(void))(*(_QWORD *)static DefaultAnimation.base + 96))();
}

uint64_t static DefaultAnimation.== infix(_:_:)()
{
  return 1;
}

Swift::Int DefaultAnimation.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for InternalCustomAnimation.function.getter in conformance DefaultAnimation()
{
  if (one-time initialization token for base != -1)
    swift_once();
  return (*(uint64_t (**)(void))(*(_QWORD *)static DefaultAnimation.base + 96))();
}

_QWORD *protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance DefaultAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return DefaultAnimation.animate<A>(value:time:context:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance DefaultAnimation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return DefaultAnimation.velocity<A>(value:time:context:)(a1, a2, a3, a4);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance DefaultAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DefaultAnimation.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, a4, a5) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultAnimation()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultAnimation()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for DefaultAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultAnimation, &type metadata for DefaultAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultAnimation, &type metadata for DefaultAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultAnimation, &type metadata for DefaultAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultAnimation, &type metadata for DefaultAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

uint64_t protocol witness for static EncodableAnimation.leafProtobufTag.getter in conformance DefaultAnimation()
{
  return 7;
}

ValueMetadata *type metadata accessor for DefaultAnimation()
{
  return &type metadata for DefaultAnimation;
}

unint64_t lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BezierAnimation, &type metadata for BezierAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BezierAnimation, &type metadata for BezierAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BezierAnimation, &type metadata for BezierAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BezierAnimation, &type metadata for BezierAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    result = MEMORY[0x23B7C9C04]("i\v;\x1B4\t\n", &type metadata for FluidSpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FluidSpringAnimation, &type metadata for FluidSpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FluidSpringAnimation, &type metadata for FluidSpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FluidSpringAnimation, &type metadata for FluidSpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

void type metadata accessor for InternalAnimationBox<BezierAnimation>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for InternalAnimationBox(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t EnvironmentValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for EnvironmentObjectKey(0, a2, a3, a4);
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentObjectKey<A>, v4);
  EnvironmentValues.subscript.getter(v4, v4, v5);
  return v7;
}

{
  return specialized EnvironmentValues.subscript.getter(a2, a2, a3, a4);
}

{
  return specialized EnvironmentValues.subscript.getter(a2, a2, a3, a4);
}

{
  return EnvironmentValues.subscript.getter(a2, a2, a3, a4);
}

{
  return EnvironmentValues.subscript.getter(a2, a2, a3, a4);
}

uint64_t type metadata accessor for EnvironmentObjectKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentObjectKey);
}

uint64_t EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4);
  return swift_unknownObjectRelease();
}

{
  specialized EnvironmentValues.subscript.setter(a1, a3, a3, a4);
  return swift_unknownObjectRelease();
}

{
  specialized EnvironmentValues.subscript.setter(a1, a3, a3, a4);
  return swift_unknownObjectRelease();
}

{
  specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4);
  return swift_unknownObjectRelease();
}

{
  uint64_t AssociatedTypeWitness;

  specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

{
  specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4);
  return swift_unknownObjectRelease();
}

uint64_t (*EnvironmentValues.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  a1[2] = a3;
  a1[3] = v4;
  a1[1] = a2;
  *a1 = EnvironmentValues.subscript.getter((uint64_t)a1, a3, a3, a4);
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v4;

  a1[1] = a3;
  a1[2] = v4;
  *a1 = EnvironmentValues.subscript.getter((uint64_t)a1, a3, a3, a4);
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v4;

  a1[1] = a3;
  a1[2] = v4;
  *a1 = specialized EnvironmentValues.subscript.getter(a3, a2, a3, a4);
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v4;

  a1[1] = a3;
  a1[2] = v4;
  *a1 = EnvironmentValues.subscript.getter(a3, a3, a3, a4);
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v4;

  a1[1] = a3;
  a1[2] = v4;
  *a1 = EnvironmentValues.subscript.getter(a3, a3, a3, a4);
  return EnvironmentValues.subscript.modify;
}

uint64_t EnvironmentValues.subscript.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    v7 = swift_unknownObjectRetain();
    specialized EnvironmentValues.subscript.setter(v7, v5, v4, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    specialized EnvironmentValues.subscript.setter(v6, v5, v4, a4);
  }
  return swift_unknownObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = *a1;
  if ((a2 & 1) != 0)
  {
    v6 = swift_unknownObjectRetain();
    specialized EnvironmentValues.subscript.setter(v6, v4, v4, v7);
    swift_unknownObjectRelease();
  }
  else
  {
    specialized EnvironmentValues.subscript.setter(v5, v4, v4, a4);
  }
  return swift_unknownObjectRelease();
}

uint64_t key path setter for EnvironmentValues.subscript<A>(_:) : <A>EnvironmentValuesA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v5, v4, v6, v7);
  return swift_unknownObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v5, v4, v6, v7);
  return swift_unknownObjectRelease();
}

uint64_t static EnvironmentObjectKey.defaultValue.getter()
{
  return 0;
}

void EnvironmentObjectKey.hash(into:)(int a1, uint64_t a2)
{
  specialized EnvironmentObjectKey.hash(into:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static EnvironmentObjectKey.== infix(_:_:)()
{
  return 1;
}

Swift::Int EnvironmentObjectKey.hashValue.getter(uint64_t a1)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(_QWORD *)(a1 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EnvironmentObjectKey<A>(uint64_t a1)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(_QWORD *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance EnvironmentObjectKey<A>(int a1, uint64_t a2)
{
  specialized EnvironmentObjectKey.hash(into:)(a1, *(_QWORD *)(a2 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EnvironmentObjectKey<A>(uint64_t a1, uint64_t a2)
{
  char v4;

  Hasher.init(_seed:)();
  specialized EnvironmentObjectKey.hash(into:)((int)&v4, *(_QWORD *)(a2 + 16));
  return Hasher._finalize()();
}

void specialized EnvironmentObjectKey.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int specialized EnvironmentObjectKey.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = type metadata accessor for EnvironmentObjectKey(0, a3, a3, a4);
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentObjectKey<A>, v4);
  return specialized EnvironmentValues.subscript.setter(&v7, v4, v4, v5);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a2, a4);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a3, a3, a4);
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = v4;
  v10 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    v11 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
    v13 = v12;
    swift_release_n();
    swift_release_n();
    if (v11)
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 16))(a2, v5, a1, a3, *(_QWORD *)(a4 + 8), v11, v13);
  }
  else
  {
    v15 = swift_retain_n();
    v11 = specialized closure #1 in PropertyList.subscript.getter(v15, (uint64_t)&v17);
    v13 = v16;
    swift_release_n();
    if (v11)
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 16))(a2, v5, a1, a3, *(_QWORD *)(a4 + 8), v11, v13);
  }
  return EnvironmentValues.setValue<A>(_:for:)(a1, a2, a3, *(_QWORD *)(a4 + 8));
}

uint64_t specialized EnvironmentValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return EnvironmentValues.subscript.getter(a1, a1, a3, a4);
}

{
  uint64_t result;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  result = EnvironmentValues.subscript.getter(a1, a1, a3, a4);
  if (!result)
  {
    _StringGuts.grow(_:)(118);
    v5._object = (void *)0x80000002352DF6F0;
    v5._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v5);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 0xD000000000000029;
    v7._object = (void *)0x80000002352DF710;
    String.append(_:)(v7);
    v8._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0xD00000000000002CLL;
    v9._object = (void *)0x80000002352DF740;
    String.append(_:)(v9);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void base witness table accessor for Equatable in EnvironmentObjectKey<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234B4B760@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = specialized EnvironmentValues.subscript.getter(*(_QWORD *)(a2 + a1 - 8), a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_234B4B7A8()
{
  return 8;
}

_QWORD *sub_234B4B7B4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_234B4B7C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = specialized EnvironmentValues.subscript.getter(*(_QWORD *)(a2 + a1 - 8), a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_234B4B808()
{
  return 8;
}

uint64_t type metadata instantiation function for EnvironmentObjectKey()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t UnsafePointer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

unint64_t static UnsafePointer.null.getter(uint64_t a1)
{
  return ~*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) | 0xFFFFFFFFFFFFFF00;
}

uint64_t UnsafeMutablePointer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 40))(a2, a1);
}

uint64_t (*UnsafeMutablePointer.subscript.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t UnsafeBufferPointer.startAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeBufferPointer.startAddress.getter(a1, a2, a3, MEMORY[0x24BEE0990]);
}

unint64_t UnsafeMutableBufferPointer.startAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeBufferPointer.startAddress.getter(a1, a2, a3, MEMORY[0x24BEE1CB0]);
}

unint64_t UnsafeBufferPointer.startAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t result;

  result = a4();
  if (!result)
    return ~*(_DWORD *)(*(_QWORD *)(a3 - 8) + 80) | 0xFFFFFFFFFFFFFF00;
  return result;
}

uint64_t sub_234B4B8C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a3 + a2 - 8) - 8) + 16))(a4, *a1);
}

uint64_t sub_234B4B8E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) - 8) + 24))(*a2, a1);
}

uint64_t sub_234B4B904()
{
  return 8;
}

_QWORD *sub_234B4B910(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *static AccessibilityProperties.ActivationPointKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ActivationPointKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityActivationPointStorage;
}

uint64_t AccessibilityProperties.activationPointStorage.getter@<X0>(int8x16_t *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.activationPointStorage : AccessibilityProperties@<D0>(int8x16_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  int8x16_t v5;
  int8x16_t v6[2];
  uint64_t v7;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v6);
  swift_bridgeObjectRelease();
  v3 = v7;
  result = *(double *)v6[0].i64;
  v5 = v6[1];
  *a1 = v6[0];
  a1[1] = v5;
  a1[2].i64[0] = v3;
  return result;
}

uint64_t AccessibilityProperties.activationPointStorage.setter(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

int8x16_t specialized AccessibilityProperties.subscript.getter@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  int v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t result;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  _OWORD v18[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActivationPointKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v15);
    v6 = v16.i64[1];
    v7 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, v16.i64[1]);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v18, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage, (uint64_t (*)(_QWORD, uint64_t))v8);
  v9 = swift_dynamicCast();
  v10 = v17;
  if (v9)
    v11 = -1;
  else
    v11 = 0;
  v12 = (int8x16_t)vdupq_n_s64(v11);
  if (!v9)
    v10 = 0;
  result = vandq_s8(v15, v12);
  v14 = vandq_s8(v16, v12);
  *a2 = result;
  a2[1] = v14;
  a2[2].i64[0] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.getter(a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, type metadata accessor for AccessibilityChartDescriptorStorage?);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.CustomContentListKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityCustomContentEntry], (uint64_t)&type metadata for AccessibilityCustomContentEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  if (swift_dynamicCast())
    return v8[0];
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v6 = static AccessibilityProperties.CustomContentListKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.AutomationTypeKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)&v9);
    v4 = v10;
    v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v10);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v12, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for AXAutomationType?(0);
  v6 = swift_dynamicCast();
  v7 = v9;
  if (!v6)
    return 0;
  return v7;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.HintsKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  if (swift_dynamicCast())
    return v8[0];
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v6 = static AccessibilityProperties.HintsKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, (uint64_t)&type metadata for AccessibilityProperties.InputLabelsKey, (void (*)(_QWORD))type metadata accessor for [Text]?);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.RoleDescriptionKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)&v9);
    v4 = v10;
    v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v10);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v12, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  v6 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))v6);
  v7 = swift_dynamicCast();
  result = 0;
  if (v7)
    return v9;
  return result;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.SortPriorityKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)&v10);
    v4 = v11;
    v5 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v13, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  v6 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Double?, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))v6);
  v7 = swift_dynamicCast();
  v8 = v10;
  if (!v7)
    return 0;
  return v8;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextHeadingLevelKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  v6 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, (uint64_t)&type metadata for AccessibilityHeadingLevel, (uint64_t (*)(_QWORD, uint64_t))v6);
  if (swift_dynamicCast())
    return LOBYTE(v8[0]);
  else
    return 7;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ChildBehaviorKind),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, (uint64_t)&type metadata for AccessibilityChildBehaviorKind, (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v11[0];
  if (!(_DWORD)result)
    v10 = 2;
  *a2 = v10;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextContentTypeKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityTextContentType?, (uint64_t)&type metadata for AccessibilityTextContentType, (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v11[0];
  if (!(_DWORD)result)
    v10 = 8;
  *a2 = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.CustomAttributesKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes?, (uint64_t)&type metadata for AccessibilityCustomAttributes, (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v11[0];
  if (!(_DWORD)result)
    v10 = 0;
  *a2 = v10;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TraitsKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v12);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(v12, v14);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v9 = (__int128 *)v12;
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    v13 = 1;
    if (one-time initialization token for defaultValue != -1)
      result = swift_once();
    v9 = &static AccessibilityProperties.TraitsKey.defaultValue;
  }
  v11 = *(_QWORD *)v9;
  v10 = *((_QWORD *)v9 + 1);
  *a2 = v11;
  a2[1] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  _BYTE v11[312];
  _BYTE v12[312];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.DataSeriesConfigurationKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v13);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, (uint64_t (*)(_QWORD, uint64_t))v8);
  if (swift_dynamicCast())
  {
    _ViewInputs.base.modify(v13, v9);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v13, (uint64_t)v11);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v11, (uint64_t)v12);
  }
  else
  {
    _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v12);
  }
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v12, a2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.IdentifierKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v13);
    v6 = v15;
    v7 = v16;
    __swift_project_boxed_opaque_existential_1(v13, v15);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v17, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityIdentifierStorage?, (uint64_t)&type metadata for AccessibilityIdentifierStorage, (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v13[0];
  v11 = v13[1];
  v12 = v14;
  if (!(_DWORD)result)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.LabelKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v12);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(&v12, v14);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, (uint64_t)&type metadata for AccessibilityLabelStorage, (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v12;
  v11 = v13;
  if (!(_DWORD)result)
  {
    v10 = 0;
    v11 = 0;
  }
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v11;
  return result;
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, &lazy cache variable for type metadata for Locale??, (uint64_t (*)(uint64_t))type metadata accessor for Locale?, (uint64_t)&type metadata for AccessibilityProperties.LocaleKey, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], a2);
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, &lazy cache variable for type metadata for LinkDestination.Configuration??, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, (uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey, type metadata accessor for LinkDestination.Configuration, a2);
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v5, (uint64_t)v10);
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v13, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  a3(0);
  if (swift_dynamicCast())
    return v10[0];
  else
    return 0;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];

  type metadata accessor for [(_:)](0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25[-1] - v13;
  if (*(_QWORD *)(a1 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(a4), (v16 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v15, (uint64_t)v25);
    v17 = v26;
    v18 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v18 + 8))(v28, v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    memset(v28, 0, sizeof(v28));
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v19 = a3(0);
  v20 = swift_dynamicCast();
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  if (v20)
  {
    v21(v14, 0, 1, v19);
    return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v14, a6, a3);
  }
  else
  {
    v21(v14, 1, 1, v19);
    v23 = a5(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a6, 1, 1, v23);
    return outlined destroy of Any?((uint64_t)v14, (uint64_t)a2, (uint64_t)a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ValueKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    v6 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t))v8);
  if (swift_dynamicCast())
    return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v10, (uint64_t)a2, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v13 = 1;
  *a2 = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  return outlined destroy of AccessibilityValueStorage??((uint64_t)&v10);
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.VisibilityKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v11);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(&v11, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v15, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v9 = v11;
    v10 = HIDWORD(v11);
  }
  else
  {
    v11 = 0;
    v12 = 1;
    if (one-time initialization token for defaultValue != -1)
      result = swift_once();
    v9 = static AccessibilityProperties.VisibilityKey.defaultValue;
    v10 = HIDWORD(static AccessibilityProperties.VisibilityKey.defaultValue);
  }
  *a2 = v9;
  a2[1] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[5];
  _QWORD v11[5];
  _BYTE v12[24];
  uint64_t v13;

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v11, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  v2 = v11[0];
  v3 = v11[1];
  v4 = v11[2];
  v5 = v11[3];
  v6 = v11[4];
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v12, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  if (v13)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v10[3] = v7;
    v10[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v8 = (_QWORD *)swift_allocObject();
    v10[0] = v8;
    v8[2] = v2;
    v8[3] = v3;
    v8[4] = v4;
    v8[5] = v5;
    v8[6] = v6;
    return specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)&type metadata for AccessibilityProperties.ActivationPointKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ActivationPointKey, (uint64_t)v10);
    return outlined destroy of Any?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
}

{
  uint64_t v2;
  char v3;
  uint64_t v5;
  _QWORD v6[5];

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = static AccessibilityProperties.CustomContentListKey.defaultValue;
  swift_bridgeObjectRetain();
  v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.CustomContentListKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>(0);
    v6[3] = v5;
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.CustomContentListKey);
  }
}

{
  uint64_t v2;
  _QWORD v4[5];

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>, &lazy cache variable for type metadata for AccessibilityCustomAttributes?, (uint64_t)&type metadata for AccessibilityCustomAttributes, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v4[3] = v2;
    v4[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.CustomAttributesKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.CustomAttributesKey, (uint64_t)v4);
    return outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  _BYTE __src[312];
  _BYTE v8[312];
  _BYTE v9[312];
  _BYTE v10[320];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v8, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v8, (uint64_t)v10, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v9, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOg((uint64_t)v9) == 1)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.DataSeriesConfigurationKey, (uint64_t)__src);
    return outlined destroy of Any?((uint64_t)__src, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v6[3] = v3;
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4 = swift_allocObject();
    v5 = (void *)(v4 + 16);
    v6[0] = v4;
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v10, (uint64_t)__src, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    memcpy(v5, __src, 0x138uLL);
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.DataSeriesConfigurationKey);
  }
}

{
  uint64_t v2;
  char v3;
  uint64_t v5;
  _QWORD v6[5];

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = static AccessibilityProperties.HintsKey.defaultValue;
  swift_bridgeObjectRetain();
  v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.HintsKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[Text]>(0);
    v6[3] = v5;
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.HintsKey);
  }
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t)&type metadata for AccessibilityProperties.InputLabelsKey, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPropertiesEntry<[Text]?>);
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t (*)(uint64_t))type metadata accessor for Locale?, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (uint64_t)&type metadata for AccessibilityProperties.LocaleKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<Locale?>);
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, type metadata accessor for LinkDestination.Configuration, (uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>);
}

{
  uint64_t v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t (*v5)();
  void *v6;
  _QWORD v8[6];

  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v8);
  if (v8[5])
  {
    outlined destroy of Any?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v8[3] = v2;
    v8[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v8[0] = swift_allocObject();
    outlined init with copy of AccessibilityValueStorage?(a1, v8[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)&type metadata for AccessibilityProperties.ValueKey);
    v3 = (_QWORD *)a1;
    v4 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
    v5 = (unint64_t (*)())&type metadata for AccessibilityValueStorage;
    v6 = type metadata accessor for MutableBox<CachedEnvironment>;
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ValueKey, (uint64_t)v8);
    outlined destroy of Any?(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    v4 = &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?;
    v5 = type metadata accessor for AnyAccessibilityPropertiesEntry;
    v6 = type metadata accessor for [(_:)];
    v3 = v8;
  }
  return outlined destroy of Any?((uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))v6);
}

uint64_t specialized AccessibilityProperties.subscript.setter(char a1)
{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;
  _UNKNOWN **v6;

  if (a1 == 2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ChildBehaviorKind, (uint64_t)v4);
    return outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, (uint64_t)&type metadata for AccessibilityChildBehaviorKind, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v5 = v3;
    v6 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.ChildBehaviorKind);
  }
}

{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;
  _UNKNOWN **v6;

  if (a1 == 8)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextContentTypeKey, (uint64_t)v4);
    return outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextContentType?>, &lazy cache variable for type metadata for AccessibilityTextContentType?, (uint64_t)&type metadata for AccessibilityTextContentType, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v5 = v3;
    v6 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.TextContentTypeKey);
  }
}

{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;
  _UNKNOWN **v6;

  if (a1 == 7)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextHeadingLevelKey, (uint64_t)v4);
    return outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, (uint64_t)&type metadata for AccessibilityHeadingLevel, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v5 = v3;
    v6 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.TextHeadingLevelKey);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _UNKNOWN **v8;

  if ((a2 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.AutomationTypeKey, (uint64_t)&v5);
    return outlined destroy of Any?((uint64_t)&v5, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AXAutomationType?>, (uint64_t (*)(uint64_t))type metadata accessor for AXAutomationType?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v7 = v3;
    v8 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v5 = a1;
    v6 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)&v5, (uint64_t)&type metadata for AccessibilityProperties.AutomationTypeKey);
  }
}

{
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _UNKNOWN **v9;

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, (uint64_t)&type metadata for AccessibilityLabelStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v8 = v4;
    v9 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6 = a1;
    v7 = a2;
    return specialized Dictionary.subscript.setter((uint64_t)&v6, (uint64_t)&type metadata for AccessibilityProperties.LabelKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.LabelKey, (uint64_t)&v6);
    return outlined destroy of Any?((uint64_t)&v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
}

{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _UNKNOWN **v8;

  if ((a2 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.SortPriorityKey, (uint64_t)&v5);
    return outlined destroy of Any?((uint64_t)&v5, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>, (unint64_t *)&lazy cache variable for type metadata for Double?, MEMORY[0x24BEE13C8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v7 = v3;
    v8 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v5 = a1;
    v6 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)&v5, (uint64_t)&type metadata for AccessibilityProperties.SortPriorityKey);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;

  if (a2)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, &lazy cache variable for type metadata for AccessibilityIdentifierStorage?, (uint64_t)&type metadata for AccessibilityIdentifierStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v10 = v6;
    v11 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v8[0] = a1;
    v8[1] = a2;
    v9 = a3;
    return specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)&type metadata for AccessibilityProperties.IdentifierKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.IdentifierKey, (uint64_t)v8);
    return outlined destroy of Any?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  _QWORD v6[5];

  if (a1)
  {
    v6[3] = a3(0);
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, a2);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)v6);
    return outlined destroy of Any?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD), uint64_t a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18[5];

  v10 = a2(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18[-1] - v11;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v18[-1] - v11, a2);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13) == 1)
  {
    specialized Dictionary.removeValue(forKey:)(a4, (uint64_t)v18);
    outlined destroy of TypesettingConfiguration(a1, a2);
    return outlined destroy of Any?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v12, a2);
    type metadata accessor for [(_:)](0, a5, a2, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v18[3] = v15;
    v18[4] = (uint64_t)&protocol witness table for AccessibilityPropertiesEntry<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    outlined init with copy of TypesettingLanguage(a1, (uint64_t)boxed_opaque_existential_1, a2);
    specialized Dictionary.subscript.setter((uint64_t)v18, a4);
    return outlined destroy of TypesettingConfiguration(a1, a2);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  if (a4)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<Text?>, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v11[3] = v8;
    v11[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v9 = (_QWORD *)swift_allocObject();
    v11[0] = v9;
    v9[2] = a1;
    v9[3] = a2;
    v9[4] = a3;
    v9[5] = a4;
    return specialized Dictionary.subscript.setter((uint64_t)v11, (uint64_t)&type metadata for AccessibilityProperties.RoleDescriptionKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.RoleDescriptionKey, (uint64_t)v11);
    return outlined destroy of Any?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD v7[5];

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  if ((_QWORD)static AccessibilityProperties.TraitsKey.defaultValue == a1
    && *((_QWORD *)&static AccessibilityProperties.TraitsKey.defaultValue + 1) == a2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TraitsKey, (uint64_t)v7);
    return outlined destroy of Any?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v7[3] = v5;
    v7[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v7[0] = a1;
    v7[1] = a2;
    return specialized Dictionary.subscript.setter((uint64_t)v7, (uint64_t)&type metadata for AccessibilityProperties.TraitsKey);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(unint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v4;
  _DWORD v6[6];
  uint64_t v7;
  _UNKNOWN **v8;

  v1 = a1;
  v2 = HIDWORD(a1);
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  if ((_DWORD)static AccessibilityProperties.VisibilityKey.defaultValue == v1
    && HIDWORD(static AccessibilityProperties.VisibilityKey.defaultValue) == (_DWORD)v2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.VisibilityKey, (uint64_t)v6);
    return outlined destroy of Any?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v7 = v4;
    v8 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = v1;
    v6[1] = v2;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.VisibilityKey);
  }
}

void (*AccessibilityProperties.activationPointStorage.modify(int8x16_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  int8x16_t *v3;
  int8x16_t *v4;
  uint64_t v5;

  v3 = (int8x16_t *)malloc(0x80uLL);
  *a1 = v3;
  v4 = v3 + 5;
  v3[7].i64[1] = v1;
  v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, v4);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.activationPointStorage.modify;
}

void AccessibilityProperties.activationPointStorage.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 10);
  if ((a2 & 1) != 0)
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v3, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
    outlined retain of AccessibilityActivationPointStorage?(v2);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
    outlined consume of AccessibilityActivationPointStorage?(v2[10], v2[11], v2[12], v2[13]);
  }
  else
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v3, (uint64_t)(v2 + 5), &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
    specialized AccessibilityProperties.subscript.setter((uint64_t)(v2 + 5));
  }
  free(v2);
}

uint64_t *outlined retain of AccessibilityActivationPointStorage?(uint64_t *a1)
{
  outlined copy of AccessibilityActivationPointStorage?(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t outlined copy of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AccessibilityProperties.activationPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v7);
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    v5 = v7.i64[1];
    v4 = v8;
    v6 = v7.i64[0];
    result = outlined consume of AccessibilityActivationPointStorage?(v7.i64[0], v7.i64[1], v8, v9);
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v4 = -1;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t one-time initialization function for valueType()
{
  uint64_t result;

  result = type metadata accessor for AccessibilityChartDescriptorStorage();
  static AccessibilityProperties.ChartDescriptorKey.valueType = result;
  return result;
}

uint64_t static AccessibilityProperties.ChartDescriptorKey.valueType.getter()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return static AccessibilityProperties.ChartDescriptorKey.valueType;
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ChartDescriptorKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return static AccessibilityProperties.ChartDescriptorKey.valueType;
}

uint64_t AccessibilityProperties.chartDescriptor.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.chartDescriptor.setter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
}

uint64_t (*AccessibilityProperties.chartDescriptor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[1] = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.chartDescriptor.modify;
}

uint64_t AccessibilityProperties.chartDescriptor.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return specialized AccessibilityProperties.subscript.setter(*a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
  v2 = swift_retain();
  specialized AccessibilityProperties.subscript.setter(v2, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
  return swift_release();
}

_QWORD *static AccessibilityProperties.ChildBehaviorKind.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ChildBehaviorKind()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityChildBehaviorKind;
}

uint64_t AccessibilityProperties.childBehaviorKind.getter()
{
  return AccessibilityProperties.locale.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.childBehaviorKind.setter(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.childBehaviorKind.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, v2);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.childBehaviorKind.modify;
}

uint64_t AccessibilityProperties.childBehaviorKind.modify(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(_BYTE *)(a1 + 8));
}

uint64_t static AccessibilityProperties.CustomContentListKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.CustomContentListKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static AccessibilityProperties.CustomContentListKey.defaultValue, a1);
}

uint64_t AccessibilityProperties.customContentList.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t (*AccessibilityProperties.customContentList.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[1] = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.customContentList.modify;
}

uint64_t AccessibilityProperties.customContentList.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customContentList.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

_QWORD *static AccessibilityProperties.CustomAttributesKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.CustomAttributesKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityCustomAttributes;
}

uint64_t AccessibilityProperties.customAttributes.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for AccessibilityProperties.customAttributes : AccessibilityProperties@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v4);
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t AccessibilityProperties.customAttributes.setter(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.customAttributes.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.customAttributes.modify;
}

uint64_t AccessibilityProperties.customAttributes.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customContentList.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

_QWORD *static AccessibilityProperties.DataSeriesConfigurationKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.DataSeriesConfigurationKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityDataSeriesConfiguration;
}

uint64_t AccessibilityProperties.dataSeriesConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for AccessibilityProperties.dataSeriesConfiguration : AccessibilityProperties@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[312];
  _BYTE v5[312];

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v4);
  swift_bridgeObjectRelease();
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v4, (uint64_t)v5, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v5, a1, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
}

uint64_t AccessibilityProperties.dataSeriesConfiguration.setter(uint64_t a1)
{
  _BYTE v2[312];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

void (*AccessibilityProperties.dataSeriesConfiguration.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x4E8uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 78);
  v3[156] = v1;
  v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, v4);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.dataSeriesConfiguration.modify;
}

void AccessibilityProperties.dataSeriesConfiguration.modify(void **a1, char a2)
{
  void *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = (uint64_t)*a1 + 624;
  if ((a2 & 1) != 0)
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)*a1 + 624, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    outlined retain of AccessibilityDataSeriesConfiguration?((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration?);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v3, (uint64_t)v2 + 936, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    outlined retain of AccessibilityDataSeriesConfiguration?((uint64_t)v2 + 936, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration?);
  }
  else
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)*a1 + 624, (uint64_t)v2 + 312, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2 + 312);
  }
  free(v2);
}

uint64_t outlined copy of AccessibilityDataSeriesConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a8, a9, a10, a11, a12, a13, a14, a15, a16);
    return outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined copy of Text?(result, a2, a3, a4);
    outlined copy of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of AccessibilityDataSeriesConfiguration?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    *(_QWORD *)(a1 + 304));
  return a1;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a8, a9, a10, a11, a12, a13, a14, a15, a16);
    return outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined consume of Text?(result, a2, a3, a4);
    outlined consume of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *static AccessibilityProperties.AutomationTypeKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(a1, a2, &one-time initialization token for valueType, (uint64_t (*)(_QWORD))type metadata accessor for AXAutomationType);
}

uint64_t AccessibilityProperties.explicitAutomationType.getter()
{
  return AccessibilityProperties.explicitAutomationType.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.explicitAutomationType.setter(uint64_t a1, char a2)
{
  return specialized AccessibilityProperties.subscript.setter(a1, a2 & 1);
}

uint64_t (*AccessibilityProperties.explicitAutomationType.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  return AccessibilityProperties.explicitAutomationType.modify;
}

uint64_t AccessibilityProperties.explicitAutomationType.modify(uint64_t a1, uint64_t a2)
{
  return AccessibilityProperties.explicitAutomationType.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized AccessibilityProperties.subscript.setter);
}

_QWORD *static AccessibilityProperties.IdentifierKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.IdentifierKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityIdentifierStorage;
}

uint64_t AccessibilityProperties.identifierStorage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.identifierStorage : AccessibilityProperties@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  double result;
  __int128 v5;
  char v6;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

uint64_t AccessibilityProperties.identifierStorage.setter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t (*AccessibilityProperties.identifierStorage.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.identifierStorage.modify;
}

uint64_t AccessibilityProperties.identifierStorage.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  if ((a2 & 1) == 0)
    return specialized AccessibilityProperties.subscript.setter(*(_QWORD *)a1, v2, v4);
  swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v3, v2, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static AccessibilityProperties.HintsKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.HintsKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static AccessibilityProperties.HintsKey.defaultValue, a1);
}

uint64_t AccessibilityProperties.hints.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t (*AccessibilityProperties.hints.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[1] = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.hints.modify;
}

uint64_t AccessibilityProperties.hints.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customContentList.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

uint64_t AccessibilityProperties.customContentList.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    return a3(*a1);
  v4 = swift_bridgeObjectRetain();
  a3(v4);
  return swift_bridgeObjectRelease();
}

_QWORD *static AccessibilityProperties.InputLabelsKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

void protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.InputLabelsKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t AccessibilityProperties.inputLabels.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.chartDescriptor.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_bridgeObjectRetain();
  v3 = a1(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t (*AccessibilityProperties.inputLabels.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[1] = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.inputLabels.modify;
}

uint64_t AccessibilityProperties.inputLabels.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customContentList.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

_QWORD *static AccessibilityProperties.LabelKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.LabelKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityLabelStorage;
}

uint64_t AccessibilityProperties.labelStorage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for AccessibilityProperties.labelStorage : AccessibilityProperties@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  uint64_t v5;
  char v6;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&v5);
  result = swift_bridgeObjectRelease();
  v4 = v6;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t AccessibilityProperties.labelStorage.setter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t (*AccessibilityProperties.labelStorage.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.labelStorage.modify;
}

uint64_t AccessibilityProperties.labelStorage.modify(uint64_t a1, char a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(a1 + 8);
  if ((a2 & 1) == 0)
    return specialized AccessibilityProperties.subscript.setter(*(_QWORD *)a1, v2);
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v3, v2);
  return swift_bridgeObjectRelease();
}

_QWORD *static AccessibilityProperties.LocaleKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.LocaleKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(a1, a2, &one-time initialization token for valueType, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8]);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  if (*a3 == -1)
    return a4(0);
  swift_once();
  return a4(0);
}

uint64_t AccessibilityProperties.locale.getter()
{
  return AccessibilityProperties.locale.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.locale.setter(uint64_t a1)
{
  return AccessibilityProperties.locale.setter(a1, (uint64_t (*)(uint64_t))type metadata accessor for Locale?, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (uint64_t)&type metadata for AccessibilityProperties.LocaleKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<Locale?>);
}

void type metadata accessor for Locale?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void (*AccessibilityProperties.locale.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  *a1 = v1;
  type metadata accessor for Locale?(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  a1[1] = malloc(v4);
  a1[2] = malloc(v4);
  v5 = malloc(v4);
  a1[3] = v5;
  v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.locale.modify;
}

void AccessibilityProperties.locale.modify(_QWORD *a1, char a2)
{
  AccessibilityProperties.locale.modify(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for Locale?, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (uint64_t)&type metadata for AccessibilityProperties.LocaleKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<Locale?>);
}

_QWORD *static AccessibilityProperties.LinkDestinationKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.LinkDestinationKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(a1, a2, &one-time initialization token for valueType, type metadata accessor for LinkDestination.Configuration);
}

uint64_t AccessibilityProperties.linkDestination.getter()
{
  return AccessibilityProperties.locale.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.locale.getter(void (*a1)(uint64_t))
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  a1(v2);
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for AccessibilityProperties.locale : AccessibilityProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t (*a6)(_QWORD), uint64_t a7, unint64_t *a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v13 = a5(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v20 - v17;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v20 - v17, a5);
  outlined init with copy of TypesettingLanguage((uint64_t)v18, (uint64_t)v15, a5);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v15, a5, a6, a7, a8);
  return outlined destroy of TypesettingConfiguration((uint64_t)v18, a5);
}

uint64_t AccessibilityProperties.linkDestination.setter(uint64_t a1)
{
  return AccessibilityProperties.locale.setter(a1, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, type metadata accessor for LinkDestination.Configuration, (uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>);
}

uint64_t AccessibilityProperties.locale.setter(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD), uint64_t a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = a2(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v14 - v11;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v14 - v11, a2);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v12, a2, a3, a4, a5);
  return outlined destroy of TypesettingConfiguration(a1, a2);
}

void type metadata accessor for LinkDestination.Configuration?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for LinkDestination.Configuration?, type metadata accessor for LinkDestination.Configuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void (*AccessibilityProperties.linkDestination.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  *a1 = v1;
  type metadata accessor for LinkDestination.Configuration?(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  a1[1] = malloc(v4);
  a1[2] = malloc(v4);
  v5 = malloc(v4);
  a1[3] = v5;
  v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.linkDestination.modify;
}

void AccessibilityProperties.linkDestination.modify(_QWORD *a1, char a2)
{
  AccessibilityProperties.locale.modify(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, type metadata accessor for LinkDestination.Configuration, (uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>);
}

void AccessibilityProperties.locale.modify(_QWORD *a1, char a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(_QWORD), uint64_t a5, unint64_t *a6)
{
  void *v12;
  void *v13;
  void *v14;

  v12 = (void *)a1[2];
  v13 = (void *)a1[3];
  outlined init with copy of TypesettingLanguage((uint64_t)v13, (uint64_t)v12, a3);
  v14 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v12, (uint64_t)v14, a3);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v14, a3, a4, a5, a6);
    outlined destroy of TypesettingConfiguration((uint64_t)v12, a3);
  }
  else
  {
    specialized AccessibilityProperties.subscript.setter((uint64_t)v12, a3, a4, a5, a6);
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v13, a3);
  free(v13);
  free(v12);
  free(v14);
}

_QWORD *static AccessibilityProperties.RoleDescriptionKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.RoleDescriptionKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for Text;
}

uint64_t AccessibilityProperties.roleDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t key path getter for AccessibilityProperties.roleDescription : AccessibilityProperties@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = swift_bridgeObjectRetain();
  v3 = specialized AccessibilityProperties.subscript.getter(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v9;
  return result;
}

uint64_t key path setter for AccessibilityProperties.roleDescription : AccessibilityProperties(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  outlined copy of Text?(*a1, v2, v3, v4);
  return specialized AccessibilityProperties.subscript.setter(v1, v2, v3, v4);
}

void (*AccessibilityProperties.roleDescription.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = swift_bridgeObjectRetain();
  v5 = specialized AccessibilityProperties.subscript.getter(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_bridgeObjectRelease();
  *v3 = v5;
  v3[1] = v7;
  v3[2] = v9;
  v3[3] = v11;
  return AccessibilityProperties.roleDescription.modify;
}

void AccessibilityProperties.roleDescription.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    outlined copy of Text?(**a1, v3, v5, v6);
    specialized AccessibilityProperties.subscript.setter(v4, v3, v5, v6);
    outlined consume of Text?(*v2, v2[1], v2[2], v2[3]);
  }
  else
  {
    specialized AccessibilityProperties.subscript.setter(**a1, v3, v5, v6);
  }
  free(v2);
}

_QWORD *static AccessibilityProperties.SortPriorityKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.SortPriorityKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return MEMORY[0x24BEE13C8];
}

uint64_t AccessibilityProperties.sortPriority.getter()
{
  return AccessibilityProperties.explicitAutomationType.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.explicitAutomationType.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_bridgeObjectRetain();
  v3 = a1(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t key path getter for AccessibilityProperties.explicitAutomationType : AccessibilityProperties@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  v4 = swift_bridgeObjectRetain();
  v5 = a1(v4);
  v7 = v6;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v7 & 1;
  return result;
}

uint64_t AccessibilityProperties.sortPriority.setter(uint64_t a1, char a2)
{
  return specialized AccessibilityProperties.subscript.setter(a1, a2 & 1);
}

uint64_t (*AccessibilityProperties.sortPriority.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  return AccessibilityProperties.sortPriority.modify;
}

uint64_t AccessibilityProperties.sortPriority.modify(uint64_t a1, uint64_t a2)
{
  return AccessibilityProperties.explicitAutomationType.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized AccessibilityProperties.subscript.setter);
}

uint64_t AccessibilityProperties.explicitAutomationType.modify(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

_QWORD *static AccessibilityProperties.TextContentTypeKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TextContentTypeKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityTextContentType;
}

uint64_t AccessibilityProperties.textContentType.getter()
{
  return AccessibilityProperties.locale.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t key path getter for AccessibilityProperties.childBehaviorKind : AccessibilityProperties@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = swift_bridgeObjectRetain();
  a1(&v6, v4);
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t AccessibilityProperties.textContentType.setter(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.textContentType.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, v2);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.textContentType.modify;
}

uint64_t AccessibilityProperties.textContentType.modify(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(_BYTE *)(a1 + 8));
}

_QWORD *static AccessibilityProperties.TextHeadingLevelKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TextHeadingLevelKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityHeadingLevel;
}

uint64_t AccessibilityProperties.textHeadingLevel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t (*AccessibilityProperties.textHeadingLevel.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = v4;
  return AccessibilityProperties.textHeadingLevel.modify;
}

uint64_t AccessibilityProperties.textHeadingLevel.modify(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(_BYTE *)(a1 + 8));
}

double static AccessibilityProperties.TraitsKey.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static AccessibilityProperties.TraitsKey.defaultValue;
  *a1 = static AccessibilityProperties.TraitsKey.defaultValue;
  return result;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TraitsKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static AccessibilityProperties.TraitsKey.defaultValue;
  *a1 = static AccessibilityProperties.TraitsKey.defaultValue;
  return result;
}

uint64_t AccessibilityProperties.traits.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.traits : AccessibilityProperties@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v4);
  swift_bridgeObjectRelease();
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t AccessibilityProperties.traits.setter(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1, a1[1]);
}

uint64_t (*AccessibilityProperties.traits.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.traits.modify;
}

uint64_t AccessibilityProperties.traits.modify(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1, a1[1]);
}

uint64_t AccessibilityProperties.subscript.getter(unsigned __int8 *a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *a1;
  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v4);
  swift_bridgeObjectRelease();
  if (v1 > 0x3F)
    return 1;
  if ((v4[0] & (1 << v1)) != 0)
    return 1;
  return 2 * ((v4[1] & (1 << v1)) == 0);
}

uint64_t AccessibilityProperties.subscript.setter(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v3 = *a2;
  if (v3 >= 0x40)
    v4 = 0;
  else
    v4 = 1 << v3;
  v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, v7);
  swift_bridgeObjectRelease();
  specialized AccessibilityNullableOptionSet.subscript.setter(a1, v4);
  return specialized AccessibilityProperties.subscript.setter(v7[0], v7[1]);
}

uint64_t specialized AccessibilityNullableOptionSet.subscript.setter(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result != 2)
  {
    v5 = v2[1];
    if ((a2 & ~v5) != 0)
      v2[1] = v5 | a2;
    v6 = *v2;
    v7 = *v2 & a2;
    if ((result & 1) != 0)
    {
      if (v7 == a2)
        return result;
      v4 = v6 | a2;
    }
    else
    {
      if (!v7)
        return result;
      v4 = v6 & ~a2;
    }
    goto LABEL_13;
  }
  v3 = v2[1];
  if ((v3 & a2) != 0)
    v2[1] = v3 & ~a2;
  if ((*v2 & a2) != 0)
  {
    v4 = *v2 & ~a2;
LABEL_13:
    *v2 = v4;
  }
  return result;
}

uint64_t (*AccessibilityProperties.subscript.modify(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, char a2)
{
  uint64_t *v2;
  unsigned __int8 v3;
  unsigned __int8 v5;
  uint64_t v6;

  *(_QWORD *)a1 = v2;
  v3 = *a2;
  *(_BYTE *)(a1 + 9) = *a2;
  v6 = *v2;
  v5 = v3;
  *(_BYTE *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v5);
  return AccessibilityProperties.subscript.modify;
}

uint64_t AccessibilityProperties.subscript.modify(uint64_t a1, char a2)
{
  char v2;
  uint64_t v3;
  unsigned __int8 *v4;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 9);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v6 = v2;
    v4 = (unsigned __int8 *)&v6;
  }
  else
  {
    v7 = v2;
    v4 = (unsigned __int8 *)&v7;
  }
  return AccessibilityProperties.subscript.setter(v3, v4);
}

uint64_t AccessibilityProperties.subscript.getter(unsigned __int8 *a1, unsigned __int8 a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = *a1;
  v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, v6);
  swift_bridgeObjectRelease();
  if (v3 > 0x3F)
    return 1;
  if ((v6[0] & (1 << v3)) != 0)
    return 1;
  return ((v6[1] & (1 << v3)) == 0) & a2;
}

_QWORD *static AccessibilityProperties.ValueKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

_QWORD *static AccessibilityProperties.ActivationPointKey.valueType.getter(_QWORD *result)
{
  if (*result != -1)
    return (_QWORD *)swift_once();
  return result;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ValueKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityValueStorage;
}

uint64_t AccessibilityProperties.value.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for AccessibilityProperties.value : AccessibilityProperties(uint64_t a1)
{
  _BYTE v2[48];
  _BYTE v3[48];

  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v3);
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v3, (uint64_t)v2);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
  return outlined destroy of Any?((uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
}

uint64_t AccessibilityProperties.value.setter(uint64_t a1)
{
  _BYTE v3[48];

  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v3);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v3);
  return outlined destroy of Any?(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
}

void (*AccessibilityProperties.value.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, v3);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.value.modify;
}

void AccessibilityProperties.value.modify(uint64_t *a1, char a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*a1;
  v3 = *a1 + 48;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of AccessibilityValueStorage?(*a1, v3);
    outlined init with copy of AccessibilityValueStorage?(v3, (uint64_t)v2 + 96);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2 + 96);
    outlined destroy of Any?(v3, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
  else
  {
    outlined init with copy of AccessibilityValueStorage?(*a1, v3);
    specialized AccessibilityProperties.subscript.setter(v3);
  }
  outlined destroy of Any?((uint64_t)v2, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  free(v2);
}

double static AccessibilityProperties.VisibilityKey.defaultValue.getter@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static AccessibilityProperties.VisibilityKey.defaultValue;
  *a1 = static AccessibilityProperties.VisibilityKey.defaultValue;
  return result;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.VisibilityKey@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static AccessibilityProperties.VisibilityKey.defaultValue;
  *a1 = static AccessibilityProperties.VisibilityKey.defaultValue;
  return result;
}

uint64_t AccessibilityProperties.visibility.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.visibility : AccessibilityProperties@<D0>(double *a1@<X8>)
{
  uint64_t v2;
  double result;
  double v4;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v4);
  swift_bridgeObjectRelease();
  result = v4;
  *a1 = v4;
  return result;
}

uint64_t AccessibilityProperties.visibility.setter(unint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.visibility.modify(uint64_t a1))(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (_DWORD *)a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.visibility.modify;
}

uint64_t AccessibilityProperties.visibility.modify(unint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t outlined init with copy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_234B506FC(uint64_t a1)
{
  uint64_t v2[5];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  outlined retain of AccessibilityActivationPointStorage?(v2);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

uint64_t sub_234B50748@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_5Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_234B50754()
{
  uint64_t v0;

  v0 = swift_retain();
  return specialized AccessibilityProperties.subscript.setter(v0, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
}

uint64_t sub_234B5078C@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for AccessibilityProperties.childBehaviorKind : AccessibilityProperties((void (*)(uint64_t *__return_ptr, uint64_t))specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_234B507A8(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t sub_234B507CC@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_5Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_234B507D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_6Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t sub_234B507E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_6Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t sub_234B507F8(uint64_t a1)
{
  _BYTE v2[312];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  outlined retain of AccessibilityDataSeriesConfiguration?((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration?);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

uint64_t sub_234B5084C@<X0>(uint64_t a1@<X8>)
{
  return key path getter for AccessibilityProperties.explicitAutomationType : AccessibilityProperties(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_234B50868(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_234B50898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  swift_bridgeObjectRetain();
  return specialized AccessibilityProperties.subscript.setter(v1, v2, v3);
}

uint64_t sub_234B508DC@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_5Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t keypath_get_5Tm@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = swift_bridgeObjectRetain();
  v5 = a1(v4);
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_234B50930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_6Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t keypath_set_6Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t sub_234B50968@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_5Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_234B50974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_6Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t sub_234B50984(uint64_t a1)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(a1 + 8);
  v2 = swift_bridgeObjectRetain();
  return specialized AccessibilityProperties.subscript.setter(v2, v1);
}

uint64_t sub_234B509C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_21Tm(a1, a2, a3, (void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t sub_234B509CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AccessibilityProperties.locale : AccessibilityProperties(a1, a2, a3, a4, (uint64_t (*)(uint64_t))type metadata accessor for Locale?, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (uint64_t)&type metadata for AccessibilityProperties.LocaleKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<Locale?>);
}

uint64_t sub_234B50A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_21Tm(a1, a2, a3, (void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t keypath_get_21Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = swift_bridgeObjectRetain();
  a4(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_234B50A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AccessibilityProperties.locale : AccessibilityProperties(a1, a2, a3, a4, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, type metadata accessor for LinkDestination.Configuration, (uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>);
}

uint64_t sub_234B50A88@<X0>(uint64_t a1@<X8>)
{
  return key path getter for AccessibilityProperties.explicitAutomationType : AccessibilityProperties(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_234B50AA4(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_234B50AD0@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for AccessibilityProperties.childBehaviorKind : AccessibilityProperties((void (*)(uint64_t *__return_ptr, uint64_t))specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_234B50AEC(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t sub_234B50B10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = swift_bridgeObjectRetain();
  v3 = specialized AccessibilityProperties.subscript.getter(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_234B50B54(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t sub_234B50B7C(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1, a1[1]);
}

uint64_t sub_234B50BA4@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v4;
  uint64_t result;
  unsigned __int8 v6;
  uint64_t v7;

  v4 = *a2;
  v7 = *a1;
  v6 = v4;
  result = AccessibilityProperties.subscript.getter(&v6);
  *a3 = result;
  return result;
}

uint64_t sub_234B50BE8(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned __int8 v5;

  v3 = *a1;
  v5 = *a3;
  return AccessibilityProperties.subscript.setter(v3, &v5);
}

uint64_t sub_234B50C20()
{
  return 0;
}

uint64_t sub_234B50C30@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_234B50C6C(unint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ActivationPointKey()
{
  return &type metadata for AccessibilityProperties.ActivationPointKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ChartDescriptorKey()
{
  return &type metadata for AccessibilityProperties.ChartDescriptorKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ChildBehaviorKind()
{
  return &type metadata for AccessibilityProperties.ChildBehaviorKind;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.CustomContentListKey()
{
  return &type metadata for AccessibilityProperties.CustomContentListKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.CustomAttributesKey()
{
  return &type metadata for AccessibilityProperties.CustomAttributesKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.DataSeriesConfigurationKey()
{
  return &type metadata for AccessibilityProperties.DataSeriesConfigurationKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.AutomationTypeKey()
{
  return &type metadata for AccessibilityProperties.AutomationTypeKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.IdentifierKey()
{
  return &type metadata for AccessibilityProperties.IdentifierKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.HintsKey()
{
  return &type metadata for AccessibilityProperties.HintsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.InputLabelsKey()
{
  return &type metadata for AccessibilityProperties.InputLabelsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.LabelKey()
{
  return &type metadata for AccessibilityProperties.LabelKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.LocaleKey()
{
  return &type metadata for AccessibilityProperties.LocaleKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.LinkDestinationKey()
{
  return &type metadata for AccessibilityProperties.LinkDestinationKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.RoleDescriptionKey()
{
  return &type metadata for AccessibilityProperties.RoleDescriptionKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.SortPriorityKey()
{
  return &type metadata for AccessibilityProperties.SortPriorityKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TextContentTypeKey()
{
  return &type metadata for AccessibilityProperties.TextContentTypeKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TextHeadingLevelKey()
{
  return &type metadata for AccessibilityProperties.TextHeadingLevelKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TraitsKey()
{
  return &type metadata for AccessibilityProperties.TraitsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ValueKey()
{
  return &type metadata for AccessibilityProperties.ValueKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.VisibilityKey()
{
  return &type metadata for AccessibilityProperties.VisibilityKey;
}

uint64_t type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>;
  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>)
  {
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    type metadata accessor for AccessibilityNullableOptionSet();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility, &type metadata for AccessibilityVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4518], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

unint64_t type metadata accessor for AnyAccessibilityPropertiesEntry()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry;
  if (!lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_234B510E4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
  {
    if (*(_QWORD *)(v0 + 40))
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t outlined destroy of AccessibilityValueStorage??(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityValueStorage??, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>;
  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>)
  {
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    type metadata accessor for AccessibilityNullableOptionSet();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraitSet, &type metadata for AccessibilityTraitSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4590], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE45A0], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t sub_234B513D0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<[Text]?>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
}

void type metadata accessor for [Text]?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Text]?)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Text]?);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<[Text]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v5 = type metadata accessor for AccessibilityPropertiesEntry(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]>);
  }
}

void type metadata accessor for AXAutomationType?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for AXAutomationType?, (uint64_t (*)(uint64_t))type metadata accessor for AXAutomationType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_234B51530()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 136))
    {
      if (*(_QWORD *)(v0 + 96))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v0 + 128))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v0 + 264))
    {
      if (*(_QWORD *)(v0 + 224))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_BYTE *)(v0 + 216));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v0 + 256))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_BYTE *)(v0 + 248));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return swift_deallocObject();
}

double _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 304) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration??, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityCustomContentEntry], (uint64_t)&type metadata for AccessibilityCustomContentEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v5 = type metadata accessor for AccessibilityPropertiesEntry(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
}

void type metadata accessor for AccessibilityChartDescriptorStorage?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for AccessibilityChartDescriptorStorage?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_234B51764()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t _CustomHoverEffectInputs.updateContext(_:)(int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;

  *(_DWORD *)(v1 + 84) = a1;
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  v2 = Attribute.init<A>(body:value:flags:update:)();
  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v5, v6, v7);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v3;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_WORD *)(v8 + 80) = 256;
  *(_QWORD *)(v8 + 88) = v4;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v8;
  v10 = *(_DWORD *)(v1 + 32);
  if ((v10 & 0x20) == 0)
    *(_DWORD *)(v1 + 32) = v10 | 0x20;
  return result;
}

SwiftUI::SystemHoverEffect __swiftcall SystemHoverEffect.init(info:isEnabled:)(SwiftUI::SystemHoverEffect::Info_optional info, Swift::Bool isEnabled)
{
  _BYTE *v2;
  SwiftUI::SystemHoverEffect result;

  *v2 = *(_BYTE *)info.value.style;
  v2[1] = isEnabled;
  result.info = info;
  return result;
}

uint64_t static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void (*v26)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_DWORD *)(a2 + 8);
    v15 = *(_QWORD *)a2;
    static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v54);
    v16 = v54;
    v17 = v55;
    v18 = v56;
    v19 = HIDWORD(v56);
    v54 = v15;
    LODWORD(v55) = v14;
    v57 = *(_OWORD *)(a2 + 24);
    v56 = v13;
    v58 = v12;
    v59 = v11;
    v60 = *(_OWORD *)(a2 + 56);
    v61 = *(_OWORD *)(a2 + 72);
    v33 = v19;
    v34 = v10;
    v42 = v10;
    v38 = v17;
    v39 = v16;
    v43 = v16;
    v44 = v17;
    v37 = v18;
    LOBYTE(v45) = v18;
    HIDWORD(v45) = v19;
    v21 = type metadata accessor for ModifierBodyAccessor(0, a5, a6, v20);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierBodyAccessor<A>, v21);
    BodyAccessor.makeBody(container:inputs:fields:)(&v41, (uint64_t)&v51, (uint64_t)&v42, (uint64_t)&v54, (uint64_t)&v43, v21, v22);
    v31 = v51;
    v32 = v52;
    v23 = v53;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v43 = v54;
    LODWORD(v44) = v55;
    v45 = v56;
    v46 = v57;
    v47 = v58;
    v48 = v59;
    v49 = v60;
    v50 = v61;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v26 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(&v51, &v41, &v43, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v27 = v51;
    v28 = v52;
    if ((v23 & 1) == 0)
    {
      v51 = v31;
      v52 = v32;
      v42 = v34;
      v43 = v39;
      v44 = v38;
      LOBYTE(v45) = v37;
      HIDWORD(v45) = v33;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v42, &v43, a5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *a7 = v27;
    a7[1] = v28;
  }
  return result;
}

void specialized static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  Swift::String v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  unsigned __int8 v12;
  unsigned int v13;

  if (AGTypeGetKind() - 2 < 4)
  {
    static DynamicPropertyCache.fields(of:)(MEMORY[0x24BEE4078], (uint64_t)v11);
    v4 = v11[0];
    v5 = v11[1];
    v6 = v12;
    v7 = v13;
    outlined retain of _ViewInputs(a2);
    LOBYTE(v11[0]) = v6;
    specialized BodyAccessor.makeBody(container:inputs:fields:)(&v10, &v9, a1, v11, v4, v5, v6 | ((unint64_t)v7 << 32));
  }
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x726576654ELL;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static EmptyHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v5 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v5;
  v6 = *(_OWORD *)(a2 + 9);
  v13 = *(_OWORD *)(a2 + 7);
  v14 = v6;
  return a3(&v8);
}

void EmptyHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 259;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance EmptyHoverEffect()
{
  specialized CustomHoverEffect.bodyError()(0xD000000000000010, (void *)0x8000000235286260);
}

void CustomHoverEffect<>.body(content:)()
{
  specialized CustomHoverEffect<>.body(content:)();
}

uint64_t protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance EmptyHoverEffect(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v5 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v5;
  v6 = *(_OWORD *)(a2 + 9);
  v13 = *(_OWORD *)(a2 + 7);
  v14 = v6;
  return a3(&v8);
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance EmptyHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 259;
}

void static CustomHoverEffect<>.empty.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t _CustomHoverEffectInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_DWORD *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double _CustomHoverEffectInputs.base.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double result;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  v7 = a1[4];
  *(_QWORD *)(v1 + 24) = a1[3];
  *(_QWORD *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(a1 + 7);
  result = *((double *)a1 + 9);
  *(double *)(v1 + 72) = result;
  *(_DWORD *)(v1 + 80) = v6;
  return result;
}

uint64_t (*_CustomHoverEffectInputs.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _CustomHoverEffectInputs.context.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 84);
}

double _CustomHoverEffectInputs.init(base:context:)@<D0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  int v17;
  int v18;

  v16 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *((_DWORD *)a1 + 8);
  v17 = *((_DWORD *)a1 + 9);
  v18 = *((_DWORD *)a1 + 20);
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  v8 = Attribute.init<A>(body:value:flags:update:)();
  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v11, v12, v13);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v9;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_WORD *)(v14 + 80) = 256;
  *(_QWORD *)(v14 + 88) = v10;
  swift_release();
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = a1[3];
  *(_DWORD *)(a3 + 32) = v7 | 0x20;
  *(_DWORD *)(a3 + 36) = v17;
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 7);
  result = *((double *)a1 + 9);
  *(double *)(a3 + 72) = result;
  *(_DWORD *)(a3 + 80) = v18;
  *(_DWORD *)(a3 + 84) = a2;
  return result;
}

double _CustomHoverEffectInputs.makeIndirectOutputs()@<D0>(double *a1@<X8>)
{
  double result;
  uint64_t v3;
  double v4;

  _ViewInputs.makeIndirectOutputs()((uint64_t)&v3);
  *(_QWORD *)a1 = v3;
  result = v4;
  a1[1] = v4;
  return result;
}

double _CustomHoverEffectOutputs.init(base:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(double *)(a1 + 8);
  *(double *)(a2 + 8) = result;
  return result;
}

Swift::Void __swiftcall _CustomHoverEffectInputs.removeContextFromEnvironment()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment();
  v1 = Attribute.init<A>(body:value:flags:update:)();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v4, v5, v6);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v2;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_WORD *)(v7 + 80) = 256;
  *(_QWORD *)(v7 + 88) = v3;
  swift_release();
  *(_QWORD *)(v0 + 16) = v7;
  v8 = *(_DWORD *)(v0 + 32);
  if ((v8 & 0x20) == 0)
    *(_DWORD *)(v0 + 32) = v8 | 0x20;
}

uint64_t _CustomHoverEffectOutputs.base.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1[1];
  return swift_bridgeObjectRetain();
}

double _CustomHoverEffectOutputs.base.setter(double *a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)a1;
  swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  result = a1[1];
  *(double *)(v1 + 8) = result;
  return result;
}

uint64_t (*_CustomHoverEffectOutputs.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance Never()
{
  specialized CustomHoverEffect.bodyError()(0x726576654ELL, (void *)0xE500000000000000);
}

void protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[5];
  uint64_t v6;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  specialized static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(v2, (uint64_t)v5);
}

void SystemHoverEffect.info.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SystemHoverEffect.info.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SystemHoverEffect.info.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*SystemHoverEffect.isEnabled.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void SystemHoverEffect.Style.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static SystemHoverEffect.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SystemHoverEffect.Style.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SystemHoverEffect.Info.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SystemHoverEffect.Info.style.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SystemHoverEffect.Info.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::SystemHoverEffect::Info __swiftcall SystemHoverEffect.Info.init(_:)(SwiftUI::SystemHoverEffect::Info result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result.style;
  return result;
}

BOOL static SystemHoverEffect.Info.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SystemHoverEffect.Resolved.info.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t (*SystemHoverEffect.Resolved.info.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemHoverEffect.Resolved.isEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t SystemHoverEffect.Resolved.isEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*SystemHoverEffect.Resolved.isEnabled.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::SystemHoverEffect::Resolved __swiftcall SystemHoverEffect.Resolved.init(info:isEnabled:)(SwiftUI::SystemHoverEffect::Info info, Swift::Bool isEnabled)
{
  _BYTE *v2;
  SwiftUI::SystemHoverEffect::Resolved result;

  *v2 = *(_BYTE *)info.style;
  v2[1] = isEnabled;
  result.info = info;
  return result;
}

uint64_t static SystemHoverEffect.Resolved.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SystemHoverEffect.Resolved(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

SwiftUI::SystemHoverEffect::Resolved __swiftcall SystemHoverEffect.resolve()()
{
  _BYTE *v0;
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 v3;
  SwiftUI::SystemHoverEffect::Resolved result;

  v2 = *v1;
  v3 = v1[1];
  if (v2 == 3)
    LOBYTE(v2) = 0;
  *v0 = v2;
  v0[1] = v3;
  return result;
}

SwiftUI::SystemHoverEffect __swiftcall SystemHoverEffect.merge(with:)(SwiftUI::SystemHoverEffect with)
{
  _BYTE *v1;
  _BYTE *v2;
  int v3;
  char v4;
  char v5;

  v3 = **(unsigned __int8 **)&with.info.value.style;
  v4 = *(_BYTE *)(*(_QWORD *)&with.info.value.style + 1);
  v5 = v2[1];
  if (v3 == 3)
    LOBYTE(v3) = *v2;
  *v1 = v3;
  v1[1] = v4 & v5 & 1;
  return with;
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ModifierBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  specialized ModifierBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  specialized ModifierBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t EnvironmentValues.hoverEffectContext.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  v6 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v3, v4, v5);
  swift_release();
  if (v1[1])
  {
    v7 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_release();
    swift_release();
  }
  return swift_release();
}

double protocol witness for static Rule.initialValue.getter in conformance UpdateEnvironmentCustomHoverEffectContext@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_235260EF0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateEnvironmentCustomHoverEffectContext@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  v4 = AGGraphGetValue();
  v5 = *(_QWORD *)v4;
  v6 = *(unsigned __int8 *)(v4 + 8);
  v7 = *(_QWORD *)(v4 + 16);
  if (*(_BYTE *)(v4 + 26))
    v8 = 0x10000;
  else
    v8 = 0;
  v9 = *(unsigned __int8 *)(v4 + 24) | (*(unsigned __int8 *)(v4 + 25) << 8) | v8;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(v5, v6, v7, v9);
}

uint64_t protocol witness for Rule.value.getter in conformance ClearCustomHoverEffectContextFromEnvironment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(0, 0, 0, 2);
}

uint64_t EnvironmentValues.hoverEffectContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

double key path getter for EnvironmentValues.hoverEffectContext : EnvironmentValues@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  double result;
  __int128 v9;
  uint64_t v10;
  __int16 v11;
  char v12;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v9);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v9);
  }
  swift_release_n();
  v5 = v10;
  v6 = v11;
  v7 = v12;
  result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 26) = v7;
  *(_WORD *)(a2 + 24) = v6;
  return result;
}

void (*EnvironmentValues.hoverEffectContext.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  Swift::Int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;

  v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[6] = v1;
  v7 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (uint64_t)v6);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<HoverEffectContextKey>(0, v3, v4, v5);
    BloomFilter.init(hashValue:)(v8);
    v9 = 2;
    v10 = swift_retain_n();
    v11 = specialized find1<A>(_:key:filter:)(v10, v15);
    if (v11)
    {
      v12 = *(_OWORD *)(v11 + 72);
      v13 = *(_QWORD *)(v11 + 88);
      v9 = *(unsigned __int16 *)(v11 + 96) | (*(unsigned __int8 *)(v11 + 98) << 16);
    }
    else
    {
      v13 = 0;
      v12 = 0uLL;
    }
    *(_OWORD *)v6 = v12;
    v6[2] = v13;
    *((_WORD *)v6 + 12) = v9;
    *((_BYTE *)v6 + 26) = BYTE2(v9);
  }
  swift_release_n();
  return EnvironmentValues.hoverEffectContext.modify;
}

void EnvironmentValues.hoverEffectContext.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[6];
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = *((unsigned __int16 *)*a1 + 12) | (*((unsigned __int8 *)*a1 + 26) << 16);
  v7 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4, v5, v6);
  swift_release();
  if (v2[1])
  {
    v8 = *(_QWORD *)v1[6];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

void protocol witness for CustomHoverEffect.body(content:) in conformance <> ModifiedContent<A, B>()
{
  specialized CustomHoverEffect<>.body(content:)();
}

void type metadata accessor for MutableBox<CachedEnvironment>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for MutableBox<CachedEnvironment>)
  {
    v4 = type metadata accessor for MutableBox(0, (uint64_t)&type metadata for CachedEnvironment, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>);
  }
}

uint64_t type metadata accessor for ModifierBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifierBodyAccessor);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifierBodyAccessor);
}

uint64_t outlined consume of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRelease();
}

void specialized CustomHoverEffect.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CustomHoverEffect<>.body(content:)()
{
  specialized CustomHoverEffect.bodyError()();
}

unint64_t lazy protocol witness table accessor for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment;
  if (!lazy protocol witness table cache variable for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ClearCustomHoverEffectContextFromEnvironment, &unk_250644078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<HoverEffectContextKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>);
  }
}

_UNKNOWN **associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in EmptyHoverEffect()
{
  return &protocol witness table for Never;
}

unint64_t lazy protocol witness table accessor for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style;
  if (!lazy protocol witness table cache variable for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemHoverEffect.Style, &type metadata for SystemHoverEffect.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style);
  }
  return result;
}

uint64_t sub_234B52DDC(__int128 *a1)
{
  uint64_t v1;
  __int16 v2;
  char v3;
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  char v8;

  v1 = *((_QWORD *)a1 + 2);
  v2 = *((_WORD *)a1 + 12);
  v3 = *((_BYTE *)a1 + 26);
  v5 = *a1;
  v6 = v1;
  v8 = v3;
  v7 = v2;
  return EnvironmentValues.hoverEffectContext.setter((uint64_t)&v5);
}

uint64_t dispatch thunk of CustomHoverEffect.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

ValueMetadata *type metadata accessor for EmptyHoverEffect()
{
  return &type metadata for EmptyHoverEffect;
}

uint64_t initializeWithCopy for _CustomHoverEffectInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _CustomHoverEffectInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  return a1;
}

uint64_t assignWithTake for _CustomHoverEffectInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for _CustomHoverEffectInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _CustomHoverEffectInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _CustomHoverEffectInputs()
{
  return &type metadata for _CustomHoverEffectInputs;
}

_QWORD *initializeBufferWithCopyOfBuffer for _CustomHoverEffectOutputs(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _CustomHoverEffectOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

_QWORD *assignWithTake for _CustomHoverEffectOutputs(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for _CustomHoverEffectOutputs()
{
  return &type metadata for _CustomHoverEffectOutputs;
}

uint64_t dispatch thunk of InternalCustomHoverEffect.systemHoverEffect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for SystemHoverEffect()
{
  return &type metadata for SystemHoverEffect;
}

ValueMetadata *type metadata accessor for SystemHoverEffect.Style()
{
  return &type metadata for SystemHoverEffect.Style;
}

uint64_t getEnumTagSinglePayload for SystemHoverEffect.Style(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemHoverEffect.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234B532C8 + 4 * byte_235286135[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234B532FC + 4 * asc_235286130[v4]))();
}

uint64_t sub_234B532FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B53304(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B5330CLL);
  return result;
}

uint64_t sub_234B53318(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B53320);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234B53324(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B5332C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SystemHoverEffect.Info()
{
  return &type metadata for SystemHoverEffect.Info;
}

uint64_t getEnumTagSinglePayload for SystemHoverEffect(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemHoverEffect(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234B53438 + 4 * byte_23528613F[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_234B5346C + 4 * byte_23528613A[v4]))();
}

uint64_t sub_234B5346C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234B53474(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234B5347CLL);
  return result;
}

uint64_t sub_234B53488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234B53490);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_234B53494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234B5349C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SystemHoverEffect.Resolved()
{
  return &type metadata for SystemHoverEffect.Resolved;
}

ValueMetadata *type metadata accessor for HoverEffectContextKey()
{
  return &type metadata for HoverEffectContextKey;
}

void *type metadata accessor for ClearCustomHoverEffectContextFromEnvironment()
{
  return &unk_250644078;
}

ValueMetadata *type metadata accessor for UpdateEnvironmentCustomHoverEffectContext()
{
  return &type metadata for UpdateEnvironmentCustomHoverEffectContext;
}

unint64_t instantiation function for generic protocol witness table for UpdateEnvironmentCustomHoverEffectContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ClearCustomHoverEffectContextFromEnvironment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void specialized CustomHoverEffect.bodyError()(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ModifierBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)&v37 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
  {
    v44 = a1;
    v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(void))(a4 + 24))();
      AGGraphSetUpdate();
      v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x24BDAC7A8](v33);
      v35 = type metadata accessor for ModifierBodyAccessor(0, a3, a4, v34);
      *(&v37 - 2) = v35;
      *(&v37 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierBodyAccessor<A>, v35);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v37 - 4), AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v36);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    v39 = v17;
    v40 = v16;
    v41 = v14;
    v42 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v19 = AGTypeID.description.getter();
    v21 = v20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v19;
    v23 = (_QWORD *)(inited + 32);
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v21;
    v43 = a3;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v24 = inited + 72;
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v10, v46, v8);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_initStackObject();
    v47 = xmmword_235283260;
    *(_OWORD *)(v26 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v37 = inited;
        v38 = a4;
        LODWORD(inited) = v39 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v24, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(_QWORD *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v48);
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v48);
          swift_bridgeObjectRelease();
          v32 = *(void (**)(char *, uint64_t))(v45 + 8);
          v32(v46, v8);
          v32(v10, v8);
          a4 = v38;
          AssociatedTypeWitness = v42;
          a3 = v43;
          v16 = v40;
          v14 = v41;
          goto LABEL_15;
        }
        outlined destroy of CVarArg?((uint64_t)v48);
        v23 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 24);
          while (1)
          {
            v29(v10, v28, v8);
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v47;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v48);
            swift_bridgeObjectRelease();
            if (!v49)
              break;
            outlined destroy of CVarArg?((uint64_t)v48);
            if (v23[291] != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)&v37 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
  {
    v44 = a1;
    v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(void))(a4 + 48))();
      AGGraphSetUpdate();
      v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x24BDAC7A8](v33);
      v35 = type metadata accessor for ModifierBodyAccessor(0, a3, a4, v34);
      *(&v37 - 2) = v35;
      *(&v37 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierBodyAccessor<A>, v35);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v37 - 4), AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v36);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    v39 = v17;
    v40 = v16;
    v41 = v14;
    v42 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v19 = AGTypeID.description.getter();
    v21 = v20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v19;
    v23 = (_QWORD *)(inited + 32);
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v21;
    v43 = a3;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v24 = inited + 72;
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v10, v46, v8);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_initStackObject();
    v47 = xmmword_235283260;
    *(_OWORD *)(v26 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v37 = inited;
        v38 = a4;
        LODWORD(inited) = v39 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v24, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(_QWORD *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v48);
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v48);
          swift_bridgeObjectRelease();
          v32 = *(void (**)(char *, uint64_t))(v45 + 8);
          v32(v46, v8);
          v32(v10, v8);
          a4 = v38;
          AssociatedTypeWitness = v42;
          a3 = v43;
          v16 = v40;
          v14 = v41;
          goto LABEL_15;
        }
        outlined destroy of CVarArg?((uint64_t)v48);
        v23 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 24);
          while (1)
          {
            v29(v10, v28, v8);
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v47;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v48);
            swift_bridgeObjectRelease();
            if (!v49)
              break;
            outlined destroy of CVarArg?((uint64_t)v48);
            if (v23[291] != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t partial apply for closure #2 in BodyAccessor.setBody(_:)()
{
  return closure #2 in BodyAccessor.setBody(_:)();
}

unint64_t type metadata accessor for CVarArg()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CVarArg;
  if (!lazy cache variable for type metadata for CVarArg)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
  }
  return result;
}

void type metadata accessor for CVarArg?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for CVarArg?, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t outlined init with copy of CVarArg?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for CVarArg?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CVarArg?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CVarArg?(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AttributeInvalidatingSubscriber.attribute.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t AttributeInvalidatingSubscriber.init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = specialized AttributeInvalidatingSubscriber.init(host:attribute:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t AttributeInvalidatingSubscriber.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  _BYTE v10[24];
  uint64_t v11;

  v4 = *v1;
  v3 = v1 + 4;
  swift_beginAccess();
  v6 = type metadata accessor for AttributeInvalidatingSubscriber.StateType(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v5);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v7 + 16))(v10, v3, v6);
  if (v11)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Cancellable.cancel()();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v9);
    swift_beginAccess();
    (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v7 + 40))(v3, v9, v6);
    swift_endAccess();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    static Subscribers.Demand.unlimited.getter();
    return dispatch thunk of Subscription.request(_:)();
  }
}

uint64_t AttributeInvalidatingSubscriber.invalidateAttribute()()
{
  uint64_t v0;
  unsigned int v1;
  char v2;
  uint64_t Strong;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!pthread_main_np())
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    os_log(_:dso:log:_:_:)();
    goto LABEL_16;
  }
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock) || static Update.dispatchDepth >= static Update.depth)
  {
LABEL_16:
    v2 = 0;
    goto LABEL_17;
  }
  if (one-time initialization token for v4 != -1)
    swift_once();
  v1 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_28;
LABEL_25:
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    os_log(_:dso:log:_:_:)();
    goto LABEL_28;
  }
  if (static Semantics.forced >= v1)
    goto LABEL_25;
LABEL_28:
  v2 = 1;
LABEL_17:
  Strong = swift_weakLoadStrong();
  v4 = *(_QWORD *)(v0 + 24);
  if (one-time initialization token for _lock != -1)
    swift_once();
  v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  if (Strong)
  {
    v6 = _threadTransactionData();
    if (v6)
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      v6 = swift_dynamicCastClassUnconditional();
    }
    v7 = _threadTransactionID();
    specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v6, v7, v4, v2, 1);
    swift_release();
  }
  static Update.end()();
  _MovableLockUnlock(v5);
  return swift_release();
}

Swift::Void __swiftcall AttributeInvalidatingSubscriber.cancel()()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = v0 + 4;
  v2 = *v0;
  swift_beginAccess();
  v4 = type metadata accessor for AttributeInvalidatingSubscriber.StateType(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v3);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(__int128 *, _QWORD *, uint64_t))(v5 + 16))(&v6, v1, v4);
  if (v7 > 1)
  {
    outlined init with take of ScrollStateRequest(&v6, (uint64_t)&v8);
    __swift_project_boxed_opaque_existential_1(&v8, *((uint64_t *)&v9 + 1));
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  }
  else
  {
    (*(void (**)(__int128 *, uint64_t))(v5 + 8))(&v6, v4);
  }
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  swift_beginAccess();
  (*(void (**)(_QWORD *, __int128 *, uint64_t))(v5 + 40))(v1, &v8, v4);
  swift_endAccess();
}

uint64_t *AttributeInvalidatingSubscriber.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_weakDestroy();
  v3 = type metadata accessor for AttributeInvalidatingSubscriber.StateType(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + 4, v3);
  return v0;
}

uint64_t AttributeInvalidatingSubscriber.__deallocating_deinit()
{
  AttributeInvalidatingSubscriber.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance AttributeInvalidatingSubscriber<A>(_QWORD *a1)
{
  return AttributeInvalidatingSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AttributeInvalidatingSubscriber<A>()
{
  return specialized AttributeInvalidatingSubscriber.receive(_:)();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AttributeInvalidatingSubscriber<A>()
{
  return specialized AttributeInvalidatingSubscriber.receive(completion:)();
}

void protocol witness for Cancellable.cancel() in conformance AttributeInvalidatingSubscriber<A>()
{
  AttributeInvalidatingSubscriber.cancel()();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AttributeInvalidatingSubscriber<A>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t specialized AttributeInvalidatingSubscriber.init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_weakInit();
  *(_QWORD *)(v2 + 64) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  swift_weakAssign();
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  swift_weakAssign();
  *(_QWORD *)(v3 + 24) = a2;
  return v3;
}

uint64_t type metadata accessor for AttributeInvalidatingSubscriber.StateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttributeInvalidatingSubscriber.StateType);
}

uint64_t specialized AttributeInvalidatingSubscriber.receive(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[5];

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for AttributeInvalidatingSubscriber.StateType(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v4 + 16))(v7, v0 + 4, v3);
  v5 = v7[3];
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if (v5 >= 2)
    AttributeInvalidatingSubscriber.invalidateAttribute()();
  return static Subscribers.Demand.none.getter();
}

uint64_t specialized AttributeInvalidatingSubscriber.receive(completion:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  __int128 v8;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for AttributeInvalidatingSubscriber.StateType(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v4 + 16))(v7, v0 + 4, v3);
  v5 = v8;
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if (v5 >= 2)
  {
    memset(v7, 0, sizeof(v7));
    v8 = xmmword_235260EF0;
    swift_beginAccess();
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v4 + 40))(v0 + 4, v7, v3);
    swift_endAccess();
    return AttributeInvalidatingSubscriber.invalidateAttribute()();
  }
  return result;
}

void base witness table accessor for CustomCombineIdentifierConvertible in AttributeInvalidatingSubscriber<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AttributeInvalidatingSubscriber<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for AttributeInvalidatingSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AttributeInvalidatingSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttributeInvalidatingSubscriber);
}

uint64_t method lookup function for AttributeInvalidatingSubscriber()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t destroy for AttributeInvalidatingSubscriber.StateType(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for AttributeInvalidatingSubscriber.StateType(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for AttributeInvalidatingSubscriber.StateType(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for AttributeInvalidatingSubscriber.StateType(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeInvalidatingSubscriber.StateType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AttributeInvalidatingSubscriber.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

double destructiveInjectEnumTag for AttributeInvalidatingSubscriber.StateType(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

uint64_t Color.fallbackColor(in:)()
{
  return swift_retain();
}

uint64_t Color.resolvePaint(in:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v3);
}

void static Color._makeView<A>(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for Color, a4, (uint64_t)&protocol witness table for Color, a5);
}

void ColorProvider._apply(color:to:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_234B5480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.OpacityColor>(0);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

_QWORD *Color.Resolved.draw(path:style:in:bounds:)(uint64_t a1, __int128 *a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  char v16;
  _BYTE v17[160];
  _DWORD v18[40];

  v12 = a2[1];
  v13 = *a2;
  v9 = *((_QWORD *)a2 + 4);
  v10 = *((_BYTE *)a2 + 40);
  *(float *)v18 = a4;
  *(float *)&v18[1] = a5;
  *(float *)&v18[2] = a6;
  *(float *)&v18[3] = a7;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v18);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v18, (uint64_t)v17);
  v14[0] = v13;
  v14[1] = v12;
  v15 = v9;
  v16 = v10;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v17, (uint64_t)v14, a3);
}

BOOL Color.Resolved.isClear.getter(double a1, double a2, double a3, float a4)
{
  return a4 == 0.0;
}

BOOL Color.Resolved.isOpaque.getter(double a1, double a2, double a3, float a4)
{
  return a4 == 1.0;
}

void static Color.Resolved.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
}

_QWORD *protocol witness for ResolvedPaint.draw(path:style:in:bounds:) in conformance Color.Resolved(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _OWORD *v3;
  uint64_t v6;
  char v7;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  char v13;
  _BYTE v14[160];
  _OWORD v15[10];

  v9 = a2[1];
  v10 = *a2;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_BYTE *)a2 + 40);
  v15[0] = *v3;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v15);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v15, (uint64_t)v14);
  v11[0] = v10;
  v11[1] = v9;
  v12 = v6;
  v13 = v7;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v14, (uint64_t)v11, a3);
}

BOOL protocol witness for ResolvedPaint.isClear.getter in conformance Color.Resolved()
{
  uint64_t v0;

  return *(float *)(v0 + 12) == 0.0;
}

BOOL protocol witness for ResolvedPaint.isOpaque.getter in conformance Color.Resolved()
{
  uint64_t v0;

  return *(float *)(v0 + 12) == 1.0;
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance Color.Resolved(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
}

void protocol witness for ColorProvider.apply(color:to:) in conformance ResolvedColorProvider(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.DisplayP3(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

uint64_t outlined copy of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      result = swift_retain();
      break;
    case 1:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for ColorBox<Color.OpacityColor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ColorBox<Color.OpacityColor>)
  {
    v2 = lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor();
    v4 = type metadata accessor for ColorBox(a1, (uint64_t)&type metadata for Color.OpacityColor, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>);
  }
}

unint64_t lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor;
  if (!lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.OpacityColor, &type metadata for Color.OpacityColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor;
  if (!lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.OpacityColor, &type metadata for Color.OpacityColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor;
  if (!lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.OpacityColor, &type metadata for Color.OpacityColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in Color()
{
  return &protocol witness table for Color.Resolved;
}

unint64_t instantiation function for generic protocol witness table for Color.Resolved(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  result = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void protocol witness for ColorProvider.apply(color:to:) in conformance ContentStyle.ID(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance GradientColorProvider(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.NamedColor(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.OpacityColor(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.HierarchicalOpacityColor(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.DestinationOverProvider(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.MixProvider(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.SettingOpacityProvider(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.TintAdjustmentProvider(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

void protocol witness for ColorProvider.apply(color:to:) in conformance Color.DesaturatedColor(uint64_t a1, uint64_t a2)
{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

uint64_t BidirectionalCollection<>.insertionSort()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t, double);
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t AssociatedConformanceWitness;
  char *v48;
  char v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(_BYTE *, _QWORD);
  void (*v55)(char *);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(_BYTE *, _QWORD);
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  char v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *);
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t AssociatedTypeWitness;
  uint64_t v98;
  _BYTE v99[40];

  v82 = a4;
  v80 = a3;
  v81 = a2;
  v6 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v87 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v79 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v94 = (char *)&v74 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v91 = (char *)&v74 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v78 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v93 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v75 = (char *)&v74 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v83 = (char *)&v74 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v74 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v77 = (char *)&v74 - v22;
  v23 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v74 - v29;
  v31 = *(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16);
  v32 = v4;
  v31((char *)&v74 - v29, v4, a1, v28);
  v33 = dispatch thunk of Collection.isEmpty.getter();
  v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  v35 = v30;
  v98 = a1;
  v95 = v34;
  result = ((uint64_t (*)(char *, uint64_t))v34)(v30, a1);
  if ((v33 & 1) == 0)
  {
    v37 = v98;
    ((void (*)(char *, uint64_t, uint64_t))v31)(v30, v32, v98);
    ((void (*)(char *, uint64_t, uint64_t))v31)(v26, v32, v37);
    dispatch thunk of Collection.startIndex.getter();
    v38 = v26;
    v39 = v78;
    v96 = v6;
    v92 = (void (*)(char *, uint64_t, uint64_t))v31;
    v40 = v95;
    v95(v38, v37);
    dispatch thunk of Collection.index(after:)();
    v89 = *(void (**)(char *, uint64_t))(v39 + 8);
    v89(v20, v12);
    v40(v30, v37);
    v41 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    v76 = v32;
    v42 = v92;
    v86 = v30;
    v90 = v41;
    v74 = v20;
    v41(v20, v77, v12);
    while (1)
    {
      v45 = v98;
      v42(v35, v32, v98);
      v46 = v83;
      dispatch thunk of Collection.endIndex.getter();
      v95(v35, v45);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v48 = v74;
      v88 = *(_QWORD *)(AssociatedConformanceWitness + 8);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50 = v89;
      v89(v46, v12);
      v50(v48, v12);
      v51 = v75;
      v52 = v77;
      if ((v49 & 1) != 0)
        return ((uint64_t (*)(char *, uint64_t))v89)(v77, v12);
      v53 = v76;
      v54 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v55 = *(void (**)(char *))(v87 + 16);
      v55(v91);
      v54(v99, 0);
      v41(v51, v52, v12);
      v56 = v53;
      v57 = v86;
      v84 = v55;
      while (1)
      {
        v58 = v98;
        v42(v57, v56, v98);
        dispatch thunk of BidirectionalCollection.index(before:)();
        v95(v57, v58);
        v59 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v55(v94);
        v59(v99, 0);
        if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
          break;
        v60 = v20;
        v61 = v20;
        v62 = v90;
        v90(v61, v51, v12);
        v63 = v94;
        v64 = AssociatedTypeWitness;
        ((void (*)(char *, char *, uint64_t))v55)(v79, v94, AssociatedTypeWitness);
        v65 = v98;
        dispatch thunk of MutableCollection.subscript.setter();
        v85 = *(void (**)(char *, uint64_t))(v87 + 8);
        v85(v63, v64);
        v66 = v89;
        v89(v51, v12);
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v51, v93, v12);
        v62(v60, v51, v12);
        v57 = v86;
        v92(v86, v56, v65);
        v67 = v83;
        dispatch thunk of Collection.startIndex.getter();
        v95(v57, v65);
        v68 = dispatch thunk of static Equatable.== infix(_:_:)();
        v42 = v92;
        v66(v67, v12);
        v20 = v60;
        v66(v60, v12);
        v55 = v84;
        if ((v68 & 1) != 0)
        {
          v69 = v57;
          v70 = v89;
          goto LABEL_10;
        }
      }
      v69 = v57;
      v85 = *(void (**)(char *, uint64_t))(v87 + 8);
      v85(v94, AssociatedTypeWitness);
      v70 = v89;
      v89(v93, v12);
LABEL_10:
      v90(v20, v77, v12);
      v71 = v75;
      v72 = dispatch thunk of static Equatable.== infix(_:_:)();
      v70(v20, v12);
      v73 = v70;
      v35 = v69;
      if ((v72 & 1) == 0)
      {
        v90(v20, v71, v12);
        ((void (*)(char *, char *, uint64_t))v84)(v79, v91, AssociatedTypeWitness);
        v35 = v86;
        dispatch thunk of MutableCollection.subscript.setter();
      }
      v43 = v76;
      v44 = v98;
      v42(v35, v76, v98);
      dispatch thunk of Collection.formIndex(after:)();
      v95(v35, v44);
      v73(v71, v12);
      v85(v91, AssociatedTypeWitness);
      v32 = v43;
      v41 = v90;
      v90(v20, v77, v12);
    }
  }
  return result;
}

uint64_t specialized BidirectionalCollection<>.insertionSort(by:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3 > 1)
  {
    v5 = (_QWORD *)result;
    v6 = 0;
    v7 = 1;
    while (v7 < v3)
    {
      v8 = 0;
      v9 = *(unsigned int *)(v2 + 4 * v7 + 32);
      while (1)
      {
        if (v7 + v8 - 1 >= *(_QWORD *)(v2 + 16))
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v10 = *(unsigned int *)(v2 + v6 + 4 * v8 + 32);
        v11 = *(_QWORD *)(a2 + 144);
        if ((v11 & 0xC000000000000001) != 0)
        {
          v12 = MEMORY[0x23B7C6D9C](v9);
        }
        else
        {
          if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10) <= v9)
            goto LABEL_29;
          v12 = swift_retain();
        }
        v13 = *(double *)(v12 + 64);
        result = swift_release();
        v14 = *(_QWORD *)(a2 + 144);
        if ((v14 & 0xC000000000000001) != 0)
        {
          v15 = MEMORY[0x23B7C6D9C](v10);
        }
        else
        {
          if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10) <= v10)
            goto LABEL_30;
          v15 = swift_retain();
        }
        v16 = *(double *)(v15 + 64);
        result = swift_release();
        if (v13 >= v16)
          break;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          v2 = result;
        }
        if (v7 + v8 >= *(_QWORD *)(v2 + 16))
          goto LABEL_31;
        *(_DWORD *)(v2 + v6 + 4 * v8 + 36) = v10;
        *v5 = v2;
        --v8;
        if (!(v7 + v8))
        {
          v17 = 0;
          goto LABEL_24;
        }
      }
      if (!v8)
        goto LABEL_4;
      v17 = v7 + v8;
LABEL_24:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        v2 = result;
      }
      if (v17 >= *(_QWORD *)(v2 + 16))
        goto LABEL_33;
      *(_DWORD *)(v2 + 4 * v17 + 32) = v9;
      *v5 = v2;
LABEL_4:
      ++v7;
      v3 = *(_QWORD *)(v2 + 16);
      v6 += 4;
      if (v7 == v3)
        return result;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  return result;
}

unint64_t specialized BidirectionalCollection<>.insertionSort(by:)(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t *v33;

  v3 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)(result + 24);
  if (v3 != v2 >> 1)
  {
    v4 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v4 != v2 >> 1)
    {
      v5 = a2;
      v6 = (uint64_t *)result;
      v33 = (uint64_t *)result;
      while (v4 >= v3 && v4 < (uint64_t)(v2 >> 1))
      {
        v7 = v6[1];
        result = *(unsigned int *)(v7 + 4 * v4);
        v30 = v4;
        v32 = result;
        while (1)
        {
          v8 = v4 - 1;
          if (__OFSUB__(v4, 1))
          {
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          if (v8 < v3)
            goto LABEL_41;
          v9 = v2 >> 1;
          if (v8 >= (uint64_t)(v2 >> 1))
            goto LABEL_41;
          v10 = *(unsigned int *)(v7 + 4 * v8);
          v11 = *(_QWORD *)(v5 + 144);
          if ((v11 & 0xC000000000000001) != 0)
          {
            v12 = MEMORY[0x23B7C6D9C]();
          }
          else
          {
            if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10) <= result)
              goto LABEL_42;
            v12 = swift_retain();
          }
          v13 = *(double *)(v12 + 64);
          result = swift_release();
          v14 = *(_QWORD *)(v5 + 144);
          if ((v14 & 0xC000000000000001) != 0)
          {
            v15 = MEMORY[0x23B7C6D9C](v10);
          }
          else
          {
            if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10) <= v10)
              goto LABEL_43;
            v15 = swift_retain();
          }
          v16 = *(double *)(v15 + 64);
          swift_release();
          if (v13 >= v16)
            break;
          v17 = *v33;
          if ((v2 & 1) == 0
            || (isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(),
                v6 = v33,
                *v33 = v17,
                (isUniquelyReferenced_nonNull & 1) == 0))
          {
            v19 = specialized _ArrayBufferProtocol.init(copying:)(v7, v3, v2);
            v7 = v20;
            v3 = v21;
            v2 = v22;
            swift_unknownObjectRelease();
            v6 = v33;
            v33[1] = v7;
            v33[2] = v3;
            v9 = v2 >> 1;
            v17 = v19;
            v5 = a2;
            v33[3] = v2;
          }
          result = v32;
          if (v4 < v3 || v4 >= v9)
            goto LABEL_44;
          *(_DWORD *)(v7 + 4 * v4) = v10;
          *v6 = v17;
          --v4;
          v23 = v8;
          if (v8 == v3)
            goto LABEL_28;
        }
        v8 = v4;
        v23 = v3;
        v6 = v33;
        result = v32;
LABEL_28:
        if (v8 == v30)
        {
          v3 = v23;
        }
        else
        {
          v24 = result;
          v25 = *v6;
          if ((v2 & 1) != 0 && (result = swift_isUniquelyReferenced_nonNull(), v6 = v33, *v33 = v25, (result & 1) != 0))
          {
            v3 = v23;
          }
          else
          {
            v26 = specialized _ArrayBufferProtocol.init(copying:)(v7, v23, v2);
            v7 = v27;
            v3 = v28;
            v2 = v29;
            result = swift_unknownObjectRelease();
            v6 = v33;
            v33[1] = v7;
            v33[2] = v3;
            v25 = v26;
            v5 = a2;
            v33[3] = v2;
          }
          if (v8 < v3 || v8 >= (uint64_t)(v2 >> 1))
            goto LABEL_47;
          *(_DWORD *)(v7 + 4 * v8) = v24;
          *v6 = v25;
        }
        if (__OFADD__(v30, 1))
          goto LABEL_46;
        v4 = v30 + 1;
        if (v30 + 1 == v2 >> 1)
          return result;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
  }
  return result;
}

unint64_t **specialized BidirectionalCollection<>.insertionSort(by:)(unint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *InputValue;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  BOOL v67;
  _BOOL4 v68;
  uint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v85;
  int v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;

  v12 = (uint64_t)result[1];
  if (!v12)
    return result;
  if (v12 < 1)
    goto LABEL_157;
  if (v12 == 1)
    return result;
  v14 = 1;
  v15 = *result;
  v86 = *MEMORY[0x24BE096C0];
  v73 = result[1];
  v74 = *result;
  do
  {
    if (v14 == 0x111111111111112)
    {
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      result = (unint64_t **)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v16 = v74[15 * v14];
    v17 = 120 * v16;
    v85 = v16;
    if ((unsigned __int128)((uint64_t)v16 * (__int128)120) >> 64 != (uint64_t)(120 * v16) >> 63)
      goto LABEL_155;
    v18 = 0;
    v19 = a4 + v17;
    v75 = v15;
    v76 = a4 + v17;
    v20 = v15;
    v88 = 120 * v16;
    v89 = v14;
    while (1)
    {
      v22 = *v20;
      v20 -= 15;
      v21 = v22;
      v23 = 120 * v22;
      if ((unsigned __int128)((uint64_t)v22 * (__int128)120) >> 64 != (uint64_t)(120 * v22) >> 63)
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
        goto LABEL_154;
      }
      v24 = *(double *)(a2 + v17);
      v25 = *(double *)(a2 + v23);
      if (v25 < v24)
        goto LABEL_8;
      if (v24 < v25)
        break;
      if ((*(_BYTE *)(v19 + 8) & 1) != 0)
      {
        v26 = *(unsigned __int8 *)(a6 + 17);
        if (*(_BYTE *)(a6 + 17))
          v27 = a9;
        else
          v27 = 0;
        if (*(_BYTE *)(a6 + 17))
          v28 = 0;
        else
          v28 = a11;
        v29 = *(_QWORD *)(a6 + 88);
        v77 = v27;
        v80 = v28;
        if ((*(_BYTE *)(a6 + 96) & 1) != 0)
        {
          if ((v85 & 0x8000000000000000) != 0)
            goto LABEL_138;
          if (v85 >= *(_QWORD *)(v29 + 16))
            goto LABEL_140;
          v30 = v29 + 12 * v85;
        }
        else
        {
          if ((v85 & 0x8000000000000000) != 0)
            goto LABEL_139;
          if (v85 >= *(_QWORD *)(v29 + 16))
            goto LABEL_142;
          v30 = v29 + 8 * v85;
        }
        if (*(_DWORD *)(v30 + 32) == v86)
        {
          InputValue = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            InputValue = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          InputValue = (__int128 *)AGGraphGetInputValue();
        }
        v39 = *(_QWORD *)InputValue;
        v40 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v40 != -1)
          swift_once();
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1)
            swift_once();
          if (!_MovableLockIsOwner(static Update._lock))
            goto LABEL_158;
        }
        v90 = v77;
        v91 = v26 & a10;
        v92 = v80;
        v93 = (v26 ^ 1) & a12;
        v31 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v39 + 128))(&v90, v26);
        result = (unint64_t **)swift_release();
        *(double *)v19 = v31;
        *(_BYTE *)(v19 + 8) = 0;
        v17 = v88;
        v14 = v89;
        if ((*(_BYTE *)(v19 + 24) & 1) == 0)
        {
LABEL_54:
          v41 = *(double *)(v19 + 16);
          goto LABEL_63;
        }
      }
      else
      {
        v31 = *(double *)v19;
        if ((*(_BYTE *)(v19 + 24) & 1) == 0)
          goto LABEL_54;
      }
      v32 = *(unsigned __int8 *)(a6 + 17);
      v33 = *(_BYTE *)(a6 + 17) ? a9 : 0x7FF0000000000000;
      v34 = *(_BYTE *)(a6 + 17) ? 0x7FF0000000000000 : a11;
      v35 = *(_QWORD *)(a6 + 88);
      if ((*(_BYTE *)(a6 + 96) & 1) != 0)
      {
        if ((v85 & 0x8000000000000000) != 0)
          goto LABEL_141;
        if (v85 >= *(_QWORD *)(v35 + 16))
          goto LABEL_147;
        v36 = v35 + 12 * v85;
      }
      else
      {
        if ((v85 & 0x8000000000000000) != 0)
          goto LABEL_143;
        if (v85 >= *(_QWORD *)(v35 + 16))
          goto LABEL_144;
        v36 = v35 + 8 * v85;
      }
      v81 = v33;
      if (*(_DWORD *)(v36 + 32) == v86)
      {
        v38 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v38 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v38 = (__int128 *)AGGraphGetInputValue();
      }
      v42 = *(_QWORD *)v38;
      v43 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v43 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_158;
      }
      v90 = v81;
      v91 = v32 & a10;
      v92 = v34;
      v93 = (v32 ^ 1) & a12;
      v41 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v42 + 128))(&v90, v32);
      result = (unint64_t **)swift_release();
      v19 = v76;
      *(double *)(v76 + 16) = v41;
      *(_BYTE *)(v76 + 24) = 0;
      v17 = v88;
      v14 = v89;
LABEL_63:
      v44 = a4 + v23;
      if ((*(_BYTE *)(v44 + 8) & 1) != 0)
      {
        v45 = *(unsigned __int8 *)(a6 + 17);
        if (*(_BYTE *)(a6 + 17))
          v46 = a9;
        else
          v46 = 0;
        if (*(_BYTE *)(a6 + 17))
          v47 = 0;
        else
          v47 = a11;
        v48 = *(_QWORD *)(a6 + 88);
        if ((*(_BYTE *)(a6 + 96) & 1) != 0)
        {
          if ((v21 & 0x8000000000000000) != 0)
            goto LABEL_145;
          if (v21 >= *(_QWORD *)(v48 + 16))
            goto LABEL_148;
          v49 = v48 + 12 * v21;
        }
        else
        {
          if ((v21 & 0x8000000000000000) != 0)
            goto LABEL_146;
          if (v21 >= *(_QWORD *)(v48 + 16))
            goto LABEL_150;
          v49 = v48 + 8 * v21;
        }
        v78 = v46;
        v82 = v47;
        if (*(_DWORD *)(v49 + 32) == v86)
        {
          v56 = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            v56 = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          v56 = (__int128 *)AGGraphGetInputValue();
        }
        v58 = *(_QWORD *)v56;
        v59 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v59 != -1)
          swift_once();
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1)
            swift_once();
          if (!_MovableLockIsOwner(static Update._lock))
            goto LABEL_158;
        }
        v90 = v78;
        v91 = v45 & a10;
        v92 = v82;
        v93 = (v45 ^ 1) & a12;
        v50 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v58 + 128))(&v90, v45);
        result = (unint64_t **)swift_release();
        *(double *)v44 = v50;
        *(_BYTE *)(v44 + 8) = 0;
        v17 = v88;
        v14 = v89;
        if ((*(_BYTE *)(v44 + 24) & 1) == 0)
        {
LABEL_105:
          v60 = *(double *)(v44 + 16);
          goto LABEL_114;
        }
      }
      else
      {
        v50 = *(double *)v44;
        if ((*(_BYTE *)(v44 + 24) & 1) == 0)
          goto LABEL_105;
      }
      v51 = *(unsigned __int8 *)(a6 + 17);
      v52 = *(_BYTE *)(a6 + 17) ? a9 : 0x7FF0000000000000;
      v53 = *(_BYTE *)(a6 + 17) ? 0x7FF0000000000000 : a11;
      v54 = *(_QWORD *)(a6 + 88);
      if ((*(_BYTE *)(a6 + 96) & 1) != 0)
      {
        if ((v21 & 0x8000000000000000) != 0)
          goto LABEL_149;
        if (v21 >= *(_QWORD *)(v54 + 16))
          goto LABEL_153;
        v55 = v54 + 12 * v21;
      }
      else
      {
        if ((v21 & 0x8000000000000000) != 0)
          goto LABEL_151;
        if (v21 >= *(_QWORD *)(v54 + 16))
          goto LABEL_152;
        v55 = v54 + 8 * v21;
      }
      v79 = v52;
      v83 = v53;
      if (*(_DWORD *)(v55 + 32) == v86)
      {
        v57 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v57 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v57 = (__int128 *)AGGraphGetInputValue();
      }
      v61 = *(_QWORD *)v57;
      v62 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v62 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_158;
      }
      v90 = v79;
      v91 = v51 & a10;
      v92 = v83;
      v93 = (v51 ^ 1) & a12;
      v60 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v61 + 128))(&v90, v51);
      result = (unint64_t **)swift_release();
      *(double *)(v44 + 16) = v60;
      *(_BYTE *)(v44 + 24) = 0;
      v17 = v88;
      v14 = v89;
LABEL_114:
      v63 = v41 - v31;
      if (v41 - v31 == INFINITY)
        v64 = -v31;
      else
        v64 = 0.0;
      v65 = v60 - v50;
      if (v60 - v50 == INFINITY)
        v66 = -v50;
      else
        v66 = 0.0;
      v67 = v64 < v66;
      if (v63 != v65)
        v67 = v63 < v65;
      if (!v67)
      {
        v68 = v65 >= v63;
        if (v63 == v65)
          v68 = v66 >= v64;
        if (!v68 || (uint64_t)v85 >= (uint64_t)v21)
          break;
      }
LABEL_8:
      v15[15] = v21;
      ++v18;
      v15 = v20;
      if (v14 == v18)
      {
        v70 = 0;
        v71 = v73;
        v72 = v75;
        goto LABEL_133;
      }
    }
    v71 = v73;
    v72 = v75;
    if (!v18)
      goto LABEL_134;
    v70 = v14 - v18;
LABEL_133:
    v74[15 * v70] = v85;
LABEL_134:
    if ((unint64_t *)v14 == v71)
      goto LABEL_156;
    ++v14;
    v15 = v72 + 15;
  }
  while ((unint64_t *)v14 != v71);
  return result;
}

uint64_t BidirectionalCollection<>.insertionSort(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, double);
  char v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t result;
  char *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD);
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, uint64_t, uint64_t);
  void (*v56)(_BYTE *, _QWORD);
  char *v57;
  uint64_t v58;
  void (*v59)(char *);
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  char v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t (*v94)(char *, char *);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(char *);
  void (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  void (*v110)(char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v112;
  char *v113;
  _BYTE v114[40];
  uint64_t v115;

  v92 = a5;
  v95 = a2;
  v94 = a1;
  v96 = a4;
  v7 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v103 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v91 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v93 = (char *)&v87 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v105 = (char *)&v87 - v12;
  v102 = swift_getAssociatedTypeWitness();
  v109 = *(_QWORD **)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v99 = (char *)&v87 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v107 = (char *)&v87 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v88 = (char *)&v87 - v20;
  v21 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v106 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v87 - v26;
  v28 = v5;
  v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16);
  v29((char *)&v87 - v26, v5, a3, v25);
  v112 = v7;
  v30 = dispatch thunk of Collection.isEmpty.getter();
  v31 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  result = v31(v27, a3);
  if ((v30 & 1) == 0)
  {
    v113 = v14;
    v115 = v28;
    ((void (*)(char *, uint64_t, uint64_t))v29)(v27, v28, a3);
    v33 = v106;
    ((void (*)(char *, uint64_t, uint64_t))v29)(v106, v28, a3);
    v34 = v107;
    dispatch thunk of Collection.startIndex.getter();
    v31(v33, a3);
    dispatch thunk of Collection.index(after:)();
    v35 = v109;
    v36 = v102;
    v104 = (void (*)(char *, uint64_t))v109[1];
    v104(v34, v102);
    v37 = a3;
    v31(v27, a3);
    v38 = (_QWORD *)v35[2];
    v39 = (void (*)(char *, uint64_t, uint64_t))v29;
    v110 = (void (*)(char *, uint64_t))v31;
    v40 = v34;
    v41 = v88;
    v98 = v37;
    v89 = v27;
    v101 = (void (*)(char *, uint64_t, uint64_t))v29;
    v109 = v38;
    ((void (*)(char *, char *, uint64_t))v38)(v34, v88, v36);
    while (1)
    {
      v39(v27, v115, v37);
      v44 = v37;
      v45 = v99;
      dispatch thunk of Collection.endIndex.getter();
      v110(v27, v37);
      v97 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v47 = v45;
      v48 = v104;
      v104(v47, v36);
      v49 = v40;
      v48(v40, v36);
      if ((v46 & 1) != 0)
        return ((uint64_t (*)(char *, uint64_t))v104)(v41, v36);
      v50 = v115;
      v51 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v100 = *(void (**)(char *))(v103 + 16);
      v100(v105);
      v51(v114, 0);
      ((void (*)(char *, char *, uint64_t))v38)(v113, v41, v36);
      v52 = v50;
      v53 = v27;
      v54 = v104;
      v55 = v101;
      while (1)
      {
        v55(v53, v52, v44);
        dispatch thunk of BidirectionalCollection.index(before:)();
        v110(v53, v44);
        v56 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v57 = v93;
        v58 = AssociatedTypeWitness;
        v59 = v100;
        v100(v93);
        v56(v114, 0);
        v60 = v49;
        v61 = v49;
        v62 = v54;
        v54(v61, v36);
        v63 = v57;
        v64 = v108;
        v65 = v94(v105, v57);
        v66 = (void (*)(char *, char *, uint64_t))v59;
        if (v64)
        {
          v83 = v60;
          v84 = v102;
          ((void (*)(char *, char *, uint64_t))v109)(v83, v113, v102);
          v85 = v105;
          ((void (*)(char *, char *, uint64_t))v59)(v91, v105, v58);
          dispatch thunk of MutableCollection.subscript.setter();
          swift_willThrow();
          v86 = *(void (**)(char *, uint64_t))(v103 + 8);
          v86(v63, v58);
          v62(v113, v84);
          v86(v85, v58);
          return ((uint64_t (*)(char *, uint64_t))v62)(v88, v84);
        }
        v108 = 0;
        if ((v65 & 1) == 0)
          break;
        v67 = v102;
        ((void (*)(char *, char *, uint64_t))v109)(v60, v113, v102);
        v66(v91, v57, v58);
        v68 = v115;
        v69 = v98;
        dispatch thunk of MutableCollection.subscript.setter();
        v70 = v89;
        v71 = v101;
        v101(v89, v68, v69);
        v72 = v113;
        dispatch thunk of BidirectionalCollection.formIndex(before:)();
        v73 = v110;
        v110(v70, v69);
        v90 = *(void (**)(char *, uint64_t))(v103 + 8);
        v90(v57, AssociatedTypeWitness);
        ((void (*)(char *, char *, uint64_t))v109)(v107, v72, v67);
        v71(v70, v115, v69);
        v74 = v99;
        v75 = v104;
        v55 = v71;
        v44 = v69;
        v76 = v107;
        dispatch thunk of Collection.startIndex.getter();
        v73(v70, v44);
        v49 = v76;
        v77 = v113;
        LODWORD(v106) = dispatch thunk of static Equatable.== infix(_:_:)();
        v53 = v70;
        v75(v74, v67);
        v54 = v75;
        v75(v49, v67);
        v36 = v67;
        v52 = v115;
        if ((v106 & 1) != 0)
        {
          v78 = v54;
          v79 = v77;
          v27 = v53;
          goto LABEL_11;
        }
      }
      v90 = *(void (**)(char *, uint64_t))(v103 + 8);
      v90(v57, v58);
      v79 = v113;
      v78 = v62;
      v49 = v60;
      v27 = v89;
LABEL_11:
      v41 = v88;
      v36 = v102;
      ((void (*)(char *))v109)(v49);
      v80 = dispatch thunk of static Equatable.== infix(_:_:)();
      v78(v49, v36);
      v81 = v110;
      v82 = v115;
      if ((v80 & 1) == 0)
      {
        ((void (*)(char *, char *, uint64_t))v109)(v107, v79, v36);
        ((void (*)(char *, char *, uint64_t))v100)(v91, v105, AssociatedTypeWitness);
        dispatch thunk of MutableCollection.subscript.setter();
      }
      v42 = v82;
      v43 = v98;
      v39 = v101;
      v101(v27, v42, v98);
      dispatch thunk of Collection.formIndex(after:)();
      v37 = v43;
      v81(v27, v43);
      v104(v79, v36);
      v90(v105, AssociatedTypeWitness);
      v38 = v109;
      v40 = v107;
      ((void (*)(char *, char *, uint64_t))v109)(v107, v41, v36);
    }
  }
  return result;
}

uint64_t specialized BidirectionalCollection<>.insertionSort(by:)(uint64_t result, uint64_t (*a2)(uint64_t, _QWORD), unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v15;

  v15 = (_QWORD *)result;
  v6 = *(char **)result;
  v7 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v7 >= 2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 1;
LABEL_3:
    if (v11 >= v7)
    {
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
      v6 = (char *)result;
    }
    else
    {
      v4 = 0;
      v13 = v11;
      v5 = *(unsigned int *)&v6[4 * v11 + 32];
      while (1)
      {
        if (v10 + v4 >= *((_QWORD *)v6 + 2))
        {
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        v12 = *(_DWORD *)&v6[4 * v4 + 32 + v9];
        result = a2(v5, v12);
        if (v3)
          break;
        if ((result & 1) == 0)
        {
          if (v4)
          {
            v4 += v10 + 1;
LABEL_15:
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
              v6 = (char *)result;
            }
            if (v4 >= *((_QWORD *)v6 + 2))
              goto LABEL_27;
            *(_DWORD *)&v6[4 * v4 + 32] = v5;
            *v15 = v6;
          }
          v11 = v13 + 1;
          v7 = *((_QWORD *)v6 + 2);
          ++v10;
          v9 += 4;
          if (v13 + 1 != v7)
            goto LABEL_3;
          return result;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
        if (v10 + v4 + 1 >= *((_QWORD *)v6 + 2))
          goto LABEL_25;
        *(_DWORD *)&v6[4 * v4 + 36 + v9] = v12;
        *v15 = v6;
        --v4;
        if (v10 + v4 == -1)
        {
          v4 = 0;
          goto LABEL_15;
        }
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      a3 = v10 + v4 + 1;
      if ((result & 1) == 0)
        goto LABEL_28;
    }
    if (a3 >= *((_QWORD *)v6 + 2))
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)&v6[4 * v4 + 36 + v9] = v5;
      *v15 = v6;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t specialized BidirectionalCollection<>.insertionSort(by:)(uint64_t result, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t *v42;
  unsigned int v44;
  uint64_t v45;

  v3 = v2;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(result + 24);
  if (v4 != v5 >> 1)
  {
    v6 = v4 + 1;
    if (!__OFADD__(v4, 1))
    {
      if (v6 == v5 >> 1)
        return result;
      v7 = (uint64_t *)result;
      v42 = (uint64_t *)result;
      while (v6 >= v4 && v6 < (uint64_t)(v5 >> 1))
      {
        v8 = v7[1];
        v44 = *(_DWORD *)(v8 + 4 * v6);
        v41 = v6;
        while (1)
        {
          v9 = v6 - 1;
          if (__OFSUB__(v6, 1))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          if (v9 < v4)
            goto LABEL_43;
          v10 = v5 >> 1;
          if (v9 >= (uint64_t)(v5 >> 1))
            goto LABEL_43;
          v45 = v6;
          v11 = v4;
          v12 = v8;
          v13 = *(_DWORD *)(v8 + 4 * v9);
          v14 = v3;
          result = a2(v44, v13);
          if (v3)
          {
            v34 = *v7;
            if ((v5 & 1) != 0 && (result = swift_isUniquelyReferenced_nonNull(), *v7 = v34, (result & 1) != 0))
            {
              v35 = v12;
            }
            else
            {
              v36 = specialized _ArrayBufferProtocol.init(copying:)(v12, v11, v5);
              v35 = v37;
              v11 = v38;
              v40 = v39;
              result = swift_unknownObjectRelease();
              v42[1] = v35;
              v42[2] = v11;
              v10 = v40 >> 1;
              v34 = v36;
              v42[3] = v40;
              v7 = v42;
            }
            if (v45 >= v11 && v45 < v10)
            {
              *(_DWORD *)(v35 + 4 * v45) = v44;
              *v7 = v34;
              return swift_willThrow();
            }
            goto LABEL_49;
          }
          if ((result & 1) == 0)
            break;
          v15 = *v7;
          if ((v5 & 1) != 0 && (result = swift_isUniquelyReferenced_nonNull(), *v7 = v15, (result & 1) != 0))
          {
            v8 = v12;
            v4 = v11;
          }
          else
          {
            v16 = specialized _ArrayBufferProtocol.init(copying:)(v12, v11, v5);
            v18 = v17;
            v20 = v19;
            v5 = v21;
            result = swift_unknownObjectRelease();
            v4 = v20;
            v8 = v18;
            v7[1] = v18;
            v7[2] = v20;
            v10 = v5 >> 1;
            v15 = v16;
            v7[3] = v5;
          }
          if (v45 < v4 || v45 >= v10)
            goto LABEL_44;
          *(_DWORD *)(v8 + 4 * v45) = v13;
          v7 = v42;
          *v42 = v15;
          v6 = v9;
          v22 = v9;
          v3 = v14;
          if (v9 == v4)
            goto LABEL_23;
        }
        v9 = v45;
        v22 = v11;
        v8 = v12;
LABEL_23:
        v23 = v41;
        if (v9 == v41)
        {
          v4 = v22;
        }
        else
        {
          v24 = v7;
          v25 = *v7;
          if ((v5 & 1) != 0
            && (v26 = v8, result = swift_isUniquelyReferenced_nonNull(), v8 = v26, *v24 = v25, (result & 1) != 0))
          {
            v4 = v22;
          }
          else
          {
            v27 = v3;
            v28 = specialized _ArrayBufferProtocol.init(copying:)(v8, v22, v5);
            v30 = v29;
            v32 = v31;
            v5 = v33;
            result = swift_unknownObjectRelease();
            v4 = v32;
            v8 = v30;
            v24[1] = v30;
            v24[2] = v32;
            v25 = v28;
            v3 = v27;
            v24[3] = v5;
          }
          v23 = v41;
          if (v9 < v4 || v9 >= (uint64_t)(v5 >> 1))
            goto LABEL_48;
          *(_DWORD *)(v8 + 4 * v9) = v44;
          *v42 = v25;
          v7 = v42;
        }
        if (__OFADD__(v23, 1))
          goto LABEL_47;
        v6 = v23 + 1;
        if (v6 == v5 >> 1)
          return result;
      }
LABEL_45:
      __break(1u);
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
  }
  return result;
}

void Gesture.exclusively<A>(before:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for ExclusiveGesture();
}

uint64_t sub_234B57304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void ExclusiveGesture.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for ExclusiveGesture();
}

uint64_t sub_234B57394(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for ExclusiveGesture()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t ExclusiveGesture.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ExclusiveGesture.first.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ExclusiveGesture.first.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ExclusiveGesture.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t ExclusiveGesture.second.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*ExclusiveGesture.second.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static ExclusiveGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for ExclusiveGesture();
}

void sub_234B57514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  _QWORD v80[4];

  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 144) = type metadata accessor for _GraphValue(0, a1, a3, a4);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:), v11, (_DWORD *)(v9 + 528));
  v13 = *(_OWORD *)(v9 + 864);
  *(_OWORD *)(v9 + 720) = *(_OWORD *)(v9 + 848);
  *(_OWORD *)(v9 + 736) = v13;
  *(_OWORD *)(v9 + 752) = *(_OWORD *)(v9 + 880);
  *(_OWORD *)(v12 + 108) = *(_OWORD *)(v12 + 236);
  v14 = *(_OWORD *)(v9 + 800);
  *(_OWORD *)(v9 + 656) = *(_OWORD *)(v9 + 784);
  *(_OWORD *)(v9 + 672) = v14;
  v15 = *(_OWORD *)(v9 + 832);
  *(_OWORD *)(v9 + 688) = *(_OWORD *)(v9 + 816);
  *(_OWORD *)(v9 + 704) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32))(v9 + 528, v9 + 656, v11, v10);
  v17 = *(_DWORD *)(v9 + 904);
  v18 = v17;
  if ((v17 & 8) != 0)
  {
    v19 = swift_conformsToProtocol2() ? v11 : 0;
    v18 = v17;
    if (!v19)
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol())
        v20 = 2;
      else
        v20 = 1;
      *(_BYTE *)(v9 + 528) = v20;
      v21 = *(_OWORD *)(v9 + 864);
      *(_OWORD *)(v9 + 720) = *(_OWORD *)(v9 + 848);
      *(_OWORD *)(v9 + 736) = v21;
      *(_OWORD *)(v9 + 752) = *(_OWORD *)(v9 + 880);
      *(_OWORD *)(v12 + 108) = *(_OWORD *)(v12 + 236);
      v22 = *(_OWORD *)(v9 + 800);
      *(_OWORD *)(v9 + 656) = *(_OWORD *)(v9 + 784);
      *(_OWORD *)(v9 + 672) = v22;
      v23 = *(_OWORD *)(v9 + 832);
      *(_OWORD *)(v9 + 688) = *(_OWORD *)(v9 + 816);
      *(_OWORD *)(v9 + 704) = v23;
      v24 = *(_QWORD *)(v9 + 280);
      v25 = *(_DWORD *)(v9 + 288);
      *(_QWORD *)(v9 + 400) = *(_QWORD *)(v9 + 272);
      *(_QWORD *)(v9 + 408) = v24;
      *(_DWORD *)(v9 + 416) = v25;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v29 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v27, v28);
      v30 = _GestureOutputs.debugData.getter();
      *(_BYTE *)(v9 + 400) = 1;
      *(_BYTE *)(v9 + 400) = 1;
      _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v11, (char *)(v9 + 528), 0x100000000, (_OWORD *)(v9 + 656), v30 | ((HIDWORD(v30) & 1) << 32), 0x100000000, v29);
      v18 = *(_DWORD *)(v9 + 904);
    }
  }
  *(_DWORD *)(v9 + 196) = v17;
  *(_DWORD *)(v9 + 140) = v18;
  *(_QWORD *)&v16 = *(_QWORD *)(v9 + 272);
  *(_OWORD *)(v9 + 208) = v16;
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(v9 + 280);
  *(_DWORD *)(v9 + 124) = *(_DWORD *)(v9 + 288);
  v31 = *(_QWORD *)(v9 + 784);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v9 + 792);
  *(_QWORD *)(v9 + 184) = v10;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v9 + 800);
  *(_QWORD *)(v9 + 40) = v31;
  v32 = *(_QWORD *)(v9 + 824);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v9 + 832);
  *(_DWORD *)(v9 + 92) = *(_DWORD *)(v9 + 864);
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(v9 + 872);
  v33 = *(_QWORD *)(v9 + 880);
  *(_DWORD *)(v9 + 116) = *(_DWORD *)(v9 + 896);
  v34 = swift_getAssociatedTypeWitness();
  *(_DWORD *)(v9 + 120) = *(_OWORD *)(v9 + 208);
  *(_QWORD *)(v9 + 8) = v34;
  v37 = type metadata accessor for ExclusiveState(0, v34, v35, v36);
  *(_QWORD *)(v9 + 160) = &a9;
  v38 = *(_DWORD *)(v9 + 900);
  *(_DWORD *)(v9 + 640) = *(_DWORD *)(v9 + 896);
  *(_DWORD *)(v9 + 656) = v38;
  v39 = *(_QWORD *)(v9 + 808);
  v40 = *(_QWORD *)(v9 + 816);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v12 + 184);
  v41 = *(_QWORD *)(v9 + 856);
  v42 = *(_QWORD *)(v9 + 888);
  v43 = *(_OWORD *)(v9 + 864);
  v44 = *(_OWORD *)(v9 + 880);
  *(_OWORD *)(v9 + 592) = *(_OWORD *)(v9 + 848);
  *(_OWORD *)(v9 + 608) = v43;
  *(_OWORD *)(v9 + 624) = v44;
  v45 = *(_OWORD *)(v9 + 800);
  *(_OWORD *)(v9 + 528) = *(_OWORD *)(v9 + 784);
  *(_OWORD *)(v9 + 544) = v45;
  v46 = *(_OWORD *)(v9 + 832);
  *(_OWORD *)(v9 + 560) = *(_OWORD *)(v9 + 816);
  *(_OWORD *)(v9 + 576) = v46;
  *(_DWORD *)(v9 + 660) = *(_OWORD *)(v9 + 208);
  v47 = MEMORY[0x24BDAC7A8](v37);
  v80[2] = v48;
  v80[3] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExclusiveState<A>, v37, v47);
  outlined retain of _GestureInputs(v9 + 784);
  type metadata accessor for Attribute<_GestureInputs.InheritedPhase>();
  v50 = v49;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51 = *(id *)(v9 + 104);
  swift_bridgeObjectRetain();
  v53 = _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9 + 656, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v80, v37, MEMORY[0x24BEE4078], v50, MEMORY[0x24BEE40A8], v52);
  *(_QWORD *)(v9 + 96) = v80;
  *(_QWORD *)(v9 + 104) = 0;
  v54 = *(_DWORD *)(v9 + 400);
  MEMORY[0x24BDAC7A8](v53);
  *(_QWORD *)(v9 + 160) = v11;
  v55 = *(_QWORD *)(v9 + 80);
  v80[-4] = v11;
  v80[-3] = v55;
  v56 = *(_QWORD *)(v9 + 200);
  v80[-2] = *(_QWORD *)(v9 + 184);
  v80[-1] = v56;
  *(_DWORD *)(v9 + 656) = *(_DWORD *)(v9 + 168);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:), v55, (_DWORD *)(v9 + 240));
  v57 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 656) = *(_QWORD *)(v9 + 40);
  *(_DWORD *)(v9 + 664) = *(_DWORD *)(v9 + 76);
  *(_QWORD *)(v9 + 672) = v57;
  *(_QWORD *)(v9 + 680) = v39;
  *(_QWORD *)(v9 + 688) = v40;
  *(_QWORD *)(v9 + 696) = v32;
  *(_QWORD *)(v9 + 704) = *(_QWORD *)(v9 + 24);
  *(_OWORD *)(v9 + 712) = *(_OWORD *)(v9 + 48);
  *(_QWORD *)(v9 + 728) = v41;
  *(_DWORD *)(v9 + 736) = *(_DWORD *)(v9 + 92);
  *(_QWORD *)(v9 + 744) = v51;
  *(_QWORD *)(v9 + 752) = v33;
  *(_QWORD *)(v9 + 760) = v42;
  *(_DWORD *)(v9 + 768) = *(_DWORD *)(v9 + 116);
  *(_DWORD *)(v9 + 116) = v54;
  *(_DWORD *)(v9 + 772) = v54;
  v58 = *(_DWORD *)(v9 + 196);
  *(_DWORD *)(v9 + 776) = v58;
  outlined retain of _GestureInputs(v9 + 656);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v59 = v56;
  *(_QWORD *)(v9 + 168) = v33;
  swift_bridgeObjectRelease();
  v60 = *(_OWORD *)(v9 + 736);
  *(_OWORD *)(v9 + 464) = *(_OWORD *)(v9 + 720);
  *(_OWORD *)(v9 + 480) = v60;
  *(_OWORD *)(v9 + 496) = *(_OWORD *)(v9 + 752);
  *(_OWORD *)(v9 + 508) = *(_OWORD *)(v9 + 764);
  v61 = *(_OWORD *)(v9 + 672);
  *(_OWORD *)(v9 + 400) = *(_OWORD *)(v9 + 656);
  *(_OWORD *)(v9 + 416) = v61;
  v62 = *(_OWORD *)(v9 + 704);
  *(_OWORD *)(v9 + 432) = *(_OWORD *)(v9 + 688);
  *(_OWORD *)(v9 + 448) = v62;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 32))(v9 + 240, v9 + 400, v55, v56);
  if ((v58 & 8) != 0 && !(swift_conformsToProtocol2() ? v55 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v64 = 2;
    else
      v64 = 1;
    *(_BYTE *)(v9 + 239) = v64;
    v65 = *(_OWORD *)(v9 + 736);
    *(_OWORD *)(v9 + 464) = *(_OWORD *)(v9 + 720);
    *(_OWORD *)(v9 + 480) = v65;
    *(_OWORD *)(v9 + 496) = *(_OWORD *)(v9 + 752);
    *(_OWORD *)(v9 + 508) = *(_OWORD *)(v9 + 764);
    v66 = *(_OWORD *)(v9 + 672);
    *(_OWORD *)(v9 + 400) = *(_OWORD *)(v9 + 656);
    *(_OWORD *)(v9 + 416) = v66;
    v67 = *(_OWORD *)(v9 + 704);
    *(_OWORD *)(v9 + 432) = *(_OWORD *)(v9 + 688);
    *(_OWORD *)(v9 + 448) = v67;
    v68 = *(_QWORD *)(v9 + 304);
    v69 = *(_DWORD *)(v9 + 312);
    *(_QWORD *)(v9 + 240) = *(_QWORD *)(v9 + 296);
    *(_QWORD *)(v9 + 248) = v68;
    *(_DWORD *)(v9 + 256) = v69;
    v70 = swift_getAssociatedTypeWitness();
    v73 = type metadata accessor for _GestureOutputs(0, v70, v71, v72);
    v74 = _GestureOutputs.debugData.getter();
    *(_BYTE *)(v9 + 240) = 1;
    *(_BYTE *)(v9 + 240) = 1;
    v75 = v73;
    v59 = *(_QWORD *)(v9 + 200);
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v55, (char *)(v9 + 239), 0x100000000, (_OWORD *)(v9 + 400), v74 | ((HIDWORD(v74) & 1) << 32), 0x100000000, v75);
  }
  v76 = outlined release of _GestureInputs(v9 + 656);
  v77 = *(_QWORD *)(v9 + 184);
  v78 = *(_QWORD *)(v9 + 160);
  *(_QWORD *)&v79 = *(_QWORD *)(v9 + 296);
  *(_DWORD *)(v9 + 160) = *(_DWORD *)(v9 + 312);
  *(_QWORD *)(v9 + 96) = v80;
  *(_OWORD *)(v9 + 144) = v79;
  *(int32x2_t *)(v9 + 296) = vzip1_s32(*(int32x2_t *)(v9 + 208), *(int32x2_t *)&v79);
  MEMORY[0x24BDAC7A8](v76);
  *(_QWORD *)(v9 + 400) = v78;
  *(_QWORD *)(v9 + 408) = v55;
  *(_QWORD *)(v9 + 416) = v77;
  *(_QWORD *)(v9 + 424) = v59;
  type metadata accessor for ExclusiveGesture.Value();
}

void sub_234B57B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 - 32) = type metadata accessor for GesturePhase(0, a1, a3, a4);
  v4[50] = v8;
  v4[51] = v7;
  v4[52] = v6;
  v4[53] = v5;
  type metadata accessor for ExclusivePhase();
}

uint64_t sub_234B57B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t result;

  *(_QWORD *)(v8 - 24) = a1;
  *(_QWORD *)(v8 - 16) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExclusivePhase<A, B>, a1);
  v10 = v3;
  v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 296, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), v2, a1, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  v13 = *(unsigned int *)(v1 + 400);
  *(_QWORD *)(v1 + 104) = v4;
  _GestureOutputs.init(phase:)(v13, v1 + 240);
  v14 = *(_QWORD *)(v1 + 176);
  v15 = *(_QWORD *)(v1 + 128);
  v16 = *(_DWORD *)(v1 + 124);
  if ((*(_DWORD *)(v1 + 196) & 8) != 0)
  {
    *(_BYTE *)(v1 + 239) = 4;
    v17 = *(_OWORD *)(v1 + 864);
    *(_OWORD *)(v1 + 464) = *(_OWORD *)(v1 + 848);
    *(_OWORD *)(v1 + 480) = v17;
    *(_OWORD *)(v1 + 496) = *(_OWORD *)(v1 + 880);
    *(_OWORD *)(v1 + 508) = *(_OWORD *)(v1 + 892);
    v18 = *(_OWORD *)(v1 + 800);
    *(_OWORD *)(v1 + 400) = *(_OWORD *)(v1 + 784);
    *(_OWORD *)(v1 + 416) = v18;
    v19 = *(_OWORD *)(v1 + 832);
    *(_OWORD *)(v1 + 432) = *(_OWORD *)(v1 + 816);
    *(_OWORD *)(v1 + 448) = v19;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v1 + 296) = *(_QWORD *)(v1 + 208);
    *(_QWORD *)(v1 + 304) = v15;
    *(_DWORD *)(v1 + 312) = v16;
    type metadata accessor for _GestureOutputs(0, *(_QWORD *)(v1 + 8), v20, v21);
    v22 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v1 + 296) = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v1 + 304) = v10;
    *(_DWORD *)(v1 + 312) = *(_DWORD *)(v1 + 160);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v24, v25);
    v26 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    v29 = type metadata accessor for _GestureOutputs(0, *(_QWORD *)(v1 + 104), v27, v28);
    *(_BYTE *)(v1 + 296) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(*(_QWORD *)(v1 + 16), (char *)(v1 + 239), 0x100000000, (_OWORD *)(v1 + 400), v22 | ((HIDWORD(v22) & 1) << 32), v26 | ((HIDWORD(v26) & 1) << 32), v29);
  }
  *(_DWORD *)(v1 + 296) = *(_DWORD *)(v1 + 120);
  *(_DWORD *)(v1 + 300) = *(_OWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 304) = v15;
  *(_DWORD *)(v1 + 312) = v16;
  *(_QWORD *)(v1 + 320) = v10;
  *(_DWORD *)(v1 + 328) = *(_DWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 336) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v1 + 344) = 0;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 168) + 16))
  {
    swift_bridgeObjectRetain();
    v30 = v5;
    v31 = *(_QWORD *)(v1 + 200);
    *(_QWORD *)(v1 + 400) = v7;
    *(_QWORD *)(v1 + 408) = v6;
    *(_QWORD *)(v1 + 416) = v30;
    *(_QWORD *)(v1 + 424) = v31;
    type metadata accessor for ExclusivePreferenceCombinerVisitor();
  }
  v32 = *(_OWORD *)(v1 + 608);
  *(_OWORD *)(v1 + 464) = *(_OWORD *)(v1 + 592);
  *(_OWORD *)(v1 + 480) = v32;
  *(_OWORD *)(v1 + 496) = *(_OWORD *)(v1 + 624);
  v33 = *(_DWORD *)(v1 + 640);
  v34 = *(_OWORD *)(v1 + 544);
  *(_OWORD *)(v1 + 400) = *(_OWORD *)(v1 + 528);
  *(_OWORD *)(v1 + 416) = v34;
  v35 = *(_OWORD *)(v1 + 576);
  *(_OWORD *)(v1 + 432) = *(_OWORD *)(v1 + 560);
  *(_OWORD *)(v1 + 448) = v35;
  *(_DWORD *)(v1 + 512) = v33;
  *(_DWORD *)(v1 + 516) = *(_DWORD *)(v1 + 116);
  *(_DWORD *)(v1 + 520) = *(_DWORD *)(v1 + 140);
  outlined release of _GestureInputs(v1 + 400);
  v36 = *(_QWORD *)(v1 + 336);
  v37 = *(_DWORD *)(v1 + 344);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v14 = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v14 + 8) = v36;
  *(_DWORD *)(v14 + 16) = v37;
  return result;
}

void closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for ExclusiveGesture();
}

uint64_t sub_234B57E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v8;
}

void closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for ExclusiveGesture();
}

uint64_t sub_234B57F04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 52);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, v1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v9;
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance ExclusiveGesture<A, B>()
{
  static ExclusiveGesture._makeGesture(gesture:inputs:)();
}

void static ExclusiveGesture.Value<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[14];

  v16[3] = a7;
  v16[4] = a8;
  v16[8] = a1;
  v16[9] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[6] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16[7] = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16[2] = (char *)v16 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v16[5] = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16[1] = (char *)v16 - v15;
  v16[10] = a3;
  v16[11] = a4;
  v16[12] = a5;
  v16[13] = a6;
  type metadata accessor for ExclusiveGesture.Value();
}

uint64_t sub_234B5806C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  void (*v17)(_BYTE *, _QWORD, uint64_t, double);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _BYTE v27[96];

  v3 = a1;
  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v27[-v8];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = &v27[-v13];
  v16 = &v27[*(int *)(v15 + 48) - v13];
  v17 = *(void (**)(_BYTE *, _QWORD, uint64_t, double))(v4 + 16);
  v17(&v27[-v13], *(_QWORD *)(v2 - 128), v3, v12);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v17)(v16, *(_QWORD *)(v2 - 120), v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v17)(v6, v14, v3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = *(_QWORD *)(v2 - 144);
      v18 = *(_QWORD *)(v2 - 136);
      v20 = *(_QWORD *)(v2 - 176);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v19 + 32))(v20, v16, v18);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v22(v20, v18);
      v22((uint64_t)v6, v18);
      goto LABEL_10;
    }
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v2 - 144) + 8))(v6, *(_QWORD *)(v2 - 136));
LABEL_7:
    v21 = 0;
    v4 = v11;
    v3 = TupleTypeMetadata2;
    goto LABEL_10;
  }
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v17)(v9, v14, v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v9, v1);
    goto LABEL_7;
  }
  v23 = *(_QWORD *)(v2 - 152);
  v24 = *(_QWORD *)(v2 - 184);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v23 + 32))(v24, v16, v1);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v25(v24, v1);
  v25((uint64_t)v9, v1);
LABEL_10:
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v14, v3);
  return v21 & 1;
}

uint64_t ExclusiveState.phase.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t Value;

  v5 = type metadata accessor for GesturePhase(0, a1, a2, a3);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a4, Value, v5);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> ExclusiveGesture<A, B>.Value(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static ExclusiveGesture.Value<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t ExclusiveState.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for GesturePhase(0, a1, a2, a3);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)AGGraphGetValue();
  ExclusiveState.phase.getter(a1, v11, v12, (uint64_t)v9);
  v13 = GesturePhase.isFailed.getter(v6);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  if (v13)
    v17 = v10;
  else
    v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
  ExclusiveState.phase.getter(a1, v15, v16, (uint64_t)v9);
  v18 = GesturePhase.isActive.getter(v6);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v9, v6);
  if (v18 && (v17 & 2) == 0)
    v20 = v17 | 2;
  else
    v20 = v17;
  *a4 = v20;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ExclusiveState<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return ExclusiveState.value.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

void ExclusivePhase.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD v37[6];
  uint64_t v38;
  char *v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a3;
  v48 = a4;
  v43 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for GesturePhase(255, AssociatedTypeWitness, v7, v8);
  v38 = swift_getAssociatedTypeWitness();
  v44 = v9;
  v46 = type metadata accessor for GesturePhase(255, v38, v10, v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v37[3] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)v37 - v13;
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v37[1] = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v37[2] = (char *)v37 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v37 - v20;
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v37[0] = (char *)v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v37[5] = (char *)v37 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v39 = (char *)v37 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)v37 - v30;
  v32 = a2;
  SimultaneousPhase.phase1.getter((uint64_t)v37 - v30);
  v33 = v45;
  v41 = a1;
  v42 = v32;
  SimultaneousPhase.phase2.getter((uint64_t)v21);
  v37[4] = TupleTypeMetadata2;
  v34 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  v35 = v46;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v14, v31, v44);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v34, v21, v35);
  v36 = (char *)sub_234B586B4 + 4 * byte_235286740[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_234B586B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 - 208) - 8) + 32))(*(_QWORD *)(v7 - 168), v3);
    v12 = *(_QWORD *)(v7 - 176);
    *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 184);
    *(_QWORD *)(v7 - 112) = v12;
    v13 = *(_QWORD *)(v7 - 128);
    *(_QWORD *)(v7 - 104) = v5;
    *(_QWORD *)(v7 - 96) = v13;
    type metadata accessor for ExclusiveGesture.Value();
  }
  v8 = *(_QWORD *)(v7 - 216);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v0, v1);
  v9 = *(_QWORD *)(v7 - 192);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 32))(*(_QWORD *)(v7 - 168), v8, v9);
    v25 = *(_QWORD *)(v7 - 176);
    *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 184);
    *(_QWORD *)(v7 - 112) = v25;
    v26 = *(_QWORD *)(v7 - 128);
    *(_QWORD *)(v7 - 104) = v5;
    *(_QWORD *)(v7 - 96) = v26;
    type metadata accessor for ExclusiveGesture.Value();
  }
  v11 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v15 = *(_QWORD *)(v7 - 208);
  if (!EnumCaseMultiPayload)
  {
    v16 = *(_QWORD *)(v7 - 240);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v16, v3, v2);
    v17 = v15;
    v18 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v18 + 32))(*(_QWORD *)(v7 - 168), v16, v17);
      v27 = *(_QWORD *)(v7 - 176);
      *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 184);
      *(_QWORD *)(v7 - 112) = v27;
      v28 = *(_QWORD *)(v7 - 128);
      *(_QWORD *)(v7 - 104) = v5;
      *(_QWORD *)(v7 - 96) = v28;
      type metadata accessor for ExclusiveGesture.Value();
    }
    v19 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v16, v19);
    v15 = v17;
    v9 = *(_QWORD *)(v7 - 192);
  }
  if (!swift_getEnumCaseMultiPayload())
  {
    v20 = *(_QWORD *)(v7 - 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v20, v0, v1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v20, 1, v9) == 1)
      goto LABEL_13;
    v21 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  }
  if (!swift_getEnumCaseMultiPayload())
  {
    v22 = *(_QWORD *)(v7 - 248);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v22, v3, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v22, 1, v15) == 1)
    {
LABEL_13:
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v1);
      v23 = *(_QWORD *)(v7 - 176);
      *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 184);
      *(_QWORD *)(v7 - 112) = v23;
      v24 = *(_QWORD *)(v7 - 128);
      *(_QWORD *)(v7 - 104) = v5;
      *(_QWORD *)(v7 - 96) = v24;
      type metadata accessor for ExclusiveGesture.Value();
    }
    v29 = type metadata accessor for Optional();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(*(_QWORD *)(v7 - 248), v29);
  }
  v30 = *(_QWORD *)(v7 - 176);
  *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 184);
  *(_QWORD *)(v7 - 112) = v30;
  v31 = *(_QWORD *)(v7 - 128);
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v31;
  type metadata accessor for ExclusiveGesture.Value();
}

void sub_234B58C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for GesturePhase(0, a1, a3, a4);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x234B58BF8);
}

void protocol witness for static Rule.initialValue.getter in conformance ExclusivePhase<A, B>()
{
  type metadata accessor for ExclusiveGesture.Value();
}

uint64_t sub_234B58CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for GesturePhase(0, a1, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

void protocol witness for Rule.value.getter in conformance ExclusivePhase<A, B>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  ExclusivePhase.value.getter(a1[2], a1[3], a1[4], a1[5], a2);
}

void ExclusivePreferenceCombinerVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  PreferencesOutputs.subscript.getter(a3, a3, a4, a4);
  PreferencesOutputs.subscript.getter(a3, a3, a4, v6);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ExclusivePreference();
}

void sub_234B58DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];
  unsigned int v9;

  v8[3] = a1;
  v8[4] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExclusivePreference<A, B, C>, a1);
  v4 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v8, a1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  v6 = v9;
  LOBYTE(v9) = 0;
  PreferencesOutputs.subscript.setter(v6, v2, v2, v1);
}

void protocol witness for PreferenceKeyVisitor.visit<A>(key:) in conformance ExclusivePreferenceCombinerVisitor<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ExclusivePreferenceCombinerVisitor.visit<A>(key:)(a1, a4, a2, a3);
}

uint64_t ExclusivePreference.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  int EnumCaseMultiPayload;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  double v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t TupleTypeMetadata2;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;

  v136 = a8;
  v137 = a5;
  v129 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v125 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v106 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v107 = (char *)&v106 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v110 = (char *)&v106 - v20;
  v124 = v21;
  v117 = type metadata accessor for Optional();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x24BDAC7A8](v117);
  v109 = (uint64_t)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v108 = (uint64_t)&v106 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v111 = (uint64_t)&v106 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v114 = (uint64_t)&v106 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v122 = (uint64_t)&v106 - v30;
  v121 = swift_getAssociatedTypeWitness();
  v33 = type metadata accessor for GesturePhase(255, v121, v31, v32);
  v120 = swift_getAssociatedTypeWitness();
  v36 = type metadata accessor for GesturePhase(255, v120, v34, v35);
  v131 = v33;
  v37 = v36;
  v133 = v36;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v113 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v132 = (char *)&v106 - v38;
  v135 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v119 = (char *)&v106 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v106 - v42;
  v138 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v112 = (char *)&v106 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v46);
  v118 = (char *)&v106 - v47;
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)&v106 - v49;
  SimultaneousPreference.phase1.getter((uint64_t)&v106 - v49);
  v130 = a2;
  v127 = a6;
  v128 = a3;
  v123 = a4;
  v52 = v131;
  v51 = v132;
  v126 = a7;
  v53 = v133;
  SimultaneousPreference.phase2.getter((uint64_t)v43);
  v54 = v135;
  v55 = &v51[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v51, v50, v52);
  v56 = a1;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v55, v43, v53);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 2)
    goto LABEL_14;
  v58 = v118;
  v59 = v119;
  v60 = v120;
  v61 = v121;
  v115 = v55;
  if (EnumCaseMultiPayload)
    goto LABEL_5;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v118, v51, v52);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v58, 1, v61) != 1)
  {
    v71 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v58, v71);
    v55 = v115;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
    goto LABEL_15;
  }
  if (swift_getEnumCaseMultiPayload() == 3)
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v138 + 8))(v51, v52);
    v72 = v122;
    v74 = v136;
    v73 = v137;
    SimultaneousPreference.value1.getter(v56, v122);
    v75 = v124;
    v76 = v125;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v72, 1, v124) != 1)
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 32))(v129, v72, v75);
    (*(void (**)(char *, uint64_t))(v74 + 16))(v73, v74);
    v68 = *(uint64_t (**)(uint64_t, uint64_t))(v116 + 8);
    v69 = v72;
    return v68(v69, v117);
  }
LABEL_5:
  v62 = swift_getEnumCaseMultiPayload();
  if ((v62 - 1) >= 2)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v59, v115, v53);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v59, 1, v60) != 1)
      {
        v78 = type metadata accessor for Optional();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v59, v78);
        goto LABEL_6;
      }
      v70 = swift_getEnumCaseMultiPayload();
      if (v70)
      {
        if (v70 == 3)
          goto LABEL_6;
      }
      else
      {
        v79 = v112;
        (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v112, v51, v52);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v79, 1, v61) == 1)
        {
          v80 = v111;
          v81 = v123;
          v82 = v136;
          SimultaneousPreference.value1.getter(v56, v111);
          v84 = v124;
          v83 = v125;
          v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
          if (v85(v80, 1, v124) == 1)
          {
            v86 = v52;
            v87 = v117;
            TupleTypeMetadata2 = *(_QWORD *)(v116 + 8);
            ((void (*)(uint64_t, uint64_t))TupleTypeMetadata2)(v80, v117);
            v88 = v109;
            SimultaneousPreference.value2.getter(v56, v109);
            v89 = v85(v88, 1, v84);
            v90 = v129;
            v91 = v110;
            v92 = v138;
            v93 = v115;
            if (v89 == 1)
            {
              ((void (*)(uint64_t, uint64_t))TupleTypeMetadata2)(v88, v87);
              (*(void (**)(void))(v82 + 16))();
              v94 = *(void (**)(char *, uint64_t, uint64_t))(v125 + 32);
            }
            else
            {
              v94 = *(void (**)(char *, uint64_t, uint64_t))(v125 + 32);
              v94(v110, v88, v84);
            }
            v101 = v133;
          }
          else
          {
            v96 = v81;
            v94 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 32);
            v97 = v107;
            v94(v107, v80, v84);
            v98 = v97;
            v99 = v108;
            SimultaneousPreference.value2.getter(v56, v108);
            v100 = v85(v99, 1, v84);
            v92 = v138;
            if (v100 == 1)
            {
              (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v99, v117);
            }
            else
            {
              v102 = v106;
              v103 = ((uint64_t (*)(char *, uint64_t, uint64_t))v94)(v106, v99, v84);
              v104 = MEMORY[0x24BDAC7A8](v103);
              *(&v106 - 8) = v128;
              *(&v106 - 7) = v96;
              v105 = v127;
              *(&v106 - 6) = v137;
              *(&v106 - 5) = v105;
              *(&v106 - 4) = v126;
              *(&v106 - 3) = (char *)v82;
              *(&v106 - 2) = v102;
              (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v82 + 24))(v98, partial apply for closure #1 in SimultaneousPreference.mergedValue(), v104);
              (*(void (**)(char *, uint64_t))(v83 + 8))(v102, v84);
            }
            v86 = v131;
            v101 = v133;
            v93 = v115;
            v91 = v110;
            v94(v110, (uint64_t)v98, v84);
            v90 = v129;
          }
          v94(v90, (uint64_t)v91, v84);
          (*(void (**)(char *, uint64_t))(v135 + 8))(v93, v101);
          return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v132, v86);
        }
        v95 = type metadata accessor for Optional();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v79, v95);
      }
    }
    (*(void (**)(void))(v136 + 16))();
    return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v51, TupleTypeMetadata2);
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v135 + 8))(v115, v53);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v51, v52);
  v63 = v114;
  v65 = v136;
  v64 = v137;
  SimultaneousPreference.value2.getter(v56, v114);
  v66 = v124;
  v67 = v125;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v63, 1, v124) == 1)
  {
    (*(void (**)(char *, uint64_t))(v65 + 16))(v64, v65);
    v68 = *(uint64_t (**)(uint64_t, uint64_t))(v116 + 8);
    v69 = v63;
    return v68(v69, v117);
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 32))(v129, v63, v66);
}

uint64_t protocol witness for Rule.value.getter in conformance ExclusivePreference<A, B, C>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return ExclusivePreference.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(char **)(a1 + 16), *(char **)(a1 + 24), *(char **)(a1 + 32), *(char **)(a1 + 40), *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance ExclusivePreference<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v18 - v12;
  static SimultaneousPreference.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18[-2] = a2;
  v18[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExclusivePreference<A, B, C>, a2, v16);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v18[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v17);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

void partial apply for closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:)()
{
  closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:)();
}

uint64_t type metadata accessor for ExclusiveState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExclusiveState);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for Attribute<_GestureInputs.InheritedPhase>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<_GestureInputs.InheritedPhase>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_GestureInputs.InheritedPhase>);
  }
}

void partial apply for closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:)()
{
  closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:)();
}

void type metadata accessor for ExclusiveGesture.Value()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ExclusivePhase()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ExclusivePreferenceCombinerVisitor()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t instantiation function for generic protocol witness table for ExclusiveGesture<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExclusiveGesture<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ExclusiveGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B59C7C + 4 * byte_235286744[v17 - 1]))();
}

void storeEnumTagSinglePayload for ExclusiveGesture(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for ExclusiveGesture.Value()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExclusiveGesture.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for ExclusiveGesture.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= v4)
    v7 = v4;
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 1)
  {
    v10 = v5;
  }
  else
  {
    v6 = v3;
    v10 = AssociatedTypeWitness;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v10);
}

uint64_t initializeWithCopy for ExclusiveGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t assignWithCopy for ExclusiveGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t initializeWithTake for ExclusiveGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t assignWithTake for ExclusiveGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ExclusiveGesture.Value(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_22:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_22;
LABEL_15:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 255);
}

void storeEnumTagSinglePayload for ExclusiveGesture.Value(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for ExclusiveGesture.Value(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2)
    v3 = v2;
  result = *(unsigned __int8 *)(a1 + v3);
  if (result >= 2)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void destructiveInjectEnumTag for ExclusiveGesture.Value(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t AssociatedTypeWitness;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  if (a2 > 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v9 = a2 - 2;
    if (v8 < 4)
    {
      v10 = v9 >> (8 * v8);
      v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 2;
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 2;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v4 > v5)
      v5 = v4;
    a1[v5] = a2;
  }
}

void base witness table accessor for _AttributeBody in ExclusivePhase<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ExclusiveState<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for ExclusivePreference()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void base witness table accessor for _AttributeBody in ExclusivePreference<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

CGFloat _RotationEffect.Data.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  CGFloat *v1;
  CGFloat v3;
  double v4;
  double v5;
  CGFloat result;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v9;
  CGAffineTransform v10;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  CGAffineTransformMakeTranslation(&v10, v4, v5);
  CGAffineTransformRotate(&v9, &v10, v3);
  v10 = v9;
  CGAffineTransformTranslate(&v9, &v10, -v4, -v5);
  result = v9.a;
  v7 = *(_OWORD *)&v9.c;
  v8 = *(_OWORD *)&v9.tx;
  *a1 = *(_OWORD *)&v9.a;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

void _RotationEffect.angle.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_RotationEffect.angle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _RotationEffect.anchor.getter(double a1, double a2)
{
  return a2;
}

void _RotationEffect.anchor.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*_RotationEffect.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _RotationEffect.Data.angle.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void _RotationEffect.Data.angle.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_RotationEffect.Data.angle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _RotationEffect.Data.anchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void _RotationEffect.Data.anchor.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*_RotationEffect.Data.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_RotationEffect::Data __swiftcall _RotationEffect.Data.init()()
{
  _QWORD *v0;
  SwiftUI::_RotationEffect::Data result;

  *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  return result;
}

_BYTE *_RotationEffect.Data.init(_:size:layoutDirection:)@<X0>(_BYTE *result@<X0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v7 = *result;
  v8 = a4 * a6;
  v9 = a5 * a7;
  v10 = a6 - v8;
  if (*result)
    a3 = (a3 * -128.0 + 0.0) * 0.0078125;
  *a2 = a3;
  if (v7)
    v11 = v10;
  else
    v11 = v8;
  a2[1] = v11;
  a2[2] = v9;
  return result;
}

CGFloat _RotationEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, CGFloat a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  CGFloat result;
  __int128 v13;
  __int128 v14;
  CGAffineTransform v15;
  CGAffineTransform v16;

  CGAffineTransformMakeTranslation(&v16, a2 * a5, a3 * a6);
  CGAffineTransformRotate(&v15, &v16, a4);
  v16 = v15;
  CGAffineTransformTranslate(&v15, &v16, -(a2 * a5), -(a3 * a6));
  result = v15.a;
  v13 = *(_OWORD *)&v15.c;
  v14 = *(_OWORD *)&v15.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v15.a;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

double _RotationEffect.animatableData.getter(double a1)
{
  return a1 * 128.0;
}

double _RotationEffect.animatableData.setter(double a1, double a2, double a3)
{
  double *v3;
  double result;

  result = a1 * 0.0078125;
  *v3 = result;
  v3[1] = a2 * 0.0078125;
  v3[2] = a3 * 0.0078125;
  return result;
}

uint64_t (*_RotationEffect.animatableData.modify(uint64_t a1))()
{
  float64x2_t *v1;
  float64_t v2;

  *(_QWORD *)(a1 + 24) = v1;
  v2 = v1[1].f64[0] * 128.0;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *(float64_t *)(a1 + 16) = v2;
  return _RotationEffect.animatableData.modify;
}

BOOL static _RotationEffect.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  _BOOL4 v6;

  v6 = a2 == a5;
  if (a3 != a6)
    v6 = 0;
  return a1 == a4 && v6;
}

CGFloat protocol witness for GeometryEffect.effectValue(size:) in conformance _RotationEffect@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  CGFloat *v3;
  CGFloat v7;
  double v8;
  double v9;
  CGFloat result;
  __int128 v11;
  __int128 v12;
  CGAffineTransform v13;
  CGAffineTransform v14;

  v7 = *v3;
  v8 = v3[1];
  v9 = v3[2];
  CGAffineTransformMakeTranslation(&v14, v8 * a2, v9 * a3);
  CGAffineTransformRotate(&v13, &v14, v7);
  v14 = v13;
  CGAffineTransformTranslate(&v13, &v14, -(v8 * a2), -(v9 * a3));
  result = v13.a;
  v11 = *(_OWORD *)&v13.c;
  v12 = *(_OWORD *)&v13.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v13.a;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _RotationEffect(double *a1, double *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[2] == a2[2])
    return a1[1] == a2[1];
  return 0;
}

double protocol witness for static GeometryEffectProvider.resolve(effect:origin:size:layoutDirection:) in conformance _RotationEffect@<D0>(double *a1@<X0>, _BYTE *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double result;

  v6 = a1[1] * a4;
  v7 = a1[2] * a5;
  v8 = a4 - v6;
  if (*a2)
    v9 = v8;
  else
    v9 = v6;
  if (*a2)
    v10 = (*a1 * -128.0 + 0.0) * 0.0078125;
  else
    v10 = *a1;
  v11 = swift_allocObject();
  *(double *)(v11 + 16) = v10;
  *(double *)(v11 + 24) = v9;
  *(double *)(v11 + 32) = v7;
  result = 0.0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_BYTE *)(v11 + 88) = 2;
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 8;
  return result;
}

float64_t protocol witness for Animatable.animatableData.getter in conformance _RotationEffect@<D0>(float64x2_t *a1@<X8>)
{
  float64x2_t *v1;
  float64_t result;

  result = v1[1].f64[0] * 128.0;
  *a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  a1[1].f64[0] = result;
  return result;
}

float64_t protocol witness for Animatable.animatableData.setter in conformance _RotationEffect(float64x2_t *a1)
{
  float64x2_t *v1;
  float64_t result;

  result = a1[1].f64[0] * 0.0078125;
  *v1 = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v1[1].f64[0] = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _RotationEffect(uint64_t a1))()
{
  float64x2_t *v1;
  float64_t v2;

  *(_QWORD *)(a1 + 24) = v1;
  v2 = v1[1].f64[0] * 128.0;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *(float64_t *)(a1 + 16) = v2;
  return _RotationEffect.animatableData.modify;
}

double _RotationEffect.animatableData.modify(uint64_t a1)
{
  float64x2_t *v1;
  double result;

  v1 = *(float64x2_t **)(a1 + 24);
  result = *(double *)(a1 + 16) * 0.0078125;
  *v1 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v1[1].f64[0] = result;
  return result;
}

uint64_t View.rotationEffect(_:anchor:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  _QWORD v6[3];

  *(double *)v6 = a3;
  *(double *)&v6[1] = a4;
  *(double *)&v6[2] = a5;
  return View.modifier<A>(_:)(v6, a1, &type metadata for _RotationEffect, a2);
}

int64_t _RotationEffect.encode(to:)(int64_t result, double a2, double a3, double a4)
{
  double v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;

  v7 = result;
  if (a2 != 0.0)
  {
    v4 = a2;
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    v8 = *(_QWORD *)(v7 + 8);
    result = v8 + 8;
    if (__OFADD__(v8, 8))
      goto LABEL_17;
    if (*(_QWORD *)(v7 + 16) < result)
      goto LABEL_18;
    *(_QWORD *)(v7 + 8) = result;
    *(double *)(*(_QWORD *)v7 + v8) = v4;
  }
  while (a3 != 0.5 || a4 != 0.5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_QWORD **)(v7 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      v11 = (_QWORD *)result;
    }
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
      v11 = (_QWORD *)result;
    }
    v11[2] = v13 + 1;
    v11[v13 + 4] = v10;
    *(_QWORD *)(v7 + 24) = v11;
    if (!__OFADD__(v10, 1))
    {
      *(_QWORD *)(v7 + 8) = v10 + 1;
      UnitPoint.encode(to:)((double *)v7, a3, a4);
      return ProtobufEncoder.endLengthDelimited()();
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)result = v4;
  }
  return result;
}

double _RotationEffect.init(from:)(_QWORD *a1)
{
  return specialized _RotationEffect.init(from:)(a1);
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _RotationEffect(int64_t a1)
{
  double *v1;

  return _RotationEffect.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance _RotationEffect(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v4 = specialized _RotationEffect.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
}

uint64_t _RotationEffect.Data.encode(to:)(uint64_t a1)
{
  double *v1;
  double *v2;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  int64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = v1;
  v5 = *v2;
  v4 = v2[1];
  v6 = v2[2];
  if (*v2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    v7 = *(_QWORD *)(a1 + 8);
    isUniquelyReferenced_nonNull_native = v7 + 8;
    if (__OFADD__(v7, 8))
      goto LABEL_12;
    if (*(_QWORD *)(a1 + 16) < isUniquelyReferenced_nonNull_native)
      goto LABEL_13;
    *(_QWORD *)(a1 + 8) = isUniquelyReferenced_nonNull_native;
    *(double *)(*(_QWORD *)a1 + v7) = v5;
  }
  while (1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD **)(a1 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
      v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v10[2] = v12 + 1;
    v10[v12 + 4] = v9;
    *(_QWORD *)(a1 + 24) = v10;
    if (!__OFADD__(v9, 1))
      break;
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    *(double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v5;
  }
  *(_QWORD *)(a1 + 8) = v9 + 1;
  CGPoint.encode(to:)((double *)a1, v4, v6);
  return ProtobufEncoder.endLengthDelimited()();
}

unint64_t _RotationEffect.Data.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = 0;
  if (v5 >= v6)
  {
    v8 = 0.0;
    v9 = 0.0;
LABEL_4:
    v3[3] = 0;
    *a2 = v9;
    a2[1] = v8;
    *((_QWORD *)a2 + 2) = v7;
    return result;
  }
  v8 = 0.0;
  v9 = 0.0;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v11 = v3[4];
      if (v5 < v11)
        goto LABEL_14;
      if (v11 < v5)
        goto LABEL_51;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
      goto LABEL_51;
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        v12 = result & 7;
        if (v12 == 5)
        {
          v24 = (float *)v3[1];
          if (v6 < (unint64_t)(v24 + 1))
            goto LABEL_51;
          v25 = *v24;
          v3[1] = v24 + 1;
          v9 = v25;
        }
        else
        {
          if (v12 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_56;
            v13 = (double *)v3[1];
            if (v6 < (unint64_t)v13 + result)
              goto LABEL_51;
            v3[3] = 9;
            v3[4] = (char *)v13 + result;
          }
          else
          {
            if (v12 != 1)
              goto LABEL_51;
            v13 = (double *)v3[1];
          }
          if (v6 < (unint64_t)(v13 + 1))
            goto LABEL_51;
          v9 = *v13;
          v3[1] = v13 + 1;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (!v2)
              goto LABEL_7;
            return result;
          case 1uLL:
            v10 = v3[1] + 8;
            if (v6 < v10)
              goto LABEL_51;
            goto LABEL_6;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_57;
            v10 = v3[1] + result;
            if (v6 < v10)
              goto LABEL_51;
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            v10 = v3[1] + 4;
            if (v6 < v10)
              goto LABEL_51;
            goto LABEL_6;
          default:
            goto LABEL_51;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_51;
    v14 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v14[2] = v16 + 1;
    v14[v16 + 4] = v6;
    v3[5] = v14;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if ((result & 0x8000000000000000) != 0)
      break;
    v17 = v3[1] + result;
    if (v6 < v17)
      goto LABEL_51;
    v3[2] = v17;
    v18 = specialized CGPoint.init(from:)(v3);
    v20 = (_QWORD *)v3[5];
    if (!v20[2])
      goto LABEL_55;
    v8 = v18;
    v7 = v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v21 = v20[2];
      if (!v21)
        goto LABEL_50;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
      v20 = (_QWORD *)result;
      v21 = *(_QWORD *)(result + 16);
      if (!v21)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    v22 = v21 - 1;
    v23 = v20[v22 + 4];
    v20[2] = v22;
    v3[5] = v20;
    v3[2] = v23;
LABEL_7:
    v5 = v3[1];
    v6 = v3[2];
    if (v5 >= v6)
      goto LABEL_4;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  __break(1u);
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  v28 = *(_QWORD *)(result + 16);
  if (!v28)
  {
    __break(1u);
    JUMPOUT(0x234B5BA48);
  }
  v26 = v28 - 1;
  v27 = *(_QWORD *)(result + 8 * v26 + 32);
  *(_QWORD *)(result + 16) = v26;
  v3[5] = result;
  v3[2] = v27;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _RotationEffect.Data(uint64_t a1)
{
  return _RotationEffect.Data.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _RotationEffect.Data@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return _RotationEffect.Data.init(from:)(a1, a2);
}

double specialized _RotationEffect.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 0.0;
  if (v4 >= v5)
  {
LABEL_2:
    a1[3] = 0;
    return v6;
  }
  while (1)
  {
    v8 = a1[3];
    if (v8)
    {
      v9 = a1[4];
      if (v4 < v9)
        goto LABEL_12;
      if (v9 < v4)
        goto LABEL_49;
      a1[3] = 0;
    }
    v8 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return v6;
    if (v8 <= 7)
      goto LABEL_49;
LABEL_12:
    if (v8 >> 3 != 2)
    {
      if (v8 >> 3 == 1)
      {
        v10 = v8 & 7;
        if (v10 == 5)
        {
          v19 = (float *)a1[1];
          if (v5 < (unint64_t)(v19 + 1))
            goto LABEL_49;
          v20 = *v19;
          a1[1] = v19 + 1;
          v6 = v20;
        }
        else
        {
          if (v10 == 2)
          {
            v21 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v6;
            if (v21 < 0)
              goto LABEL_54;
            v11 = (double *)a1[1];
            if (v5 < (unint64_t)v11 + v21)
              goto LABEL_49;
            a1[3] = 9;
            a1[4] = (char *)v11 + v21;
          }
          else
          {
            if (v10 != 1)
              goto LABEL_49;
            v11 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v11 + 1))
            goto LABEL_49;
          v6 = *v11;
          a1[1] = v11 + 1;
        }
      }
      else
      {
        switch(v8 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (!v1)
              goto LABEL_5;
            return v6;
          case 1uLL:
            v7 = a1[1] + 8;
            if (v5 < v7)
              goto LABEL_49;
            goto LABEL_4;
          case 2uLL:
            v22 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v6;
            if (v22 < 0)
              goto LABEL_55;
            v7 = a1[1] + v22;
            if (v5 < v7)
              goto LABEL_49;
LABEL_4:
            a1[1] = v7;
            break;
          case 5uLL:
            v7 = a1[1] + 4;
            if (v5 < v7)
              goto LABEL_49;
            goto LABEL_4;
          default:
            goto LABEL_49;
        }
      }
      goto LABEL_5;
    }
    if ((v8 & 7) != 2)
      goto LABEL_49;
    v2 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    v13 = v2[2];
    v12 = v2[3];
    if (v13 >= v12 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    v2[2] = v13 + 1;
    v2[v13 + 4] = v5;
    a1[5] = v2;
    v14 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return v6;
    if (v14 < 0)
      break;
    v15 = a1[1] + v14;
    if (v5 < v15)
      goto LABEL_49;
    a1[2] = v15;
    specialized UnitPoint.init(from:)(a1);
    v2 = (_QWORD *)a1[5];
    if (!v2[2])
      goto LABEL_53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v16 = v2[2];
      if (!v16)
        goto LABEL_48;
    }
    else
    {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v16 = v2[2];
      if (!v16)
      {
LABEL_48:
        __break(1u);
LABEL_49:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return v6;
      }
    }
    v17 = v16 - 1;
    v18 = v2[v17 + 4];
    v2[2] = v17;
    a1[5] = v2;
    a1[2] = v18;
LABEL_5:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
      goto LABEL_2;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  __break(1u);
  v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v27 = v26[2];
  if (!v27)
  {
    __break(1u);
    JUMPOUT(0x234B5BE14);
  }
  v24 = v27 - 1;
  v25 = v26[v24 + 4];
  v26[2] = v24;
  a1[5] = v26;
  a1[2] = v25;
  return v6;
}

unint64_t instantiation function for generic protocol witness table for _RotationEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _RotationEffect, &type metadata for _RotationEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _RotationEffect, &type metadata for _RotationEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _RotationEffect, &type metadata for _RotationEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _RotationEffect()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
}

float64_t sub_234B5BF00@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64_t result;

  result = a1[1].f64[0] * 128.0;
  *a2 = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  a2[1].f64[0] = result;
  return result;
}

float64_t sub_234B5BF28(float64x2_t *a1, float64x2_t *a2)
{
  float64_t result;

  result = a1[1].f64[0] * 0.0078125;
  *a2 = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  a2[1].f64[0] = result;
  return result;
}

ValueMetadata *type metadata accessor for _RotationEffect()
{
  return &type metadata for _RotationEffect;
}

ValueMetadata *type metadata accessor for _RotationEffect.Data()
{
  return &type metadata for _RotationEffect.Data;
}

uint64_t sub_234B5BF70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _RotationEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _RotationEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t sub_234B5BFC4()
{
  return swift_deallocObject();
}

uint64_t AnyGradient.provider.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AnyGradient.provider.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnyGradient.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for GradientBox(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 128) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 144), a1);
  return v5;
}

uint64_t type metadata accessor for GradientBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GradientBox);
}

uint64_t GradientBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 128) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144), a1);
  return v2;
}

uint64_t AnyGradient.init(_:)(uint64_t a1)
{
  uint64_t result;

  type metadata accessor for GradientBox<Gradient>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

void type metadata accessor for GradientBox<Gradient>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for GradientBox<Gradient>)
  {
    v2 = lazy protocol witness table accessor for type Gradient and conformance Gradient();
    v4 = type metadata accessor for GradientBox(a1, (uint64_t)&type metadata for Gradient, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for GradientBox<Gradient>);
  }
}

unint64_t lazy protocol witness table accessor for type Gradient and conformance Gradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Gradient and conformance Gradient;
  if (!lazy protocol witness table cache variable for type Gradient and conformance Gradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Gradient, &type metadata for Gradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient and conformance Gradient);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Gradient and conformance Gradient;
  if (!lazy protocol witness table cache variable for type Gradient and conformance Gradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Gradient, &type metadata for Gradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient and conformance Gradient);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Gradient and conformance Gradient;
  if (!lazy protocol witness table cache variable for type Gradient and conformance Gradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Gradient, &type metadata for Gradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient and conformance Gradient);
  }
  return result;
}

uint64_t AnyGradient.resolve(in:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v3);
}

uint64_t AnyGradient.fallbackColor(in:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)a2 + 112))(&v3);
}

uint64_t AnyGradient._apply(to:)(uint64_t a1)
{
  swift_retain();
  specialized Paint._apply(to:)(a1);
  return swift_release();
}

uint64_t AnyGradientBox.apply(to:)(uint64_t a1)
{
  swift_retain();
  specialized Paint._apply(to:)(a1);
  return swift_release();
}

uint64_t AnyGradient.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 120))();
}

uint64_t static AnyGradient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a2) & 1;
}

Swift::Int AnyGradient.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 120))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyGradient()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 120))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyGradient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyGradient()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 120))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance AnyGradient(uint64_t a1)
{
  swift_retain();
  specialized Paint._apply(to:)(a1);
  return swift_release();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyGradient(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return 1;
  else
    return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))() & 1;
}

uint64_t GradientProvider.fallbackColor(in:)()
{
  return 0;
}

uint64_t _AnyLinearGradient.init(gradient:startPoint:endPoint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

void AnyGradientBox.resolve(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyGradientBox.fallbackColor(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyGradientBox.hash(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyGradientBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyGradientBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t GradientBox.resolve(in:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  v5 = *a1;
  return (*(uint64_t (**)(__int128 *, _QWORD))(v3 + 16))(&v5, *(_QWORD *)(v2 + 128));
}

uint64_t GradientBox.fallbackColor(in:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  v5 = *a1;
  return (*(uint64_t (**)(__int128 *, _QWORD))(v3 + 24))(&v5, *(_QWORD *)(v2 + 128));
}

uint64_t GradientBox.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t GradientBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t GradientBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 128) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
}

uint64_t GradientBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 128) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_deallocClassInstance();
}

uint64_t _AnyLinearGradient.gradient.getter()
{
  return swift_retain();
}

uint64_t _AnyLinearGradient.gradient.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_AnyLinearGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _AnyLinearGradient.startPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void _AnyLinearGradient.startPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*_AnyLinearGradient.startPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _AnyLinearGradient.endPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void _AnyLinearGradient.endPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*_AnyLinearGradient.endPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyRadialGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyRadialGradient.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _AnyRadialGradient.startRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void _AnyRadialGradient.startRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*_AnyRadialGradient.startRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _AnyRadialGradient.endRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void _AnyRadialGradient.endRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*_AnyRadialGradient.endRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.startRadiusFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.endRadiusFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.startAngle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.endAngle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t EitherGradient.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *);
  uint64_t result;
  uint64_t v9;
  char v10;
  _QWORD v11[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)v2;
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    v11[0] = *a1;
    v11[1] = v5;
    v7 = *(void (**)(_QWORD *))(*(_QWORD *)v6 + 104);
    swift_retain();
    v7(v11);
    return outlined consume of EitherGradient(v6, 1);
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined copy of EitherGradient(v6, 0);
    v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v6, v4, v5);
    swift_release();
    swift_release();
    result = outlined consume of EitherGradient(v6, 0);
    if (one-time initialization token for default != -1)
      result = swift_once();
    v10 = static ResolvedGradient.ColorSpace.default;
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v10;
  }
  return result;
}

uint64_t outlined consume of EitherGradient(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t EitherGradient.fallbackColor(in:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(__int128 *);
  uint64_t v4;
  __int128 v6;

  if (*(_BYTE *)(v1 + 8) != 1)
    return 0;
  v2 = *(_QWORD *)v1;
  v6 = *a1;
  v3 = *(uint64_t (**)(__int128 *))(*(_QWORD *)v2 + 112);
  swift_retain();
  v4 = v3(&v6);
  outlined consume of EitherGradient(v2, 1);
  return v4;
}

uint64_t EitherGradient.constantColor.getter()
{
  _BYTE *v0;
  uint64_t v1;

  if ((v0[8] & 1) != 0)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1 != 1)
  {
    if (!v1)
    {
      if (one-time initialization token for clear != -1)
        swift_once();
      return swift_retain();
    }
    return 0;
  }
  return swift_retain();
}

uint64_t EitherGradient.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t);

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  if ((v4 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v5 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
    swift_retain();
    v5(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }
  return outlined consume of EitherGradient(v3, v4);
}

Swift::Int EitherGradient.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v3 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
    swift_retain();
    v3(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EitherGradient(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t);

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  if ((v4 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v5 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
    swift_retain();
    v5(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }
  return outlined consume of EitherGradient(v3, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EitherGradient()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  Hasher.init(_seed:)();
  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v3 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
    swift_retain();
    v3(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  return Hasher._finalize()();
}

uint64_t specialized static EitherGradient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t (*v6)(uint64_t);
  char v7;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  if ((v3 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    {
      outlined copy of EitherGradient(*(_QWORD *)a2, 0);
      outlined copy of EitherGradient(v2, 0);
      v7 = specialized static Array<A>.== infix(_:_:)(v2, v4);
      v3 = 0;
      v5 = 0;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
  {
LABEL_6:
    outlined copy of EitherGradient(*(_QWORD *)a2, *(_BYTE *)(a2 + 8));
    outlined copy of EitherGradient(v2, v3);
    v7 = 0;
    goto LABEL_9;
  }
  if (v2 == v4)
  {
    v3 = 1;
    outlined copy of EitherGradient(*(_QWORD *)a2, 1);
    outlined copy of EitherGradient(v2, 1);
    v5 = 1;
    v7 = 1;
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88);
    v3 = 1;
    outlined copy of EitherGradient(*(_QWORD *)a2, 1);
    outlined copy of EitherGradient(v2, 1);
    v7 = v6(v4);
    v5 = 1;
  }
LABEL_9:
  outlined consume of EitherGradient(v2, v3);
  outlined consume of EitherGradient(v4, v5);
  return v7 & 1;
}

uint64_t outlined copy of EitherGradient(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type AnyGradient and conformance AnyGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyGradient and conformance AnyGradient;
  if (!lazy protocol witness table cache variable for type AnyGradient and conformance AnyGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGradient, &type metadata for AnyGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGradient and conformance AnyGradient);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Gradient(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Gradient and conformance Gradient();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EitherGradient and conformance EitherGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EitherGradient and conformance EitherGradient;
  if (!lazy protocol witness table cache variable for type EitherGradient and conformance EitherGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EitherGradient, &type metadata for EitherGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EitherGradient and conformance EitherGradient);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyGradient()
{
  return &type metadata for AnyGradient;
}

uint64_t dispatch thunk of GradientProvider.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of GradientProvider.fallbackColor(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for AnyGradientBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyGradientBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyGradientBox.resolve(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AnyGradientBox.fallbackColor(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AnyGradientBox.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t type metadata completion function for GradientBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t initializeWithCopy for _AnyLinearGradient(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for _AnyLinearGradient()
{
  return &type metadata for _AnyLinearGradient;
}

ValueMetadata *type metadata accessor for _AnyRadialGradient()
{
  return &type metadata for _AnyRadialGradient;
}

ValueMetadata *type metadata accessor for _AnyEllipticalGradient()
{
  return &type metadata for _AnyEllipticalGradient;
}

_QWORD *assignWithCopy for _AnyLinearGradient(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for _AnyLinearGradient(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for _AnyAngularGradient()
{
  return &type metadata for _AnyAngularGradient;
}

uint64_t initializeBufferWithCopyOfBuffer for EitherGradient(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of EitherGradient(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for EitherGradient(uint64_t a1)
{
  return outlined consume of EitherGradient(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for EitherGradient(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of EitherGradient(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of EitherGradient(v5, v6);
  return a1;
}

uint64_t assignWithTake for EitherGradient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of EitherGradient(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EitherGradient(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EitherGradient(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for EitherGradient(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for EitherGradient(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EitherGradient()
{
  return &type metadata for EitherGradient;
}

uint64_t specialized _GraphInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  specialized _GraphInputs.recordReusableInput<A>(_:)();
  v7 = swift_retain();
  v8 = specialized find<A>(_:key:)(v7);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    swift_retain();
  }
  else
  {
    v9 = 0;
  }
  swift_release();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = a3 & 1;
  *(_QWORD *)(v10 + 40) = v9;
  swift_retain();
  outlined copy of BodyInputElement();
  specialized closure #1 in PropertyList.subscript.setter(v3, v10);
  swift_release();
  return swift_release();
}

uint64_t static _ViewModifier_Content._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v9 = *((_DWORD *)a1 + 20);
  v10 = type metadata accessor for _ViewModifier_Content(0, a2, a3, a3);
  *(_QWORD *)&v13 = v6;
  DWORD2(v13) = v7;
  v14 = v8;
  v11 = *(_OWORD *)(a1 + 5);
  v15 = *(_OWORD *)(a1 + 3);
  v16 = v11;
  v17 = *(_OWORD *)(a1 + 7);
  v18 = a1[9];
  v19 = v9;
  return static ViewModifierContentProvider.providerMakeView(view:inputs:)(&v13, v10, (uint64_t)&protocol witness table for _ViewModifier_Content<A>, a4);
}

uint64_t type metadata accessor for _ViewModifier_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ViewModifier_Content);
}

uint64_t static ViewModifierContentProvider.providerMakeView(view:inputs:)@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t *);
  uint64_t v13;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;

  v5 = a1[3];
  v6 = a1[1];
  v36 = a1[2];
  v37 = v5;
  v7 = a1[3];
  v38 = a1[4];
  v8 = a1[1];
  v34 = *a1;
  v35 = v8;
  v30 = v36;
  v31 = v7;
  v32 = a1[4];
  v39 = *((_DWORD *)a1 + 20);
  v33 = *((_DWORD *)a1 + 20);
  v28 = v34;
  v29 = v6;
  v9 = type metadata accessor for BodyInput(0, a2, a2, a3);
  outlined retain of _ViewInputs((uint64_t)&v34);
  _ViewInputs.popLast<A, B>(_:)(v9, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)v26);
  v10 = v27;
  if (v27 == 255)
  {
    *(_QWORD *)a4 = MEMORY[0x24BEE4AF8];
    v15 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = (void (*)(uint64_t, uint64_t *))v26[0];
    v11 = v26[1];
    if ((v27 & 1) == 0)
    {
      v19 = v28;
      v20 = DWORD2(v28);
      v21 = v29;
      v22 = v30;
      v23 = v31;
      v24 = v32;
      v25 = v33;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v13 = swift_bridgeObjectRetain();
      v12(v13, &v19);
      outlined consume of BodyInputElement?((uint64_t)v12, v11, v10);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return swift_release_n();
    }
    v19 = v28;
    v20 = DWORD2(v28);
    v21 = v29;
    v22 = v30;
    v23 = v31;
    v24 = v32;
    v25 = v33;
    v16 = swift_allocObject();
    v17 = v37;
    *(_OWORD *)(v16 + 48) = v36;
    *(_OWORD *)(v16 + 64) = v17;
    *(_OWORD *)(v16 + 80) = v38;
    *(_DWORD *)(v16 + 96) = v39;
    v18 = v35;
    *(_OWORD *)(v16 + 16) = v34;
    *(_OWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 104) = v12;
    *(_QWORD *)(v16 + 112) = v11;
    outlined retain of _ViewInputs((uint64_t)&v34);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of BodyInputElement?((uint64_t)v12, v11, v10);
    static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v19, (uint64_t)partial apply for closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:), v16, a4);
    swift_release();
    outlined consume of BodyInputElement?((uint64_t)v12, v11, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static _ViewModifier_Content._makeViewList(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v15 = *(_OWORD *)(a1 + 5);
  v9 = a1[7];
  v10 = *((_DWORD *)a1 + 16);
  v11 = a1[9];
  v12 = *((_BYTE *)a1 + 80);
  v13 = type metadata accessor for _ViewModifier_Content(0, a2, a3, a3);
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = *(_OWORD *)(a1 + 3);
  v20 = v15;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  return static ViewModifierContentProvider.providerMakeViewList(view:inputs:)((uint64_t)&v16, v13, (uint64_t)&protocol witness table for _ViewModifier_Content<A>, a4);
}

uint64_t static ViewModifierContentProvider.providerMakeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t *);
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[24];
  ValueMetadata *v20;
  _UNKNOWN **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  unsigned __int8 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  char v41;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_BYTE *)(a1 + 80);
  v33 = *(_QWORD *)a1;
  v34 = v6;
  v36 = *(_OWORD *)(a1 + 24);
  v35 = v7;
  v37 = v8;
  v38 = *(_OWORD *)(a1 + 48);
  v39 = v9;
  v40 = v10;
  v41 = v11;
  v12 = type metadata accessor for BodyInput(0, a2, a2, a3);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.popLast<A, B>(_:)(v12, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)v31);
  v13 = v32;
  if (v32 == 255)
  {
    if ((BYTE8(v38) & 0x10) != 0)
    {
      v22 = v33;
      v23 = v34;
      v24 = v35;
      v25 = v36;
      v26 = v37;
      v27 = v38;
      v28 = v39;
      v29 = v40;
      v30 = v41;
      static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v22, a4);
    }
    else
    {
      v20 = &type metadata for EmptyViewListElements;
      v21 = &protocol witness table for EmptyViewListElements;
      v22 = v33;
      v23 = v34;
      v24 = v35;
      v25 = v36;
      v26 = v37;
      v27 = v38;
      v28 = v39;
      v29 = v40;
      v30 = v41;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v19, &v22, 0, a4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    v15 = (void (*)(uint64_t, uint64_t *))v31[0];
    v14 = v31[1];
    v22 = v33;
    v23 = v34;
    v24 = v35;
    v25 = v36;
    v26 = v37;
    v27 = v38;
    v28 = v39;
    v29 = v40;
    v30 = v41;
    if ((v32 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v18 = swift_bridgeObjectRetain();
      v15(v18, &v22);
      outlined consume of BodyInputElement?((uint64_t)v15, v14, v13);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return swift_release_n();
    }
    else
    {
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = v14;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of BodyInputElement?((uint64_t)v15, v14, v13);
      static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)(&v22, (uint64_t)partial apply for closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:), v16, a2, a4);
      swift_release();
      outlined consume of BodyInputElement?((uint64_t)v15, v14, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
}

uint64_t static _ViewModifier_Content._viewListCount(inputs:body:)()
{
  return 0;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _ViewModifier_Content<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static _ViewModifier_Content._makeView(view:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ViewModifier_Content<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static _ViewModifier_Content._makeViewList(view:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ViewModifier_Content<A>()
{
  return protocol witness for CodingKey.intValue.getter in conformance _DisplayList_Identity.CodingKeys();
}

uint64_t static PlaceholderContentView._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v9 = *((_DWORD *)a1 + 20);
  v10 = type metadata accessor for PlaceholderContentView(0, a2, a2, a3);
  *(_QWORD *)&v13 = v6;
  DWORD2(v13) = v7;
  v14 = v8;
  v11 = *(_OWORD *)(a1 + 5);
  v15 = *(_OWORD *)(a1 + 3);
  v16 = v11;
  v17 = *(_OWORD *)(a1 + 7);
  v18 = a1[9];
  v19 = v9;
  return static ViewModifierContentProvider.providerMakeView(view:inputs:)(&v13, v10, (uint64_t)&protocol witness table for PlaceholderContentView<A>, a4);
}

uint64_t type metadata accessor for PlaceholderContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlaceholderContentView);
}

uint64_t static PlaceholderContentView._makeViewList(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v15 = *(_OWORD *)(a1 + 5);
  v9 = a1[7];
  v10 = *((_DWORD *)a1 + 16);
  v11 = a1[9];
  v12 = *((_BYTE *)a1 + 80);
  v13 = type metadata accessor for PlaceholderContentView(0, a2, a2, a3);
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = *(_OWORD *)(a1 + 3);
  v20 = v15;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  return static ViewModifierContentProvider.providerMakeViewList(view:inputs:)((uint64_t)&v16, v13, (uint64_t)&protocol witness table for PlaceholderContentView<A>, a4);
}

uint64_t static PlaceholderContentView._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];
  int v12;
  uint64_t v13;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for PlaceholderContentView(0, a2, a3, a4);
  v11[0] = v4;
  v11[1] = v5;
  v12 = v6;
  v13 = v7;
  return static ViewModifierContentProvider.providerViewListCount(inputs:)(v11, v8, (uint64_t)&protocol witness table for PlaceholderContentView<A>, v9);
}

uint64_t static ViewModifierContentProvider.providerViewListCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;

  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v7 = (_QWORD *)a1[3];
  v18 = *a1;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v8 = type metadata accessor for BodyCountInput(0, a2, a3, a4);
  v9 = type metadata accessor for (_:)();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListCountInputs.popLast<A, B>(_:)(v8, v9, (uint64_t)&protocol witness table for BodyCountInput<A>, (uint64_t)v15);
  v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v15[0];
  if (v15[0])
  {
    if ((specialized Sequence<>.contains(_:)(a2, (uint64_t)v7) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v10);
      return 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v13 = v7[2];
      v12 = v7[3];
      if (v13 >= v12 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
      v7[2] = v13 + 1;
      v7[v13 + 4] = a2;
      v15[0] = v18;
      v15[1] = v5;
      v16 = v6;
      v17 = v7;
      swift_retain();
      swift_bridgeObjectRetain();
      v10(&v14, v15);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v10);
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return v14;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlaceholderContentView<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static PlaceholderContentView._makeView(view:inputs:)(a1, *(_QWORD *)(a2 + 16), a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlaceholderContentView<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static PlaceholderContentView._makeViewList(view:inputs:)(a1, *(_QWORD *)(a2 + 16), a3, a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlaceholderContentView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static PlaceholderContentView._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), a3, a4);
}

uint64_t closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:)(uint64_t a1, uint64_t *a2, _OWORD *a3, void (*a4)(uint64_t, uint64_t *))
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  _OWORD v30[3];
  uint64_t v31;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a3[1];
  v30[0] = *a3;
  v30[1] = v12;
  v30[2] = a3[2];
  v13 = *(_QWORD *)&v30[0];
  v31 = *(_QWORD *)&v30[0];
  outlined retain of _ViewInputs((uint64_t)a3);
  outlined retain of _GraphInputs((uint64_t)v30);
  outlined retain of ViewTransform((uint64_t)&v31);
  v14 = specialized find<A>(_:key:)(v13);
  if (v14)
    v15 = *(_QWORD *)(v14 + 72);
  else
    v15 = 0;
  outlined release of ViewTransform((uint64_t)&v31);
  outlined release of _GraphInputs((uint64_t)v30);
  outlined release of _ViewInputs((uint64_t)a3);
  v16 = *MEMORY[0x24BE096C0];
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v11;
  v25 = 0;
  v26 = v15;
  v27 = v16;
  v28 = MEMORY[0x24BEE4B08];
  v29 = 0;
  swift_retain();
  swift_retain();
  v17 = swift_bridgeObjectRetain();
  a4(v17, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:)(uint64_t *a1, uint64_t (*a2)(void))
{
  int v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v2 = *((_DWORD *)a1 + 2);
  v3 = a1[2];
  v4 = *((_DWORD *)a1 + 20);
  v7 = *a1;
  v8 = v2;
  v9 = v3;
  v5 = *(_OWORD *)(a1 + 5);
  v10 = *(_OWORD *)(a1 + 3);
  v11 = v5;
  v12 = *(_OWORD *)(a1 + 7);
  v13 = a1[9];
  v14 = v4;
  return a2();
}

uint64_t _ViewInputs.pushModifierBody<A>(_:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];
  char v7;

  v6[0] = a2;
  v6[1] = a3;
  v7 = 0;
  v4 = type metadata accessor for BodyInput(0, a4, a3, a4);
  return _ViewInputs.append<A, B>(_:to:)((uint64_t)v6, v4, v4, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
}

uint64_t type metadata accessor for BodyInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BodyInput);
}

uint64_t _ViewListInputs.pushModifierBody<A>(_:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];
  char v7;

  v6[0] = a2;
  v6[1] = a3;
  v7 = 1;
  v4 = type metadata accessor for BodyInput(0, a4, a3, a4);
  return _GraphInputs.append<A, B>(_:to:)((uint64_t)v6, v4, v4, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BodyInputElement(uint64_t a1, uint64_t a2)
{
  return specialized static BodyInputElement.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t protocol witness for static GraphReusable.isTriviallyReusable.getter in conformance BodyInputElement()
{
  unsigned int v0;

  if (one-time initialization token for v5 != -1)
    swift_once();
  v0 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    return dyld_program_sdk_at_least();
  else
    return static Semantics.forced >= v0;
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance BodyInputElement(uint64_t a1)
{
  uint64_t v1;

  return specialized BodyInputElement.tryToReuse(by:indirectMap:testOnly:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance BodyInput<A>(_QWORD *a1@<X8>)
{
  protocol witness for SetAlgebra.init() in conformance NSCalendarUnit(a1);
}

void static BodyCountInput.defaultValue.getter(_QWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  Stack.init()(a1);
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance BodyCountInput<A>(_QWORD *a1@<X8>)
{
  static BodyCountInput.defaultValue.getter(a1);
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 24);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 72);
  v20 = v10;
  return static ViewModifier.makeView(modifier:inputs:body:)(&v21, &v13, a3, a4, a5, a6, a7);
}

void specialized static ViewModifier.makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v2, (uint64_t)&v5);
  v4 = v6;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v5) = v4;
  specialized static ViewModifier.makeBody(modifier:inputs:fields:)();
}

void sub_234B5E554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,uint64_t a37,int a38,unsigned int a39,int a40,int a41,uint64_t a42,uint64_t a43,int a44,int a45,int a46,int a47,int a48,int a49,int a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int ShouldRecordTree;

  swift_retain();
  specialized _GraphInputs.append<A, B>(_:to:)(v51, v50, 0);
  swift_release();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  *(_QWORD *)(v52 - 208) = a35;
  *(_DWORD *)(v52 - 200) = a36;
  *(_QWORD *)(v52 - 192) = a37;
  *(_DWORD *)(v52 - 184) = a38;
  *(_QWORD *)(v52 - 180) = a39;
  *(_DWORD *)(v52 - 172) = a41;
  *(_QWORD *)(v52 - 168) = a42;
  *(_QWORD *)(v52 - 160) = a43;
  *(_DWORD *)(v52 - 152) = a44;
  *(_DWORD *)(v52 - 148) = a45;
  *(_DWORD *)(v52 - 144) = a46;
  *(_DWORD *)(v52 - 140) = a47;
  *(_DWORD *)(v52 - 136) = a48;
  *(_DWORD *)(v52 - 132) = a49;
  *(_DWORD *)(v52 - 128) = a50;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static View.makeView(view:inputs:)(a24, v52 - 208);
}

uint64_t sub_234B5E6D4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v13[2];
  char v14;
  int v15;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v15 = v7;
  if ((v0 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v13, &v14);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v1 = v13[0];
  v2 = v13[1];
  if ((v8 & 1) == 0)
  {
    v14 = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v6, v11, v10, v9, v5, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *v12 = v1;
  v12[1] = v2;
  return result;
}

uint64_t static ViewModifier.makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  void (*v36)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t AssociatedTypeWitness;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char v52;
  uint64_t v54;
  __int128 v55;
  char v56;
  int v58;
  _QWORD v60[2];
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v14 = a2[5];
  v13 = a2[6];
  v15 = *((_DWORD *)a2 + 20);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v93);
  v17 = v93;
  v16 = v94;
  v18 = v95;
  v19 = HIDWORD(v95);
  v93 = v10;
  LODWORD(v94) = v11;
  v96 = *(_OWORD *)(a2 + 3);
  v95 = v12;
  v97 = v14;
  v98 = v13;
  v99 = *(_OWORD *)(a2 + 7);
  v100 = a2[9];
  v101 = v15;
  v42 = v19;
  v43 = v9;
  v61 = v9;
  *(_QWORD *)&v55 = v17;
  *((_QWORD *)&v55 + 1) = v16;
  *(_QWORD *)&v78 = v17;
  *((_QWORD *)&v78 + 1) = v16;
  v56 = v18;
  LOBYTE(v79) = v18;
  HIDWORD(v79) = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeBody(modifier:inputs:fields:)(v60, (uint64_t)&v62, &v61, (uint64_t)&v93, &v78, a5, a6);
  v58 = v60[0];
  v40 = v62;
  v41 = v63;
  v52 = v64;
  v21 = type metadata accessor for _ViewModifier_Content(0, a5, a6, v20);
  *(_QWORD *)&v78 = a3;
  *((_QWORD *)&v78 + 1) = a4;
  LOBYTE(v79) = 0;
  v24 = type metadata accessor for BodyInput(0, v21, v22, v23);
  _ViewInputs.append<A, B>(_:to:)((uint64_t)&v78, v24, v24, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
  v54 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = v93;
  v26 = v95;
  v49 = v96;
  v50 = v94;
  v27 = *((_QWORD *)&v96 + 1);
  v48 = DWORD1(v96);
  v28 = v97;
  v29 = v98;
  v30 = DWORD1(v99);
  v31 = DWORD2(v99);
  v32 = HIDWORD(v99);
  v33 = v100;
  v46 = HIDWORD(v100);
  v47 = v99;
  v45 = v101;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  *(_QWORD *)&v78 = v25;
  DWORD2(v78) = v50;
  v79 = v26;
  v80 = v49;
  v81 = v48;
  v84 = v28;
  v85 = v29;
  v86 = v47;
  v87 = v30;
  v88 = v31;
  v89 = v32;
  v90 = v33;
  v91 = v46;
  v92 = v45;
  v83 = HIDWORD(v27);
  v82 = 0;
  v61 = v58;
  v62 = v25;
  LODWORD(v63) = v50;
  v64 = v26;
  v65 = v49;
  v66 = v48;
  v67 = 0;
  v68 = HIDWORD(v27);
  v69 = v28;
  v70 = v29;
  v71 = v47;
  v72 = v30;
  v73 = v31;
  v74 = v32;
  v75 = v33;
  v76 = v46;
  v77 = v45;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v36 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36(v60, &v61, &v62, AssociatedTypeWitness, AssociatedConformanceWitness);
  v82 = v27;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v60, (uint64_t)&v78);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  v37 = v60[0];
  v38 = v60[1];
  if ((v52 & 1) == 0)
  {
    v62 = v40;
    v63 = v41;
    LODWORD(v60[0]) = v43;
    v78 = v55;
    LOBYTE(v79) = v56;
    HIDWORD(v79) = v42;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)v60, (uint64_t *)&v78, v54);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a7 = v37;
  a7[1] = v38;
  return result;
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;

  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_DWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_BYTE *)(a2 + 80);
  v23 = *a1;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = *(_OWORD *)(a2 + 24);
  v18 = v9;
  v19 = *(_OWORD *)(a2 + 48);
  v20 = v10;
  v21 = v11;
  v22 = v12;
  return static ViewModifier.makeViewList(modifier:inputs:body:)(&v23, &v14, a3, a4, a5, a6);
}

uint64_t static ViewModifier.makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  int v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  *(_QWORD *)&v41 = a3;
  *((_QWORD *)&v41 + 1) = a4;
  v75 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = a2[6];
  v46 = a2[7];
  v13 = *((_DWORD *)a2 + 16);
  v14 = a2[9];
  v15 = *((_BYTE *)a2 + 80);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v65);
  v17 = v65;
  v16 = v66;
  v18 = v67;
  v19 = HIDWORD(v67);
  v65 = v8;
  LODWORD(v66) = v9;
  v67 = v10;
  v68 = *(_OWORD *)(a2 + 3);
  v69 = v11;
  v70 = v12;
  v71 = v46;
  v72 = v13;
  v73 = v14;
  v74 = v15;
  v39 = v19;
  v40 = v7;
  v51 = v7;
  *(_QWORD *)&v45 = v17;
  *((_QWORD *)&v45 + 1) = v16;
  *(_QWORD *)&v53 = v17;
  *((_QWORD *)&v53 + 1) = v16;
  v47 = v18;
  LOBYTE(v54) = v18;
  HIDWORD(v54) = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeBody(modifier:inputs:fields:)(&v52, (uint64_t)&v62, &v51, (uint64_t)&v65, &v53, a5, a6);
  v48 = v52;
  v37 = v62;
  v38 = v63;
  v44 = v64;
  v21 = type metadata accessor for _ViewModifier_Content(0, a5, a6, v20);
  v53 = v41;
  LOBYTE(v54) = 1;
  v24 = type metadata accessor for BodyInput(0, v21, v22, v23);
  _GraphInputs.append<A, B>(_:to:)((uint64_t)&v53, v24, v24, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = v65;
  v43 = v66;
  v27 = v67;
  v28 = v68;
  v30 = v69;
  v29 = v70;
  v42 = v71;
  v31 = v72;
  v32 = v73;
  v33 = v74;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  LODWORD(v62) = v48;
  *(_QWORD *)&v53 = v26;
  DWORD2(v53) = v43;
  v54 = v27;
  v55 = v28;
  v56 = v30;
  v57 = v29;
  v58 = v42;
  v59 = v31;
  v60 = v32;
  v61 = v33;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v62, &v53, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v48, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v44 & 1) == 0)
  {
    v62 = v37;
    v63 = v38;
    v52 = v40;
    v53 = v45;
    LOBYTE(v54) = v47;
    HIDWORD(v54) = v39;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v52, (uint64_t *)&v53, a5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  uint64_t v10;

  v5 = *((_DWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 3);
  v8 = *a1;
  v9 = v5;
  v10 = v6;
  return static ViewModifier.viewListCount(inputs:body:)((uint64_t)&v8, a2, a3, a4, a5);
}

uint64_t static ViewModifier.viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  v14 = closure #1 in static ViewModifier.viewListCount(inputs:body:)((uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?), v13, v9, v10, v11, v12, a4, a5);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a3 & 1) == 0)
    return v14;
  __break(1u);
  return result;
}

void specialized static ViewModifier.makeBody(modifier:inputs:fields:)()
{
  if (AGTypeGetKind() - 2 >= 4)
    _StringGuts.grow(_:)(38);
  else
    _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static ViewModifier.makeBody(modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  Swift::String v20;
  __int128 v21;
  char v22;
  int v23;
  int v24;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v15 = *((_DWORD *)a5 + 5);
    v16 = *((_BYTE *)a5 + 16);
    v24 = *a3;
    v21 = *a5;
    v22 = v16;
    v23 = v15;
    v17 = type metadata accessor for ModifierBodyAccessor(0, a6, a7, v14);
    v18 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierBodyAccessor<A>, v17);
    return BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)&v24, a4, (uint64_t)&v21, v17, v18);
  }
  return result;
}

uint64_t closure #1 in static ViewModifier.viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  __int128 v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  *(_QWORD *)&v26 = a3;
  *((_QWORD *)&v26 + 1) = a4;
  v27 = a5;
  v28 = a6;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  *(_QWORD *)&v23 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?);
  *((_QWORD *)&v23 + 1) = v12;
  v14 = type metadata accessor for _ViewModifier_Content(255, a7, a8, v13);
  v17 = type metadata accessor for BodyCountInput(0, v14, v15, v16);
  v18 = type metadata accessor for (_:)();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _ViewListCountInputs.append<A, B>(_:to:)((uint64_t)&v23, v17, v17, v18, (uint64_t)&protocol witness table for BodyCountInput<A>);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = v26;
  v24 = v27;
  v25 = v28;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_release();
  return v21;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ViewModifier._viewListCount(inputs:body:)(a1, a2, a3, a4, a5);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ViewListArchivedAnimation.Effect(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[5];
  int v6;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  v6 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  specialized static ViewModifier.makeView(modifier:inputs:body:)(v2, (uint64_t)v5);
}

uint64_t specialized _GraphInputs.recordReusableInput<A>(_:)()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ViewListArchivedAnimation.Effect>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyInput);
  v2 = v1;
  v3 = swift_retain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 72);
    v6 = (uint64_t *)(v4 + 80);
  }
  else
  {
    v5 = &static ReusableInputs.defaultValue;
    v6 = &qword_254287C00;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v7 = *v6;
  v8 = *v5;
  swift_retain();
  swift_release();
  if (v7 && *(_QWORD *)(v7 + 16) == v2)
    return swift_release();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v2;
  v9[3] = &protocol witness table for BodyInput<A>;
  v9[4] = v7;
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)) | v8, (uint64_t)v9);
  swift_release_n();
  return swift_release();
}

uint64_t specialized static BodyInputElement.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      type metadata accessor for (_:_:)();
      return AGCompareValues();
    }
    return 0;
  }
  if ((a6 & 1) != 0)
    return 0;
  type metadata accessor for (_:_:)();
  return AGCompareValues();
}

uint64_t sub_234B5F8C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t destroy for BodyInputElement()
{
  return outlined consume of BodyInputElement();
}

uint64_t initializeBufferWithCopyOfBuffer for BodyInputElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of BodyInputElement();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for BodyInputElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of BodyInputElement();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of BodyInputElement();
  return a1;
}

uint64_t assignWithTake for BodyInputElement(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of BodyInputElement();
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyInputElement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BodyInputElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for BodyInputElement(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for BodyInputElement(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BodyInputElement()
{
  return &type metadata for BodyInputElement;
}

uint64_t specialized BodyInputElement.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  if ((a6 & 1) != 0)
  {
    if ((a3 & 1) == 0)
      goto LABEL_11;
    outlined copy of BodyInputElement();
    outlined copy of BodyInputElement();
    if (one-time initialization token for v5 != -1)
      swift_once();
    v8 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_20:
        type metadata accessor for (_:_:)();
        v7 = AGCompareValues();
LABEL_25:
        outlined consume of BodyInputElement();
        goto LABEL_26;
      }
    }
    else if (static Semantics.forced < v8)
    {
      goto LABEL_20;
    }
    v7 = 1;
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
LABEL_11:
    swift_beginAccess();
    if (static ReuseTrace.recorder)
      AGGraphAddTraceEvent();
    return 0;
  }
  outlined copy of BodyInputElement();
  outlined copy of BodyInputElement();
  if (one-time initialization token for v5 != -1)
    swift_once();
  v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_9:
      type metadata accessor for (_:_:)();
      v7 = AGCompareValues();
      outlined consume of BodyInputElement();
LABEL_26:
      outlined consume of BodyInputElement();
      return v7;
    }
  }
  else if (static Semantics.forced < v6)
  {
    goto LABEL_9;
  }
  outlined consume of BodyInputElement();
  outlined consume of BodyInputElement();
  return 1;
}

unint64_t type metadata accessor for (_:_:)()
{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

uint64_t sub_234B5FE3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t type metadata accessor for BodyCountInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BodyCountInput);
}

void type metadata accessor for Int?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Int?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Int?);
  }
}

uint64_t outlined consume of BodyInputElement?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined consume of BodyInputElement();
  return result;
}

uint64_t partial apply for closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t outlined copy of BodyInputElement?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined copy of BodyInputElement();
  return result;
}

uint64_t sub_234B5FF80()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:)(a1, a2, (_OWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 104));
}

uint64_t sub_234B604D0()
{
  outlined consume of BodyInputElement();
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for _ViewModifier_Content<ViewListArchivedAnimation.Effect>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<ViewListArchivedAnimation.Effect>)
  {
    v4 = type metadata accessor for _ViewModifier_Content(0, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ViewListArchivedAnimation.Effect>);
  }
}

uint64_t sub_234B6055C()
{
  swift_release();
  return swift_deallocObject();
}

SwiftUI::AccessibilityVisibility::Resolved_optional __swiftcall AccessibilityVisibility.Resolved.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::AccessibilityVisibility::Resolved_optional)rawValue;
}

uint64_t AccessibilityVisibility.Resolved.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityVisibility.Resolved()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

SwiftUI::AccessibilityVisibility::Resolved_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityVisibility.Resolved(Swift::Int *a1)
{
  return AccessibilityVisibility.Resolved.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityVisibility.Resolved(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityVisibility.Resolved()
{
  lazy protocol witness table accessor for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityVisibility.Resolved()
{
  lazy protocol witness table accessor for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved();
  return RawRepresentable<>.encode(to:)();
}

uint64_t AccessibilityVisibility.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AccessibilityVisibility.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AccessibilityVisibility.element.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityVisibility.container.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityVisibility.hidden.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityVisibility.transparent.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static AccessibilityVisibility.ignored.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static AccessibilityVisibility.host.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static AccessibilityVisibility.childrenIgnored.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static AccessibilityVisibility.stack.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityVisibility()
{
  Swift::UInt32 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityVisibility()
{
  lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityVisibility()
{
  lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
  return RawRepresentable<>.encode(to:)();
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *result | *v2;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *result & *v2;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *result ^ *v2;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityVisibility(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *a2 & *v2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *result & *v2;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityVisibility@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *v2;
  v4 = *result;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AccessibilityVisibility(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AccessibilityVisibility(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & *v1) == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

void static AccessibilityVisibility.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static AccessibilityVisibility.containerElement.getter(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t AccessibilityVisibility.init(_:)(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_234B60988 + 4 * byte_235287150[*a1]))();
}

void sub_234B60988(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

void sub_234B609A8(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_234B609B4(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t AccessibilityNullableOptionSet<>.resolvesToHidden.getter()
{
  uint64_t v0;

  if ((*(_DWORD *)v0 & 4) != 0)
    return 1;
  if ((*(_BYTE *)(v0 + 4) & 4) != 0)
    return 0;
  return (*(_DWORD *)v0 >> 3) & 1;
}

void AccessibilityNullableOptionSet<>.resolved.getter(_BYTE *a1@<X8>)
{
  int *v1;
  int v2;
  unsigned int v3;

  v2 = *v1;
  if ((*v1 & 4) != 0 || (v2 & 8) != 0 && (v1[1] & 4) == 0)
  {
    *a1 = 3;
  }
  else
  {
    LOBYTE(v3) = 2;
    if ((v2 & 0x10) == 0)
    {
      if ((v2 & 2) != 0)
        LOBYTE(v3) = 2;
      else
        LOBYTE(v3) = 4;
      if ((v2 & 1) != 0)
        v3 = (*v1 & 2u) >> 1;
      if ((v2 & 0x40) != 0)
        LOBYTE(v3) = 0;
    }
    *a1 = v3;
  }
}

uint64_t AccessibilityNullableOptionSet<>.shouldApplyPlatformElementOverride.getter()
{
  int *v0;
  int v1;
  int v2;
  int v6;
  unsigned int v7;
  int v8;

  v1 = *v0;
  v2 = v0[1];
  if ((*v0 & 0xC) == 0 && (v0[1] & 4) == 0 && (v0[1] & 8) == 0)
  {
    if (((*v0 | v2) & 1) != 0)
      return 1;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    if (((v1 | v2) & 2) != 0)
      return v6 | 1u;
  }
  else
  {
    if (((*v0 | v2) & 1) != 0)
      return 257;
    if (((v1 | v2) & 2) != 0)
    {
      v6 = 256;
      return v6 | 1u;
    }
    v7 = ((v0[1] & 4) == 0) & (*v0 >> 3) | ((*v0 & 4u) >> 2);
    v8 = 256;
  }
  return v8 | v7;
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility.Resolved, &type metadata for AccessibilityVisibility.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityVisibility.Resolved, &type metadata for AccessibilityVisibility.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityVisibility()
{
  return &type metadata for AccessibilityVisibility;
}

uint64_t storeEnumTagSinglePayload for AccessibilityVisibility.Resolved(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234B60C94 + 4 * byte_235287159[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234B60CC8 + 4 * byte_235287154[v4]))();
}

uint64_t sub_234B60CC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B60CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B60CD8);
  return result;
}

uint64_t sub_234B60CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B60CECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234B60CF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B60CF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityVisibility.Resolved()
{
  return &type metadata for AccessibilityVisibility.Resolved;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v12;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v13);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = dispatch thunk of Collection.count.getter();
  if (!v18)
    return static Array._allocateUninitialized(_:)();
  v19 = v18;
  v25 = v15;
  v39 = Array.init()();
  v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  v36 = v17;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t PreferenceCombiner.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreferenceCombiner.attributes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PreferenceCombiner.attributes.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferenceCombiner.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_getAssociatedTypeWitness();
  type metadata accessor for WeakAttribute();
  result = Array.init()();
  *a1 = result;
  return result;
}

uint64_t PreferenceCombiner.init(attributes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return PreferenceCombiner.init(attributes:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in PreferenceCombiner.init(attributes:), a4);
}

uint64_t partial apply for closure #1 in PreferenceCombiner.init(attributes:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in PreferenceCombiner.init(attributes:)(a1);
}

{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t PreferenceCombiner.value.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  int v21;
  int v22;
  uint64_t v23;
  Swift::Bool IsNativeType;
  uint64_t v25;
  uint64_t v26;
  uint64_t WeakValue;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v37;
  void (*v38)(void);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v39 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v37 - v11;
  v13 = *v3;
  v14 = *(void (**)(void))(v6 + 16);
  v41 = v5;
  v38 = v14;
  ((void (*)(uint64_t, uint64_t, double))v14)(v5, v6, v10);
  v15 = type metadata accessor for WeakAttribute();
  v16 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B7C6298](v16, v15))
  {
    v17 = 0;
    v18 = v13 + 36;
    v19 = 1;
    v42 = v15;
    do
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      v25 = Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v26 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_14;
      }
      else
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        v25 = swift_unknownObjectRelease();
        v26 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_14:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      if ((v19 & 1) != 0)
      {
        WeakValue = AGGraphGetWeakValue();
        if (WeakValue)
        {
          v28 = v40;
          v29 = v13;
          v30 = v6;
          v31 = a2;
          v32 = v39;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, WeakValue, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v28 + 8))(v31, AssociatedTypeWitness);
          v33 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
          v34 = v32;
          a2 = v31;
          v6 = v30;
          v13 = v29;
          v33(v12, v34, AssociatedTypeWitness);
        }
        else
        {
          v38();
          v35 = v40;
          (*(void (**)(char *, uint64_t))(v40 + 8))(a2, AssociatedTypeWitness);
          v33 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        }
        v33(a2, v12, AssociatedTypeWitness);
        v23 = v42;
      }
      else
      {
        v20 = MEMORY[0x24BDAC7A8](v25);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = v6;
        *((_DWORD *)&v37 - 4) = v21;
        *((_DWORD *)&v37 - 3) = v22;
        (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v6 + 24))(a2, partial apply for closure #1 in PreferenceCombiner.value.getter, v20);
        v23 = v42;
      }
      v19 = 0;
      v18 += 8;
      ++v17;
    }
    while (v26 != MEMORY[0x23B7C6298](v13, v23));
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PreferenceCombiner.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t WeakValue;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, WeakValue, AssociatedTypeWitness);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
}

uint64_t PreferenceCombiner.description.getter()
{
  return specialized PreferenceCombiner.description.getter();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PreferenceCombiner<A>(uint64_t a1)
{
  return static PreferenceCombiner.initialValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceCombiner<A>()
{
  return specialized PreferenceCombiner.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PreferenceCombiner<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v18 - v12;
  static PreferenceCombiner.initialValue.getter(v4, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18[-2] = a2;
  v18[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceCombiner<A>, a2, v16);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)closure #1 in static Rule._updateDefault(_:)partial apply, (uint64_t)&v18[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v17);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceCombiner<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceCombiner<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t static PreferenceCombiner.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(void))(a1 + 16))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t PairPreferenceCombiner.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  unint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t Value;
  _QWORD v12[4];
  int v13;
  int v14;

  v6 = a1;
  v8 = HIDWORD(a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, Value, AssociatedTypeWitness);
  v12[2] = a2;
  v12[3] = a3;
  v13 = v6;
  v14 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))(a3 + 24))(a4, partial apply for closure #1 in PairPreferenceCombiner.value.getter, v12, a2, a3);
}

uint64_t closure #1 in PairPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PairPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static PreferenceCombiner.initialValue.getter(*(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance PairPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;

  return PairPreferenceCombiner.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PairPreferenceCombiner<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - v11;
  static PreferenceCombiner.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17[-2] = a2;
  v17[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PairPreferenceCombiner<A>, a2, v15);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PairPreferenceCombiner<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PairPreferenceCombiner<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t PairwisePreferenceCombinerVisitor.outputs.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_DWORD *)(v2 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t PairwisePreferenceCombinerVisitor.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PairwisePreferenceCombinerVisitor.result.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  *(_DWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*PairwisePreferenceCombinerVisitor.result.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t *PairwisePreferenceCombinerVisitor.init(outputs:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  v3 = *result;
  v4 = *((_DWORD *)result + 2);
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a3 + 32) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)a3 = v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 24) = v6;
  return result;
}

void PairwisePreferenceCombinerVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_DWORD *)(v3 + 24);
  swift_bridgeObjectRetain();
  v9 = PreferencesOutputs.subscript.getter(a2, a2, a3, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22 = v6;
  v23 = v7;
  v11 = PreferencesOutputs.subscript.getter(a2, a2, a3, v10);
  v12 = swift_bridgeObjectRelease();
  if ((v9 & 0x100000000) != 0)
  {
    if ((v11 & 0x100000000) != 0)
      return;
    LOBYTE(v22) = 0;
    v17 = v11;
    goto LABEL_7;
  }
  if ((v11 & 0x100000000) != 0)
  {
    LOBYTE(v22) = 0;
    v17 = v9;
LABEL_7:
    v16 = v17;
    goto LABEL_8;
  }
  v22 = __PAIR64__(v11, v9);
  MEMORY[0x24BDAC7A8](v12);
  v18[2] = swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for PairPreferenceCombiner(0, a2, a3, v13);
  v20 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PairPreferenceCombiner<A>, v19);
  v14 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v22, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v18, v19, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v15);
  LOBYTE(v22) = 0;
  v16 = v21;
LABEL_8:
  PreferencesOutputs.subscript.setter(v16, a2, a2, a3);
}

uint64_t MultiPreferenceCombinerVisitor.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiPreferenceCombinerVisitor.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MultiPreferenceCombinerVisitor.result.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*MultiPreferenceCombinerVisitor.result.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MultiPreferenceCombinerVisitor.init(outputs:result:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void MultiPreferenceCombinerVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22[7];

  v22[6] = *MEMORY[0x24BDAC8D0];
  v22[0] = *v3;
  v22[3] = a2;
  v22[4] = a3;
  type metadata accessor for [PreferencesOutputs]();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Attribute();
  lazy protocol witness table accessor for type [PreferencesOutputs] and conformance [A]();
  swift_bridgeObjectRetain();
  v8 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x23B7C6268](v8, v7);
  if (v9 == 2)
  {
    Array.subscript.getter();
    Array.subscript.getter();
    v10 = swift_bridgeObjectRelease();
    HIDWORD(v22[0]) = v21;
    MEMORY[0x24BDAC7A8](v10);
    v18 = AssociatedTypeWitness;
    v19 = type metadata accessor for PairPreferenceCombiner(0, a2, a3, v11);
    v20 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PairPreferenceCombiner<A>, v19);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v17, v19, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v12);
LABEL_8:
    v13 = v21;
    LOBYTE(v22[0]) = 0;
    goto LABEL_9;
  }
  if (v9 != 1)
  {
    if (!v9)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v14 = PreferenceCombiner.init(attributes:)(v8, a2, a3, v22);
    MEMORY[0x24BDAC7A8](v14);
    v18 = AssociatedTypeWitness;
    v19 = type metadata accessor for PreferenceCombiner(0, a2, a3, v15);
    v20 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceCombiner<A>, v19);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v17, v19, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v16);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  Array.subscript.getter();
  swift_bridgeObjectRelease();
  v13 = LODWORD(v22[0]);
  LOBYTE(v21) = 0;
LABEL_9:
  PreferencesOutputs.subscript.setter(v13, a2, a2, a3);
}

uint64_t (*PreferenceAggregator.attributes.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferenceAggregator.init(attributes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return PreferenceCombiner.init(attributes:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in PreferenceCombiner.init(attributes:), a4);
}

uint64_t PreferenceCombiner.init(attributes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[6];

  v13[5] = a1;
  v13[2] = a2;
  v13[3] = a3;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Attribute();
  v7 = type metadata accessor for Array();
  v8 = (char *)type metadata accessor for WeakAttribute();
  v9 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v7);
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a4, (uint64_t)v13, v7, v8, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  result = swift_bridgeObjectRelease();
  *a5 = v11;
  return result;
}

uint64_t PreferenceAggregator.value.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[5] = *v1;
  v2 = *(_QWORD *)(a1 + 24);
  v9[2] = *(_QWORD *)(a1 + 16);
  v9[3] = v2;
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  type metadata accessor for WeakAttribute();
  v4 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v4);
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PreferenceAggregator.value.getter, (uint64_t)v9, v4, AssociatedTypeWitness, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t closure #1 in PreferenceAggregator.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t WeakValue;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, WeakValue, AssociatedTypeWitness);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceAggregator<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = PreferenceAggregator.value.getter(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceAggregator<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceAggregator<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t HostPreferencesCombiner.init(keys:values:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *MEMORY[0x24BE096C0];
  if ((a2 & 0x100000000) == 0)
    v3 = a2;
  *(_DWORD *)a3 = result;
  *(_DWORD *)(a3 + 4) = v3;
  *(_QWORD *)(a3 + 8) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t HostPreferencesCombiner.addChild(keys:values:)(int a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = AGCreateWeakAttribute();
  v6 = v5;
  v7 = HIDWORD(v5);
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_10;
  if (*(_DWORD *)(v8 + 32) != a1)
  {
    if (v9 != 1)
    {
      v11 = 1;
      v12 = 48;
      while (*(_DWORD *)(v8 + v12) != a1)
      {
        v13 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          goto LABEL_19;
        }
        ++v11;
        v12 += 16;
        if (v13 == v9)
          goto LABEL_10;
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
LABEL_10:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_19:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 + 1, 1, (_QWORD *)v8);
      v8 = result;
    }
    v11 = *(_QWORD *)(v8 + 16);
    v14 = *(_QWORD *)(v8 + 24);
    if (v11 >= v14 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v11 + 1, 1, (_QWORD *)v8);
      v8 = result;
    }
    *(_QWORD *)(v8 + 16) = v11 + 1;
    goto LABEL_17;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  v11 = 0;
  if ((result & 1) != 0)
    goto LABEL_16;
LABEL_4:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v8);
  v8 = result;
LABEL_15:
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
LABEL_16:
  if (v11 < *(_QWORD *)(v8 + 16))
  {
LABEL_17:
    v15 = v8 + 16 * v11;
    *(_DWORD *)(v15 + 32) = v6;
    *(_DWORD *)(v15 + 36) = v7;
    *(_QWORD *)(v15 + 40) = a2;
    *(_QWORD *)(v2 + 8) = v8;
    return result;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t HostPreferencesCombiner.removeChild(keys:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t i;
  int *v5;
  int v6;
  unint64_t v7;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    if (*(_DWORD *)(v2 + 32) == (_DWORD)result)
    {
      i = 0;
LABEL_4:
      specialized Array.remove(at:)(i);
      return 1;
    }
    if (v3 != 1)
    {
      v5 = (int *)(v2 + 48);
      for (i = 1; ; ++i)
      {
        v6 = *v5;
        v5 += 4;
        if (v6 == (_DWORD)result)
          break;
        v7 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
          return result;
        }
        if (v7 == v3)
          return 0;
      }
      goto LABEL_4;
    }
  }
  return 0;
}

uint64_t HostPreferencesCombiner.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *(unsigned int *)(v1 + 4);
  v4 = *(_QWORD *)(v1 + 8);
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    v5 = *(_QWORD *)AGGraphGetValue();
    result = swift_retain();
    if (*(_QWORD *)(v4 + 16))
      goto LABEL_3;
LABEL_8:
    *a1 = v5;
    return result;
  }
  v5 = 0;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_8;
LABEL_3:
  v10 = v4;
  v11 = v5;
  Value = AGGraphGetValue();
  v7 = *(_QWORD *)Value;
  v8 = *(_QWORD *)(*(_QWORD *)Value + 16);
  if (v8)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v7 + 40;
    do
    {
      (*(void (**)(uint64_t *, void *, _UNKNOWN **))(*(_QWORD *)v9 + 16))(&v10, &unk_250637DB0, &protocol witness table for HostPreferencesCombiner.CombineValues);
      v9 += 16;
      --v8;
    }
    while (v8);
    swift_release();
    swift_bridgeObjectRelease();
    v5 = v11;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  *a1 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t HostPreferencesCombiner.CombineValues.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *WeakValue;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;

  v75 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for PreferenceList.Value(255, AssociatedTypeWitness, v7, v8);
  v10 = type metadata accessor for Optional();
  v71 = *(_QWORD *)(v10 - 8);
  v72 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v70 = (uint64_t)&v62 - v11;
  v73 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v62 - v16;
  v68 = AssociatedTypeWitness;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v62 - v23;
  v67 = v3;
  v77 = *(_QWORD *)(v3 + 8);
  result = PreferenceList.contains<A>(_:)(v75, a2);
  if ((result & 1) == 0)
  {
    v69 = v9;
    v63 = v17;
    v64 = v14;
    v65 = v18;
    v66 = v24;
    v26 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
    v74 = a3;
    v26(a2, a3);
    v76 = 0;
    v27 = v68;
    v28 = *(_QWORD *)v67;
    v29 = *(_QWORD *)(*(_QWORD *)v67 + 16);
    if (v29)
    {
      v30 = (uint64_t)v21;
      v31 = v3 + 8;
      v32 = a2;
      result = swift_bridgeObjectRetain();
      v33 = 0;
      v34 = -v29;
      v35 = v28 + 40;
      v36 = 1;
      v62 = v28 + 40;
LABEL_4:
      LODWORD(v67) = v36;
      v37 = v35 + 16 * v33++;
      while ((unint64_t)(v33 - 1) < *(_QWORD *)(v28 + 16))
      {
        v41 = v32;
        v42 = v31;
        result = AGGraphGetWeakValue();
        if (result)
        {
          v77 = *(_QWORD *)result;
          v44 = v30;
          result = PreferenceKeys.contains<A>(_:)(v75, v41, v74, v43);
          if ((result & 1) == 0)
          {
            WeakValue = (uint64_t *)AGGraphGetWeakValue();
            if (WeakValue)
            {
              v77 = *WeakValue;
              v38 = v70;
              PreferenceList.valueIfPresent<A>(for:)(v41, v74, v70);
              v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v38, 1, v69);
              v40 = v71;
              v39 = v72;
              if (v46 != 1)
              {
                v47 = v63;
                v48 = v38;
                v49 = v69;
                v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 32))(v63, v48, v69);
                if ((v67 & 1) != 0)
                {
                  v51 = v65;
                  v52 = v66;
                  v53 = v68;
                  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v68);
                  v54 = v52;
                  v49 = v69;
                  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v54, v47, v53);
                  v76 = *(_DWORD *)&v47[*(int *)(v49 + 28)];
                }
                else
                {
                  v55 = MEMORY[0x24BDAC7A8](v50);
                  v56 = v74;
                  *(&v62 - 4) = v41;
                  *(&v62 - 3) = v56;
                  *(&v62 - 2) = (uint64_t)&v76;
                  *(&v62 - 1) = (uint64_t)v47;
                  (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v56 + 24))(v66, partial apply for closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:), v55);
                }
                result = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v47, v49);
                v36 = 0;
                v30 = v44;
                v31 = v42;
                v32 = v41;
                v35 = v62;
                if (!(v34 + v33))
                {
                  swift_bridgeObjectRelease();
                  v27 = v68;
                  v57 = v69;
                  v58 = v73;
LABEL_20:
                  v59 = v65;
                  v60 = v66;
                  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v30, v66, v27);
                  LODWORD(v77) = v76;
                  v61 = (uint64_t)v64;
                  PreferenceList.Value.init(value:seed:)(v30, (int *)&v77, v27, (uint64_t)v64);
                  specialized PreferenceList.subscript.setter(v61, v75, v32, v74);
                  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v61, v57);
                  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v60, v27);
                }
                goto LABEL_4;
              }
            }
            else
            {
              v38 = v70;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v70, 1, 1, v69);
              v40 = v71;
              v39 = v72;
            }
            result = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
          }
        }
        ++v33;
        v37 += 16;
        v32 = v41;
        if (v34 + v33 == 1)
        {
          swift_bridgeObjectRelease();
          v27 = v68;
          v57 = v69;
          v58 = v73;
          if ((v67 & 1) != 0)
            goto LABEL_19;
          goto LABEL_20;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_19:
      v59 = v65;
      v60 = v66;
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v60, v27);
    }
  }
  return result;
}

uint64_t closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_DWORD *)(a2
                 + *(int *)(type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v7, v8) + 28));
  v10 = *a1;
  if ((_DWORD)v10 != -1 && v9 != 0)
  {
    if ((_DWORD)v10 && v9 != -1)
      v9 = merge32(_:_:)(v10, v9);
    *a1 = v9;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, a2, AssociatedTypeWitness);
}

void protocol witness for static Rule.initialValue.getter in conformance HostPreferencesCombiner(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t partial apply for closure #1 in PreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PreferenceCombiner.value.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t specialized PreferenceCombiner.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 548047074;
}

uint64_t type metadata accessor for PairPreferenceCombiner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PairPreferenceCombiner);
}

unint64_t partial apply for closure #1 in MultiPreferenceCombinerVisitor.visit<A>(key:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = PreferencesOutputs.subscript.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void type metadata accessor for [PreferencesOutputs]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [PreferencesOutputs])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [PreferencesOutputs]);
  }
}

unint64_t lazy protocol witness table accessor for type [PreferencesOutputs] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PreferencesOutputs] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PreferencesOutputs] and conformance [A])
  {
    type metadata accessor for [PreferencesOutputs]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PreferencesOutputs] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for PreferenceCombiner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreferenceCombiner);
}

uint64_t partial apply for closure #1 in PreferenceAggregator.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PreferenceAggregator.value.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void base witness table accessor for _AttributeBody in PreferenceCombiner<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for PreferenceCombiner<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceCombiner<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in PreferenceAggregator<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for PreferenceAggregator<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceAggregator<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HostPreferencesCombiner and conformance HostPreferencesCombiner()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostPreferencesCombiner and conformance HostPreferencesCombiner;
  if (!lazy protocol witness table cache variable for type HostPreferencesCombiner and conformance HostPreferencesCombiner)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HostPreferencesCombiner, &type metadata for HostPreferencesCombiner);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostPreferencesCombiner and conformance HostPreferencesCombiner);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for HostPreferencesCombiner(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type HostPreferencesCombiner and conformance HostPreferencesCombiner();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for PairwisePreferenceCombinerVisitor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairwisePreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PairwisePreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for PairwisePreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for PairwisePreferenceCombinerVisitor()
{
  return &type metadata for PairwisePreferenceCombinerVisitor;
}

uint64_t initializeBufferWithCopyOfBuffer for MultiPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultiPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MultiPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiPreferenceCombinerVisitor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultiPreferenceCombinerVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultiPreferenceCombinerVisitor()
{
  return &type metadata for MultiPreferenceCombinerVisitor;
}

uint64_t type metadata accessor for PreferenceAggregator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreferenceAggregator);
}

_QWORD *initializeBufferWithCopyOfBuffer for HostPreferencesCombiner(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for HostPreferencesCombiner()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for HostPreferencesCombiner(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for HostPreferencesCombiner(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HostPreferencesCombiner(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HostPreferencesCombiner(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HostPreferencesCombiner()
{
  return &type metadata for HostPreferencesCombiner;
}

ValueMetadata *type metadata accessor for HostPreferencesCombiner.Child()
{
  return &type metadata for HostPreferencesCombiner.Child;
}

uint64_t destroy for HostPreferencesCombiner.CombineValues()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for HostPreferencesCombiner.CombineValues(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for HostPreferencesCombiner.CombineValues(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for HostPreferencesCombiner.CombineValues(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_release();
  return a1;
}

void *type metadata accessor for HostPreferencesCombiner.CombineValues()
{
  return &unk_250637DB0;
}

uint64_t instantiation function for generic protocol witness table for PairPreferenceCombiner<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PairPreferenceCombiner<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in PairPreferenceCombiner<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in PairPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PairPreferenceCombiner.value.getter(a1);
}

uint64_t partial apply for closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:)(*(unsigned int **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t closure #1 in static Rule._updateDefault(_:)partial apply()
{
  return partial apply for closure #1 in static Rule._updateDefault(_:)();
}

float ContentStyle.MaterialStyle.resolveColor(in:)()
{
  uint64_t v0;
  float result;

  result = 1.0;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
    return 0.0;
  return result;
}

uint64_t SpeedAnimation.animate<A, B>(base:value:time:context:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(a9 + 16))(a4, a5, a6, a8, a7, a9, a1 * a2);
}

uint64_t SpeedAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v19 == v16)
  {
    (*(void (**)(char *))(v15 + 16))(v18);
    Animation.init<A>(_:)((uint64_t)v18, a9, a11, v20);
    v21 = (*(uint64_t (**)(double))(a11 + 32))(a3 * a4);
    swift_release();
  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance SpeedAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  double *v8;

  return SpeedAnimation.animate<A, B>(base:value:time:context:)(a8, *v8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:) in conformance SpeedAnimation(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  double *v10;

  return SpeedAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(a1, *a2, a9, *v10, a3, a4, a5, a6, a7, a8, a10);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance SpeedAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v5;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = v7;
  *(_QWORD *)(v11 + 48) = v8;
  *(_QWORD *)(v11 + 56) = v9;
  *(_BYTE *)(v11 + 64) = v10;
  *(_QWORD *)a2 = v11;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_BYTE *)(a2 + 40) = 8;
  return outlined copy of Animation.Function(v5, v6, v7, v8, v9, v10);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpeedAnimation()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SpeedAnimation()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpeedAnimation()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpeedAnimation(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t Animation.speed(_:)(uint64_t a1, double a2)
{
  uint64_t (*v2)(double *, ValueMetadata *, unint64_t);
  unint64_t v3;
  double v5;

  v5 = a2;
  v2 = *(uint64_t (**)(double *, ValueMetadata *, unint64_t))(*(_QWORD *)a1 + 144);
  v3 = lazy protocol witness table accessor for type SpeedAnimation and conformance SpeedAnimation();
  return v2(&v5, &type metadata for SpeedAnimation, v3);
}

unint64_t lazy protocol witness table accessor for type SpeedAnimation and conformance SpeedAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation;
  if (!lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpeedAnimation, &type metadata for SpeedAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation;
  if (!lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpeedAnimation, &type metadata for SpeedAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation;
  if (!lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpeedAnimation, &type metadata for SpeedAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeedAnimation()
{
  return &type metadata for SpeedAnimation;
}

_QWORD *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SpeedAnimation(_QWORD *result)
{
  double *v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;

  v2 = *v1;
  if (*v1 != 0.0)
  {
    v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0x31uLL);
    v4 = v3[1];
    v5 = v4 + 8;
    if (__OFADD__(v4, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v5)
    {
      v3[1] = v5;
      result = (_QWORD *)(*v3 + v4);
LABEL_5:
      *(double *)result = v2;
      return result;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v5);
    goto LABEL_5;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SpeedAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SpeedAnimation and conformance SpeedAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234B63930()
{
  uint64_t v0;

  outlined consume of Animation.Function(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject();
}

uint64_t outlined copy of Animation.Function(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  switch(a6)
  {
    case 6:
    case 7:
    case 8:
    case 9:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void KeyframeTrack.init<>(content:)(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  type metadata accessor for KeyframeTrack();
}

uint64_t sub_234B639F8()
{
  uint64_t (*v0)(void);

  return v0();
}

void type metadata accessor for KeyframeTrack()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void KeyframeTrack.init(_:content:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for KeyframeTrack();
}

uint64_t sub_234B63A7C()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  v1 = swift_retain();
  v0(v1);
  return swift_release();
}

uint64_t KeyframeTrack._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a2;
  v32 = a1;
  v7 = a4[2];
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - v10;
  v12 = a4[3];
  v13 = type metadata accessor for Optional();
  v29 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - v14;
  v33 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v4;
  v19 = (_QWORD *)*v4;
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  v20 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v15, 1, 1, v12);
  }
  else
  {
    swift_getAtKeyPath();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v15, 0, 1, v12);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v7);
  }
  v21 = v19;
  v22 = KeyframeTrack.resolve(initialValue:initialVelocity:)((uint64_t)v18, (uint64_t)v15, a4);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v12);
  v25 = type metadata accessor for _ResolvedKeyframes(0, v7, v23, v24);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  _ResolvedKeyframes.append<A>(keyPath:path:)(v21, v22, v25, AssociatedConformanceWitness);
  return swift_bridgeObjectRelease();
}

uint64_t KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[9];
  uint64_t v14;

  v7 = a3[4];
  v6 = a3[5];
  v8 = a3[3];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  _ResolvedKeyframeTrackContent.init()(v8, AssociatedConformanceWitness, v10, &v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(&v14, v7, v6);
  v13[2] = a3[2];
  v13[3] = v8;
  v13[4] = v7;
  v13[5] = v6;
  v13[6] = v14;
  v13[7] = a2;
  v13[8] = a1;
  v11 = AnimationPath.init(_:)((void (*)(uint64_t *))partial apply for closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:), (uint64_t)v13, v8, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  return v11;
}

_UNKNOWN **associated type witness table accessor for Keyframes.Body : Keyframes in KeyframeTrack<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t result;
  char *v134;
  char *v135;
  _QWORD v136[25];
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;

  v177 = a4;
  v138 = a3;
  v194 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for CubicKeyframeHelper.Connection(0, a6, AssociatedConformanceWitness, v9);
  v164 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v155 = (char *)v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v159 = (char *)v136 - v13;
  v15 = type metadata accessor for CubicKeyframeHelper(0, a6, AssociatedConformanceWitness, v14);
  v154 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v136 - v16;
  v174 = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic(0, a6, AssociatedConformanceWitness, v18);
  v170 = *(_QWORD *)(v174 - 8);
  MEMORY[0x24BDAC7A8](v174);
  v136[7] = (char *)v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v136[8] = (char *)v136 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v188 = (char *)v136 - v23;
  v25 = type metadata accessor for HermiteCurve(0, a6, AssociatedConformanceWitness, v24);
  MEMORY[0x24BDAC7A8](v25);
  v168 = (char *)v136 - v26;
  v172 = type metadata accessor for _ResolvedKeyframeTrackContent.Linear(0, a6, AssociatedConformanceWitness, v27);
  v171 = *(_QWORD *)(v172 - 8);
  MEMORY[0x24BDAC7A8](v172);
  v136[6] = (char *)v136 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v136[13] = (char *)v136 - v30;
  MEMORY[0x24BDAC7A8](v31);
  v167 = (char *)v136 - v32;
  v183 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v136[9] = (char *)v136 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v153 = (char *)v136 - v36;
  MEMORY[0x24BDAC7A8](v37);
  v152 = (char *)v136 - v38;
  MEMORY[0x24BDAC7A8](v39);
  v151 = (char *)v136 - v40;
  v137 = type metadata accessor for Optional();
  v136[24] = *(_QWORD *)(v137 - 8);
  MEMORY[0x24BDAC7A8](v137);
  v136[14] = (char *)v136 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v136[15] = (char *)v136 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v136[22] = (char *)v136 - v45;
  v47 = type metadata accessor for AnimationPath.Element(255, a6, AssociatedConformanceWitness, v46);
  v181 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v181 - 8);
  MEMORY[0x24BDAC7A8](v181);
  v150 = (char *)v136 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v50);
  v149 = (char *)v136 - v51;
  MEMORY[0x24BDAC7A8](v52);
  v162 = (char *)v136 - v53;
  MEMORY[0x24BDAC7A8](v54);
  v136[21] = (char *)v136 - v55;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v189 = type metadata accessor for Optional();
  v187 = *(_QWORD *)(v189 - 8);
  MEMORY[0x24BDAC7A8](v189);
  v136[5] = (char *)v136 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v58);
  v136[10] = (char *)v136 - v59;
  MEMORY[0x24BDAC7A8](v60);
  v148 = (char *)v136 - v61;
  MEMORY[0x24BDAC7A8](v62);
  v136[3] = (char *)v136 - v63;
  MEMORY[0x24BDAC7A8](v64);
  v147 = (char *)v136 - v65;
  MEMORY[0x24BDAC7A8](v66);
  v146 = (char *)v136 - v67;
  MEMORY[0x24BDAC7A8](v68);
  v145 = (char *)v136 - v69;
  MEMORY[0x24BDAC7A8](v70);
  v144 = (char *)v136 - v71;
  MEMORY[0x24BDAC7A8](v72);
  v143 = (char *)v136 - v73;
  MEMORY[0x24BDAC7A8](v74);
  v142 = (char *)v136 - v75;
  v176 = type metadata accessor for _ResolvedKeyframeTrackContent._Spring(0, a6, AssociatedConformanceWitness, v76);
  v169 = *(_QWORD *)(v176 - 8);
  MEMORY[0x24BDAC7A8](v176);
  v78 = (char *)v136 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v79);
  v186 = (char *)v136 - v80;
  v199 = v47;
  v182 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v185 = (char *)v136 - v82;
  v200 = AssociatedTypeWitness;
  v83 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v84 = a2;
  v192 = v83;
  MEMORY[0x24BDAC7A8](v85);
  v136[2] = (char *)v136 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v87);
  v136[1] = (char *)v136 - v88;
  MEMORY[0x24BDAC7A8](v89);
  v136[20] = (char *)v136 - v90;
  MEMORY[0x24BDAC7A8](v91);
  v136[0] = (char *)v136 - v92;
  MEMORY[0x24BDAC7A8](v93);
  v136[12] = (char *)v136 - v94;
  MEMORY[0x24BDAC7A8](v95);
  v136[19] = (char *)v136 - v96;
  MEMORY[0x24BDAC7A8](v97);
  v166 = (char *)v136 - v98;
  MEMORY[0x24BDAC7A8](v99);
  v141 = (char *)v136 - v100;
  MEMORY[0x24BDAC7A8](v101);
  v140 = (char *)v136 - v102;
  MEMORY[0x24BDAC7A8](v103);
  v139 = (char *)v136 - v104;
  MEMORY[0x24BDAC7A8](v105);
  v158 = (char *)v136 - v106;
  MEMORY[0x24BDAC7A8](v107);
  v157 = (char *)v136 - v108;
  MEMORY[0x24BDAC7A8](v109);
  v165 = (char *)v136 - v110;
  MEMORY[0x24BDAC7A8](v111);
  v136[11] = (char *)v136 - v112;
  MEMORY[0x24BDAC7A8](v113);
  v136[18] = (char *)v136 - v114;
  MEMORY[0x24BDAC7A8](v115);
  v175 = (char *)v136 - v116;
  MEMORY[0x24BDAC7A8](v117);
  v190 = (char *)v136 - v118;
  v193 = AssociatedConformanceWitness;
  v120 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment(0, a6, AssociatedConformanceWitness, v119);
  v198 = *(_QWORD *)(v120 - 8);
  MEMORY[0x24BDAC7A8](v120);
  v136[17] = (char *)v136 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v122);
  v136[16] = (char *)v136 - v123;
  MEMORY[0x24BDAC7A8](v124);
  v136[4] = (char *)v136 - v125;
  MEMORY[0x24BDAC7A8](v126);
  v136[23] = (char *)v136 - v127;
  MEMORY[0x24BDAC7A8](v128);
  v196 = (char *)v136 - v129;
  MEMORY[0x24BDAC7A8](v130);
  v195 = (char *)v136 - v131;
  v203 = v84;
  v132 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D8], v132);
  result = RandomAccessCollection<>.indices.getter();
  if (v201 != v202)
  {
    if (v202 < v201)
    {
      __break(1u);
    }
    else if (v201 < v202)
    {
      v191 = v182 + 8;
      v179 = v48 + 8;
      v180 = v84;
      v160 = v10;
      v161 = v15;
      v163 = v17;
      v156 = v78;
      v178 = v120;
      v173 = a6;
      v184 = v202;
      v197 = v201 + 1;
      v134 = v195;
      Array.subscript.getter();
      (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v196, v134, v120);
      v135 = (char *)&loc_234B64A64 + *((int *)qword_234B66830 + swift_getEnumCaseMultiPayload());
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x234B66830);
  }
  return result;
}

uint64_t CubicKeyframeHelper.init(from:to:duration:start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t AssociatedTypeWitness;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v24)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
  v17(a7, a1, AssociatedTypeWitness);
  v19 = (int *)type metadata accessor for CubicKeyframeHelper(0, a5, a6, v18);
  v17(a7 + v19[9], a2, AssociatedTypeWitness);
  *(double *)(a7 + v19[10]) = a8;
  v20 = a7 + v19[11];
  v22 = type metadata accessor for CubicKeyframeHelper.Connection(0, a5, a6, v21);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
  v24(v20, a3, v22);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v24)(a7 + v19[12], a4, v22);
}

uint64_t CubicKeyframeHelper.curve.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  double v38;
  uint64_t TupleTypeMetadata2;
  uint64_t v40;
  uint64_t AssociatedConformanceWitness;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int *v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  int v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  double v66;
  char *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  void (*v80)(double *, uint64_t, uint64_t, double);
  double *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  char *v88;

  v4 = v3;
  v83 = a3;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for CubicKeyframeHelper.Connection(0, v7, v6, a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v81 = (double *)((char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (double *)((char *)&v73 - v12);
  v87 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v84 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v74 = (char *)&v73 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v77 = (char *)&v73 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v79 = (char *)&v73 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v78 = (uint64_t)&v73 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v76 = (char *)&v73 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v73 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v82 = (char *)&v73 - v31;
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v73 - v34;
  v36 = v4 + *(int *)(a1 + 44);
  v80 = *(void (**)(double *, uint64_t, uint64_t, double))(v9 + 16);
  v80(v13, v36, v8, v33);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v85 = v15;
  v86 = (int *)a1;
  v88 = v35;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v38 = *v13;
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v40 = v85;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v76, (char *)v13 + *(int *)(TupleTypeMetadata2 + 48), AssociatedTypeWitness);
      v75 = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v42 = *(_QWORD *)(AssociatedConformanceWitness + 8);
      v43 = (uint64_t)v79;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v44 = v78;
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, v78, 0.5);
      v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v46 = v4;
      v45(v43, AssociatedTypeWitness);
      v47 = v77;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v73 = AssociatedConformanceWitness;
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, v43, 0.5);
      v45((uint64_t)v47, AssociatedTypeWitness);
      MEMORY[0x23B7C7090](v44, v43, AssociatedTypeWitness, v42);
      v45(v43, AssociatedTypeWitness);
      v48 = v44;
      v49 = v86;
      v45(v48, AssociatedTypeWitness);
      v50 = *(double *)(v46 + v49[10]);
      if (v50 > 0.0 && v38 > 0.0)
        (*(void (**)(uint64_t, double))(v73 + 16))(AssociatedTypeWitness, (v50 + v50) / (v38 + v50));
      v45((uint64_t)v76, AssociatedTypeWitness);
      v7 = v75;
      v51 = v87;
      v15 = v85;
    }
    else
    {
      v51 = v87;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      v15 = v85;
      v49 = v86;
      v46 = v4;
    }
  }
  else
  {
    (*(void (**)(char *, double *, uint64_t))(v15 + 32))(v29, v13, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v35, v29, AssociatedTypeWitness);
    v52 = *(double *)(v4 + *(int *)(a1 + 40));
    v51 = v87;
    v46 = v4;
    if (v52 > 0.0)
    {
      v53 = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, double))(v53 + 16))(AssociatedTypeWitness, v53, v52);
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, AssociatedTypeWitness);
    v49 = v86;
  }
  v54 = v81;
  v55 = (uint64_t)v82;
  ((void (*)(double *, uint64_t, uint64_t))v80)(v81, v46 + v49[12], v8);
  v56 = swift_getEnumCaseMultiPayload();
  if (v56)
  {
    if (v56 == 1)
    {
      v57 = *v54;
      v58 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v84, (char *)v54 + *(int *)(v58 + 48), AssociatedTypeWitness);
      v82 = (char *)(v46 + v49[9]);
      v75 = v7;
      v59 = swift_getAssociatedConformanceWitness();
      v60 = *(_QWORD *)(v59 + 8);
      v61 = (uint64_t)v79;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v62 = v78;
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v59, v78, 0.5);
      v63 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v63(v61, AssociatedTypeWitness);
      v64 = v77;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v59, v61, 0.5);
      v63((uint64_t)v64, AssociatedTypeWitness);
      v65 = v60;
      v49 = v86;
      MEMORY[0x23B7C7090](v62, v61, AssociatedTypeWitness, v65);
      v63(v61, AssociatedTypeWitness);
      v63(v62, AssociatedTypeWitness);
      v66 = *(double *)(v46 + v49[10]);
      if (v66 > 0.0 && v57 > 0.0)
        (*(void (**)(uint64_t, uint64_t, double))(v59 + 16))(AssociatedTypeWitness, v59, (v66 + v66) / (v57 + v66));
      v63((uint64_t)v84, AssociatedTypeWitness);
      v7 = v75;
      v51 = v87;
      v15 = v85;
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
    }
  }
  else
  {
    v67 = v74;
    (*(void (**)(char *, double *, uint64_t))(v15 + 32))(v74, v54, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v55, v67, AssociatedTypeWitness);
    v68 = *(double *)(v46 + v49[10]);
    if (v68 > 0.0)
    {
      v69 = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, double))(v69 + 16))(AssociatedTypeWitness, v69, v68);
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v67, AssociatedTypeWitness);
  }
  v70 = (uint64_t)v88;
  static HermiteCurve.hermite(start:end:startTangent:endTangent:)(v46, v46 + v49[9], (uint64_t)v88, v55, v7, v51, v83);
  v71 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v71(v55, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v71)(v70, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for KeyframeTrack<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for KeyframeTrack()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyframeTrack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 32);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for KeyframeTrack(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
}

_QWORD *initializeWithCopy for KeyframeTrack(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 32);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *assignWithCopy for KeyframeTrack(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *initializeWithTake for KeyframeTrack(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for KeyframeTrack(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrack(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B67514 + 4 * byte_2352879C0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for KeyframeTrack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t partial apply for closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(a1, v1[6], v1[7], v1[8], v1[2], v1[3]);
}

uint64_t type metadata accessor for CubicKeyframeHelper.Connection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CubicKeyframeHelper.Connection);
}

uint64_t type metadata accessor for CubicKeyframeHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CubicKeyframeHelper);
}

uint64_t type metadata completion function for CubicKeyframeHelper(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for CubicKeyframeHelper.Connection(319, v2, v1, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CubicKeyframeHelper(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v36;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7;
  v9 = v6 + v7;
  v10 = v6 + 7;
  v11 = ~(v7 | 7);
  v12 = v7 + 8;
  if (((v8 + 8) & ~v8) + v6 <= v6)
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = ((v7 + 8) & ~(unint64_t)v7) + v6;
  v14 = ((v13
        + 1
        + (v7 | 7)
        + ((v7
          + 8
          + ((v6 + 7 + ((v6 + v7) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)) & ~(v7 | 7))) & ~(v7 | 7))
      + v13
      + 1;
  v15 = v7 & 0x100000;
  if (v8 > 7 || v15 != 0 || v14 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = v18 + ((v8 + 16) & v11);
    swift_retain();
  }
  else
  {
    v20 = AssociatedTypeWitness;
    v21 = ~v8;
    v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v22(a1, a2, AssociatedTypeWitness);
    v36 = a1;
    v23 = ((unint64_t)a1 + v9) & v21;
    v24 = ((unint64_t)a2 + v9) & v21;
    v22((uint64_t *)v23, (uint64_t *)v24, v20);
    v25 = (_QWORD *)((v10 + v23) & 0xFFFFFFFFFFFFF8);
    v26 = (_QWORD *)((v10 + v24) & 0xFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = (_QWORD *)(((unint64_t)v25 + 15) & v11);
    v28 = (uint64_t *)(((unint64_t)v26 + 15) & v11);
    v29 = *((unsigned __int8 *)v28 + v13);
    if (v29 >= 2)
    {
      if (v13 <= 3)
        v30 = v13;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 1)
    {
      *v27 = *v28;
      v22((uint64_t *)(((unint64_t)v27 + v12) & v21), (uint64_t *)(((unint64_t)v28 + v12) & v21), v20);
      *((_BYTE *)v27 + v13) = 1;
    }
    else
    {
      v22(v27, v28, v20);
      *((_BYTE *)v27 + v13) = 0;
    }
    v31 = (_QWORD *)(((unint64_t)v27 + v13 + 8) & v11);
    v32 = (_QWORD *)(((unint64_t)v28 + v13 + 8) & v11);
    v33 = *((unsigned __int8 *)v32 + v13);
    if (v33 >= 2)
    {
      if (v13 <= 3)
        v34 = v13;
      else
        v34 = 4;
      __asm { BR              X12 }
    }
    if (v33 == 1)
    {
      *v31 = *v32;
      v22((uint64_t *)(((unint64_t)v31 + v12) & v21), (uint64_t *)(((unint64_t)v32 + v12) & v21), v20);
      *((_BYTE *)v31 + v13) = 1;
    }
    else
    {
      ((void (*)(_QWORD *))v22)(v31);
      *((_BYTE *)v31 + v13) = 0;
    }
    return v36;
  }
  return (uint64_t *)v19;
}

uint64_t destroy for CubicKeyframeHelper(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v18(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v4 + a1 + v5) & ~v5;
  v18(v6, AssociatedTypeWitness);
  v7 = v5 | 7;
  v8 = v5 + 8;
  v9 = (v5 + 8 + ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(v5 | 7);
  if (((v5 + 8) & ~v5) + v4 > v4)
    v4 += (v5 + 8) & ~v5;
  v10 = *(unsigned __int8 *)(v9 + v4);
  if (v10 >= 2)
  {
    if (v4 <= 3)
      v11 = v4;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v12 = ~v5;
  if (v10 == 1)
    v13 = (v8 + v9) & v12;
  else
    v13 = v9;
  v18(v13, AssociatedTypeWitness);
  v14 = (v7 + v4 + v9 + 1) & ~v7;
  v15 = *(unsigned __int8 *)(v14 + v4);
  if (v15 >= 2)
  {
    if (v4 <= 3)
      v16 = v4;
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  if (v15 == 1)
    v14 = (v8 + v14) & v12;
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v14, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (_QWORD *)((v7 + 7 + ((v7 + v8 + a1) & ~v8)) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = v8 | 7;
  v13 = v8 + 8;
  v14 = (_QWORD *)(((unint64_t)v10 + v8 + 8) & ~(v8 | 7));
  v15 = (_QWORD *)(((unint64_t)v11 + v8 + 8) & ~(v8 | 7));
  if (((v8 + 8) & ~v8) + v7 > v7)
    v7 += (v8 + 8) & ~v8;
  v16 = *((unsigned __int8 *)v15 + v7);
  if (v16 >= 2)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  v18 = ~v8;
  v19 = ~v12;
  if (v16 == 1)
  {
    *v14 = *v15;
    v6(((unint64_t)v14 + v13) & v18, ((unint64_t)v15 + v13) & v18, AssociatedTypeWitness);
    *((_BYTE *)v14 + v7) = 1;
  }
  else
  {
    v6((uint64_t)v14, (uint64_t)v15, AssociatedTypeWitness);
    *((_BYTE *)v14 + v7) = 0;
  }
  v20 = v7 + 1 + v12;
  v21 = (_QWORD *)(((unint64_t)v14 + v20) & v19);
  v22 = (_QWORD *)(((unint64_t)v15 + v20) & v19);
  v23 = *((unsigned __int8 *)v22 + v7);
  if (v23 >= 2)
  {
    if (v7 <= 3)
      v24 = v7;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    *v21 = *v22;
    v6(((unint64_t)v21 + v13) & v18, ((unint64_t)v22 + v13) & v18, AssociatedTypeWitness);
    *((_BYTE *)v21 + v7) = 1;
  }
  else
  {
    ((void (*)(_QWORD *))v6)(v21);
    *((_BYTE *)v21 + v7) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v29 = ~v8;
  v30 = a1;
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = v8 + 8;
  v14 = ~(v8 | 7);
  v15 = (_QWORD *)(((unint64_t)v11 + v8 + 8) & v14);
  v16 = (_QWORD *)(((unint64_t)v12 + v8 + 8) & v14);
  if (((v8 + 8) & ~v8) + v7 > v7)
    v7 += (v8 + 8) & ~v8;
  if (v15 != v16)
  {
    v17 = *((unsigned __int8 *)v15 + v7);
    if (v17 >= 2)
    {
      if (v7 <= 3)
        v18 = v7;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v15 + v13) & v29, AssociatedTypeWitness);
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v15, AssociatedTypeWitness);
    v19 = *((unsigned __int8 *)v16 + v7);
    if (v19 >= 2)
    {
      if (v7 <= 3)
        v20 = v7;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 1)
    {
      *v15 = *v16;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v15 + v13) & v29, ((unint64_t)v16 + v13) & v29, AssociatedTypeWitness);
      *((_BYTE *)v15 + v7) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v15, v16, AssociatedTypeWitness);
      *((_BYTE *)v15 + v7) = 0;
    }
  }
  v21 = v7 + 1 + (v8 | 7);
  v22 = (_QWORD *)(((unint64_t)v15 + v21) & v14);
  v23 = (_QWORD *)(((unint64_t)v16 + v21) & v14);
  if (v22 != v23)
  {
    v24 = *((unsigned __int8 *)v22 + v7);
    if (v24 >= 2)
    {
      if (v7 <= 3)
        v25 = v7;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v22 + v13) & v29, AssociatedTypeWitness);
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v22, AssociatedTypeWitness);
    v26 = *((unsigned __int8 *)v23 + v7);
    if (v26 >= 2)
    {
      if (v7 <= 3)
        v27 = v7;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      *v22 = *v23;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v22 + v13) & v29, ((unint64_t)v23 + v13) & v29, AssociatedTypeWitness);
      *((_BYTE *)v22 + v7) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v22, v23, AssociatedTypeWitness);
      *((_BYTE *)v22 + v7) = 0;
    }
  }
  return v30;
}

uint64_t initializeWithTake for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (_QWORD *)((v7 + 7 + ((v7 + v8 + a1) & ~v8)) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = v8 | 7;
  v13 = v8 + 8;
  v14 = (_QWORD *)(((unint64_t)v10 + v8 + 8) & ~(v8 | 7));
  v15 = (_QWORD *)(((unint64_t)v11 + v8 + 8) & ~(v8 | 7));
  if (((v8 + 8) & ~v8) + v7 > v7)
    v7 += (v8 + 8) & ~v8;
  v16 = *((unsigned __int8 *)v15 + v7);
  if (v16 >= 2)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  v18 = ~v8;
  v19 = ~v12;
  if (v16 == 1)
  {
    *v14 = *v15;
    v6(((unint64_t)v14 + v13) & v18, ((unint64_t)v15 + v13) & v18, AssociatedTypeWitness);
    *((_BYTE *)v14 + v7) = 1;
  }
  else
  {
    v6((uint64_t)v14, (uint64_t)v15, AssociatedTypeWitness);
    *((_BYTE *)v14 + v7) = 0;
  }
  v20 = v7 + 1 + v12;
  v21 = (_QWORD *)(((unint64_t)v14 + v20) & v19);
  v22 = (_QWORD *)(((unint64_t)v15 + v20) & v19);
  v23 = *((unsigned __int8 *)v22 + v7);
  if (v23 >= 2)
  {
    if (v7 <= 3)
      v24 = v7;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    *v21 = *v22;
    v6(((unint64_t)v21 + v13) & v18, ((unint64_t)v22 + v13) & v18, AssociatedTypeWitness);
    *((_BYTE *)v21 + v7) = 1;
  }
  else
  {
    ((void (*)(_QWORD *))v6)(v21);
    *((_BYTE *)v21 + v7) = 0;
  }
  return a1;
}

uint64_t assignWithTake for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v29 = ~v8;
  v30 = a1;
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = v8 + 8;
  v14 = ~(v8 | 7);
  v15 = (_QWORD *)(((unint64_t)v11 + v8 + 8) & v14);
  v16 = (_QWORD *)(((unint64_t)v12 + v8 + 8) & v14);
  if (((v8 + 8) & ~v8) + v7 > v7)
    v7 += (v8 + 8) & ~v8;
  if (v15 != v16)
  {
    v17 = *((unsigned __int8 *)v15 + v7);
    if (v17 >= 2)
    {
      if (v7 <= 3)
        v18 = v7;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v15 + v13) & v29, AssociatedTypeWitness);
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v15, AssociatedTypeWitness);
    v19 = *((unsigned __int8 *)v16 + v7);
    if (v19 >= 2)
    {
      if (v7 <= 3)
        v20 = v7;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 1)
    {
      *v15 = *v16;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v15 + v13) & v29, ((unint64_t)v16 + v13) & v29, AssociatedTypeWitness);
      *((_BYTE *)v15 + v7) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v15, v16, AssociatedTypeWitness);
      *((_BYTE *)v15 + v7) = 0;
    }
  }
  v21 = v7 + 1 + (v8 | 7);
  v22 = (_QWORD *)(((unint64_t)v15 + v21) & v14);
  v23 = (_QWORD *)(((unint64_t)v16 + v21) & v14);
  if (v22 != v23)
  {
    v24 = *((unsigned __int8 *)v22 + v7);
    if (v24 >= 2)
    {
      if (v7 <= 3)
        v25 = v7;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v22 + v13) & v29, AssociatedTypeWitness);
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v22, AssociatedTypeWitness);
    v26 = *((unsigned __int8 *)v23 + v7);
    if (v26 >= 2)
    {
      if (v7 <= 3)
        v27 = v7;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      *v22 = *v23;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v22 + v13) & v29, ((unint64_t)v23 + v13) & v29, AssociatedTypeWitness);
      *((_BYTE *)v22 + v7) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v22, v23, AssociatedTypeWitness);
      *((_BYTE *)v22 + v7) = 0;
    }
  }
  return v30;
}

uint64_t getEnumTagSinglePayload for CubicKeyframeHelper(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 + 8;
  if (((v7 + 8) & ~v7) + v6 <= v6)
    v9 = *(_QWORD *)(v4 + 64);
  else
    v9 = ((v7 + 8) & ~v7) + v6;
  if (v5 <= 0xFD)
    v10 = 253;
  else
    v10 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v11 = v6 + v7;
  v12 = v6 + 7;
  v13 = v7 | 7;
  if (a2 <= v10)
    goto LABEL_27;
  v14 = ((v9 + 1 + v13 + ((v8 + ((v12 + (v11 & ~v7)) & 0xFFFFFFFFFFFFFFF8)) & ~v13)) & ~v13) + v9 + 1;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((a2 - v10 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_27:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
      v21 = *(unsigned __int8 *)(((v8 + ((v12 + ((v11 + a1) & ~v7)) & 0xFFFFFFFFFFFFF8)) & ~v13) + v9);
      if (v21 >= 3)
        return (v21 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_27;
LABEL_18:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v20 = ((v9 + 1 + v13 + ((v8 + ((v12 + (v11 & ~(_DWORD)v7)) & 0xFFFFFFF8)) & ~(_DWORD)v13)) & ~(_DWORD)v13)
          + v9
          + 1;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v10 + v19 + 1;
}

void storeEnumTagSinglePayload for CubicKeyframeHelper(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + v7;
  if (v9 <= v7)
    v9 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84) <= 0xFDu)
    v10 = 253;
  else
    v10 = *(_DWORD *)(v6 + 84);
  v11 = ((v9 + 1 + (v8 | 7) + ((v8 + 8 + ((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8)) & ~(v8 | 7))) & ~(v8 | 7))
      + v9
      + 1;
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

uint64_t type metadata completion function for CubicKeyframeHelper.Connection()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2[4] = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CubicKeyframeHelper.Connection(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7;
  if (((v8 + 8) & ~v8) + v6 <= v6)
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = ((v7 + 8) & ~(unint64_t)v7) + v6;
  if (v7 > 7u || (v7 & 0x100000) != 0 || (unint64_t)(v9 + 1) > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 2)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X15 }
    }
    if (v13 == 1)
    {
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v8 + 8) & ~v8, ((unint64_t)a2 + v8 + 8) & ~v8, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  return a1;
}

uint64_t destroy for CubicKeyframeHelper.Connection(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  if (((v5 + 8) & ~v5) + v4 > v4)
    v4 += (v5 + 8) & ~v5;
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 >= 2)
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    __asm { BR              X15 }
  }
  if (v6 == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))((a1 + v5 + 8) & ~v5, AssociatedTypeWitness);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
}

_QWORD *initializeWithCopy for CubicKeyframeHelper.Connection(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v7 + 8) & ~v7) + v6 <= v6)
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = ((v7 + 8) & ~v7) + v6;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v7 + 8) & ~v7, ((unint64_t)a2 + v7 + 8) & ~v7, AssociatedTypeWitness);
    *((_BYTE *)a1 + v8) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v8) = 0;
  }
  return a1;
}

_QWORD *assignWithCopy for CubicKeyframeHelper.Connection(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    if (((v7 + 8) & ~v7) + v6 <= v6)
      v8 = *(_QWORD *)(v5 + 64);
    else
      v8 = ((v7 + 8) & ~v7) + v6;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = ~v7;
    if (v9 == 1)
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v11, AssociatedTypeWitness);
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v12 = *((unsigned __int8 *)a2 + v8);
    if (v12 >= 2)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v7 + 8) & v11, ((unint64_t)a2 + v7 + 8) & v11, AssociatedTypeWitness);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v8) = 0;
    }
  }
  return a1;
}

_QWORD *initializeWithTake for CubicKeyframeHelper.Connection(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v7 + 8) & ~v7) + v6 <= v6)
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = ((v7 + 8) & ~v7) + v6;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v7 + 8) & ~v7, ((unint64_t)a2 + v7 + 8) & ~v7, AssociatedTypeWitness);
    *((_BYTE *)a1 + v8) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v8) = 0;
  }
  return a1;
}

_QWORD *assignWithTake for CubicKeyframeHelper.Connection(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    if (((v7 + 8) & ~v7) + v6 <= v6)
      v8 = *(_QWORD *)(v5 + 64);
    else
      v8 = ((v7 + 8) & ~v7) + v6;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = ~v7;
    if (v9 == 1)
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v11, AssociatedTypeWitness);
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v12 = *((unsigned __int8 *)a2 + v8);
    if (v12 >= 2)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v7 + 8) & v11, ((unint64_t)a2 + v7 + 8) & v11, AssociatedTypeWitness);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v8) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CubicKeyframeHelper.Connection(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 > v5)
    v5 = v6;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v7 = v5 + 1;
  v8 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v11 < 2)
    {
LABEL_21:
      v13 = *(unsigned __int8 *)(a1 + v5);
      if (v13 >= 3)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_21;
LABEL_14:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 254);
}

void storeEnumTagSinglePayload for CubicKeyframeHelper.Connection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + v7;
  if (v8 <= v7)
    v8 = v7;
  v9 = v8 + 1;
  if (a3 < 0xFE)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v11 = a2 - 254;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for CubicKeyframeHelper.Connection(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((*(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 <= v3)
    v4 = v3;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void destructiveInjectEnumTag for CubicKeyframeHelper.Connection(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 <= v5)
    v7 = v5;
  else
    v7 = v6;
  if (a2 > 1)
  {
    v8 = a2 - 2;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_234B69EA4()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  char *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_2352880F0[*v0]);
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_234B69FC4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_234B6A0AC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void AccessibilityCustomAttributes.Value.displayDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of TypesettingLanguage(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)&loc_234B6A23C + dword_234B6A39C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B6A24C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t type metadata accessor for AccessibilityCustomAttributes.Value()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AccessibilityCustomAttributes.Value;
  if (!type metadata singleton initialization cache for AccessibilityCustomAttributes.Value)
    return swift_getSingletonMetadata();
  return result;
}

void AccessibilityCustomAttributes.Value.axRepresentation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of TypesettingLanguage(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)&unk_234B6A500 + 4 * byte_235287B54[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

SwiftUI::AccessibilityCustomAttributes __swiftcall AccessibilityCustomAttributes.init()()
{
  SwiftUI::AccessibilityCustomAttributes *v0;
  SwiftUI::AccessibilityCustomAttributes *v1;
  SwiftUI::AccessibilityCustomAttributes result;

  v1 = v0;
  result.attributes._rawValue = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v1->attributes._rawValue = result.attributes._rawValue;
  return result;
}

uint64_t AccessibilityCustomAttributes.init(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  *a4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  outlined init with copy of TypesettingLanguage(a3, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  v11 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  AccessibilityCustomAttributes.subscript.setter((uint64_t)v10, a1, a2);
  return outlined destroy of TypesettingConfiguration(a3, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
}

uint64_t AccessibilityCustomAttributes.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - v10;
  v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AccessibilityCustomAttributes.Value?(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of Any?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v8);
    outlined destroy of Any?(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    outlined destroy of Any?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v11, (uint64_t)v15);
    outlined init with copy of TypesettingLanguage((uint64_t)v15, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    specialized Dictionary.subscript.setter((uint64_t)v8, a2, a3);
    outlined destroy of Any?(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    return outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  }
}

_QWORD *AccessibilityCustomAttributes.attributeNames.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x24BEE0D00], (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AccessibilityCustomAttributes.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *v3;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      v11 = *(_QWORD *)(v5 + 56);
      v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
      v13 = *(_QWORD *)(v12 - 8);
      outlined init with copy of TypesettingLanguage(v11 + *(_QWORD *)(v13 + 72) * v10, a3, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, v12);
    }
    else
    {
      v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = type metadata accessor for AccessibilityCustomAttributes.Value();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
}

uint64_t key path getter for AccessibilityCustomAttributes.subscript(_:) : AccessibilityCustomAttributes@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  AccessibilityCustomAttributes.subscript.getter(v3, v4, a2);
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for AccessibilityCustomAttributes.subscript(_:) : AccessibilityCustomAttributes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - v6;
  v9 = *a3;
  v8 = a3[1];
  outlined init with copy of AccessibilityCustomAttributes.Value?(a1, (uint64_t)&v11 - v6);
  swift_bridgeObjectRetain();
  return AccessibilityCustomAttributes.subscript.setter((uint64_t)v7, v9, v8);
}

void (*AccessibilityCustomAttributes.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v7[3] = malloc(v9);
  v10 = malloc(v9);
  v7[4] = v10;
  v11 = *v3;
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v13 & 1) != 0)
    {
      v14 = v12;
      v15 = *(_QWORD *)(v11 + 56);
      v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
      v17 = *(_QWORD *)(v16 - 8);
      outlined init with copy of TypesettingLanguage(v15 + *(_QWORD *)(v17 + 72) * v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
    }
    else
    {
      v19 = type metadata accessor for AccessibilityCustomAttributes.Value();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v10, 1, 1, v19);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = type metadata accessor for AccessibilityCustomAttributes.Value();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  }
  return AccessibilityCustomAttributes.subscript.modify;
}

void AccessibilityCustomAttributes.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (void *)(*a1)[3];
  v4 = (void *)(*a1)[4];
  v5 = (*a1)[1];
  v6 = **a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of AccessibilityCustomAttributes.Value?((*a1)[4], (uint64_t)v3);
    swift_bridgeObjectRetain();
    AccessibilityCustomAttributes.subscript.setter((uint64_t)v3, v6, v5);
    outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    swift_bridgeObjectRetain();
    AccessibilityCustomAttributes.subscript.setter((uint64_t)v4, v6, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityCustomAttributes.CodingKeys()
{
  return 0x7475626972747461;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityCustomAttributes.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityCustomAttributes.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityCustomAttributes.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityCustomAttributes.startIndex.getter()
{
  uint64_t *v0;

  return specialized Dictionary.startIndex.getter(*v0);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 88);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t AccessibilityCustomAttributes.endIndex.getter()
{
  uint64_t v0;

  return 1 << *(_BYTE *)(*(_QWORD *)v0 + 32);
}

uint64_t AccessibilityCustomAttributes.subscript.getter(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t *v4;

  return specialized Dictionary.subscript.getter(a1, a2, a3, a4 & 1, *v4);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a4 & 1) != 0)
    goto LABEL_10;
  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
  {
    if (*(_DWORD *)(a5 + 36) == a3)
    {
      v6 = result;
      v7 = *(_QWORD *)(a5 + 56);
      v8 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
      v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
      outlined init with copy of TypesettingLanguage(v7 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v6, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_bridgeObjectRetain();
      return v8;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AccessibilityCustomAttributes.index(after:)(uint64_t a1, int a2, char a3)
{
  uint64_t *v3;

  return specialized _NativeDictionary.index(after:)(a1, a2, a3 & 1, *v3);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = specialized Dictionary.startIndex.getter(*v1);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance AccessibilityCustomAttributes(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)v1 + 36);
  *(_QWORD *)a1 = 1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

void (*protocol witness for Collection.subscript.read in conformance AccessibilityCustomAttributes(_QWORD *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v8 = malloc(v7);
  *a1 = v8;
  v9 = malloc(v7);
  a1[1] = v9;
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_BYTE *)(a2 + 16);
  v13 = (uint64_t)v9 + *(int *)(v6 + 48);
  v14 = specialized Dictionary.subscript.getter(v13, v10, v11, v12, *v2);
  *v9 = v14;
  v9[1] = v15;
  *v8 = v14;
  v8[1] = v15;
  outlined init with copy of TypesettingLanguage(v13, (uint64_t)v8 + *(int *)(v6 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  swift_bridgeObjectRetain();
  return protocol witness for Collection.subscript.read in conformance AccessibilityCustomAttributes;
}

void protocol witness for Collection.subscript.read in conformance AccessibilityCustomAttributes(uint64_t *a1)
{
  void *v1;
  void *v2;

  v2 = (void *)*a1;
  v1 = (void *)a1[1];
  outlined destroy of TypesettingConfiguration(*a1, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
  outlined destroy of TypesettingConfiguration((uint64_t)v1, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
  free(v1);
  free(v2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AccessibilityCustomAttributes@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v4;
  _OWORD v5[2];

  v2 = a1[1];
  v4 = *a1;
  v5[0] = v2;
  *(_OWORD *)((char *)v5 + 9) = *(__int128 *)((char *)a1 + 25);
  return specialized Collection<>.subscript.getter(&v4, a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *v1;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = specialized Dictionary.startIndex.getter(v3);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  v6 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(a1 + 32) = 1 << *(_BYTE *)(v3 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AccessibilityCustomAttributes()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  int v3;
  char v4;

  v1 = *v0;
  result = specialized Dictionary.startIndex.getter(*v0);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) == v3)
      return result == 1 << *(_BYTE *)(v1 + 32);
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AccessibilityCustomAttributes(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  result = specialized Collection.index(_:offsetBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  char v7;

  result = specialized Collection.index(_:offsetBy:limitedBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16));
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v6;
  *(_BYTE *)(a4 + 16) = v7;
  return result;
}

unint64_t protocol witness for Collection.distance(from:to:) in conformance AccessibilityCustomAttributes(uint64_t a1, uint64_t a2)
{
  return specialized Collection.distance(from:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AccessibilityCustomAttributes(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v2 != *(_QWORD *)(a2 + 32))
    goto LABEL_11;
  if (*(_QWORD *)result >= *(_QWORD *)(a2 + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  int v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != v2)
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  if (*(_DWORD *)(result + 8) != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (((*(_BYTE *)(a2 + 40) | *(_BYTE *)(result + 40)) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(result + 32))
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = specialized _NativeDictionary.index(after:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *v2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AccessibilityCustomAttributes(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 16);
  v6 = specialized _NativeDictionary.index(after:)(*(_QWORD *)a1, v4, v5, *v1);
  v8 = v7;
  v10 = v9;
  result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v3, v4, v5);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v10 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v3 = *v1;
  result = specialized Dictionary.startIndex.getter(v3);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6 & 1;
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AccessibilityCustomAttributes()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  unint64_t v7;

  v1 = *v0;
  v2 = specialized Dictionary.startIndex.getter(*v0);
  v4 = v3;
  v6 = v5 & 1;
  v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(_BYTE *)(v1 + 32), *(_DWORD *)(v1 + 36), 0);
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v2, v4, v6);
  return v7;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance AccessibilityCustomAttributes()
{
  uint64_t *v0;
  size_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AccessibilityCustomAttributes.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  char v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  char v39;
  uint64_t v40;
  unint64_t v41;

  v35 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x24BDAC7A8](v35);
  v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  v4 = v3;
  v37 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v33 - v11);
  v13 = *v0;
  v40 = 60;
  v41 = 0xE100000000000000;
  v14 = specialized Dictionary.startIndex.getter(v13);
  v16 = v15;
  v18 = v17;
  v39 = v17 & 1;
  result = swift_bridgeObjectRetain();
  if ((v18 & 1) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    v31 = v39;
    swift_bridgeObjectRelease();
    outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v14, v16, v31);
    v32._countAndFlagsBits = 62;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    return v40;
  }
  else
  {
    v36 = v13 + 64;
    while (1)
    {
      v20 = *(_DWORD *)(v13 + 36);
      if (v20 != (_DWORD)v16)
        break;
      v21 = 1;
      if (v14 != 1 << *(_BYTE *)(v13 + 32))
      {
        v22 = v34;
        v23 = (uint64_t)v34 + *(int *)(v4 + 48);
        v24 = specialized Dictionary.subscript.getter(v23, v14, v16, 0, v13);
        *v22 = v24;
        v22[1] = v25;
        *v9 = v24;
        v9[1] = v25;
        outlined init with copy of TypesettingLanguage(v23, (uint64_t)v9 + *(int *)(v4 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
        swift_bridgeObjectRetain();
        result = outlined destroy of TypesettingConfiguration((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
        if (v14 < 0 || v14 >= -(-1 << *(_BYTE *)(v13 + 32)))
          goto LABEL_15;
        if (((*(_QWORD *)(v36 + (((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          goto LABEL_16;
        if (*(_DWORD *)(v13 + 36) != v20)
          goto LABEL_17;
        swift_bridgeObjectRetain();
        v14 = _HashTable.occupiedBucket(after:)();
        v16 = *(unsigned int *)(v13 + 36);
        swift_bridgeObjectRelease();
        v21 = 0;
        v39 = 0;
      }
      v26 = v37;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v9, v21, 1, v4);
      outlined init with take of Any?((uint64_t)v9, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t)type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v12, 1, v4) == 1)
        goto LABEL_13;
      v28 = *v12;
      v27 = (void *)v12[1];
      outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v12 + *(int *)(v4 + 48), (uint64_t)v2);
      v38._countAndFlagsBits = 0;
      v38._object = (void *)0xE000000000000000;
      v29._countAndFlagsBits = v28;
      v29._object = v27;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 8250;
      v30._object = (void *)0xE200000000000000;
      String.append(_:)(v30);
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      result = outlined destroy of TypesettingConfiguration((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      if ((v39 & 1) != 0)
        goto LABEL_12;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall AccessibilityCustomAttributes.merge(with:)(SwiftUI::AccessibilityCustomAttributes with)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  char v72;
  char v73;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  _QWORD *v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  Swift::Bool result;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  char v124;

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v110 = (char *)&v100 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v114 = (uint64_t)&v100 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v108 = (uint64_t)&v100 - v13;
  v14 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v120 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v105 = (uint64_t)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v104 = (uint64_t)&v100 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v117 = (char *)&v100 - v19;
  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v103 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, v24, v4);
  MEMORY[0x24BDAC7A8](v25);
  v111 = (char *)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (uint64_t *)((char *)&v100 - v28);
  v30 = *(_QWORD *)with.attributes._rawValue;
  v122 = specialized Dictionary.startIndex.getter(*(_QWORD *)with.attributes._rawValue);
  v116 = v31;
  v33 = v32;
  v124 = v32 & 1;
  swift_bridgeObjectRetain();
  if ((v33 & 1) != 0)
    goto LABEL_66;
  v106 = 0;
  v112 = v30 + 64;
  v101 = v30 + 96;
  v121 = v2;
  v102 = v7;
  v118 = v14;
  v119 = v21;
  v115 = v22;
  v113 = v29;
  v109 = v30;
  while (*(_DWORD *)(v30 + 36) == (_DWORD)v116)
  {
    v34 = v21;
    v35 = 1 << *(_BYTE *)(v30 + 32);
    v36 = v122;
    if (v122 == v35)
    {
      v37 = (uint64_t)v111;
      v38 = v34;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v111, 1, 1, v34);
      v39 = (uint64_t)v110;
      v40 = (uint64_t)v117;
      goto LABEL_24;
    }
    if ((v122 & 0x8000000000000000) != 0 || (uint64_t)v122 >= v35)
      goto LABEL_59;
    v107 = *(unsigned int *)(v30 + 36);
    v41 = v122 >> 6;
    v42 = 1 << v122;
    if ((*(_QWORD *)(v112 + 8 * (v122 >> 6)) & (1 << v122)) == 0)
      goto LABEL_60;
    v43 = v111;
    v44 = v103;
    v45 = (uint64_t)&v103[*(int *)(v34 + 48)];
    v46 = (uint64_t *)(*(_QWORD *)(v30 + 48) + 16 * v122);
    v48 = *v46;
    v47 = v46[1];
    outlined init with copy of TypesettingLanguage(*(_QWORD *)(v30 + 56) + *(_QWORD *)(v120 + 72) * v122, v45, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    *v44 = v48;
    v44[1] = v47;
    *(_QWORD *)v43 = v48;
    *((_QWORD *)v43 + 1) = v47;
    outlined init with copy of TypesettingLanguage(v45, (uint64_t)&v43[*(int *)(v119 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    swift_bridgeObjectRetain_n();
    outlined destroy of TypesettingConfiguration((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
    v49 = 1 << *(_BYTE *)(v30 + 32);
    if ((uint64_t)v36 >= v49)
      goto LABEL_61;
    v50 = *(_QWORD *)(v112 + 8 * v41);
    if ((v50 & v42) == 0)
      goto LABEL_62;
    v51 = v36 >> 6;
    v52 = v107;
    if (*(_DWORD *)(v30 + 36) != (_DWORD)v107)
      goto LABEL_63;
    v53 = v36;
    v54 = v50 & (-2 << (v36 & 0x3F));
    if (v54)
    {
      v49 = __clz(__rbit64(v54)) | v36 & 0xFFFFFFFFFFFFFFC0;
      v40 = (uint64_t)v117;
      v14 = v118;
      v37 = (uint64_t)v43;
      v2 = v121;
      v29 = v113;
LABEL_22:
      v38 = v119;
      goto LABEL_23;
    }
    v55 = v51 + 1;
    v56 = (unint64_t)(v49 + 63) >> 6;
    v40 = (uint64_t)v117;
    v14 = v118;
    v37 = (uint64_t)v43;
    v29 = v113;
    if (v51 + 1 >= v56)
    {
      v2 = v121;
      goto LABEL_22;
    }
    v57 = *(_QWORD *)(v112 + 8 * v55);
    v2 = v121;
    v38 = v119;
    if (!v57)
    {
      v55 = v51 + 2;
      if (v51 + 2 >= v56)
        goto LABEL_23;
      v57 = *(_QWORD *)(v112 + 8 * v55);
      if (!v57)
      {
        v55 = v51 + 3;
        if (v51 + 3 >= v56)
          goto LABEL_23;
        v57 = *(_QWORD *)(v112 + 8 * v55);
        if (!v57)
        {
          while (v56 - 4 != v51)
          {
            v57 = *(_QWORD *)(v101 + 8 * v51++);
            if (v57)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v53, v116, 0);
              v55 = v51 + 3;
              goto LABEL_19;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v53, v116, 0);
          goto LABEL_23;
        }
      }
    }
LABEL_19:
    v49 = __clz(__rbit64(v57)) + (v55 << 6);
LABEL_23:
    v124 = 0;
    v22 = v115;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v115 + 56))(v37, 0, 1, v38);
    v122 = v49;
    v116 = v52;
    v39 = (uint64_t)v110;
LABEL_24:
    outlined init with take of Any?(v37, (uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t)type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v29, 1, v38) == 1)
    {
      v98 = v124;
      swift_bridgeObjectRelease();
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v122, v116, v98);
      return v106 & 1;
    }
    v59 = *v29;
    v58 = v29[1];
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v29 + *(int *)(v38 + 48), v40);
    v60 = *v2;
    if (*(_QWORD *)(*v2 + 16))
    {
      swift_bridgeObjectRetain();
      v61 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
      v63 = v120;
      if ((v62 & 1) != 0)
      {
        v64 = *(_QWORD *)(v60 + 56) + *(_QWORD *)(v120 + 72) * v61;
        v65 = v108;
        outlined init with copy of TypesettingLanguage(v64, v108, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
        v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
        v67 = v65;
        v68 = 0;
      }
      else
      {
        v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56);
        v65 = v108;
        v67 = v108;
        v68 = 1;
      }
      v14 = v118;
      v66(v67, v68, 1, v118);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v65, 1, v14) != 1)
      {
        swift_bridgeObjectRelease();
        outlined destroy of Any?(v65, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
        v21 = v119;
        v22 = v115;
LABEL_4:
        v2 = v121;
        goto LABEL_5;
      }
    }
    else
    {
      v63 = v120;
      v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56);
      v65 = v108;
      v66(v108, 1, 1, v14);
    }
    outlined destroy of Any?(v65, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    v69 = v114;
    outlined init with copy of TypesettingLanguage(v40, v114, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    v66(v69, 0, 1, v14);
    outlined init with copy of AccessibilityCustomAttributes.Value?(v69, v39);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v39, 1, v14) == 1)
    {
      outlined destroy of Any?(v39, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
      v70 = v121;
      swift_bridgeObjectRetain();
      v71 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
      v73 = v72;
      swift_bridgeObjectRelease();
      if ((v73 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v75 = *v70;
        v123 = (_QWORD *)*v70;
        *v70 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v75 = (uint64_t)v123;
        }
        swift_bridgeObjectRelease();
        v76 = (uint64_t)v102;
        outlined init with take of AccessibilityCustomAttributes.Value(*(_QWORD *)(v75 + 56) + *(_QWORD *)(v120 + 72) * v71, (uint64_t)v102);
        specialized _NativeDictionary._delete(at:)(v71, v75);
        *v70 = v75;
        swift_bridgeObjectRelease();
        v77 = 0;
      }
      else
      {
        v77 = 1;
        v76 = (uint64_t)v102;
      }
      v106 = 1;
      v14 = v118;
      v66(v76, v77, 1, v118);
      outlined destroy of Any?(v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
      outlined destroy of Any?(v76, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
      swift_bridgeObjectRelease();
      v40 = (uint64_t)v117;
      v21 = v119;
      v22 = v115;
      v29 = v113;
      goto LABEL_4;
    }
    v78 = v39;
    v79 = v104;
    outlined init with take of AccessibilityCustomAttributes.Value(v78, v104);
    outlined init with copy of TypesettingLanguage(v79, v105, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    v80 = v121;
    v81 = swift_isUniquelyReferenced_nonNull_native();
    v123 = (_QWORD *)*v80;
    v82 = v123;
    *v80 = 0x8000000000000000;
    v84 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
    v85 = v82[2];
    v86 = (v83 & 1) == 0;
    v87 = v85 + v86;
    if (__OFADD__(v85, v86))
      goto LABEL_64;
    v88 = v83;
    if (v82[3] >= v87)
    {
      v91 = v122;
      if ((v81 & 1) == 0)
      {
        v97 = v122;
        specialized _NativeDictionary.copy()();
        v91 = v97;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, v81);
      v89 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
      v91 = v122;
      if ((v88 & 1) != (v90 & 1))
        goto LABEL_67;
      v84 = v89;
    }
    v2 = v121;
    v40 = (uint64_t)v117;
    v21 = v119;
    v29 = v113;
    v122 = v91;
    v92 = v123;
    if ((v88 & 1) != 0)
    {
      outlined assign with take of AccessibilityCustomAttributes.Value(v105, v123[7] + *(_QWORD *)(v120 + 72) * v84);
    }
    else
    {
      v123[(v84 >> 6) + 8] |= 1 << v84;
      v93 = (uint64_t *)(v92[6] + 16 * v84);
      *v93 = v59;
      v93[1] = v58;
      outlined init with take of AccessibilityCustomAttributes.Value(v105, v92[7] + *(_QWORD *)(v120 + 72) * v84);
      v94 = v92[2];
      v95 = __OFADD__(v94, 1);
      v96 = v94 + 1;
      if (v95)
        goto LABEL_65;
      v92[2] = v96;
      swift_bridgeObjectRetain();
    }
    *v2 = (uint64_t)v92;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Any?(v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    outlined destroy of TypesettingConfiguration(v104, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    v106 = 1;
    v14 = v118;
    v22 = v115;
LABEL_5:
    outlined destroy of TypesettingConfiguration(v40, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    v30 = v109;
    if ((v124 & 1) != 0)
      goto LABEL_66;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityCustomAttributes.Value.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234B6C564 + 4 * byte_235287B5C[a1]))(0x676E69727473, 0xE600000000000000);
}

uint64_t sub_234B6C564()
{
  return 1635017060;
}

uint64_t sub_234B6C574()
{
  return 0x7265626D754E736ELL;
}

uint64_t sub_234B6C58C()
{
  return 0x65756C6156736ELL;
}

uint64_t sub_234B6C5A4()
{
  return 1702125924;
}

uint64_t sub_234B6C5B4()
{
  return 7107189;
}

unint64_t sub_234B6C5C4()
{
  return 0xD000000000000010;
}

uint64_t AccessibilityCustomAttributes.Value.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234B6C610 + 4 * byte_235287B63[a1]))(0x676E69727473, 0xE600000000000000);
}

uint64_t sub_234B6C610()
{
  return 1635017060;
}

uint64_t sub_234B6C620()
{
  return 0x7265626D754E736ELL;
}

uint64_t sub_234B6C638()
{
  return 0x65756C6156736ELL;
}

uint64_t sub_234B6C650()
{
  return 1702125924;
}

uint64_t sub_234B6C660()
{
  return 7107189;
}

unint64_t sub_234B6C670()
{
  return 0xD000000000000010;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityCustomAttributes.Value.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityCustomAttributes.Value.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityCustomAttributes.Value.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityCustomAttributes.Value.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AccessibilityCustomAttributes.Value.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  unsigned __int8 *v0;

  return AccessibilityCustomAttributes.Value.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityCustomAttributes.Value.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AccessibilityCustomAttributes.Value.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityCustomAttributes.Value.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[16];
  uint64_t *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v37 = &v29[-v5];
  v38 = type metadata accessor for URL();
  v34 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v32 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v3);
  MEMORY[0x24BDAC7A8](v7);
  v40 = &v29[-v8];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  v36 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v33 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys, (uint64_t)&unk_25063F8F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v29[-v15];
  v17 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)&v29[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();
  v20 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v21 = (uint64_t)a1;
  if (!v20)
  {
    v30 = v19;
    v31 = v14;
    v41 = v17;
    v22 = a1;
    LOBYTE(v42) = 0;
    v23 = KeyedDecodingContainer.decode(_:forKey:)();
    v25 = v24;
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v16, v13);
    v26 = (uint64_t)v30;
    *v30 = v23;
    *(_QWORD *)(v26 + 8) = v25;
    v27 = v39;
    swift_storeEnumTagMultiPayload();
    outlined init with take of AccessibilityCustomAttributes.Value(v26, v27);
    v21 = (uint64_t)v22;
  }
  return __swift_destroy_boxed_opaque_existential_1(v21);
}

void AccessibilityCustomAttributes.Value.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD v14[9];

  v2 = v1;
  v4 = type metadata accessor for URL();
  v14[4] = *(_QWORD *)(v4 - 8);
  v14[5] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v14[3] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date();
  v14[1] = *(_QWORD *)(v6 - 8);
  v14[2] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys, (uint64_t)&unk_25063F8F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v14[8] = v10;
  v14[6] = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v14 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();
  v14[7] = v12;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TypesettingLanguage(v2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  v13 = (char *)&loc_234B6D71C + dword_234B6DB4C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B6D72C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v0 - 96) = 0;
  v2 = *(_QWORD *)(v0 - 120);
  v1 = *(_QWORD *)(v0 - 112);
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 128) + 8))(v2, v1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityCustomAttributes.Value@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityCustomAttributes.Value.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AccessibilityCustomAttributes.Value(_QWORD *a1)
{
  AccessibilityCustomAttributes.Value.encode(to:)(a1);
}

uint64_t AccessibilityCustomAttributes.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[4];

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityCustomAttributes.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys, (uint64_t)&unk_25063F798, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[3] = v8;
  type metadata accessor for [String : AccessibilityCustomAttributes.Value](0, &lazy cache variable for type metadata for [String : AccessibilityCustomAttributes.Value], (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
  lazy protocol witness table accessor for type [String : AccessibilityCustomAttributes.Value] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AccessibilityCustomAttributes.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityCustomAttributes.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys, (uint64_t)&unk_25063F798, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v13 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - v6;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v8 = v12;
    type metadata accessor for [String : AccessibilityCustomAttributes.Value](0, &lazy cache variable for type metadata for [String : AccessibilityCustomAttributes.Value], (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    lazy protocol witness table accessor for type [String : AccessibilityCustomAttributes.Value] and conformance <> [A : B]();
    v9 = v13;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v9);
    v11 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v8 = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityCustomAttributes@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AccessibilityCustomAttributes.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityCustomAttributes(_QWORD *a1)
{
  return AccessibilityCustomAttributes.encode(to:)(a1);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;
  __int128 v12[2];

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    outlined init with take of ScrollStateRequest((__int128 *)(*(_QWORD *)(v9 + 56) + 40 * v7), (uint64_t)v12);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    outlined init with take of ScrollStateRequest(v12, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v14;
    }
    v12 = *(_QWORD *)(v11 + 48);
    v13 = type metadata accessor for URL();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v6, v13);
    outlined init with take of NamedImage.Cache.WeakCatalog(*(_QWORD *)(v11 + 56) + 8 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v12 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v12;
    }
    outlined destroy of AnyHashable(*(_QWORD *)(v11 + 48) + 40 * v6);
    outlined init with take of Any?(*(_QWORD *)(v11 + 56) + 8 * v6, a2, (uint64_t)&lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t)type metadata accessor for AnyLocationBase, (uint64_t)type metadata accessor for WeakBox, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  outlined destroy of AnyHashable(*(_QWORD *)(v7 + 48) + 40 * v4);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for AccessibilityCustomAttributes.Value();
    v14 = *(_QWORD *)(v13 - 8);
    outlined init with take of AccessibilityCustomAttributes.Value(v12 + *(_QWORD *)(v14 + 72) * v8, a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v7;
  char v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  double result;
  uint64_t v22;

  v5 = v4;
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3 & 1);
  if ((v8 & 1) != 0)
  {
    v9 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v22 = *v5;
    *v5 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v22;
    }
    v12 = *(_QWORD *)(v11 + 56) + 120 * v9;
    v13 = *(_QWORD *)(v12 + 16);
    v14 = *(_WORD *)(v12 + 56);
    v15 = *(_WORD *)(v12 + 96);
    v16 = *(_DWORD *)(v12 + 100);
    v17 = *(_BYTE *)(v12 + 104);
    v18 = *(_BYTE *)(v12 + 105);
    v19 = *(_QWORD *)(v12 + 112);
    *(_OWORD *)a4 = *(_OWORD *)v12;
    *(_QWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v12 + 24);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v12 + 40);
    *(_WORD *)(a4 + 56) = v14;
    v20 = *(_OWORD *)(v12 + 80);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(a4 + 80) = v20;
    *(_WORD *)(a4 + 96) = v15;
    *(_DWORD *)(a4 + 100) = v16;
    *(_BYTE *)(a4 + 104) = v17;
    *(_BYTE *)(a4 + 105) = v18;
    *(_QWORD *)(a4 + 112) = v19;
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *v5 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a4 + 112) = 0;
    result = 0.0;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
  }
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  uint64_t v4;
  _BYTE v5[16];

  v1 = result[3];
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v2 = (_QWORD *)swift_allocObject();
      v3 = _swift_stdlib_malloc_size(v2);
      v2[2] = v1;
      v2[3] = 2 * v3 - 64;
      v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v5, (uint64_t)(v2 + 4), v1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v4 == v1)
        return v2;
      __break(1u);
    }
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  _QWORD v9[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.FlatPath.Element>, (uint64_t)&type metadata for Text.Effect.FlatPath.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v5 = swift_allocObject();
  v6 = _swift_stdlib_malloc_size((const void *)v5);
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = 2 * v6 - 64;
  v7 = specialized Sequence._copyContents(initializing:)(v9, (_BYTE *)(v5 + 32), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v7 != (_QWORD *)v2)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Markers.Marker>, (uint64_t)&type metadata for Text.Effect.Markers.Marker, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copyContents(initializing:));
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v1);
  outlined retain of Text.Effect.RenderSegmentation.StaticLines(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.MarkerLayoutInfo.Element>, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo.Element, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.KeyframeSequence.Entry>, (uint64_t)&type metadata for Text.Effect.KeyframeSequence.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = specialized Sequence._copyContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Chunk>, (uint64_t)&type metadata for Text.Effect.Chunk, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment.Element, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copyContents(initializing:));
}

{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v2 = (_QWORD *)swift_allocObject();
  v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 48);
  v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v6, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v2;
}

{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Segment>, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v2 = (_QWORD *)swift_allocObject();
  v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 56);
  v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v6, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v2;
}

{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  uint64_t v4;
  _BYTE v6[8];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutProxy>, (uint64_t)&type metadata for LayoutProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v2 = (_QWORD *)swift_allocObject();
  v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 12);
  v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v6, (unint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v2;
}

{
  uint64_t v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyPreferenceKey.Type>, (uint64_t (*)(uint64_t))type metadata accessor for AnyPreferenceKey.Type, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v2 = (_QWORD *)swift_allocObject();
  v3 = _swift_stdlib_malloc_size(v2);
  v4 = v3 - 32;
  if (v3 < 32)
    v4 = v3 - 17;
  v2[2] = v1;
  v2[3] = 2 * (v4 >> 4);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v2;
}

{
  unint64_t v1;
  _QWORD *v2;
  size_t v3;
  unint64_t v4;
  _BYTE v6[8];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutSubview>, (uint64_t)&type metadata for LayoutSubview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v2 = (_QWORD *)swift_allocObject();
  v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 20);
  v4 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v6, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v2;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Spacing.Key>, (uint64_t)&type metadata for Spacing.Key, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<EventID>.Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, double a2)
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DisplayInfo>, (uint64_t)&type metadata for Text.Effect.DisplayInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 + 95;
  v5[2] = v2;
  v5[3] = 2 * (v7 >> 7);
  v8 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v10, (uint64_t)(v5 + 4), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v8 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * (v5 >> 4);
  v6 = specialized Sequence._copyContents(initializing:)(&v8, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t result;
  __int128 v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = v2 - v1;
  if (v2 < v1)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFSUB__(v2, v1))
    goto LABEL_21;
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  if (v3 > 0)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Run>, (uint64_t)&type metadata for Text.Layout.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v5 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v5[2] = v3;
    v5[3] = 2 * ((uint64_t)(v6 - 32) / 48);
    v7 = *(_QWORD *)(a1 + 16);
    swift_retain();
    if (v7 != *(_QWORD *)(a1 + 24))
    {
      v8 = ~v1 + v2;
      v9 = 4;
      while (1)
      {
        v11 = *(void **)(a1 + 32);
        v10 = *(_QWORD *)(a1 + 40);
        v17 = *(_OWORD *)(a1 + 56);
        v12 = *(_DWORD *)(a1 + 72);
        if ((*(_BYTE *)(a1 + 48) & 1) != 0)
        {
          outlined copy of Text.Layout.Line.Line(v11, v10, 1);
          v13 = (id)_NSTextLineFragmentGetCTLine(v11);
          if (!v13)
            goto LABEL_22;
          v14 = v13;
          outlined consume of Text.Layout.Line.Line(v11, v10, 1);
          v10 = 0;
          v11 = v14;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v11, v10, 0);
          outlined copy of Text.Layout.Line.Line(v11, v10, 0);

          swift_release();
        }
        if (v7 < *(_QWORD *)(a1 + 16) || v7 >= *(_QWORD *)(a1 + 24))
          break;
        v15 = &v5[v9];
        *v15 = v11;
        v15[1] = v7;
        *((_OWORD *)v15 + 1) = v17;
        *((_DWORD *)v15 + 8) = v12;
        v15[5] = v10;
        if (!v8)
          goto LABEL_16;
        ++v7;
        --v8;
        v9 += 6;
        if (v7 == *(_QWORD *)(a1 + 24))
          goto LABEL_15;
      }
      __break(1u);
      goto LABEL_20;
    }
LABEL_15:
    swift_release();
    __break(1u);
LABEL_16:
    swift_release();
    return (uint64_t)v5;
  }
LABEL_23:
  result = swift_retain();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v2 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = specialized Collection.count.getter();
  if (!v8)
    return MEMORY[0x24BEE4AF8];
  v9 = v8;
  if (v8 <= 0)
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.BaseFragment>, (uint64_t)&type metadata for Text.Effect.BaseFragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v4, type metadata accessor for Text.Effect.BaseContent);
  v12 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (uint64_t)(v10 + 4), v9);
  result = outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
  if (v12 == v9)
    return (uint64_t)v10;
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[40];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Fragment>, (uint64_t)&type metadata for Text.Layout.Decorations.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v2 = swift_allocObject();
  v3 = _swift_stdlib_malloc_size((const void *)v2);
  v4 = v3 - 32;
  if (v3 < 32)
    v4 = v3 - 1;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * (v4 >> 5);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (_OWORD *)(v2 + 32), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v2;
}

{
  int v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[24];

  v1 = *(_DWORD *)(a1 + 12);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  if (v1 <= 0)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_UnsafeHeterogeneousBuffer_Element>, (uint64_t)&type metadata for _UnsafeHeterogeneousBuffer_Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v2 = (_QWORD *)swift_allocObject();
    v3 = _swift_stdlib_malloc_size(v2);
    v4 = v3 - 32;
    if (v3 < 32)
      v4 = v3 - 25;
    v2[2] = v1;
    v2[3] = 2 * (v4 >> 3);
  }
  result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v6, (uint64_t)(v2 + 4), v1);
  if (result == v1)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

{
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88);
  v2 = ((uint64_t (*)(uint64_t))v1)(a1);
  result = v1();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = v1();
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v4 = (_QWORD *)swift_allocObject();
        v5 = _swift_stdlib_malloc_size(v4);
        v6 = v5 - 32;
        if (v5 < 32)
          v6 = v5 - 17;
        v4[2] = v2;
        v4[3] = 2 * (v6 >> 4);
        swift_retain();
        v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v4 + 4, v2);
        swift_release();
        if (v7 == v2)
          return (uint64_t)v4;
        __break(1u);
      }
      return MEMORY[0x24BEE4AF8];
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[8];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  if (v1 <= 0)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v2 = (_QWORD *)swift_allocObject();
    v3 = _swift_stdlib_malloc_size(v2);
    v4 = v3 - 32;
    if (v3 < 32)
      v4 = v3 - 17;
    v2[2] = v1;
    v2[3] = 2 * (v4 >> 4);
  }
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (v5 == v1)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.RenderSegmentation.Segment>, type metadata accessor for Text.Effect.RenderSegmentation.Segment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v3 = *(_QWORD *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v3 = *(_QWORD *)(type metadata accessor for Date.ComponentsFormatStyle.Field() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      v10 = v9;
      outlined consume of Set<EventID>.Iterator._Variant();
      if (v10 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = __OFADD__(result, v2);
  v4 = result + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  v6 = v4 - result;
  if (v4 < result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(v4, result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v6)
    return MEMORY[0x24BEE4AF8];
  if (v6 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Cluster>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Cluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = v6;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 56);
  }
  v10 = specialized Sequence._copySequenceContents(initializing:)(&v11, (uint64_t)(v8 + 4), v6, v5, a2);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (v10 == (_QWORD *)v6)
    return (uint64_t)v8;
LABEL_14:
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 1;
  v7[2] = v4;
  v7[3] = 2 * (v9 >> 5);
  v10 = a4(&v12, v7 + 4, v4, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v10 != v4)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v7;
}

{
  uint64_t v4;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v7[2] = v4;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 96);
  v9 = a4(&v11, v7 + 4, v4, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v9 != v4)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v7;
}

{
  uint64_t v4;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 17;
  v7[2] = v4;
  v7[3] = 2 * (v9 >> 4);
  v10 = a4(&v12, v7 + 4, v4, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<EventID>.Iterator._Variant();
  if (v10 != v4)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v7;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  v2 = a1[2];
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.KeyframeLayout.Fragment>, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = v2;
  v5[3] = 2 * (v7 >> 3);
  v8 = specialized Sequence._copyContents(initializing:)((uint64_t)v10, v5 + 4, v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v8 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 + 31;
  v7[2] = v3;
  v7[3] = 2 * (v9 >> 6);
  v10 = specialized Sequence._copyContents(initializing:)(&v12, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v10 != (_QWORD *)v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v7;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(_QWORD *)(result + 56);
  v3 = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(v2, v1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  v4 = (void **)result;
  if (v3 <= 0)
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v5 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 + 31;
    v5[2] = v3;
    v5[3] = 2 * (v7 >> 6);
  }
  v8 = *v4;
  swift_retain();
  v9 = v8;
  v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v11, (uint64_t)(v5 + 4), v2 - v1);

  result = swift_release();
  if (v10 == v3)
    return (uint64_t)v5;
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  _QWORD v11[6];

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)(result + 24);
  v3 = (v2 >> 1) - v1;
  if (__OFSUB__(v2 >> 1, v1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = *(unsigned __int8 *)(result + 32);
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = v6 - v4;
  if (v6 < v4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 == v4)
    return MEMORY[0x24BEE4AF8];
  if (v7 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Style>, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = v7;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 112);
  }
  v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v11, (uint64_t)(v8 + 4), v7);
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  if (v10 == v7)
    return (uint64_t)v8;
LABEL_14:
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  int v3;
  void *v4;
  const __CTLine *v5;
  const __CTLine *v6;
  const __CFArray *RunCount;
  const __CTLine *v8;
  const __CFArray *v9;
  const __CTLine *v10;
  const __CTLine *v11;
  const __CFArray *v12;
  _QWORD *v13;
  size_t v14;
  const __CFArray *v15;
  const __CFArray *v16;
  void *v17[2];
  char v18;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(void **)a1;
  if (v3 == 1)
  {
    v5 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
    if (v5)
    {
      v6 = v5;
      RunCount = _CTLineGetRunCount(v5);

    }
    else
    {
      RunCount = 0;
    }
    v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
    if (!v8)
      goto LABEL_9;
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v4, v2, 0);
    swift_release();
    RunCount = _CTLineGetRunCount((const __CTLine *)v1);

    outlined copy of Text.Layout.Line.Line(v1, v2, 0);
    swift_release();
    v8 = (const __CTLine *)v1;
  }
  v9 = _CTLineGetRunCount(v8);

  if (((unint64_t)v9 & 0x8000000000000000) != 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (!v3)
  {
    outlined copy of Text.Layout.Line.Line(v1, v2, 0);
    swift_release();
    v11 = (const __CTLine *)v1;
LABEL_12:
    v12 = _CTLineGetRunCount(v11);

    if (((unint64_t)RunCount & 0x8000000000000000) != 0)
      goto LABEL_20;
    goto LABEL_15;
  }
LABEL_9:
  v10 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
  if (v10)
  {
    v11 = v10;
    goto LABEL_12;
  }
  v12 = 0;
  if (((unint64_t)RunCount & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  if ((uint64_t)v12 < (uint64_t)RunCount)
    goto LABEL_20;
  if (RunCount)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Run>, (uint64_t)&type metadata for Text.Layout.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = RunCount;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
    outlined copy of Text.Layout.Line.Line(v1, v2, v3);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)v17, (uint64_t)(v13 + 4), RunCount);
    v16 = v15;
    outlined consume of Text.Layout.Line.Line(v17[0], (uint64_t)v17[1], v18);
    if (v16 != RunCount)
      __break(1u);
  }
}

{
  const __CTLine *v1;
  CFIndex v2;
  void *v3;
  CFIndex GlyphCount;
  void *v5;
  CFIndex v6;
  void *v7;
  CFIndex v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  const __CTLine *v12;
  uint64_t v13;
  uint64_t v14;
  id v15[5];

  v1 = *(const __CTLine **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, v2);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  v5 = (id)_CTLineGetRunAtIndex(v1, v2);
  v6 = CTRunGetGlyphCount((CTRunRef)v5);

  if (v6 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  v7 = (id)_CTLineGetRunAtIndex(v1, v2);
  v8 = CTRunGetGlyphCount((CTRunRef)v7);

  if (GlyphCount < 0 || v8 < GlyphCount)
    goto LABEL_11;
  if (GlyphCount)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v9 = (_QWORD *)swift_allocObject();
    v10 = _swift_stdlib_malloc_size(v9);
    v11 = v10 - 32;
    if (v10 < 32)
      v11 = v10 + 31;
    v9[2] = GlyphCount;
    v9[3] = 2 * (v11 >> 6);
    swift_retain();
    v12 = v1;
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)v15, (uint64_t)(v9 + 4), GlyphCount);
    v14 = v13;

    swift_release();
    if (v14 != GlyphCount)
      __break(1u);
  }
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  size_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  char v23;

  v1 = *a1;
  v2 = specialized Dictionary.startIndex.getter(*a1);
  v4 = v3;
  v6 = v5 & 1;
  v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(_BYTE *)(v1 + 32), *(_DWORD *)(v1 + 36), 0);
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v2, v4, v6);
  if (!v7)
    return MEMORY[0x24BEE4AF8];
  if (v7 <= 0)
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_11:
    type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80);
    v17 = (uint64_t)v12 + ((v16 + 32) & ~v16);
    swift_bridgeObjectRetain();
    v18 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v22, v17, v7);
    v19 = v22[1];
    v20 = v22[2];
    v21 = v23;
    swift_bridgeObjectRelease();
    result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v19, v20, v21);
    if (v18 == v7)
      return (size_t)v12;
    __break(1u);
    goto LABEL_14;
  }
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: AccessibilityCustomAttributes.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v12);
  if (v10)
  {
    if (result - v11 == 0x8000000000000000 && v10 == -1)
      goto LABEL_15;
    v12[2] = v7;
    v12[3] = 2 * ((uint64_t)(result - v11) / v10);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

_BYTE *specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  _BYTE *result;
  char v5;

  v0 = specialized Collection.distance(from:to:)(0, 0xBu);
  if (!v0)
    return (_BYTE *)MEMORY[0x24BEE4AF8];
  v1 = v0;
  if (v0 <= 0)
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DynamicTypeSize>, (uint64_t)&type metadata for DynamicTypeSize, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v2 = swift_allocObject();
    v3 = _swift_stdlib_malloc_size((const void *)v2);
    *(_QWORD *)(v2 + 16) = v1;
    *(_QWORD *)(v2 + 24) = 2 * v3 - 64;
  }
  result = specialized Sequence._copySequenceContents(initializing:)(&v5, (_BYTE *)(v2 + 32), v1);
  if (result == (_BYTE *)v1)
    return (_BYTE *)v2;
  __break(1u);
  return result;
}

_OWORD *specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _OWORD *result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[11];
  _BYTE v21[28];

  v1 = *a1;
  v2 = (uint64_t *)(*a1 + 160);
  swift_beginAccess();
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 16);
  if (!v3)
    return (_OWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutGestureChildProxy.Child>, (uint64_t)&type metadata for LayoutGestureChildProxy.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  result = (_OWORD *)_swift_stdlib_malloc_size(v4);
  v4[2] = v3;
  v4[3] = 2 * ((uint64_t)(result - 2) / 208);
  v6 = *v2;
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    outlined retain of LayoutGestureBox.Child((uint64_t)result);
    return v4;
  }
  v8 = 0;
  v9 = v3 - 1;
  v10 = 32;
  while (v8 < v7)
  {
    v20[0] = *(_OWORD *)(v6 + v10);
    v11 = *(_OWORD *)(v6 + v10 + 16);
    v12 = *(_OWORD *)(v6 + v10 + 32);
    v13 = *(_OWORD *)(v6 + v10 + 64);
    v20[3] = *(_OWORD *)(v6 + v10 + 48);
    v20[4] = v13;
    v20[1] = v11;
    v20[2] = v12;
    v14 = *(_OWORD *)(v6 + v10 + 80);
    v15 = *(_OWORD *)(v6 + v10 + 96);
    v16 = *(_OWORD *)(v6 + v10 + 128);
    v20[7] = *(_OWORD *)(v6 + v10 + 112);
    v20[8] = v16;
    v20[5] = v14;
    v20[6] = v15;
    v17 = *(_OWORD *)(v6 + v10 + 144);
    v18 = *(_OWORD *)(v6 + v10 + 160);
    v19 = *(_OWORD *)(v6 + v10 + 176);
    *(_OWORD *)&v21[12] = *(_OWORD *)(v6 + v10 + 188);
    v20[10] = v18;
    *(_OWORD *)v21 = v19;
    v20[9] = v17;
    memmove(&v4[(unint64_t)v10 / 8], (const void *)(v6 + v10), 0xCCuLL);
    result = v20;
    if (v9 == v8)
      goto LABEL_8;
    result = (_OWORD *)outlined retain of LayoutGestureBox.Child((uint64_t)v20);
    v7 = *(_QWORD *)(v6 + 16);
    ++v8;
    v10 += 208;
    if (v8 == v7)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  _BYTE v16[56];
  _OWORD v17[4];

  if (one-time initialization token for _lock != -1)
    swift_once();
  v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = ViewList.count.getter(v3, v4);
  static Update.end()();
  _MovableLockUnlock(v2);
  _MovableLockLock(v2);
  specialized static Update.begin()();
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  result = _MovableLockUnlock(v2);
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v2);
    specialized static Update.begin()();
    v10 = a1[3];
    v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    v12 = ViewList.count.getter(v10, v11);
    static Update.end()();
    result = _MovableLockUnlock(v2);
    if ((v5 & 0x8000000000000000) == 0 && v12 >= v5)
    {
      if (v5)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children.Element>, (uint64_t)&type metadata for _VariadicView_Children.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v13 = swift_allocObject();
        v14 = _swift_stdlib_malloc_size((const void *)v13);
        *(_QWORD *)(v13 + 16) = v5;
        *(_QWORD *)(v13 + 24) = 2 * ((uint64_t)(v14 - 32) / 96);
        outlined init with copy of _VariadicView_Children((uint64_t)a1, (uint64_t)v16);
        v15 = specialized Sequence._copySequenceContents(initializing:)(v17, (_OWORD *)(v13 + 32), v5);
        outlined destroy of IndexingIterator<_VariadicView_Children>((uint64_t)v17);
        if (v15 == v5)
          return v13;
        __break(1u);
      }
      return MEMORY[0x24BEE4AF8];
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, unint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v3 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    v5 = result;
    v6 = (HIDWORD(a2) - 1) + 1;
    while (result)
    {
      if (!--v3)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewGraphFeatureBuffer.Element>, (uint64_t)&type metadata for ViewGraphFeatureBuffer.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v4 = (_QWORD *)swift_allocObject();
        v7 = _swift_stdlib_malloc_size(v4);
        v8 = v7 - 32;
        if (v7 < 32)
          v8 = v7 - 25;
        v4[2] = v6;
        v4[3] = 2 * (v8 >> 3);
        result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)(v4 + 4), v6, v5, a2);
        if (result != v6)
          goto LABEL_12;
        return (uint64_t)v4;
      }
    }
    goto LABEL_13;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result[5];
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Data>, MEMORY[0x24BDCDDE8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v2 = (uint64_t *)swift_allocObject();
      v3 = _swift_stdlib_malloc_size(v2);
      v4 = v3 - 32;
      if (v3 < 32)
        v4 = v3 - 17;
      v2[2] = v1;
      v2[3] = 2 * (v4 >> 4);
      swift_retain();
      v5 = specialized Sequence._copySequenceContents(initializing:)(&v6, v2 + 4, v1);
      swift_release();
      if (v5 == v1)
        return v2;
      __break(1u);
    }
    return (uint64_t *)MEMORY[0x24BEE4AF8];
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSCalendarUnit>, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  if (v5 <= 0)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(type metadata accessor for UUID() - 8);
      v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = a2 + v16 * a3;
      v18 = v16 * v5;
      v19 = &v15[v18];
      v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v8 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1)
      goto LABEL_23;
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>, (uint64_t (*)(uint64_t))type metadata accessor for Attribute<ViewList>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 29;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    MEMORY[0x23B7C6D78](v3 + 4, v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

int64_t *specialized _copyCollectionToContiguousArray<A>(_:)(int64_t *result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x24BEE4AF8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = specialized Sequence._copySequenceContents(initializing:)(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      v3 = result;
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v4 = (_QWORD *)swift_allocObject();
      v5 = _swift_stdlib_malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = a2;
      v4[3] = 2 * (v6 >> 3);
      if (specialized Sequence._copySequenceContents(initializing:)(v7, v4 + 4, a2, v3, a2) == (_QWORD *)a2)
        return v4;
      __break(1u);
    }
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return _HashTable.occupiedBucket(after:)();
LABEL_8:
  __break(1u);
  return result;
}

void specialized static AccessibilityCustomAttributes.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD v21[8];
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v23 = a1;
  v2 = type metadata accessor for URL();
  v21[4] = *(_QWORD *)(v2 - 8);
  v21[5] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v21[1] = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date();
  v21[2] = *(_QWORD *)(v4 - 8);
  v21[3] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21[0] = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  v21[7] = (char *)v21 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v21[6] = (char *)v21 - v11;
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  type metadata accessor for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value)();
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v21 + *(int *)(v18 + 48) - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(v23, (uint64_t)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  outlined init with copy of TypesettingLanguage(v22, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  v20 = (char *)sub_234B71B0C + 4 * byte_235287B6A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234B71B0C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  BOOL v9;
  int v10;

  outlined init with copy of TypesettingLanguage(v0, (uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  v4 = *v2;
  v3 = v2[1];
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    LOBYTE(v5) = 0;
    v6 = (uint64_t (*)(_QWORD))type metadata accessor for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value);
    v7 = v0;
  }
  else
  {
    v9 = v4 == *v1 && v3 == v1[1];
    v7 = v0;
    if (v9)
    {
      swift_bridgeObjectRelease_n();
      LOBYTE(v5) = 1;
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v10 << 31 >> 31;
    }
    v6 = (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value;
  }
  outlined destroy of TypesettingConfiguration(v7, v6);
  return v5 & 1;
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized static AccessibilityCustomAttributes.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;

  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v48 - v6;
  v54 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v8 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v53 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v48 - v11;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), v4);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v18 = (uint64_t *)((char *)&v48 - v17);
  v19 = *a1;
  v20 = *a2;
  if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)(v20 + 16))
    return 0;
  v21 = *(_QWORD *)(v19 + 64);
  v50 = v19 + 64;
  v22 = 1 << *(_BYTE *)(v19 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v51 = (unint64_t)(v22 + 63) >> 6;
  v52 = v19;
  v49 = v51 - 1;
  result = swift_bridgeObjectRetain();
  v55 = 0;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v55 << 6);
      v28 = v52;
LABEL_7:
      v29 = *(_QWORD *)(v28 + 56);
      v30 = (_QWORD *)(*(_QWORD *)(v28 + 48) + 16 * v27);
      v31 = v30[1];
      *v15 = *v30;
      v15[1] = v31;
      v32 = v29 + *(_QWORD *)(v8 + 72) * v27;
      type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
      v34 = v33;
      outlined init with copy of TypesettingLanguage(v32, (uint64_t)v15 + *(int *)(v33 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 0, 1, v34);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    v35 = v55 + 1;
    if (__OFADD__(v55, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v35 < v51)
    {
      v36 = *(_QWORD *)(v50 + 8 * v35);
      if (v36)
        goto LABEL_11;
      v37 = v55 + 2;
      ++v55;
      if (v35 + 1 < v51)
      {
        v36 = *(_QWORD *)(v50 + 8 * v37);
        if (v36)
          goto LABEL_15;
        v55 = v35 + 1;
        if (v35 + 2 < v51)
        {
          v36 = *(_QWORD *)(v50 + 8 * (v35 + 2));
          if (v36)
          {
            v35 += 2;
LABEL_11:
            v28 = v52;
LABEL_12:
            v24 = (v36 - 1) & v36;
            v27 = __clz(__rbit64(v36)) + (v35 << 6);
            v55 = v35;
            goto LABEL_7;
          }
          v37 = v35 + 3;
          v55 = v35 + 2;
          if (v35 + 3 < v51)
            break;
        }
      }
    }
LABEL_27:
    type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
    v34 = v38;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v15, 1, 1, v38);
    v24 = 0;
LABEL_28:
    outlined init with take of Any?((uint64_t)v15, (uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t)type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v18, 1, v34) == 1)
    {
      swift_release();
      return 1;
    }
    v39 = *v18;
    v40 = v18[1];
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v18 + *(int *)(v34 + 48), (uint64_t)v12);
    if (*(_QWORD *)(v20 + 16) && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40), (v42 & 1) != 0))
    {
      outlined init with copy of TypesettingLanguage(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v8 + 72) * v41, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      v43 = 0;
    }
    else
    {
      v43 = 1;
    }
    v44 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, v43, 1, v54);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v44) == 1)
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_release();
      outlined destroy of Any?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
      return 0;
    }
    v45 = v53;
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v7, v53);
    specialized static AccessibilityCustomAttributes.Value.== infix(_:_:)((uint64_t)v12, v45);
    v47 = v46;
    outlined destroy of TypesettingConfiguration(v45, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    result = outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    if ((v47 & 1) == 0)
    {
      swift_release();
      return 0;
    }
  }
  v36 = *(_QWORD *)(v50 + 8 * v37);
  if (v36)
  {
LABEL_15:
    v35 = v37;
    goto LABEL_11;
  }
  v28 = v52;
  while (1)
  {
    v35 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v35 >= v51)
    {
      v55 = v49;
      goto LABEL_27;
    }
    v36 = *(_QWORD *)(v50 + 8 * v35);
    ++v37;
    if (v36)
      goto LABEL_12;
  }
LABEL_41:
  __break(1u);
  return result;
}

void type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value))
  {
    type metadata accessor for AccessibilityCustomAttributes.Value();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value));
  }
}

uint64_t outlined assign with take of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes.Value.CodingKeys, &unk_25063F8F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes.Value.CodingKeys, &unk_25063F8F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("-%=\x1B̾\v", &unk_25063F8F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes.Value.CodingKeys, &unk_25063F8F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void type metadata accessor for (@thick Any.Type, DecodingError.Context)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
  {
    type metadata accessor for @thick Any.Type();
    type metadata accessor for DecodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  }
}

unint64_t type metadata accessor for @thick Any.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for @thick Any.Type;
  if (!lazy cache variable for type metadata for @thick Any.Type)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for @thick Any.Type);
  }
  return result;
}

unint64_t specialized AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes.CodingKeys, &unk_25063F798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes.CodingKeys, &unk_25063F798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes.CodingKeys, &unk_25063F798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes.CodingKeys, &unk_25063F798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes, &type metadata for AccessibilityCustomAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes, &type metadata for AccessibilityCustomAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes, &type metadata for AccessibilityCustomAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityCustomAttributes, &type metadata for AccessibilityCustomAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AccessibilityCustomAttributes()
{
  return lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type DefaultIndices<AccessibilityCustomAttributes> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<AccessibilityCustomAttributes>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE0650], MEMORY[0x24BEE0670]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes, (uint64_t)&type metadata for AccessibilityCustomAttributes, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AccessibilityCustomAttributes()
{
  return lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<AccessibilityCustomAttributes> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<AccessibilityCustomAttributes>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AccessibilityCustomAttributes()
{
  return lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<AccessibilityCustomAttributes>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

uint64_t sub_234B72A64()
{
  return 0;
}

ValueMetadata *type metadata accessor for AccessibilityCustomAttributes()
{
  return &type metadata for AccessibilityCustomAttributes;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityCustomAttributes.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_234B72AD4 + 4 * byte_235287B72[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void destroy for AccessibilityCustomAttributes.Value(uint64_t a1)
{
  uint64_t v2;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      break;
    case 1u:
      outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      break;
    case 2u:
    case 3u:
    case 6u:
    case 7u:

      break;
    case 4u:
      v2 = type metadata accessor for Date();
      goto LABEL_7;
    case 5u:
      v2 = type metadata accessor for URL();
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    default:
      return;
  }
}

void initializeWithCopy for AccessibilityCustomAttributes.Value()
{
  char *v0;

  v0 = (char *)sub_234B72D00 + 4 * byte_235287B82[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_234B72D00()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for AccessibilityCustomAttributes.Value(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of TypesettingConfiguration(result, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    v2 = (char *)&loc_234B72E80 + 4 * byte_235287B8A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *initializeWithTake for AccessibilityCustomAttributes.Value(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v8 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 4)
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AccessibilityCustomAttributes.Value(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 4)
    {
      v7 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AccessibilityCustomAttributes.Value()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AccessibilityCustomAttributes.Value()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomAttributes.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234B7326C + 4 * byte_235287B92[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234B7328C + 4 * byte_235287B97[v4]))();
}

_BYTE *sub_234B7326C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234B7328C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234B73294(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234B7329C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234B732A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234B732AC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AccessibilityCustomAttributes.CodingKeys()
{
  return &unk_25063F798;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomAttributes.Value.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomAttributes.Value.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_234B733A4 + 4 * byte_235287BA1[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_234B733D8 + 4 * byte_235287B9C[v4]))();
}

uint64_t sub_234B733D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B733E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B733E8);
  return result;
}

uint64_t sub_234B733F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B733FCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_234B73400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B73408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AccessibilityCustomAttributes.Value.CodingKeys()
{
  return &unk_25063F8F0;
}

uint64_t outlined retain of Text.Effect.RenderSegmentation.StaticLines(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t type metadata accessor for AnyPreferenceKey.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AnyPreferenceKey.Type;
  if (!lazy cache variable for type metadata for AnyPreferenceKey.Type)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for AnyPreferenceKey);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyPreferenceKey.Type);
  }
  return result;
}

uint64_t outlined retain of LayoutGestureBox.Child(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 112);
  v9 = *(_OWORD *)(a1 + 160);
  v10 = *(_OWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = *(id *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of LayoutGestureBox.Child.DebugData?(v17, v16, v15, v2, v3, v4, v14, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v5, v6);
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t outlined copy of LayoutGestureBox.Child.DebugData?(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18)
{
  if (HIDWORD(a4) || result < 0xFFFFFFFF00000000 || a3 & 0xFFFFFC00 | a2 & 0xF000000000000007)
    return outlined copy of LayoutGestureBox.Child.DebugData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  if (a17 > 3 || (a18 & 0xF000000000000007) != 0)
    return outlined copy of LayoutGestureBox.Child.DebugData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  return result;
}

uint64_t outlined copy of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  uint64_t result;

  if ((a18 & 0x8000000000000000) == 0)
  {
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with copy of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _VariadicView_Children(a2, a1);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<_VariadicView_Children>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, (uint64_t)&type metadata for _VariadicView_Children, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Attribute<ViewList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<ViewList>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>);
  }
}

void type metadata accessor for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value))
  {
    type metadata accessor for AccessibilityCustomAttributes.Value();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value));
  }
}

void type metadata accessor for IndexingIterator<Text.Effect.BaseContent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.BaseContent>)
  {
    type metadata accessor for Text.Effect.BaseContent(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, type metadata accessor for Text.Effect.BaseContent, (uint64_t)&protocol conformance descriptor for Text.Effect.BaseContent);
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.BaseContent>);
  }
}

uint64_t AnimationListener.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnimationListener.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t AnimationListener.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnimationListener.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Transaction.animationListener.getter(uint64_t a1)
{
  return Transaction.animationListener.getter(a1, specialized find<A>(_:key:));
}

uint64_t Transaction.addAnimationListener(_:)(uint64_t a1)
{
  return Transaction.addAnimationListener(_:)(a1, specialized find<A>(_:key:), (void (*)(uint64_t, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction.addAnimationListener(allFinished:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  type metadata accessor for AllFinishedListener();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 16) = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  swift_retain();
  Transaction.addAnimationListener(_:)(v5);
  swift_release();
  return swift_release();
}

{
  return Transaction.addAnimationListener(allFinished:)(a1, a2, (void (*)(uint64_t))Transaction.addAnimationListener(_:));
}

uint64_t Transaction.animationLogicalListener.getter(uint64_t a1)
{
  return Transaction.animationListener.getter(a1, specialized find<A>(_:key:));
}

uint64_t Transaction.animationListener.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = swift_retain();
  v4 = a2(v3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    swift_retain();
  }
  else
  {
    v5 = 0;
  }
  swift_release();
  return v5;
}

uint64_t key path getter for Transaction.animationListener : Transaction@<X0>(uint64_t (*a1)(uint64_t)@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = swift_retain();
  v5 = a1(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    swift_retain();
  }
  else
  {
    v6 = 0;
  }
  result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t key path setter for Transaction.animationListener : Transaction(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7;
  uint64_t v9;

  v7 = *a1;
  swift_retain();
  swift_retain_n();
  a5(a2, v7, &v9);
  swift_release_n();
  return swift_release();
}

uint64_t Transaction.addAnimationLogicalListener(_:)(uint64_t a1)
{
  return Transaction.addAnimationListener(_:)(a1, specialized find<A>(_:key:), (void (*)(uint64_t, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction.addAnimationListener(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), void (*a3)(uint64_t, uint64_t, _BYTE *))
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[8];
  _BYTE v15[16];

  if (one-time initialization token for pendingListeners != -1)
    swift_once();
  v7 = (os_unfair_lock_s *)((char *)static Transaction.pendingListeners + 16);
  v8 = (char *)static Transaction.pendingListeners + 24;
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in static Transaction.addPendingListener(_:)((uint64_t)v8);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  v9 = swift_retain();
  v10 = a2(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(v10 + 72);
  swift_retain();
  swift_release();
  if (!v11)
  {
LABEL_7:
    swift_retain_n();
    swift_retain();
    a3(v3, a1, v15);
    goto LABEL_8;
  }
  type metadata accessor for ListenerPair();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  a3(v3, v12, v14);
  swift_release();
LABEL_8:
  swift_release_n();
  return swift_release();
}

uint64_t Transaction.addAnimationLogicalListener(allFinished:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  type metadata accessor for AllFinishedListener();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 16) = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  swift_retain();
  Transaction.addAnimationLogicalListener(_:)(v5);
  swift_release();
  return swift_release();
}

{
  return Transaction.addAnimationListener(allFinished:)(a1, a2, (void (*)(uint64_t))Transaction.addAnimationLogicalListener(_:));
}

uint64_t Transaction.addAnimationListener(allFinished:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for AllFinishedListener();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  a3(v6);
  return swift_release();
}

uint64_t Transaction.AnimationCompletionInfo.completedCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Transaction.AnimationCompletionInfo.completedCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Transaction.AnimationCompletionInfo.completedCount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Transaction.AnimationCompletionInfo.init(completedCount:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Transaction.combinedAnimationListener.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (!v1)
  {
    swift_release();
LABEL_7:
    v7 = swift_retain();
    v8 = specialized find<A>(_:key:)(v7);
    if (v8)
    {
      v2 = *(_QWORD *)(v8 + 72);
      swift_retain();
    }
    else
    {
      v2 = 0;
    }
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 72);
  swift_retain();
  swift_release();
  if (!v2)
    goto LABEL_7;
  v3 = swift_retain();
  v4 = specialized find<A>(_:key:)(v3);
  if (!v4)
  {
LABEL_10:
    swift_release();
    return v2;
  }
  v5 = *(_QWORD *)(v4 + 72);
  swift_retain();
  swift_release();
  if (v5)
  {
    type metadata accessor for ListenerPair();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v2;
    *(_QWORD *)(v6 + 24) = v5;
    return v6;
  }
  return v2;
}

uint64_t one-time initialization function for pendingListeners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  type metadata accessor for AtomicBuffer<Transaction.PendingListeners>(0, a2, a3, a4);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(result + 32) = 0;
  static Transaction.pendingListeners = (_UNKNOWN *)result;
  return result;
}

uint64_t closure #1 in static Transaction.addPendingListener(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchTime();
  v8 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - v12;
  swift_weakInit();
  swift_weakAssign();
  outlined init with take of Transaction.PendingListeners.WeakListener();
  v14 = *(_QWORD **)a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, (unint64_t)v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, (unint64_t)v14);
  v14[2] = v16 + 1;
  result = outlined init with take of Transaction.PendingListeners.WeakListener();
  *(_QWORD *)a1 = v14;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    *(_BYTE *)(a1 + 8) = 1;
    type metadata accessor for OS_dispatch_queue();
    v18 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    MEMORY[0x23B7C586C](v10, 0.01);
    v23 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19 = v24;
    v23(v10, v24);
    aBlock[4] = specialized closure #1 in closure #1 in static Transaction.addPendingListener(_:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_3;
    v20 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v21 = v28;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x23B7C6808](v13, v7, v4, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v21);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
    return ((uint64_t (*)(char *, uint64_t))v23)(v13, v19);
  }
  return result;
}

uint64_t ListenerPair.animationWasAdded()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 88))();
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 24) + 88))(v1);
}

uint64_t ListenerPair.animationWasRemoved()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 96))();
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 24) + 96))(v1);
}

void ListenerPair.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ListenerPair.__ivar_destroyer()
{
  swift_release();
  return swift_release();
}

uint64_t ListenerPair.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t AllFinishedListener.__ivar_destroyer()
{
  return swift_release();
}

uint64_t AllFinishedListener.finalizeTransaction()()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t *);
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)(v0 + 32) && (*(_BYTE *)(v0 + 48) & 1) == 0)
  {
    *(_BYTE *)(v0 + 48) = 1;
    v1 = *(uint64_t (**)(uint64_t *))(v0 + 16);
    v3 = *(_QWORD *)(v0 + 40);
    return v1(&v3);
  }
  return result;
}

uint64_t AllFinishedListener.__deallocating_deinit()
{
  uint64_t v0;
  void (*v1)(uint64_t *);
  uint64_t v3;

  if (!*(_QWORD *)(v0 + 32) && (*(_BYTE *)(v0 + 48) & 1) == 0)
  {
    *(_BYTE *)(v0 + 48) = 1;
    v1 = *(void (**)(uint64_t *))(v0 + 16);
    v3 = *(_QWORD *)(v0 + 40);
    v1(&v3);
  }
  swift_release();
  return swift_deallocClassInstance();
}

void AllFinishedListener.animationWasAdded()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 32) = v3;
    v4 = *(_QWORD *)(v0 + 40);
    v2 = __OFADD__(v4, 1);
    v5 = v4 + 1;
    if (!v2)
    {
      *(_QWORD *)(v0 + 40) = v5;
      return;
    }
  }
  __break(1u);
}

uint64_t AllFinishedListener.animationWasRemoved()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *);
  uint64_t result;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = __OFSUB__(v1, 1);
  v3 = v1 - 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 32) = v3;
    if (!v3 && (*(_BYTE *)(v0 + 48) & 1) == 0)
    {
      *(_BYTE *)(v0 + 48) = 1;
      v4 = *(uint64_t (**)(uint64_t *))(v0 + 16);
      v6 = *(_QWORD *)(v0 + 40);
      return v4(&v6);
    }
  }
  return result;
}

void AllFinishedListener.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for ListenerPair()
{
  return objc_opt_self();
}

uint64_t sub_234B745C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for AllFinishedListener()
{
  return objc_opt_self();
}

uint64_t sub_234B74608@<X0>(_QWORD *a1@<X8>)
{
  return key path getter for Transaction.animationListener : Transaction(specialized find<A>(_:key:), a1);
}

uint64_t sub_234B74624(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.animationListener : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234B74640@<X0>(_QWORD *a1@<X8>)
{
  return key path getter for Transaction.animationListener : Transaction(specialized find<A>(_:key:), a1);
}

uint64_t sub_234B7465C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.animationListener : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t type metadata accessor for AnimationListener()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnimationListener()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnimationListener.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AnimationListener.animationWasAdded()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of AnimationListener.animationWasRemoved()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AnimationListener.finalizeTransaction()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

ValueMetadata *type metadata accessor for Transaction.AnimationCompletionInfo()
{
  return &type metadata for Transaction.AnimationCompletionInfo;
}

uint64_t outlined init with take of Transaction.PendingListeners.WeakListener()
{
  return swift_weakTakeInit();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t specialized closure #1 in closure #1 in static Transaction.addPendingListener(_:)()
{
  _BYTE *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  _BYTE v8[8];

  if (one-time initialization token for pendingListeners != -1)
    swift_once();
  v0 = static Transaction.pendingListeners;
  v1 = (os_unfair_lock_s *)((char *)static Transaction.pendingListeners + 16);
  swift_retain();
  os_unfair_lock_lock(v1);
  v0[32] = 0;
  v2 = *((_QWORD *)v0 + 3);
  *((_QWORD *)v0 + 3) = MEMORY[0x24BEE4AF8];
  os_unfair_lock_unlock(v1);
  swift_release();
  if (!*(_QWORD *)(v2 + 16))
    return swift_bridgeObjectRelease();
  if (one-time initialization token for _lock != -1)
    swift_once();
  v3 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Transaction.PendingListeners.WeakListener();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)Strong + 104))(Strong);
        swift_release();
      }
      outlined destroy of weak AnyGestureResponder?((uint64_t)v8);
      v5 += 8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  static Update.end()();
  _MovableLockUnlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void type metadata accessor for [DispatchWorkItemFlags]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [DispatchWorkItemFlags])
  {
    type metadata accessor for DispatchWorkItemFlags();
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags]);
  }
}

uint64_t outlined init with copy of Transaction.PendingListeners.WeakListener()
{
  return swift_weakCopyInit();
}

void type metadata accessor for AtomicBuffer<Transaction.PendingListeners>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AtomicBuffer<Transaction.PendingListeners>)
  {
    v4 = type metadata accessor for AtomicBuffer(0, (uint64_t)&unk_2506120F0, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<Transaction.PendingListeners>);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for Transaction.PendingListeners(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Transaction.PendingListeners(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Transaction.PendingListeners(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Transaction.PendingListeners(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Transaction.PendingListeners(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for Transaction.PendingListeners()
{
  return &unk_2506120F0;
}

ValueMetadata *type metadata accessor for Transaction.PendingListeners.WeakListener()
{
  return &type metadata for Transaction.PendingListeners.WeakListener;
}

ValueMetadata *type metadata accessor for Transaction.AnimationListenerKey()
{
  return &type metadata for Transaction.AnimationListenerKey;
}

ValueMetadata *type metadata accessor for Transaction.AnimationLogicalListenerKey()
{
  return &type metadata for Transaction.AnimationLogicalListenerKey;
}

uint64_t one-time initialization function for foreground()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.ForegroundColorProvider>(0);
  result = swift_allocObject();
  static Color.foreground = result;
  return result;
}

uint64_t EnvironmentValues._effectiveForegroundColor.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  swift_retain();
  swift_retain();
  v3 = EnvironmentValues.foregroundStyle.getter();
  if (!v3)
  {
    v3 = EnvironmentValues.defaultForegroundStyle.getter();
    if (!v3)
    {
      if (one-time initialization token for sharedPrimary != -1)
        swift_once();
      v3 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  swift_release();
  swift_release();
  v4 = specialized ShapeStyle.fallbackColor(in:level:)(v1, v2, 0, v3);
  swift_release();
  return v4;
}

uint64_t View.defaultForegroundColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

{
  uint64_t *KeyPath;
  uint64_t v8;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t EnvironmentValues.defaultForegroundColor.getter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultForegroundColor.getter((uint64_t (*)(_QWORD, uint64_t))EnvironmentValues.defaultForegroundStyle.getter, a2);
}

uint64_t key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues(a1, (uint64_t (*)(uint64_t))EnvironmentValues.defaultForegroundStyle.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultForegroundColor : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t EnvironmentValues.defaultForegroundColor.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t View.foregroundColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.foregroundColor.getter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultForegroundColor.getter((uint64_t (*)(_QWORD, uint64_t))EnvironmentValues.foregroundStyle.getter, a2);
}

uint64_t EnvironmentValues.defaultForegroundColor.getter(uint64_t (*a1)(_QWORD, uint64_t), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *v2;
  v4 = v2[1];
  result = a1(a1, a2);
  if (result)
  {
    v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, result);
    swift_release();
    return v6;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = a1[1];
  result = EnvironmentValues.foregroundStyle.getter();
  if (result)
  {
    v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, result);
    result = swift_release();
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.foregroundColor.setter(uint64_t a1)
{
  specialized EnvironmentValues.foregroundColor.setter(a1);
  return swift_release();
}

uint64_t (*EnvironmentValues.defaultForegroundColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[3] = (uint64_t)v1;
  v3 = *v1;
  v4 = v1[1];
  v5 = EnvironmentValues.defaultForegroundStyle.getter();
  if (v5)
  {
    v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, v5);
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return EnvironmentValues.defaultForegroundColor.modify;
}

uint64_t EnvironmentValues.defaultForegroundColor.modify(uint64_t *a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (uint64_t *)a1[3];
  v5 = *a1;
  v6 = *v4;
  swift_retain_n();
  swift_retain();
  if ((a2 & 1) != 0)
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_release();
    if (v4[1])
    {
      v7 = *(_QWORD *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_release();
    if (v4[1])
    {
      v8 = *(_QWORD *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  swift_retain();
  v7 = swift_retain();
  v8 = a2(v7);
  if (v8)
  {
    v9 = specialized ShapeStyle.fallbackColor(in:level:)(v5, v6, 0, v8);
    swift_release();
    swift_release();
    result = swift_release();
  }
  else
  {
    swift_release();
    result = swift_release();
    v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t (*EnvironmentValues.foregroundColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[3] = (uint64_t)v1;
  v3 = *v1;
  v4 = v1[1];
  v5 = EnvironmentValues.foregroundStyle.getter();
  if (v5)
  {
    v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, v5);
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return EnvironmentValues.foregroundColor.modify;
}

uint64_t EnvironmentValues.foregroundColor.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  if ((a2 & 1) != 0)
  {
    if (!v3)
      goto LABEL_7;
    v4 = one-time initialization token for foreground;
    swift_retain();
    if (v4 != -1)
      swift_once();
    if (static Color.foreground == v3 || ((*(uint64_t (**)(void))(*(_QWORD *)v3 + 88))() & 1) != 0)
    {
LABEL_7:
      v5 = 0;
    }
    else
    {
      swift_retain();
      v5 = v3;
    }
    v6 = (uint64_t *)a1[3];
    v7 = *v6;
    swift_retain();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v6, v5);
    swift_release();
    swift_release();
    if (v6[1])
    {
      v8 = *(_QWORD *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (!v3)
      goto LABEL_16;
    if (one-time initialization token for foreground != -1)
      swift_once();
    if (static Color.foreground == v3 || ((*(uint64_t (**)(void))(*(_QWORD *)v3 + 88))() & 1) != 0)
    {
LABEL_16:
      v9 = 0;
    }
    else
    {
      swift_retain();
      v9 = v3;
    }
    v10 = (uint64_t *)a1[3];
    v11 = *v10;
    swift_retain();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v10, v9);
    swift_release();
    swift_release();
    if (v10[1])
    {
      v12 = *(_QWORD *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t _ForegroundColorModifier.color.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_ForegroundColorModifier.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for Rule.value.getter in conformance _ForegroundColorModifier.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  v4 = *(_QWORD *)AGGraphGetValue();
  if (v4)
  {
    v5 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v5 != -1)
      swift_once();
    if (static Color.foreground == v4 || ((*(uint64_t (**)(void))(*(_QWORD *)v4 + 88))() & 1) != 0)
      v4 = 0;
    else
      swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  specialized EnvironmentValues.subscript.setter(v4);
  swift_release();
  return swift_release();
}

uint64_t sub_234B7554C()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t specialized static _ForegroundColorModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;

  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment();
  v3 = Attribute.init<A>(body:value:flags:update:)();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(_QWORD *)(v6 + 88) = v5;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v6;
  v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v8 | 0x20;
  return result;
}

float specialized Color.ForegroundColorProvider.resolve(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  float v5;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = a1[1];
  v7 = *a1;
  v8 = v2;
  swift_retain_n();
  swift_retain_n();
  v3 = EnvironmentValues.foregroundStyle.getter();
  if (!v3)
  {
    v7 = v1;
    v8 = v2;
    v3 = EnvironmentValues.defaultForegroundStyle.getter();
    if (!v3)
    {
      if (one-time initialization token for sharedPrimary != -1)
        swift_once();
      v3 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  swift_release();
  swift_release();
  v4 = (void *)specialized ShapeStyle.fallbackColor(in:level:)(v1, v2, 0, v3);
  swift_release();
  swift_release();
  swift_release();
  if (!v4)
  {
    if (one-time initialization token for primary != -1)
      swift_once();
    v4 = static Color.primary;
    swift_retain();
  }
  v7 = v1;
  v8 = v2;
  v5 = (*(float (**)(uint64_t *))(*(_QWORD *)v4 + 104))(&v7);
  swift_release();
  return v5;
}

uint64_t specialized EnvironmentValues.foregroundColor.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1;
  if (a1)
  {
    if (one-time initialization token for foreground != -1)
      swift_once();
    if (static Color.foreground == v2 || ((*(uint64_t (**)(void))(*(_QWORD *)v2 + 88))() & 1) != 0)
      v2 = 0;
    else
      swift_retain();
  }
  v3 = *v1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_234B75958@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues(a1, (uint64_t (*)(uint64_t))EnvironmentValues.foregroundStyle.getter, a2);
}

uint64_t keypath_set_3Tm()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.foregroundColor.setter(v0);
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for _ForegroundColorModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _ForegroundColorModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for _ForegroundColorModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ForegroundColorModifier(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ForegroundColorModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ForegroundColorModifier()
{
  return &type metadata for _ForegroundColorModifier;
}

uint64_t sub_234B75AF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
  }
}

unint64_t lazy protocol witness table accessor for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundColorModifier.ChildEnvironment, &type metadata for _ForegroundColorModifier.ChildEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for ColorBox<Color.ForegroundColorProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ColorBox<Color.ForegroundColorProvider>)
  {
    v2 = lazy protocol witness table accessor for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider();
    v4 = type metadata accessor for ColorBox(a1, (uint64_t)&unk_25064B0C0, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.ForegroundColorProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.ForegroundColorProvider, &unk_25064B0C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.ForegroundColorProvider, &unk_25064B0C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.ForegroundColorProvider, &unk_25064B0C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider);
  }
  return result;
}

void *type metadata accessor for Color.ForegroundColorProvider()
{
  return &unk_25064B0C0;
}

ValueMetadata *type metadata accessor for _ForegroundColorModifier.ChildEnvironment()
{
  return &type metadata for _ForegroundColorModifier.ChildEnvironment;
}

unint64_t instantiation function for generic protocol witness table for Color.ForegroundColorProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t BitVector64.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t BitVector64.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*BitVector64.rawValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BitVector64.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void BitVector64.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t BitVector64.subscript.getter(unint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v2 = 1 << a1;
    if (a1 >= 0x40)
      v2 = 0;
    return (*v1 & v2) != 0;
  }
  return result;
}

uint64_t BitVector64.subscript.setter(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2 <= 0x3F)
    {
      v3 = 1 << a2;
      if ((result & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      v3 = 0;
      if ((result & 1) != 0)
      {
LABEL_4:
        v4 = *v2 | v3;
LABEL_7:
        *v2 = v4;
        return result;
      }
    }
    v4 = *v2 & ~v3;
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*BitVector64.subscript.modify(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*result)(uint64_t);

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    result = (uint64_t (*)(uint64_t))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v3 = 1 << a2;
    if (a2 >= 0x40)
      v3 = 0;
    *(_BYTE *)(a1 + 16) = (*v2 & v3) != 0;
    return BitVector64.subscript.modify;
  }
  return result;
}

uint64_t BitVector64.subscript.modify(uint64_t a1)
{
  return BitVector64.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(_QWORD *)a1);
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance BitVector64@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *result | *v2;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance BitVector64@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *result & *v2;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance BitVector64@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *result ^ *v2;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance BitVector64(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a2 & *v2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance BitVector64@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *result & *v2;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance BitVector64@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *result;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance BitVector64(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance BitVector64(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance BitVector64(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance BitVector64@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance BitVector64(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance BitVector64(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & *v1) == 0;
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance BitVector64(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t Array.mapBool(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = a1;
  v25 = a2;
  v23 = a5;
  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = type metadata accessor for Optional();
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (unint64_t *)((char *)&v23 - v15);
  v30 = a3;
  v17 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v17);
  Sequence.enumerated()();
  v28 = v29;
  type metadata accessor for EnumeratedSequence();
  EnumeratedSequence.makeIterator()();
  type metadata accessor for EnumeratedSequence.Iterator();
  v18 = 0;
  while (1)
  {
    EnumeratedSequence.Iterator.next()();
    (*(void (**)(unint64_t *, char *, uint64_t))(v26 + 32))(v16, v13, v27);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8)
                                                                              + 48))(v16, 1, TupleTypeMetadata2) == 1)
    {
      result = swift_bridgeObjectRelease();
      *v23 = v18;
      return result;
    }
    v19 = *v16;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v16 + *(int *)(TupleTypeMetadata2 + 48), a4);
    v20 = v24(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
    if ((v19 & 0x8000000000000000) != 0)
      break;
    if (v19 < 0x40)
    {
      v21 = 1 << v19;
      if ((v20 & 1) != 0)
        goto LABEL_9;
LABEL_2:
      v18 &= ~v21;
    }
    else
    {
      v21 = 0;
      if ((v20 & 1) == 0)
        goto LABEL_2;
LABEL_9:
      v18 |= v21;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void BitVector.init(count:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;

  if (a1 < 65)
  {
    v5 = MEMORY[0x24BEE4AF8];
    goto LABEL_5;
  }
  if (!__OFADD__(a1, 63))
  {
    v4 = (unint64_t)(a1 + 63) >> 6;
    v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), 8 * v4);
LABEL_5:
    *(_BYTE *)a2 = a1 > 64;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = a1;
    return;
  }
  __break(1u);
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2, int32x2_t a3, int32x2_t a4, int32x2_t a5)
{
  uint64_t result;
  __int32 *v7;
  unint64_t v8;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float *v17;
  unint64_t v18;
  float *v19;
  unint64_t v20;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v7 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v8 = 0;
    v10 = a4.i32[0];
    v9 = a5.i32[0];
    v12 = a2.i32[0];
    v11 = a3.i32[0];
LABEL_9:
    v20 = a1 - v8;
    do
    {
      *v7 = v12;
      v7[1] = v11;
      v7[2] = v10;
      v7[3] = v9;
      v7 += 4;
      --v20;
    }
    while (v20);
    return result;
  }
  v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 += 4 * (a1 & 0xFFFFFFFFFFFFFFF8);
  v12 = a2.i32[0];
  v11 = a3.i32[0];
  v13 = vdupq_lane_s32(a2, 0);
  v14 = vdupq_lane_s32(a3, 0);
  v10 = a4.i32[0];
  v9 = a5.i32[0];
  v15 = vdupq_lane_s32(a4, 0);
  v16 = vdupq_lane_s32(a5, 0);
  v17 = (float *)(result + 96);
  v18 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v19 = v17 - 16;
    vst4q_f32(v19, *(float32x4x4_t *)v13.i8);
    vst4q_f32(v17, *(float32x4x4_t *)v13.i8);
    v17 += 32;
    v18 -= 8;
  }
  while (v18);
  if (v8 != a1)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      *(_QWORD *)(v4 + 16) = a2;
      v6 = a1[3];
      v8 = *a1;
      v7 = a1[1];
      *(_OWORD *)(v4 + 64) = a1[2];
      *(_OWORD *)(v4 + 80) = v6;
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v7;
      if (a2 != 1)
      {
        v9 = *a1;
        v10 = a1[1];
        v11 = a1[3];
        *(_OWORD *)(v4 + 128) = a1[2];
        *(_OWORD *)(v4 + 144) = v11;
        *(_OWORD *)(v4 + 96) = v9;
        *(_OWORD *)(v4 + 112) = v10;
        v12 = a2 - 2;
        if (v12)
        {
          v13 = (_OWORD *)(v4 + 160);
          do
          {
            outlined retain of ViewGeometry((uint64_t)a1);
            v14 = a1[3];
            v16 = *a1;
            v15 = a1[1];
            v13[2] = a1[2];
            v13[3] = v14;
            *v13 = v16;
            v13[1] = v15;
            v13 += 4;
            --v12;
          }
          while (v12);
        }
        outlined retain of ViewGeometry((uint64_t)a1);
      }
    }
    else
    {
      outlined release of ViewGeometry((uint64_t)a1);
      return MEMORY[0x24BEE4AF8];
    }
    return v5;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2, double a3)
{
  uint64_t result;
  double *v5;
  unint64_t v6;
  double v7;
  double v8;
  int64x2_t v9;
  int64x2_t v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for CGPoint(0);
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v5 = (double *)(result + 32);
  if (a1 < 4)
  {
    v6 = 0;
    v7 = a3;
    v8 = a2;
LABEL_9:
    v14 = a1 - v6;
    do
    {
      *v5 = v8;
      v5[1] = v7;
      v5 += 2;
      --v14;
    }
    while (v14);
    return result;
  }
  v6 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += 2 * (a1 & 0xFFFFFFFFFFFFFFFCLL);
  v8 = a2;
  v9 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v7 = a3;
  v10 = vdupq_lane_s64(*(uint64_t *)&a3, 0);
  v11 = (double *)(result + 64);
  v12 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v13 = v11 - 4;
    vst2q_f64(v13, *(float64x2x2_t *)v9.i8);
    vst2q_f64(v11, *(float64x2x2_t *)v9.i8);
    v11 += 8;
    v12 -= 4;
  }
  while (v12);
  if (v6 != a1)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, unint64_t a2)
{
  return specialized Array.init(repeating:count:)(a1, a2);
}

{
  return specialized Array.init(repeating:count:)(a1, a2);
}

{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2)
{
  uint64_t result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  _WORD *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = vdupq_n_s16(a1);
  v8 = (int16x8_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t BitVector.startIndex.getter()
{
  return 0;
}

uint64_t BitVector.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t BitVector.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if ((*(_BYTE *)v1 & 1) != 0)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (a1 >> 6 < *(_QWORD *)(v2 + 16))
      {
        v3 = *(_QWORD *)(v2 + 8 * (a1 >> 6) + 32);
        v4 = 1 << a1;
        return (v3 & v4) != 0;
      }
    }
    __break(1u);
  }
  else if ((a1 & 0x8000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = 1 << a1;
    if ((unint64_t)a1 >= 0x40)
      v4 = 0;
    return (v3 & v4) != 0;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t BitVector.subscript.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = result;
  if ((*(_BYTE *)v2 & 1) != 0)
  {
    v5 = *(_QWORD **)(v2 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((a2 & 0x8000000000000000) == 0)
        goto LABEL_4;
    }
    else
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      if ((a2 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (a2 >> 6 < v5[2])
        {
          result = BitVector64.subscript.setter(v4 & 1, a2 & 0x3F);
          *(_QWORD *)(v2 + 16) = v5;
          return result;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)a2 < 0x40)
    {
      v6 = 1 << a2;
      if ((result & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      v6 = 0;
      if ((result & 1) != 0)
      {
LABEL_9:
        v7 = *(_QWORD *)(v2 + 8) | v6;
LABEL_12:
        *(_QWORD *)(v2 + 8) = v7;
        return result;
      }
    }
    v7 = *(_QWORD *)(v2 + 8) & ~v6;
    goto LABEL_12;
  }
LABEL_16:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*BitVector.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = BitVector.subscript.getter(a2) & 1;
  return BitVector.subscript.modify;
}

uint64_t BitVector.subscript.modify(uint64_t a1)
{
  return BitVector.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(_QWORD *)a1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BitVector(unsigned __int8 *a1, uint64_t *a2)
{
  return BitVector.subscript.setter(*a1, *a2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance BitVector(uint64_t a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = BitVector.subscript.getter(v4) & 1;
  return protocol witness for MutableCollection.subscript.modify in conformance BitVector;
}

uint64_t protocol witness for MutableCollection.subscript.modify in conformance BitVector(uint64_t a1)
{
  return BitVector.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BitVector(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], a1);
  return swift_bridgeObjectRelease();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance BitVector(void (***a1)(char **a1, char a2), uint64_t *a2))(_QWORD *a1)
{
  void (**v4)(char **, char);

  v4 = (void (**)(char **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance BitVector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t *protocol witness for MutableCollection.swapAt(_:_:) in conformance BitVector(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *result;
  v3 = *a2;
  if (*result != *a2)
  {
    v4 = BitVector.subscript.getter(v2);
    v5 = BitVector.subscript.getter(v3);
    BitVector.subscript.setter(v5 & 1, v2);
    return (uint64_t *)BitVector.subscript.setter(v4 & 1, v3);
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance BitVector(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance BitVector(_BYTE *a1, uint64_t *a2))(_QWORD, _QWORD)
{
  *a1 = BitVector.subscript.getter(*a2) & 1;
  return _ViewInputs.base.modify;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance BitVector@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v2 + 24);
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = result[1];
  if (v3 >= v5)
  {
    v7 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(a2 + 16) = *(_BYTE *)v2;
    *(_QWORD *)(a2 + 24) = v7;
    *(_QWORD *)(a2 + 32) = v6;
    *(_QWORD *)(a2 + 40) = v3;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance BitVector(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance BitVector()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) == 0;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BitVector(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BitVector(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance BitVector@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result;
  if (*result < 0 || v3 >= *(_QWORD *)(v2 + 24))
    __break(1u);
  else
    *a2 = v3 + 1;
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance BitVector(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result;
  if (*result < 0 || v2 >= *(_QWORD *)(v1 + 24))
    __break(1u);
  else
    *result = v2 + 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance BitVector@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(_QWORD *)(v2 + 24))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance BitVector(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(_QWORD *)(v1 + 24))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance BitVector@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(_QWORD *)(v3 + 24) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance BitVector@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance BitVector(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *(_QWORD *)(v2 + 24);
  if (v4 >= *a2)
  {
    v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5)
      return (uint64_t *)(v3 - v5);
  }
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance BitVector@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  uint64_t v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance BitVector()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 24);
  if (result < 0)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance BitVector()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t lazy protocol witness table accessor for type BitVector64 and conformance BitVector64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector64, &type metadata for BitVector64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector64, &type metadata for BitVector64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector64, &type metadata for BitVector64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    result = MEMORY[0x23B7C9C04]("u!=\x1BԺ\v", &type metadata for BitVector64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BitVector and conformance BitVector()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    result = MEMORY[0x23B7C9C04]("-!=\x1B", &type metadata for BitVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector, &type metadata for BitVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector, &type metadata for BitVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector, &type metadata for BitVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector, &type metadata for BitVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type BitVector and conformance BitVector, MEMORY[0x24BEE4220]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in BitVector()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
}

void type metadata accessor for Range<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<Int>)
  {
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>);
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type BitVector and conformance BitVector, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<BitVector>(255, &lazy cache variable for type metadata for Slice<BitVector>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BitVector()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<BitVector>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in BitVector()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BA8]);
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for Range<Int>();
    v6 = v5;
    v7 = lazy protocol witness table accessor for type Int and conformance Int();
    v8[0] = MEMORY[0x24BEE17A8];
    v8[1] = v7;
    result = MEMORY[0x23B7C9C04](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type BitVector and conformance BitVector, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<BitVector> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<BitVector>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

uint64_t lazy protocol witness table accessor for type Slice<BitVector> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<BitVector>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<BitVector>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type BitVector and conformance BitVector();
    v7 = a3(a1, &type metadata for BitVector, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_234B7776C@<X0>(unint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = BitVector64.subscript.getter(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_234B777AC(unsigned __int8 *a1, uint64_t a2, unint64_t *a3)
{
  return BitVector64.subscript.setter(*a1, *a3);
}

uint64_t sub_234B777D4()
{
  return 0;
}

uint64_t sub_234B777E4@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = BitVector.subscript.getter(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_234B77834(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  return BitVector.subscript.setter(*a1, *a3);
}

uint64_t sub_234B7785C()
{
  return 0;
}

ValueMetadata *type metadata accessor for BitVector64()
{
  return &type metadata for BitVector64;
}

uint64_t initializeWithCopy for BitVector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BitVector(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for BitVector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for BitVector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BitVector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BitVector()
{
  return &type metadata for BitVector;
}

uint64_t storeEnumTagSinglePayload for BitVector.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234B77A3C + 4 * byte_235288445[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234B77A70 + 4 * byte_235288440[v4]))();
}

uint64_t sub_234B77A70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B77A78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B77A80);
  return result;
}

uint64_t sub_234B77A8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B77A94);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234B77A98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B77AA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for BitVector.Kind()
{
  return &unk_25064EBB0;
}

unint64_t lazy protocol witness table accessor for type BitVector.Kind and conformance BitVector.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BitVector.Kind and conformance BitVector.Kind;
  if (!lazy protocol witness table cache variable for type BitVector.Kind and conformance BitVector.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BitVector.Kind, &unk_25064EBB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector.Kind and conformance BitVector.Kind);
  }
  return result;
}

uint64_t outlined retain of ViewGeometry(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of ViewGeometry(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t static Color.accentColor.getter()
{
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider, (uint64_t)&type metadata for Color.AccentColorProvider);
  return swift_allocObject();
}

unint64_t lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider;
  if (!lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.AccentColorProvider, &type metadata for Color.AccentColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider;
  if (!lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.AccentColorProvider, &type metadata for Color.AccentColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider;
  if (!lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.AccentColorProvider, &type metadata for Color.AccentColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider);
  }
  return result;
}

uint64_t EnvironmentValues.accentColor.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t EnvironmentValues.defaultAccentColor.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _BYTE v10[16];

  v1 = *v0;
  v2 = v0[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    v5 = v4;
    swift_release_n();
    swift_release_n();
    if (v3)
    {
LABEL_3:
      v9[0] = v1;
      v9[1] = v2;
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 8))(v9, v3, v5);
    }
  }
  else
  {
    v7 = swift_retain_n();
    v3 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v10);
    v5 = v8;
    swift_release_n();
    if (v3)
      goto LABEL_3;
  }
  return 0;
}

uint64_t View.accentColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *KeyPath;
  uint64_t v8;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t EnvironmentValues.accentColor.setter(uint64_t a1)
{
  specialized EnvironmentValues.accentColor.setter(a1);
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.accentColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t (*EnvironmentValues.accentColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  a1[2] = (uint64_t)v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)(a1 + 1));
  }
  swift_release_n();
  *a1 = v4;
  return EnvironmentValues.accentColor.modify;
}

uint64_t EnvironmentValues.accentColor.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = swift_retain();
    specialized EnvironmentValues.accentColor.setter(v3);
    swift_release();
  }
  else
  {
    specialized EnvironmentValues.accentColor.setter(v2);
  }
  return swift_release();
}

uint64_t EnvironmentValues.defaultAccentColorProvider.getter()
{
  return EnvironmentValues.defaultAccentColorProvider.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultAccentColorProvider.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultAccentColorProvider.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.defaultAccentColorProvider.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.defaultAccentColorProvider.modify;
}

void EnvironmentValues.defaultAccentColorProvider.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.defaultAccentColorProvider.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.systemAccentColor.getter()
{
  if (one-time initialization token for blue != -1)
    swift_once();
  return swift_retain();
}

_QWORD *EnvironmentValues.systemAccentValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, (char *)&v17);
    swift_release_n();
    result = (_QWORD *)swift_release_n();
    LOBYTE(v8) = v17;
    if (v17 == 10)
    {
      swift_retain_n();
      swift_retain_n();
      v8 = specialized PropertyList.Tracker.value<A>(_:for:)(v6);
      v10 = v9;
      swift_release_n();
      result = (_QWORD *)swift_release_n();
      if (v8)
      {
LABEL_4:
        result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v16, v8, v10);
        LOBYTE(v8) = v16[0];
        goto LABEL_11;
      }
LABEL_10:
      LOBYTE(v8) = 8;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SystemAccentValueKey>(0, a1, a2, a3);
    BloomFilter.init(hashValue:)(v11);
    v12 = swift_retain_n();
    v13 = specialized find1<A>(_:key:filter:)(v12, v17);
    if (v13)
      LODWORD(v8) = *(unsigned __int8 *)(v13 + 72);
    else
      LODWORD(v8) = 10;
    result = (_QWORD *)swift_release_n();
    if ((_DWORD)v8 == 10)
    {
      v14 = swift_retain_n();
      v8 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v16 + 1);
      v10 = v15;
      result = (_QWORD *)swift_release_n();
      if (v8)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
LABEL_11:
  *a4 = v8;
  return result;
}

uint64_t EnvironmentValues.systemAccentValue.setter(char *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.systemAccentValueProvider.getter()
{
  return EnvironmentValues.defaultAccentColorProvider.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultAccentColorProvider.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = a1(v3);
    swift_release_n();
    swift_release_n();
    return v5;
  }
  else
  {
    v8 = swift_retain_n();
    v9 = a2(v8, &v10);
    swift_release_n();
    return v9;
  }
}

uint64_t (*EnvironmentValues.systemAccentValue.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v4;
  EnvironmentValues.systemAccentValue.getter(a2, a3, a4, (_BYTE *)(a1 + 24));
  return EnvironmentValues.systemAccentValue.modify;
}

uint64_t EnvironmentValues.systemAccentValue.modify(uint64_t a1)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.defaultAccentColorProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    v9 = v8;
    swift_release_n();
  }
  else
  {
    v11 = swift_retain_n();
    v7 = a3(v11, &v14);
    v9 = v12;
  }
  result = swift_release_n();
  *a4 = v7;
  a4[1] = v9;
  return result;
}

uint64_t EnvironmentValues.systemAccentValueProvider.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultAccentColorProvider.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultAccentColorProvider.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t, uint64_t *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v9 = *v4;
  swift_retain_n();
  a3(v4, a1, a2, &v12);
  swift_release();
  if (v4[1])
  {
    v10 = *v4;
    swift_retain();
    swift_retain();
    a4(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.systemAccentValueProvider.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.systemAccentValueProvider.modify;
}

void EnvironmentValues.systemAccentValueProvider.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.defaultAccentColorProvider.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.defaultAccentColorProvider.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, _QWORD **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;

  v7 = *a1;
  v8 = (uint64_t *)(*a1)[5];
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = *v8;
  swift_retain_n();
  if ((a2 & 1) != 0)
    v12 = (_QWORD **)(v7 + 3);
  else
    v12 = (_QWORD **)(v7 + 4);
  a3(v8, v10, v9, v12);
  swift_release();
  if (v8[1])
  {
    v13 = *(_QWORD *)v7[5];
    swift_retain();
    swift_retain();
    a4(v11, v13);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v7);
}

SwiftUI::SystemAccentValue_optional __swiftcall SystemAccentValue.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;

  if ((unint64_t)(rawValue + 3) > 9)
    *v1 = 10;
  else
    *v1 = byte_235288B92[rawValue + 3];
  return (SwiftUI::SystemAccentValue_optional)rawValue;
}

uint64_t SystemAccentValue.rawValue.getter()
{
  char *v0;

  return qword_235288BA0[*v0];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemAccentValue()
{
  char *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_235288BA0[*v0]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemAccentValue()
{
  char *v0;

  Hasher._combine(_:)(qword_235288BA0[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemAccentValue()
{
  char *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_235288BA0[*v0]);
  return Hasher._finalize()();
}

SwiftUI::SystemAccentValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SystemAccentValue(Swift::Int *a1)
{
  return SystemAccentValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SystemAccentValue(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235288BA0[*v1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SystemAccentValue(char *a1, char *a2)
{
  return qword_235288BA0[*a1] == qword_235288BA0[*a2];
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance SystemAccentValueKey(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_234B78948@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.accentColor : EnvironmentValues, serialized(a1, a2);
}

float specialized Color.AccentColorProvider.resolve(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float (*v9)(uint64_t *);
  float v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15[16];

  v2 = *a1;
  v1 = a1[1];
  if (!v1)
  {
    v7 = swift_retain_n();
    v3 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v15);
    swift_release_n();
    if (!v3)
      goto LABEL_5;
LABEL_6:
    v13 = v2;
    v14 = v1;
    EnvironmentValues.effectiveTintAdjustmentMode.getter(v4, v5, v6, &v12);
    v8 = (_QWORD *)v3;
    if (v12 == 1)
    {
      type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.DesaturatedColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor, (uint64_t)&type metadata for Color.DesaturatedColor);
      v8 = (_QWORD *)swift_allocObject();
      v8[2] = v3;
    }
    v13 = v2;
    v14 = v1;
    v9 = *(float (**)(uint64_t *))(*v8 + 104);
    swift_retain();
    v10 = v9(&v13);
    swift_release();
    swift_release();
    return v10;
  }
  swift_retain_n();
  swift_retain_n();
  v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v2);
  swift_release_n();
  swift_release_n();
  if (v3)
    goto LABEL_6;
LABEL_5:
  v13 = v2;
  v14 = v1;
  v3 = EnvironmentValues.defaultAccentColor.getter();
  if (v3)
    goto LABEL_6;
  if (one-time initialization token for blue != -1)
    swift_once();
  v13 = v2;
  v14 = v1;
  return (*(float (**)(uint64_t *))(*(_QWORD *)static Color.blue + 104))(&v13);
}

uint64_t specialized EnvironmentValues.accentColor.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider, (uint64_t)&type metadata for Color.AccentColorProvider);
  v4 = swift_allocObject();
  if (!a1)
  {
    swift_release();
    goto LABEL_6;
  }
  if (v4 != a1)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(v4);
    swift_release();
    if ((v5 & 1) != 0)
      goto LABEL_8;
LABEL_6:
    swift_retain();
    goto LABEL_9;
  }
  swift_release();
LABEL_8:
  a1 = 0;
LABEL_9:
  v6 = *v2;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1);
  swift_release();
  swift_release();
  if (v2[1])
  {
    v7 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<SystemAccentValueKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>);
  }
}

unint64_t lazy protocol witness table accessor for type SystemAccentValue and conformance SystemAccentValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemAccentValue and conformance SystemAccentValue;
  if (!lazy protocol witness table cache variable for type SystemAccentValue and conformance SystemAccentValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemAccentValue, &type metadata for SystemAccentValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemAccentValue and conformance SystemAccentValue);
  }
  return result;
}

uint64_t sub_234B78D0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.accentColor : EnvironmentValues, serialized(a1, a2);
}

uint64_t keypath_setTm()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.accentColor.setter(v0);
  return swift_release();
}

uint64_t sub_234B78D58@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultAccentColorProvider : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234B78D7C(uint64_t *a1)
{
  return EnvironmentValues.defaultAccentColorProvider.setter(*a1, a1[1]);
}

_QWORD *sub_234B78DA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  _QWORD *result;
  char v6;

  result = EnvironmentValues.systemAccentValue.getter(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_234B78DE4(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.systemAccentValue.setter(&v2);
}

uint64_t sub_234B78E18@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultAccentColorProvider : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234B78E3C(uint64_t *a1)
{
  return EnvironmentValues.systemAccentValueProvider.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static DefaultAccentColorProvider.accentColor(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t getEnumTagSinglePayload for SystemAccentValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemAccentValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_234B78F48 + 4 * byte_2352888E5[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_234B78F7C + 4 * byte_2352888E0[v4]))();
}

uint64_t sub_234B78F7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B78F84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B78F8CLL);
  return result;
}

uint64_t sub_234B78F98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B78FA0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_234B78FA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B78FAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SystemAccentValue()
{
  return &type metadata for SystemAccentValue;
}

uint64_t dispatch thunk of static SystemAccentValueProvider.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_234B78FD0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

ValueMetadata *type metadata accessor for SystemAccentValueKey()
{
  return &type metadata for SystemAccentValueKey;
}

ValueMetadata *type metadata accessor for Color.AccentColorProvider()
{
  return &type metadata for Color.AccentColorProvider;
}

unint64_t instantiation function for generic protocol witness table for Color.AccentColorProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for ColorBox<Color.AccentColorProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ColorBox(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor;
  if (!lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DesaturatedColor, &type metadata for Color.DesaturatedColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor;
  if (!lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DesaturatedColor, &type metadata for Color.DesaturatedColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor;
  if (!lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DesaturatedColor, &type metadata for Color.DesaturatedColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccentColorKey()
{
  return &type metadata for AccentColorKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DefaultAccentColorProviderKey()
{
  return &type metadata for EnvironmentValues.DefaultAccentColorProviderKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SystemAccentValueProviderKey()
{
  return &type metadata for EnvironmentValues.SystemAccentValueProviderKey;
}

uint64_t ConditionalMetadata.init(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (_QWORD *)result;
    if (v5)
    {
      v8 = v5;
      do
      {
        result = AGMakeUniqueID();
        v9 = result;
        v11 = v7[2];
        v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
          v7 = (_QWORD *)result;
        }
        v7[2] = v11 + 1;
        v7[v11 + 4] = v9;
        --v8;
      }
      while (v8);
    }
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v7;
  }
  return result;
}

unint64_t ConditionalMetadata.childInfo<A>(ptr:emptyType:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;

  v9 = *(_QWORD *)v5;
  v10 = *(_QWORD *)(v5 + 24);
  v23 = 0;
  v24 = 0;
  v22 = *(_OWORD *)(v5 + 8);
  v11 = *(_QWORD *)(a4 + 24);
  v16 = *(_QWORD *)(a4 + 16);
  v17 = a5;
  v18 = v11;
  v19 = &v24;
  v20 = &v23;
  v21 = v9;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v9);
  v13 = type metadata accessor for ConditionalTypeDescriptor(0, v16, v11, v12);
  ConditionalTypeDescriptor.project(at:baseIndex:_:)(a2, 0, (uint64_t (*)(uint64_t, _QWORD **, uint64_t))partial apply for closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:), (uint64_t)&v15, v13);
  result = outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v21);
  if ((v24 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v24 >= *(_QWORD *)(v10 + 16))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (v23)
    result = v23;
  else
    result = a3;
  *(_QWORD *)a1 = *(_QWORD *)(v10 + 8 * v24 + 32);
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:)(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  uint64_t result;

  v9 = *a2;
  *a4 = a1;
  if ((_QWORD)v9)
  {
    type metadata accessor for TypeConformance(0, a6, *(_QWORD *)(a8 + 8), (uint64_t)a4);
    result = TypeConformance.type.getter();
  }
  else
  {
    result = 0;
  }
  *a5 = result;
  return result;
}

uint64_t specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t *, uint64_t), uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t EnumTag;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  if (a5 >> 62)
  {
    if (a5 >> 62 == 1)
    {
      v11 = *(_QWORD *)(a5 + 24);
      v12 = *(_QWORD *)(a5 + 32);
      v23 = *(_QWORD *)(a5 + 40);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(a5);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v11);
      if (AGTypeGetEnumTag() == 1)
      {
        v25 = 0;
        v26 = 0;
        a3(a2, &v25, 0);
        outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v11);
        return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(a5);
      }
      result = AGTypeProjectEnumData();
      if (!__OFADD__(a2, 1))
      {
        specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, a2 + 1, a3, a4, v11, v12, v23);
        AGTypeInjectEnumTag();
        outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v11);
        return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(a5);
      }
      __break(1u);
      goto LABEL_16;
    }
    v14 = *(_QWORD *)(a5 + 24);
    v15 = *(_QWORD *)(a5 + 32);
    v24 = *(_QWORD *)(a5 + 40);
    v17 = *(_QWORD *)(a5 + 48);
    v16 = *(_QWORD *)(a5 + 56);
    v21 = *(_QWORD *)(a5 + 64);
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(a5);
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v14);
    v22 = v17;
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v17);
    EnumTag = AGTypeGetEnumTag();
    result = AGTypeProjectEnumData();
    if (EnumTag == 1)
    {
      specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, a2, a3, a4, v14, v15, v24);
      v19 = v22;
    }
    else
    {
      if (__OFADD__(a2, v24))
      {
LABEL_16:
        __break(1u);
        return result;
      }
      v20 = a4;
      v19 = v22;
      specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, a2 + v24, a3, v20, v22, v16, v21);
    }
    AGTypeInjectEnumTag();
    outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v19);
    outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
    return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(a5);
  }
  else
  {
    v25 = a5;
    v26 = a6;
    return a3(a2, &v25, a1);
  }
}

uint64_t ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD **, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t EnumTag;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v10 = *(_QWORD **)v5;
  v9 = *(_QWORD *)(v5 + 8);
  v11 = *(_QWORD *)v5 >> 62;
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 1)
    {
      v14 = v10[3];
      v15 = v10[4];
      v26 = v10[5];
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>((unint64_t)v10);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v14);
      if (AGTypeGetEnumTag() == 1)
      {
        v29 = 0;
        v30 = 0;
        a3(a2, &v29, 0);
        outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
        return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>((unint64_t)v10);
      }
      AGTypeProjectEnumData();
      closure #1 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, v14, v15, v26, a2, (uint64_t)a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
      AGTypeInjectEnumTag();
      v22 = v14;
    }
    else
    {
      v17 = v10[3];
      v18 = v10[4];
      v27 = v10[5];
      v20 = v10[6];
      v19 = v10[7];
      v24 = v10[8];
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>((unint64_t)v10);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v17);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v20);
      v23 = (uint64_t)a3;
      EnumTag = AGTypeGetEnumTag();
      AGTypeProjectEnumData();
      closure #2 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, EnumTag, v17, v18, v27, a2, v23, a4, v20, v19, v24, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
      AGTypeInjectEnumTag();
      outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v20);
      v22 = v17;
    }
    outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v22);
    return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>((unint64_t)v10);
  }
  else
  {
    v29 = *(_QWORD **)v5;
    v30 = v9;
    return a3(a2, &v29, a1);
  }
}

void ConditionalMetadata<>.MakeView.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[6];
  __int128 v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = v4;
  v11[5] = a4;
  v21 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1);
  v8 = (_QWORD *)v4[4];
  if ((*((_BYTE *)v4 + 85) & 1) != 0)
    v7 = specialized _GraphInputs.pushScope<A>(id:)(v8);
  v9 = *v4;
  LODWORD(v17) = *((_DWORD *)v5 + 6);
  v18 = v9;
  v12 = *(_OWORD *)(v5 + 1);
  v19 = v12;
  v20 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v11[-4] = a3;
  v13 = &type metadata for ViewDescriptor;
  v14 = v10;
  v15 = a3;
  v16 = &protocol witness table for ViewDescriptor;
  type metadata accessor for UnwrapConditional();
}

void protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance ConditionalMetadata<A><>.MakeView<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ConditionalMetadata<>.MakeView.visit<A>(type:)(a1, a4, a2, a3);
}

unint64_t *ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t *v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v23[4];
  __int128 v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  v9 = *((_DWORD *)a3 + 2);
  v10 = a3[2];
  v11 = a3[5];
  v12 = a3[6];
  v13 = *((_DWORD *)a3 + 20);
  v14 = *v5;
  v15 = v5[1];
  v16 = v5[2];
  *(_QWORD *)&v38 = v14;
  *((_QWORD *)&v38 + 1) = v15;
  v39 = v16;
  v40 = a2;
  v41 = 0uLL;
  v42 = v8;
  v43 = v9;
  v45 = *(_OWORD *)(a3 + 3);
  v44 = v10;
  *(_QWORD *)&v46 = v11;
  *((_QWORD *)&v46 + 1) = v12;
  v47 = *(_OWORD *)(a3 + 7);
  v48 = a3[9];
  v49 = v13;
  v50 = 0;
  v51 = 0;
  v23[2] = a4;
  v23[3] = &v38;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, 0, partial apply for closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:), (uint64_t)v23, v14, v15);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  v17 = v50;
  v18 = v51;
  if (v50)
  {
    v19 = HIDWORD(v51);
    v20 = v50;
    v21 = v51;
  }
  else
  {
    v21 = 0;
    LODWORD(v19) = *MEMORY[0x24BE096C0];
    v20 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)a5 = v20;
  *(_DWORD *)(a5 + 8) = v21;
  *(_DWORD *)(a5 + 12) = v19;
  v24 = v38;
  v25 = v39;
  v26 = v40;
  v27 = v41;
  v28 = v42;
  v29 = v43;
  v30 = v44;
  v31 = v45;
  v32 = v46;
  v33 = v47;
  v34 = v48;
  v35 = v49;
  v36 = v17;
  v37 = v18;
  swift_bridgeObjectRetain();
  return outlined release of ConditionalMetadata<ViewDescriptor><>.MakeView<A1>((unint64_t *)&v24);
}

uint64_t closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  uint64_t View;

  if (*a2)
    v5 = a3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    *(_QWORD *)(a4 + 32) = result;
    *(_QWORD *)(a4 + 40) = a3;
    View = type metadata accessor for ConditionalMetadata<>.MakeView(0, a5, a3, a4);
    return TypeConformance<>.visitType<A>(visitor:)(a4, View, (uint64_t)&protocol witness table for ConditionalMetadata<A><>.MakeView<A1>);
  }
  return result;
}

void ConditionalMetadata<>.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int128 v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint64_t v21;

  v5 = v4;
  v11[3] = a4;
  v21 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1);
  v8 = (_QWORD *)v4[4];
  if ((*((_BYTE *)v4 + 85) & 1) != 0)
    v7 = specialized _GraphInputs.pushScope<A>(id:)(v8);
  v9 = *v4;
  v13 = *((_DWORD *)v5 + 6);
  v14 = v9;
  v12 = *(_OWORD *)(v5 + 1);
  v15 = v12;
  v16 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v11[-4] = a3;
  v17 = &type metadata for ViewDescriptor;
  v18 = v10;
  v19 = a3;
  v20 = &protocol witness table for ViewDescriptor;
  type metadata accessor for UnwrapConditional();
}

void protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance ConditionalMetadata<A><>.MakeList<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ConditionalMetadata<>.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t List;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v38[16];
  uint64_t v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _BYTE v50[24];
  ValueMetadata *v51;
  _UNKNOWN **v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  char v56;
  unint64_t v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char v74;
  _QWORD v75[11];

  v75[9] = *MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v8 = *((_DWORD *)a3 + 2);
  v9 = a3[2];
  v11 = *((_DWORD *)a3 + 6);
  v10 = *((_DWORD *)a3 + 7);
  v13 = *((_DWORD *)a3 + 8);
  v12 = *((_DWORD *)a3 + 9);
  v15 = a3[5];
  v14 = a3[6];
  v16 = a3[7];
  v17 = *((_DWORD *)a3 + 16);
  v18 = a3[9];
  v19 = *((_BYTE *)a3 + 80);
  v20 = *(_QWORD *)v5;
  v41 = 0u;
  v42 = 0u;
  v43 = 0;
  v44 = 255;
  v45 = 0;
  v46 = 0;
  LOBYTE(v47) = 0;
  v57 = v20;
  v58 = *(_OWORD *)(v5 + 8);
  v59 = a2;
  v60 = 0;
  v61 = 0;
  v62 = v7;
  v29 = v8;
  v30 = __PAIR64__(v10, v11);
  v63 = v8;
  v64 = v9;
  v65 = v11;
  v31 = __PAIR64__(v12, v13);
  v66 = v10;
  v67 = v13;
  v68 = v12;
  v69 = v15;
  v70 = v14;
  v32 = v14;
  v33 = v16;
  v71 = v16;
  v34 = v17;
  v35 = v19;
  v72 = v17;
  v73 = v18;
  v74 = v19;
  outlined init with take of _ViewListOutputs?((uint64_t)&v41, (uint64_t)v75);
  v22 = v57;
  v21 = v58;
  v39 = a4;
  v40 = &v57;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v20);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v22);
  specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, 0, partial apply for closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:), (uint64_t)v38, v22, v21);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v22);
  outlined init with copy of _ViewListOutputs?((uint64_t)v75, (uint64_t)v53);
  if (BYTE8(v54) == 0xFF)
  {
    if ((v33 & 0x10) != 0)
    {
      *(_QWORD *)&v41 = v7;
      DWORD2(v41) = v29;
      *(_QWORD *)&v42 = v9;
      *((_QWORD *)&v42 + 1) = v30;
      v43 = v31;
      v44 = v15;
      v45 = v32;
      v46 = v33;
      v47 = v34;
      v48 = v18;
      v49 = v35;
      static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v41, a5);
    }
    else
    {
      v51 = &type metadata for EmptyViewListElements;
      v52 = &protocol witness table for EmptyViewListElements;
      *(_QWORD *)&v41 = v7;
      DWORD2(v41) = v29;
      *(_QWORD *)&v42 = v9;
      *((_QWORD *)&v42 + 1) = v30;
      v43 = v31;
      v44 = v15;
      v45 = v32;
      v46 = v33;
      v47 = v34;
      v48 = v18;
      v49 = v35;
      static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, (uint64_t *)&v41, 0, a5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    }
    outlined destroy of _ViewListOutputs?((uint64_t)v53);
  }
  else
  {
    v25 = v55;
    *(_OWORD *)(a5 + 32) = v54;
    *(_OWORD *)(a5 + 48) = v25;
    *(_BYTE *)(a5 + 64) = v56;
    v26 = v53[1];
    *(_OWORD *)a5 = v53[0];
    *(_OWORD *)(a5 + 16) = v26;
  }
  List = type metadata accessor for ConditionalMetadata<>.MakeList(0, a4, v23, v24);
  return (*(uint64_t (**)(unint64_t *, uint64_t))(*(_QWORD *)(List - 8) + 8))(&v57, List);
}

uint64_t closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  uint64_t List;

  if (*a2)
    v5 = a3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    *(_QWORD *)(a4 + 32) = result;
    *(_QWORD *)(a4 + 40) = a3;
    List = type metadata accessor for ConditionalMetadata<>.MakeList(0, a5, a3, a4);
    return TypeConformance<>.visitType<A>(visitor:)(a4, List, (uint64_t)&protocol witness table for ConditionalMetadata<A><>.MakeList<A1>);
  }
  return result;
}

_QWORD *static ConditionalTypeDescriptor.descriptor(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  _QWORD *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = (*(_QWORD *(**)(unint64_t *__return_ptr))(a3 + 16))(&v12);
  v9 = v12;
  if ((~v12 & 0xF000000000000007) != 0)
  {
    v10 = v13;
    v11 = v14;
  }
  else
  {
    ConditionalTypeDescriptor.init(_:)(a1, a2, a3, &v12);
    v9 = v12;
    v10 = v13;
    v11 = v14;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(a3 + 24))(a1, &v12, a2, a3);
  }
  *a4 = v9;
  a4[1] = v10;
  a4[2] = v11;
  return result;
}

uint64_t ConditionalTypeDescriptor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v8 = MEMORY[0x23B7C80F8]();
  v9 = v8;
  if (one-time initialization token for conditionalTypeDescriptor == -1)
  {
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    swift_once();
    if (!v9)
      goto LABEL_8;
  }
  if (v9 == conditionalTypeDescriptor)
  {
    v9 = *(_QWORD *)(a1 + 16);
    a1 = *(_QWORD *)(a1 + 24);
    static ConditionalTypeDescriptor.descriptor(type:)(&v23, a1, a2, a3);
    v10 = v23;
    v11 = v24;
    v12 = v25;
    static ConditionalTypeDescriptor.descriptor(type:)(&v23, v9, a2, a3);
    v13 = v23;
    v14 = v24;
    a3 = v25;
    a2 = type metadata accessor for _ConditionalContent.Storage(0, v9, a1, v15);
    swift_beginAccess();
    result = swift_beginAccess();
    if (!a2)
      goto LABEL_19;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = v10;
    *(_QWORD *)(result + 32) = v11;
    *(_QWORD *)(result + 40) = v12;
    *(_QWORD *)(result + 48) = v13;
    *(_QWORD *)(result + 56) = v14;
    *(_QWORD *)(result + 64) = a3;
    v17 = v12 + a3;
    if (!__OFADD__(v12, a3))
    {
      v18 = 0;
      v19 = result | 0x8000000000000000;
LABEL_17:
      *a4 = v19;
      a4[1] = v18;
      a4[2] = v17;
      return result;
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_8:
  if (one-time initialization token for optionalTypeDescriptor == -1)
  {
    if (!v9)
      goto LABEL_15;
    goto LABEL_10;
  }
LABEL_14:
  swift_once();
  if (v9)
  {
LABEL_10:
    if (v9 != optionalTypeDescriptor)
      goto LABEL_15;
    static ConditionalTypeDescriptor.descriptor(type:)(&v23, *(_QWORD *)(a1 + 16), a2, a3);
    v20 = v23;
    v21 = v24;
    v22 = v25;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = a1;
    *(_QWORD *)(result + 24) = v20;
    *(_QWORD *)(result + 32) = v21;
    *(_QWORD *)(result + 40) = v22;
    v17 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      v18 = 0;
      v19 = result | 0x4000000000000000;
      goto LABEL_17;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_15:
  result = static ProtocolDescriptor.conformance(of:)(a1, a2, *(_QWORD *)(a3 + 8), &v23);
  v19 = v23;
  if (v23)
  {
    v18 = v24;
    v17 = 1;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t closure #1 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v9 = a5 + 1;
  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = result;
    v13 = type metadata accessor for ConditionalTypeDescriptor(0, a8, a9, a4);
    return ConditionalTypeDescriptor.project(at:baseIndex:_:)(v12, v9, a6, a7, v13);
  }
  return result;
}

uint64_t closure #2 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a6;
  v16 = result;
  if (a2 != 1 && (v15 = a6 + a5, __OFADD__(a6, a5)))
  {
    __break(1u);
  }
  else
  {
    v17 = type metadata accessor for ConditionalTypeDescriptor(0, a12, a13, a4);
    return ConditionalTypeDescriptor.project(at:baseIndex:_:)(v16, v15, a7, a8, v17);
  }
  return result;
}

uint64_t one-time initialization function for optionalTypeDescriptor()
{
  uint64_t result;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for ()?);
  result = MEMORY[0x23B7C80F8]();
  if (result)
    optionalTypeDescriptor = result;
  else
    __break(1u);
  return result;
}

uint64_t one-time initialization function for conditionalTypeDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  type metadata accessor for _ConditionalContent<(), ()>(0, a2, a3, a4);
  result = MEMORY[0x23B7C80F8]();
  if (result)
    conditionalTypeDescriptor = result;
  else
    __break(1u);
  return result;
}

uint64_t static _ConditionalContent.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = type metadata accessor for _ConditionalContent(0, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 16))(&v15, v10, a3, a4);
  v11 = v15;
  if ((~v15 & 0xF000000000000007) != 0)
  {
    v12 = v16;
    v13 = v17;
  }
  else
  {
    closure #1 in static _ConditionalContent.makeConditionalMetadata<A>(_:)(a1, a2, a3, a4, (unint64_t *)&v15);
    v11 = v15;
    v12 = v16;
    v13 = v17;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 24))(v10, &v15, a3, a4);
  }
  v15 = v11;
  v16 = v12;
  v17 = v13;
  return ConditionalMetadata.init(_:)(&v15, a5);
}

uint64_t closure #1 in static _ConditionalContent.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  static ConditionalTypeDescriptor.descriptor(type:)(a2, a3, a4, &v19);
  v10 = v19;
  v11 = v20;
  v12 = v21;
  static ConditionalTypeDescriptor.descriptor(type:)(a1, a3, a4, &v19);
  v13 = v19;
  v14 = v20;
  v15 = v21;
  v16 = swift_allocObject();
  result = type metadata accessor for _ConditionalContent.Storage(0, a1, a2, v17);
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = v11;
  *(_QWORD *)(v16 + 40) = v12;
  *(_QWORD *)(v16 + 48) = v13;
  *(_QWORD *)(v16 + 56) = v14;
  *(_QWORD *)(v16 + 64) = v15;
  if (__OFADD__(v12, v15))
  {
    __break(1u);
  }
  else
  {
    *a5 = v16 | 0x8000000000000000;
    a5[1] = 0;
    a5[2] = v12 + v15;
  }
  return result;
}

uint64_t static Optional.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a3 + 16))(&v13, v8, a2, a3);
  v9 = v13;
  if ((~v13 & 0xF000000000000007) != 0)
  {
    v10 = v14;
    v11 = v15;
  }
  else
  {
    closure #1 in static Optional.makeConditionalMetadata<A>(_:)(a1, a2, a3, &v13);
    v9 = v13;
    v10 = v14;
    v11 = v15;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a3 + 24))(v8, &v13, a2, a3);
  }
  v13 = v9;
  v14 = v10;
  v15 = v11;
  return ConditionalMetadata.init(_:)(&v13, a4);
}

uint64_t closure #1 in static Optional.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10[3];

  static ConditionalTypeDescriptor.descriptor(type:)(a1, a2, a3, v10);
  v5 = v10[0];
  v6 = v10[1];
  v7 = v10[2];
  v8 = swift_allocObject();
  result = type metadata accessor for Optional();
  *(_QWORD *)(v8 + 16) = result;
  *(_QWORD *)(v8 + 24) = v5;
  *(_QWORD *)(v8 + 32) = v6;
  *(_QWORD *)(v8 + 40) = v7;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *a4 = v8 | 0x4000000000000000;
    a4[1] = 0;
    a4[2] = v7 + 1;
  }
  return result;
}

uint64_t dispatch thunk of static ConditionalProtocolDescriptor.fetchConditionalType(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static ConditionalProtocolDescriptor.insertConditionalType(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t destroy for ConditionalMetadata(unint64_t *a1)
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*a1);
  return swift_bridgeObjectRelease();
}

unint64_t outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(unint64_t result)
{
  if ((result >> 62) - 1 <= 1)
    return swift_release();
  return result;
}

unint64_t *initializeWithCopy for ConditionalMetadata(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t *assignWithCopy for ConditionalMetadata(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  v6 = *a1;
  *a1 = v4;
  a1[1] = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t *assignWithTake for ConditionalMetadata(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ConditionalMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalMetadata);
}

unint64_t *initializeBufferWithCopyOfBuffer for ConditionalTypeDescriptor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

unint64_t *assignWithCopy for ConditionalTypeDescriptor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  v6 = *a1;
  *a1 = v4;
  a1[1] = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  a1[2] = a2[2];
  return a1;
}

unint64_t *assignWithTake for ConditionalTypeDescriptor(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalTypeDescriptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConditionalTypeDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConditionalTypeDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalTypeDescriptor);
}

unint64_t *initializeBufferWithCopyOfBuffer for ConditionalTypeDescriptor.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

unint64_t destroy for ConditionalTypeDescriptor.Storage(unint64_t *a1)
{
  return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*a1);
}

unint64_t *assignWithCopy for ConditionalTypeDescriptor.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  v5 = *a1;
  *a1 = v3;
  a1[1] = v4;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v5);
  return a1;
}

unint64_t *assignWithTake for ConditionalTypeDescriptor.Storage(unint64_t *a1, _OWORD *a2)
{
  unint64_t v3;

  v3 = *a1;
  *(_OWORD *)a1 = *a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalTypeDescriptor.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConditionalTypeDescriptor.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ConditionalTypeDescriptor.Storage(_QWORD *a1)
{
  return *a1 >> 62;
}

_QWORD *destructiveProjectEnumData for ConditionalTypeDescriptor.Storage(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for ConditionalTypeDescriptor.Storage(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

uint64_t type metadata accessor for ConditionalTypeDescriptor.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalTypeDescriptor.Storage);
}

uint64_t partial apply for closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(a1, a2, a3, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 16));
}

uint64_t outlined init with copy of _ViewListOutputs?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t UnwrapConditional.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Value;
  uint64_t v8;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v3;
  v14 = *(_OWORD *)(a1 + 32);
  v15 = v1;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in UnwrapConditional.updateValue(), (uint64_t)v11, v3, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t closure #1 in UnwrapConditional.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  unint64_t v14;
  __int128 v15;

  v9 = *(_QWORD *)(a2 + 8);
  v13[6] = a2;
  v14 = v9;
  v15 = *(_OWORD *)(a2 + 16);
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v9);
  v11 = type metadata accessor for ConditionalTypeDescriptor(0, a3, a6, v10);
  ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, 0, (uint64_t (*)(uint64_t, _QWORD **, uint64_t))partial apply for closure #1 in closure #1 in UnwrapConditional.updateValue(), (uint64_t)v13, v11);
  return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
}

void closure #1 in closure #1 in UnwrapConditional.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a7 - 8);
  v15 = MEMORY[0x24BDAC7A8](a1);
  if (*(_QWORD *)(v16 + 32) == v17)
  {
    if (v13)
    {
      v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13, a7, v15);
      MEMORY[0x24BDAC7A8](v18);
      v19[1] = a5;
      v19[2] = a6;
      v19[3] = a7;
      v19[4] = a8;
      type metadata accessor for UnwrapConditional();
    }
    __break(1u);
  }
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance UnwrapConditional<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnwrapConditional<A, B, C>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnwrapConditional<A, B, C>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t outlined destroy of _ViewListOutputs?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ConditionalMetadata<>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalMetadata<>.MakeList);
}

uint64_t outlined init with take of _ViewListOutputs?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(a1, a2, a3, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 16));
}

unint64_t *outlined release of ConditionalMetadata<ViewDescriptor><>.MakeView<A1>(unint64_t *a1)
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ConditionalMetadata<>.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalMetadata<>.MakeView);
}

uint64_t partial apply for closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:)(a1, a2, a3, *(_QWORD **)(v3 + 40), *(uint64_t **)(v3 + 48), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)(v0 + 24));
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)(v0 + 48));
  return swift_deallocObject();
}

void type metadata accessor for _ConditionalContent<(), ()>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _ConditionalContent<(), ()>)
  {
    v4 = type metadata accessor for _ConditionalContent(0, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4AE0] + 8, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<(), ()>);
  }
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t destroy for ConditionalMetadata<>.MakeView(unint64_t *a1)
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConditionalMetadata<>.MakeView(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConditionalMetadata<>.MakeView(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)a2);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ConditionalMetadata<>.MakeView(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalMetadata<>.MakeView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalMetadata<>.MakeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for ConditionalMetadata<>.MakeList(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 176);
  if (v3 != 255)
  {
    if ((v3 & 1) != 0)
      return swift_release();
    else
      return __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  }
  return result;
}

uint64_t initializeWithCopy for ConditionalMetadata<>.MakeList(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v6 = *(unsigned __int8 *)(a2 + 176);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    v7 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v7;
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v8;
  }
  else
  {
    if ((v6 & 1) != 0)
    {
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_retain();
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 136, a2 + 136);
    }
    *(_BYTE *)(a1 + 176) = v6 & 1;
    v10 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v10;
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  }
  return a1;
}

uint64_t assignWithCopy for ConditionalMetadata<>.MakeList(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)a2);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v7 = (_OWORD *)(a1 + 136);
  v8 = (_OWORD *)(a2 + 136);
  v9 = *(unsigned __int8 *)(a2 + 176);
  if (*(_BYTE *)(a1 + 176) != 0xFF)
  {
    if (v9 == 255)
    {
      outlined destroy of _ViewListOutputs(a1 + 136);
      *v7 = *v8;
      v14 = *(_OWORD *)(a2 + 168);
      v13 = *(_OWORD *)(a2 + 184);
      v15 = *(_OWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_OWORD *)(a1 + 168) = v14;
      *(_OWORD *)(a1 + 184) = v13;
      *(_OWORD *)(a1 + 152) = v15;
      return a1;
    }
    if (a1 != a2)
    {
      outlined destroy of _ViewListOutputs.Views(a1 + 136);
      if ((*(_BYTE *)(a2 + 176) & 1) != 0)
      {
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_BYTE *)(a1 + 176) = 1;
        swift_retain();
      }
      else
      {
        v17 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 160) = v17;
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 136, a2 + 136);
        *(_BYTE *)(a1 + 176) = 0;
      }
    }
LABEL_14:
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v18 = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v18;
    return a1;
  }
  if (v9 != 255)
  {
    if ((v9 & 1) != 0)
    {
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_retain();
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v16;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 136, a2 + 136);
    }
    *(_BYTE *)(a1 + 176) = v9 & 1;
    goto LABEL_14;
  }
  *v7 = *v8;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 152) = v10;
  return a1;
}

uint64_t outlined destroy of _ViewListOutputs.Views(uint64_t a1)
{
  destroy for _ViewListOutputs.Views(a1);
  return a1;
}

__n128 __swift_memcpy201_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for ConditionalMetadata<>.MakeList(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_QWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v5 = (_OWORD *)(a1 + 136);
  v6 = (_OWORD *)(a2 + 136);
  if (*(_BYTE *)(a1 + 176) == 0xFF)
    goto LABEL_4;
  if (*(_BYTE *)(a2 + 176) == 0xFF)
  {
    outlined destroy of _ViewListOutputs(a1 + 136);
LABEL_4:
    v7 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v7;
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    v8 = *(_OWORD *)(a2 + 152);
    *v5 = *v6;
    *(_OWORD *)(a1 + 152) = v8;
    return a1;
  }
  if (a1 != a2)
  {
    outlined destroy of _ViewListOutputs.Views(a1 + 136);
    v9 = *(_OWORD *)(a2 + 152);
    *v5 = *v6;
    *(_OWORD *)(a1 + 152) = v9;
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  }
  v10 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v10;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalMetadata<>.MakeList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 201))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalMetadata<>.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 201) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 201) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for UnwrapConditional()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in Attribute.setValue(_:)@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in Attribute.setValue(_:)(a1);
}

uint64_t outlined assign with take of _ViewListOutputs?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata instantiation function for UnwrapConditional()
{
  return swift_allocateGenericValueMetadata();
}

unint64_t destroy for UnwrapConditional(uint64_t a1)
{
  return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for UnwrapConditional(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for UnwrapConditional(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for UnwrapConditional(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnwrapConditional(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(_QWORD *)(a1 + 8) >> 57) & 0x18 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnwrapConditional(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for UnwrapConditional<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnwrapConditional<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in UnwrapConditional<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

unint64_t partial apply for closure #1 in UnwrapConditional.updateValue()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in UnwrapConditional.updateValue()(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void partial apply for closure #1 in closure #1 in UnwrapConditional.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  closure #1 in closure #1 in UnwrapConditional.updateValue()(a1, a2, a3, v3[6], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t partial apply for closure #1 in StatefulRule.value.setter()
{
  return closure #1 in StatefulRule.value.setter();
}

uint64_t closure #1 in Attribute.setValue(_:)partial apply@<X0>(_BYTE *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.setValue(_:)(a1);
}

uint64_t Namespace.id.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Namespace.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::Namespace __swiftcall Namespace.init()()
{
  return 0;
}

uint64_t static Namespace._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(0, a3);
}

uint64_t specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;

  type metadata accessor for BoxVTable<Text.Measurements.Box>(0, &lazy cache variable for type metadata for BoxVTable<Namespace.Box>, (uint64_t)&unk_25064F308, (uint64_t)&protocol witness table for Namespace.Box);
  v6 = v5;
  result = UnsafeHeterogeneousBuffer.allocate(bytes:)(32);
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = 32;
  *(_QWORD *)(result + 16) = a1;
  v8 = *v2;
  if (!*v2)
    goto LABEL_14;
  if (result - v8 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - v8 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = *((_DWORD *)v2 + 3);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((_DWORD *)v2 + 3) = v11;
  v12 = *(_DWORD *)(result + 12) & 0x80000000;
  *(_DWORD *)(result + 12) = v12;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(result + 12) = v12 | a2;
    return result;
  }
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t result;

  type metadata accessor for BoxVTable<Text.Measurements.Box>(0, &lazy cache variable for type metadata for BoxVTable<FullEnvironmentBox>, (uint64_t)&type metadata for FullEnvironmentBox, (uint64_t)&protocol witness table for FullEnvironmentBox);
  v6 = v5;
  v7 = UnsafeHeterogeneousBuffer.allocate(bytes:)(64);
  *(_QWORD *)v7 = v6;
  *(_QWORD *)(v7 + 8) = 64;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 48) = v8;
  v10 = *v2;
  if (!*v2)
    goto LABEL_14;
  if (v7 - v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v7 - v10 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = *((_DWORD *)v2 + 3);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((_DWORD *)v2 + 3) = v13;
  v14 = *(_DWORD *)(v7 + 12) & 0x80000000;
  *(_DWORD *)(v7 + 12) = v14;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(v7 + 12) = v14 | a2;
    return outlined retain of FullEnvironmentBox(a1);
  }
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t result;

  type metadata accessor for BoxVTable<Text.Measurements.Box>(0, &lazy cache variable for type metadata for BoxVTable<Text.Measurements.Box>, (uint64_t)&type metadata for Text.Measurements.Box, (uint64_t)&protocol witness table for Text.Measurements.Box);
  v8 = v7;
  v9 = UnsafeHeterogeneousBuffer.allocate(bytes:)(32);
  *(_QWORD *)v9 = v8;
  *(_QWORD *)(v9 + 8) = 32;
  *(_DWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = *v3;
  if (!*v3)
    goto LABEL_14;
  if (v9 - v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v9 - v10 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = *((_DWORD *)v3 + 3);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((_DWORD *)v3 + 3) = v13;
  v14 = *(_DWORD *)(v9 + 12) & 0x80000000;
  *(_DWORD *)(v9 + 12) = v14;
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(v9 + 12) = v14 | a3;
    return swift_retain();
  }
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Namespace.wrappedValue.getter(uint64_t result)
{
  if (!result)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    os_log(_:dso:log:_:_:)();
    return AGMakeUniqueID();
  }
  return result;
}

void protocol witness for DynamicPropertyBox.reset() in conformance Namespace.Box()
{
  _QWORD *v0;

  *v0 = 0;
}

BOOL protocol witness for DynamicPropertyBox.update(property:phase:) in conformance Namespace.Box(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = *v1;
  if (!*v1)
  {
    v4 = AGMakeUniqueID();
    *v1 = v4;
  }
  *a1 = v4;
  return v3 == 0;
}

void Namespace.ID.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static Namespace.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int Namespace.ID.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance Namespace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(0, a3);
}

unint64_t lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID;
  if (!lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Namespace.ID, &type metadata for Namespace.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID;
  if (!lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Namespace.ID, &type metadata for Namespace.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID);
  }
  return result;
}

ValueMetadata *type metadata accessor for Namespace()
{
  return &type metadata for Namespace;
}

ValueMetadata *type metadata accessor for Namespace.ID()
{
  return &type metadata for Namespace.ID;
}

uint64_t outlined retain of FullEnvironmentBox(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_retain();
  outlined copy of EnvironmentValues?(v2);
  swift_retain();
  return a1;
}

uint64_t outlined copy of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for BoxVTable<Text.Measurements.Box>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for BoxVTable(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void *type metadata accessor for Namespace.Box()
{
  return &unk_25064F308;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in Namespace.Box()
{
  return &protocol witness table for Namespace;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t CAHostingLayer.viewGraph.getter()
{
  specialized CAHostingLayer.viewGraph.getter();
  return swift_retain();
}

uint64_t CAHostingLayer.eventBindingManager.getter()
{
  specialized CAHostingLayer.eventBindingManager.getter();
  return swift_retain();
}

uint64_t CAHostingLayer.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  _QWORD *v1;
  _WORD *v3;
  uint64_t result;

  v3 = (_WORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x78));
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t CAHostingLayer.propertiesNeedingUpdate.setter(__int16 *a1)
{
  _QWORD *v1;
  __int16 v2;
  _WORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_WORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x78));
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*CAHostingLayer.propertiesNeedingUpdate.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t CAHostingLayer.renderingPhase.getter@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x80);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t CAHostingLayer.renderingPhase.setter(char *a1)
{
  _QWORD *v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x80);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*CAHostingLayer.renderingPhase.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t CAHostingLayer.isHiddenForReuse.getter()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x90);
  swift_beginAccess();
  return *v1;
}

uint64_t CAHostingLayer.isHiddenForReuse.setter(char a1)
{
  _QWORD *v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x90);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*CAHostingLayer.isHiddenForReuse.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

double CAHostingLayer.currentTimestamp.getter@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  double *v3;
  double result;

  v3 = (double *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x98));
  swift_beginAccess();
  result = *v3;
  *a1 = *(_QWORD *)v3;
  return result;
}

uint64_t CAHostingLayer.currentTimestamp.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x98));
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*CAHostingLayer.currentTimestamp.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t CAHostingLayer.externalUpdateCount.getter()
{
  _QWORD *v0;
  char *v1;

  v1 = (char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0);
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t CAHostingLayer.externalUpdateCount.setter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xA0));
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*CAHostingLayer.externalUpdateCount.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t CAHostingLayer.environmentOverride.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xA8));
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return outlined copy of EnvironmentValues?(v4);
}

uint64_t CAHostingLayer.environmentOverride.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xA8));
  swift_beginAccess();
  v5 = *v4;
  *v4 = v2;
  v4[1] = v3;
  outlined consume of EnvironmentValues?(v5);
  return CAHostingLayer.environmentOverride.didset(2u, 1, v6, v7);
}

uint64_t (*CAHostingLayer.environmentOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAHostingLayer.environmentOverride.modify;
}

uint64_t CAHostingLayer.environmentOverride.modify(uint64_t a1, char a2)
{
  return CAHostingLayer.environmentOverride.modify(a1, a2, 2u);
}

__n128 CAHostingLayer.safeAreaInsetsOverride.getter@<Q0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xB0);
  v3 = v2[32];
  result = *(__n128 *)v2;
  v5 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v3;
  return result;
}

uint64_t CAHostingLayer.safeAreaInsetsOverride.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  outlined init with take of EdgeInsets?(a1, (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xB0));
  return CAHostingLayer.environmentOverride.didset(0x20u, 0, v2, v3);
}

uint64_t CAHostingLayer.accessibilityEnabled.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x60));
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 360);
}

uint64_t CAHostingLayer.accessibilityEnabled.setter(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x60));
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 360) = a1;
  return result;
}

void (*CAHostingLayer.accessibilityEnabled.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x60));
  swift_beginAccess();
  *((_BYTE *)v3 + 80) = *(_BYTE *)(v4 + 360);
  return CAHostingLayer.accessibilityEnabled.modify;
}

void CAHostingLayer.accessibilityEnabled.modify(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72)
                 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)a1 + 72)) + 0x60));
  swift_beginAccess();
  *(_BYTE *)(v3 + 360) = v2;
  free(v1);
}

uint64_t CAHostingLayer.canAdvanceTimeAutomatically.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0));
}

uint64_t CAHostingLayer.canAdvanceTimeAutomatically.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xC0)) = result;
  return result;
}

uint64_t CAHostingLayer.allowFrameChanges.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8));
}

uint64_t CAHostingLayer.allowFrameChanges.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xC8)) = result;
  return result;
}

void CAHostingLayer.nextTimerTime.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xD0);
  v3 = *(_QWORD *)v2;
  LOBYTE(v2) = v2[8];
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = (_BYTE)v2;
}

uint64_t CAHostingLayer.nextTimerTime.setter(uint64_t result)
{
  _QWORD *v1;
  char v2;
  char *v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xD0);
  *(_QWORD *)v3 = *(_QWORD *)result;
  v3[8] = v2;
  return result;
}

void CAHostingLayer.updateTimer.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xD8);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

uint64_t CAHostingLayer.isUpdating.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0));
}

uint64_t CAHostingLayer.isUpdating.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xE0)) = result;
  return result;
}

uint64_t CAHostingLayer.needsDeferredUpdate.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8));
}

uint64_t CAHostingLayer.needsDeferredUpdate.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0xE8)) = result;
  return result;
}

uint64_t CAHostingLayer.focusedResponder.getter()
{
  specialized CAHostingLayer.focusedResponder.getter();
  return swift_retain();
}

id CAHostingLayer.__allocating_init(rootView:environment:)(uint64_t a1, uint64_t *a2)
{
  objc_class *v2;
  objc_class *v3;
  id v6;
  uint64_t v7;
  id v8;

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  v8 = specialized CAHostingLayer.init(rootView:environment:)(a1, a2, (uint64_t)v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)v3 + 10) - 8) + 8))(a1);
  return v8;
}

id CAHostingLayer.init(rootView:environment:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  id v7;

  v6 = *MEMORY[0x24BEE4EA0] & *v4;
  v7 = specialized CAHostingLayer.init(rootView:environment:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 8))(a1);
  return v7;
}

uint64_t CAHostingLayer.init(layer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  objc_super v60;
  _QWORD v61[2];
  _QWORD v62[2];
  __int128 v63;
  char v64[40];

  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v7 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *v4);
  v8 = v7[10];
  v9 = type metadata accessor for ModifiedContent(0, v8, (uint64_t)&type metadata for HitTestBindingModifier, a4);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v57 = (char *)&v49 - v10;
  v54 = type metadata accessor for ContinuousClock.Instant();
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v52 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v55 = (char *)&v49 - v13;
  v14 = v7[13];
  v15 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_BYTE *)(v16 + 80) = 1;
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)((char *)v4 + v14) = v16;
  v17 = *(_QWORD *)((*v6 & *v4) + 0x70);
  type metadata accessor for EventBindingManager();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v18 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v18 + 48) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v18 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 72) = 0;
  *(_QWORD *)((char *)v4 + v17) = v18;
  v19 = *(_QWORD *)((*v6 & *v4) + 0x78);
  v20 = one-time initialization token for all;
  v21 = v4;
  if (v20 != -1)
    swift_once();
  *(_WORD *)((char *)v4 + v19) = static ViewRendererHostProperties.all;
  *((_BYTE *)v21 + *(_QWORD *)((*v6 & *v21) + 0x80)) = 0;
  *((_BYTE *)v21 + *(_QWORD *)((*v6 & *v21) + 0x88)) = 0;
  *((_BYTE *)v21 + *(_QWORD *)((*v6 & *v21) + 0x90)) = 0;
  *(_QWORD *)((char *)v21 + *(_QWORD *)((*v6 & *v21) + 0x98)) = 0;
  *(_QWORD *)((char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xA0)) = 0;
  *(_OWORD *)((char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xA8)) = xmmword_235260EF0;
  v22 = (char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xB0);
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  v22[32] = 1;
  *(_QWORD *)((char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xB8)) = 0;
  *((_BYTE *)v21 + *(_QWORD *)((*v6 & *v21) + 0xC0)) = 1;
  *((_BYTE *)v21 + *(_QWORD *)((*v6 & *v21) + 0xC8)) = 1;
  v23 = (char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xD0);
  *(_QWORD *)v23 = 0;
  v23[8] = 1;
  *(_QWORD *)((char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xD8)) = 0;
  *((_BYTE *)v21 + *(_QWORD *)((*v6 & *v21) + 0xE0)) = 0;
  *((_BYTE *)v21 + *(_QWORD *)((*v6 & *v21) + 0xE8)) = 0;
  *(_QWORD *)((char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xF0)) = 0;
  v24 = (char *)v21 + *(_QWORD *)((*v6 & *v21) + 0x110);
  v25 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  outlined init with copy of Any(a1, (uint64_t)v64);
  v50 = v7[11];
  v27 = type metadata accessor for CAHostingLayer(0, v8, v50, v26);
  v51 = a1;
  v28 = (objc_class *)v27;
  if (swift_dynamicCast())
  {
    v29 = v8;
    v30 = (void *)v63;
    v31 = *v6 & *(_QWORD *)v63;
    v32 = v63 + *(_QWORD *)(v31 + 0xF8);
    swift_beginAccess();
    v33 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v31 + 80) - 8) + 16))(v55, v32);
    v34 = (char *)v21 + *(_QWORD *)((*v6 & *v21) + 0xF8);
    v35 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v34, v33, v29);
    CAHostingLayer.environment.getter(&v63);
    v36 = (char *)v21 + *(_QWORD *)((*v6 & *v21) + 0x100);
    *(_OWORD *)v36 = v63;
    v37 = v52;
    static ContinuousClock.Instant.now.getter();
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))((char *)v21 + *(_QWORD *)((*v6 & *v21) + 0x108), v37, v54);
    specialized static Update.begin()();
    v54 = type metadata accessor for ViewGraph();
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v33, v34, v29);
    v38 = (uint64_t)v57;
    v39 = v50;
    static ViewRendererHost.makeRootView<A>(_:)(v33, (uint64_t)v28, v29, (uint64_t)&protocol witness table for CAHostingLayer<A>, v50);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v29);
    swift_beginAccess();
    v40 = *((_QWORD *)v36 + 1);
    v62[0] = *(_QWORD *)v36;
    v62[1] = v40;
    v61[0] = v39;
    v61[1] = &protocol witness table for HitTestBindingModifier;
    swift_retain();
    swift_retain();
    v41 = v59;
    v42 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v59, v61);
    v43 = specialized ViewGraph.__allocating_init<A>(rootView:environment:)(v38, (uint64_t)v62, v41, v42);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v38, v41);
    *(_QWORD *)((char *)v21 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v21) + 0x60)) = v43;

    v60.receiver = v21;
    v60.super_class = v28;
    v44 = objc_msgSendSuper2(&v60, sel_initWithLayer_, v30);
    CAHostingLayer.postInit()((uint64_t)v44, v45, v46, v47);
    static Update.end()();

    __swift_destroy_boxed_opaque_existential_1(v51);
    return (uint64_t)v44;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t @objc CAHostingLayer.init(layer:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return CAHostingLayer.init(layer:)((uint64_t)&v4, v0, v1, v2);
}

uint64_t CAHostingLayer.postInit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58), a4);
  ViewRendererHost.initializeViewGraph()();
  v6 = *(_QWORD *)((char *)v4 + *(_QWORD *)((*v5 & *v4) + 0x68));
  swift_beginAccess();
  *(_QWORD *)(v6 + 48) = &protocol witness table for CAHostingLayer<A>;
  swift_unknownObjectWeakAssign();
  *(_BYTE *)(v6 + 80) = 1;
  v7 = *(_QWORD *)((char *)v4 + *(_QWORD *)((*v5 & *v4) + 0x70));
  swift_beginAccess();
  *(_QWORD *)(v7 + 24) = &protocol witness table for CAHostingLayer<A>;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  *(_QWORD *)(v7 + 40) = &protocol witness table for CAHostingLayer<A>;
  return swift_unknownObjectWeakAssign();
}

void @objc CAHostingLayer.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized CAHostingLayer.init(coder:)();
}

double @objc CAHostingLayer.bounds.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  v1 = a1;
  CAHostingLayer.bounds.getter((uint64_t)v1, v2, v3, v4);
  v6 = v5;

  return v6;
}

id CAHostingLayer.bounds.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_bounds);
}

void @objc CAHostingLayer.bounds.setter(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v12 = a1;
  CAHostingLayer.bounds.setter(a2, a3, a4, a5, (uint64_t)v12, v9, v10, v11);

}

void CAHostingLayer.bounds.setter(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  objc_class *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned __int16 v19;
  objc_super v20;
  objc_super v21;

  if (*((_BYTE *)v8 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v8) + 0xC8)) == 1)
  {
    v13 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v8) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v8) + 0x58), a8);
    v21.receiver = v8;
    v21.super_class = v13;
    objc_msgSendSuper2(&v21, sel_bounds);
    v15 = v14;
    v17 = v16;
    v20.receiver = v8;
    v20.super_class = v13;
    objc_msgSendSuper2(&v20, sel_setBounds_, a1, a2, a3, a4);
    if (v15 != a3 || v17 != a4)
    {
      v19 = 16;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(&v19, 0, (uint64_t)v13, (uint64_t)&protocol witness table for CAHostingLayer<A>);
    }
  }
}

double @objc CAHostingLayer.position.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  v1 = a1;
  CAHostingLayer.position.getter((uint64_t)v1, v2, v3, v4);
  v6 = v5;

  return v6;
}

id CAHostingLayer.position.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_position);
}

void @objc CAHostingLayer.position.setter(void *a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a1;
  CAHostingLayer.position.setter(a2, a3, (uint64_t)v8, v5, v6, v7);

}

void CAHostingLayer.position.setter(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  objc_class *v9;
  objc_super v10;

  if (*((_BYTE *)v6 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v6) + 0xC8)) == 1)
  {
    v9 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v6) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v6) + 0x58), a6);
    v10.receiver = v6;
    v10.super_class = v9;
    objc_msgSendSuper2(&v10, sel_setPosition_, a1, a2);
  }
}

double @objc CAHostingLayer.contentsScale.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  v1 = a1;
  CAHostingLayer.contentsScale.getter((uint64_t)v1, v2, v3, v4);
  v6 = v5;

  return v6;
}

id CAHostingLayer.contentsScale.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_contentsScale);
}

void @objc CAHostingLayer.contentsScale.setter(void *a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  CAHostingLayer.contentsScale.setter(a2, (uint64_t)v6, v3, v4, v5);

}

id CAHostingLayer.contentsScale.setter(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  objc_class *v7;
  double v8;
  double v9;
  objc_super v11;
  objc_super v12;

  v7 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v5) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v5) + 0x58), a5);
  v12.receiver = v5;
  v12.super_class = v7;
  objc_msgSendSuper2(&v12, sel_contentsScale);
  v9 = v8;
  v11.receiver = v5;
  v11.super_class = v7;
  objc_msgSendSuper2(&v11, sel_setContentsScale_, a1);
  return CAHostingLayer.contentsScale.didset(v9);
}

id CAHostingLayer.contentsScale.didset(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unsigned __int16 v9;

  v3 = *v1;
  v4 = *MEMORY[0x24BEE4EA0];
  result = objc_msgSend(v1, sel_contentsScale);
  if (v7 != a1)
  {
    v9 = 2;
    v8 = type metadata accessor for CAHostingLayer(0, *(_QWORD *)((v4 & v3) + 0x50), *(_QWORD *)((v4 & v3) + 0x58), v6);
    return (id)ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(&v9, 1, v8, (uint64_t)&protocol witness table for CAHostingLayer<A>);
  }
  return result;
}

Swift::Void __swiftcall CAHostingLayer.layoutSublayers()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  objc_class *v3;
  uint64_t v4;
  objc_super v5;

  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x58), v0);
  v5.receiver = v1;
  v5.super_class = v3;
  objc_msgSendSuper2(&v5, sel_layoutSublayers);
  if (*((_BYTE *)v1 + *(_QWORD *)((*v2 & *v1) + 0xC0)) == 1)
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    v4 = static Update._lock;
    _MovableLockLock(static Update._lock);
    closure #1 in CAHostingLayer.layoutSublayers()(v1);
    _MovableLockUnlock(v4);
  }
}

void closure #1 in CAHostingLayer.layoutSublayers()(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  CFTimeInterval v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *p_aBlock;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  CFTimeInterval *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  void (*v41)();
  CFTimeInterval *v42;

  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = *MEMORY[0x24BEE4EA0] & *a1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchTime();
  v9 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - v13;
  v15 = CACurrentMediaTime();
  *((_BYTE *)a1 + *(_QWORD *)((*v2 & *a1) + 0xE0)) = 1;
  aBlock = 0;
  LOBYTE(v38) = 1;
  v17 = *(_QWORD *)(v3 + 80);
  v16 = *(_QWORD *)(v3 + 88);
  type metadata accessor for CAHostingLayer(0, v17, v16, v18);
  p_aBlock = &aBlock;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(0.0, 1, *(SwiftUI::Time_optional *)(&p_aBlock - 1));
  *((_BYTE *)a1 + *(_QWORD *)((*v2 & *a1) + 0xE0)) = 0;
  if (*((_BYTE *)a1 + *(_QWORD *)((*v2 & *a1) + 0xE8)) == 1)
  {
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v29 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    MEMORY[0x23B7C586C](v11, 0.0166666667);
    v30 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20 = v11;
    v21 = v31;
    v30(v20, v31);
    v22 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v23 = (CFTimeInterval *)swift_allocObject();
    *((_QWORD *)v23 + 2) = v17;
    *((_QWORD *)v23 + 3) = v16;
    *((_QWORD *)v23 + 4) = v22;
    v23[5] = v15;
    v41 = partial apply for closure #1 in closure #1 in CAHostingLayer.layoutSublayers();
    v42 = v23;
    aBlock = MEMORY[0x24BDAC760];
    v38 = 1107296256;
    v39 = thunk for @escaping @callee_guaranteed () -> ();
    v40 = &block_descriptor_52;
    v24 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v25 = v34;
    v26 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v27 = (void *)v29;
    MEMORY[0x23B7C6808](v14, v8, v25, v24);
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v26);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
    v30(v14, v21);
    *((_BYTE *)a1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0xE8)) = 0;
  }
}

void closure #1 in closure #1 in CAHostingLayer.layoutSublayers()(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  CFTimeInterval v6;
  double *v7;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x23B7C9E44](v3);
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = CACurrentMediaTime() - a2;
    v7 = (double *)((char *)v5 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v5) + 0x98));
    swift_beginAccess();
    *v7 = v6 + *v7;
    objc_msgSend(v5, sel_setNeedsLayout);

  }
}

void @objc CAHostingLayer.layoutSublayers()(void *a1)
{
  id v1;

  v1 = a1;
  CAHostingLayer.layoutSublayers()();

}

uint64_t CAHostingLayer.rootView.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0xF8);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t CAHostingLayer.rootView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  specialized CAHostingLayer.rootView.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

uint64_t (*CAHostingLayer.rootView.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAHostingLayer.rootView.modify;
}

uint64_t CAHostingLayer.rootView.modify(uint64_t a1, char a2)
{
  return CAHostingLayer.environmentOverride.modify(a1, a2, 1u);
}

uint64_t CAHostingLayer.environmentOverride.modify(uint64_t a1, char a2, unsigned __int16 a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return CAHostingLayer.environmentOverride.didset(a3, 1, v6, v7);
  return result;
}

uint64_t key path setter for CAHostingLayer.environment : <A>CAHostingLayer<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_retain();
  swift_retain();
  return CAHostingLayer.environment.setter(v4);
}

uint64_t CAHostingLayer.environmentOverride.didset(unsigned __int16 a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v9;

  v6 = *MEMORY[0x24BEE4EA0] & *v4;
  v9 = a1;
  v7 = type metadata accessor for CAHostingLayer(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), a4);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(&v9, a2, v7, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t CAHostingLayer.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x100));
  swift_beginAccess();
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t CAHostingLayer.environment.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x100));
  swift_beginAccess();
  *v4 = v2;
  v4[1] = v3;
  swift_release();
  swift_release();
  return CAHostingLayer.environmentOverride.didset(2u, 1, v5, v6);
}

uint64_t (*CAHostingLayer.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAHostingLayer.environmentOverride.modify;
}

double CAHostingLayer.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v9 = *MEMORY[0x24BEE4EA0] & *v4;
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  v26 = a2 & 1;
  v27 = a3;
  v28 = a4 & 1;
  v15 = type metadata accessor for CAHostingLayer(0, *(_QWORD *)(v9 + 80), *(_QWORD *)(v9 + 88), v14);
  v16 = ViewRendererHost.sizeThatFits(_:)((uint64_t)&v25, v15, (uint64_t)&protocol witness table for CAHostingLayer<A>);
  v18 = v17;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE38E0], v10);
  swift_beginAccess();
  v24 = *(_OWORD *)AGGraphGetValue();
  EnvironmentValues.pixelLength.getter();
  v20 = v19;
  v23[1] = v18;
  *(double *)&v24 = v16;
  specialized FloatingPoint.round(_:toMultipleOf:)(v13, v19);
  specialized FloatingPoint.round(_:toMultipleOf:)(v13, v20);
  v21 = *(double *)&v24;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v21;
}

uint64_t CAHostingLayer.referenceInstant.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x108);
  v4 = type metadata accessor for ContinuousClock.Instant();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CAHostingLayer.eventContext.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  _BYTE v17[24];

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v17[-v7];
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x110);
  swift_beginAccess();
  outlined init with copy of CAHostingLayerEvent.Context?(v10, (uint64_t)v8);
  v11 = type metadata accessor for CAHostingLayerEvent.Context();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) != 1)
    return outlined init with take of CAHostingLayerEvent.Context((uint64_t)v8, a1);
  outlined destroy of CAHostingLayerEvent.Context?((uint64_t)v8);
  v13 = (char *)v1 + *(_QWORD *)((*v9 & *v1) + 0x108);
  v14 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, v13, v14);
  v15 = (unint64_t *)(a1 + *(int *)(v11 + 20));
  *v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v15[1] = 1000;
  v15[2] = MEMORY[0x24BEE4B08];
  outlined init with copy of CAHostingLayerEvent.Context(a1, (uint64_t)v5);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v5, 0, 1, v11);
  swift_beginAccess();
  outlined assign with take of CAHostingLayerEvent.Context?((uint64_t)v5, v10);
  return swift_endAccess();
}

uint64_t CAHostingLayer.eventContext.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  outlined init with take of CAHostingLayerEvent.Context(a1, (uint64_t)&v9 - v4);
  v6 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  v7 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x110);
  swift_beginAccess();
  outlined assign with take of CAHostingLayerEvent.Context?((uint64_t)v5, v7);
  return swift_endAccess();
}

BOOL CAHostingLayer.send(event:)(uint64_t (**a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(char *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t DynamicType;
  uint64_t v11;
  uint64_t inited;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  __int128 v19;
  _QWORD v20[5];
  uint64_t v21;
  _BYTE v22[40];
  uint64_t v23;

  v2 = type metadata accessor for CAHostingLayerEvent.Context();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  CAHostingLayer.eventContext.getter((uint64_t)v4);
  v6 = v5(v4);
  CAHostingLayer.eventContext.setter((uint64_t)v4);
  v23 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v18[1] = v6;
    v8 = v6 + 32;
    v19 = xmmword_23527E860;
    do
    {
      outlined init with copy of CAHostingLayerEvent.Resolved(v8, (uint64_t)&v21);
      outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v20);
      __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      DynamicType = swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      v11 = v21;
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v19;
      *(_QWORD *)(inited + 32) = DynamicType;
      *(_QWORD *)(inited + 40) = v11;
      outlined init with copy of AnyTrackedValue((uint64_t)v22, inited + 48);
      v13 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      swift_setDeallocating();
      type metadata accessor for (EventID, EventType)();
      swift_arrayDestroy();
      swift_weakInit();
      if (one-time initialization token for _lock != -1)
        swift_once();
      v14 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        v9 = EventBindingManager.sendDownstream(_:)(v13);
        swift_release();
      }
      else
      {
        v9 = MEMORY[0x24BEE4B08];
      }
      static Update.end()();
      _MovableLockUnlock(v14);
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v9);
      outlined destroy of CAHostingLayerEvent.Resolved((uint64_t)&v21);
      v8 += 48;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    v15 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRelease();
  return v16 != 0;
}

void CAHostingLayer.didUpdate(phase:in:)(_BYTE *a1)
{
  int v1;

  v1 = a1[1];
  if (v1 == 2 || v1 == 3 && !*a1)
    EventBindingManager.reset(resetForwardedEventDispatchers:)(0);
}

id CAHostingLayer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAHostingLayer.init()()
{
  specialized CAHostingLayer.init()();
}

void @objc CAHostingLayer.init()()
{
  specialized CAHostingLayer.init()();
}

id CAHostingLayer.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc CAHostingLayer.__ivar_destroyer(char *a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = *MEMORY[0x24BEE4EA0] & *(_QWORD *)a1;
  swift_release();
  swift_release();
  swift_release();
  outlined consume of EnvironmentValues?(*(_QWORD *)&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0xA8)]);

  swift_release();
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1)
                                                                                                 + 0xF8)]);
  swift_release();
  swift_release();
  v4 = &a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0x108)];
  v5 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return outlined destroy of CAHostingLayerEvent.Context?((uint64_t)&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0x110)]);
}

uint64_t protocol witness for EventGraphHost.eventBindingManager.getter in conformance CAHostingLayer<A>()
{
  specialized CAHostingLayer.eventBindingManager.getter();
  return swift_retain();
}

uint64_t protocol witness for EventGraphHost.focusedResponder.getter in conformance CAHostingLayer<A>()
{
  specialized CAHostingLayer.focusedResponder.getter();
  return swift_retain();
}

void protocol witness for EventBindingManagerDelegate.didUpdate(phase:in:) in conformance CAHostingLayer<A>(_BYTE *a1)
{
  int v1;

  v1 = a1[1];
  if (v1 == 2 || v1 == 3 && !*a1)
    EventBindingManager.reset(resetForwardedEventDispatchers:)(0);
}

uint64_t CAHostingLayer.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v8[2];

  result = type metadata accessor for AnyPreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  if (result == a1)
  {
    v8[0] = v3;
    v8[1] = &protocol witness table for CAHostingLayer<A>;
    v3 = *(_QWORD *)(a2 - 8);
    if (*(_QWORD *)(v3 + 64) == 16)
    {
LABEL_7:
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(a3, v8, a2);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(a3, 0, 1, a2);
    }
    __break(1u);
  }
  else
  {
    result = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    if (result != a1)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  v8[0] = v3;
  v3 = *(_QWORD *)(a2 - 8);
  if (*(_QWORD *)(v3 + 64) == 8)
    goto LABEL_7;
  __break(1u);
  return result;
}

Swift::Void __swiftcall CAHostingLayer.updateRootView()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[2];

  v1 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *v0);
  v2 = v1[10];
  v3 = *(_QWORD *)(v2 - 8);
  ((void (*)())MEMORY[0x24BDAC7A8])();
  v5 = (char *)&v16[-1] - v4;
  v7 = type metadata accessor for ModifiedContent(0, v2, (uint64_t)&type metadata for HitTestBindingModifier, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16[-1] - v9;
  v11 = v1[11];
  v15 = *(_QWORD *)((char *)v0 + v1[12]);
  v13 = type metadata accessor for CAHostingLayer(0, v2, v11, v12);
  v14 = (char *)v0 + v1[31];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v14, v2);
  static ViewRendererHost.makeRootView<A>(_:)((uint64_t)v5, v13, v2, (uint64_t)&protocol witness table for CAHostingLayer<A>, v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v16[0] = v11;
  v16[1] = &protocol witness table for HitTestBindingModifier;
  MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v7, v16);
  ViewGraph.setRootView<A>(_:)((uint64_t)v10, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Void __swiftcall CAHostingLayer.updateEnvironment()()
{
  _QWORD *v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SwiftUI::BloomFilter v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  CAHostingLayer.environment.getter(&v23);
  objc_msgSend(v0, sel_contentsScale);
  v2 = v1;
  v3 = (uint64_t)v23;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v23, v2);
  swift_release();
  v4 = v24;
  if (v24)
  {
    v5 = v23;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, (uint64_t)v5);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v5 = v23;
  }
  CAHostingLayer.environmentOverride.getter(&v22);
  v9 = v22;
  if (v22 != 1)
  {
    if (v5)
    {
      if (v22)
      {
        if (v5[3])
        {
          type metadata accessor for TypedElement<EmptyKey>(0, v6, v7, v8);
          swift_allocObject();
          swift_retain();
          swift_retain();
          v10.value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v9, (uint64_t)v5).value;
        }
        else
        {
          v12 = v5[4];
          v13 = *(uint64_t (**)(uint64_t, uint64_t))(*v5 + 216);
          swift_retain();
          swift_retain();
          v14 = swift_retain();
          v10.value = v13(v14, v12);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_retain();
        v10.value = (Swift::UInt)v5;
      }
      v11 = v5[8];
    }
    else
    {
      if (!v22)
      {
LABEL_18:
        outlined consume of EnvironmentValues?(v9);
        goto LABEL_19;
      }
      swift_retain();
      v11 = 0;
      v10.value = v9;
    }
    if (v11 != *(_QWORD *)(v10.value + 64) && v4)
    {
      swift_retain();
      PropertyList.Tracker.invalidateAllValues(from:to:)((uint64_t)v5, v10.value);
      swift_release();
    }
    swift_release();
    goto LABEL_18;
  }
LABEL_19:
  v15 = *(_QWORD **)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x60));
  swift_beginAccess();
  v16 = (void *)v15[2];
  v17 = (void *)v15[3];
  v18 = (void *)v15[4];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain();
  v19 = v16;
  v20 = v17;
  v21 = v18;
  AGGraphSetValue();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release_n();
}

Swift::Void __swiftcall CAHostingLayer.updateSize()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x60));
  objc_msgSend(v0, sel_bounds);
  if (AGGraphSetValue())
  {
    swift_beginAccess();
    if (MEMORY[0x23B7C9E44](v1 + 200))
    {
      v2 = *(_QWORD *)(v1 + 208);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 16))(ObjectType);
      swift_unknownObjectRelease();
    }
  }
}

Swift::Void __swiftcall CAHostingLayer.updateSafeArea()()
{
  _QWORD *v0;
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  _QWORD v11[4];
  char v12;
  char v13[32];
  char v14;

  v1 = (double *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0));
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  LOBYTE(v1) = *((_BYTE *)v1 + 32);
  *(double *)v11 = v2;
  *(double *)&v11[1] = v3;
  *(double *)&v11[2] = v4;
  *(double *)&v11[3] = v5;
  v12 = (char)v1;
  outlined init with take of EdgeInsets?((uint64_t)v11, (uint64_t)v13);
  if ((v14 & 1) != 0)
    v6 = 0.0;
  else
    v6 = v2;
  if ((v14 & 1) != 0)
    v7 = 0.0;
  else
    v7 = v3;
  if ((v14 & 1) != 0)
    v8 = 0.0;
  else
    v8 = v4;
  if ((v14 & 1) != 0)
    v9 = 0.0;
  else
    v9 = v5;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23527E860;
  *(_QWORD *)(v10 + 32) = 1;
  *(double *)(v10 + 40) = v6;
  *(double *)(v10 + 48) = v7;
  *(double *)(v10 + 56) = v8;
  *(double *)(v10 + 64) = v9;
  ViewGraph.setSafeAreaInsets(_:)((Swift::OpaquePointer)v10);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CAHostingLayer.requestUpdate(after:)(Swift::Double after)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE v20[16];
  _QWORD aBlock[6];

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v5 = *MEMORY[0x24BEE4EA0];
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    v14 = static Update._lock;
    _MovableLockLock(static Update._lock);
    closure #2 in CAHostingLayer.requestUpdate(after:)(v2, after);
    _MovableLockUnlock(v14);
  }
  else
  {
    v15 = v5 & v4;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v16 = (void *)static OS_dispatch_queue.main.getter();
    v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v15 + 80);
    *(_QWORD *)(v18 + 24) = *(_QWORD *)(v15 + 88);
    *(_QWORD *)(v18 + 32) = v17;
    *(Swift::Double *)(v18 + 40) = after;
    aBlock[4] = partial apply for closure #1 in CAHostingLayer.requestUpdate(after:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_4;
    v19 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x23B7C6820](0, v13, v9, v19);
    _Block_release(v19);

    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
}

void closure #1 in CAHostingLayer.requestUpdate(after:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x23B7C9E44](v3);
  if (v4)
  {
    v5 = (void *)v4;
    CAHostingLayer.requestUpdate(after:)(a2);

  }
}

void closure #2 in CAHostingLayer.requestUpdate(after:)(char *a1, double a2)
{
  _QWORD *v4;
  uint64_t v5;
  double *v6;
  double v7;
  uint64_t *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  double v20;
  _QWORD aBlock[6];

  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = *MEMORY[0x24BEE4EA0] & *(_QWORD *)a1;
  if (a2 >= 0.25)
  {
    v6 = (double *)&a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x98)];
    swift_beginAccess();
    v7 = *v6 + a2;
    v8 = (uint64_t *)&a1[*(_QWORD *)((*v4 & *(_QWORD *)a1) + 0xD0)];
    if (*((_BYTE *)v8 + 8) == 1)
    {
      if (one-time initialization token for infinity != -1)
      {
        v20 = *v6 + a2;
        swift_once();
        v7 = v20;
      }
      v8 = &static Time.infinity;
    }
    if (v7 < *(double *)v8)
    {
      objc_msgSend(*(id *)&a1[*(_QWORD *)((*v4 & *(_QWORD *)a1) + 0xD8)], sel_invalidate);
      v9 = (double *)&a1[*(_QWORD *)((*v4 & *(_QWORD *)a1) + 0x98)];
      swift_beginAccess();
      v10 = (double *)&a1[*(_QWORD *)((*v4 & *(_QWORD *)a1) + 0xD0)];
      *v10 = *v9 + a2;
      *((_BYTE *)v10 + 8) = 0;
      v11 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v12 = (_QWORD *)swift_allocObject();
      v12[2] = *(_QWORD *)(v5 + 80);
      v12[3] = *(_QWORD *)(v5 + 88);
      v12[4] = v11;
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = partial apply for closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:);
      *(_QWORD *)(v13 + 24) = v12;
      aBlock[4] = partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:);
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
      aBlock[3] = &block_descriptor_45;
      v14 = _Block_copy(aBlock);
      v15 = (void *)objc_opt_self();
      swift_retain();
      swift_retain();
      v16 = objc_msgSend(v15, sel_timerWithTimeInterval_repeats_block_, 0, v14, a2);
      _Block_release(v14);
      swift_release();
      v17 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
      objc_msgSend(v17, sel_addTimer_forMode_, v16, *MEMORY[0x24BDBCB80]);
      swift_release();
      swift_release();

      v18 = *(_QWORD *)((*v4 & *(_QWORD *)a1) + 0xD8);
      v19 = *(void **)&a1[v18];
      *(_QWORD *)&a1[v18] = v16;

    }
  }
  else if ((a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0xE0)] & 1) != 0)
  {
    a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0xE8)] = 1;
  }
  else
  {
    objc_msgSend(a1, sel_setNeedsLayout);
  }
}

void closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  char *v7;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x23B7C9E44](v1);
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v5 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0xD8);
    v6 = *(void **)((char *)v2 + v5);
    *(_QWORD *)((char *)v2 + v5) = 0;

    v7 = (char *)v3 + *(_QWORD *)((*v4 & *v3) + 0xD0);
    *(_QWORD *)v7 = 0;
    v7[8] = 1;
    objc_msgSend(v3, sel_setNeedsLayout);

  }
}

uint64_t CAHostingLayer.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  __int16 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  char v37;

  v10 = *(_QWORD *)result;
  v11 = *(_WORD *)(result + 8);
  v12 = *(_BYTE *)(result + 10);
  v13 = *a3;
  v14 = *a4;
  v15 = *a6;
  v16 = *a7;
  if ((a2 & 1) == 0)
    goto LABEL_3;
  v17 = *(_BYTE *)(a5 + 8);
  v18 = *(_QWORD *)a5;
  v33 = *(_QWORD *)result;
  v34 = v11;
  v35 = v12;
  v31 = v14;
  v32 = v13;
  v28 = v15;
  v29 = v18;
  v30 = v17;
  v27 = v16;
  result = DisplayList.ViewRenderer.renderAsync(to:time:nextTime:targetTimestamp:version:maxVersion:)((uint64_t)&v33, (double *)&v32, (double *)&v31, &v29, &v28, &v27, (uint64_t)&v36);
  if ((v37 & 1) == 0)
  {
    v19 = v36;
  }
  else
  {
LABEL_3:
    v33 = v14;
    MEMORY[0x24BDAC7A8](result);
    v20[2] = v8;
    v20[3] = &v33;
    v20[4] = v10;
    v21 = v11;
    v22 = v12;
    v23 = v13;
    v24 = v14;
    v25 = v15;
    v26 = v16;
    result = specialized static Update.syncMain(_:)((uint64_t (*)(void))partial apply for closure #1 in CAHostingLayer.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:), (uint64_t)v20);
    v19 = v33;
  }
  *a8 = v19;
  return result;
}

double closure #1 in CAHostingLayer.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(void *a1, double *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  __int16 v12;
  unsigned int v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  double v27;

  v12 = a4;
  v16 = HIWORD(a4);
  objc_msgSend(a1, sel_contentsScale);
  v24 = a3;
  v25 = v12;
  v26 = v16;
  v22 = a8;
  v23 = a7;
  v20 = a6;
  v21 = a5;
  v19 = v17;
  DisplayList.ViewRenderer.render(rootView:from:time:nextTime:version:maxVersion:environment:)((uint64_t)a1, &v24, &v23, &v22, &v21, &v20, &v19, &v27);
  result = v27;
  *a2 = v27;
  return result;
}

uint64_t CAHostingLayer.preferenceValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58);
  v11 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50);
  v12 = a2;
  v13 = v6;
  v14 = a3;
  v15 = a1;
  v7 = type metadata accessor for CAHostingLayer(0, v11, v6, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return ViewRendererHost.updateViewGraph<A>(body:)((void (*)(void))partial apply for closure #1 in CAHostingLayer.preferenceValue<A>(_:), (uint64_t)&v10, v7, AssociatedTypeWitness, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t CAHostingLayer.convertAnchor<A>(_:)(uint64_t a1)
{
  uint64_t Value;
  __int128 v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  Value = AGGraphGetValue();
  v5 = *(_QWORD *)Value;
  v3 = *(_OWORD *)(Value + 24);
  v6 = *(_OWORD *)(Value + 8);
  v7 = v3;
  swift_retain();
  Anchor.convert(to:)(&v5, a1);
  return swift_release();
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance CAHostingLayer<A>()
{
  specialized CAHostingLayer.viewGraph.getter();
  return swift_retain();
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance CAHostingLayer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.currentTimestamp.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance CAHostingLayer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.propertiesNeedingUpdate.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance CAHostingLayer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.renderingPhase.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance CAHostingLayer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.externalUpdateCount.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

unint64_t CAHostingLayer.attributeCountInfo.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t result;

  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v5 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  result = specialized Dictionary.init(dictionaryLiteral:)(v2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = result;
  return result;
}

uint64_t CAHostingLayer.viewCacheIsEmpty.getter()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned __int8 v3;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  closure #1 in CAHostingLayer.viewCacheIsEmpty.getter(v0, &v3);
  _MovableLockUnlock(v1);
  return v3;
}

_QWORD *closure #1 in CAHostingLayer.viewCacheIsEmpty.getter@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  char v7;

  v3 = *(_QWORD *)((char *)result + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *result) + 0x68));
  if (*(_QWORD *)(v3 + 64))
  {
    v4 = *(_QWORD *)(v3 + 72);
    ObjectType = swift_getObjectType();
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain();
    v7 = v6(ObjectType, v4);
    result = (_QWORD *)swift_unknownObjectRelease();
  }
  else
  {
    v7 = 1;
  }
  *a2 = v7 & 1;
  return result;
}

Swift::Void __swiftcall CAHostingLayer.setTestSize(_:)(CGSize a1)
{
  uint64_t *v1;
  double height;
  double width;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  CGFloat x;
  CGFloat y;
  CGFloat v16;
  CGFloat v17;
  double MinX;
  double v19;
  double MinY;
  double v21;
  double v22;
  objc_class *v23;
  objc_super v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  height = a1.height;
  width = a1.width;
  v4 = *v1;
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = *MEMORY[0x24BEE4EA0];
  objc_msgSend(v1, sel_bounds);
  if (v8 != width || v7 != height)
  {
    v10 = v6 & v4;
    *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0xC8)) = 1;
    v11 = objc_msgSend(v1, sel_superlayer);
    if (v11)
    {
      v13 = v11;
      objc_msgSend(v11, sel_bounds);
      x = v25.origin.x;
      y = v25.origin.y;
      v16 = v25.size.width;
      v17 = v25.size.height;
      MinX = CGRectGetMinX(v25);
      v26.origin.x = x;
      v26.origin.y = y;
      v26.size.width = v16;
      v26.size.height = v17;
      v19 = MinX + (CGRectGetWidth(v26) - width) * 0.5;
      v27.origin.x = x;
      v27.origin.y = y;
      v27.size.width = v16;
      v27.size.height = v17;
      MinY = CGRectGetMinY(v27);
      v28.origin.x = x;
      v28.origin.y = y;
      v28.size.width = v16;
      v28.size.height = v17;
      v21 = CGRectGetHeight(v28);

      v22 = MinY + (v21 - height) * 0.5;
    }
    else
    {
      v22 = 0.0;
      v19 = 0.0;
    }
    v23 = (objc_class *)type metadata accessor for CAHostingLayer(0, *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), v12);
    v24.receiver = v1;
    v24.super_class = v23;
    objc_msgSendSuper2(&v24, sel_setFrame_, v19, v22, width, height);
    *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0xC8)) = 0;
  }
}

double CAHostingLayer.testSize.getter()
{
  void *v0;
  double v1;

  objc_msgSend(v0, sel_frame);
  return v1;
}

uint64_t CAHostingLayer.setTestSafeAreaInsets(_:)(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  char v9;

  *(double *)v8 = a1;
  *(double *)&v8[1] = a2;
  *(double *)&v8[2] = a3;
  *(double *)&v8[3] = a4;
  v9 = 0;
  outlined init with take of EdgeInsets?((uint64_t)v8, (uint64_t)v4 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0xB0));
  return CAHostingLayer.environmentOverride.didset(0x20u, 0, v5, v6);
}

Swift::Void __swiftcall CAHostingLayer._renderForTest(interval:)(Swift::Double interval)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  _WORD *v10;
  uint64_t v11;
  char *rawValue;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = v2;
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0x58), v1);
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  v6 = *(_QWORD *)((*v5 & *v2) + 0xC0);
  v17 = *((_BYTE *)v2 + v6);
  *((_BYTE *)v2 + v6) = 0;
  v7 = (void *)objc_opt_self();
  v8 = (void *)MEMORY[0x24BEE4AF8];
  do
  {
    while (1)
    {
      if (one-time initialization token for observerActions != -1)
        swift_once();
      swift_beginAccess();
      rawValue = (char *)observerActions._rawValue;
      v13 = *((_QWORD *)observerActions._rawValue + 2);
      if (!v13)
        break;
      observerActions._rawValue = v8;
      specialized static Update.begin()();
      v14 = rawValue + 40;
      do
      {
        v15 = (void (*)(uint64_t))*((_QWORD *)v14 - 1);
        v16 = swift_retain();
        v15(v16);
        swift_release();
        v14 += 16;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      static Update.end()();
    }
    v18 = 0;
    v19 = 1;
    v9 = &v18;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(0.0, 1, *(SwiftUI::Time_optional *)&v11);
    objc_msgSend(v7, sel_flush);
    v10 = (_WORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v3) + 0x78));
    swift_beginAccess();
  }
  while (*v10);
  *((_BYTE *)v3 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v3) + 0xC0)) = v17;
}

Swift::Bool __swiftcall CAHostingLayer._renderAsyncForTest(interval:)(Swift::Double interval)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  _WORD *v8;
  char *rawValue;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  BOOL v23;

  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  type metadata accessor for CAHostingLayer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0x58), v1);
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  v5 = *(_QWORD *)((*v4 & *v2) + 0xC0);
  v19 = *((_BYTE *)v2 + v5);
  *((_BYTE *)v2 + v5) = 0;
  v20 = *(_QWORD *)((*v4 & *v2) + 0x60);
  v6 = 1;
  v7 = (void *)MEMORY[0x24BEE4AF8];
  v21 = v2;
  while (1)
  {
    v22 = v6;
    while (1)
    {
      if (one-time initialization token for observerActions != -1)
        swift_once();
      swift_beginAccess();
      rawValue = (char *)observerActions._rawValue;
      v10 = *((_QWORD *)observerActions._rawValue + 2);
      if (!v10)
        break;
      observerActions._rawValue = v7;
      specialized static Update.begin()();
      v11 = rawValue + 40;
      do
      {
        v12 = (void (*)(uint64_t))*((_QWORD *)v11 - 1);
        v13 = swift_retain();
        v12(v13);
        swift_release();
        v11 += 16;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      static Update.end()();
    }
    if (one-time initialization token for _lock != -1)
      swift_once();
    v14 = static Update._lock;
    _MovableLockLock(static Update._lock);
    closure #1 in CAHostingLayer._renderAsyncForTest(interval:)(v21, v15, &v23);
    _MovableLockUnlock(v14);
    if (!v23)
    {
      v6 = 0;
LABEL_18:
      *((_BYTE *)v21 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v21) + 0xC0)) = v19;
      LOBYTE(v17) = v6;
      return v17;
    }
    objc_msgSend((id)objc_opt_self(), sel_flush);
    if (v22)
      break;
    v6 = 0;
LABEL_3:
    v8 = (_WORD *)((char *)v21 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v21) + 0x78));
    swift_beginAccess();
    if (!*v8)
      goto LABEL_18;
  }
  v16 = *(_QWORD *)((char *)v21 + v20);
  swift_beginAccess();
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v6 = AGGraphGetCounter() == *(_QWORD *)(v16 + 368);
    goto LABEL_3;
  }
  __break(1u);
  return v17;
}

uint64_t closure #1 in CAHostingLayer._renderAsyncForTest(interval:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  SwiftUI::Time_optional v10;

  v4 = *MEMORY[0x24BEE4EA0] & *a1;
  v7 = 0;
  v8 = 1;
  type metadata accessor for CAHostingLayer(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a2);
  v5 = &v7;
  v10 = ViewRendererHost.renderAsync(interval:targetTimestamp:)(0.0, *(SwiftUI::Time_optional *)(&v5 - 1));
  *a3 = (v9 & 1) == 0;
  LOBYTE(result) = v10.is_nil;
  return result;
}

void CAHostingLayer.forEachDescendantHost(body:)(void (*a1)(void *, uint64_t), uint64_t a2)
{
  void *v2;

  specialized CALayer.forEachDescendant(_:)(v2, a1, a2);
}

uint64_t (*protocol witness for TestHost.environmentOverride.modify in conformance CAHostingLayer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.environmentOverride.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for TestHost.isHiddenForReuse.modify in conformance CAHostingLayer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.isHiddenForReuse.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for TestHost.accessibilityEnabled.modify in conformance CAHostingLayer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.accessibilityEnabled.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

unint64_t protocol witness for TestHost.attributeCountInfo.getter in conformance CAHostingLayer<A>@<X0>(unint64_t *a1@<X8>)
{
  return CAHostingLayer.attributeCountInfo.getter(a1);
}

uint64_t specialized CAHostingLayer.viewGraph.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x60));
}

uint64_t specialized CAHostingLayer.eventBindingManager.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x70));
}

uint64_t outlined consume of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized CAHostingLayer.focusedResponder.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0));
}

_QWORD *specialized ViewGraph.__allocating_init<A>(rootView:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  char v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for defaults != -1)
    swift_once();
  v15[0] = static ViewGraph.Outputs.defaults;
  v7 = (_QWORD *)ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)(a3, v15, a3, a4);
  swift_retain();
  ViewGraph.setRootView<A>(_:)(a1, a3);
  swift_beginAccess();
  v8 = (void *)v7[2];
  v9 = (void *)v7[3];
  v10 = (void *)v7[4];
  swift_retain();
  swift_retain();
  v11 = v8;
  v12 = v9;
  v13 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  AGGraphSetValue();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release_n();
  swift_release();
  return v7;
}

id specialized CAHostingLayer.init(rootView:environment:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  objc_super v49;
  _QWORD v50[2];
  _QWORD v51[2];

  v47 = a1;
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v7 = *MEMORY[0x24BEE4EA0] & *v4;
  v8 = *(_QWORD *)(v7 + 0x50);
  v44 = type metadata accessor for ModifiedContent(0, v8, (uint64_t)&type metadata for HitTestBindingModifier, a4);
  v48 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v10 = (char *)&v41 - v9;
  v11 = type metadata accessor for ContinuousClock.Instant();
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2[1];
  v45 = *a2;
  v46 = v7;
  v15 = *(_QWORD *)(v7 + 104);
  v16 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 72) = 0;
  *(_BYTE *)(v17 + 80) = 1;
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)((char *)v4 + v15) = v17;
  v18 = *(_QWORD *)((*v6 & *v4) + 0x70);
  type metadata accessor for EventBindingManager();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v19 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v19 + 48) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v19 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v19 + 64) = 0;
  *(_QWORD *)(v19 + 72) = 0;
  *(_QWORD *)((char *)v4 + v18) = v19;
  v20 = *(_QWORD *)((*v6 & *v4) + 0x78);
  v21 = one-time initialization token for all;
  v22 = v4;
  if (v21 != -1)
    swift_once();
  *(_WORD *)((char *)v22 + v20) = static ViewRendererHostProperties.all;
  *((_BYTE *)v22 + *(_QWORD *)((*v6 & *v22) + 0x80)) = 0;
  *((_BYTE *)v22 + *(_QWORD *)((*v6 & *v22) + 0x88)) = 0;
  *((_BYTE *)v22 + *(_QWORD *)((*v6 & *v22) + 0x90)) = 0;
  *(_QWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0x98)) = 0;
  *(_QWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xA0)) = 0;
  *(_OWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xA8)) = xmmword_235260EF0;
  v23 = (char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xB0);
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  v23[32] = 1;
  *(_QWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xB8)) = 0;
  *((_BYTE *)v22 + *(_QWORD *)((*v6 & *v22) + 0xC0)) = 1;
  *((_BYTE *)v22 + *(_QWORD *)((*v6 & *v22) + 0xC8)) = 1;
  v24 = (char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xD0);
  *(_QWORD *)v24 = 0;
  v24[8] = 1;
  *(_QWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xD8)) = 0;
  *((_BYTE *)v22 + *(_QWORD *)((*v6 & *v22) + 0xE0)) = 0;
  *((_BYTE *)v22 + *(_QWORD *)((*v6 & *v22) + 0xE8)) = 0;
  *(_QWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xF0)) = 0;
  v25 = (char *)v22 + *(_QWORD *)((*v6 & *v22) + 0x110);
  v26 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0xF8), v47, v8);
  v28 = (_QWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0x100));
  v29 = v45;
  *v28 = v45;
  v28[1] = v14;
  swift_retain();
  swift_retain();
  static ContinuousClock.Instant.now.getter();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0x108), v13, v43);
  specialized static Update.begin()();
  type metadata accessor for ViewGraph();
  v30 = *(_QWORD *)(v46 + 88);
  v32 = (objc_class *)type metadata accessor for CAHostingLayer(0, v8, v30, v31);
  static ViewRendererHost.makeRootView<A>(_:)(v27, (uint64_t)v32, v8, (uint64_t)&protocol witness table for CAHostingLayer<A>, v30);
  v51[0] = v29;
  v51[1] = v14;
  v50[0] = v30;
  v50[1] = &protocol witness table for HitTestBindingModifier;
  v33 = v44;
  v34 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v44, v50);
  v35 = specialized ViewGraph.__allocating_init<A>(rootView:environment:)((uint64_t)v10, (uint64_t)v51, v33, v34);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v33);
  *(_QWORD *)((char *)v22 + *(_QWORD *)((*v6 & *v22) + 0x60)) = v35;

  v49.receiver = v22;
  v49.super_class = v32;
  v36 = objc_msgSendSuper2(&v49, sel_init);
  CAHostingLayer.postInit()((uint64_t)v36, v37, v38, v39);
  static Update.end()();

  return v36;
}

uint64_t type metadata accessor for CAHostingLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CAHostingLayer);
}

void specialized CAHostingLayer.init(coder:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x68);
  v3 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = 1;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)((char *)v0 + v2) = v4;
  v5 = *(_QWORD *)((*v1 & *v0) + 0x70);
  type metadata accessor for EventBindingManager();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v6 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v6 + 48) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v6 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)((char *)v0 + v5) = v6;
  v7 = *(_QWORD *)((*v1 & *v0) + 0x78);
  if (one-time initialization token for all != -1)
    swift_once();
  *(_WORD *)((char *)v0 + v7) = static ViewRendererHostProperties.all;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0x80)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0x88)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0x90)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x98)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xA0)) = 0;
  *(_OWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xA8)) = xmmword_235260EF0;
  v8 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xB0);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xB8)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0xC0)) = 1;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0xC8)) = 1;
  v9 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xD0);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xD8)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0xE0)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0xE8)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xF0)) = 0;
  v10 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x110);
  v11 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CAHostingLayer.rootView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0xF8);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  return CAHostingLayer.environmentOverride.didset(1u, 1, v5, v6);
}

uint64_t outlined init with copy of CAHostingLayerEvent.Resolved(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CAHostingLayerEvent.Resolved(a2, a1);
  return a2;
}

uint64_t outlined destroy of CAHostingLayerEvent.Resolved(uint64_t a1)
{
  destroy for _AnyAnimatableData(a1);
  return a1;
}

void specialized CAHostingLayer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void type metadata accessor for TypedElement<EmptyKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TypedElement<EmptyKey>)
  {
    v4 = type metadata accessor for TypedElement(0, (uint64_t)&type metadata for EmptyKey, (uint64_t)&protocol witness table for EmptyKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>);
  }
}

uint64_t sub_234B820F0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_234B82114()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CAHostingLayer.requestUpdate(after:)()
{
  uint64_t v0;

  closure #1 in CAHostingLayer.requestUpdate(after:)(*(_QWORD *)(v0 + 32), *(Swift::Double *)(v0 + 40));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    type metadata accessor for [(_:)](255, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

double partial apply for closure #1 in CAHostingLayer.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)()
{
  uint64_t v0;

  return closure #1 in CAHostingLayer.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(*(void **)(v0 + 16), *(double **)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int16 *)(v0 + 40) | (*(unsigned __int8 *)(v0 + 42) << 16), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t partial apply for closure #1 in CAHostingLayer.preferenceValue<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return GraphHost.preferenceValue<A>(_:)(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

void specialized CALayer.forEachDescendant(_:)(void *a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;

  swift_getObjectType();
  v6 = swift_conformsToProtocol2();
  if (v6)
    v7 = v6;
  else
    v7 = 0;
  if (v6)
    v8 = a1;
  else
    v8 = 0;
  if (v8)
  {
    v9 = a1;
    a2(v8, v7);

  }
  v10 = objc_msgSend(a1, sel_sublayers);
  if (v10)
  {
    v11 = v10;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v12 >> 62))
      goto LABEL_11;
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
    if (!(MEMORY[0x24BEE4AF8] >> 62))
    {
LABEL_11:
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13)
        goto LABEL_12;
LABEL_20:
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_20;
LABEL_12:
  if (v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0)
        v15 = (id)MEMORY[0x23B7C6D9C](i, v12);
      else
        v15 = *(id *)(v12 + 8 * i + 32);
      v16 = v15;
      specialized CALayer.forEachDescendant(_:)(v15, a2, a3);

    }
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_234B823C0@<X0>(_WORD *a1@<X8>)
{
  return CAHostingLayer.propertiesNeedingUpdate.getter(a1);
}

uint64_t sub_234B823E0(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return CAHostingLayer.propertiesNeedingUpdate.setter(&v2);
}

uint64_t sub_234B82414()
{
  return 16;
}

__n128 sub_234B82420(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234B8242C@<X0>(_BYTE *a1@<X8>)
{
  return CAHostingLayer.renderingPhase.getter(a1);
}

uint64_t sub_234B8244C(char *a1)
{
  char v2;

  v2 = *a1;
  return CAHostingLayer.renderingPhase.setter(&v2);
}

uint64_t sub_234B82480()
{
  return 16;
}

__n128 sub_234B8248C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234B82498@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAHostingLayer.isHiddenForReuse.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_234B824C4(char *a1)
{
  return CAHostingLayer.isHiddenForReuse.setter(*a1);
}

uint64_t sub_234B824E8()
{
  return 16;
}

__n128 sub_234B824F4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_234B82500@<D0>(_QWORD *a1@<X8>)
{
  return CAHostingLayer.currentTimestamp.getter(a1);
}

uint64_t sub_234B82520(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return CAHostingLayer.currentTimestamp.setter(&v2);
}

uint64_t sub_234B82554()
{
  return 16;
}

__n128 sub_234B82560(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234B8256C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAHostingLayer.externalUpdateCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234B82594(uint64_t *a1)
{
  return CAHostingLayer.externalUpdateCount.setter(*a1);
}

uint64_t sub_234B825B8()
{
  return 16;
}

__n128 sub_234B825C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_234B825D0@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  CAHostingLayer.environmentOverride.getter((uint64_t *)&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_234B82608(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  outlined copy of EnvironmentValues?(v3[0]);
  return CAHostingLayer.environmentOverride.setter(v3);
}

uint64_t sub_234B82648()
{
  return 16;
}

__n128 sub_234B82654(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234B82660@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAHostingLayer.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_234B8268C(char *a1)
{
  return CAHostingLayer.accessibilityEnabled.setter(*a1);
}

uint64_t sub_234B826B0()
{
  return 16;
}

__n128 sub_234B826BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234B826C8@<X0>(uint64_t a1@<X8>)
{
  return CAHostingLayer.rootView.getter(a1);
}

uint64_t sub_234B826E8(uint64_t a1)
{
  return specialized CAHostingLayer.rootView.setter(a1);
}

uint64_t sub_234B82708()
{
  return 16;
}

__n128 sub_234B82714(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_234B82720@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  CAHostingLayer.environment.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_234B8275C()
{
  return 16;
}

__n128 sub_234B82768(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for CAHostingLayer()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ContinuousClock.Instant();
    if (v1 <= 0x3F)
    {
      type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
        swift_initClassMetadata2();
    }
  }
}

uint64_t method lookup function for CAHostingLayer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAHostingLayer.propertiesNeedingUpdate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAHostingLayer.propertiesNeedingUpdate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAHostingLayer.propertiesNeedingUpdate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAHostingLayer.renderingPhase.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAHostingLayer.renderingPhase.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAHostingLayer.renderingPhase.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAHostingLayer.isHiddenForReuse.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAHostingLayer.isHiddenForReuse.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAHostingLayer.isHiddenForReuse.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAHostingLayer.currentTimestamp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAHostingLayer.currentTimestamp.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAHostingLayer.currentTimestamp.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAHostingLayer.externalUpdateCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAHostingLayer.externalUpdateCount.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAHostingLayer.externalUpdateCount.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAHostingLayer.environmentOverride.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAHostingLayer.environmentOverride.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAHostingLayer.environmentOverride.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAHostingLayer.accessibilityEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAHostingLayer.accessibilityEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAHostingLayer.accessibilityEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAHostingLayer.__allocating_init(rootView:environment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 664))();
}

uint64_t dispatch thunk of CAHostingLayer.rootView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CAHostingLayer.rootView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of CAHostingLayer.rootView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of CAHostingLayer.environment.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of CAHostingLayer.environment.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of CAHostingLayer.environment.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of CAHostingLayer.sizeThatFits(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CAHostingLayer.send(event:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of CAHostingLayer.didBind(to:id:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x300))();
}

uint64_t dispatch thunk of CAHostingLayer.didUpdate(phase:in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x308))();
}

uint64_t outlined destroy of CAHostingLayerEvent.Context?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_234B82C94()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:)()
{
  uint64_t v0;

  closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:)(*(_QWORD *)(v0 + 32));
}

uint64_t sub_234B82CC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of CAHostingLayerEvent.Context?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CAHostingLayerEvent.Context?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in CAHostingLayer.layoutSublayers()()
{
  uint64_t v0;

  closure #1 in closure #1 in CAHostingLayer.layoutSublayers()(*(_QWORD *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t static CodableByProxy<>.unwrap(codingProxy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v5(AssociatedTypeWitness, a4);
}

uint64_t CodableRawRepresentable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t JSONCodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t (*ProxyCodable.wrappedValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ProxyCodable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t ProxyCodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t ProxyCodable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t ProxyCodable.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v11[24];
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = &v11[-v7 - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v4, v3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t ProxyCodable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t AssociatedTypeWitness;
  _QWORD v36[4];
  uint64_t v37;

  v30 = a4;
  v32 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v31 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v33 = (char *)&v25 - v10;
  v34 = a2;
  v37 = a3;
  v12 = type metadata accessor for ProxyCodable(0, a2, a3, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v4)
  {
    v24 = (uint64_t)a1;
  }
  else
  {
    v28 = v12;
    v29 = a1;
    v25 = v15;
    v26 = v13;
    v27 = v9;
    v16 = v31;
    v17 = v32;
    __swift_project_boxed_opaque_existential_1(v36, v36[3]);
    v18 = v34;
    v19 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    v20 = v33;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v22 = v16;
    (*(void (**)(char *, uint64_t))(v37 + 40))(v20, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v19);
    v23 = v25;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v25, v22, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v30, v23, v28);
    v24 = (uint64_t)v29;
  }
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t type metadata accessor for ProxyCodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ProxyCodable);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProxyCodable<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ProxyCodable.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProxyCodable<A>(_QWORD *a1, uint64_t a2)
{
  return ProxyCodable.encode(to:)(a1, a2);
}

uint64_t static ProxyCodable<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ProxyCodable<A>()
{
  return static ProxyCodable<>.== infix(_:_:)();
}

uint64_t ProxyCodable<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> ProxyCodable<A>()
{
  return ProxyCodable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))ProxyCodable<>.hash(into:));
}

uint64_t Optional<A>.codingProxy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v6, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  v8 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a2, v6, v8);
}

uint64_t CodableOptional.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a3, a1, v5);
}

uint64_t protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for CodableOptional(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableOptional<A>, v7);
  return static CodableByProxy<>.unwrap(codingProxy:)(a1, a2, a3, v8);
}

uint64_t RawRepresentable<>.codingProxy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t RawRepresentableProxy.init(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t RawRepresentableProxy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return RawRepresentableProxy.init(from:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, _QWORD *, double))type metadata accessor for RawRepresentableProxy, a6);
}

void type metadata accessor for RawRepresentableProxy()
{
  JUMPOUT(0x23B7C9B5CLL);
}

unint64_t lazy protocol witness table accessor for type Error and conformance Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Error, &unk_25064B328);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Error, &unk_25064B328);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Error, &unk_25064B298);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

uint64_t RawRepresentableProxy.encode(to:)(_QWORD *a1)
{
  return RawRepresentableProxy.encode(to:)(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = &v7[-v3 - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  dispatch thunk of RawRepresentable.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v4, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RawRepresentableProxy<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return RawRepresentableProxy.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RawRepresentableProxy<A>(_QWORD *a1)
{
  return RawRepresentableProxy.encode(to:)(a1);
}

id protocol witness for CodableByProxy.codingProxy.getter in conformance NSAttributedStringKey@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

id protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance NSAttributedStringKey@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

uint64_t Array<A>.codingProxy.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[8];

  v9[7] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[2] = a3;
  v9[3] = swift_getKeyPath();
  v3 = type metadata accessor for Array();
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v3);
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in Array<A>.codingProxy.getter, (uint64_t)v9, v3, AssociatedTypeWitness, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  swift_release();
  return v7;
}

uint64_t sub_234B8370C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 32))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_234B8373C()
{
  return 16;
}

__n128 sub_234B83748(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for implicit closure #1 in Array<A>.codingProxy.getter()
{
  return swift_getAtKeyPath();
}

uint64_t static Array<A>.unwrap(codingProxy:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Array();
  v5 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v4);
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Array<A>.unwrap(codingProxy:), (uint64_t)v8, v4, a2, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
}

uint64_t protocol witness for CodableByProxy.codingProxy.getter in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;

  result = Array<A>.codingProxy.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
  *a3 = result;
  return result;
}

uint64_t protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance <A> [A]@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = static Array<A>.unwrap(codingProxy:)(*a1, *(char **)(a2 + 16), *(_QWORD *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t JSONCodable.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t (*JSONCodable.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t JSONCodable.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  id v12[6];

  v12[5] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v2);
  v3 = (void *)objc_opt_self();
  v12[0] = 0;
  v4 = objc_msgSend(v3, sel_dataWithJSONObject_options_error_, _bridgeAnythingToObjectiveC<A>(_:)(), 0, v12);
  swift_unknownObjectRelease();
  v5 = v12[0];
  if (v4)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    static String.Encoding.utf8.getter();
    result = String.init(data:encoding:)();
    if (v10)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Encoder.singleValueContainer()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, (uint64_t)v12[3]);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      outlined consume of Data._Representation(v6, v8);
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v11 = v5;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  return result;
}

uint64_t JSONCodable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  Class isa;
  id v24;
  id v25;
  char *v26;
  char v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50[4];
  _BYTE v51[32];
  _QWORD v52[7];

  v46 = a3;
  v52[5] = *MEMORY[0x24BDAC8D0];
  v42 = type metadata accessor for Optional();
  v41 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v39 - v5;
  v43 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding();
  v47 = *(_QWORD *)(v8 - 8);
  v48 = (_QWORD *)v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for JSONCodable(0, a2, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17 = v49;
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v17)
  {
    v40 = v16;
    v49 = v14;
    __swift_project_boxed_opaque_existential_1(v52, v52[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v39 = 0;
    static String.Encoding.utf8.getter();
    v19 = String.data(using:allowLossyConversion:)();
    v21 = v20;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, _QWORD *))(v47 + 8))(v10, v48);
    if (v21 >> 60 == 15)
    {
      __break(1u);
      return result;
    }
    v22 = (void *)objc_opt_self();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v50[0] = 0;
    v24 = objc_msgSend(v22, sel_JSONObjectWithData_options_error_, isa, 0, v50);

    v25 = v50[0];
    if (v24)
    {
      v48 = a1;
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with copy of Any((uint64_t)v51, (uint64_t)v50);
      v26 = v44;
      v27 = swift_dynamicCast();
      v28 = v43;
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
      if ((v27 & 1) != 0)
      {
        v29(v26, 0, 1, a2);
        outlined consume of Data?(v19, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        v30 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
        v31 = v45;
        v30(v45, v26, a2);
        v32 = v46;
LABEL_14:
        v38 = v40;
        v30(v40, v31, a2);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v32, v38, v13);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      }
      v47 = v21;
      v29(v26, 1, 1, a2);
      v31 = v45;
      v34 = v39;
      closure #1 in implicit closure #1 in JSONCodable.init(from:)(a2, v35, v36, v37);
      v32 = v46;
      v39 = v34;
      if (!v34)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        outlined consume of Data?(v19, v47);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v42);
        v30 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
        goto LABEL_14;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      outlined consume of Data?(v19, v47);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v42);
    }
    else
    {
      v33 = v25;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      outlined consume of Data?(v19, v21);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t closure #1 in implicit closure #1 in JSONCodable.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONCodable.Error(0, a1, a3, a4);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for JSONCodable<A>.Error, v4);
  swift_allocError();
  return swift_willThrow();
}

uint64_t protocol witness for Decodable.init(from:) in conformance JSONCodable<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return JSONCodable.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JSONCodable<A>(_QWORD *a1)
{
  return JSONCodable.encode(to:)(a1);
}

uint64_t ProxyCodable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CodableRawRepresentable.wrappedValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableRawRepresentable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return RawRepresentableProxy.init(from:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, _QWORD *, double))type metadata accessor for CodableRawRepresentable, a6);
}

uint64_t RawRepresentableProxy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, _QWORD *, double)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD v45[3];
  uint64_t v46;
  _QWORD *v47;

  v37 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v44 = (char *)&v32 - v13;
  v40 = type metadata accessor for Optional();
  v36 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v39 = (char *)&v32 - v14;
  v38 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45[0] = a2;
  v45[1] = a3;
  v42 = a3;
  v43 = a4;
  v45[2] = a4;
  v46 = a5;
  v19 = a6(0, v45, v16);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v32 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v23 = v47;
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v23)
  {
    v32 = v22;
    v33 = v20;
    v34 = v19;
    v35 = v18;
    v47 = a1;
    v24 = v39;
    v25 = v40;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    dispatch thunk of RawRepresentable.init(rawValue:)();
    v26 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v24, 1, a2) != 1)
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v30 = v35;
      v29(v35, v24, a2);
      v31 = v32;
      v29(v32, v30, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v37, v31, v34);
      v27 = (uint64_t)v47;
      return __swift_destroy_boxed_opaque_existential_1(v27);
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v25);
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    a1 = v47;
  }
  v27 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t CodableRawRepresentable.encode(to:)(_QWORD *a1)
{
  return RawRepresentableProxy.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableRawRepresentable<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CodableRawRepresentable.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t static CodableRawRepresentable<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> CodableRawRepresentable<A>()
{
  return static CodableRawRepresentable<>.== infix(_:_:)();
}

Swift::Int ProxyCodable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> CodableRawRepresentable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))CodableRawRepresentable<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v6;
  _BYTE v8[72];

  v6 = *(_QWORD *)(a3 - 8);
  Hasher.init(_seed:)();
  a4(v8, a2, v6);
  return Hasher._finalize()();
}

uint64_t CodableOptional.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CodableOptional.base.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*CodableOptional.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableOptional.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableOptional<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CodableOptional.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CodableOptional<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableOptional<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableOptional<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableOptional<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableOptional<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t CodableOptional.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v29 = (char *)&v26 - v6;
  v7 = type metadata accessor for Optional();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v26 - v8;
  v32 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v27 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v4;
  v13 = type metadata accessor for CodableOptional.CodingKeys(255, v3, v4, v12);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableOptional<A>.CodingKeys, v13);
  v37 = type metadata accessor for KeyedEncodingContainer();
  v14 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v16 = (char *)&v26 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v36 = v16;
  v18 = v32;
  v17 = v33;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v19 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v9, v35, v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v36, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v9, v19);
  }
  else
  {
    v35 = v14;
    v21 = v27;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v9, v3);
    v22 = v29;
    (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v3, v28);
    v23 = v31;
    swift_getAssociatedConformanceWitness();
    v24 = v36;
    v25 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v23);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v24, v25);
  }
}

uint64_t CodableOptional.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v36 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = type metadata accessor for Optional();
  v33 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v32 - v7;
  v8 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)&v32 - v9;
  v11 = type metadata accessor for CodableOptional.CodingKeys(255, a2, a3, v10);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableOptional<A>.CodingKeys, v11);
  v42 = type metadata accessor for KeyedDecodingContainer();
  v12 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v14 = (char *)&v32 - v13;
  v39 = a3;
  v16 = type metadata accessor for CodableOptional(0, a2, a3, v15);
  v44 = *(_QWORD *)(v16 - 8);
  v45 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v32 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 56))((char *)&v32 - v18, 1, 1, a2, v17);
  v20 = a1[3];
  v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v21 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v19, v45);
  }
  else
  {
    v22 = v12;
    v23 = (uint64_t)v37;
    v24 = v38;
    v25 = v39;
    swift_getAssociatedConformanceWitness();
    v26 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v43 = &v32;
    MEMORY[0x24BDAC7A8](v26);
    *(&v32 - 2) = a2;
    *(&v32 - 1) = v25;
    v27 = v41;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in CodableOptional.init(from:), (uint64_t)(&v32 - 4), MEMORY[0x24BEE4078], a2, v28, v23);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v24);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v42);
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 40))(v19, v23, v35);
    v30 = v44;
    v29 = v45;
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v36, v19, v45);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v19, v29);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableOptional<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CodableOptional.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableOptional<A>(_QWORD *a1, uint64_t a2)
{
  return CodableOptional.encode(to:)(a1, a2);
}

uint64_t CodableNSAttributes.wrappedValue.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CodableNSAttributes.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CodableNSAttributes.wrappedValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableNSAttributes.projectedValue.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

SwiftUI::CodableNSAttributes __swiftcall CodableNSAttributes.init(_:)(SwiftUI::CodableNSAttributes result)
{
  SwiftUI::CodableNSAttributes *v1;

  v1->wrappedValue._rawValue = result.wrappedValue._rawValue;
  return result;
}

SwiftUI::CodableNSAttributes __swiftcall CodableNSAttributes.init(wrappedValue:)(SwiftUI::CodableNSAttributes wrappedValue)
{
  SwiftUI::CodableNSAttributes *v1;

  v1->wrappedValue._rawValue = wrappedValue.wrappedValue._rawValue;
  return wrappedValue;
}

void CodableNSAttributes.encode(to:)(uint64_t a1)
{
  id v2;
  void *v3;
  Class isa;
  id v5;

  v2 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  swift_bridgeObjectRetain();
  v3 = (void *)MEMORY[0x23B7C5DAC](32, 0xE100000000000000);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v2, sel_initWithString_attributes_, v3, isa);

  CodableAttributedString.encode(to:)(a1);
}

void CodableNSAttributes.init(from:)(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  CodableAttributedString.init(from:)(a1, (id **)&v10);
  if (!v2)
  {
    v4 = v10;
    if ((uint64_t)objc_msgSend(v10, sel_length) <= 0)
    {
      v7 = type metadata accessor for DecodingError();
      swift_allocError();
      v9 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x24BEE26D8], v7);
      swift_willThrow();

    }
    else
    {
      v5 = objc_msgSend(v4, sel_attributesAtIndex_effectiveRange_, 0, 0);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *a2 = v6;
    }
  }
}

uint64_t areEqual #1 <A>(lhs:rhs:) in static CodableNSAttributes.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v15;
  _BYTE v17[32];

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-v7];
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v17);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a3);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v12, v8, a3);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, a3);
  }
  else
  {
    v14(v8, 1, 1, a3);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t CodableNSAttributes.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  __int128 v18[2];
  uint64_t v19;
  char v20[32];
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  __int128 v26;

  v15 = *v0 + 64;
  v1 = 1 << *(_BYTE *)(*v0 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(*v0 + 64);
  v16 = (unint64_t)(v1 + 63) >> 6;
  v17 = *v0;
  result = swift_bridgeObjectRetain();
  v5 = 0;
  if (!v3)
    goto LABEL_8;
LABEL_6:
  v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v7 = v6 | (v5 << 6);
  while (2)
  {
    v8 = *(_QWORD *)(v17 + 56);
    *(_QWORD *)&v22 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * v7);
    v9 = (void *)v22;
    outlined init with copy of Any(v8 + 32 * v7, (uint64_t)&v22 + 8);
    v10 = v9;
    while (1)
    {
      outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)&v22, (uint64_t)&v25);
      v14 = v25;
      if (!v25)
        return swift_release();
      outlined init with take of Any(&v26, v21);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined init with copy of Any((uint64_t)v21, (uint64_t)v20);
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Hashable);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of ScrollStateRequest(v18, (uint64_t)&v22);
        __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
        dispatch thunk of Hashable.hash(into:)();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
        if (v3)
          goto LABEL_6;
      }
      else
      {
        v19 = 0;
        memset(v18, 0, sizeof(v18));

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        result = outlined destroy of AnyTrackedValue?((uint64_t)v18, &lazy cache variable for type metadata for Hashable?, &lazy cache variable for type metadata for Hashable);
        if (v3)
          goto LABEL_6;
      }
LABEL_8:
      v11 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v11 < v16)
      {
        v12 = *(_QWORD *)(v15 + 8 * v11);
        if (v12)
          goto LABEL_11;
        v13 = v5 + 2;
        ++v5;
        if (v11 + 1 < v16)
        {
          v12 = *(_QWORD *)(v15 + 8 * v13);
          if (v12)
            goto LABEL_14;
          v5 = v11 + 1;
          if (v11 + 2 < v16)
          {
            v12 = *(_QWORD *)(v15 + 8 * (v11 + 2));
            if (v12)
            {
              v11 += 2;
              goto LABEL_11;
            }
            v13 = v11 + 3;
            v5 = v11 + 2;
            if (v11 + 3 < v16)
              break;
          }
        }
      }
LABEL_25:
      v3 = 0;
      v24 = 0;
      v22 = 0u;
      v23 = 0u;
    }
    v12 = *(_QWORD *)(v15 + 8 * v13);
    if (v12)
    {
LABEL_14:
      v11 = v13;
LABEL_11:
      v3 = (v12 - 1) & v12;
      v7 = __clz(__rbit64(v12)) + (v11 << 6);
      v5 = v11;
      continue;
    }
    break;
  }
  while (1)
  {
    v11 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v11 >= v16)
    {
      v5 = v16 - 1;
      goto LABEL_25;
    }
    v12 = *(_QWORD *)(v15 + 8 * v11);
    ++v13;
    if (v12)
      goto LABEL_11;
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::Int CodableNSAttributes.hashValue.getter()
{
  Hasher.init(_seed:)();
  CodableNSAttributes.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableNSAttributes()
{
  Hasher.init(_seed:)();
  CodableNSAttributes.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableNSAttributes()
{
  Hasher.init(_seed:)();
  CodableNSAttributes.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableNSAttributes@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableNSAttributes(_QWORD *a1)
{
  uint64_t *v1;

  return specialized CodableByProtobuf.encode(to:)(a1, *v1);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableNSAttributes(uint64_t a1)
{
  CodableNSAttributes.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableNSAttributes(id *a1@<X0>, uint64_t *a2@<X8>)
{
  CodableNSAttributes.init(from:)(a1, a2);
}

__n128 protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance UnitPoint@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance Font.Weight@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t type metadata accessor for JSONCodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONCodable);
}

void type metadata accessor for CodableRawRepresentable()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for CodableOptional.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableOptional.CodingKeys);
}

uint64_t type metadata accessor for CodableOptional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableOptional);
}

uint64_t partial apply for closure #1 in CodableOptional.init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 40))();
}

uint64_t specialized static CodableNSAttributes.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  int64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int64_t v34;
  __int128 v35[2];
  uint64_t v36;
  char v37[32];
  _OWORD v38[2];
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  v2 = *a1;
  v3 = *a2;
  if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)(*a2 + 16))
    return 0;
  v33 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v34 = (unint64_t)(v4 + 63) >> 6;
  v7 = &v44;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = &lazy cache variable for type metadata for Equatable;
  v11 = MEMORY[0x24BEE0988];
  v12 = MEMORY[0x24BEE4AD8] + 8;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  v13 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v14 = v13 | (v9 << 6);
LABEL_8:
  v15 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)&v40 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
  v16 = (void *)v40;
  outlined init with copy of Any(v15 + 32 * v14, (uint64_t)&v40 + 8);
  v17 = v16;
  while (1)
  {
    outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)&v40, (uint64_t)&v43);
    v21 = v43;
    if (!v43)
    {
      swift_release();
      return 1;
    }
    outlined init with take of Any(v7, v39);
    if (!*(_QWORD *)(v3 + 16))
      break;
    v22 = v21;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    if ((v24 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v23, (uint64_t)&v40);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }

    if (!*((_QWORD *)&v41 + 1))
      goto LABEL_39;
    outlined init with take of Any(&v40, v38);
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v37);
    type metadata accessor for ScrollStateRequest(0, v10);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v25 = v2;
      v26 = v9;
      v27 = v7;
      v28 = v12;
      v29 = v11;
      v30 = v10;
      outlined init with take of ScrollStateRequest(v35, (uint64_t)&v40);
      v31 = *((_QWORD *)&v41 + 1);
      v32 = __swift_project_boxed_opaque_existential_1(&v40, *((uint64_t *)&v41 + 1));
      LOBYTE(v31) = areEqual #1 <A>(lhs:rhs:) in static CodableNSAttributes.== infix(_:_:)((uint64_t)v32, (uint64_t)v38, v31);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      if ((v31 & 1) == 0)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
        return 0;
      }
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
      v10 = v30;
      v11 = v29;
      v12 = v28;
      v7 = v27;
      v9 = v26;
      v2 = v25;
      if (v6)
        goto LABEL_7;
    }
    else
    {
      v36 = 0;
      memset(v35, 0, sizeof(v35));

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      result = outlined destroy of AnyTrackedValue?((uint64_t)v35, &lazy cache variable for type metadata for Equatable?, v10);
      if (v6)
        goto LABEL_7;
    }
LABEL_9:
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v18 < v34)
    {
      v19 = *(_QWORD *)(v33 + 8 * v18);
      if (v19)
        goto LABEL_12;
      v20 = v9 + 2;
      ++v9;
      if (v18 + 1 < v34)
      {
        v19 = *(_QWORD *)(v33 + 8 * v20);
        if (v19)
          goto LABEL_15;
        v9 = v18 + 1;
        if (v18 + 2 < v34)
        {
          v19 = *(_QWORD *)(v33 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_12;
          }
          v20 = v18 + 3;
          v9 = v18 + 2;
          if (v18 + 3 < v34)
          {
            v19 = *(_QWORD *)(v33 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v18 = v20 + 1;
                if (__OFADD__(v20, 1))
                  break;
                if (v18 >= v34)
                {
                  v9 = v34 - 1;
                  goto LABEL_26;
                }
                v19 = *(_QWORD *)(v33 + 8 * v18);
                ++v20;
                if (v19)
                  goto LABEL_12;
              }
LABEL_43:
              __break(1u);
              return result;
            }
LABEL_15:
            v18 = v20;
LABEL_12:
            v6 = (v19 - 1) & v19;
            v14 = __clz(__rbit64(v19)) + (v18 << 6);
            v9 = v18;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    v6 = 0;
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
  }
  v40 = 0u;
  v41 = 0u;
LABEL_39:

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  swift_release();
  outlined destroy of Any?((uint64_t)&v40);
  return 0;
}

uint64_t outlined init with take of (key: NSAttributedStringKey, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (key: NSAttributedStringKey, value: Any)?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in <> ProxyCodable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> ProxyCodable<A>, a1, &v4);
}

void associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> A?()
{
  JUMPOUT(0x23B7C9C04);
}

void associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in <A> A?()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for RawRepresentableProxy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RawRepresentableProxy<A>, (uint64_t)&protocol conformance descriptor for RawRepresentableProxy<A>);
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RawRepresentableProxy<NSAttributedStringKey> and conformance RawRepresentableProxy<A>, (uint64_t (*)(uint64_t))type metadata accessor for RawRepresentableProxy<NSAttributedStringKey>, (uint64_t)&protocol conformance descriptor for RawRepresentableProxy<A>);
}

uint64_t type metadata accessor for RawRepresentableProxy<NSAttributedStringKey>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for RawRepresentableProxy<NSAttributedStringKey>;
  if (!lazy cache variable for type metadata for RawRepresentableProxy<NSAttributedStringKey>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    type metadata accessor for RawRepresentableProxy();
  }
  return result;
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RawRepresentableProxy<NSAttributedStringKey> and conformance RawRepresentableProxy<A>, (uint64_t (*)(uint64_t))type metadata accessor for RawRepresentableProxy<NSAttributedStringKey>, (uint64_t)&protocol conformance descriptor for RawRepresentableProxy<A>);
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> [A](a1, a2, a3, (uint64_t)&associated conformance descriptor for CodableByProxy.CodableByProxy.CodingProxy: Decodable, MEMORY[0x24BEE12D0]);
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> [A](a1, a2, a3, (uint64_t)&associated conformance descriptor for CodableByProxy.CodableByProxy.CodingProxy: Encodable, MEMORY[0x24BEE12A0]);
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x23B7C9C04](a5, a1, &AssociatedConformanceWitness);
}

uint64_t base witness table accessor for Equatable in <> CodableRawRepresentable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> CodableRawRepresentable<A>, a1, &v4);
}

uint64_t instantiation function for generic protocol witness table for CodableOptional<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CodableOptional<A>, (uint64_t)&protocol conformance descriptor for CodableOptional<A>);
}

uint64_t instantiation function for generic protocol witness table for RawRepresentableProxy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x23B7C9C04](a4);
  result = MEMORY[0x23B7C9C04](a5, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableNSAttributes(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
  result = lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes;
  if (!lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableNSAttributes, &type metadata for CodableNSAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes;
  if (!lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableNSAttributes, &type metadata for CodableNSAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes;
  if (!lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableNSAttributes, &type metadata for CodableNSAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes);
  }
  return result;
}

uint64_t dispatch thunk of static CodableByProxy.unwrap(codingProxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableProxy.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata completion function for JSONCodable()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for RawRepresentableProxy()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ProxyCodable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B85E8C + 4 * byte_235289050[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ProxyCodable(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for CodableOptional()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CodableOptional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for CodableOptional(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for CodableOptional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for CodableOptional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for CodableOptional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for CodableOptional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableOptional(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for CodableOptional(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_234B86804()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234B8680C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

ValueMetadata *type metadata accessor for CodableNSAttributes()
{
  return &type metadata for CodableNSAttributes;
}

void *type metadata accessor for Error()
{
  return &unk_25064B328;
}

{
  return &unk_25064B298;
}

void base witness table accessor for Equatable in CodableOptional<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in CodableOptional<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in CodableOptional<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for Any?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Any?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

uint64_t type metadata accessor for JSONCodable.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONCodable.Error);
}

uint64_t storeEnumTagSinglePayload for CodableOptional.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234B86970 + 4 * byte_23528906C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234B86990 + 4 * byte_235289071[v4]))();
}

_BYTE *sub_234B86970(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234B86990(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234B86998(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234B869A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234B869A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234B869B0(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in JSONCodable<A>.Error()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in static Array<A>.unwrap(codingProxy:)()
{
  return partial apply for closure #1 in CodableOptional.init(from:)();
}

uint64_t ImagePaint.init(image:sourceRect:scale:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  return result;
}

uint64_t ImagePaint.image.getter()
{
  return swift_retain();
}

uint64_t ImagePaint.image.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*ImagePaint.image.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ImagePaint.sourceRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void ImagePaint.sourceRect.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*ImagePaint.sourceRect.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ImagePaint.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void ImagePaint.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*ImagePaint.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id ImagePaint._Paint.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  v5 = *(_BYTE *)(v1 + 60);
  v6 = *(_BYTE *)(v1 + 96);
  v7 = *(_BYTE *)(v1 + 97);
  v8 = *(_WORD *)(v1 + 98);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v9 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(v1 + 44);
  *(_BYTE *)(a1 + 60) = v5;
  v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 97) = v7;
  *(_WORD *)(a1 + 98) = v8;
  return outlined copy of GraphicsImage.Contents?(v2, v9);
}

__n128 ImagePaint._Paint.image.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __n128 result;
  __int16 v13;
  char v14;
  __n128 v15;
  __int128 v16;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[4];
  v5 = *((_BYTE *)a1 + 40);
  v6 = *(uint64_t *)((char *)a1 + 44);
  v7 = *(uint64_t *)((char *)a1 + 52);
  v8 = *((_BYTE *)a1 + 60);
  v15 = *((__n128 *)a1 + 4);
  v16 = *((_OWORD *)a1 + 1);
  v9 = a1[10];
  v10 = a1[11];
  v11 = *((_BYTE *)a1 + 96);
  v13 = *((_WORD *)a1 + 49);
  v14 = *((_BYTE *)a1 + 97);
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(_BYTE *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  *(_OWORD *)(v1 + 16) = v16;
  *(_QWORD *)(v1 + 32) = v4;
  *(_BYTE *)(v1 + 40) = v5;
  *(_QWORD *)(v1 + 44) = v6;
  *(_QWORD *)(v1 + 52) = v7;
  *(_BYTE *)(v1 + 60) = v8;
  result = v15;
  *(__n128 *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 80) = v9;
  *(_QWORD *)(v1 + 88) = v10;
  *(_BYTE *)(v1 + 96) = v11;
  *(_BYTE *)(v1 + 97) = v14;
  *(_WORD *)(v1 + 98) = v13;
  return result;
}

uint64_t (*ImagePaint._Paint.image.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ImagePaint._Paint.sourceRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

void ImagePaint._Paint.sourceRect.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[13] = a1;
  v4[14] = a2;
  v4[15] = a3;
  v4[16] = a4;
}

uint64_t (*ImagePaint._Paint.sourceRect.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ImagePaint._Paint.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

void ImagePaint._Paint.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 136) = a1;
}

uint64_t (*ImagePaint._Paint.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ImagePaint._Paint.init(image:sourceRect:scale:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  __int16 v13;
  __int128 v14;

  v7 = *(_BYTE *)(result + 8);
  v8 = *(_QWORD *)(result + 32);
  v9 = *(_BYTE *)(result + 40);
  v11 = *(_BYTE *)(result + 96);
  v12 = *(_BYTE *)(result + 97);
  v13 = *(_WORD *)(result + 98);
  v10 = *(_BYTE *)(result + 60);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v7;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
  *(_QWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(result + 44);
  *(_BYTE *)(a2 + 60) = v10;
  v14 = *(_OWORD *)(result + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 64);
  *(_OWORD *)(a2 + 80) = v14;
  *(_BYTE *)(a2 + 96) = v11;
  *(_BYTE *)(a2 + 97) = v12;
  *(_WORD *)(a2 + 98) = v13;
  *(double *)(a2 + 104) = a3;
  *(double *)(a2 + 112) = a4;
  *(double *)(a2 + 120) = a5;
  *(double *)(a2 + 128) = a6;
  *(double *)(a2 + 136) = a7;
  return result;
}

void static ImagePaint._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 6;
  *(_BYTE *)(a1 + 8) = 0;
}

void ImagePaint._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CGFloat v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD v44[5];
  char v45;
  _BYTE v46[168];
  void *v47;
  char v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  CGFloat v68;
  double v69;
  uint64_t v70;
  _QWORD v71[5];
  _BYTE v72[48];
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;

  outlined init with take of CGRect?(a4, (uint64_t)v71);
  v8 = v71[0];
  v9 = v71[1];
  v40 = a2[1];
  v41 = *a2;
  v38 = a2[3];
  v39 = a2[2];
  v37 = a2[4];
  v36 = *((_BYTE *)a2 + 40);
  v10 = *(void **)v4;
  v11 = *(_BYTE *)(v4 + 8);
  v12 = *(double *)(v4 + 16);
  v13 = *(_QWORD *)(v4 + 24);
  v43 = *(_QWORD *)(v4 + 32);
  v14 = *(unsigned __int8 *)(v4 + 40);
  v15 = *(_QWORD *)(v4 + 44);
  v16 = *(_QWORD *)(v4 + 52);
  v17 = *(_BYTE *)(v4 + 60);
  v18 = *(_QWORD *)(v4 + 64);
  v32 = *(_QWORD *)(v4 + 80);
  v33 = *(_QWORD *)(v4 + 72);
  v31 = *(_QWORD *)(v4 + 88);
  v29 = *(_BYTE *)(v4 + 97);
  v30 = *(_BYTE *)(v4 + 96);
  v27 = *(_BYTE *)(v4 + 99);
  v28 = *(_BYTE *)(v4 + 98);
  v19 = *(double *)(v4 + 104);
  v20 = *(double *)(v4 + 112);
  v22 = *(double *)(v4 + 120);
  v21 = *(double *)(v4 + 128);
  v34 = *(_QWORD *)(v4 + 136);
  outlined init with take of CGRect?(a4, (uint64_t)v72);
  if (v72[32] == 1)
  {
    Path.boundingRect.getter();
    v8 = v23;
    v9 = v24;
  }
  if (v12 != 0.0)
    __asm { BR              X9 }
  v35 = v12;
  v25 = v8;
  v73.origin.x = v19;
  v73.origin.y = v20;
  v73.size.width = v22;
  v73.size.height = v21;
  if (!CGRectIsNull(v73))
  {
    v74.origin.x = v19;
    v74.origin.y = v20;
    v74.size.width = v22;
    v74.size.height = v21;
    if (!CGRectIsInfinite(v74))
    {
      v75.origin.x = v19;
      v75.origin.y = v20;
      v75.size.width = v22;
      v75.size.height = v21;
      v26 = 1.0 * CGRectGetWidth(v75);
      v76.origin.x = v19;
      v76.origin.y = v20;
      v76.size.width = v22;
      v76.size.height = v21;
      v21 = 1.0 * CGRectGetHeight(v76);
      v20 = v20 * 1.0;
      v19 = v19 * 1.0;
      v22 = v26;
    }
  }
  v46[164] = v17;
  v47 = v10;
  v48 = v11;
  v49 = v35;
  v50 = v13;
  v51 = v43;
  v52 = v14;
  v53 = v15;
  v54 = v16;
  v55 = v17;
  v56 = v18;
  v57 = v33;
  v58 = v32;
  v59 = v31;
  v60 = v30;
  v61 = v29;
  v62 = v28;
  v63 = v27;
  v64 = v25;
  v65 = v9;
  v66 = v19;
  v67 = v20;
  v68 = v22;
  v69 = v21;
  v70 = v34;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi6_((uint64_t)&v47);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v47, (uint64_t)v46);
  v44[0] = v41;
  v44[1] = v40;
  v44[2] = v39;
  v44[3] = v38;
  v44[4] = v37;
  v45 = v36;
  outlined copy of GraphicsImage.Contents?(v10, v11);
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v46, (uint64_t)v44, a3);
  outlined consume of GraphicsImage.Contents?(v10, v11);
}

uint64_t ImagePaint._Paint.isClear.getter()
{
  return 0;
}

uint64_t ImagePaint._Paint.isOpaque.getter()
{
  return 0;
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance ImagePaint._Paint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 6;
  *(_BYTE *)(a1 + 8) = 0;
}

double ImagePaint.resolvePaint(in:)@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double *v21;
  id v22;
  char v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  CGFloat v44;
  CGFloat v45;
  double result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  double *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63[2];
  id v64;
  char v65;
  double v66;
  double v67;
  double v68;
  unsigned __int8 v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;

  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v49 - v5;
  v7 = (int *)type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v52 = (uint64_t)&v49 - v11;
  v13 = *a1;
  v12 = a1[1];
  v14 = type metadata accessor for Text.Style(0);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v6, 1, 1, v14);
  v16 = *MEMORY[0x24BE096C0];
  v9[2] = 0;
  v17 = (uint64_t)v9 + v7[6];
  v15((char *)v17, 1, 1, v14);
  v18 = v7[7];
  *(_DWORD *)((char *)v9 + v18) = v16;
  *((_BYTE *)v9 + v7[8]) = 8;
  *((_BYTE *)v9 + v7[9]) = 3;
  *((_BYTE *)v9 + v7[10]) = 1;
  *(double *)v9 = v13;
  *((double *)v9 + 1) = v12;
  v51 = v12;
  swift_retain();
  v19 = v13;
  swift_retain();
  outlined assign with take of Text.Style?((uint64_t)v6, v17);
  *(_DWORD *)((char *)v9 + v18) = v16;
  v20 = v52;
  v21 = v53;
  outlined init with take of ImageResolutionContext((uint64_t)v9, v52);
  (*(void (**)(id *__return_ptr, uint64_t))(**(_QWORD **)v21 + 80))(&v64, v20);
  v22 = v64;
  v23 = v65;
  v24 = v66;
  v25 = v67;
  v26 = v68;
  v27 = v69;
  v28 = v70;
  v29 = v71;
  v30 = v72;
  v61 = v73;
  v60 = v74;
  v59 = v75;
  v58 = v76;
  v57 = v77;
  v56 = v78;
  v55 = v79;
  v54 = v80;
  outlined copy of GraphicsImage.Contents?(v64, v65);
  outlined release of Image.Resolved((uint64_t)&v64);
  outlined copy of GraphicsImage.Contents?(v22, v23);
  outlined copy of GraphicsImage.Contents?(v22, v23);
  if ((v30 & 1) == 0)
  {
    if (one-time initialization token for foreground != -1)
      swift_once();
    v63[0] = v19;
    v63[1] = v51;
    *(float *)&v31 = (*(float (**)(double *))(*(_QWORD *)static Color.foreground + 104))(v63);
    v28 = v31 | ((unint64_t)v32 << 32);
    v29 = v33 | ((unint64_t)v34 << 32);
  }
  v62 = v26;
  if (v24 == 0.0)
  {
    v35 = v24;
    v36 = v25;
    outlined consume of GraphicsImage.Contents?(v22, v23);
    v37 = 0.0;
    v38 = 0.0;
  }
  else
  {
    outlined consume of GraphicsImage.Contents?(v22, v23);
    if (v27 >= 4)
      v39 = v25;
    else
      v39 = v26;
    v36 = v25;
    if (v27 >= 4)
      v40 = v26;
    else
      v40 = v25;
    v35 = v24;
    v37 = 1.0 / v24 * v40;
    v38 = 1.0 / v24 * v39;
  }
  v41 = v21[1];
  v42 = v21[2];
  v44 = v21[3];
  v43 = v21[4];
  v81.origin.x = v41;
  v81.origin.y = v42;
  v81.size.width = v44;
  v81.size.height = v43;
  if (!CGRectIsNull(v81))
  {
    v82.origin.x = v41;
    v82.origin.y = v42;
    v82.size.width = v44;
    v82.size.height = v43;
    if (!CGRectIsInfinite(v82))
    {
      v51 = v37 * v41;
      v50 = v38 * v42;
      v83.origin.x = v41;
      v83.origin.y = v42;
      v83.size.width = v44;
      v83.size.height = v43;
      v45 = v37 * CGRectGetWidth(v83);
      v84.origin.x = v41;
      v84.origin.y = v42;
      v84.size.width = v44;
      v84.size.height = v43;
      v43 = v38 * CGRectGetHeight(v84);
      v41 = v51;
      v42 = v50;
      v44 = v45;
    }
  }
  outlined destroy of ImageResolutionContext(v20);
  outlined consume of GraphicsImage.Contents?(v22, v23);
  result = v21[5];
  *(_QWORD *)a2 = v22;
  *(_BYTE *)(a2 + 8) = v23;
  *(double *)(a2 + 16) = v35;
  *(double *)(a2 + 24) = v36;
  *(double *)(a2 + 32) = v62;
  *(_BYTE *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 44) = v28;
  *(_QWORD *)(a2 + 52) = v29;
  *(_BYTE *)(a2 + 60) = v30;
  v47 = v60;
  *(_QWORD *)(a2 + 64) = v61;
  *(_QWORD *)(a2 + 72) = v47;
  v48 = v58;
  *(_QWORD *)(a2 + 80) = v59;
  *(_QWORD *)(a2 + 88) = v48;
  *(_BYTE *)(a2 + 96) = v57;
  *(_BYTE *)(a2 + 97) = v56;
  *(_BYTE *)(a2 + 98) = v55;
  *(_BYTE *)(a2 + 99) = v54;
  *(double *)(a2 + 104) = v41;
  *(double *)(a2 + 112) = v42;
  *(CGFloat *)(a2 + 120) = v44;
  *(double *)(a2 + 128) = v43;
  *(double *)(a2 + 136) = result;
  return result;
}

void static ImagePaint._makeView<A>(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for ImagePaint, a4, (uint64_t)&protocol witness table for ImagePaint, a5);
}

int64_t ImagePaint._Paint.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int64_t result;
  double v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[6];
  int v19;
  CGRect v20;
  CGRect v21;

  v3 = v1;
  v5 = *(_OWORD *)(v3 + 80);
  v18[4] = *(_OWORD *)(v3 + 64);
  v18[5] = v5;
  v19 = *(_DWORD *)(v3 + 96);
  v6 = *(_OWORD *)(v3 + 16);
  v18[0] = *(_OWORD *)v3;
  v18[1] = v6;
  v7 = *(_OWORD *)(v3 + 48);
  v18[2] = *(_OWORD *)(v3 + 32);
  v18[3] = v7;
  v8 = *(double *)(v3 + 104);
  v9 = *(double *)(v3 + 112);
  v10 = *(double *)(v3 + 120);
  v11 = *(double *)(v3 + 128);
  v12 = *(double *)(v3 + 136);
  outlined retain of GraphicsImage((uint64_t)v18);
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = outlined release of GraphicsImage((uint64_t)v18);
  if (!v2)
  {
    v21.origin.x = 0.0;
    v21.origin.y = 0.0;
    v21.size.width = 0.0;
    v21.size.height = 0.0;
    v20.origin.x = v8;
    v20.origin.y = v9;
    v20.size.width = v10;
    v20.size.height = v11;
    result = CGRectEqualToRect(v20, v21);
    if ((result & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v8, v9, v10, v11);
    }
    if (v12 != 0.0)
    {
      v14 = fabs(v12);
      if (v14 >= 65536.0)
        v15 = 25;
      else
        v15 = 29;
      ProtobufEncoder.encodeVarint(_:)(v15);
      if (v14 >= 65536.0)
      {
        v17 = a1[1];
        result = v17 + 8;
        if (__OFADD__(v17, 8))
        {
          __break(1u);
        }
        else if (a1[2] >= result)
        {
          a1[1] = result;
          *(double *)(*a1 + v17) = v12;
          return result;
        }
        result = ProtobufEncoder.growBufferSlow(to:)(result);
        *(double *)result = v12;
        return result;
      }
      v16 = a1[1];
      result = v16 + 4;
      if (__OFADD__(v16, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v14 = v12;
        if (a1[2] >= result)
        {
          a1[1] = result;
          *(_DWORD *)(*a1 + v16) = LODWORD(v14);
          return result;
        }
      }
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)result = LODWORD(v14);
    }
  }
  return result;
}

void ImagePaint._Paint.init(from:)(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  double *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unsigned __int8 v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  char v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)a1[1];
  v6 = (unint64_t)a1[2];
  if (v5 < v6)
  {
    v51 = 0;
    v52 = 0;
    v53 = 0uLL;
    v54 = 0;
    v55 = 0uLL;
    v7 = 0;
    v49 = 0;
    v50 = 0;
    v47 = 0;
    v48 = 0;
    v8 = 512;
    v9 = 1.0;
    v45 = 0u;
    v46 = 0u;
    while (1)
    {
      v11 = (unint64_t)a1[3];
      if (!v11)
        goto LABEL_12;
      v12 = a1[4];
      if (v5 >= (unint64_t)v12)
        break;
LABEL_14:
      v13 = v11 >> 3;
      if (v11 >> 3 == 3)
      {
        v25 = v11 & 7;
        if (v25 == 5)
        {
          v36 = (float *)a1[1];
          if (v6 < (unint64_t)(v36 + 1))
            goto LABEL_72;
          v37 = *v36;
          a1[1] = v36 + 1;
          v9 = v37;
        }
        else
        {
          if (v25 == 2)
          {
            v38 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_73;
            if (v38 < 0)
              goto LABEL_85;
            v26 = (double *)a1[1];
            if (v6 < (unint64_t)v26 + v38)
              goto LABEL_72;
            a1[3] = (id)25;
            a1[4] = (char *)v26 + v38;
          }
          else
          {
            if (v25 != 1)
              goto LABEL_72;
            v26 = (double *)a1[1];
          }
          if (v6 < (unint64_t)(v26 + 1))
            goto LABEL_72;
          v9 = *v26;
          a1[1] = v26 + 1;
        }
      }
      else if (v13 == 2)
      {
        if ((v11 & 7) != 2)
          goto LABEL_72;
        v27 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v27[2] = v29 + 1;
        v27[v29 + 4] = v6;
        a1[5] = v27;
        v30 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_73;
        if (v30 < 0)
          goto LABEL_81;
        v31 = (unint64_t)a1[1] + v30;
        if (v6 < v31)
          goto LABEL_72;
        a1[2] = (id)v31;
        v57 = 0u;
        v58 = 0u;
        closure #1 in CGRect.init(from:)((unint64_t)&v57, a1, &v56);
        v32 = a1[5];
        if (!v32[2])
          goto LABEL_83;
        v45 = v58;
        v46 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v33 = v32[2];
          if (!v33)
            goto LABEL_71;
        }
        else
        {
          v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          v33 = v32[2];
          if (!v33)
          {
LABEL_71:
            __break(1u);
LABEL_72:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_73:
            outlined consume of VariableBlurStyle.Mask(v51, v52, v53, *((uint64_t *)&v53 + 1), v54, v55, *((uint64_t *)&v55 + 1), v7, v50, v49, v48, v47, v8, BYTE1(v8));
            return;
          }
        }
        v34 = v33 - 1;
        v35 = (void *)v32[v34 + 4];
        v32[2] = v34;
        a1[5] = v32;
        a1[2] = v35;
      }
      else if (v13 == 1)
      {
        if ((v11 & 7) != 2)
          goto LABEL_72;
        v14 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v16 = v14[2];
        v15 = v14[3];
        if (v16 >= v15 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
        v14[2] = v16 + 1;
        v14[v16 + 4] = v6;
        a1[5] = v14;
        v17 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_73;
        if (v17 < 0)
        {
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          __break(1u);
          v41 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
          v42 = v41[2];
          if (!v42)
          {
            __break(1u);
            v41 = a1[5];
            if (v41[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v42 = v41[2];
                if (v42)
                  goto LABEL_79;
LABEL_90:
                __break(1u);
              }
            }
            else
            {
              __break(1u);
            }
            v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
            v42 = v41[2];
            if (!v42)
              goto LABEL_90;
          }
LABEL_79:
          v43 = v42 - 1;
          v44 = (void *)v41[v43 + 4];
          v41[2] = v43;
          outlined consume of VariableBlurStyle.Mask(v51, v52, v53, *((uint64_t *)&v53 + 1), v54, v55, *((uint64_t *)&v55 + 1), v7, v50, v49, v48, v47, v8, BYTE1(v8));
          a1[5] = v41;
          a1[2] = v44;
          return;
        }
        v18 = (unint64_t)a1[1] + v17;
        if (v6 < v18)
          goto LABEL_72;
        a1[2] = (id)v18;
        GraphicsImage.init(from:)(a1, (uint64_t)&v57);
        v19 = a1[5];
        if (!v19[2])
          goto LABEL_82;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v20 = v19[2];
          if (!v20)
            goto LABEL_84;
        }
        else
        {
          v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          v20 = v19[2];
          if (!v20)
            goto LABEL_84;
        }
        v21 = v20 - 1;
        v22 = (void *)v19[v21 + 4];
        v19[2] = v21;
        outlined consume of VariableBlurStyle.Mask(v51, v52, v53, *((uint64_t *)&v53 + 1), v54, v55, *((uint64_t *)&v55 + 1), v7, v50, v49, v48, v47, v8, BYTE1(v8));
        a1[5] = v19;
        a1[2] = v22;
        v51 = (void *)v57;
        v52 = BYTE8(v57);
        v53 = v58;
        v54 = v59;
        v49 = v64;
        v50 = v63;
        v47 = v66;
        v48 = v65;
        *(_QWORD *)&v55 = v60 | ((_QWORD)v61 << 32);
        *((_QWORD *)&v55 + 1) = v61 >> 32;
        if (v62)
          v23 = 0x100000000;
        else
          v23 = 0;
        v7 = v23 & 0xFFFFFFFF00000000 | HIDWORD(v61);
        if (v68)
          v24 = 256;
        else
          v24 = 0;
        v8 = v24 | v67 | (v69 << 16) | (v70 << 24);
      }
      else
      {
        switch(v11 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_73;
            break;
          case 1uLL:
            v10 = (unint64_t)a1[1] + 8;
            if (v6 >= v10)
              goto LABEL_6;
            goto LABEL_72;
          case 2uLL:
            v39 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_73;
            if (v39 < 0)
              goto LABEL_86;
            v10 = (unint64_t)a1[1] + v39;
            if (v6 < v10)
              goto LABEL_72;
LABEL_6:
            a1[1] = (id)v10;
            break;
          case 5uLL:
            v10 = (unint64_t)a1[1] + 4;
            if (v6 < v10)
              goto LABEL_72;
            goto LABEL_6;
          default:
            goto LABEL_72;
        }
      }
      v5 = (unint64_t)a1[1];
      v6 = (unint64_t)a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if ((v8 & 0xFF00) == 0x200)
          goto LABEL_4;
        LOBYTE(v57) = BYTE4(v7) & 1;
        *(_QWORD *)a2 = v51;
        *(_BYTE *)(a2 + 8) = v52;
        *(_OWORD *)(a2 + 16) = v53;
        *((_QWORD *)&v40 + 1) = v7;
        *(_QWORD *)&v40 = *((_QWORD *)&v55 + 1);
        *(_QWORD *)(a2 + 32) = v54;
        *(_BYTE *)(a2 + 40) = v55;
        *(_QWORD *)(a2 + 44) = v55 >> 32;
        *(_QWORD *)(a2 + 52) = v40 >> 32;
        *(_BYTE *)(a2 + 60) = v57;
        *(_QWORD *)(a2 + 64) = v50;
        *(_QWORD *)(a2 + 72) = v49;
        *(_QWORD *)(a2 + 80) = v48;
        *(_QWORD *)(a2 + 88) = v47;
        *(_BYTE *)(a2 + 96) = v8;
        *(_BYTE *)(a2 + 97) = BYTE1(v8) & 1;
        *(_BYTE *)(a2 + 98) = BYTE2(v8);
        *(_BYTE *)(a2 + 99) = HIBYTE(v8);
        *(_OWORD *)(a2 + 104) = v46;
        *(_OWORD *)(a2 + 120) = v45;
        *(double *)(a2 + 136) = v9;
        return;
      }
    }
    if ((unint64_t)v12 < v5)
      goto LABEL_72;
    a1[3] = 0;
LABEL_12:
    v11 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_73;
    if (v11 < 8)
      goto LABEL_72;
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ImagePaint._Paint(_QWORD *a1)
{
  return ImagePaint._Paint.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance ImagePaint._Paint(id *a1@<X0>, uint64_t a2@<X8>)
{
  ImagePaint._Paint.init(from:)(a1, a2);
}

uint64_t specialized static ImagePaint._Paint.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  __int16 v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  __int128 v25;
  __int128 v26;
  uint64_t result;
  CGRect rect1;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  char v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  char v48;
  char v49;
  __int16 v50;
  CGRect v51;
  CGRect v52;

  v2 = *((_BYTE *)a1 + 8);
  v3 = a1[4];
  v4 = *((_BYTE *)a1 + 40);
  v5 = *((_BYTE *)a1 + 60);
  v6 = *((_BYTE *)a1 + 96);
  v7 = *((_BYTE *)a1 + 97);
  v8 = *((_WORD *)a1 + 49);
  v9 = *((double *)a1 + 14);
  v10 = *((double *)a1 + 15);
  v11 = *((double *)a1 + 16);
  *(_QWORD *)&rect1.origin.x = a1[13];
  *(_QWORD *)&rect1.origin.y = a1[17];
  v12 = *(double *)a2;
  v13 = *(_BYTE *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_BYTE *)(a2 + 40);
  v16 = *(_BYTE *)(a2 + 60);
  v17 = *(_BYTE *)(a2 + 96);
  v18 = *(_BYTE *)(a2 + 97);
  v19 = *(_WORD *)(a2 + 98);
  v20 = *(double *)(a2 + 104);
  v21 = *(double *)(a2 + 112);
  v22 = *(double *)(a2 + 120);
  v23 = *(double *)(a2 + 128);
  v24 = *(double *)(a2 + 136);
  v39 = *a1;
  v40 = v2;
  v41 = *((_OWORD *)a1 + 1);
  v42 = v3;
  v43 = v4;
  v44 = *(_OWORD *)((char *)a1 + 44);
  v45 = v5;
  v25 = *((_OWORD *)a1 + 5);
  v46 = *((_OWORD *)a1 + 4);
  v47 = v25;
  v48 = v6;
  v49 = v7;
  v50 = v8;
  rect1.size.width = v12;
  LOBYTE(rect1.size.height) = v13;
  v29 = *(_OWORD *)(a2 + 16);
  v30 = v14;
  v31 = v15;
  v32 = *(_OWORD *)(a2 + 44);
  v33 = v16;
  v26 = *(_OWORD *)(a2 + 80);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = v26;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  if ((specialized static GraphicsImage.== infix(_:_:)((uint64_t)&v39, (uint64_t)&rect1.size) & 1) == 0)
    return 0;
  v51.origin.x = rect1.origin.x;
  v51.origin.y = v9;
  v51.size.width = v10;
  v51.size.height = v11;
  v52.origin.x = v20;
  v52.origin.y = v21;
  v52.size.width = v22;
  v52.size.height = v23;
  LODWORD(result) = CGRectEqualToRect(v51, v52);
  if (rect1.origin.y == v24)
    return result;
  else
    return 0;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi6_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x7000000000000000;
  return result;
}

uint64_t outlined assign with take of Text.Style?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ImageResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ImageResolutionContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined retain of GraphicsImage(uint64_t a1)
{
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

uint64_t outlined release of GraphicsImage(uint64_t a1)
{
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

unint64_t instantiation function for generic protocol witness table for ImagePaint._Paint(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint();
  result = lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint;
  if (!lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ImagePaint._Paint, &type metadata for ImagePaint._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint;
  if (!lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ImagePaint._Paint, &type metadata for ImagePaint._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint;
  if (!lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ImagePaint._Paint, &type metadata for ImagePaint._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint);
  }
  return result;
}

uint64_t initializeWithCopy for ImagePaint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ImagePaint(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for ImagePaint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ImagePaint()
{
  return &type metadata for ImagePaint;
}

void destroy for ImagePaint._Paint(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 != 255)
    outlined consume of GraphicsImage.Contents(*(void **)a1, v1);
}

uint64_t initializeWithCopy for ImagePaint._Paint(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;

  v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }
  else
  {
    v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((_BYTE *)a2 + 8));
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
  *(_QWORD *)(a1 + 136) = a2[17];
  return a1;
}

uint64_t assignWithCopy for ImagePaint._Paint(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  char v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      v10 = *(id *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)a1 = v10;
    }
    else
    {
      v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    v9 = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = v9;
  }
  else
  {
    v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
    v6 = *(void **)a1;
    *(_QWORD *)a1 = v5;
    v7 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for ImagePaint._Paint(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  void *v6;
  __int128 v7;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 255)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
LABEL_5:
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    goto LABEL_6;
  }
  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v4);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImagePaint._Paint(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 97);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ImagePaint._Paint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
      *(_BYTE *)(result + 97) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImagePaint._Paint()
{
  return &type metadata for ImagePaint._Paint;
}

uint64_t static LeafViewLayout.makeLeafLayout(_:view:inputs:)(uint64_t result, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 36) & 2) != 0)
  {
    v3 = result;
    v13 = *a2;
    MEMORY[0x24BDAC7A8](result);
    v10 = type metadata accessor for LeafLayoutComputer(0, v4, v5, v4);
    v11 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v10);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    result = _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v13, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)&v9, v10, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
    *(_DWORD *)(v3 + 12) = v12;
    v8 = *(_DWORD *)(v3 + 8);
    if ((v8 & 0x80) == 0)
      *(_DWORD *)(v3 + 8) = v8 | 0x80;
  }
  return result;
}

uint64_t static RendererLeafView.requiresMainThread.getter()
{
  return 0;
}

uint64_t specialized RendererLeafView.contains(points:size:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (double *)(result + 40);
    while (1)
    {
      v9 = *(v7 - 1);
      if (v9 >= 0.0 && ((v10 = *v7, *v7 >= 0.0) ? (v11 = v9 < a3) : (v11 = 0), v11))
      {
        if (v6 < 0x40)
        {
          v8 = 1 << v6;
          if (v10 < a4)
          {
LABEL_17:
            v5 |= v8;
            goto LABEL_6;
          }
        }
        else
        {
          v8 = 0;
          if (v10 < a4)
            goto LABEL_17;
        }
      }
      else
      {
        v8 = 1 << v6;
        if (v6 >= 0x40)
          v8 = 0;
      }
      v5 &= ~v8;
LABEL_6:
      ++v6;
      v7 += 2;
      if (v4 == v6)
        goto LABEL_19;
    }
  }
  v5 = 0;
LABEL_19:
  *a2 = v5;
  return result;
}

uint64_t RendererLeafView.contains(points:size:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;
  uint64_t v12;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (double *)(result + 40);
    while (1)
    {
      v9 = *(v7 - 1);
      if (v9 >= 0.0 && ((v10 = *v7, *v7 >= 0.0) ? (v11 = v9 < a3) : (v11 = 0), v11))
      {
        if (v6 < 0x40)
        {
          v12 = 1 << v6;
          v8 = 1 << v6;
          if (v10 < a4)
          {
LABEL_18:
            v5 |= v12;
            goto LABEL_7;
          }
        }
        else
        {
          v12 = 0;
          v8 = 0;
          if (v10 < a4)
            goto LABEL_18;
        }
      }
      else if (v6 >= 0x40)
      {
        v8 = 0;
      }
      else
      {
        v8 = 1 << v6;
      }
      v5 &= ~v8;
LABEL_7:
      ++v6;
      v7 += 2;
      if (v4 == v6)
        goto LABEL_20;
    }
  }
  v5 = 0;
LABEL_20:
  *a2 = v5;
  return result;
}

void static RendererLeafView.makeLeafView(view:inputs:)(unsigned int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE *v5;
  __int128 v8;
  __int128 v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  int OffsetAttribute2;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t KeyPath;
  uint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(__int128 *, _QWORD);
  _BYTE v99[16];
  uint64_t v100;
  uint64_t v101;
  _BYTE v102[12];
  int v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  unsigned __int8 v123;
  unsigned int v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned __int8 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  int v133;
  unsigned int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  int v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _QWORD v144[4];

  v117 = a4;
  v118 = a3;
  v144[1] = *MEMORY[0x24BDAC8D0];
  v116 = *a1;
  v8 = a2[3];
  v137 = a2[2];
  v138 = v8;
  v139 = a2[4];
  v140 = *((_DWORD *)a2 + 20);
  v9 = a2[1];
  v135 = *a2;
  v136 = v9;
  v119 = MEMORY[0x24BEE4AF8];
  v10 = *MEMORY[0x24BE096C0];
  LODWORD(v120) = 0;
  HIDWORD(v120) = v10;
  v11 = (_BYTE *)v8;
  type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  v13 = *((_QWORD *)v11 + 2);
  if (!v13)
  {
LABEL_68:
    *a5 = v119;
    a5[1] = v120;
    return;
  }
  v14 = v12;
  v15 = v11 + 32;
  v16 = v11 + 32;
  v17 = *((_QWORD *)v11 + 2);
  do
  {
    if (*v16 == v12)
    {
      LODWORD(v5) = ++lastIdentity;
      v18 = a2[2];
      v142 = a2[1];
      v143 = v18;
      v141 = *a2;
      LOBYTE(v11) = BYTE4(v18);
      if ((WORD2(v18) & 0x100) != 0)
        goto LABEL_72;
      goto LABEL_7;
    }
    v16 += 2;
    --v17;
  }
  while (v17);
  v10 = 0;
  while (1)
  {
    type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    v14 = v55;
    v56 = 0;
    while (1)
    {
      v57 = v56 + 1;
      if (__OFADD__(v56, 1))
        break;
      if (*v15 == v55)
      {
        v114 = 0;
        v115 = a5;
        v58 = v136;
        v59 = BYTE4(v137);
        swift_beginAccess();
        if ((v59 & 0x20) == 0)
        {
          OffsetAttribute2 = DWORD2(v139);
          LODWORD(v63) = v139;
          a5 = v115;
LABEL_67:
          swift_endAccess();
          v90 = v118;
          v91 = *(_QWORD *)(v117 + 8);
          v92 = LeafResponderFilter.init(data:size:position:transform:)(v116, OffsetAttribute2, v63, SHIDWORD(v138), (uint64_t)&v128);
          v121 = v128;
          *(_QWORD *)&v122 = v129;
          MEMORY[0x24BDAC7A8](v92);
          v94 = type metadata accessor for LeafResponderFilter(0, v90, v91, v93);
          v100 = v94;
          v101 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafResponderFilter<A>, v94);
          type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
          _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v121, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v99, v94, MEMORY[0x24BEE4078], v95, MEMORY[0x24BEE40A8], v96);
          swift_release();
          LOBYTE(v128) = 0;
          PreferencesOutputs.subscript.setter(v134, v14, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v97);
          goto LABEL_68;
        }
        v64 = DWORD2(v135);
        *(_QWORD *)&v109 = v136;
        v65 = DWORD2(v136);
        v112 = *((_QWORD *)&v137 + 1);
        v66 = v137;
        v113 = v135;
        v67 = *((_QWORD *)&v138 + 1);
        v111 = v138;
        *(_QWORD *)&v60 = *((_QWORD *)&v139 + 1);
        *(_QWORD *)&v61 = v139;
        v106 = v60;
        v107 = v61;
        v68 = v140;
        v131 = v138;
        v132 = v139;
        v133 = v140;
        v128 = v135;
        v129 = v136;
        v130 = v137;
        outlined retain of _ViewInputs((uint64_t)&v135);
        v69 = _ViewInputs.geometryTransaction()();
        KeyPath = swift_getKeyPath();
        v108 = v58 + 16;
        LODWORD(v110) = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
        swift_release();
        if ((*(_BYTE *)(v58 + 81) & 1) == 0
          && (_DWORD)v107 == *(_DWORD *)(v58 + 32)
          && (_DWORD)v106 == *(_DWORD *)(v58 + 36)
          && (_DWORD)v110 == *(_DWORD *)(v58 + 40)
          && v64 == *(_DWORD *)(v58 + 44)
          && v69 == *(_DWORD *)(v58 + 48)
          && v65 == *(_DWORD *)(v58 + 52))
        {
          if ((*(_BYTE *)(v58 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v58 + 68);
LABEL_54:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v76 = DWORD2(v135);
            v77 = DWORD2(v136);
            v110 = *((_QWORD *)&v137 + 1);
            v78 = v137;
            v111 = v136;
            v112 = v138;
            v113 = v135;
            v80 = *((_QWORD *)&v138 + 1);
            *(_QWORD *)&v79 = v139;
            v109 = v79;
            *(_QWORD *)&v79 = *((_QWORD *)&v139 + 1);
            v107 = v79;
            v81 = v140;
            v131 = v138;
            v132 = v139;
            v133 = v140;
            v128 = v135;
            v129 = v136;
            v130 = v137;
            outlined retain of _ViewInputs((uint64_t)&v135);
            v82 = _ViewInputs.geometryTransaction()();
            v83 = swift_getKeyPath();
            v84 = specialized CachedEnvironment.attribute<A>(keyPath:)(v83);
            swift_release();
            if ((*(_BYTE *)(v58 + 81) & 1) == 0
              && (_DWORD)v109 == *(_DWORD *)(v58 + 32)
              && (_DWORD)v107 == *(_DWORD *)(v58 + 36)
              && v84 == *(_DWORD *)(v58 + 40)
              && v76 == *(_DWORD *)(v58 + 44)
              && v82 == *(_DWORD *)(v58 + 48)
              && v77 == *(_DWORD *)(v58 + 52))
            {
              a5 = v115;
              if ((*(_BYTE *)(v58 + 64) & 1) == 0)
              {
                LODWORD(v63) = *(_DWORD *)(v58 + 60);
LABEL_66:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                goto LABEL_67;
              }
            }
            else
            {
              *(_QWORD *)&v128 = v113;
              DWORD2(v128) = v76;
              *(_QWORD *)&v129 = v111;
              *((_QWORD *)&v129 + 1) = __PAIR64__(v82, v77);
              *(_QWORD *)&v130 = v78;
              *((_QWORD *)&v130 + 1) = v110;
              *(_QWORD *)&v131 = v112;
              *((_QWORD *)&v131 + 1) = v80;
              *(_QWORD *)&v132 = v109;
              *((_QWORD *)&v132 + 1) = v107;
              v133 = v81;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v84, (uint64_t)&v121);
              v85 = v122;
              v86 = v123;
              v87 = v127;
              v88 = v123 | ((unint64_t)v124 << 32);
              v89 = v125 | ((unint64_t)v126 << 32);
              *(_OWORD *)(v58 + 32) = v121;
              *(_OWORD *)(v58 + 48) = v85;
              *(_QWORD *)(v58 + 64) = v88;
              *(_QWORD *)(v58 + 72) = v89;
              *(_WORD *)(v58 + 80) = v87;
              a5 = v115;
              if (v86 != 1)
              {
                v63 = HIDWORD(*((_QWORD *)&v85 + 1));
                goto LABEL_66;
              }
            }
            LODWORD(v63) = AGGraphCreateOffsetAttribute2();
            *(_DWORD *)(v58 + 60) = v63;
            *(_BYTE *)(v58 + 64) = 0;
            goto LABEL_66;
          }
        }
        else
        {
          *(_QWORD *)&v128 = v113;
          DWORD2(v128) = v64;
          *(_QWORD *)&v129 = v109;
          *((_QWORD *)&v129 + 1) = __PAIR64__(v69, v65);
          *(_QWORD *)&v130 = v66;
          *((_QWORD *)&v130 + 1) = v112;
          *(_QWORD *)&v131 = v111;
          *((_QWORD *)&v131 + 1) = v67;
          *(_QWORD *)&v132 = v107;
          *((_QWORD *)&v132 + 1) = v106;
          v133 = v68;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v110, (uint64_t)&v121);
          OffsetAttribute2 = v124;
          v71 = v125;
          v72 = v127;
          v73 = v123 | ((unint64_t)v124 << 32);
          v74 = v125 | ((unint64_t)v126 << 32);
          v75 = v122;
          *(_OWORD *)(v58 + 32) = v121;
          *(_OWORD *)(v58 + 48) = v75;
          *(_QWORD *)(v58 + 64) = v73;
          *(_QWORD *)(v58 + 72) = v74;
          *(_WORD *)(v58 + 80) = v72;
          if (v71 != 1)
            goto LABEL_54;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v58 + 68) = OffsetAttribute2;
        *(_BYTE *)(v58 + 72) = 0;
        goto LABEL_54;
      }
      ++v56;
      v15 += 2;
      if (v57 == v13)
        goto LABEL_68;
    }
    __break(1u);
LABEL_72:
    outlined retain of _ViewInputs((uint64_t)&v135);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v135);
    if (AGWeakAttributeGetAttribute() == v10)
      break;
    LODWORD(v121) = (_DWORD)v5;
    v98 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v121);
    v98(&v128, 0);
LABEL_7:
    LODWORD(v114) = (_DWORD)v5;
    v19 = v142;
    swift_beginAccess();
    if ((v11 & 0x20) == 0)
    {
      v113 = v139;
      goto LABEL_32;
    }
    v115 = a5;
    LODWORD(v107) = DWORD2(v135);
    v110 = v136;
    LODWORD(v106) = DWORD2(v136);
    v111 = *((_QWORD *)&v137 + 1);
    v22 = v137;
    v112 = v135;
    v23 = *((_QWORD *)&v138 + 1);
    v108 = v138;
    *(_QWORD *)&v20 = *((_QWORD *)&v139 + 1);
    *(_QWORD *)&v21 = v139;
    v104 = v20;
    v105 = v21;
    v131 = v138;
    v132 = v139;
    v103 = v140;
    v133 = v140;
    v128 = v135;
    v129 = v136;
    v130 = v137;
    outlined retain of _ViewInputs((uint64_t)&v135);
    v24 = _ViewInputs.geometryTransaction()();
    v25 = swift_getKeyPath();
    *(_QWORD *)&v109 = v19 + 16;
    LODWORD(v113) = specialized CachedEnvironment.attribute<A>(keyPath:)(v25);
    swift_release();
    if ((*(_BYTE *)(v19 + 81) & 1) == 0
      && (_DWORD)v105 == *(_DWORD *)(v19 + 32)
      && (_DWORD)v104 == *(_DWORD *)(v19 + 36)
      && (_DWORD)v113 == *(_DWORD *)(v19 + 40)
      && (_DWORD)v107 == *(_DWORD *)(v19 + 44)
      && v24 == *(_DWORD *)(v19 + 48)
      && (_DWORD)v106 == *(_DWORD *)(v19 + 52))
    {
      if ((*(_BYTE *)(v19 + 64) & 1) == 0)
      {
        v113 = *(unsigned int *)(v19 + 60);
        goto LABEL_20;
      }
LABEL_19:
      v113 = AGGraphCreateOffsetAttribute2();
      *(_DWORD *)(v19 + 60) = v113;
      *(_BYTE *)(v19 + 64) = 0;
      goto LABEL_20;
    }
    *(_QWORD *)&v128 = v112;
    DWORD2(v128) = v107;
    *(_QWORD *)&v129 = v110;
    *((_QWORD *)&v129 + 1) = __PAIR64__(v24, v106);
    *(_QWORD *)&v130 = v22;
    *((_QWORD *)&v130 + 1) = v111;
    *(_QWORD *)&v131 = v108;
    *((_QWORD *)&v131 + 1) = v23;
    *(_QWORD *)&v132 = v105;
    *((_QWORD *)&v132 + 1) = v104;
    v133 = v103;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v113, (uint64_t)&v121);
    v26 = v122;
    v27 = v123;
    v28 = v127;
    v29 = v123 | ((unint64_t)v124 << 32);
    v30 = v125 | ((unint64_t)v126 << 32);
    *(_OWORD *)(v19 + 32) = v121;
    *(_OWORD *)(v19 + 48) = v26;
    *(_QWORD *)(v19 + 64) = v29;
    *(_QWORD *)(v19 + 72) = v30;
    *(_WORD *)(v19 + 80) = v28;
    if (v27 == 1)
      goto LABEL_19;
    v113 = HIDWORD(*((_QWORD *)&v26 + 1));
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v108 = v135;
    LODWORD(v107) = DWORD2(v135);
    v31 = DWORD2(v136);
    v111 = *((_QWORD *)&v137 + 1);
    v32 = v137;
    v112 = v136;
    v33 = *((_QWORD *)&v138 + 1);
    v110 = v138;
    *(_QWORD *)&v34 = *((_QWORD *)&v139 + 1);
    *(_QWORD *)&v35 = v139;
    v105 = v34;
    v106 = v35;
    v131 = v138;
    v132 = v139;
    LODWORD(v104) = v140;
    v133 = v140;
    v128 = v135;
    v129 = v136;
    v130 = v137;
    outlined retain of _ViewInputs((uint64_t)&v135);
    v36 = _ViewInputs.geometryTransaction()();
    v37 = swift_getKeyPath();
    LODWORD(v109) = specialized CachedEnvironment.attribute<A>(keyPath:)(v37);
    swift_release();
    if ((*(_BYTE *)(v19 + 81) & 1) == 0
      && (_DWORD)v106 == *(_DWORD *)(v19 + 32)
      && (_DWORD)v105 == *(_DWORD *)(v19 + 36)
      && (_DWORD)v109 == *(_DWORD *)(v19 + 40)
      && (_DWORD)v107 == *(_DWORD *)(v19 + 44)
      && v36 == *(_DWORD *)(v19 + 48)
      && v31 == *(_DWORD *)(v19 + 52))
    {
      a5 = v115;
      if ((*(_BYTE *)(v19 + 72) & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      *(_QWORD *)&v128 = v108;
      DWORD2(v128) = v107;
      *(_QWORD *)&v129 = v112;
      *((_QWORD *)&v129 + 1) = __PAIR64__(v36, v31);
      *(_QWORD *)&v130 = v32;
      *((_QWORD *)&v130 + 1) = v111;
      *(_QWORD *)&v131 = v110;
      *((_QWORD *)&v131 + 1) = v33;
      *(_QWORD *)&v132 = v106;
      *((_QWORD *)&v132 + 1) = v105;
      v133 = v104;
      LODWORD(v107) = *(_DWORD *)(v19 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v109, (uint64_t)&v121);
      v38 = v125;
      v39 = v127;
      v40 = v123 | ((unint64_t)v124 << 32);
      v41 = v125 | ((unint64_t)v126 << 32);
      v42 = v122;
      *(_OWORD *)(v19 + 32) = v121;
      *(_OWORD *)(v19 + 48) = v42;
      *(_QWORD *)(v19 + 64) = v40;
      *(_QWORD *)(v19 + 72) = v41;
      *(_WORD *)(v19 + 80) = v39;
      a5 = v115;
      if (v38 != 1)
        goto LABEL_31;
    }
    *(_DWORD *)(v19 + 68) = AGGraphCreateOffsetAttribute2();
    *(_BYTE *)(v19 + 72) = 0;
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_32:
    swift_endAccess();
    v43 = AGGraphCreateOffsetAttribute2();
    v44 = v141;
    v144[0] = v141;
    outlined retain of _ViewInputs((uint64_t)&v135);
    outlined retain of _GraphInputs((uint64_t)&v141);
    outlined retain of ViewTransform((uint64_t)v144);
    v45 = specialized find<A>(_:key:)(v44);
    if (v45)
      v46 = *(_BYTE *)(v45 + 72);
    else
      v46 = 0;
    v47 = DWORD1(v139);
    outlined release of ViewTransform((uint64_t)v144);
    outlined release of _GraphInputs((uint64_t)&v141);
    v48 = outlined release of _ViewInputs((uint64_t)&v135);
    v11 = v102;
    *(_QWORD *)&v128 = __PAIR64__(v116, v114);
    *((_QWORD *)&v128 + 1) = __PAIR64__(v43, v113);
    LODWORD(v129) = v47;
    BYTE4(v129) = v46;
    WORD3(v129) = 0;
    MEMORY[0x24BDAC7A8](v48);
    v5 = v102;
    v50 = type metadata accessor for LeafDisplayList(0, v118, v117, v49);
    v100 = v50;
    v101 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafDisplayList<A>, v50);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    v51 = v50;
    v10 = 0;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v128, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v99, v51, MEMORY[0x24BEE4078], v52, MEMORY[0x24BEE40A8], v53);
    LOBYTE(v128) = 0;
    PreferencesOutputs.subscript.setter(v121, v14, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v54);
  }
  __break(1u);
}

uint64_t static LeafDisplayList.flags.getter(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  if (((*(uint64_t (**)(void))(a2 + 32))() & 1) != 0)
    return 8;
  type metadata accessor for AGAttributeTypeFlags(0);
  lazy protocol witness table accessor for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  OptionSet<>.init()();
  return v3;
}

uint64_t LeafDisplayList.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t Value;
  char v10;
  char v11;
  void (*v12)(double *__return_ptr, uint64_t);
  char *v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  __int128 *v22;
  double v23;
  double v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  double v42;
  double v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  int v51;
  double v52;
  double v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int16 v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;

  v2 = v1;
  v62 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v41) = *(_DWORD *)v2;
  v40 = *(unsigned __int8 *)(v2 + 20);
  LOWORD(v8) = *(_WORD *)(v2 + 22);
  Value = AGGraphGetValue();
  v11 = v10;
  v38 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, v4);
  v12 = *(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)(a1 + 24) + 40);
  v13 = v7;
  v39 = v4;
  v12(&v52, v4);
  v14 = *(_QWORD *)&v52;
  v15 = ++static DisplayList.Version.lastValue;
  if ((v11 & 1) != 0)
  {
    if (v15)
      v8 = (2 * ((33 * (v15 >> 16)) ^ v15)) | 1;
    else
      LOWORD(v8) = 0;
    *(_WORD *)(v2 + 22) = v8;
  }
  v16 = (double *)AGGraphGetValue();
  v17 = *v16;
  v18 = v16[1];
  v19 = (double *)AGGraphGetValue();
  v20 = v17 - *v19;
  v21 = v18 - v19[1];
  type metadata accessor for CGSize(0);
  v22 = (__int128 *)AGGraphGetValue();
  v52 = v20;
  v53 = v21;
  v54 = *v22;
  v55 = v15;
  v56 = v14;
  v57 = (unsigned __int16)v8;
  v58 = 0;
  v60 = 0;
  v59 = 0;
  v61 = v41;
  LOBYTE(v42) = v40;
  v41 = v14;
  outlined copy of DisplayList.Content.Value(v14);
  DisplayList.Item.canonicalize(options:)((char *)&v42);
  v23 = v52;
  v24 = v53;
  v25 = v54;
  v26 = v55;
  v27 = v56;
  v28 = v57;
  v29 = v58;
  v30 = v59 | (v60 << 16);
  v31 = v61;
  v32 = v57 >> 62;
  if (v57 >> 62 != 3 || (v30 & 0xFFFFFF) != 0 || v57 != 0xC000000000000000 || v58 | v56)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_23527E860;
    *(double *)(v35 + 32) = v23;
    *(double *)(v35 + 40) = v24;
    *(_OWORD *)(v35 + 48) = v25;
    *(_QWORD *)(v35 + 64) = v26;
    *(_QWORD *)(v35 + 72) = v27;
    *(_QWORD *)(v35 + 80) = v28;
    *(_QWORD *)(v35 + 88) = v29;
    *(_BYTE *)(v35 + 98) = BYTE2(v30);
    *(_WORD *)(v35 + 96) = v30;
    *(_DWORD *)(v35 + 100) = v31;
    v42 = v23;
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v47 = v28;
    v48 = v29;
    v50 = BYTE2(v30);
    v49 = v30;
    v51 = v31;
    outlined copy of DisplayList.Item.Value(v27, v28);
    outlined copy of DisplayList.Item.Value(v27, v28);
    DisplayList.Item.features.getter();
    __asm { BR              X10 }
  }
  v33 = v39;
  v34 = v38;
  v42 = MEMORY[0x24BEE4AF8];
  LOWORD(v43) = 0;
  BYTE2(v43) = 0;
  AGGraphSetOutputValue();
  outlined consume of DisplayList.Content.Value(v41);
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v27, 0xC000000000000000);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v13, v33);
}

void protocol witness for static StatefulRule.initialValue.getter in conformance LeafDisplayList<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 8) = 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LeafDisplayList<A>()
{
  return 0x707369446661654CLL;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LeafDisplayList<A>(uint64_t a1)
{
  return static LeafDisplayList.flags.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

SwiftUI::Spacing __swiftcall LeafViewLayout.spacing()()
{
  return LeafViewLayout.spacing()();
}

uint64_t LeafLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Value;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 24);
  v9 = type metadata accessor for LeafLayoutEngine(0, v2, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - v11;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, v2);
  LeafLayoutEngine.init(_:)((uint64_t)v5, v2, v7, v14, (uint64_t)v12);
  v15 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, a1);
  StatefulRule<>.update<A>(to:)((uint64_t)v12, a1, v9, v15, (uint64_t)&protocol witness table for LeafLayoutEngine<A>);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t LeafLayoutEngine.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;

  v8 = a5 + *(int *)(type metadata accessor for LeafLayoutEngine(0, a2, a3, a4) + 36);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_BYTE *)(v8 + 48) = 1;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_BYTE *)(v8 + 104) = 1;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_BYTE *)(v8 + 160) = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance LeafLayoutComputer<A>()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LeafLayoutComputer<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t LeafLayoutEngine.view.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

SwiftUI::Spacing __swiftcall LeafLayoutEngine.spacing()()
{
  uint64_t v0;

  return (SwiftUI::Spacing)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 8))(*(_QWORD *)(v0 + 16));
}

double LeafLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  double v34;
  char v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  char v65;
  double v66;
  char v67;

  v3 = v2;
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(double *)v14;
  v16 = *(unsigned __int8 *)(v14 + 8);
  v17 = *(double *)(v14 + 16);
  v18 = *(unsigned __int8 *)(v14 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v6, v3, a2, v11);
  v62 = v8;
  v63 = v9;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v6, v8);
  v20 = v3 + *(int *)(a2 + 36);
  v21 = *(double *)v20;
  v22 = *(_QWORD *)(v20 + 8);
  v24 = *(double *)(v20 + 16);
  v23 = *(_QWORD *)(v20 + 24);
  v26 = *(_QWORD *)(v20 + 32);
  v25 = *(_QWORD *)(v20 + 40);
  v27 = *(unsigned __int8 *)(v20 + 48);
  v29 = *(double *)(v20 + 56);
  v28 = *(_QWORD *)(v20 + 64);
  v30 = *(double *)(v20 + 72);
  v32 = *(_QWORD *)(v20 + 88);
  v31 = *(_QWORD *)(v20 + 96);
  v33 = *(unsigned __int8 *)(v20 + 104);
  v34 = *(double *)(v20 + 144);
  if ((v27 & 1) == 0)
  {
    if ((v16 & 1) != 0)
    {
      if ((v22 & 1) == 0)
      {
        if ((*(_BYTE *)(v20 + 64) & 1) != 0)
          v35 = *(_BYTE *)(v20 + 104);
        else
          v35 = 1;
        if ((v35 & 1) != 0)
          goto LABEL_18;
        goto LABEL_35;
      }
    }
    else if ((v22 & 1) != 0 || v15 != v21)
    {
      goto LABEL_17;
    }
    if ((v18 & 1) != 0)
    {
      if ((v23 & 1) == 0)
        goto LABEL_17;
LABEL_16:
      v34 = *(double *)(v20 + 32);
LABEL_43:
      swift_beginAccess();
      v47 = (double *)static LayoutTrace.recorder;
      if (static LayoutTrace.recorder)
      {
        swift_beginAccess();
        v47[4] = v15;
        *((_QWORD *)v47 + 5) = v16;
        v47[6] = v17;
        *((_WORD *)v47 + 28) = v18 | 0x100;
      }
      v39 = v62;
      v46 = v63;
      goto LABEL_46;
    }
    if ((v23 & 1) == 0 && v17 == v24)
      goto LABEL_16;
  }
LABEL_17:
  if ((v33 & 1) != 0)
    goto LABEL_18;
  if ((v16 & 1) != 0)
  {
    if ((*(_BYTE *)(v20 + 64) & 1) == 0)
      goto LABEL_18;
  }
  else if ((*(_BYTE *)(v20 + 64) & 1) != 0 || v15 != v29)
  {
    goto LABEL_18;
  }
LABEL_35:
  if ((v18 & 1) != 0)
  {
    if ((*(_BYTE *)(v20 + 80) & 1) != 0)
    {
LABEL_40:
      v34 = *(double *)(v20 + 88);
      goto LABEL_43;
    }
  }
  else if ((*(_BYTE *)(v20 + 80) & 1) == 0 && v17 == v30)
  {
    goto LABEL_40;
  }
LABEL_18:
  if ((*(_BYTE *)(v20 + 160) & 1) == 0)
  {
    if ((v16 & 1) != 0)
    {
      if ((*(_BYTE *)(v20 + 120) & 1) == 0)
        goto LABEL_19;
    }
    else if ((*(_BYTE *)(v20 + 120) & 1) != 0 || *(double *)(v20 + 112) != v15)
    {
      goto LABEL_19;
    }
    if ((v18 & 1) != 0)
    {
      if ((*(_BYTE *)(v20 + 136) & 1) != 0)
        goto LABEL_43;
    }
    else if ((*(_BYTE *)(v20 + 136) & 1) == 0 && *(double *)(v20 + 128) == v17)
    {
      goto LABEL_43;
    }
  }
LABEL_19:
  v50 = *(_QWORD *)(v20 + 80);
  v51 = v33;
  v52 = v30;
  v36 = v28;
  v53 = v32;
  v54 = v31;
  v57 = v27;
  v58 = v23;
  v59 = v24;
  v56 = v22;
  v55 = v21;
  v60 = v26;
  v61 = v25;
  swift_beginAccess();
  v37 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_beginAccess();
    v37[4] = v15;
    *((_QWORD *)v37 + 5) = v16;
    v37[6] = v17;
    *((_WORD *)v37 + 28) = v18;
  }
  v38 = *(_QWORD *)(a2 + 24);
  v64 = v15;
  v65 = v16;
  v66 = v17;
  v67 = v18;
  v39 = v62;
  v34 = (*(double (**)(double *, uint64_t))(v38 + 16))(&v64, v62);
  *(double *)(v20 + 112) = v29;
  *(_QWORD *)(v20 + 120) = v36;
  v40 = v50;
  *(double *)(v20 + 128) = v52;
  *(_QWORD *)(v20 + 136) = v40;
  v41 = v54;
  *(_QWORD *)(v20 + 144) = v53;
  *(_QWORD *)(v20 + 152) = v41;
  *(_BYTE *)(v20 + 160) = v51;
  v42 = v56;
  *(double *)(v20 + 56) = v55;
  *(_QWORD *)(v20 + 64) = v42;
  v43 = v58;
  *(double *)(v20 + 72) = v59;
  *(_QWORD *)(v20 + 80) = v43;
  v44 = v61;
  *(_QWORD *)(v20 + 88) = v60;
  *(_QWORD *)(v20 + 96) = v44;
  *(_BYTE *)(v20 + 104) = v57;
  *(double *)v20 = v15;
  *(_BYTE *)(v20 + 8) = v16;
  *(double *)(v20 + 16) = v17;
  *(_BYTE *)(v20 + 24) = v18;
  *(double *)(v20 + 32) = v34;
  *(_QWORD *)(v20 + 40) = v45;
  *(_BYTE *)(v20 + 48) = 0;
  v46 = v63;
LABEL_46:
  (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v39);
  return v34;
}

uint64_t type metadata accessor for LeafLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LeafLayoutComputer);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata accessor for LeafDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LeafDisplayList);
}

uint64_t type metadata accessor for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LeafLayoutEngine);
}

uint64_t dispatch thunk of static RendererLeafView.requiresMainThread.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of RendererLeafView.content()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LeafViewLayout.spacing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LeafViewLayout.sizeThatFits(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata completion function for LeafLayoutEngine()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LeafLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_OWORD *)(v11 + 16);
    v12 = *(_OWORD *)(v11 + 32);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v12;
    v14 = *(_OWORD *)(v11 + 96);
    v16 = *(_OWORD *)(v11 + 48);
    v15 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(_OWORD *)(v10 + 96) = v14;
    *(_OWORD *)(v10 + 48) = v16;
    *(_OWORD *)(v10 + 64) = v15;
    v18 = *(_OWORD *)(v11 + 128);
    v17 = *(_OWORD *)(v11 + 144);
    v19 = *(_OWORD *)(v11 + 112);
    *(_BYTE *)(v10 + 160) = *(_BYTE *)(v11 + 160);
    *(_OWORD *)(v10 + 128) = v18;
    *(_OWORD *)(v10 + 144) = v17;
    *(_OWORD *)(v10 + 112) = v19;
  }
  return v4;
}

uint64_t initializeWithCopy for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  v11 = *(_OWORD *)(v8 + 96);
  v13 = *(_OWORD *)(v8 + 48);
  v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  v15 = *(_OWORD *)(v8 + 128);
  v14 = *(_OWORD *)(v8 + 144);
  v16 = *(_OWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 160) = *(_BYTE *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithCopy for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  v11 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)v7 = v11;
  v12 = *(_OWORD *)(v8 + 56);
  v13 = *(_OWORD *)(v8 + 72);
  v14 = *(_OWORD *)(v8 + 88);
  *(_BYTE *)(v7 + 104) = *(_BYTE *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  v15 = *(_BYTE *)(v8 + 160);
  v17 = *(_OWORD *)(v8 + 128);
  v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(_BYTE *)(v7 + 160) = v15;
  return a1;
}

uint64_t initializeWithTake for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  v11 = *(_OWORD *)(v8 + 96);
  v13 = *(_OWORD *)(v8 + 48);
  v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  v15 = *(_OWORD *)(v8 + 128);
  v14 = *(_OWORD *)(v8 + 144);
  v16 = *(_OWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 160) = *(_BYTE *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithTake for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  v11 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)v7 = v11;
  v12 = *(_OWORD *)(v8 + 56);
  v13 = *(_OWORD *)(v8 + 72);
  v14 = *(_OWORD *)(v8 + 88);
  *(_BYTE *)(v7 + 104) = *(_BYTE *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  v15 = *(_BYTE *)(v8 + 160);
  v17 = *(_OWORD *)(v8 + 128);
  v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(_BYTE *)(v7 + 160) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for LeafLayoutEngine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = (a2 - v5 + 255) >> (8 * (((*(_BYTE *)(v4 + 64) + 7) & 0xF8) - 95));
  if (((*(_DWORD *)(v4 + 64) + 7) & 0xFFFFFFF8) + 161 < 4)
    v7 = v6 + 1;
  else
    v7 = 2;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234B8A7A8 + 4 * byte_235289994[v9]))();
}

void storeEnumTagSinglePayload for LeafLayoutEngine(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 161;
  if (v7 >= a3)
  {
    v12 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * (((*(_BYTE *)(v6 + 64) + 7) & 0xF8) - 95));
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_234B8A920()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234B8A928(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234B8A930);
}

void sub_234B8A94C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234B8A954()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234B8A95C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234B8A964);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t instantiation function for generic protocol witness table for LeafLayoutComputer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in LeafDisplayList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in LeafLayoutComputer<A>()
{
  JUMPOUT(0x23B7C9C04);
}

unint64_t lazy protocol witness table accessor for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags;
  if (!lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags)
  {
    type metadata accessor for AGAttributeTypeFlags(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AGAttributeTypeFlags, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags);
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(Swift::UInt64 a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return 0;
}

void *specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  id v6;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v3);
  v6 = v5;
  return v5;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;

  lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, v3, MEMORY[0x24BDD0A60]);
  v19 = Set.init(minimumCapacity:)();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v9, v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v3, MEMORY[0x24BDCE6E0]);
  v19 = Set.init(minimumCapacity:)();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v9, v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, v3, MEMORY[0x24BDCEA88]);
  v19 = Set.init(minimumCapacity:)();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v9, v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (Swift::UInt64 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t specialized Collection.count.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v3 = v0[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v5 = ViewList.count.getter(v3, v4);
  static Update.end()();
  _MovableLockUnlock(v2);
  _MovableLockLock(v2);
  specialized static Update.begin()();
  v6 = v1[3];
  v7 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v6);
  v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  result = _MovableLockUnlock(v2);
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v2);
    specialized static Update.begin()();
    v10 = v1[3];
    v11 = v1[4];
    __swift_project_boxed_opaque_existential_1(v1, v10);
    v12 = ViewList.count.getter(v10, v11);
    static Update.end()();
    result = _MovableLockUnlock(v2);
    if ((v5 & 0x8000000000000000) == 0 && v12 >= v5)
      return v5;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;

  v1 = v0[1];
  v2 = v0[2];
  v3 = *v0 + 48;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v1, v2), (v4 & 1) != 0))
  {
    swift_endAccess();
    swift_beginAccess();
    v5 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
        swift_endAccess();
        return specialized RandomAccessCollection<>.distance(from:to:)(0, *(_QWORD *)(v8 + 16));
      }
    }
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  v4 = v1[1];
  v3 = v1[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    if ((v5 & 1) != 0)
    {
      swift_endAccess();
      v6 = swift_release();
      v7 = specialized Text.Effect.DrawableContent.endIndex.getter(v6);
      return specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
    }
    swift_release();
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

void specialized Collection.count.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  int v3;
  void *v4;
  const __CTLine *v5;
  const __CTLine *v6;
  const __CFArray *RunCount;
  const __CTLine *v8;
  const __CFArray *v9;
  id v10;
  const __CFArray *v11;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(void **)v0;
  if (v3 == 1)
  {
    v5 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
    if (v5)
    {
      v6 = v5;
      RunCount = _CTLineGetRunCount(v5);

    }
    else
    {
      RunCount = 0;
    }
    v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
    if (!v8)
      goto LABEL_9;
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v4, *(_QWORD *)(v0 + 8), 0);
    swift_release();
    RunCount = _CTLineGetRunCount((const __CTLine *)v1);

    outlined copy of Text.Layout.Line.Line(v1, v2, 0);
    swift_release();
    v8 = (const __CTLine *)v1;
  }
  v9 = _CTLineGetRunCount(v8);

  if (((unint64_t)v9 & 0x8000000000000000) == 0)
  {
    if (!v3)
    {
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      goto LABEL_12;
    }
LABEL_9:
    v10 = (id)_NSTextLineFragmentGetCTLine(v1);
    if (!v10)
    {
      v11 = 0;
      if (((unint64_t)RunCount & 0x8000000000000000) != 0)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
LABEL_15:
      if ((uint64_t)v11 >= (uint64_t)RunCount)
        return;
      goto LABEL_16;
    }
    v1 = v10;
LABEL_12:
    v11 = _CTLineGetRunCount((const __CTLine *)v1);

    if (((unint64_t)RunCount & 0x8000000000000000) != 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  const __CTLine *v4;
  const __CTLine *v5;
  const __CFArray *RunCount;
  const __CTLine *v7;
  const __CFArray *v8;
  id v9;
  const __CFArray *v10;

  v1 = v0;
  v2 = *(void **)v0;
  v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 1)
  {
    v4 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(*(void **)v0);
    if (v4)
    {
      v5 = v4;
      RunCount = _CTLineGetRunCount(v4);

    }
    else
    {
      RunCount = 0;
    }
    v7 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v2);
    if (!v7)
      goto LABEL_9;
  }
  else
  {
    outlined retain of Text.Layout.Line(v0);
    swift_release();
    RunCount = _CTLineGetRunCount((const __CTLine *)v2);

    outlined retain of Text.Layout.Line(v1);
    swift_release();
    v7 = (const __CTLine *)v2;
  }
  v8 = _CTLineGetRunCount(v7);

  if (((unint64_t)v8 & 0x8000000000000000) == 0)
  {
    if (!v3)
    {
      outlined retain of Text.Layout.Line(v1);
      swift_release();
      goto LABEL_12;
    }
LABEL_9:
    v9 = (id)_NSTextLineFragmentGetCTLine(v2);
    if (!v9)
    {
      v10 = 0;
      if (((unint64_t)RunCount & 0x8000000000000000) != 0)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
LABEL_15:
      if ((uint64_t)v10 >= (uint64_t)RunCount)
        return;
      goto LABEL_16;
    }
    v2 = v9;
LABEL_12:
    v10 = _CTLineGetRunCount((const __CTLine *)v2);

    if (((unint64_t)RunCount & 0x8000000000000000) != 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

uint64_t specialized Collection.count.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v7 = v2[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = ViewList.count.getter(v7, v8);
  static Update.end()();
  result = _MovableLockUnlock(v6);
  if (a1 < 0 || v9 < a1)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v6);
    specialized static Update.begin()();
    v11 = v3[3];
    v12 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v11);
    v13 = ViewList.count.getter(v11, v12);
    static Update.end()();
    result = _MovableLockUnlock(v6);
    if ((a2 & 0x8000000000000000) == 0 && v13 >= a2)
      return a2 - a1;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v6 = v2[1];
  v5 = v2[2];
  v7 = *v2 + 48;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v7 + 16))
    goto LABEL_13;
  swift_retain();
  specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
  if ((v8 & 1) == 0)
  {
LABEL_12:
    swift_release();
LABEL_13:
    swift_endAccess();
    __break(1u);
    goto LABEL_14;
  }
  swift_endAccess();
  v9 = swift_release();
  v10 = specialized Text.Effect.DrawableContent.endIndex.getter(v9);
  if (a1 < 0 || v10 < a1)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v7 + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
    if ((v11 & 1) == 0)
    {
LABEL_14:
      swift_release();
      goto LABEL_15;
    }
    swift_endAccess();
    v12 = swift_release();
    v13 = specialized Text.Effect.DrawableContent.endIndex.getter(v12);
    if ((a2 & 0x8000000000000000) == 0 && v13 >= a2)
      return a2 - a1;
    goto LABEL_11;
  }
LABEL_15:
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  Swift::UInt64 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;

  v6 = *v2;
  v5 = v2[1];
  v7 = v2[2];
  v8 = *v2 + 48;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
    if ((v9 & 1) != 0)
    {
      swift_endAccess();
      swift_beginAccess();
      v10 = *(_QWORD *)v8;
      if (!*(_QWORD *)(*(_QWORD *)v8 + 16))
        goto LABEL_15;
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
      if ((v12 & 1) == 0)
        goto LABEL_15;
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
      swift_endAccess();
      if (*(_QWORD *)(v13 + 16) < a1)
      {
        __break(1u);
      }
      else
      {
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)v8 + 16))
          goto LABEL_16;
        specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
        if ((v14 & 1) == 0)
          goto LABEL_16;
        swift_endAccess();
        swift_beginAccess();
        v15 = *(_QWORD *)v8;
        if (!*(_QWORD *)(*(_QWORD *)v8 + 16))
          goto LABEL_17;
        v16 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
        if ((v17 & 1) == 0)
          goto LABEL_17;
        v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 16 * v16);
        swift_endAccess();
        if (*(_QWORD *)(v18 + 16) >= a2)
          return a2 - a1;
      }
      __break(1u);
    }
  }
  swift_endAccess();
  __break(1u);
LABEL_15:
  swift_endAccess();
  __break(1u);
LABEL_16:
  swift_endAccess();
  __break(1u);
LABEL_17:
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  v5 = *v2;
  result = swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 160) + 16);
  if (v7 < a1)
  {
    __break(1u);
  }
  else if (v7 >= a2)
  {
    return a2 - a1;
  }
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  int v7;
  const __CTLine *v8;
  const __CFArray *RunCount;
  const __CFArray *v10;

  v5 = *(id *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(unsigned __int8 *)(v2 + 16);
  if ((v7 & 1) != 0)
  {
    v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
    if (!v8)
    {
      if (a1)
      {
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v5, v6, 0);
    swift_release();
    v8 = (const __CTLine *)v5;
  }
  RunCount = _CTLineGetRunCount(v8);

  if (a1 < 0 || (uint64_t)RunCount < a1)
    goto LABEL_16;
  if (!v7)
  {
    outlined copy of Text.Layout.Line.Line(v5, v6, 0);
    swift_release();
    goto LABEL_12;
  }
LABEL_9:
  v5 = (id)_NSTextLineFragmentGetCTLine(v5);
  if (v5)
  {
LABEL_12:
    v10 = _CTLineGetRunCount((const __CTLine *)v5);

    goto LABEL_13;
  }
  v10 = 0;
LABEL_13:
  if (a2 < 0 || (uint64_t)v10 < a2)
    goto LABEL_17;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24) >> 1;
  v5 = __OFSUB__(v4, v3);
  v6 = v4 - v3;
  if (v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = *(unsigned __int8 *)(v2 + 32);
  v5 = __OFADD__(v7, v6);
  v8 = v7 + v6;
  if (v5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 >= a2 && v7 <= a2 && v7 <= result && v8 >= result)
    return a2 - result;
LABEL_16:
  __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
  if (v3 < result)
  {
    __break(1u);
  }
  else if (v3 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

uint64_t one-time initialization function for _textAnimation()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x6E4174786554534ELL, 0xEF6E6F6974616D69);
  static NSAttributedStringKey._textAnimation = result;
  return result;
}

uint64_t one-time initialization function for _textFilterAnimation()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000016, 0x80000002352E0D10);
  static NSAttributedStringKey._textFilterAnimation = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RawTextLayout(uint64_t *a1, uint64_t *a2)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGRect v11;
  CGRect v12;

  v2 = *((double *)a1 + 1);
  v3 = *((double *)a1 + 2);
  v4 = *((double *)a1 + 3);
  v5 = *((double *)a1 + 4);
  v6 = *((double *)a2 + 1);
  v7 = *((double *)a2 + 2);
  v8 = *((double *)a2 + 3);
  v9 = *((double *)a2 + 4);
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2))
    return 0;
  v11.origin.x = v2;
  v11.origin.y = v3;
  v11.size.width = v4;
  v11.size.height = v5;
  v12.origin.x = v6;
  v12.origin.y = v7;
  v12.size.width = v8;
  v12.size.height = v9;
  return CGRectEqualToRect(v11, v12);
}

void Text.Layout.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t isEscapingClosureAtFileLocation;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t CopyWithAttributeOverrides;
  id v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (*v37)();
  unint64_t v38;
  _QWORD aBlock[6];

  type metadata accessor for TextLayoutFragmentRenderer();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  isEscapingClosureAtFileLocation = a1;
  v6 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_3;
LABEL_22:

    swift_release();
    v31 = 0;
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
    swift_bridgeObjectRelease();
    v32 = v10[2];
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v31);
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v32;
    return;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    goto LABEL_22;
LABEL_3:
  if (v8 >= 1)
  {
    v33 = (void *)isEscapingClosureAtFileLocation;
    v34 = a2;
    v9 = 0;
    v37 = 0;
    v38 = v7 & 0xC000000000000001;
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v35 = v7;
    v36 = v8;
    while (1)
    {
      if (v38)
        v13 = (id)MEMORY[0x23B7C6D9C](v9, v7);
      else
        v13 = *(id *)(v7 + 8 * v9 + 32);
      v12 = v13;
      objc_msgSend(v13, sel_typographicBounds, v33);
      v15 = v14;
      v17 = v16;
      objc_msgSend(v12, sel_glyphOrigin);
      v19 = v18;
      v21 = v20;
      v22 = (id)_NSTextLineFragmentGetCTLine(v12);
      if (v22)
      {
        v7 = (unint64_t)v22;
        v23 = _NSTextLineFragmentGetOverridesHandler(v12);
        if (v23)
        {
          v24 = v23;
          a2 = swift_allocObject();
          *(_QWORD *)(a2 + 16) = v24;
          swift_retain();
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v37);
          v25 = swift_allocObject();
          *(_QWORD *)(v25 + 16) = thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)partial apply;
          *(_QWORD *)(v25 + 24) = a2;
          aBlock[4] = thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)partial apply;
          aBlock[5] = v25;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
          aBlock[3] = &block_descriptor_53;
          v26 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          CopyWithAttributeOverrides = CTLineCreateCopyWithAttributeOverrides();

          _Block_release(v26);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) != 0)
          {
            __break(1u);
            goto LABEL_21;
          }
          v37 = thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)partial apply;
          v7 = CopyWithAttributeOverrides;
        }
        else
        {

        }
        v28 = (id)v7;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        v30 = v10[2];
        v29 = v10[3];
        if (v30 >= v29 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v10);
        v10[2] = v30 + 1;
        v11 = &v10[6 * v30];
        v11[4] = v28;
        v11[5] = v4;
        *((_BYTE *)v11 + 48) = 0;
        *((double *)v11 + 7) = v15 + v19;
        *((double *)v11 + 8) = v17 + v21;
        *((_DWORD *)v11 + 18) = 0;

        v12 = v28;
        v7 = v35;
        v8 = v36;
      }
      ++v9;

      if (v8 == v9)
      {

        swift_release();
        a2 = v34;
        v31 = (uint64_t)v37;
        goto LABEL_23;
      }
    }
  }
  __break(1u);
}

uint64_t Text.Layout.effectsOrderAndMap.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  Swift::UInt64 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  const __CTLine *v14;
  const __CFArray *RunCount;
  id v16;
  void *v17;
  const __CTLine *v18;
  const __CFArray *v19;
  const __CTLine *v20;
  const __CFArray *v21;
  uint64_t v22;
  id v23;
  const __CTLine *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  const __CFDictionary *v28;
  const __CFArray *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::UInt64 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::UInt64 v54;
  unint64_t v55;
  uint64_t v56;
  const __CTLine *v57;
  const __CTLine *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  const __CFDictionary *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void *v68;
  uint64_t v69;
  id v70;
  Swift::String v71;
  void *v72;
  Swift::String v73;
  Swift::UInt64 v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::UInt64 v91;
  unint64_t v92;
  const __CFArray *v93;
  const __CFArray *v94;
  Swift::UInt64 v95;
  char isUniquelyReferenced_nonNull_native;
  char v97;
  unint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  char *v105;
  char *v106;
  Swift::UInt64 v107;
  char v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  const __CFArray *v125;
  const __CFArray *v126;
  Swift::UInt64 v127;
  char v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  _BOOL8 v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  Swift::UInt64 v142;
  BOOL v143;
  char v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  Swift::UInt64 v155;
  char v156;
  char v157;
  unint64_t v158;
  uint64_t v159;
  _BOOL8 v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  Swift::UInt64 v172;
  uint64_t v173;
  Swift::UInt64 v174;
  uint64_t result;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  void *v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  void *v186;
  _QWORD **v187;
  char *v188;
  __int128 v189;
  __int128 v190;
  _QWORD *v191;
  _QWORD *v192;
  Swift::UInt64 v193;
  void *v194;
  Swift::UInt64 v195;
  uint64_t v196;
  const __CFArray *v197;
  uint64_t v198;
  const __CFArray *v199;
  __int128 v200;
  __int128 v201;
  Swift::UInt64 v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;

  v177 = a1;
  v2 = *v1;
  v206 = MEMORY[0x24BEE4B08];
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    v171 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v172 = MEMORY[0x24BEE4B00];
    v173 = MEMORY[0x24BEE4B08];
    v174 = MEMORY[0x24BEE4B00];
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_106;
  }
  v179 = v2 + 32;
  v4 = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4B00];
  v8 = MEMORY[0x24BEE4AD8];
  v198 = MEMORY[0x24BEE4AD8] + 8;
  v190 = xmmword_235283260;
  v183 = (unint64_t)"_NSTextFilterAnimation";
  v181 = (void *)0x80000002352E0D30;
  v189 = xmmword_23527E860;
  v180 = (void *)0x80000002352E0BF0;
  v193 = MEMORY[0x24BEE4B00];
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  v178 = v4;
  while (2)
  {
    if (v5 >= v3)
    {
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v195 = v7;
    v192 = v6;
    v10 = v179 + 48 * v5;
    v12 = *(void **)v10;
    v11 = *(_QWORD *)(v10 + 8);
    v13 = *(unsigned __int8 *)(v10 + 16);
    v185 = v5 + 1;
    v205 = v13;
    outlined copy of Text.Layout.Line.Line(v12, v11, v13);
    outlined copy of Text.Layout.Line.Line(v12, v11, v13);
    v199 = 0;
    v184 = v13;
    v196 = v11;
    v194 = v12;
    while ((v13 & 1) == 0)
    {
      outlined copy of Text.Layout.Line.Line(v12, v11, 0);
      swift_release();
      v14 = (const __CTLine *)v12;
LABEL_14:
      RunCount = _CTLineGetRunCount(v14);

      if (v199 == RunCount)
        goto LABEL_3;
      if ((v13 & 1) == 0)
      {
        outlined copy of Text.Layout.Line.Line(v12, v11, 0);
        swift_release();
        outlined copy of Text.Layout.Line.Line(v12, v11, 0);

        outlined copy of Text.Layout.Line.Line(v12, v11, 0);
        outlined copy of Text.Layout.Line.Line(v12, v11, 0);
        swift_release();
        v20 = (const __CTLine *)v12;
        v17 = v12;
        v19 = (const __CFArray *)v11;
        goto LABEL_20;
      }
LABEL_16:
      v16 = (id)_NSTextLineFragmentGetCTLine(v12);
      if (!v16)
        goto LABEL_117;
      v17 = v16;
      outlined copy of Text.Layout.Line.Line(v12, v11, 1);
      v18 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v12);
      v19 = 0;
      if (v18)
      {
        v20 = v18;
LABEL_20:
        v21 = v19;
        v19 = _CTLineGetRunCount(v20);

        goto LABEL_22;
      }
      LOBYTE(v13) = 1;
      v21 = 0;
LABEL_22:
      outlined consume of Text.Layout.Line.Line(v12, v11, v13 & 1);
      if ((uint64_t)v199 >= (uint64_t)v19)
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
      v22 = one-time initialization token for _textAnimation;
      v23 = v17;
      swift_retain();
      if (v22 != -1)
        swift_once();
      v24 = (const __CTLine *)v23;
      swift_retain();
      v25 = (id)_CTLineGetRunAtIndex(v24, (CFIndex)v199);
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = (void *)MEMORY[0x23B7C5DAC](v26);
      swift_bridgeObjectRelease();
      v28 = _CTRunGetAttributeValueForKey((const __CTRun *)v25, v27);

      if (v28)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v200 = 0u;
        v201 = 0u;
      }
      outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v200, (uint64_t)&v202, (unint64_t *)&lazy cache variable for type metadata for Any?, v198);
      swift_release();

      if (!v204)
      {
        outlined destroy of Any?((uint64_t)&v202, (uint64_t)&lazy cache variable for type metadata for Any?, v8 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_37:
        swift_release();

        goto LABEL_38;
      }
      type metadata accessor for AnyTextEffect();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_37;
      v29 = (const __CFArray *)v200;
      swift_release();

      v197 = (const __CFArray *)OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
      v30 = *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      if (v9[2]
        && (v31 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)((char *)v29
                                                                           + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id)),
            (v32 & 1) != 0))
      {
        if (v29 != *(const __CFArray **)(v9[7] + 8 * v31))
        {
          v197 = v29;
          v191 = v9;
          v188 = (char *)&v177;
          LODWORD(v187) = static os_log_type_t.fault.getter();
          if (one-time initialization token for internalErrorsLog != -1)
            swift_once();
          swift_beginAccess();
          v33 = (void *)static Log.internalErrorsLog;
          type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          v34 = swift_allocObject();
          *(_OWORD *)(v34 + 16) = v190;
          v202 = 0;
          v203 = 0xE000000000000000;
          v35 = v33;
          _StringGuts.grow(_:)(37);
          v36._object = (void *)(v183 | 0x8000000000000000);
          v186 = (void *)(v183 | 0x8000000000000000);
          v36._countAndFlagsBits = 0xD000000000000023;
          String.append(_:)(v36);
          *(_QWORD *)&v200 = v30;
          _print_unlocked<A, B>(_:_:)();
          v37._countAndFlagsBits = 0;
          v37._object = (void *)0xE000000000000000;
          String.append(_:)(v37);
          v38 = v202;
          v39 = v203;
          v40 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE0D00];
          v41 = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v34 + 64) = v41;
          *(_QWORD *)(v34 + 32) = v38;
          *(_QWORD *)(v34 + 40) = v39;
          v42 = StaticString.description.getter();
          *(_QWORD *)(v34 + 96) = v40;
          *(_QWORD *)(v34 + 104) = v41;
          *(_QWORD *)(v34 + 72) = v42;
          *(_QWORD *)(v34 + 80) = v43;
          v202 = 107;
          v44 = dispatch thunk of CustomStringConvertible.description.getter();
          *(_QWORD *)(v34 + 136) = v40;
          *(_QWORD *)(v34 + 144) = v41;
          *(_QWORD *)(v34 + 112) = v44;
          *(_QWORD *)(v34 + 120) = v45;
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          v8 = MEMORY[0x24BEE4AD8];
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v46 = swift_allocObject();
          *(_OWORD *)(v46 + 16) = v189;
          v202 = 0;
          v203 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          v202 = 0;
          v203 = 0xE000000000000000;
          _StringGuts.grow(_:)(37);
          v47._countAndFlagsBits = 0xD000000000000023;
          v47._object = v186;
          String.append(_:)(v47);
          *(_QWORD *)&v200 = v30;
          _print_unlocked<A, B>(_:_:)();
          v48._countAndFlagsBits = 0;
          v48._object = (void *)0xE000000000000000;
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          v49._countAndFlagsBits = 2108704;
          v49._object = (void *)0xE300000000000000;
          String.append(_:)(v49);
          v50._countAndFlagsBits = StaticString.description.getter();
          String.append(_:)(v50);
          swift_bridgeObjectRelease();
          v51._countAndFlagsBits = 58;
          v51._object = (void *)0xE100000000000000;
          String.append(_:)(v51);
          *(_QWORD *)&v200 = 107;
          v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v52);
          swift_bridgeObjectRelease();
          v53._countAndFlagsBits = 0xD00000000000001CLL;
          v53._object = (void *)(v182 | 0x8000000000000000);
          String.append(_:)(v53);
          v54 = v202;
          v55 = v203;
          *(_QWORD *)(v46 + 56) = v40;
          *(_QWORD *)(v46 + 32) = v54;
          *(_QWORD *)(v46 + 40) = v55;
          print(_:separator:terminator:)();

          swift_bridgeObjectRelease();
          v11 = v196;
          v9 = v191;
          goto LABEL_38;
        }
        v118 = v9;
      }
      else
      {
        v93 = v29;
        v94 = v29;
        v95 = (Swift::UInt64)v9;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v202 = v95;
        v98 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        v99 = *(_QWORD *)(v95 + 16);
        v100 = (v97 & 1) == 0;
        v101 = v99 + v100;
        if (__OFADD__(v99, v100))
          goto LABEL_110;
        v102 = v97;
        if (*(_QWORD *)(v95 + 24) >= v101)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v101, isUniquelyReferenced_nonNull_native);
          v103 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v102 & 1) != (v104 & 1))
            goto LABEL_118;
          v98 = v103;
        }
        v118 = (_QWORD *)v202;
        v119 = 8 * v98;
        if ((v102 & 1) != 0)
        {
          v120 = *(_QWORD *)(v202 + 56);

          *(_QWORD *)(v120 + v119) = v94;
        }
        else
        {
          *(_QWORD *)(v202 + 8 * (v98 >> 6) + 64) |= 1 << v98;
          *(_QWORD *)(v118[6] + 8 * v98) = v30;
          *(_QWORD *)(v118[7] + 8 * v98) = v94;
          v121 = v118[2];
          v122 = __OFADD__(v121, 1);
          v123 = v121 + 1;
          if (v122)
            goto LABEL_114;
          v118[2] = v123;
        }
        swift_bridgeObjectRelease();
        v29 = v93;
      }
      v124 = *(_QWORD *)((char *)v197 + (_QWORD)v29);
      v125 = v29;
      v126 = v29;
      v127 = v193;
      v128 = swift_isUniquelyReferenced_nonNull_native();
      v202 = v127;
      v130 = specialized __RawDictionaryStorage.find<A>(_:)(v124);
      v131 = *(_QWORD *)(v127 + 16);
      v132 = (v129 & 1) == 0;
      v133 = v131 + v132;
      if (__OFADD__(v131, v132))
        goto LABEL_108;
      v134 = v129;
      if (*(_QWORD *)(v127 + 24) >= v133)
      {
        if ((v128 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v133, v128);
        v135 = specialized __RawDictionaryStorage.find<A>(_:)(v124);
        if ((v134 & 1) != (v136 & 1))
          goto LABEL_118;
        v130 = v135;
      }
      v9 = v118;
      v137 = (_QWORD *)v202;
      v12 = v194;
      v193 = v202;
      if ((v134 & 1) != 0)
      {
        v138 = *(_QWORD *)(v202 + 56);

        *(_QWORD *)(v138 + 8 * v130) = v126;
      }
      else
      {
        *(_QWORD *)(v202 + 8 * (v130 >> 6) + 64) |= 1 << v130;
        v139 = 8 * v130;
        *(_QWORD *)(v137[6] + v139) = v124;
        *(_QWORD *)(v137[7] + v139) = v126;
        v140 = v137[2];
        v122 = __OFADD__(v140, 1);
        v141 = v140 + 1;
        if (v122)
          goto LABEL_112;
        v137[2] = v141;
      }
      swift_bridgeObjectRelease();
      v142 = *(_QWORD *)((char *)v197 + (_QWORD)v125);
      v143 = specialized Set.contains(_:)(v142, v206);
      v8 = MEMORY[0x24BEE4AD8];
      if (v143)
      {

        v11 = v196;
      }
      else
      {
        specialized Set._Variant.insert(_:)(&v202, v142);
        v144 = swift_isUniquelyReferenced_nonNull_native();
        v11 = v196;
        if ((v144 & 1) != 0)
          v145 = v192;
        else
          v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v192[2] + 1, 1, v192);
        v147 = v145[2];
        v146 = v145[3];
        if (v147 >= v146 >> 1)
          v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v146 > 1), v147 + 1, 1, v145);
        v145[2] = v147 + 1;
        v192 = v145;
        v145[v147 + 4] = v142;

      }
LABEL_38:
      v56 = one-time initialization token for _textFilterAnimation;
      v57 = v24;
      swift_retain();
      if (v56 != -1)
        swift_once();
      v58 = v57;
      swift_retain();
      v59 = (id)_CTLineGetRunAtIndex(v58, (CFIndex)v199);
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v61 = (void *)MEMORY[0x23B7C5DAC](v60);
      swift_bridgeObjectRelease();
      v62 = _CTRunGetAttributeValueForKey((const __CTRun *)v59, v61);

      if (v62)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v200 = 0u;
        v201 = 0u;
      }
      outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v200, (uint64_t)&v202, (unint64_t *)&lazy cache variable for type metadata for Any?, v8 + 8);
      swift_release();

      if (!v204)
      {
        outlined destroy of Any?((uint64_t)&v202, (uint64_t)&lazy cache variable for type metadata for Any?, v8 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_7:
        swift_release_n();

        goto LABEL_8;
      }
      type metadata accessor for AnyTextFilterEffect();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_7;
      v63 = (char *)v200;
      v197 = v21;
      swift_release();

      v64 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
      v65 = *(_QWORD *)&v63[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
      if (v9[2]
        && (v66 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)&v63[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id]),
            (v67 & 1) != 0))
      {
        if (v63 != *(char **)(v9[7] + 8 * v66))
        {
          v191 = v9;
          v187 = &v177;
          v188 = v63;
          static os_log_type_t.fault.getter();
          if (one-time initialization token for internalErrorsLog != -1)
            swift_once();
          swift_beginAccess();
          v68 = (void *)static Log.internalErrorsLog;
          type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = v190;
          v202 = 0;
          v203 = 0xE000000000000000;
          v70 = v68;
          _StringGuts.grow(_:)(37);
          v71._countAndFlagsBits = 0xD000000000000023;
          v72 = v181;
          v71._object = v181;
          String.append(_:)(v71);
          *(_QWORD *)&v200 = v65;
          _print_unlocked<A, B>(_:_:)();
          v73._countAndFlagsBits = 0;
          v73._object = (void *)0xE000000000000000;
          String.append(_:)(v73);
          v74 = v202;
          v75 = v203;
          v76 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v69 + 56) = MEMORY[0x24BEE0D00];
          v77 = lazy protocol witness table accessor for type String and conformance String();
          v186 = (void *)v65;
          v78 = v77;
          *(_QWORD *)(v69 + 64) = v77;
          *(_QWORD *)(v69 + 32) = v74;
          *(_QWORD *)(v69 + 40) = v75;
          v79 = StaticString.description.getter();
          *(_QWORD *)(v69 + 96) = v76;
          *(_QWORD *)(v69 + 104) = v78;
          *(_QWORD *)(v69 + 72) = v79;
          *(_QWORD *)(v69 + 80) = v80;
          v202 = 107;
          v81 = dispatch thunk of CustomStringConvertible.description.getter();
          *(_QWORD *)(v69 + 136) = v76;
          *(_QWORD *)(v69 + 144) = v78;
          *(_QWORD *)(v69 + 112) = v81;
          *(_QWORD *)(v69 + 120) = v82;
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          v8 = MEMORY[0x24BEE4AD8];
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v83 = swift_allocObject();
          *(_OWORD *)(v83 + 16) = v189;
          v202 = 0;
          v203 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          v202 = 0;
          v203 = 0xE000000000000000;
          _StringGuts.grow(_:)(37);
          v84._countAndFlagsBits = 0xD000000000000023;
          v84._object = v72;
          String.append(_:)(v84);
          *(_QWORD *)&v200 = v186;
          _print_unlocked<A, B>(_:_:)();
          v85._countAndFlagsBits = 0;
          v85._object = (void *)0xE000000000000000;
          String.append(_:)(v85);
          swift_bridgeObjectRelease();
          v86._countAndFlagsBits = 2108704;
          v86._object = (void *)0xE300000000000000;
          String.append(_:)(v86);
          v87._countAndFlagsBits = StaticString.description.getter();
          String.append(_:)(v87);
          swift_bridgeObjectRelease();
          v88._countAndFlagsBits = 58;
          v88._object = (void *)0xE100000000000000;
          String.append(_:)(v88);
          *(_QWORD *)&v200 = 107;
          v89._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v89);
          swift_bridgeObjectRelease();
          v90._countAndFlagsBits = 0xD00000000000001CLL;
          v90._object = v180;
          String.append(_:)(v90);
          v91 = v202;
          v92 = v203;
          *(_QWORD *)(v83 + 56) = v76;
          *(_QWORD *)(v83 + 32) = v91;
          *(_QWORD *)(v83 + 40) = v92;
          print(_:separator:terminator:)();

          swift_release();
          swift_bridgeObjectRelease();
          v11 = v196;
          v9 = v191;
          goto LABEL_8;
        }
        v148 = v9;
      }
      else
      {
        v105 = v63;
        v106 = v63;
        v107 = (Swift::UInt64)v9;
        v108 = swift_isUniquelyReferenced_nonNull_native();
        v202 = v107;
        v109 = v65;
        v111 = specialized __RawDictionaryStorage.find<A>(_:)(v65);
        v112 = *(_QWORD *)(v107 + 16);
        v113 = (v110 & 1) == 0;
        v114 = v112 + v113;
        if (__OFADD__(v112, v113))
          goto LABEL_111;
        v115 = v110;
        if (*(_QWORD *)(v107 + 24) >= v114)
        {
          if ((v108 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v114, v108);
          v116 = specialized __RawDictionaryStorage.find<A>(_:)(v109);
          if ((v115 & 1) != (v117 & 1))
            goto LABEL_118;
          v111 = v116;
        }
        v148 = (_QWORD *)v202;
        v149 = 8 * v111;
        if ((v115 & 1) != 0)
        {
          v150 = *(_QWORD *)(v202 + 56);

          *(_QWORD *)(v150 + v149) = v106;
        }
        else
        {
          *(_QWORD *)(v202 + 8 * (v111 >> 6) + 64) |= 1 << v111;
          *(_QWORD *)(v148[6] + 8 * v111) = v109;
          *(_QWORD *)(v148[7] + 8 * v111) = v106;
          v151 = v148[2];
          v122 = __OFADD__(v151, 1);
          v152 = v151 + 1;
          if (v122)
            goto LABEL_115;
          v148[2] = v152;
        }
        swift_bridgeObjectRelease();
        v63 = v105;
      }
      v153 = *(_QWORD *)&v63[v64];
      v154 = v63;
      v155 = v195;
      v156 = swift_isUniquelyReferenced_nonNull_native();
      v202 = v155;
      v158 = specialized __RawDictionaryStorage.find<A>(_:)(v153);
      v159 = *(_QWORD *)(v155 + 16);
      v160 = (v157 & 1) == 0;
      v161 = v159 + v160;
      if (__OFADD__(v159, v160))
        goto LABEL_109;
      v162 = v157;
      if (*(_QWORD *)(v155 + 24) >= v161)
      {
        v11 = v196;
        if ((v156 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v161, v156);
        v163 = specialized __RawDictionaryStorage.find<A>(_:)(v153);
        v11 = v196;
        if ((v162 & 1) != (v164 & 1))
          goto LABEL_118;
        v158 = v163;
      }
      v9 = v148;
      v165 = (_QWORD *)v202;
      v12 = v194;
      v195 = v202;
      if ((v162 & 1) != 0)
      {
        v166 = *(_QWORD *)(v202 + 56);
        v167 = 8 * v158;

        *(_QWORD *)(v166 + v167) = v154;
      }
      else
      {
        *(_QWORD *)(v202 + 8 * (v158 >> 6) + 64) |= 1 << v158;
        v168 = 8 * v158;
        *(_QWORD *)(v165[6] + v168) = v153;
        *(_QWORD *)(v165[7] + v168) = v154;
        v169 = v165[2];
        v122 = __OFADD__(v169, 1);
        v170 = v169 + 1;
        if (v122)
          goto LABEL_113;
        v165[2] = v170;
      }

      swift_release();
      swift_bridgeObjectRelease();
      v8 = MEMORY[0x24BEE4AD8];
LABEL_8:
      LOBYTE(v13) = v205;
      v199 = (const __CFArray *)((char *)v199 + 1);
    }
    v14 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v12);
    if (v14)
      goto LABEL_14;
    if (v199)
      goto LABEL_16;
    LOBYTE(v13) = 1;
LABEL_3:
    outlined consume of Text.Layout.Line.Line(v12, v11, v13 & 1);
    outlined consume of Text.Layout.Line.Line(v12, v11, v184);
    v3 = *(_QWORD *)(v178 + 16);
    v5 = v185;
    v6 = v192;
    v7 = v195;
    if (v185 != v3)
      continue;
    break;
  }
  v171 = v192;
  v172 = v195;
  swift_bridgeObjectRelease();
  v173 = MEMORY[0x24BEE4B08];
  v174 = v193;
LABEL_106:
  result = swift_bridgeObjectRelease();
  v176 = v177;
  *v177 = v171;
  v176[1] = v9;
  v176[2] = v174;
  v176[3] = v172;
  v176[4] = v173;
  return result;
}

void Text.Layout.Line.baseWritingDirection.getter(BOOL *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFDictionary *v11;
  uint64_t v12;
  id v13;
  id v14;
  BOOL v15;
  id v16[2];
  __int128 v17;
  _BYTE v18[24];
  uint64_t v19;
  __int128 v20;
  _OWORD v21[2];

  v3 = v1[1];
  v20 = *v1;
  v21[0] = v3;
  *(_OWORD *)((char *)v21 + 12) = *(__int128 *)((char *)v1 + 28);
  outlined retain of Text.Layout.Line((uint64_t)&v20);
  specialized Collection.count.getter();
  v5 = v4;
  outlined release of Text.Layout.Line((uint64_t)&v20);
  if (v5 < 1)
    goto LABEL_19;
  v6 = (void *)v20;
  if ((v21[0] & 1) == 0)
  {
    outlined retain of Text.Layout.Line((uint64_t)&v20);
    outlined retain of Text.Layout.Line((uint64_t)&v20);

    swift_release();
LABEL_6:
    if (one-time initialization token for kitParagraphStyle != -1)
      swift_once();
    v8 = (id)_CTLineGetRunAtIndex((const __CTLine *)v6, 0);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = (void *)MEMORY[0x23B7C5DAC](v9);
    swift_bridgeObjectRelease();
    v11 = _CTRunGetAttributeValueForKey((const __CTRun *)v8, v10);

    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      *(_OWORD *)v16 = 0u;
      v17 = 0u;
    }
    v12 = MEMORY[0x24BEE4AD8] + 8;
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v16, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
    swift_release();

    if (v19)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
      if (swift_dynamicCast())
      {
        v13 = v16[0];
        goto LABEL_16;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Any?, v12, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    }
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB498]), sel_init);
LABEL_16:
    v14 = objc_msgSend(v13, sel_baseWritingDirection, v16[0], v16[1], v17);

    if (!v14)
    {
      v15 = 0;
      goto LABEL_21;
    }
    if (v14 == (id)1)
    {
      v15 = 1;
LABEL_21:
      *a1 = v15;
      return;
    }
LABEL_19:
    v15 = objc_msgSend((id)objc_opt_self(), sel_defaultWritingDirectionForLanguage_, 0) == (id)1;
    goto LABEL_21;
  }
  outlined retain of Text.Layout.Line((uint64_t)&v20);
  v7 = (id)_NSTextLineFragmentGetCTLine(v6);
  if (v7)
  {
    v6 = v7;
    outlined release of Text.Layout.Line((uint64_t)&v20);
    goto LABEL_6;
  }
  __break(1u);
}

id Text.Layout.Line.paragraphStyle.getter()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id result;
  void *v6;
  uint64_t v7;
  void *v8;
  const __CFDictionary *v9;
  uint64_t v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  _OWORD v15[2];

  v1 = v0[1];
  v14 = *v0;
  v15[0] = v1;
  *(_OWORD *)((char *)v15 + 12) = *(__int128 *)((char *)v0 + 28);
  outlined retain of Text.Layout.Line((uint64_t)&v14);
  specialized Collection.count.getter();
  v3 = v2;
  outlined release of Text.Layout.Line((uint64_t)&v14);
  if (v3 < 1)
    return objc_msgSend((id)objc_opt_self(), sel_defaultParagraphStyle);
  v4 = (void *)v14;
  if ((v15[0] & 1) == 0)
  {
    outlined retain of Text.Layout.Line((uint64_t)&v14);
    outlined retain of Text.Layout.Line((uint64_t)&v14);

    swift_release();
LABEL_6:
    if (one-time initialization token for kitParagraphStyle != -1)
      swift_once();
    v6 = (id)_CTLineGetRunAtIndex((const __CTLine *)v4, 0);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = (void *)MEMORY[0x23B7C5DAC](v7);
    swift_bridgeObjectRelease();
    v9 = _CTRunGetAttributeValueForKey((const __CTRun *)v6, v8);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    v10 = MEMORY[0x24BEE4AD8] + 8;
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
    swift_release();

    if (v13)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
      if ((swift_dynamicCast() & 1) != 0)
        return *(id *)&v11[0];
    }
    else
    {
      outlined destroy of Any?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Any?, v10, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    }
    return objc_msgSend((id)objc_opt_self(), sel_defaultParagraphStyle);
  }
  outlined retain of Text.Layout.Line((uint64_t)&v14);
  result = (id)_NSTextLineFragmentGetCTLine(v4);
  if (result)
  {
    v4 = result;
    outlined release of Text.Layout.Line((uint64_t)&v14);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void Text.Layout.Line.horizontalAlignmentFactor.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  id v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v2 = *v0;
  v1 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  v5 = v0[3];
  v4 = v0[4];
  v6 = *((_DWORD *)v0 + 10);
  v10 = *v0;
  v11 = v1;
  v12 = v3;
  v13 = v5;
  v14 = v4;
  v15 = v6;
  v7 = Text.Layout.Line.paragraphStyle.getter();
  v8 = objc_msgSend(v7, sel_horizontalAlignment);

  switch((unint64_t)v8)
  {
    case 0uLL:
    case 1uLL:
      v10 = v2;
      v11 = v1;
      v12 = v3;
      v13 = v5;
      v14 = v4;
      v15 = v6;
      Text.Layout.Line.baseWritingDirection.getter(&v9);
      break;
    default:
      return;
  }
}

uint64_t TextLinesLayer.init(layer:)(uint64_t a1)
{
  void *v1;
  objc_class *ObjectType;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  id v11;
  uint64_t result;
  objc_super v13;
  char *v14;
  char v15[32];

  ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v15);
  v4 = v1;
  if (swift_dynamicCast())
  {
    v5 = v14;
    v6 = *(_QWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 8];
    v7 = *(_QWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 16];
    v8 = &v4[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
    v9 = *(_OWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 24];
    v10 = *(_OWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 40];
    *(_QWORD *)v8 = *(_QWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
    *((_QWORD *)v8 + 1) = v6;
    *((_QWORD *)v8 + 2) = v7;
    *(_OWORD *)(v8 + 24) = v9;
    *(_OWORD *)(v8 + 40) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    v13.receiver = v4;
    v13.super_class = ObjectType;
    v11 = objc_msgSendSuper2(&v13, sel_initWithLayer_, v5);
    objc_msgSend(v11, sel_setOpaque_, 0);
    objc_msgSend(v11, sel_setNeedsDisplay);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v11;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in TextLinesLayer.draw(in:)(CGContext *a1, id a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void (*v11)(uint64_t *);
  void *v12;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;

  objc_msgSend(a2, sel_contentsScale);
  v7 = v6;
  v15 = 0;
  v16 = 0;
  v8 = one-time initialization token for shared;
  v9 = a2;
  v10 = a3;
  if (v8 != -1)
    swift_once();
  swift_beginAccess();
  v11 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v12 = static CoreGlue2.shared;
  v11(&v15);

  v14[0] = v15;
  v14[1] = v16;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v14, v7, 0, (uint64_t)v9, (uint64_t)v10);

  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in TextLinesLayer.draw(in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *location;
  CFIndex v26;
  CFIndex length;
  const __CTLine *v28;
  CFRange StringRange;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  char v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _BYTE v75[144];
  uint64_t v76[19];

  v64 = a1;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v59 = (char *)v49 - v6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v49 - v8;
  v10 = a2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content;
  v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v58 = v9;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(v13 + 16);
    v15 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout;
    v62 = v11;
    swift_bridgeObjectRetain();
    v63 = v13;
    swift_bridgeObjectRetain();
    v57 = v14;
    if (v14)
    {
      v16 = 0;
      v17 = 0;
      v56 = a3 + v15;
      v18 = v63 + 40;
      v55 = v12 - 1;
      v49[1] = a3;
      while (v16 < *(_QWORD *)(v63 + 16))
      {
        v66 = v18;
        v67 = v17;
        v19 = v62 + v17;
        v21 = *(char **)(v62 + v17 + 32);
        v20 = *(_QWORD *)(v62 + v17 + 40);
        v22 = *(unsigned __int8 *)(v62 + v17 + 48);
        v23 = *(_QWORD *)(v19 + 56);
        v24 = *(_QWORD *)(v19 + 64);
        v65 = *(_DWORD *)(v19 + 72);
        v68 = v22;
        if ((v22 & 1) != 0)
        {
          outlined copy of Text.Layout.Line.Line(v21, v20, 1);
          location = (char *)objc_msgSend(v21, sel_characterRange);
          length = v26;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v21, v20, 0);
          outlined copy of Text.Layout.Line.Line(v21, v20, 0);
          v28 = v21;
          StringRange = CTLineGetStringRange(v28);
          location = (char *)StringRange.location;
          length = StringRange.length;

          outlined consume of Text.Layout.Line.Line(v21, v20, 0);
        }
        v30 = (uint64_t)v58;
        if (__OFADD__(location, length))
          goto LABEL_23;
        if ((uint64_t)&location[length] < (uint64_t)location)
          goto LABEL_24;
        v69 = location;
        v70 = &location[length];
        lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
        RangeSet.init(_:)();
        outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v56, (uint64_t)v75, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
        outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v75, (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
        if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v76) != 1)
        {
          v31 = TextRenderLayer.textMarkers(for:)(v30);
          if (v31)
          {
            v32 = v31;
            v69 = v21;
            v70 = (char *)v20;
            v33 = v68;
            v71 = v68;
            v72 = v23;
            v73 = v24;
            v74 = v65;
            v34 = type metadata accessor for Text.Effect.InteractionMetrics();
            v53 = v20;
            v35 = v21;
            v36 = (uint64_t)v59;
            v50 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
            v51 = v34;
            v50(v59, 1, 1);
            v37 = swift_bridgeObjectRetain();
            v38 = v64;
            TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(v37, (uint64_t)&v69, v30, v36, v64);
            v52 = v39;
            swift_bridgeObjectRelease();
            outlined destroy of Any?(v36, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
            v40 = *v38;
            v54 = v35;
            v69 = v35;
            v20 = v53;
            v70 = (char *)v53;
            v41 = v33;
            v71 = v33;
            v42 = v65;
            v72 = v23;
            v73 = v24;
            v74 = v65;
            GraphicsContext.draw(_:options:)((uint64_t)&v69, 0, v40);
            if ((v52 & 1) != 0)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v69 = v54;
              v70 = (char *)v20;
              v71 = v41;
              v72 = v23;
              v73 = v24;
              v74 = v42;
              v45 = (uint64_t)v59;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v50)(v59, 1, 1, v51);
              TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(v32, (uint64_t)&v69, v30, v45, v64);
              swift_bridgeObjectRelease();
              outlined destroy of Any?(v45, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
              v41 = v68;
            }
            v43 = v54;
          }
          else
          {
            v44 = *v64;
            v69 = v21;
            v70 = (char *)v20;
            v41 = v68;
            v71 = v68;
            v72 = v23;
            v73 = v24;
            v42 = v65;
            v74 = v65;
            GraphicsContext.draw(_:options:)((uint64_t)&v69, 0, v44);
            v43 = v21;
          }
          v69 = v43;
          v70 = (char *)v20;
          v71 = v41;
          v72 = v23;
          v73 = v24;
          v74 = v42;
          v46 = v43;
          v47 = type metadata accessor for Text.Effect.InteractionMetrics();
          v48 = (uint64_t)v59;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v59, 1, 1, v47);
          TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)((uint64_t)&v69, v30, v48, v64);
          outlined destroy of Any?(v48, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
          v21 = v46;
        }
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v30, v61);
        outlined consume of Text.Layout.Line.Line(v21, v20, v68);
        if (v55 != v16)
        {
          ++v16;
          v18 = v66 + 16;
          v17 = v67 + 48;
          if (v57 != v16)
            continue;
        }
        goto LABEL_20;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
    else
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t type metadata accessor for TextLinesLayer()
{
  return objc_opt_self();
}

uint64_t TextRunsLayer.init(layer:)(uint64_t a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  objc_super v14;
  void *v15;
  _BYTE v16[32];

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v16);
  v8 = v2;
  if (swift_dynamicCast())
  {
    v9 = v15;
    v10 = (uint64_t)v15 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
    swift_beginAccess();
    outlined init with copy of TypesettingLanguage(v10, (uint64_t)v7, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, (uint64_t)v8 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);

    v14.receiver = v8;
    v14.super_class = ObjectType;
    v11 = objc_msgSendSuper2(&v14, sel_initWithLayer_, v9);
    objc_msgSend(v11, sel_setOpaque_, 0);
    objc_msgSend(v11, sel_setNeedsDisplay);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v11;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t @objc TextLinesLayer.init(layer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v6;

  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return a4(&v6);
}

uint64_t closure #1 in TextRunsLayer.draw(in:)(CGContext *a1, id a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void (*v11)(uint64_t *);
  void *v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  objc_msgSend(a2, sel_contentsScale);
  v7 = v6;
  v15 = 0;
  v16 = 0;
  v8 = one-time initialization token for shared;
  v9 = a3;
  v10 = a2;
  if (v8 != -1)
    swift_once();
  swift_beginAccess();
  v11 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v12 = static CoreGlue2.shared;
  v11(&v15);

  v14[0] = v15;
  v14[1] = v16;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, (uint64_t)v14, v7, 0, (uint64_t)v9, v10);

  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in TextRunsLayer.draw(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = MEMORY[0x24BEE1780];
  type metadata accessor for Set<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v47 - v6;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v47 - v8;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v51 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v50 = (char *)&v47 - v10;
  type metadata accessor for Set<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, v4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v12 = v11;
  v47 = *(_QWORD *)(v11 - 8);
  v13 = v47;
  MEMORY[0x24BDAC7A8](v11);
  v48 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v56 = (char *)&v47 - v16;
  v17 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0);
  MEMORY[0x24BDAC7A8](v49);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
  swift_beginAccess();
  outlined init with copy of TypesettingLanguage(v22, (uint64_t)v19, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  v23 = *(void **)v19;
  v24 = *((_QWORD *)v19 + 1);
  v25 = v19[16];
  v26 = *((_QWORD *)v19 + 3);
  v27 = *((_QWORD *)v19 + 4);
  v28 = *((_DWORD *)v19 + 10);
  v29 = &v19[*(int *)(v17 + 24)];
  v30 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v31 = v56;
  v30(v56, v29, v12);
  *(_QWORD *)v21 = v23;
  *((_QWORD *)v21 + 1) = v24;
  v21[16] = v25;
  *((_QWORD *)v21 + 3) = v26;
  *((_QWORD *)v21 + 4) = v27;
  *((_DWORD *)v21 + 10) = v28;
  v32 = v48;
  v30(v48, v31, v12);
  outlined copy of Text.Layout.Line.Line(v23, v24, v25);
  v33 = v53;
  RangeSet.ranges.getter();
  v34 = *(void (**)(char *, uint64_t))(v47 + 8);
  v34(v32, v12);
  v36 = v54;
  v35 = v55;
  v37 = (uint64_t)v52;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v52, v33, v55);
  v38 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(&v50[*(int *)(v51 + 48)], v37, v35);
  *v38 = 0;
  v38[1] = 0;
  v34(v56, v12);
  outlined destroy of RangeSet<Int><>.IndexSequence(v37);
  outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v38, (uint64_t)&v21[*(int *)(v49 + 20)]);
  outlined destroy of TypesettingConfiguration((uint64_t)v19, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  Text.Effect.RenderSegmentation.StaticRuns.Iterator.next()((uint64_t)&v57);
  v39 = v57;
  if (v57)
  {
    v40 = v58;
    v41 = v59;
    v42 = v60;
    v43 = v61;
    v44 = v62;
    do
    {
      v45 = *a1;
      v57 = v39;
      v58 = v40;
      v59 = v41;
      v60 = v42;
      LODWORD(v61) = v43;
      v62 = v44;
      GraphicsContext.draw(_:options:)((uint64_t)&v57, 0, v45);
      outlined consume of Text.Layout.Run?(v39);
      Text.Effect.RenderSegmentation.StaticRuns.Iterator.next()((uint64_t)&v57);
      v39 = v57;
      v40 = v58;
      v41 = v59;
      v42 = v60;
      v43 = v61;
      v44 = v62;
    }
    while (v57);
  }
  return outlined destroy of TypesettingConfiguration((uint64_t)v21, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
}

void @objc TextLinesLayer.draw(in:)(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t, id, id, uint64_t))
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  v6 = a3;
  v12 = a1;
  v7 = objc_msgSend(v12, sel_superlayer);
  if (v7)
  {
    v8 = v7;
    type metadata accessor for TextRenderLayer();
    v9 = swift_dynamicCastClass();
    if (v9)
    {
      v10 = v9;
      v11 = v6;
      v6 = v12;
      v12 = v8;
      a4(v10, v11, v6, v10);

      v8 = v12;
    }

    v6 = v12;
    v12 = v8;
  }

}

uint64_t ObjC metadata update function for TextRunsLayer()
{
  return type metadata accessor for TextRunsLayer();
}

uint64_t type metadata accessor for TextRunsLayer()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextRunsLayer;
  if (!type metadata singleton initialization cache for TextRunsLayer)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TextRunsLayer()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t @objc StaticEffectLayer.init(layer:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;

  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return DynamicEffectLayer.init(layer:)((uint64_t)&v6, a4);
}

uint64_t DynamicEffectLayer.draw(inDisplayList:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  void (*v5)(uint64_t *);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t State;
  id v12;
  void *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v18[2];
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v19 = 0;
  v20 = 0;
  v3 = one-time initialization token for shared;
  v4 = a1;
  if (v3 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v6 = static CoreGlue2.shared;
  v5(&v19);

  v7 = v19;
  v8 = v20;
  type metadata accessor for GraphicsContext.Storage();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 32) = 1065353216;
  *(_QWORD *)(v9 + 40) = 0x7FF8000000000000;
  v18[0] = v7;
  v18[1] = v8;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  v10 = v4;
  *(_QWORD *)(v9 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v10, v18);
  State = RBDisplayListGetState();

  *(_QWORD *)(v9 + 24) = State;
  *(_BYTE *)(v9 + 48) = 0;
  v19 = v9;
  v12 = objc_msgSend(v2, sel_superlayer);
  if (v12)
  {
    v13 = v12;
    type metadata accessor for TextRenderLayer();
    v14 = swift_dynamicCastClass();
    if (v14)
    {
      v15 = (char *)v14;
      v16 = v2;
      specialized TextRenderLayer.drawContent(_:)(v15, (uint64_t)v16, (uint64_t)&v19);

    }
    else
    {

    }
  }
  return swift_release();
}

uint64_t TextRenderLayer.draw(composition:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v35;
  int v36;
  double v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t j;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117[2];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD v134[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _QWORD v153[4];
  char v154;
  double v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE v166[144];
  uint64_t v167[20];

  v128 = a2;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v122 = (uint64_t)v117 - v5;
  v126 = type metadata accessor for Text.Effect.InteractionMetrics();
  v6 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126);
  v8 = (char *)v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v117 - v12;
  v14 = *(void **)a1;
  v129 = *(_QWORD *)(a1 + 8);
  v130 = v14;
  v15 = *(unsigned __int8 *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  LODWORD(v132) = *(_DWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v131 = *(_QWORD *)(a1 + 64);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v166, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v166, (uint64_t)v167, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v167);
  if ((_DWORD)result != 1)
  {
    v118 = v6;
    v119 = v10;
    v120 = v11;
    v121 = v8;
    v123 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
    v124 = v13;
    v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
    v22 = v129;
    v23 = v130;
    *(_QWORD *)&v144 = v130;
    *((_QWORD *)&v144 + 1) = v129;
    v125 = v15;
    LOBYTE(v145) = v15;
    *((_QWORD *)&v145 + 1) = v16;
    *(_QWORD *)&v146 = v17;
    v24 = v132;
    DWORD2(v146) = v132;
    *(_QWORD *)&v147 = v18;
    *((_QWORD *)&v147 + 1) = v19;
    v25 = v131;
    *(_QWORD *)&v148 = v131;
    *(_QWORD *)&v135 = v21;
    BYTE8(v135) = 0;
    v127 = v2;
    TextRenderLayer.compositionContext(_:time:)((uint64_t)&v144, (uint64_t)&v135, (uint64_t *)&v156);
    v26 = *((_QWORD *)&v157 + 1);
    type metadata accessor for Text.Effect.DrawingContext.Storage.Shared();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 24) = v21;
    v28 = v157;
    *(_OWORD *)(v27 + 32) = v156;
    *(_OWORD *)(v27 + 48) = v28;
    *(_OWORD *)(v27 + 64) = v158;
    *(_QWORD *)(v27 + 16) = MEMORY[0x24BEE4AF8];
    type metadata accessor for Text.Effect.DrawingContext.Storage();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 40) = 0;
    *(_QWORD *)(v29 + 48) = 0x3FF0000000000000;
    *(_QWORD *)(v29 + 56) = 0;
    *(_QWORD *)(v29 + 64) = 0;
    *(_QWORD *)(v29 + 72) = 0x3FF0000000000000;
    *(_QWORD *)(v29 + 80) = 0;
    *(_QWORD *)(v29 + 88) = 0;
    *(_BYTE *)(v29 + 96) = 1;
    *(_OWORD *)(v29 + 104) = 0u;
    *(_OWORD *)(v29 + 120) = 0u;
    *(_OWORD *)(v29 + 136) = 0u;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)(v29 + 152) = _Q1;
    *(_QWORD *)(v29 + 168) = 0x3FF0000000000000;
    *(_BYTE *)(v29 + 176) = 0;
    *(_OWORD *)(v29 + 184) = 0u;
    *(_OWORD *)(v29 + 200) = 0u;
    *(_QWORD *)(v29 + 216) = 0;
    *(_QWORD *)(v29 + 16) = v27;
    *(_QWORD *)(v29 + 24) = 0x3FF0000000000000;
    v35 = (char *)MEMORY[0x23B7C9E44](v26 + 16);
    v36 = v24;
    if (v35)
    {
      v37 = *(double *)&v35[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale];

    }
    else
    {
      v37 = 1.0;
    }
    v38 = (uint64_t *)v128;
    v153[0] = v29;
    memset(&v153[1], 0, 24);
    v154 = 1;
    v155 = v37;
    *(_QWORD *)&v144 = v23;
    *((_QWORD *)&v144 + 1) = v22;
    v39 = v125;
    LOBYTE(v145) = v125;
    *((_QWORD *)&v145 + 1) = v16;
    *(_QWORD *)&v146 = v17;
    DWORD2(v146) = v36;
    *(_QWORD *)&v147 = v18;
    *((_QWORD *)&v147 + 1) = v19;
    *(_QWORD *)&v148 = v25;
    Text.Effect.Composition.resolve(in:)((uint64_t)v153);
    v40 = v153[0];
    v41 = *(_QWORD *)(v153[0] + 16);
    swift_beginAccess();
    v42 = *(_QWORD *)(v41 + 16);
    *(_QWORD *)(v41 + 16) = MEMORY[0x24BEE4AF8];
    v43 = v127;
    v44 = *(_QWORD *)(v127 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers);
    if (!v44 || !*(_QWORD *)(v44 + 16))
    {
      v62 = *(_QWORD *)(v127 + v123);
      v63 = *(_OWORD **)(v40 + 16);
      v64 = v63[4];
      v65 = v63[2];
      v160 = v63[3];
      v161 = v64;
      v159 = v65;
      v134[0] = v65;
      v66 = *((_QWORD *)&v160 + 1);
      v164 = v160;
      v165 = *((_QWORD *)&v64 + 1);
      *(_QWORD *)&v163 = v64;
      v67 = *(_QWORD *)(v42 + 16);
      if (v67)
      {
        swift_bridgeObjectRetain();
        outlined retain of LinearGradient((uint64_t)v134);
        outlined retain of ViewTransform((uint64_t)&v164);
        v132 = v66;
        swift_retain();
        outlined retain of LinearGradient((uint64_t)&v163);
        outlined retain of LinearGradient((uint64_t)&v165);
        v68 = v67 - 1;
        for (i = 32; ; i += 144)
        {
          v144 = *(_OWORD *)(v42 + i);
          v70 = *(_OWORD *)(v42 + i + 16);
          v71 = *(_OWORD *)(v42 + i + 32);
          v72 = *(_OWORD *)(v42 + i + 64);
          v147 = *(_OWORD *)(v42 + i + 48);
          v148 = v72;
          v145 = v70;
          v146 = v71;
          v73 = *(_OWORD *)(v42 + i + 80);
          v74 = *(_OWORD *)(v42 + i + 96);
          v75 = *(_OWORD *)(v42 + i + 128);
          v151 = *(_OWORD *)(v42 + i + 112);
          v152 = v75;
          v149 = v73;
          v150 = v74;
          v76 = *(_OWORD *)(v42 + i + 112);
          v141 = *(_OWORD *)(v42 + i + 96);
          v142 = v76;
          v143 = *(_OWORD *)(v42 + i + 128);
          v77 = *(_OWORD *)(v42 + i + 48);
          v137 = *(_OWORD *)(v42 + i + 32);
          v138 = v77;
          v78 = *(_OWORD *)(v42 + i + 80);
          v139 = *(_OWORD *)(v42 + i + 64);
          v140 = v78;
          v79 = *(_OWORD *)(v42 + i + 16);
          v135 = *(_OWORD *)(v42 + i);
          v136 = v79;
          v162 = v62;
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t)&v162, (uint64_t)&v159, 0, 0, 1, (uint64_t)v38);
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
          if (!v68)
            break;
          --v68;
        }
        swift_bridgeObjectRelease_n();
        outlined release of LinearGradient((uint64_t)v134);
      }
      else
      {
        outlined retain of LinearGradient((uint64_t)v134);
        outlined retain of ViewTransform((uint64_t)&v164);
        swift_retain();
        outlined retain of LinearGradient((uint64_t)&v163);
        outlined retain of LinearGradient((uint64_t)&v165);
        swift_bridgeObjectRelease();
        outlined release of LinearGradient((uint64_t)v134);
      }
      outlined release of ViewTransform((uint64_t)&v164);
      swift_release();
      outlined release of LinearGradient((uint64_t)&v163);
      outlined release of LinearGradient((uint64_t)&v165);
      return swift_release();
    }
    v128 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers;
    outlined copy of Text.Layout.Line.Line(v23, v22, v39);
    v117[1] = lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    v45 = v131;
    swift_bridgeObjectRetain();
    RangeSet.init()();
    *(_QWORD *)&v144 = v23;
    *((_QWORD *)&v144 + 1) = v22;
    LOBYTE(v145) = v39;
    *((_QWORD *)&v145 + 1) = v16;
    *(_QWORD *)&v146 = v17;
    DWORD2(v146) = v132;
    *(_QWORD *)&v147 = v18;
    *((_QWORD *)&v147 + 1) = v19;
    *(_QWORD *)&v148 = v45;
    *(_QWORD *)&v135 = v23;
    *((_QWORD *)&v135 + 1) = v22;
    LOBYTE(v136) = v39;
    *((_QWORD *)&v136 + 1) = v16;
    *(_QWORD *)&v137 = v17;
    DWORD2(v137) = v132;
    Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v135, (uint64_t)v124);
    outlined consume of Text.Layout.Line.Line(v23, v22, v39);
    swift_bridgeObjectRelease();
    v46 = *(_QWORD *)(v43 + v123);
    v47 = *(_QWORD *)(v43
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
    v117[0] = *(_QWORD *)(v43
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                        + 8);
    v48 = *(_QWORD *)(v127
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
    swift_beginAccess();
    v49 = *(_QWORD *)(v48 + 112);
    v50 = v121;
    *v121 = MEMORY[0x24BEE4AF8];
    v51 = v126;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    RangeSet.init()();
    *(_QWORD *)((char *)v50 + *(int *)(v51 + 24)) = MEMORY[0x24BEE4B08];
    v52 = (_QWORD *)((char *)v50 + *(int *)(v51 + 28));
    *v52 = 0;
    v52[1] = 0;
    v53 = v129;
    *(_QWORD *)&v144 = v130;
    *((_QWORD *)&v144 + 1) = v129;
    LOBYTE(v145) = v125;
    *((_QWORD *)&v145 + 1) = v16;
    *(_QWORD *)&v146 = v17;
    DWORD2(v146) = v132;
    *(_QWORD *)&v147 = v18;
    *((_QWORD *)&v147 + 1) = v19;
    *(_QWORD *)&v148 = v131;
    *(_QWORD *)&v135 = v46;
    Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(v50, (uint64_t *)&v135, v47, v117[0], v49, (char *)v48);
    v54 = v127;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v55 = TextRenderLayer.textMarkers(for:)((uint64_t)v124);
    if (v55)
    {
      v56 = v55;
      if (*(_QWORD *)(v55 + 16))
      {
        v57 = v130;
        *(_QWORD *)&v144 = v130;
        *((_QWORD *)&v144 + 1) = v53;
        v58 = v125;
        LOBYTE(v145) = v125;
        *((_QWORD *)&v145 + 1) = v16;
        *(_QWORD *)&v146 = v17;
        DWORD2(v146) = v132;
        v59 = v122;
        outlined init with copy of TypesettingLanguage((uint64_t)v121, v122, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v118 + 56))(v59, 0, 1, v126);
        outlined copy of Text.Layout.Line.Line(v57, v53, v58);
        TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(v56, (uint64_t)&v144, (uint64_t)v124, v59, v38);
        v61 = v60;
        swift_bridgeObjectRelease();
        outlined destroy of Any?(v59, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
        outlined consume of Text.Layout.Line.Line((void *)v144, *((uint64_t *)&v144 + 1), v145);
LABEL_19:
        v80 = v120;
        v81 = *(_QWORD *)(v54 + v123);
        v82 = *(_OWORD **)(v153[0] + 16);
        v83 = v82[4];
        v84 = v82[2];
        v160 = v82[3];
        v161 = v83;
        v159 = v84;
        v163 = v84;
        v85 = *((_QWORD *)&v160 + 1);
        v162 = v160;
        v164 = *((_QWORD *)&v83 + 1);
        v165 = v83;
        v86 = *(_QWORD *)(v42 + 16);
        if (v86)
        {
          LODWORD(v131) = v61;
          swift_bridgeObjectRetain();
          outlined retain of LinearGradient((uint64_t)&v163);
          outlined retain of ViewTransform((uint64_t)&v162);
          v123 = v85;
          swift_retain();
          outlined retain of LinearGradient((uint64_t)&v165);
          outlined retain of LinearGradient((uint64_t)&v164);
          v87 = v86 - 1;
          for (j = 32; ; j += 144)
          {
            v144 = *(_OWORD *)(v42 + j);
            v89 = *(_OWORD *)(v42 + j + 16);
            v90 = *(_OWORD *)(v42 + j + 32);
            v91 = *(_OWORD *)(v42 + j + 64);
            v147 = *(_OWORD *)(v42 + j + 48);
            v148 = v91;
            v145 = v89;
            v146 = v90;
            v92 = *(_OWORD *)(v42 + j + 80);
            v93 = *(_OWORD *)(v42 + j + 96);
            v94 = *(_OWORD *)(v42 + j + 128);
            v151 = *(_OWORD *)(v42 + j + 112);
            v152 = v94;
            v149 = v92;
            v150 = v93;
            v95 = *(_OWORD *)(v42 + j + 112);
            v141 = *(_OWORD *)(v42 + j + 96);
            v142 = v95;
            v143 = *(_OWORD *)(v42 + j + 128);
            v96 = *(_OWORD *)(v42 + j + 48);
            v137 = *(_OWORD *)(v42 + j + 32);
            v138 = v96;
            v97 = *(_OWORD *)(v42 + j + 80);
            v139 = *(_OWORD *)(v42 + j + 64);
            v140 = v97;
            v98 = *(_OWORD *)(v42 + j + 16);
            v135 = *(_OWORD *)(v42 + j);
            v136 = v98;
            v133 = v81;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t)&v133, (uint64_t)&v159, 0, 0, 1, (uint64_t)v38);
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            if (!v87)
              break;
            --v87;
          }
          swift_bridgeObjectRelease_n();
          outlined release of LinearGradient((uint64_t)&v163);
          v80 = v120;
          v99 = v121;
          v100 = v119;
          v101 = (uint64_t)v124;
          LOBYTE(v61) = v131;
        }
        else
        {
          outlined retain of LinearGradient((uint64_t)&v163);
          outlined retain of ViewTransform((uint64_t)&v162);
          swift_retain();
          outlined retain of LinearGradient((uint64_t)&v165);
          outlined retain of LinearGradient((uint64_t)&v164);
          swift_bridgeObjectRelease();
          outlined release of LinearGradient((uint64_t)&v163);
          v99 = v121;
          v100 = v119;
          v101 = (uint64_t)v124;
        }
        outlined release of ViewTransform((uint64_t)&v162);
        swift_release();
        outlined release of LinearGradient((uint64_t)&v165);
        outlined release of LinearGradient((uint64_t)&v164);
        if ((v61 & 1) == 0)
        {
          v102 = TextRenderLayer.textMarkers(for:)(v101);
          if (v102)
          {
            v103 = v102;
            if (*(_QWORD *)(v102 + 16))
            {
              v105 = v129;
              v104 = v130;
              *(_QWORD *)&v144 = v130;
              *((_QWORD *)&v144 + 1) = v129;
              v106 = v125;
              LOBYTE(v145) = v125;
              *((_QWORD *)&v145 + 1) = v16;
              *(_QWORD *)&v146 = v17;
              DWORD2(v146) = v132;
              v107 = v122;
              outlined init with copy of TypesettingLanguage((uint64_t)v99, v122, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v118 + 56))(v107, 0, 1, v126);
              v108 = v106;
              v100 = v119;
              outlined copy of Text.Layout.Line.Line(v104, v105, v108);
              TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(v103, (uint64_t)&v144, v101, v107, v38);
              swift_bridgeObjectRelease();
              v109 = v107;
              v80 = v120;
              outlined destroy of Any?(v109, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
              outlined consume of Text.Layout.Line.Line((void *)v144, *((uint64_t *)&v144 + 1), v145);
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
        v110 = *(_QWORD *)(v54 + v128);
        if (v110)
        {
          if (*(_QWORD *)(v110 + 16))
          {
            v112 = v129;
            v111 = v130;
            *(_QWORD *)&v144 = v130;
            *((_QWORD *)&v144 + 1) = v129;
            v113 = v100;
            v114 = v125;
            LOBYTE(v145) = v125;
            *((_QWORD *)&v145 + 1) = v16;
            *(_QWORD *)&v146 = v17;
            DWORD2(v146) = v132;
            v115 = v122;
            outlined init with copy of TypesettingLanguage((uint64_t)v99, v122, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v126);
            v116 = v114;
            v100 = v113;
            outlined copy of Text.Layout.Line.Line(v111, v112, v116);
            v80 = v120;
            TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)((uint64_t)&v144, v101, v115, v38);
            outlined destroy of Any?(v115, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
            outlined consume of Text.Layout.Line.Line((void *)v144, *((uint64_t *)&v144 + 1), v145);
          }
        }
        outlined destroy of TypesettingConfiguration((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v101, v100);
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    v61 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t type metadata accessor for DynamicEffectLayer()
{
  return objc_opt_self();
}

uint64_t DynamicEffectLayer.init(layer:)(uint64_t a1, _QWORD *a2)
{
  void *v2;
  objc_class *ObjectType;
  char *v6;
  void *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  id v18;
  uint64_t result;
  objc_super v20;
  char *v21;
  char v22[32];

  ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v22);
  v6 = v2;
  if (swift_dynamicCast())
  {
    v7 = v21;
    v8 = &v21[*a2];
    v10 = *((_QWORD *)v8 + 2);
    v9 = (void *)*((_QWORD *)v8 + 3);
    v11 = *((_QWORD *)v8 + 4);
    v12 = v8[40];
    v13 = *((_DWORD *)v8 + 16);
    v14 = *((_QWORD *)v8 + 11);
    v15 = &v6[*a2];
    v16 = *((_OWORD *)v8 + 3);
    v17 = *(_OWORD *)(v8 + 72);
    *(_OWORD *)v15 = *(_OWORD *)v8;
    *((_QWORD *)v15 + 2) = v10;
    *((_QWORD *)v15 + 3) = v9;
    *((_QWORD *)v15 + 4) = v11;
    v15[40] = v12;
    *((_OWORD *)v15 + 3) = v16;
    *((_DWORD *)v15 + 16) = v13;
    *(_OWORD *)(v15 + 72) = v17;
    *((_QWORD *)v15 + 11) = v14;
    outlined copy of Text.Layout.Line.Line(v9, v11, v12);
    swift_bridgeObjectRetain();

    v20.receiver = v6;
    v20.super_class = ObjectType;
    v18 = objc_msgSendSuper2(&v20, sel_initWithLayer_, v7);
    objc_msgSend(v18, sel_setOpaque_, 0);
    objc_msgSend(v18, sel_setNeedsDisplay);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v18;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t StaticEffectLayer.draw(in:)(CGContext *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void (*v7)(uint64_t *);
  void *v8;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;

  objc_msgSend(v1, sel_contentsScale);
  v4 = v3;
  v11 = 0;
  v12 = 0;
  v5 = one-time initialization token for shared;
  v6 = v1;
  if (v5 != -1)
    swift_once();
  swift_beginAccess();
  v7 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v8 = static CoreGlue2.shared;
  v7(&v11);

  v10[0] = v11;
  v10[1] = v12;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v10, v4, 0, v6);

  swift_release();
  return swift_release();
}

void closure #1 in DynamicEffectLayer.draw(in:)(char *a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  void *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  id v12;
  _QWORD v13[2];
  char v14;
  __int128 v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  v12 = objc_msgSend(a1, sel_superlayer);
  if (v12)
  {
    type metadata accessor for TextRenderLayer();
    if (swift_dynamicCastClass())
    {
      v6 = &a1[*a3];
      v7 = (void *)*((_QWORD *)v6 + 3);
      v8 = *((_QWORD *)v6 + 4);
      v9 = v6[40];
      v10 = *((_DWORD *)v6 + 16);
      v11 = *((_QWORD *)v6 + 11);
      v13[0] = v7;
      v13[1] = v8;
      v14 = v9;
      v15 = *((_OWORD *)v6 + 3);
      v16 = v10;
      v17 = *(_OWORD *)(v6 + 72);
      v18 = v11;
      outlined copy of Text.Layout.Line.Line(v7, v8, v9);
      swift_bridgeObjectRetain();
      TextRenderLayer.draw(composition:in:)((uint64_t)v13, a2);

      outlined consume of Text.Layout.Line.Line(v7, v8, v9);
      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t @objc DynamicEffectLayer.__ivar_destroyer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  outlined consume of Text.Layout.Line.Line(*(void **)(a1 + *a3 + 24), *(_QWORD *)(a1 + *a3 + 32), *(_BYTE *)(a1 + *a3 + 40));
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for StaticEffectLayer()
{
  return objc_opt_self();
}

void LayerGeometryObserver.validateLayers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  char v11;
  _QWORD *v12;
  id v13;
  id v14;
  id i;
  id v16;
  uint64_t v17;
  unint64_t v18;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
  if (v3)
  {
    v4 = (unint64_t *)(v0
                            + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
    swift_beginAccess();
    v5 = *v4;
    if (v5 >> 62)
    {
      v13 = v3;
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_4:
        if ((v5 & 0xC000000000000001) != 0)
        {
          v8 = (id)MEMORY[0x23B7C6D9C](0, v5);
        }
        else
        {
          if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v8 = *(id *)(v5 + 32);
        }
        v9 = v8;
        swift_bridgeObjectRelease();
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        v10 = v3;
        v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
        {

          if (*(_QWORD *)(v1 + v2))
            return;
          goto LABEL_9;
        }
LABEL_14:
        v18 = MEMORY[0x24BEE4AF8];
        v14 = v3;
        for (i = v14; ; v3 = i)
        {
          v16 = i;
          MEMORY[0x23B7C61A8]();
          if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (objc_msgSend(v16, sel_masksToBounds))
          {

            goto LABEL_22;
          }
          i = objc_msgSend(v16, sel_superlayer);

          if (!i)
            break;
        }
        v3 = 0;
LABEL_22:
        LayerGeometryObserver.updateObserversIfChanged(_:)(v18);
        swift_bridgeObjectRelease();

        return;
      }
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      v7 = v3;
      swift_bridgeObjectRetain();
      if (v6)
        goto LABEL_4;
    }

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_9:
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
  swift_beginAccess();
  if (*v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_11;
  }
  else if (*(_QWORD *)((*v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    LayerGeometryObserver.removeObservers()();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
  }
}

void LayerGeometryObserver.updateObserversIfChanged(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_getObjectType();
  if (a1 >> 62)
    goto LABEL_21;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v4 = (unint64_t *)(v1
                            + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
    swift_beginAccess();
    if (*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v3 != v10)
      {
LABEL_23:
        LayerGeometryObserver.removeObservers()();
        *v4 = a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        closure #1 in LayerGeometryObserver.addObservers()((uint64_t)&static LayerGeometryObserver.context, v1);
        swift_endAccess();
        return;
      }
    }
    else if (v3 != *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_23;
    }
    if (v3 < 0)
      break;
    if (!v3)
      return;
    v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x23B7C6D9C](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      swift_beginAccess();
      v8 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        v9 = MEMORY[0x23B7C6D9C](v5);
        swift_endAccess();
        swift_unknownObjectRelease();
      }
      else
      {
        if (v5 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v9 = *(_QWORD *)(v8 + 8 * v5 + 32);
        swift_endAccess();
      }

      if (v7 != (void *)v9)
        goto LABEL_23;
      if (v3 == ++v5)
        return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

uint64_t LayerGeometryObserver.removeObservers()()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v1 = (unint64_t *)(v0
                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
  swift_beginAccess();
  v2 = *v1;
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v3 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x23B7C6D9C](v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      ++v5;
      v8 = (void *)MEMORY[0x23B7C5DAC](0x73646E756F62, 0xE600000000000000);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v8, &static LayerGeometryObserver.context);

      v9 = (void *)MEMORY[0x23B7C5DAC](0x6E6F697469736F70, 0xE800000000000000);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v9, &static LayerGeometryObserver.context);

      v10 = (void *)MEMORY[0x23B7C5DAC](0x6F50726F68636E61, 0xEB00000000746E69);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v10, &static LayerGeometryObserver.context);

      v11 = (void *)MEMORY[0x23B7C5DAC](0x726F66736E617274, 0xE90000000000006DLL);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v11, &static LayerGeometryObserver.context);

      v12 = (void *)MEMORY[0x23B7C5DAC](0x426F54736B73616DLL, 0xED000073646E756FLL);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v12, &static LayerGeometryObserver.context);

    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in LayerGeometryObserver.addObservers()(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = (unint64_t *)(a2
                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
  swift_beginAccess();
  v4 = *v3;
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v5 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v5 >= 1)
  {
    v7 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x23B7C6D9C](v7, v4);
      else
        v8 = *(id *)(v4 + 8 * v7 + 32);
      v9 = v8;
      ++v7;
      v10 = (void *)MEMORY[0x23B7C5DAC](0x73646E756F62, 0xE600000000000000);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v10, 1, &static LayerGeometryObserver.context);

      v11 = (void *)MEMORY[0x23B7C5DAC](0x6E6F697469736F70, 0xE800000000000000);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v11, 1, a1);

      v12 = (void *)MEMORY[0x23B7C5DAC](0x6F50726F68636E61, 0xEB00000000746E69);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v12, 1, &static LayerGeometryObserver.context);

      v13 = (void *)MEMORY[0x23B7C5DAC](0x726F66736E617274, 0xE90000000000006DLL);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v13, 1, &static LayerGeometryObserver.context);

      v14 = (void *)MEMORY[0x23B7C5DAC](0x426F54736B73616DLL, 0xED000073646E756FLL);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v14, 1, &static LayerGeometryObserver.context);

    }
    while (v5 != v7);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void LayerGeometryObserver.observeValue(forKeyPath:of:change:context:)(uint64_t a1, void *a2, uint64_t a3, Class isa, void *a5)
{
  char *v5;
  objc_class *ObjectType;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  objc_super v22;
  _QWORD v23[3];
  uint64_t v24;

  ObjectType = (objc_class *)swift_getObjectType();
  if (!a5 || a5 != &static LayerGeometryObserver.context)
  {
    if (a2)
      a2 = (void *)MEMORY[0x23B7C5DAC](a1, a2);
    outlined init with copy of Any?(a3, (uint64_t)v23);
    v13 = v24;
    if (v24)
    {
      v14 = __swift_project_boxed_opaque_existential_1(v23, v24);
      v15 = *(_QWORD *)(v13 - 8);
      v16 = MEMORY[0x24BDAC7A8](v14);
      v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v15 + 16))(v18, v16);
      v19 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      if (!isa)
      {
LABEL_10:
        v22.receiver = v5;
        v22.super_class = ObjectType;
        objc_msgSendSuper2(&v22, sel_observeValueForKeyPath_ofObject_change_context_, a2, v19, isa, a5);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      v19 = 0;
      if (!isa)
        goto LABEL_10;
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x23B7C9E44](&v5[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_renderer]);
  if (v12)
  {
    v21 = v12;
    TextEffectsRenderer.layerGeometryDidChange()();

  }
}

Swift::Void __swiftcall TextEffectsRenderer.layerGeometryDidChange()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  char *v19;
  _BYTE *v20;
  _QWORD v21[2];
  uint64_t v22;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v21 - v7;
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v10 = *(_QWORD *)(v9 + 16);
  v21[1] = v9;
  if (v10)
  {
    v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    v12 = v9 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v22 = *(_QWORD *)(v2 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v13(v8, v12, v1);
      v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v14(v8, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
      swift_beginAccess();
      v15 = *v11;
      if (*(_QWORD *)(*v11 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v17 & 1) != 0))
      {
        v18 = *(void **)(*(_QWORD *)(v15 + 56) + 8 * v16);
        swift_endAccess();
        v19 = v18;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        v20 = *(_BYTE **)&v19[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        v20[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] |= 0x40u;
        objc_msgSend(v20, sel_setNeedsLayout);

      }
      else
      {
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      }
      v12 += v22;
      if (!--v10)
        goto LABEL_10;
    }
  }
  else
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain();
LABEL_10:
    v14(v8, 1, 1, v1);
  }
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for LayerGeometryObserver()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TextEffectKeyframeBox()
{
  return objc_opt_self();
}

double CGRect.roundedCoordinates(toMultipleOf:)(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  v13.origin.x = a3;
  v13.origin.y = a4;
  v13.size.width = a5;
  v13.size.height = a6;
  v11 = floor(CGRectGetMinX(v13) / a1) * a1;
  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  CGRectGetMaxX(v14);
  v15.origin.x = a3;
  v15.origin.y = a4;
  v15.size.width = a5;
  v15.size.height = a6;
  CGRectGetMinY(v15);
  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  CGRectGetMaxY(v16);
  return v11;
}

void TextRenderLayer.SegmentLayer.updateEffect(dynamic:superlayer:)(char a1, void *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  char *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  objc_class *v43;
  char *v44;
  char *v45;
  void *v46;
  id v47;
  id v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t *v57;
  objc_super v58;
  objc_super v59;

  v3 = *v2;
  v4 = *v2 >> 62;
  if ((_DWORD)v4 == 2)
  {
    if ((a1 & 1) != 0)
      return;
    v56 = v2;
    v5 = (void *)(v3 & 0x3FFFFFFFFFFFFFFFLL);
    v6 = (v3 & 0x3FFFFFFFFFFFFFFFLL)
       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content;
    v54 = *(_OWORD *)v6;
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(void **)(v6 + 24);
    v9 = *(_QWORD *)(v6 + 32);
    v10 = *(_BYTE *)(v6 + 40);
    v11 = *(_QWORD *)(v6 + 48);
    v12 = *(_QWORD *)(v6 + 56);
    v14 = *(_DWORD *)(v6 + 64);
    v15 = *(_QWORD *)(v6 + 72);
    v16 = *(_QWORD *)(v6 + 80);
    v17 = *(_QWORD *)(v6 + 88);
    v18 = (objc_class *)type metadata accessor for StaticEffectLayer();
    v19 = (char *)objc_allocWithZone(v18);
    v20 = &v19[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content];
    *(_OWORD *)v20 = v54;
    *((_QWORD *)v20 + 2) = v8;
    *((_QWORD *)v20 + 3) = v7;
    *((_QWORD *)v20 + 4) = v9;
    v20[40] = v10;
    *((_QWORD *)v20 + 6) = v11;
    *((_QWORD *)v20 + 7) = v12;
    *((_DWORD *)v20 + 16) = v14;
    v21 = a2;
    *((_QWORD *)v20 + 9) = v15;
    *((_QWORD *)v20 + 10) = v16;
    *((_QWORD *)v20 + 11) = v17;
    outlined copy of Text.Layout.Line.Line(v7, v9, v10);
    v58.receiver = v19;
    v58.super_class = v18;
    swift_bridgeObjectRetain();
    v22 = objc_msgSendSuper2(&v58, sel_init);
    objc_msgSend(v22, sel_setOpaque_, 0);
    objc_msgSend(v22, sel_setNeedsDisplay);
    objc_msgSend(v22, sel_setDelegate_, a2);
    v23 = v22;
    objc_msgSend(v5, sel_frame);
    objc_msgSend(v23, sel_setFrame_);

    v24 = v23;
    objc_msgSend(v5, sel_bounds);
    objc_msgSend(v24, sel_setBounds_);

    v25 = (unint64_t)v24;
    v26 = 1.0;
    if (objc_msgSend(a2, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v27 = swift_dynamicCastClass();
      if (v27)
      {
        v28 = MEMORY[0x23B7C9E44](v27 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        v29 = v56;
        if (v28)
        {
          v30 = (void *)v28;
          v26 = *(double *)(v28 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
          swift_unknownObjectRelease();

        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        v29 = v56;
      }
    }
    else
    {
      v29 = v56;
    }
    objc_msgSend((id)v25, sel_setContentsScale_, v26);

    objc_msgSend(v21, sel_insertSublayer_above_, v25, v5);
    v53 = 0xC000000000000000;
    goto LABEL_21;
  }
  if ((_DWORD)v4 != 3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((a1 & 1) != 0)
  {
    v57 = v2;
    v5 = (void *)(v3 & 0x3FFFFFFFFFFFFFFFLL);
    v31 = (v3 & 0x3FFFFFFFFFFFFFFFLL)
        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content;
    v55 = *(_OWORD *)v31;
    v33 = *(_QWORD *)(v31 + 16);
    v34 = *(void **)(v31 + 24);
    v35 = *(_QWORD *)(v31 + 32);
    v36 = *(_BYTE *)(v31 + 40);
    v37 = *(_QWORD *)(v31 + 48);
    v38 = *(_QWORD *)(v31 + 56);
    v39 = *(_DWORD *)(v31 + 64);
    v40 = *(_QWORD *)(v31 + 72);
    v41 = *(_QWORD *)(v31 + 80);
    v42 = *(_QWORD *)(v31 + 88);
    v43 = (objc_class *)type metadata accessor for DynamicEffectLayer();
    v44 = (char *)objc_allocWithZone(v43);
    v45 = &v44[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content];
    *(_OWORD *)v45 = v55;
    *((_QWORD *)v45 + 2) = v33;
    *((_QWORD *)v45 + 3) = v34;
    v46 = a2;
    *((_QWORD *)v45 + 4) = v35;
    v45[40] = v36;
    *((_QWORD *)v45 + 6) = v37;
    *((_QWORD *)v45 + 7) = v38;
    *((_DWORD *)v45 + 16) = v39;
    *((_QWORD *)v45 + 9) = v40;
    *((_QWORD *)v45 + 10) = v41;
    *((_QWORD *)v45 + 11) = v42;
    outlined copy of Text.Layout.Line.Line(v34, v35, v36);
    v59.receiver = v44;
    v59.super_class = v43;
    swift_bridgeObjectRetain();
    v47 = objc_msgSendSuper2(&v59, sel_init);
    objc_msgSend(v47, sel_setOpaque_, 0);
    objc_msgSend(v47, sel_setNeedsDisplay);

    objc_msgSend(v47, sel_setDelegate_, a2);
    v48 = v47;
    objc_msgSend(v5, sel_frame);
    objc_msgSend(v48, sel_setFrame_);

    v25 = (unint64_t)v48;
    objc_msgSend(v5, sel_bounds);
    objc_msgSend((id)v25, sel_setBounds_);

    v49 = 1.0;
    if (objc_msgSend(a2, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v50 = swift_dynamicCastClass();
      if (v50)
      {
        v51 = MEMORY[0x23B7C9E44](v50 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        v29 = v57;
        if (v51)
        {
          v52 = (void *)v51;
          v49 = *(double *)(v51 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
          swift_unknownObjectRelease();

        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        v29 = v57;
      }
    }
    else
    {
      v29 = v57;
    }
    objc_msgSend((id)v25, sel_setContentsScale_, v49);
    objc_msgSend(v46, sel_insertSublayer_above_, v25, v5);
    v53 = 0x8000000000000000;
LABEL_21:
    objc_msgSend(v5, sel_removeFromSuperlayer);

    *v29 = v53 | v25;
  }
}

uint64_t TextRenderLayer.init(layer:)(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t result;
  objc_super v25;
  _QWORD v26[18];
  _QWORD v27[18];
  char *v28;
  char v29[32];
  _OWORD v30[9];

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  v5 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment] = 0;
  v6 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout];
  _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v30);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v30, v6, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  v7 = &v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_rawLayout];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_QWORD *)v7 + 4) = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers] = 0;
  v8 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags;
  v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] = 0;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectToSegmentsIndices] = MEMORY[0x24BEE4B00];
  v10 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectIdentifiers] = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version] = -1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements] = v9;
  v11 = &v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
  *v11 = 0u;
  v11[1] = 0u;
  v12 = &v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets];
  *v12 = 0u;
  v12[1] = 0u;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutLineFragmentPadding] = 0;
  v13 = &v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement];
  *v13 = 0u;
  v13[1] = 0u;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_activeIdentifiers] = v10;
  v14 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
  v15 = v2;
  *(CFTimeInterval *)&v2[v14] = CACurrentMediaTime();
  outlined init with copy of Any(a1, (uint64_t)v29);
  if (swift_dynamicCast())
  {
    v16 = v28;
    *(_QWORD *)&v15[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController] = *(_QWORD *)&v28[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController];
    v17 = (void *)MEMORY[0x23B7C9E44](&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_geometryObserver]);
    swift_unknownObjectWeakAssign();
    swift_retain();

    v18 = *(void **)&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment];
    v19 = *(void **)&v2[v5];
    *(_QWORD *)&v2[v5] = v18;
    v20 = v18;

    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout], (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v6, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v26, v6, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined release of TextRenderLayer.Layout?(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
    outlined release of TextRenderLayer.Layout?(v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    v2[v8] = 15;
    v21 = *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                        + 8];
    v22 = &v15[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap];
    *(_QWORD *)v22 = *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap];
    *((_QWORD *)v22 + 1) = v21;
    swift_bridgeObjectRetain();

    v25.receiver = v15;
    v25.super_class = ObjectType;
    v23 = objc_msgSendSuper2(&v25, sel_initWithLayer_, v16);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v23;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TextRenderLayer.compositionContext(_:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)a2;
  v14 = *(unsigned __int8 *)(a2 + 8);
  v15 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                  + 8);
  v16 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
  swift_beginAccess();
  v17 = *(_QWORD *)(v16 + 112);
  v24[1] = v5;
  v24[2] = v6;
  v25 = v7;
  v26 = v8;
  v27 = v9;
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v22;
  if (v14 == 1)
    v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
  v24[0] = v13;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  v18 = Text.Effect.Composition.displacements(at:context:)(v24, v15, v23, v17, v16);
  v20 = v19;
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  *a3 = v15;
  a3[1] = v23;
  a3[2] = v17;
  a3[3] = v16;
  a3[4] = v18;
  a3[5] = v20;
  return result;
}

uint64_t TextRenderLayer.textMarkers(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t *, _QWORD);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, char *, uint64_t);
  int v51;
  uint64_t v52[4];

  v45 = a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v3 = v2;
  v44 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v38 - v4;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  v43 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - v9;
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers);
  if (!v11)
    return 0;
  v41 = *(_QWORD *)(v11 + 16);
  if (!v41)
  {
    swift_bridgeObjectRetain();
    v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_24:
    v37 = v36[2];
    swift_bridgeObjectRelease();
    if (v37)
      return (uint64_t)v36;
    swift_bridgeObjectRelease();
    return 0;
  }
  v39 = v11 + 32;
  result = swift_bridgeObjectRetain_n();
  v13 = 0;
  v47 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v40 = v11;
  while (v13 < *(_QWORD *)(v11 + 16))
  {
    v46 = v13;
    v14 = v39 + 32 * v13;
    v15 = *(unsigned __int8 *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    v48 = *(_QWORD *)v14;
    v51 = v15;
    outlined copy of Text.Effect.Markers.MarkerType(v48, v15);
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    RangeSet.ranges.getter();
    v18 = v44;
    v19 = (uint64_t)v42;
    v50 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
    v50(v42, v5, v3);
    lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
    dispatch thunk of Collection.startIndex.getter();
    v49 = *(void (**)(char *, uint64_t))(v18 + 8);
    v49(v5, v3);
    v20 = v43;
    *(_QWORD *)(v19 + *(int *)(v43 + 36)) = v52[0];
    outlined init with take of LocalizedStringKey.FormatArgument(v19, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    v21 = &v10[*(int *)(v20 + 36)];
    while (1)
    {
      v22 = *(_QWORD *)v21;
      dispatch thunk of Collection.endIndex.getter();
      if (v22 == v52[0])
        break;
      v23 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v25 = *v24;
      v26 = v24[1];
      v23(v52, 0);
      v50(v5, v10, v3);
      dispatch thunk of Collection.formIndex(after:)();
      v49(v5, v3);
      if (v17 <= v25)
        v27 = v25;
      else
        v27 = v17;
      if (v16 >= v26)
        v28 = v26;
      else
        v28 = v16;
      v29 = v51;
      if (v27 >= v28)
        v29 = 1;
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
        v31 = v47[2];
        v30 = v47[3];
        v32 = v31 + 1;
        if (v31 >= v30 >> 1)
        {
          v38 = v31 + 1;
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v47);
          v32 = v38;
          v47 = v35;
        }
        v33 = v47;
        v47[2] = v32;
        v34 = &v33[4 * v31];
        v34[4] = v48;
        *((_BYTE *)v34 + 40) = 0;
        v34[6] = v27;
        v34[7] = v28;
      }
    }
    v13 = v46 + 1;
    outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    result = outlined consume of Text.Effect.Markers.MarkerType(v48, v51);
    v11 = v40;
    if (v13 == v41)
    {
      swift_bridgeObjectRelease();
      v36 = v47;
      goto LABEL_24;
    }
  }
  __break(1u);
  return result;
}

void TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  void *v9;
  uint64_t v10;
  char v11;
  int v12;
  const __CTLine *v13;
  CFRange StringRange;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  CGContext *v18;
  char *v19;
  CGBlendMode v20;
  uint64_t v21;
  void *v22;
  id v23;
  __int128 v24;
  void *aBlock;
  uint64_t v26;
  double (*v27)(uint64_t, void *, double, double, double, double);
  __int128 v28;
  uint64_t v29;
  _QWORD v30[18];
  uint64_t v31[18];

  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(void **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_BYTE *)(a2 + 16);
    v24 = *(_OWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a2 + 40);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v5 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v30, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v31) != 1
      && (v11 & 1) == 0)
    {
      outlined release of TextRenderLayer.Layout?(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
      outlined copy of Text.Layout.Line.Line(v9, v10, 0);

      if (v10)
      {
        v13 = v9;
        swift_retain();
        StringRange = CTLineGetStringRange(v13);
        outlined consume of Text.Layout.Line.Line(v9, v10, 0);
        if (__OFADD__(StringRange.location, StringRange.length))
        {
          __break(1u);
        }
        else if (StringRange.location + StringRange.length >= StringRange.location)
        {
          v15 = (void *)(*(uint64_t (**)(CFIndex))(*(_QWORD *)v10 + 88))(StringRange.location);
          swift_release();
          if (v15)
          {
            aBlock = v9;
            v26 = v10;
            LOBYTE(v27) = 0;
            v28 = v24;
            LODWORD(v29) = v12;
            v16 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&aBlock, a4, v31[17], a1);
            v17 = *a5;
            v18 = (CGContext *)(id)RBDrawingStateBeginCGContext();
            v19 = (char *)v18;
            v20 = *(_DWORD *)(v17 + 36);
            if (v20)
              CGContextSetBlendMode(v18, v20);
            v21 = swift_allocObject();
            *(_QWORD *)(v21 + 16) = v15;
            *(_QWORD *)(v21 + 24) = v16;
            *((_QWORD *)&v28 + 1) = partial apply for closure #1 in closure #1 in TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:);
            v29 = v21;
            aBlock = (void *)MEMORY[0x24BDAC760];
            v26 = 1107296256;
            v27 = thunk for @escaping @callee_guaranteed (@unowned CGRect, @guaranteed NSTextRange) -> (@unowned CGRect);
            *(_QWORD *)&v28 = &block_descriptor_72;
            v22 = _Block_copy(&aBlock);
            v23 = v15;
            swift_bridgeObjectRetain();
            swift_release();
            _NSMarkedTextDrawIndicator(v23, v19, (uint64_t)v22);
            _Block_release(v22);
            RBDrawingStateEndCGContext();

            swift_bridgeObjectRelease();
          }
          goto LABEL_11;
        }
        __break(1u);
        return;
      }
LABEL_11:
      outlined release of TextRenderLayer.Layout?(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    }
  }
}

void TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  void *v9;
  uint64_t v10;
  char v11;
  int v12;
  const __CTLine *v13;
  CFRange StringRange;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  CGContext *v18;
  char *v19;
  CGBlendMode v20;
  uint64_t v21;
  void *v22;
  id v23;
  __int128 v24;
  void *aBlock;
  uint64_t v26;
  double (*v27)(uint64_t, void *, double, double, double, double);
  __int128 v28;
  uint64_t v29;
  _QWORD v30[18];
  uint64_t v31[18];

  if (!*(_QWORD *)(a1 + 16))
    return;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_BYTE *)(a2 + 16);
  v24 = *(_OWORD *)(a2 + 24);
  v12 = *(_DWORD *)(a2 + 40);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v5 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v30, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v31) == 1
    || (v11 & 1) != 0)
  {
    return;
  }
  outlined release of TextRenderLayer.Layout?(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
  outlined copy of Text.Layout.Line.Line(v9, v10, 0);

  if (!v10)
  {
LABEL_11:
    outlined release of TextRenderLayer.Layout?(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    return;
  }
  v13 = v9;
  swift_retain();
  StringRange = CTLineGetStringRange(v13);
  outlined consume of Text.Layout.Line.Line(v9, v10, 0);
  if (__OFADD__(StringRange.location, StringRange.length))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (StringRange.location + StringRange.length < StringRange.location)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v15 = (void *)(*(uint64_t (**)(CFIndex))(*(_QWORD *)v10 + 88))(StringRange.location);
  swift_release();
  if (!v15)
    goto LABEL_11;
  aBlock = v9;
  v26 = v10;
  LOBYTE(v27) = 0;
  v28 = v24;
  LODWORD(v29) = v12;
  v16 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&aBlock, a4, v31[17], a1);
  v17 = *a5;
  v18 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  v19 = (char *)v18;
  v20 = *(_DWORD *)(v17 + 36);
  if (v20)
    CGContextSetBlendMode(v18, v20);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v15;
  *(_QWORD *)(v21 + 24) = v16;
  *((_QWORD *)&v28 + 1) = partial apply for closure #1 in closure #1 in TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:);
  v29 = v21;
  aBlock = (void *)MEMORY[0x24BDAC760];
  v26 = 1107296256;
  v27 = thunk for @escaping @callee_guaranteed (@unowned CGRect, @guaranteed NSTextRange) -> (@unowned CGRect);
  *(_QWORD *)&v28 = &block_descriptor_66;
  v22 = _Block_copy(&aBlock);
  v23 = v15;
  swift_bridgeObjectRetain();
  swift_release();
  _NSMarkedTextDrawBackground(v23, v19, (uint64_t)v22);
  _Block_release(v22);
  RBDrawingStateEndCGContext();

  outlined release of TextRenderLayer.Layout?(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  swift_bridgeObjectRelease();

}

_QWORD *TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  CGContext *v23;
  CGBlendMode v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BYTE v35[144];
  _QWORD v36[18];
  uint64_t v37[19];

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_DWORD *)(a1 + 40);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v36, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = (_QWORD *)_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v37);
  if ((_DWORD)result != 1)
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v36, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined retain of TextRenderLayer.Layout((uint64_t)v35);
    v15 = TextRenderLayer.correctionMarkers(for:)(a2);
    if (v15)
    {
      if (*(_QWORD *)(v15 + 16))
      {
        v29 = v8;
        v30 = v9;
        v31 = v10;
        v32 = v11;
        v33 = v12;
        v34 = v13;
        v16 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&v29, a3, v37[17], v15);
        swift_bridgeObjectRelease();
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = v16 + 32;
          do
          {
            outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v18, (uint64_t)&v29);
            if ((v30 & 1) != 0)
            {
              v20 = v29;
              outlined init with copy of Any?((uint64_t)&v33, (uint64_t)&v25);
              if (!v26)
              {
                outlined destroy of Any?((uint64_t)&v25, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
                result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                return result;
              }
              outlined init with take of Any(&v25, &v27);
              v21 = *a4;
              v22 = (CGContext *)(id)RBDrawingStateBeginCGContext();
              v23 = v22;
              v24 = *(_DWORD *)(v21 + 36);
              if (v24)
                CGContextSetBlendMode(v22, v24);
              __swift_project_boxed_opaque_existential_1(&v27, v28);
              v19 = _bridgeAnythingToObjectiveC<A>(_:)();
              _NSTextCorrectionMarkerDraw(v20, v19, (uint64_t)v23);
              swift_unknownObjectRelease();
              RBDrawingStateEndCGContext();

              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
            }
            outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v29);
            v18 += 96;
            --v17;
          }
          while (v17);
        }
      }
      swift_bridgeObjectRelease();
    }
    return outlined release of TextRenderLayer.Layout?(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  }
  return result;
}

double TextRenderLayer.correctionMarkersBounds(composition:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v39[-v4];
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v39[-v9];
  v11 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v39[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers);
  if (!v16 || !*(_QWORD *)(v16 + 16))
    return *MEMORY[0x24BDBF070];
  v50 = v8;
  v17 = *(void **)a1;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_BYTE *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 32);
  v40 = *(_DWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 56);
  v45 = v10;
  v41 = *(_QWORD *)(a1 + 64);
  v24 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
  v49 = v7;
  v25 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
  v43 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                  + 8);
  v48 = v1;
  v26 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
  v27 = v12;
  v47 = v13;
  v28 = v15;
  swift_beginAccess();
  v46 = v5;
  v29 = *(_QWORD *)(v26 + 112);
  *v28 = MEMORY[0x24BEE4AF8];
  v42 = lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  RangeSet.init()();
  v44 = v27;
  *(_QWORD *)((char *)v28 + *(int *)(v27 + 24)) = MEMORY[0x24BEE4B08];
  v30 = (_QWORD *)((char *)v28 + *(int *)(v27 + 28));
  v31 = (uint64_t)v28;
  *v30 = 0;
  v30[1] = 0;
  v62 = v17;
  v63 = v18;
  v64 = v19;
  v65 = v20;
  v66 = v21;
  v32 = v40;
  v67 = v40;
  v68 = v22;
  v69 = v23;
  v33 = v41;
  v70 = v41;
  v56 = v24;
  Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(v28, (uint64_t *)&v56, v25, v43, v29, (char *)v26);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v56 = v17;
  v57 = v18;
  v58 = v19;
  v59 = v20;
  v60 = v21;
  LODWORD(v28) = v32;
  v61 = v32;
  outlined copy of Text.Layout.Line.Line(v17, v18, v19);
  outlined copy of Text.Layout.Line.Line(v17, v18, v19);
  swift_bridgeObjectRetain();
  v34 = (uint64_t)v45;
  RangeSet.init()();
  v62 = v17;
  v63 = v18;
  v64 = v19;
  v65 = v20;
  v66 = v21;
  v67 = (int)v28;
  v68 = v22;
  v69 = v23;
  v70 = v33;
  v51[0] = v17;
  v51[1] = v18;
  v52 = v19;
  v53 = v20;
  v54 = v21;
  v55 = (int)v28;
  Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v51, v34);
  outlined consume of Text.Layout.Line.Line(v17, v18, v19);
  swift_bridgeObjectRelease();
  v35 = (uint64_t)v46;
  outlined init with copy of TypesettingLanguage(v31, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v35, 0, 1, v44);
  TextRenderLayer.correctionMarkersBounds(line:glyphOrigin:ranges:metrics:)((uint64_t)&v56, v34, v35);
  v37 = v36;
  outlined destroy of Any?(v35, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v34, v49);
  outlined consume of Text.Layout.Line.Line(v56, v57, v58);
  outlined destroy of TypesettingConfiguration(v31, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
  return v37;
}

_QWORD *TextRenderLayer.correctionMarkersBounds(line:glyphOrigin:ranges:metrics:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[144];
  _QWORD v42[18];
  uint64_t v43[18];
  CGRect v44;
  CGRect v45;
  CGRect v46;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_DWORD *)(a1 + 40);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v42, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = (_QWORD *)_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v43);
  if ((_DWORD)result != 1)
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v42, (uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined retain of TextRenderLayer.Layout((uint64_t)v41);
    v13 = TextRenderLayer.correctionMarkers(for:)(a2);
    if (v13)
    {
      v35 = v6;
      v36 = v7;
      v37 = v8;
      v38 = v9;
      v39 = v10;
      v40 = v11;
      v14 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&v35, a3, v43[17], v13);
      swift_bridgeObjectRelease();
      x = *MEMORY[0x24BDBF070];
      y = *(double *)(MEMORY[0x24BDBF070] + 8);
      width = *(double *)(MEMORY[0x24BDBF070] + 16);
      height = *(double *)(MEMORY[0x24BDBF070] + 24);
      v19 = *(_QWORD *)(v14 + 16);
      if (!v19)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        return outlined release of TextRenderLayer.Layout?(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
      }
      v20 = v14 + 32;
      while (1)
      {
        outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v20, (uint64_t)&v35);
        if ((v36 & 1) != 0)
        {
          v21 = v35;
          outlined init with copy of Any?((uint64_t)&v39, (uint64_t)&v31);
          if (!v32)
          {
            outlined destroy of Any?((uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
            result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          outlined init with take of Any(&v31, &v33);
          __swift_project_boxed_opaque_existential_1(&v33, v34);
          v22 = _bridgeAnythingToObjectiveC<A>(_:)();
          _NSTextCorrectionMarkerBounds(v21, v22);
          v24 = v23;
          v26 = v25;
          v28 = v27;
          v30 = v29;
          swift_unknownObjectRelease();
          v44.origin.x = x;
          v44.origin.y = y;
          v44.size.width = width;
          v44.size.height = height;
          v46.origin.x = v24;
          v46.origin.y = v26;
          v46.size.width = v28;
          v46.size.height = v30;
          v45 = CGRectUnion(v44, v46);
          x = v45.origin.x;
          y = v45.origin.y;
          width = v45.size.width;
          height = v45.size.height;
          outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v35);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
        }
        else
        {
          outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v35);
        }
        v20 += 96;
        if (!--v19)
          goto LABEL_10;
      }
    }
    return outlined release of TextRenderLayer.Layout?(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  }
  return result;
}

uint64_t TextRenderLayer.correctionMarkers(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(uint64_t *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  int v49;
  uint64_t v50[4];

  v43 = a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v3 = v2;
  v42 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - v4;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  v41 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - v9;
  result = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers);
  if (result)
  {
    v39 = *(_QWORD *)(result + 16);
    if (v39)
    {
      v37 = result + 32;
      result = swift_bridgeObjectRetain();
      v12 = 0;
      v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v38 = result;
      while (v12 < *(_QWORD *)(result + 16))
      {
        v44 = v12;
        v13 = v37 + 32 * v12;
        v14 = *(unsigned __int8 *)(v13 + 8);
        v15 = *(_QWORD *)(v13 + 16);
        v16 = *(_QWORD *)(v13 + 24);
        v45 = *(_QWORD *)v13;
        v49 = v14;
        outlined copy of Text.Effect.Markers.MarkerType(v45, v14);
        type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
        RangeSet.ranges.getter();
        v17 = v42;
        v18 = (uint64_t)v40;
        v48 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
        v48(v40, v5, v3);
        lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
        dispatch thunk of Collection.startIndex.getter();
        v47 = *(void (**)(char *, uint64_t))(v17 + 8);
        v47(v5, v3);
        v19 = v41;
        *(_QWORD *)(v18 + *(int *)(v41 + 36)) = v50[0];
        outlined init with take of LocalizedStringKey.FormatArgument(v18, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
        v20 = &v10[*(int *)(v19 + 36)];
        while (1)
        {
          v21 = *(_QWORD *)v20;
          dispatch thunk of Collection.endIndex.getter();
          if (v21 == v50[0])
            break;
          v22 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
          v24 = *v23;
          v25 = v23[1];
          v22(v50, 0);
          v48(v5, v10, v3);
          dispatch thunk of Collection.formIndex(after:)();
          v47(v5, v3);
          if (v15 <= v24)
            v26 = v24;
          else
            v26 = v15;
          if (v16 >= v25)
            v27 = v25;
          else
            v27 = v16;
          v28 = v49;
          if (v26 >= v27)
            v28 = 0;
          if (v28 == 1)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v29 = v46;
            else
              v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
            v31 = v29[2];
            v30 = v29[3];
            v32 = (_QWORD *)(v31 + 1);
            if (v31 >= v30 >> 1)
            {
              v46 = (_QWORD *)(v31 + 1);
              v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
              v32 = v46;
            }
            v29[2] = v32;
            v46 = v29;
            v33 = &v29[4 * v31];
            v33[4] = v45;
            *((_BYTE *)v33 + 40) = 1;
            v33[6] = v26;
            v33[7] = v27;
          }
        }
        v12 = v44 + 1;
        outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
        outlined consume of Text.Effect.Markers.MarkerType(v45, v49);
        result = v38;
        if (v12 == v39)
          goto LABEL_24;
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_24:
      v34 = v46;
      v35 = v46[2];
      swift_bridgeObjectRelease();
      result = (uint64_t)v34;
      if (!v35)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
  }
  return result;
}

double thunk for @escaping @callee_guaranteed (@unowned CGRect, @guaranteed NSTextRange) -> (@unowned CGRect)(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  double (*v11)(double, double, double, double);
  id v12;
  double v13;

  v11 = *(double (**)(double, double, double, double))(a1 + 32);
  swift_retain();
  v12 = a2;
  v13 = v11(a3, a4, a5, a6);
  swift_release();

  return v13;
}

void closure #1 in closure #1 in TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  char *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v7 = NSTextRange.textRange.getter();
  if ((v9 & 1) == 0)
  {
    v10 = (uint64_t)v7;
    v11 = v8;
    v12 = objc_msgSend(a3, sel_textLayoutFragment);
    if (!v12)
      goto LABEL_9;
    v13 = v12;
    v14 = objc_msgSend(v12, sel_rangeInElement);

    v15 = NSTextRange.textRange.getter();
    v17 = v16;

    if ((v17 & 1) != 0)
      goto LABEL_9;
    v18 = v10 - (_QWORD)v15;
    if (__OFSUB__(v10, v15))
    {
      __break(1u);
    }
    else
    {
      v19 = v11 - v10;
      if (!__OFSUB__(v11, v10))
      {
        v11 = v19 + v18;
        if (!__OFADD__(v19, v18))
        {
          if (v11 >= v18)
          {
            v10 -= (uint64_t)v15;
LABEL_9:
            Text.Effect.MarkerLayoutInfo.rect(for:with:)(v10, v11, a4, a1);
            return;
          }
LABEL_14:
          __break(1u);
          return;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t TextRenderLayer.updateActive(animations:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  Swift::UInt64 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[7];
  char v74;
  uint64_t v75;
  _QWORD v76[18];
  uint64_t v77[4];
  uint64_t v78;

  v2 = v1;
  v57 = 0;
  v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout], (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v76, (uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  v8 = _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v77);
  v9 = MEMORY[0x24BEE4B08];
  v62 = v1;
  v63 = a1;
  if (v8 == 1)
    goto LABEL_35;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v76, (uint64_t)v73, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined retain of TextRenderLayer.Layout((uint64_t)v73);
  result = TextRenderLayer.segmentIndices(for:)(a1);
  v11 = result;
  v12 = 0;
  v13 = *(_QWORD *)(result + 56);
  v58 = result + 56;
  v14 = 1 << *(_BYTE *)(result + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v51 = (uint64_t *)&v2[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers];
  v52 = result;
  v59 = (unint64_t)(v14 + 63) >> 6;
  v53 = v5;
  v54 = v4;
  if ((v15 & v13) != 0)
    goto LABEL_7;
LABEL_8:
  v19 = __OFADD__(v12++, 1);
  if (v19)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v12 < v59)
  {
    v20 = *(_QWORD *)(v58 + 8 * v12);
    if (v20)
    {
LABEL_18:
      v16 = (v20 - 1) & v20;
      for (i = __clz(__rbit64(v20)) + (v12 << 6); ; i = v17 | (v12 << 6))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * i);
        if ((v22 & 0x8000000000000000) != 0)
          break;
        if (v22 >= *(_QWORD *)(v78 + 16))
          goto LABEL_61;
        outlined init with copy of TypesettingLanguage(v78+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v22, (uint64_t)v7, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          v60 = v16;
          v61 = v12;
          v24 = (void *)*((_QWORD *)v7 + 3);
          v23 = *((_QWORD *)v7 + 4);
          v25 = v7[40];
          v26 = *((_QWORD *)v7 + 6);
          v27 = *((_QWORD *)v7 + 7);
          v28 = *((_DWORD *)v7 + 16);
          v29 = *((_QWORD *)v7 + 9);
          v30 = *((_QWORD *)v7 + 10);
          v31 = *((_QWORD *)v7 + 11);
          v32 = MEMORY[0x24BEE4B08];
          v75 = MEMORY[0x24BEE4B08];
          v64 = (uint64_t)v24;
          v65 = v23;
          v66 = v25;
          v67 = v26;
          v68 = v27;
          v69 = v28;
          v70 = v29;
          v71 = v30;
          v72 = v31;
          Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v75);
          v33 = *(_QWORD *)(specialized _NativeSet.intersection(_:)(v63, v75, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:))+ 16);
          swift_release();
          if (v33)
          {
            v75 = v32;
            v55 = v24;
            v56 = v31;
            v64 = (uint64_t)v24;
            v65 = v23;
            v66 = v25;
            v67 = v26;
            v68 = v27;
            v69 = v28;
            v70 = v29;
            v71 = v30;
            v72 = v31;
            Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v75);
            v34 = v75;
            v35 = v62;
            v36 = v57;
            v37 = specialized Sequence.contains(where:)(v34, (uint64_t)v35);
            swift_bridgeObjectRelease();

            v38 = v51;
            swift_beginAccess();
            v39 = (_QWORD *)*v38;
            result = swift_isUniquelyReferenced_nonNull_native();
            *v38 = (uint64_t)v39;
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v39);
              v39 = (_QWORD *)result;
              *v51 = result;
            }
            if (v22 >= v39[2])
              goto LABEL_64;
            v57 = v36;
            TextRenderLayer.SegmentLayer.updateEffect(dynamic:superlayer:)(v37 & 1, v35);
            swift_endAccess();
            outlined consume of Text.Layout.Line.Line(v55, v23, v25);
          }
          else
          {
            outlined consume of Text.Layout.Line.Line(v24, v23, v25);
          }
          result = swift_bridgeObjectRelease();
          v5 = v53;
          v11 = v52;
          v16 = v60;
          v12 = v61;
          if (!v60)
            goto LABEL_8;
        }
        else
        {
          result = outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          if (!v16)
            goto LABEL_8;
        }
LABEL_7:
        v17 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
      }
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v21 = v12 + 1;
    if (v12 + 1 < v59)
    {
      v20 = *(_QWORD *)(v58 + 8 * v21);
      if (v20)
        goto LABEL_17;
      v21 = v12 + 2;
      if (v12 + 2 < v59)
      {
        v20 = *(_QWORD *)(v58 + 8 * v21);
        if (!v20)
        {
          v21 = v12 + 3;
          if (v12 + 3 < v59)
          {
            v20 = *(_QWORD *)(v58 + 8 * v21);
            if (v20)
              goto LABEL_17;
            while (1)
            {
              v12 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_66;
              if (v12 >= v59)
                break;
              v20 = *(_QWORD *)(v58 + 8 * v12);
              ++v21;
              if (v20)
                goto LABEL_18;
            }
          }
          goto LABEL_34;
        }
LABEL_17:
        v12 = v21;
        goto LABEL_18;
      }
    }
  }
LABEL_34:
  swift_release();
  outlined release of TextRenderLayer.Layout?(v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  v2 = v62;
  a1 = v63;
  v9 = MEMORY[0x24BEE4B08];
LABEL_35:
  v40 = *(_QWORD *)(a1 + 56);
  v58 = a1 + 56;
  v64 = v9;
  v41 = 1 << *(_BYTE *)(a1 + 32);
  v42 = -1;
  if (v41 < 64)
    v42 = ~(-1 << v41);
  v43 = v42 & v40;
  v60 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController;
  v61 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
  v59 = (unint64_t)(v41 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v44 = 0;
  while (1)
  {
    if (v43)
    {
      v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      v46 = v45 | (v44 << 6);
      goto LABEL_53;
    }
    v19 = __OFADD__(v44++, 1);
    if (v19)
      goto LABEL_62;
    if (v44 >= v59)
    {
LABEL_59:
      swift_release();
      v73[0] = *(_QWORD *)&v2[v61];
      TextRenderLayer.updateLayers(for:at:chunk:)(v64, v73, 0);
      return swift_bridgeObjectRelease();
    }
    v47 = *(_QWORD *)(v58 + 8 * v44);
    if (!v47)
      break;
LABEL_52:
    v43 = (v47 - 1) & v47;
    v46 = __clz(__rbit64(v47)) + (v44 << 6);
LABEL_53:
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v46);
    v75 = *(_QWORD *)&v2[v61];
    TextEffectsAnimationController.state(for:time:)(v49, (double *)&v75, (uint64_t)v73);
    if (v74 == 2)
    {
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((Swift::UInt64 *)&v75, v49);
      swift_endAccess();
    }
    else
    {
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(v49);
      swift_endAccess();
      specialized Set._Variant.insert(_:)((Swift::UInt64 *)v73, v49);
    }
    swift_release();
    swift_release();
    swift_release();
    result = swift_release();
    v2 = v62;
    a1 = v63;
  }
  v48 = v44 + 1;
  if (v44 + 1 >= v59)
    goto LABEL_59;
  v47 = *(_QWORD *)(v58 + 8 * v48);
  if (v47)
    goto LABEL_51;
  v48 = v44 + 2;
  if (v44 + 2 >= v59)
    goto LABEL_59;
  v47 = *(_QWORD *)(v58 + 8 * v48);
  if (v47)
    goto LABEL_51;
  v48 = v44 + 3;
  if (v44 + 3 >= v59)
    goto LABEL_59;
  v47 = *(_QWORD *)(v58 + 8 * v48);
  if (v47)
  {
LABEL_51:
    v44 = v48;
    goto LABEL_52;
  }
  while (1)
  {
    v44 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v44 >= v59)
      goto LABEL_59;
    v47 = *(_QWORD *)(v58 + 8 * v44);
    ++v48;
    if (v47)
      goto LABEL_52;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

double TextRenderLayer.drawingBounds(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  double v54;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _OWORD v59[9];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[4];
  char v70;
  double v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _QWORD v81[2];
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = a1[3];
  v6 = a1[4];
  v7 = *((_DWORD *)a1 + 10);
  v8 = a1[6];
  v9 = a1[7];
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
  v11 = a1[8];
  *(_QWORD *)&v60 = *a1;
  *((_QWORD *)&v60 + 1) = v3;
  v58 = v4;
  LOBYTE(v61) = v4;
  *((_QWORD *)&v61 + 1) = v5;
  *(_QWORD *)&v62 = v6;
  DWORD2(v62) = v7;
  *(_QWORD *)&v63 = v8;
  *((_QWORD *)&v63 + 1) = v9;
  *(_QWORD *)&v64 = v11;
  *(_QWORD *)&v59[0] = v10;
  BYTE8(v59[0]) = 0;
  TextRenderLayer.compositionContext(_:time:)((uint64_t)&v60, (uint64_t)v59, (uint64_t *)&v72);
  v12 = *((_QWORD *)&v73 + 1);
  type metadata accessor for Text.Effect.DrawingContext.Storage.Shared();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 24) = v10;
  v14 = v73;
  *(_OWORD *)(v13 + 32) = v72;
  *(_OWORD *)(v13 + 48) = v14;
  *(_OWORD *)(v13 + 64) = v74;
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v13 + 16) = MEMORY[0x24BEE4AF8];
  type metadata accessor for Text.Effect.DrawingContext.Storage();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0x3FF0000000000000;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_BYTE *)(v16 + 96) = 1;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v16 + 152) = _Q1;
  *(_QWORD *)(v16 + 168) = 0x3FF0000000000000;
  *(_BYTE *)(v16 + 176) = 0;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_QWORD *)(v16 + 216) = 0;
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = 0x3FF0000000000000;
  v22 = (char *)MEMORY[0x23B7C9E44](v12 + 16);
  if (v22)
  {
    v23 = *(double *)&v22[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale];

  }
  else
  {
    v23 = 1.0;
  }
  v69[0] = v16;
  memset(&v69[1], 0, 24);
  v70 = 1;
  v71 = v23;
  *(_QWORD *)&v60 = v2;
  *((_QWORD *)&v60 + 1) = v3;
  LOBYTE(v61) = v58;
  *((_QWORD *)&v61 + 1) = v5;
  *(_QWORD *)&v62 = v6;
  DWORD2(v62) = v7;
  *(_QWORD *)&v63 = v8;
  *((_QWORD *)&v63 + 1) = v9;
  *(_QWORD *)&v64 = v11;
  Text.Effect.Composition.resolve(in:)((uint64_t)v69);
  v24 = v69[0];
  v25 = *(_QWORD *)(v69[0] + 16);
  swift_beginAccess();
  v26 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v25 + 16) = v15;
  v27 = *(_OWORD **)(v24 + 16);
  v28 = v27[4];
  v29 = v27[2];
  v76 = v27[3];
  v77 = v28;
  v75 = v29;
  v79 = v29;
  v78 = v76;
  v80 = *((_QWORD *)&v28 + 1);
  v81[0] = v28;
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v34 = *(_QWORD *)(v26 + 16);
  if (v34)
  {
    v56 = v3;
    v57 = v2;
    swift_bridgeObjectRetain();
    outlined retain of LinearGradient((uint64_t)&v79);
    outlined retain of ViewTransform((uint64_t)&v78);
    swift_retain();
    outlined retain of LinearGradient((uint64_t)v81);
    outlined retain of LinearGradient((uint64_t)&v80);
    v35 = v34 - 1;
    for (i = 32; ; i += 144)
    {
      v60 = *(_OWORD *)(v26 + i);
      v37 = *(_OWORD *)(v26 + i + 16);
      v38 = *(_OWORD *)(v26 + i + 32);
      v39 = *(_OWORD *)(v26 + i + 64);
      v63 = *(_OWORD *)(v26 + i + 48);
      v64 = v39;
      v61 = v37;
      v62 = v38;
      v40 = *(_OWORD *)(v26 + i + 80);
      v41 = *(_OWORD *)(v26 + i + 96);
      v42 = *(_OWORD *)(v26 + i + 128);
      v67 = *(_OWORD *)(v26 + i + 112);
      v68 = v42;
      v65 = v40;
      v66 = v41;
      v43 = *(_OWORD *)(v26 + i + 112);
      v59[6] = *(_OWORD *)(v26 + i + 96);
      v59[7] = v43;
      v59[8] = *(_OWORD *)(v26 + i + 128);
      v44 = *(_OWORD *)(v26 + i + 48);
      v59[2] = *(_OWORD *)(v26 + i + 32);
      v59[3] = v44;
      v45 = *(_OWORD *)(v26 + i + 80);
      v59[4] = *(_OWORD *)(v26 + i + 64);
      v59[5] = v45;
      v46 = *(_OWORD *)(v26 + i + 16);
      v59[0] = *(_OWORD *)(v26 + i);
      v59[1] = v46;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)();
      v86.origin.x = v47;
      v86.origin.y = v48;
      v86.size.width = v49;
      v86.size.height = v50;
      v82.origin.x = x;
      v82.origin.y = y;
      v82.size.width = width;
      v82.size.height = height;
      v83 = CGRectUnion(v82, v86);
      x = v83.origin.x;
      y = v83.origin.y;
      width = v83.size.width;
      height = v83.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v35)
        break;
      --v35;
    }
    swift_bridgeObjectRelease_n();
    outlined release of LinearGradient((uint64_t)&v79);
    v2 = v57;
    v3 = v56;
  }
  else
  {
    outlined retain of LinearGradient((uint64_t)&v79);
    outlined retain of ViewTransform((uint64_t)&v78);
    swift_retain();
    outlined retain of LinearGradient((uint64_t)v81);
    outlined retain of LinearGradient((uint64_t)&v80);
    swift_bridgeObjectRelease();
    outlined release of LinearGradient((uint64_t)&v79);
  }
  outlined release of ViewTransform((uint64_t)&v78);
  swift_release();
  outlined release of LinearGradient((uint64_t)v81);
  outlined release of LinearGradient((uint64_t)&v80);
  *(_QWORD *)&v60 = v2;
  *((_QWORD *)&v60 + 1) = v3;
  LOBYTE(v61) = v58;
  *((_QWORD *)&v61 + 1) = v5;
  *(_QWORD *)&v62 = v6;
  DWORD2(v62) = v7;
  *(_QWORD *)&v63 = v8;
  *((_QWORD *)&v63 + 1) = v9;
  *(_QWORD *)&v64 = v11;
  v87.origin.x = TextRenderLayer.correctionMarkersBounds(composition:)((uint64_t)&v60);
  v87.origin.y = v51;
  v87.size.width = v52;
  v87.size.height = v53;
  v84.origin.x = x;
  v84.origin.y = y;
  v84.size.width = width;
  v84.size.height = height;
  v85 = CGRectUnion(v84, v87);
  v54 = v85.origin.x;
  if (CGRectIsNull(v85))
  {
    specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, (uint64_t (*)(void))implicit closure #1 in TextRenderLayer.drawingBounds(for:));
    v54 = 0.0;
  }
  swift_release();
  return v54;
}

unint64_t implicit closure #1 in TextRenderLayer.drawingBounds(for:)()
{
  return 0xD000000000000032;
}

_QWORD *TextRenderLayer.updateLayers(for:at:chunk:)(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  double v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  uint64_t v43;
  _QWORD v44[5];
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[7];
  _BYTE v79[144];
  _QWORD v80[18];
  uint64_t v81[4];
  uint64_t v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v46 = a3;
  v60 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v64 = (uint64_t)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a2;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v80, (uint64_t)v81, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = (_QWORD *)_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v81);
  if ((_DWORD)result == 1)
    return result;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v80, (uint64_t)v79, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined retain of TextRenderLayer.Layout((uint64_t)v79);
  v9 = TextRenderLayer.segmentIndices(for:)(a1);
  v10 = *(_QWORD *)(v9 + 56);
  v49 = v9 + 56;
  v58 = v9;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & v10;
  v48 = (uint64_t *)(v3
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
  v47 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController;
  v44[1] = v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_geometryObserver;
  v51 = v3;
  v14 = v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements;
  v45 = (uint64_t *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers);
  swift_beginAccess();
  v44[3] = v14;
  swift_beginAccess();
  v15 = 0;
  v68 = 0;
  v50 = (unint64_t)(v11 + 63) >> 6;
  v44[4] = v7;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_37;
    if (v15 >= v50)
      goto LABEL_33;
    v19 = *(_QWORD *)(v49 + 8 * v15);
    if (!v19)
      break;
LABEL_19:
    v13 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_20:
    v21 = *(_QWORD *)(*(_QWORD *)(v58 + 48) + 8 * v17);
    if ((v21 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      JUMPOUT(0x234B963B4);
    }
    if (v21 >= *(_QWORD *)(v82 + 16))
      goto LABEL_36;
    outlined init with copy of TypesettingLanguage(v82+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v21, v64, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v63 = v21;
      v56 = v13;
      v57 = v15;
      v22 = *(_QWORD *)(v64 + 32);
      v24 = *(unsigned __int8 *)(v64 + 40);
      v25 = *(_QWORD *)(v64 + 48);
      v26 = *(_QWORD *)(v64 + 56);
      v27 = *(_DWORD *)(v64 + 64);
      v28 = *(_QWORD *)(v64 + 72);
      v29 = *(_QWORD *)(v64 + 80);
      v30 = *(_QWORD *)(v64 + 88);
      v69 = *(void **)(v64 + 24);
      v23 = v69;
      v70 = v22;
      v71 = v24;
      v72 = v25;
      v73 = v26;
      v67 = v27;
      v74 = v27;
      v75 = v28;
      v76 = v29;
      v77 = v30;
      v78[0] = v7;
      v31 = *(_QWORD *)(v51 + v47);
      v32 = *v48;
      v33 = v48[1];
      v66 = v31 + 112;
      swift_beginAccess();
      v34 = *(uint64_t **)(v31 + 112);
      outlined copy of Text.Layout.Line.Line(v23, v22, v24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v35 = Text.Effect.Composition.needsUpdate(at:context:)(v78, v32, v33, v34, v31);
      v65 = v31;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v23, v22, v24);
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
      {
        v69 = v23;
        v70 = v22;
        v71 = v24;
        v72 = v25;
        v73 = v26;
        v74 = v67;
        v75 = v28;
        v76 = v29;
        v77 = v30;
        outlined copy of Text.Layout.Line.Line(v23, v22, v24);
        swift_bridgeObjectRetain();
        v36 = TextRenderLayer.drawingBounds(for:)((uint64_t *)&v69);
        v38 = v37;
        v40 = v39;
        v42 = v41;
        v54 = v24;
        outlined consume of Text.Layout.Line.Line(v23, v22, v24);
        swift_bridgeObjectRelease();
        v62 = v30;
        if ((v46 & 1) == 0)
          TextRenderLayer.pixelLength.getter();
        v83.origin.x = v36;
        v83.origin.y = v38;
        v83.size.width = v40;
        v83.size.height = v42;
        CGRectGetMinX(v83);
        v84.origin.x = v36;
        v84.origin.y = v38;
        v84.size.width = v40;
        v84.size.height = v42;
        CGRectGetMaxX(v84);
        v85.origin.x = v36;
        v85.origin.y = v38;
        v85.size.width = v40;
        v85.size.height = v42;
        CGRectGetMinY(v85);
        v86.origin.x = v36;
        v86.origin.y = v38;
        v86.size.width = v40;
        v86.size.height = v42;
        CGRectGetMaxY(v86);
        v43 = *v45;
        if (v63 < *(_QWORD *)(*v45 + 16))
        {
          v52 = v22;
          v53 = v23;
          v61 = *(_QWORD *)(v43 + 8 * v63 + 32);
          v55 = v61;
          __asm { BR              X9 }
        }
        goto LABEL_38;
      }
      outlined consume of Text.Layout.Line.Line(v23, v22, v24);
      swift_bridgeObjectRelease();
      v15 = v57;
      v13 = v56;
    }
    else
    {
      outlined destroy of TypesettingConfiguration(v64, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    }
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v50)
    goto LABEL_33;
  v19 = *(_QWORD *)(v49 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v15 + 2;
  if (v15 + 2 >= v50)
    goto LABEL_33;
  v19 = *(_QWORD *)(v49 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v15 + 3;
  if (v15 + 3 >= v50)
    goto LABEL_33;
  v19 = *(_QWORD *)(v49 + 8 * v20);
  if (v19)
  {
LABEL_18:
    v15 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      JUMPOUT(0x234B963BCLL);
    }
    if (v15 >= v50)
      break;
    v19 = *(_QWORD *)(v49 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_33:
  swift_release();
  return outlined release of TextRenderLayer.Layout?(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
}

uint64_t TextRenderLayer.segmentIndices(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  result = MEMORY[0x24BEE4B08];
  v19 = MEMORY[0x24BEE4B08];
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags) & 8) == 0)
  {
    v4 = a1 + 56;
    v5 = 1 << *(_BYTE *)(a1 + 32);
    v6 = -1;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    v7 = v6 & *(_QWORD *)(a1 + 56);
    v8 = v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectToSegmentsIndices;
    v9 = (unint64_t)(v5 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v10 = 0;
    if (v7)
      goto LABEL_7;
LABEL_8:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (v14)
        goto LABEL_21;
      v10 = v13 + 2;
      if (v13 + 2 >= v9)
      {
LABEL_26:
        swift_release();
        return v19;
      }
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v15 = v13 + 3;
        if (v15 < v9)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
          {
            v10 = v15;
            goto LABEL_21;
          }
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_29;
            if (v10 >= v9)
              goto LABEL_26;
            v14 = *(_QWORD *)(v4 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_21;
          }
        }
        goto LABEL_26;
      }
    }
LABEL_21:
    v7 = (v14 - 1) & v14;
    for (i = __clz(__rbit64(v14)) + (v10 << 6); ; i = v11 | (v10 << 6))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v8 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v16), (v17 & 1) != 0))
      {
        swift_endAccess();
        v18 = swift_bridgeObjectRetain();
        result = specialized Set.formUnion<A>(_:)(v18);
        if (!v7)
          goto LABEL_8;
      }
      else
      {
        result = swift_endAccess();
        if (!v7)
          goto LABEL_8;
      }
LABEL_7:
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
    }
  }
  return result;
}

void TextRenderLayer.pixelLength.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  if (objc_msgSend(v0, sel_delegate))
  {
    type metadata accessor for TextRenderSurface();
    v1 = swift_dynamicCastClass();
    if (v1
      && (v2 = MEMORY[0x23B7C9E44](v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer)) != 0)
    {
      v3 = (void *)v2;
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

_QWORD *TextRenderLayer.updateClippingBounds()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::Int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::Int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  Swift::UInt64 v126;
  uint64_t v127;
  Swift::Int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  Swift::UInt64 v154;
  Swift::Int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  Swift::UInt64 v179;
  unint64_t v180;
  uint64_t v181;
  Swift::Int v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  Swift::UInt64 v206;
  Swift::Int v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  _QWORD *v258;
  uint64_t (*v259)(void);
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  char v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t (*v358)(void);
  _QWORD *v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  char v373;
  _QWORD *v374;
  uint64_t (*v375)(void);
  _QWORD *v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  _QWORD *v381;
  uint64_t (*v382)(void);
  _QWORD *v383;
  char v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  char v388;
  _QWORD *v389;
  uint64_t (*v390)(void);
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  char v397;
  _QWORD *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  char v407;
  _QWORD *v408;
  uint64_t (*v409)(void);
  _QWORD *v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t (*v418)(void);
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  char v429;
  _QWORD *v430;
  uint64_t (*v431)(void);
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  uint64_t v437;
  unint64_t v438;
  char v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  _QWORD *v448;
  uint64_t v449;
  uint64_t (*v450)(void);
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  uint64_t v455;
  char v456;
  uint64_t v457;
  uint64_t v458;
  void *v459;
  uint64_t v460;
  char v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  char v469;
  _QWORD *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t (*v473)(void);
  _QWORD *v474;
  uint64_t v475;
  void *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  void *v483;
  char v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  void *v489;
  unint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  char v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t (*v500)(void);
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  void *v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  char v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  char v521;
  _QWORD *v522;
  uint64_t (*v523)(void);
  _QWORD *v524;
  uint64_t v525;
  uint64_t v526;
  void *v527;
  uint64_t v528;
  char v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  char v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  void *v541;
  uint64_t v542;
  char v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  void *v548;
  uint64_t v549;
  char v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  void *v561;
  uint64_t v562;
  char v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t v568;
  void *v569;
  uint64_t v570;
  char v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  void *v576;
  char v577;
  double v578;
  double v579;
  CGFloat v580;
  double v581;
  CGFloat v582;
  double v583;
  CGFloat v584;
  void *v585;
  uint64_t v586;
  char v587;
  _QWORD v588[4];
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  void *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  void *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  void *v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  void *v686;
  uint64_t v687;
  void *v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  void *v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  void *v703;
  uint64_t v704;
  void *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  void *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  void *v719;
  uint64_t v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  void *v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  void *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  unint64_t v773;
  void *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t *v783;
  uint64_t v784;
  uint64_t *v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  void *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  _QWORD v808[18];
  uint64_t v809[4];
  uint64_t v810;
  CGRect v811;
  CGRect v812;
  CGRect v813;
  CGRect v814;

  v665 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v666 = *(_QWORD *)(v665 - 8);
  MEMORY[0x24BDAC7A8](v665);
  v756 = (uint64_t)v588 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v808, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v808, (uint64_t)v809, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = (_QWORD *)_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v809);
  if ((_DWORD)result != 1)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
    v786 = *(_QWORD *)(v0
                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                     + 8);
    v4 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
    swift_beginAccess();
    v789 = v4;
    v5 = *(_QWORD *)(v4 + 112);
    v6 = v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers;
    result = (_QWORD *)swift_beginAccess();
    v592 = v6;
    v664 = *(_QWORD *)(*(_QWORD *)v6 + 16);
    if (v664)
    {
      v785 = (uint64_t *)(v5 + 40);
      v783 = (uint64_t *)(v5 + 24);
      v588[2] = v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_geometryObserver;
      v588[3] = v0;
      v7 = v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements;
      v8 = *(unsigned __int8 *)(v666 + 80);
      v663 = v810;
      v662 = v810 + ((v8 + 32) & ~v8);
      outlined release of TextRenderLayer.Layout?(v808, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v588[1] = v7;
      swift_beginAccess();
      v9 = 0;
      v796 = 0;
      v788 = v3;
      v787 = v5;
      while (1)
      {
        if (v9 >= *(_QWORD *)(v663 + 16))
        {
          __break(1u);
          goto LABEL_284;
        }
        outlined init with copy of TypesettingLanguage(v662 + *(_QWORD *)(v666 + 72) * v9, v756, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if (swift_getEnumCaseMultiPayload() != 2)
        {
          outlined destroy of TypesettingConfiguration(v756, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          goto LABEL_5;
        }
        v11 = *(void **)(v756 + 24);
        v10 = *(_QWORD *)(v756 + 32);
        v12 = *(unsigned __int8 *)(v756 + 40);
        v13 = *(_QWORD *)(v756 + 88);
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
          break;
        outlined consume of Text.Layout.Line.Line(*(void **)(v756 + 24), v10, v12);
        swift_bridgeObjectRelease();
LABEL_5:
        if (++v9 == v664)
        {
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return outlined release of TextRenderLayer.Layout?(v808, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
        }
      }
      v668 = v9;
      v15 = *(_QWORD *)(v756 + 48);
      v16 = *(_QWORD *)(v756 + 56);
      v620 = *(_DWORD *)(v756 + 64);
      v17 = v13 + 32;
      v19 = *(_QWORD *)(v756 + 72);
      v18 = *(_QWORD *)(v756 + 80);
      v20 = v10;
      v21 = v12;
      swift_bridgeObjectRetain_n();
      v642 = v20;
      v643 = v21;
      outlined copy of Text.Layout.Line.Line(v11, v20, v21);
      swift_bridgeObjectRetain();
      swift_beginAccess();
      v22 = 0;
      v644 = v13;
      v641 = v11;
      v637 = v13 + 32;
      v638 = v14;
      while (1)
      {
        v23 = (uint64_t *)(v17 + 88 * v22);
        v25 = *v23;
        v24 = v23[1];
        v26 = (void *)v23[2];
        v27 = v23[3];
        v28 = v23[4];
        v29 = v23[5];
        v30 = v23[6];
        v31 = v23[7];
        v33 = v23[8];
        v32 = v23[9];
        v784 = v23[10];
        if (!(v31 >> 62))
          break;
        if (v31 >> 62 != 1)
        {
          v723 = v32;
          v724 = v33;
          v725 = v24;
          v726 = v26;
          v727 = v27;
          v728 = v28;
          v729 = v29;
          v730 = v30;
          v34 = *v785;
          v35 = *(_QWORD *)(*v785 + 16);
          v675 = v22;
          if (v35)
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v25);
            v36 = Hasher._finalize()();
            v37 = -1 << *(_BYTE *)(v34 + 32);
            v38 = v36 & ~v37;
            if (((*(_QWORD *)(v34 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0)
            {
              v39 = *(_QWORD *)(v34 + 48);
              if (*(_QWORD *)(v39 + 8 * v38) == v25)
                goto LABEL_261;
              v40 = ~v37;
              while (1)
              {
                v38 = (v38 + 1) & v40;
                if (((*(_QWORD *)(v34 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
                  break;
                if (*(_QWORD *)(v39 + 8 * v38) == v25)
                  goto LABEL_261;
              }
            }
          }
          v518 = v783;
          swift_beginAccess();
          v519 = *v518;
          if (*(_QWORD *)(v519 + 16))
          {
            v520 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
            if ((v521 & 1) != 0)
            {
              v522 = *(_QWORD **)(*(_QWORD *)(v519 + 56) + 8 * v520);
              swift_endAccess();
              v523 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v522) + 0x110);
              v524 = v522;
              LODWORD(v795) = v523();

              v525 = v25;
              v755 = v25;
              v526 = v725;
              v527 = v726;
              v528 = v727;
              v529 = v728;
              v530 = v729;
              v531 = v730;
              outlined consume of Text.Effect.Composition.Operation(v525, v725, v726, v727, v728, v729, v730, v31);
              outlined consume of Text.Effect.Composition.Operation(v755, v526, v527, v528, v529, v530, v531, v31);
              v17 = v637;
              v14 = v638;
              v22 = v675;
              if ((v795 & 1) != 0)
                goto LABEL_278;
              goto LABEL_263;
            }
          }
          swift_endAccess();
LABEL_261:
          v755 = v25;
          v532 = v25;
          v533 = v725;
          v534 = v726;
          v535 = v727;
          v536 = v728;
          v537 = v729;
          v538 = v730;
          outlined consume of Text.Effect.Composition.Operation(v532, v725, v726, v727, v728, v729, v730, v31);
          v24 = v533;
          v26 = v534;
          v27 = v535;
          v25 = v755;
          LOBYTE(v28) = v536;
          v29 = v537;
          v30 = v538;
          v17 = v637;
          v14 = v638;
          v22 = v675;
        }
        outlined consume of Text.Effect.Composition.Operation(v25, v24, v26, v27, v28, v29, v30, v31);
LABEL_263:
        if (++v22 == v14)
        {
          swift_bridgeObjectRelease_n();
          v585 = v641;
          v586 = v642;
          v587 = v643;
          outlined consume of Text.Layout.Line.Line(v641, v642, v643);
          swift_bridgeObjectRelease();
          outlined consume of Text.Layout.Line.Line(v585, v586, v587);
          swift_bridgeObjectRelease();
          v9 = v668;
          goto LABEL_5;
        }
      }
      v740 = *(_QWORD *)(v784 + 16);
      if (!v740)
        goto LABEL_263;
      v675 = v22;
      v746 = v784 + 32;
      v41 = v25;
      v42 = v31;
      v43 = v30;
      v44 = v29;
      v45 = v28;
      v755 = v25;
      v46 = v27;
      v47 = v26;
      v48 = v24;
      v648 = v31;
      v49 = v32;
      outlined copy of Text.Effect.Composition.Operation(v41, v24, v26, v27, v28, v29, v30, v42);
      swift_bridgeObjectRetain();
      v723 = v49;
      v724 = v33;
      v725 = v48;
      v726 = v47;
      v727 = v46;
      v728 = v45;
      v729 = v44;
      v730 = v43;
      outlined copy of Text.Effect.Composition.Operation(v755, v48, v47, v46, v45, v44, v43, v648);
      swift_bridgeObjectRetain();
      v50 = 0;
      while (1)
      {
        v51 = (uint64_t *)(v746 + 88 * v50);
        v53 = *v51;
        v52 = v51[1];
        v54 = (void *)v51[2];
        v55 = v51[3];
        v56 = v51[4];
        v57 = v51[5];
        v58 = v51[6];
        v59 = v51[7];
        v60 = v51[8];
        v61 = v51[9];
        v62 = v51[10];
        if (v59 >> 62)
        {
          if (v59 >> 62 == 1)
          {
LABEL_249:
            outlined consume of Text.Effect.Composition.Operation(v53, v52, v54, v55, v56, v57, v58, v59);
            goto LABEL_250;
          }
          v674 = v50;
          v63 = v57;
          v64 = v58;
          v722 = v59;
          v748 = v52;
          v719 = v54;
          v720 = v55;
          v721 = v56;
          v65 = *v785;
          if (!*(_QWORD *)(*v785 + 16))
            goto LABEL_239;
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v53);
          v66 = Hasher._finalize()();
          v67 = -1 << *(_BYTE *)(v65 + 32);
          v68 = v66 & ~v67;
          v69 = v65 + 56;
          if (((*(_QWORD *)(v65 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8)) >> v68) & 1) == 0)
            goto LABEL_239;
          v70 = *(_QWORD *)(v65 + 48);
          if (*(_QWORD *)(v70 + 8 * v68) == v53)
          {
            v71 = v721;
            v72 = v720;
            v73 = v719;
            v74 = v748;
            v75 = v722;
            v76 = v64;
            v77 = v63;
            goto LABEL_248;
          }
          v491 = ~v67;
          v492 = (v68 + 1) & v491;
          if (((*(_QWORD *)(v69 + ((v492 >> 3) & 0xFFFFFFFFFFFFF8)) >> v492) & 1) != 0)
          {
            v76 = v64;
            if (*(_QWORD *)(v70 + 8 * v492) == v53)
            {
              v71 = v721;
              v72 = v720;
              v73 = v719;
              v74 = v748;
              v75 = v722;
              v77 = v63;
LABEL_248:
              v679 = v62;
              v751 = v61;
              v508 = v73;
              v509 = v74;
              v510 = v72;
              v511 = v77;
              v512 = v76;
              v513 = v71;
              v514 = v77;
              v515 = v76;
              v516 = v75;
              outlined consume of Text.Effect.Composition.Operation(v53, v74, v73, v72, v71, v511, v512, v75);
              v55 = v510;
              v52 = v509;
              v54 = v508;
              v59 = v516;
              v58 = v515;
              v57 = v514;
              LOBYTE(v56) = v513;
              v50 = v674;
              goto LABEL_249;
            }
            v517 = (v492 + 1) & v491;
            v77 = v63;
            if (((*(_QWORD *)(v69 + ((v517 >> 3) & 0xFFFFFFFFFFFFF8)) >> v517) & 1) != 0)
            {
              while (*(_QWORD *)(v70 + 8 * v517) != v53)
              {
                v517 = (v517 + 1) & v491;
                if (((*(_QWORD *)(v69 + ((v517 >> 3) & 0xFFFFFFFFFFFFF8)) >> v517) & 1) == 0)
                  goto LABEL_240;
              }
              goto LABEL_245;
            }
          }
          else
          {
LABEL_239:
            v76 = v64;
            v77 = v63;
          }
LABEL_240:
          v493 = v783;
          swift_beginAccess();
          v494 = *v493;
          if (*(_QWORD *)(v494 + 16))
          {
            v495 = v53;
            v496 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
            if ((v497 & 1) != 0)
            {
              v498 = *(_QWORD **)(*(_QWORD *)(v494 + 56) + 8 * v496);
              swift_endAccess();
              v499 = *MEMORY[0x24BEE4EA0] & *v498;
              v654 = v76;
              v500 = *(uint64_t (**)(void))(v499 + 272);
              v501 = v498;
              LODWORD(v795) = v500();

              v502 = v53;
              v503 = v748;
              v504 = v719;
              v505 = v720;
              LOBYTE(v501) = v721;
              v506 = v77;
              v636 = v77;
              v507 = v722;
              outlined consume of Text.Effect.Composition.Operation(v502, v748, v719, v720, v721, v506, v654, v722);
              outlined consume of Text.Effect.Composition.Operation(v495, v503, v504, v505, (char)v501, v636, v654, v507);
              v50 = v674;
              if ((v795 & 1) != 0)
                goto LABEL_277;
              goto LABEL_250;
            }
            swift_endAccess();
            v71 = v721;
            v72 = v720;
            v73 = v719;
            v74 = v748;
            goto LABEL_247;
          }
          swift_endAccess();
LABEL_245:
          v71 = v721;
          v72 = v720;
          v73 = v719;
          v74 = v748;
LABEL_247:
          v75 = v722;
          goto LABEL_248;
        }
        v737 = *(_QWORD *)(v62 + 16);
        if (v737)
          break;
LABEL_250:
        if (++v50 == v740)
        {
          v31 = v648;
          swift_bridgeObjectRelease_n();
          v25 = v755;
          goto LABEL_261;
        }
      }
      v674 = v50;
      v744 = v62 + 32;
      v751 = v61;
      v78 = v54;
      v646 = v60;
      v79 = v52;
      v748 = v52;
      v80 = v55;
      v81 = v56;
      v82 = v58;
      v83 = v57;
      v84 = v59;
      outlined copy of Text.Effect.Composition.Operation(v53, v52, v54, v55, v56, v57, v58, v59);
      swift_bridgeObjectRetain();
      v631 = v53;
      v719 = v78;
      v720 = v80;
      v721 = v81;
      v636 = v83;
      v654 = v82;
      v722 = v84;
      outlined copy of Text.Effect.Composition.Operation(v53, v79, v78, v80, v81, v83, v82, v84);
      v679 = v62;
      swift_bridgeObjectRetain();
      v85 = 0;
      while (1)
      {
        v86 = (uint64_t *)(v744 + 88 * v85);
        v88 = *v86;
        v87 = v86[1];
        v89 = (void *)v86[2];
        v90 = v86[3];
        v91 = v86[4];
        v92 = v86[5];
        v93 = v86[6];
        v94 = v86[7];
        v96 = v86[8];
        v95 = v86[9];
        v97 = v86[10];
        if (v94 >> 62)
        {
          if (v94 >> 62 == 1)
          {
LABEL_233:
            outlined consume of Text.Effect.Composition.Operation(v88, v87, v89, v90, v91, v92, v93, v94);
            goto LABEL_234;
          }
          v673 = v85;
          v98 = v92;
          v713 = v93;
          v763 = v94;
          v710 = v87;
          v711 = v89;
          v712 = v90;
          v99 = *v785;
          v100 = *(_QWORD *)(*v785 + 16);
          v754 = v91;
          if (v100)
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v88);
            v101 = Hasher._finalize()();
            v102 = -1 << *(_BYTE *)(v99 + 32);
            v103 = v101 & ~v102;
            if (((*(_QWORD *)(v99 + 56 + ((v103 >> 3) & 0xFFFFFFFFFFFFF8)) >> v103) & 1) != 0)
            {
              v104 = *(_QWORD *)(v99 + 48);
              if (*(_QWORD *)(v104 + 8 * v103) == v88)
                goto LABEL_229;
              v105 = ~v102;
              while (1)
              {
                v103 = (v103 + 1) & v105;
                if (((*(_QWORD *)(v99 + 56 + ((v103 >> 3) & 0xFFFFFFFFFFFFF8)) >> v103) & 1) == 0)
                  break;
                if (*(_QWORD *)(v104 + 8 * v103) == v88)
                  goto LABEL_229;
              }
            }
          }
          v466 = v783;
          swift_beginAccess();
          v467 = *v466;
          if (*(_QWORD *)(v467 + 16))
          {
            v468 = specialized __RawDictionaryStorage.find<A>(_:)(v88);
            if ((v469 & 1) != 0)
            {
              v470 = *(_QWORD **)(*(_QWORD *)(v467 + 56) + 8 * v468);
              swift_endAccess();
              v471 = *MEMORY[0x24BEE4EA0] & *v470;
              v472 = v98;
              v634 = v98;
              v473 = *(uint64_t (**)(void))(v471 + 272);
              v474 = v470;
              LODWORD(v795) = v473();

              v475 = v710;
              v476 = v711;
              v477 = v712;
              v478 = v472;
              v479 = v713;
              v480 = v763;
              outlined consume of Text.Effect.Composition.Operation(v88, v710, v711, v712, v754, v478, v713, v763);
              outlined consume of Text.Effect.Composition.Operation(v88, v475, v476, v477, v754, v634, v479, v480);
              v85 = v673;
              if ((v795 & 1) != 0)
                goto LABEL_276;
              goto LABEL_234;
            }
            swift_endAccess();
            v486 = v712;
            v489 = v711;
            v488 = v710;
            goto LABEL_231;
          }
          swift_endAccess();
LABEL_229:
          v486 = v712;
          v489 = v711;
          v488 = v710;
LABEL_231:
          v490 = v763;
          v487 = v713;
LABEL_232:
          v739 = v97;
          v763 = v490;
          v481 = v486;
          v482 = v488;
          v483 = v489;
          v484 = v754;
          v485 = v487;
          outlined consume of Text.Effect.Composition.Operation(v88, v488, v489, v486, v754, v98, v487, v490);
          v93 = v485;
          v92 = v98;
          LOBYTE(v91) = v484;
          v89 = v483;
          v87 = v482;
          v94 = v763;
          v90 = v481;
          v85 = v673;
          goto LABEL_233;
        }
        v734 = *(_QWORD *)(v97 + 16);
        if (v734)
          break;
LABEL_234:
        if (++v85 == v737)
        {
          v77 = v636;
          v62 = v679;
          swift_bridgeObjectRelease_n();
          v71 = v721;
          v75 = v722;
          v76 = v654;
          v73 = v719;
          v72 = v720;
          v53 = v631;
          v74 = v748;
          v61 = v751;
          goto LABEL_248;
        }
      }
      v673 = v85;
      v742 = v97 + 32;
      v106 = v90;
      v763 = v94;
      v754 = v91;
      v624 = v96;
      v107 = v87;
      v710 = v87;
      v108 = v95;
      v109 = v89;
      v711 = v89;
      v110 = v92;
      v111 = v93;
      outlined copy of Text.Effect.Composition.Operation(v88, v87, v89, v90, v91, v92, v93, v94);
      swift_bridgeObjectRetain();
      v623 = v108;
      v625 = v88;
      v712 = v106;
      v634 = v110;
      v713 = v111;
      outlined copy of Text.Effect.Composition.Operation(v88, v107, v109, v106, v754, v110, v111, v763);
      v739 = v97;
      swift_bridgeObjectRetain();
      v112 = 0;
      while (1)
      {
        v113 = (uint64_t *)(v742 + 88 * v112);
        v114 = *v113;
        v115 = v113[1];
        v116 = (void *)v113[2];
        v117 = v113[3];
        v118 = v113[4];
        v119 = v113[5];
        v120 = v113[6];
        v121 = v113[7];
        v122 = v113[8];
        v123 = v113[9];
        v124 = v113[10];
        if (v121 >> 62)
        {
          if (v121 >> 62 == 1)
          {
LABEL_216:
            outlined consume of Text.Effect.Composition.Operation(v114, v115, v116, v117, v118, v119, v120, v121);
            goto LABEL_217;
          }
          v677 = v112;
          v760 = v120;
          v125 = v121;
          v126 = v114;
          v762 = v115;
          v705 = v116;
          v706 = v117;
          v707 = v118;
          v708 = v119;
          v127 = *v785;
          if (!*(_QWORD *)(*v785 + 16))
            goto LABEL_207;
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v126);
          v128 = Hasher._finalize()();
          v129 = -1 << *(_BYTE *)(v127 + 32);
          v130 = v128 & ~v129;
          v131 = v127 + 56;
          if (((*(_QWORD *)(v127 + 56 + ((v130 >> 3) & 0xFFFFFFFFFFFFF8)) >> v130) & 1) == 0)
            goto LABEL_207;
          v132 = *(_QWORD *)(v127 + 48);
          if (*(_QWORD *)(v132 + 8 * v130) == v126)
          {
            v133 = v708;
            v134 = v707;
            v135 = v706;
            v136 = v705;
            v137 = v762;
            v138 = v126;
            v139 = v125;
LABEL_206:
            v464 = v760;
            v112 = v677;
LABEL_215:
            v762 = v137;
            v678 = v122;
            v749 = v138;
            v459 = v136;
            v460 = v135;
            v461 = v134;
            v462 = v133;
            v463 = v139;
            outlined consume of Text.Effect.Composition.Operation(v138, v137, v136, v135, v134, v133, v464, v139);
            v121 = v463;
            v116 = v459;
            v114 = v749;
            v117 = v460;
            v115 = v762;
            LOBYTE(v118) = v461;
            v119 = v462;
            v120 = v464;
            goto LABEL_216;
          }
          v440 = ~v129;
          v441 = (v130 + 1) & v440;
          if (((*(_QWORD *)(v131 + ((v441 >> 3) & 0xFFFFFFFFFFFFF8)) >> v441) & 1) != 0)
          {
            v139 = v125;
            if (*(_QWORD *)(v132 + 8 * v441) == v126)
            {
              v133 = v708;
              v134 = v707;
              v135 = v706;
              v136 = v705;
              v137 = v762;
              v138 = v126;
              goto LABEL_206;
            }
            v465 = (v441 + 1) & v440;
            v112 = v677;
            if (((*(_QWORD *)(v131 + ((v465 >> 3) & 0xFFFFFFFFFFFFF8)) >> v465) & 1) != 0)
            {
              while (*(_QWORD *)(v132 + 8 * v465) != v126)
              {
                v465 = (v465 + 1) & v440;
                if (((*(_QWORD *)(v131 + ((v465 >> 3) & 0xFFFFFFFFFFFFF8)) >> v465) & 1) == 0)
                  goto LABEL_208;
              }
              v133 = v708;
              v134 = v707;
              v135 = v706;
              v136 = v705;
              v137 = v762;
              v138 = v126;
              v464 = v760;
              goto LABEL_215;
            }
          }
          else
          {
LABEL_207:
            v139 = v125;
            v112 = v677;
          }
LABEL_208:
          v442 = v139;
          v443 = v783;
          swift_beginAccess();
          v444 = *v443;
          if (*(_QWORD *)(v444 + 16))
          {
            v445 = v126;
            v446 = specialized __RawDictionaryStorage.find<A>(_:)(v126);
            if ((v447 & 1) != 0)
            {
              v448 = *(_QWORD **)(*(_QWORD *)(v444 + 56) + 8 * v446);
              swift_endAccess();
              v449 = *MEMORY[0x24BEE4EA0] & *v448;
              v647 = v442;
              v450 = *(uint64_t (**)(void))(v449 + 272);
              v451 = v448;
              LODWORD(v795) = v450();

              v452 = v126;
              v453 = v762;
              v454 = v705;
              v455 = v706;
              v456 = v707;
              v457 = v708;
              outlined consume of Text.Effect.Composition.Operation(v452, v762, v705, v706, v707, v708, v760, v647);
              v458 = v453;
              v112 = v677;
              outlined consume of Text.Effect.Composition.Operation(v445, v458, v454, v455, v456, v457, v760, v647);
              if ((v795 & 1) != 0)
                goto LABEL_275;
              goto LABEL_217;
            }
            swift_endAccess();
            v133 = v708;
            v134 = v707;
            v135 = v706;
            v136 = v705;
            v138 = v126;
            v137 = v762;
          }
          else
          {
            swift_endAccess();
            v133 = v708;
            v134 = v707;
            v135 = v706;
            v136 = v705;
            v137 = v762;
            v138 = v126;
          }
          v464 = v760;
          v139 = v442;
          goto LABEL_215;
        }
        v731 = *(_QWORD *)(v124 + 16);
        if (v731)
          break;
LABEL_217:
        if (++v112 == v734)
        {
          v97 = v739;
          swift_bridgeObjectRelease_n();
          v486 = v712;
          v487 = v713;
          v98 = v634;
          v88 = v625;
          v488 = v710;
          v489 = v711;
          v490 = v763;
          goto LABEL_232;
        }
      }
      v677 = v112;
      v741 = v124 + 32;
      v760 = v120;
      v749 = v114;
      v140 = v116;
      v762 = v115;
      v141 = v117;
      v142 = v118;
      v143 = v119;
      v144 = v121;
      outlined copy of Text.Effect.Composition.Operation(v114, v115, v116, v117, v118, v119, v120, v121);
      swift_bridgeObjectRetain();
      v622 = v123;
      v678 = v122;
      v705 = v140;
      v706 = v141;
      v707 = v142;
      v708 = v143;
      v647 = v144;
      outlined copy of Text.Effect.Composition.Operation(v749, v762, v140, v141, v142, v143, v760, v144);
      v621 = v124;
      swift_bridgeObjectRetain();
      v145 = 0;
      while (1)
      {
        v146 = (uint64_t *)(v741 + 88 * v145);
        v147 = *v146;
        v769 = v146[1];
        v149 = (void *)v146[2];
        v148 = v146[3];
        v777 = v146[4];
        v778 = v146[5];
        v150 = v146[7];
        v779 = v146[6];
        v151 = v146[8];
        v781 = v146[9];
        v780 = v146[10];
        if (v150 >> 62)
        {
          if (v150 >> 62 == 1)
            goto LABEL_199;
          v676 = v145;
          v747 = v151;
          v703 = v149;
          v704 = v148;
          v152 = *v785;
          if (*(_QWORD *)(*v785 + 16))
          {
            v153 = v150;
            v154 = v147;
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v154);
            v155 = Hasher._finalize()();
            v156 = -1 << *(_BYTE *)(v152 + 32);
            v157 = v155 & ~v156;
            v158 = v152 + 56;
            if (((*(_QWORD *)(v152 + 56 + ((v157 >> 3) & 0xFFFFFFFFFFFFF8)) >> v157) & 1) != 0)
            {
              v159 = *(_QWORD *)(v152 + 48);
              v147 = v154;
              if (*(_QWORD *)(v159 + 8 * v157) == v154)
              {
                v148 = v704;
                v149 = v703;
                v150 = v153;
                v145 = v676;
                goto LABEL_199;
              }
              v423 = ~v156;
              v424 = (v157 + 1) & v423;
              v145 = v676;
              v150 = v153;
              if (((*(_QWORD *)(v158 + ((v424 >> 3) & 0xFFFFFFFFFFFFF8)) >> v424) & 1) != 0)
              {
                while (*(_QWORD *)(v159 + 8 * v424) != v154)
                {
                  v424 = (v424 + 1) & v423;
                  if (((*(_QWORD *)(v158 + ((v424 >> 3) & 0xFFFFFFFFFFFFF8)) >> v424) & 1) == 0)
                    goto LABEL_194;
                }
                v148 = v704;
                v149 = v703;
LABEL_199:
                outlined consume of Text.Effect.Composition.Operation(v147, v769, v149, v148, v777, v778, v779, v150);
                goto LABEL_200;
              }
            }
            else
            {
              v147 = v154;
              v150 = v153;
              v145 = v676;
            }
          }
          else
          {
            v145 = v676;
          }
LABEL_194:
          v672 = v150;
          v425 = v147;
          v426 = v783;
          swift_beginAccess();
          v427 = *v426;
          if (*(_QWORD *)(v427 + 16))
          {
            v428 = specialized __RawDictionaryStorage.find<A>(_:)(v425);
            if ((v429 & 1) != 0)
            {
              v430 = *(_QWORD **)(*(_QWORD *)(v427 + 56) + 8 * v428);
              swift_endAccess();
              v431 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v430) + 0x110);
              v432 = v430;
              LODWORD(v795) = v431();

              v433 = v778;
              v434 = v779;
              v435 = v769;
              LOBYTE(v431) = v777;
              v436 = v703;
              v437 = v704;
              v438 = v672;
              outlined consume of Text.Effect.Composition.Operation(v425, v769, v703, v704, v777, v778, v779, v672);
              v439 = (char)v431;
              v145 = v676;
              outlined consume of Text.Effect.Composition.Operation(v425, v435, v436, v437, v439, v433, v434, v438);
              if ((v795 & 1) != 0)
                goto LABEL_274;
              goto LABEL_200;
            }
          }
          swift_endAccess();
          v148 = v704;
          v149 = v703;
          v147 = v425;
          v150 = v672;
          goto LABEL_199;
        }
        v160 = *(_QWORD *)(v780 + 16);
        if (v160)
          break;
LABEL_200:
        if (++v145 == v731)
        {
          swift_bridgeObjectRelease_n();
          v133 = v708;
          v139 = v647;
          v112 = v677;
          v134 = v707;
          v135 = v706;
          v136 = v705;
          v464 = v760;
          v122 = v678;
          v138 = v749;
          v137 = v762;
          goto LABEL_215;
        }
      }
      v676 = v145;
      v738 = v780 + 32;
      v161 = v147;
      v162 = v769;
      v163 = v149;
      v164 = v149;
      v165 = v150;
      v166 = v148;
      outlined copy of Text.Effect.Composition.Operation(v147, v769, v163, v148, v777, v778, v779, v150);
      swift_bridgeObjectRetain();
      v747 = v151;
      v619 = v161;
      v703 = v164;
      v704 = v166;
      v672 = v165;
      outlined copy of Text.Effect.Composition.Operation(v161, v162, v164, v166, v777, v778, v779, v165);
      swift_bridgeObjectRetain();
      v167 = 0;
      v633 = v160;
      while (1)
      {
        v168 = (uint64_t *)(v738 + 88 * v167);
        v169 = *v168;
        v170 = v168[1];
        v171 = (void *)v168[2];
        v172 = v168[3];
        v173 = v168[4];
        v174 = v168[5];
        v175 = v168[7];
        v768 = v168[6];
        v177 = v168[8];
        v176 = v168[9];
        v178 = v168[10];
        if (v175 >> 62)
        {
          if (v175 >> 62 == 1)
            goto LABEL_186;
          v179 = v169;
          v699 = v171;
          v700 = v172;
          v701 = v173;
          v702 = v174;
          v180 = v175;
          v181 = *v785;
          if (*(_QWORD *)(*v785 + 16)
            && (Hasher.init(_seed:)(),
                Hasher._combine(_:)(v179),
                v182 = Hasher._finalize()(),
                v183 = -1 << *(_BYTE *)(v181 + 32),
                v184 = v182 & ~v183,
                v185 = v181 + 56,
                ((*(_QWORD *)(v181 + 56 + ((v184 >> 3) & 0xFFFFFFFFFFFFF8)) >> v184) & 1) != 0))
          {
            v186 = *(_QWORD *)(v181 + 48);
            v169 = v179;
            if (*(_QWORD *)(v186 + 8 * v184) == v179)
            {
LABEL_64:
              v175 = v180;
              v174 = v702;
              LOBYTE(v173) = v701;
              v172 = v700;
              v171 = v699;
              v160 = v633;
              goto LABEL_186;
            }
            v187 = ~v183;
            while (1)
            {
              v184 = (v184 + 1) & v187;
              if (((*(_QWORD *)(v185 + ((v184 >> 3) & 0xFFFFFFFFFFFFF8)) >> v184) & 1) == 0)
                break;
              if (*(_QWORD *)(v186 + 8 * v184) == v179)
                goto LABEL_64;
            }
          }
          else
          {
            v169 = v179;
          }
          v411 = v167;
          v412 = v783;
          swift_beginAccess();
          v413 = *v412;
          if (*(_QWORD *)(v413 + 16) && (v414 = specialized __RawDictionaryStorage.find<A>(_:)(v169), (v415 & 1) != 0))
          {
            v416 = *(_QWORD **)(*(_QWORD *)(v413 + 56) + 8 * v414);
            swift_endAccess();
            v417 = v169;
            v418 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v416) + 0x110);
            v419 = v416;
            LOBYTE(v418) = v418();

            outlined consume of Text.Effect.Composition.Operation(v417, v170, v699, v700, v701, v702, v768, v180);
            v160 = v633;
            v167 = v411;
            if ((v418 & 1) != 0)
              goto LABEL_273;
          }
          else
          {
            swift_endAccess();
            v175 = v180;
            v174 = v702;
            LOBYTE(v173) = v701;
            v172 = v700;
            v171 = v699;
            v160 = v633;
LABEL_186:
            outlined consume of Text.Effect.Composition.Operation(v169, v170, v171, v172, v173, v174, v768, v175);
          }
          goto LABEL_187;
        }
        v718 = *(_QWORD *)(v178 + 16);
        if (v718)
          break;
LABEL_187:
        if (++v167 == v160)
        {
          swift_bridgeObjectRelease_n();
          v420 = v619;
          v149 = v703;
          v421 = v704;
          v422 = v672;
          outlined consume of Text.Effect.Composition.Operation(v619, v769, v703, v704, v777, v778, v779, v672);
          v150 = v422;
          v147 = v420;
          v148 = v421;
          v145 = v676;
          goto LABEL_199;
        }
      }
      v591 = v167;
      v736 = v178 + 32;
      v640 = v175;
      v188 = v174;
      v189 = v173;
      v190 = v172;
      v191 = v171;
      v192 = v176;
      v193 = v178;
      swift_bridgeObjectRetain_n();
      v614 = v193;
      v615 = v192;
      v616 = v177;
      v617 = v169;
      v618 = v170;
      v699 = v191;
      v700 = v190;
      v701 = v189;
      v702 = v188;
      outlined copy of Text.Effect.Composition.Operation(v169, v170, v191, v190, v189, v188, v768, v640);
      v194 = 0;
      while (1)
      {
        v195 = (uint64_t *)(v736 + 88 * v194);
        v196 = *v195;
        v197 = v195[1];
        v198 = (void *)v195[2];
        v199 = v195[3];
        v200 = v195[4];
        v771 = v195[5];
        v201 = v195[7];
        v772 = v195[6];
        v202 = v195[8];
        v203 = v195[9];
        v204 = v195[10];
        v773 = v201;
        if (v201 >> 62)
        {
          if (v201 >> 62 == 1)
            goto LABEL_177;
          v692 = v204;
          v693 = v203;
          v694 = v202;
          v695 = v197;
          v696 = v198;
          v697 = v199;
          v205 = *v785;
          if (*(_QWORD *)(*v785 + 16))
          {
            v206 = v196;
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v206);
            v207 = Hasher._finalize()();
            v208 = -1 << *(_BYTE *)(v205 + 32);
            v209 = v207 & ~v208;
            if (((*(_QWORD *)(v205 + 56 + ((v209 >> 3) & 0xFFFFFFFFFFFFF8)) >> v209) & 1) != 0)
            {
              v210 = *(_QWORD *)(v205 + 48);
              v196 = v206;
              if (*(_QWORD *)(v210 + 8 * v209) == v206)
              {
LABEL_75:
                v199 = v697;
                v198 = v696;
                v197 = v695;
                goto LABEL_177;
              }
              v211 = ~v208;
              while (1)
              {
                v209 = (v209 + 1) & v211;
                if (((*(_QWORD *)(v205 + 56 + ((v209 >> 3) & 0xFFFFFFFFFFFFF8)) >> v209) & 1) == 0)
                  break;
                if (*(_QWORD *)(v210 + 8 * v209) == v206)
                  goto LABEL_75;
              }
            }
            else
            {
              v196 = v206;
            }
          }
          v400 = v771;
          v401 = v772;
          v402 = v773;
          v403 = v196;
          v404 = v783;
          swift_beginAccess();
          v405 = *v404;
          if (*(_QWORD *)(v405 + 16) && (v406 = specialized __RawDictionaryStorage.find<A>(_:)(v403), (v407 & 1) != 0))
          {
            v408 = *(_QWORD **)(*(_QWORD *)(v405 + 56) + 8 * v406);
            swift_endAccess();
            v409 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v408) + 0x110);
            v410 = v408;
            LOBYTE(v409) = v409();

            outlined consume of Text.Effect.Composition.Operation(v403, v695, v696, v697, v200, v400, v401, v402);
            if ((v409 & 1) != 0)
              goto LABEL_272;
          }
          else
          {
            swift_endAccess();
            v199 = v697;
            v198 = v696;
            v197 = v695;
            v196 = v403;
LABEL_177:
            outlined consume of Text.Effect.Composition.Operation(v196, v197, v198, v199, v200, v771, v772, v773);
          }
          goto LABEL_178;
        }
        v661 = v200;
        v657 = *(_QWORD *)(v204 + 16);
        if (v657)
          break;
LABEL_178:
        if (++v194 == v718)
        {
          swift_bridgeObjectRelease_n();
          v175 = v640;
          v174 = v702;
          LOBYTE(v173) = v701;
          v172 = v700;
          v171 = v699;
          v169 = v617;
          v170 = v618;
          v160 = v633;
          v167 = v591;
          goto LABEL_186;
        }
      }
      v590 = v194;
      v735 = v204 + 32;
      v212 = v198;
      v213 = v197;
      v214 = v202;
      v215 = v196;
      v216 = v199;
      swift_bridgeObjectRetain_n();
      v692 = v204;
      v693 = v203;
      v694 = v214;
      v613 = v215;
      v695 = v213;
      v696 = v212;
      v697 = v216;
      outlined copy of Text.Effect.Composition.Operation(v215, v213, v212, v216, v661, v771, v772, v773);
      v217 = 0;
      v218 = v657;
      while (1)
      {
        v219 = (uint64_t *)(v735 + 88 * v217);
        v220 = *v219;
        v776 = v219[1];
        v221 = (void *)v219[2];
        v222 = v219[3];
        v223 = v219[4];
        v224 = v219[5];
        v225 = v219[6];
        v226 = v219[7];
        v227 = v219[8];
        v228 = v219[9];
        v229 = v219[10];
        if (!(v226 >> 62))
          break;
        if (v226 >> 62 == 1)
          goto LABEL_168;
        v671 = v217;
        v230 = v776;
        v231 = v221;
        v232 = v222;
        v690 = v223;
        v691 = v224;
        v233 = v225;
        v745 = v226;
        v234 = v220;
        if (specialized Set.contains(_:)(v220, *v785))
        {
          v226 = v745;
          v225 = v233;
          v224 = v691;
          LOBYTE(v223) = v690;
          v222 = v232;
          v221 = v231;
          v220 = v234;
          goto LABEL_167;
        }
        v394 = v783;
        swift_beginAccess();
        v395 = *v394;
        if (!*(_QWORD *)(v395 + 16) || (v396 = specialized __RawDictionaryStorage.find<A>(_:)(v234), (v397 & 1) == 0))
        {
          swift_endAccess();
          v226 = v745;
          v225 = v233;
          v224 = v691;
          LOBYTE(v223) = v690;
          v222 = v232;
          v221 = v231;
          v220 = v234;
          v218 = v657;
LABEL_167:
          v217 = v671;
LABEL_168:
          outlined consume of Text.Effect.Composition.Operation(v220, v776, v221, v222, v223, v224, v225, v226);
          goto LABEL_169;
        }
        v398 = *(_QWORD **)(*(_QWORD *)(v395 + 56) + 8 * v396);
        swift_endAccess();
        v795 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v398) + 0x110);
        v399 = v398;
        LODWORD(v795) = ((uint64_t (*)(void))v795)();

        outlined consume of Text.Effect.Composition.Operation(v234, v230, v231, v232, v690, v691, v233, v745);
        v218 = v657;
        v217 = v671;
        if ((v795 & 1) != 0)
          goto LABEL_271;
LABEL_169:
        if (++v217 == v218)
        {
          swift_bridgeObjectRelease_n();
          LOBYTE(v200) = v661;
          v199 = v697;
          v196 = v613;
          v194 = v590;
          v198 = v696;
          v197 = v695;
          goto LABEL_177;
        }
      }
      v709 = *(_QWORD *)(v229 + 16);
      if (!v709)
        goto LABEL_169;
      v671 = v217;
      v733 = v229 + 32;
      v235 = v220;
      v745 = v226;
      v236 = v225;
      v237 = v224;
      v238 = v223;
      v239 = v222;
      v240 = v221;
      swift_bridgeObjectRetain_n();
      v606 = v229;
      v607 = v228;
      v608 = v227;
      v609 = v235;
      v610 = v240;
      v611 = v239;
      v612 = v236;
      v690 = v238;
      v691 = v237;
      outlined copy of Text.Effect.Composition.Operation(v235, v776, v240, v239, v238, v237, v236, v745);
      v241 = 0;
      while (1)
      {
        v242 = (uint64_t *)(v733 + 88 * v241);
        v243 = *v242;
        v244 = v242[1];
        v245 = (void *)v242[2];
        v246 = v242[3];
        v247 = v242[4];
        v766 = v242[5];
        v248 = v242[7];
        v767 = v242[6];
        v250 = v242[8];
        v249 = v242[9];
        v251 = v242[10];
        if (!(v248 >> 62))
          break;
        if (v248 >> 62 == 1)
          goto LABEL_159;
        v689 = v248;
        v670 = v241;
        v687 = v244;
        v688 = v245;
        v252 = v246;
        v253 = v243;
        if (specialized Set.contains(_:)(v243, *v785))
          goto LABEL_158;
        v254 = v783;
        swift_beginAccess();
        v255 = *v254;
        if (!*(_QWORD *)(v255 + 16) || (v256 = specialized __RawDictionaryStorage.find<A>(_:)(v253), (v257 & 1) == 0))
        {
          swift_endAccess();
LABEL_158:
          v246 = v252;
          v245 = v688;
          v244 = v687;
          v243 = v253;
          v241 = v670;
          v248 = v689;
LABEL_159:
          outlined consume of Text.Effect.Composition.Operation(v243, v244, v245, v246, v247, v766, v767, v248);
          goto LABEL_160;
        }
        v258 = *(_QWORD **)(*(_QWORD *)(v255 + 56) + 8 * v256);
        swift_endAccess();
        v259 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v258) + 0x110);
        v260 = v258;
        LOBYTE(v259) = v259();

        outlined consume of Text.Effect.Composition.Operation(v253, v687, v688, v252, v247, v766, v767, v689);
        v241 = v670;
        if ((v259 & 1) != 0)
          goto LABEL_270;
LABEL_160:
        if (++v241 == v709)
        {
          swift_bridgeObjectRelease_n();
          v226 = v745;
          v220 = v609;
          v221 = v610;
          v218 = v657;
          v217 = v671;
          v222 = v611;
          v225 = v612;
          v224 = v691;
          LOBYTE(v223) = v690;
          goto LABEL_168;
        }
      }
      v660 = v247;
      v656 = *(_QWORD *)(v251 + 16);
      if (!v656)
        goto LABEL_160;
      v670 = v241;
      v261 = v250;
      v262 = v249;
      v263 = v251 + 32;
      v264 = v251;
      v265 = v243;
      v266 = v244;
      v267 = v246;
      v268 = v248;
      v269 = v245;
      swift_bridgeObjectRetain_n();
      v601 = v264;
      v602 = v262;
      v603 = v261;
      v604 = v265;
      v605 = v267;
      v687 = v266;
      v688 = v269;
      v689 = v268;
      outlined copy of Text.Effect.Composition.Operation(v265, v266, v269, v267, v660, v766, v767, v268);
      v270 = 0;
      v271 = v656;
      v632 = v263;
      while (1)
      {
        v272 = (uint64_t *)(v263 + 88 * v270);
        v273 = *v272;
        v274 = v272[1];
        v275 = v272[3];
        v774 = (void *)v272[2];
        v276 = v272[4];
        v764 = v272[5];
        v277 = v272[6];
        v278 = v272[7];
        v279 = v272[8];
        v280 = v272[9];
        v281 = v272[10];
        if (!(v278 >> 62))
          break;
        if (v278 >> 62 != 1)
        {
          v743 = v272[7];
          v669 = v270;
          v282 = v274;
          v283 = v774;
          v284 = v275;
          v680 = v276;
          v681 = v277;
          v285 = v273;
          if (specialized Set.contains(_:)(v273, *v785))
          {
            v277 = v681;
            LOBYTE(v276) = v680;
            v275 = v284;
            v274 = v282;
            v273 = v285;
          }
          else
          {
            v385 = v783;
            swift_beginAccess();
            v386 = *v385;
            if (*(_QWORD *)(v386 + 16))
            {
              v387 = specialized __RawDictionaryStorage.find<A>(_:)(v285);
              if ((v388 & 1) != 0)
              {
                v389 = *(_QWORD **)(*(_QWORD *)(v386 + 56) + 8 * v387);
                swift_endAccess();
                v390 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v389) + 0x110);
                v391 = v389;
                LOBYTE(v390) = v390();

                outlined consume of Text.Effect.Composition.Operation(v285, v282, v283, v284, v680, v764, v681, v743);
                v271 = v656;
                v263 = v632;
                v270 = v669;
                v392 = v767;
                v393 = v766;
                if ((v390 & 1) != 0)
                  goto LABEL_269;
                goto LABEL_155;
              }
            }
            swift_endAccess();
            v277 = v681;
            LOBYTE(v276) = v680;
            v275 = v284;
            v274 = v282;
            v273 = v285;
            v271 = v656;
          }
          v263 = v632;
          v270 = v669;
LABEL_153:
          v278 = v743;
        }
        outlined consume of Text.Effect.Composition.Operation(v273, v274, v774, v275, v276, v764, v277, v278);
LABEL_155:
        if (++v270 == v271)
        {
          swift_bridgeObjectRelease_n();
          LOBYTE(v247) = v660;
          v243 = v604;
          v246 = v605;
          v241 = v670;
          v248 = v689;
          v245 = v688;
          v244 = v687;
          goto LABEL_159;
        }
      }
      v655 = *(_QWORD *)(v281 + 16);
      if (!v655)
        goto LABEL_155;
      v669 = v270;
      v732 = v281 + 32;
      v286 = v273;
      v287 = v274;
      v288 = v277;
      v289 = v275;
      v290 = v279;
      v743 = v278;
      v291 = v280;
      v292 = v276;
      swift_bridgeObjectRetain_n();
      v593 = v281;
      v594 = v291;
      v595 = v290;
      v596 = v286;
      v597 = v287;
      v598 = v289;
      v680 = v292;
      v681 = v288;
      outlined copy of Text.Effect.Composition.Operation(v286, v287, v774, v289, v292, v764, v288, v743);
      v293 = 0;
      v294 = v655;
      while (1)
      {
        v295 = (uint64_t *)(v732 + 88 * v293);
        v296 = *v295;
        v297 = v295[1];
        v298 = (void *)v295[2];
        v775 = v295[3];
        v299 = v295[4];
        v300 = v295[5];
        v301 = v295[6];
        v302 = v295[8];
        v303 = v295[9];
        v304 = v295[10];
        v765 = v295[7];
        if (v765 >> 62)
        {
          if (v765 >> 62 == 1)
            goto LABEL_144;
          v682 = v304;
          v683 = v303;
          v684 = v302;
          v685 = v297;
          v686 = v298;
          v305 = v775;
          v306 = v299;
          v307 = v296;
          if (specialized Set.contains(_:)(v296, *v785))
          {
            LOBYTE(v299) = v306;
            v298 = v686;
            v297 = v685;
            v296 = v307;
            goto LABEL_144;
          }
          v377 = v783;
          swift_beginAccess();
          v378 = *v377;
          if (*(_QWORD *)(v378 + 16) && (v379 = specialized __RawDictionaryStorage.find<A>(_:)(v307), (v380 & 1) != 0))
          {
            v381 = *(_QWORD **)(*(_QWORD *)(v378 + 56) + 8 * v379);
            swift_endAccess();
            v382 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v381) + 0x110);
            v383 = v381;
            v384 = v382();

            outlined consume of Text.Effect.Composition.Operation(v307, v685, v686, v305, v306, v300, v301, v765);
            v294 = v655;
            if ((v384 & 1) != 0)
              goto LABEL_268;
          }
          else
          {
            swift_endAccess();
            LOBYTE(v299) = v306;
            v298 = v686;
            v297 = v685;
            v296 = v307;
            v294 = v655;
LABEL_144:
            outlined consume of Text.Effect.Composition.Operation(v296, v297, v298, v775, v299, v300, v301, v765);
          }
          goto LABEL_145;
        }
        v658 = v300;
        v659 = v301;
        v308 = *(_QWORD *)(v304 + 16);
        if (v308)
          break;
LABEL_145:
        if (++v293 == v294)
        {
          swift_bridgeObjectRelease_n();
          v277 = v681;
          v274 = v597;
          v275 = v598;
          v273 = v596;
          v271 = v656;
          v263 = v632;
          v270 = v669;
          LOBYTE(v276) = v680;
          goto LABEL_153;
        }
      }
      v589 = v293;
      v698 = v308;
      v309 = v296;
      v310 = v298;
      v311 = v297;
      v312 = v299;
      v313 = v302;
      v314 = v303;
      swift_bridgeObjectRetain_n();
      v682 = v304;
      v683 = v314;
      v684 = v313;
      v315 = v304 + 32;
      v599 = v309;
      v600 = v312;
      v685 = v311;
      v686 = v310;
      outlined copy of Text.Effect.Composition.Operation(v309, v311, v310, v775, v312, v658, v659, v765);
      v316 = 0;
      v635 = v304 + 32;
      while (1)
      {
        v317 = (uint64_t *)(v315 + 88 * v316);
        v318 = *v317;
        v319 = v317[1];
        v320 = (void *)v317[2];
        v321 = v317[3];
        v322 = v317[4];
        v323 = v317[5];
        v324 = v317[6];
        v325 = v317[8];
        v326 = v317[9];
        v327 = v317[10];
        v770 = v317[7];
        if (!(v770 >> 62))
          break;
        if (v770 >> 62 == 1)
          goto LABEL_136;
        v717 = v324;
        v714 = v325;
        v328 = v320;
        v715 = v321;
        v716 = v322;
        v329 = v323;
        v330 = v318;
        if (specialized Set.contains(_:)(v318, *v785))
        {
          v323 = v329;
          LOBYTE(v322) = v716;
          v321 = v715;
          v320 = v328;
          v318 = v330;
        }
        else
        {
          v639 = v316;
          v370 = v783;
          swift_beginAccess();
          v371 = *v370;
          if (*(_QWORD *)(v371 + 16))
          {
            v372 = specialized __RawDictionaryStorage.find<A>(_:)(v330);
            if ((v373 & 1) != 0)
            {
              v374 = *(_QWORD **)(*(_QWORD *)(v371 + 56) + 8 * v372);
              swift_endAccess();
              v375 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v374) + 0x110);
              v376 = v374;
              LOBYTE(v375) = v375();

              outlined consume of Text.Effect.Composition.Operation(v330, v319, v328, v715, v716, v329, v717, v770);
              v316 = v639;
              v315 = v635;
              if ((v375 & 1) != 0)
                goto LABEL_267;
              goto LABEL_137;
            }
          }
          swift_endAccess();
          v323 = v329;
          LOBYTE(v322) = v716;
          v321 = v715;
          v320 = v328;
          v318 = v330;
          v316 = v639;
        }
        v315 = v635;
        v324 = v717;
LABEL_136:
        outlined consume of Text.Effect.Composition.Operation(v318, v319, v320, v321, v322, v323, v324, v770);
LABEL_137:
        if (++v316 == v698)
        {
          swift_bridgeObjectRelease_n();
          v301 = v659;
          v300 = v658;
          v296 = v599;
          LOBYTE(v299) = v600;
          v297 = v685;
          v294 = v655;
          v293 = v589;
          v298 = v686;
          goto LABEL_144;
        }
      }
      v759 = *(_QWORD *)(v327 + 16);
      if (!v759)
        goto LABEL_137;
      v639 = v316;
      v761 = v327 + 32;
      v331 = v318;
      v332 = v323;
      v333 = v321;
      v645 = v326;
      v334 = v325;
      v335 = v322;
      v336 = v324;
      v337 = v319;
      v338 = v320;
      swift_bridgeObjectRetain_n();
      v626 = v327;
      v714 = v334;
      v627 = v331;
      v628 = v337;
      v629 = v338;
      v630 = v332;
      v715 = v333;
      v716 = v335;
      v717 = v336;
      outlined copy of Text.Effect.Composition.Operation(v331, v337, v338, v333, v335, v332, v336, v770);
      v339 = 0;
      while (1)
      {
        v340 = (uint64_t *)(v761 + 88 * v339);
        v342 = *v340;
        v341 = v340[1];
        v343 = (void *)v340[2];
        v344 = v340[3];
        v346 = v340[4];
        v345 = v340[5];
        v347 = v340[6];
        v348 = v340[7];
        v349 = v340[8];
        v350 = v340[10];
        if (v348 >> 62)
        {
          if (v348 >> 62 != 1)
          {
            v782 = v340[9];
            v757 = v349;
            v351 = v343;
            v758 = v346;
            v346 = v347;
            if (!specialized Set.contains(_:)(v342, *v785))
            {
              v750 = v339;
              v352 = v783;
              swift_beginAccess();
              v353 = *v352;
              if (*(_QWORD *)(v353 + 16))
              {
                v354 = specialized __RawDictionaryStorage.find<A>(_:)(v342);
                if ((v355 & 1) != 0)
                {
                  v356 = *(_QWORD **)(*(_QWORD *)(v353 + 56) + 8 * v354);
                  swift_endAccess();
                  v357 = *MEMORY[0x24BEE4EA0] & *v356;
                  v667 = v342;
                  v358 = *(uint64_t (**)(void))(v357 + 272);
                  v359 = v356;
                  LOBYTE(v358) = v358();

                  outlined consume of Text.Effect.Composition.Operation(v667, v341, v351, v344, v758, v345, v346, v348);
                  v339 = v750;
                  if ((v358 & 1) != 0)
                    goto LABEL_266;
                  goto LABEL_128;
                }
              }
              swift_endAccess();
              v339 = v750;
            }
            v347 = v346;
            LOBYTE(v346) = v758;
            v343 = v351;
          }
        }
        else
        {
          v782 = v340[9];
          v752 = v343;
          v753 = v347;
          v750 = v339;
          if (*(_QWORD *)(v350 + 16))
          {
            v790 = *(_QWORD *)(v350 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            v757 = v349;
            v667 = v342;
            v650 = v341;
            v651 = v344;
            v758 = v346;
            v652 = v345;
            v653 = v348;
            outlined copy of Text.Effect.Composition.Operation(v342, v341, v752, v344, v346, v345, v753, v348);
            v649 = v350;
            v360 = (uint64_t *)(v350 + 56);
            while (1)
            {
              v362 = v360[6];
              v361 = v360[7];
              v363 = v360[5];
              v795 = v360[4];
              v364 = v360[2];
              v794 = v360[3];
              v793 = v364;
              v365 = *v360;
              v792 = v360[1];
              v366 = *(v360 - 2);
              v367 = (void *)*(v360 - 1);
              v368 = *(v360 - 3);
              v797 = v368;
              v798 = v366;
              v799 = v367;
              v800 = v365;
              v801 = v792;
              v802 = v364;
              v803 = v794;
              v804 = v795;
              v805 = v363;
              v806 = v362;
              v807 = v361;
              outlined copy of Text.Effect.Composition.Operation(v368, v366, v367, v365, v792, v364, v794, v795);
              v369 = v796;
              v791 = closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)((Swift::UInt64 *)&v797, v788, v786, v787, v789);
              v796 = v369;
              outlined consume of Text.Effect.Composition.Operation(v368, v366, v367, v365, v792, v793, v794, v795);
              if ((v791 & 1) != 0)
                break;
              v360 += 11;
              if (!--v790)
              {
                swift_release();
                swift_bridgeObjectRelease();
                v348 = v653;
                v345 = v652;
                LOBYTE(v346) = v758;
                v344 = v651;
                v341 = v650;
                v342 = v667;
                goto LABEL_124;
              }
            }
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Text.Effect.Composition.Operation(v667, v650, v752, v651, v758, v652, v753, v653);
LABEL_266:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v627, v628, v629, v715, v716, v630, v717, v770);
LABEL_267:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v599, v685, v686, v775, v600, v658, v659, v765);
LABEL_268:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v596, v597, v774, v598, v680, v764, v681, v743);
            v392 = v767;
            v393 = v766;
LABEL_269:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v604, v687, v688, v605, v660, v393, v392, v689);
LABEL_270:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v609, v776, v610, v611, v690, v691, v612, v745);
LABEL_271:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v613, v695, v696, v697, v661, v771, v772, v773);
LABEL_272:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v617, v618, v699, v700, v701, v702, v768, v640);
LABEL_273:
            swift_bridgeObjectRelease_n();
            v539 = v619;
            v540 = v769;
            v541 = v703;
            v542 = v704;
            v543 = v777;
            v544 = v778;
            v545 = v779;
            v546 = v672;
            outlined consume of Text.Effect.Composition.Operation(v619, v769, v703, v704, v777, v778, v779, v672);
            outlined consume of Text.Effect.Composition.Operation(v539, v540, v541, v542, v543, v544, v545, v546);
LABEL_274:
            swift_bridgeObjectRelease_n();
            v547 = v762;
            v548 = v705;
            v549 = v706;
            v550 = v707;
            v551 = v708;
            v552 = v647;
            outlined consume of Text.Effect.Composition.Operation(v749, v762, v705, v706, v707, v708, v760, v647);
            outlined consume of Text.Effect.Composition.Operation(v749, v547, v548, v549, v550, v551, v760, v552);
LABEL_275:
            swift_bridgeObjectRelease_n();
            v553 = v625;
            v554 = v710;
            v555 = v711;
            v556 = v712;
            v557 = v763;
            v558 = v634;
            v559 = v713;
            outlined consume of Text.Effect.Composition.Operation(v625, v710, v711, v712, v754, v634, v713, v763);
            outlined consume of Text.Effect.Composition.Operation(v553, v554, v555, v556, v754, v558, v559, v557);
LABEL_276:
            swift_bridgeObjectRelease_n();
            v560 = v631;
            v561 = v719;
            v562 = v720;
            v563 = v721;
            v564 = v636;
            v565 = v654;
            v566 = v722;
            outlined consume of Text.Effect.Composition.Operation(v631, v748, v719, v720, v721, v636, v654, v722);
            outlined consume of Text.Effect.Composition.Operation(v560, v748, v561, v562, v563, v564, v565, v566);
LABEL_277:
            swift_bridgeObjectRelease_n();
            v567 = v648;
            v568 = v725;
            v569 = v726;
            v570 = v727;
            v571 = v728;
            v572 = v729;
            v573 = v730;
            outlined consume of Text.Effect.Composition.Operation(v755, v725, v726, v727, v728, v729, v730, v648);
            outlined consume of Text.Effect.Composition.Operation(v755, v568, v569, v570, v571, v572, v573, v567);
LABEL_278:
            v574 = v644;
            swift_bridgeObjectRelease_n();
            v576 = v641;
            v575 = v642;
            v577 = v643;
            outlined consume of Text.Layout.Line.Line(v641, v642, v643);
            swift_bridgeObjectRelease();
            v797 = (uint64_t)v576;
            v798 = v575;
            LOBYTE(v799) = v577;
            v800 = v15;
            v801 = v16;
            LODWORD(v802) = v620;
            v803 = v19;
            v804 = v18;
            v805 = v574;
            outlined copy of Text.Layout.Line.Line(v576, v575, v577);
            swift_bridgeObjectRetain();
            v578 = TextRenderLayer.drawingBounds(for:)(&v797);
            v580 = v579;
            v582 = v581;
            v584 = v583;
            outlined consume of Text.Layout.Line.Line(v576, v575, v577);
            swift_bridgeObjectRelease();
            TextRenderLayer.pixelLength.getter();
            v811.origin.x = v578;
            v811.origin.y = v580;
            v811.size.width = v582;
            v811.size.height = v584;
            CGRectGetMinX(v811);
            v812.origin.x = v578;
            v812.origin.y = v580;
            v812.size.width = v582;
            v812.size.height = v584;
            CGRectGetMaxX(v812);
            v813.origin.x = v578;
            v813.origin.y = v580;
            v813.size.width = v582;
            v813.size.height = v584;
            CGRectGetMinY(v813);
            v814.origin.x = v578;
            v814.origin.y = v580;
            v814.size.width = v582;
            v814.size.height = v584;
            CGRectGetMaxY(v814);
            if (v668 < *(_QWORD *)(*(_QWORD *)v592 + 16))
              __asm { BR              X9 }
LABEL_284:
            __break(1u);
            JUMPOUT(0x234B99D9CLL);
          }
          swift_retain();
          swift_retain();
          outlined copy of Text.Effect.Composition.Operation(v342, v341, v752, v344, v346, v345, v753, v348);
          swift_bridgeObjectRetain();
          swift_release();
LABEL_124:
          swift_bridgeObjectRelease();
          swift_release();
          v339 = v750;
          v347 = v753;
          v343 = v752;
        }
        outlined consume of Text.Effect.Composition.Operation(v342, v341, v343, v344, v346, v345, v347, v348);
LABEL_128:
        if (++v339 == v759)
        {
          swift_bridgeObjectRelease_n();
          v320 = v629;
          v323 = v630;
          v321 = v715;
          v318 = v627;
          v319 = v628;
          v316 = v639;
          v324 = v717;
          v315 = v635;
          LOBYTE(v322) = v716;
          goto LABEL_136;
        }
      }
    }
  }
  return result;
}

uint64_t TextEffectsAnimationController.state(for:time:)@<X0>(Swift::UInt64 a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  Swift::UInt64 v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  double v65;
  char v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  char v70;
  char v71;
  double v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  Swift::UInt64 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  int v94;
  uint64_t v95;

  v4 = v3;
  v7 = *a2;
  v8 = (uint64_t *)(v3 + 64);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 64);
  if (*(_QWORD *)(v9 + 16))
  {
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v11 & 1) != 0)
    {
      v85 = v4;
      v92 = v8;
      v12 = *(_QWORD *)(v9 + 56) + 120 * v10;
      v13 = *(_QWORD *)v12;
      v14 = *(double *)(v12 + 8);
      v15 = *(double *)(v12 + 16);
      v16 = *(_BYTE *)(v12 + 24);
      v82 = *(_BYTE *)(v12 + 25);
      v17 = *(double *)(v12 + 32);
      v80 = *(unsigned __int8 *)(v12 + 40);
      v18 = *(_QWORD *)(v12 + 56);
      v19 = *(_QWORD *)(v12 + 64);
      v95 = *(_QWORD *)(v12 + 72);
      v20 = *(unsigned __int8 *)(v12 + 80);
      v21 = *(_QWORD *)(v12 + 88);
      v22 = *(_QWORD *)(v12 + 96);
      v23 = *(_QWORD *)(v12 + 104);
      v24 = *(unsigned __int8 *)(v12 + 112);
      swift_retain_n();
      v84 = a1;
      v91 = v21;
      v81 = v16;
      if (v20 == 1)
      {
        v94 = 1;
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v95, 1);
        v25 = v24;
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v95, 1);
        v83 = v18;
        swift_release();
        swift_release();
        v26 = v23;
        v27 = v92;
        v28 = v22;
        v90 = v19;
        if (!v25)
        {
LABEL_5:
          v29 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(v84, v21, v28, v26);
          v31 = v30;
          v33 = v32;
          v35 = v34 & 1;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v29, v31, v33, v35);
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v28, v26, 0);
          swift_beginAccess();
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v29, v31, v33, v35);
          specialized TextEffectsAnimationController.TimingMap.update(_:body:)(v84, v27, v29, v31, v33, v35);
          swift_endAccess();
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v29, v31, v33, v35);
          v93 = v35;
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v29, v31, v33, v35);
          v91 = v29;
          v28 = v31;
          v26 = v33;
          v19 = v90;
          goto LABEL_13;
        }
      }
      else
      {
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v95, 0);
        v88 = v23;
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v95, 0);
        v43 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(a1, v18, v19, v95);
        v86 = v22;
        v44 = v19;
        v19 = v45;
        v46 = v18;
        v48 = v47;
        v49 = a1;
        v51 = v50 & 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v43, v19, v48, v51);
        v52 = v44;
        v28 = v86;
        v53 = v24;
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v46, v52, v95, 0);
        v27 = v92;
        swift_beginAccess();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v43, v19, v48, v51);
        specialized TextEffectsAnimationController.TimingMap.update(_:body:)(v49, v92, v43, v19, v48, v51);
        swift_endAccess();
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v43, v19, v48, v51);
        v94 = v51;
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v43, v19, v48, v51);
        v83 = v43;
        v21 = v91;
        v95 = v48;
        v26 = v88;
        v90 = v19;
        if (!v53)
          goto LABEL_5;
      }
      swift_release();
      swift_release();
      v93 = 1;
LABEL_13:
      v54 = v83;
      v87 = v28;
      v89 = v26;
      if ((v81 & 1) == 0)
      {
        swift_release();
        v57 = v82;
        goto LABEL_22;
      }
      if (v94)
      {
        swift_retain();
        swift_retain();
        if (!v93)
        {
LABEL_16:
          v55 = 0;
          v56 = 0;
LABEL_20:
          v58 = v84;
          *(double *)&v59 = COERCE_DOUBLE(TextEffectsAnimationController.duration(with:from:to:variant:)(v84, v54, v19, v55, v56, v82));
          v61 = v60;
          v62 = v60 & 1;
          v63 = v59;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_beginAccess();
          TextEffectsAnimationController.TimingMap.resolve(_:duration:)(v84, v63, v62);
          swift_endAccess();
          swift_release();
          if ((v61 & 1) != 0)
          {
            v57 = v82;
            v54 = v83;
            v64 = v80;
            if ((v82 & 1) == 0)
            {
              swift_release();
              v66 = 1;
              v15 = 1.0;
              v14 = 0.0;
              v65 = 0.0;
              v7 = 0.0;
              v13 = 0;
              goto LABEL_39;
            }
            v66 = 1;
            v65 = 0.0;
            v15 = 1.0;
            v7 = 0.0;
            v13 = 0;
LABEL_30:
            swift_beginAccess();
            v67 = Text.Effect.Keyframes.validTransform(_:)(v58, *(_QWORD *)(v85 + 112));
            if (v67)
            {
              v68 = v67;
              *(double *)&v69 = COERCE_DOUBLE((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v67) + 0x108))());
              v71 = v70;

              swift_release();
              v72 = *(double *)&v69;
              if ((v71 & 1) != 0)
                v72 = 0.5;
            }
            else
            {
              swift_release();
              v72 = 0.5;
            }
            v14 = v7 - v15 * v72;
LABEL_39:
            if (v64)
              v73 = 2;
            else
              v73 = 3;
            if (v94)
            {
              v74 = v90;
              swift_retain();
              swift_retain();
              v75 = v54;
              if (!v93)
              {
LABEL_44:
                v76 = 0;
                v77 = 0;
                v78 = v91;
                v79 = v87;
LABEL_47:
                *(_BYTE *)a3 = v57;
                *(_QWORD *)(a3 + 8) = v13;
                *(double *)(a3 + 16) = v14;
                *(double *)(a3 + 24) = v7;
                *(double *)(a3 + 32) = v65;
                *(_BYTE *)(a3 + 40) = v66;
                *(double *)(a3 + 48) = v15;
                *(_BYTE *)(a3 + 56) = v73;
                *(_QWORD *)(a3 + 64) = v75;
                *(_QWORD *)(a3 + 72) = v74;
                *(_QWORD *)(a3 + 80) = v76;
                *(_QWORD *)(a3 + 88) = v77;
                swift_release();
                outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v54, v90, v95, v94);
                return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v78, v79, v89, v93);
              }
            }
            else
            {
              v75 = 0;
              v74 = 0;
              if (!v93)
                goto LABEL_44;
            }
            v79 = v87;
            swift_retain();
            v78 = v91;
            swift_retain();
            v76 = v91;
            v77 = v87;
            goto LABEL_47;
          }
          v15 = *(double *)&v63;
          v57 = v82;
          v54 = v83;
LABEL_22:
          v64 = v80;
          v65 = 0.0;
          if (v80)
          {
            if (v80 == 1)
            {
              v66 = 0;
              v65 = v17;
              if ((v57 & 1) == 0)
                goto LABEL_35;
              goto LABEL_27;
            }
            v66 = 1;
            if ((v57 & 1) == 0)
            {
LABEL_35:
              swift_release();
              goto LABEL_39;
            }
          }
          else
          {
            v66 = 1;
            v7 = v17;
            if ((v57 & 1) == 0)
              goto LABEL_35;
          }
LABEL_27:
          v58 = v84;
          goto LABEL_30;
        }
      }
      else
      {
        v54 = 0;
        v19 = 0;
        if (!v93)
          goto LABEL_16;
      }
      swift_retain();
      v55 = v91;
      swift_retain();
      v56 = v28;
      goto LABEL_20;
    }
  }
  swift_beginAccess();
  v36 = *(_QWORD *)(v4 + 88);
  if (*(_QWORD *)(v36 + 16) && (v37 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v38 & 1) != 0))
  {
    v39 = (uint64_t *)(*(_QWORD *)(v36 + 56) + 16 * v37);
    v40 = *v39;
    v41 = v39[1];
    swift_endAccess();
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    v40 = 0;
    v41 = 0;
  }
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_BYTE *)(a3 + 40) = 1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = v40;
  *(_QWORD *)(a3 + 72) = v41;
  *(_QWORD *)(a3 + 80) = v40;
  *(_QWORD *)(a3 + 88) = v41;
  swift_retain();
  return swift_retain();
}

void TextRenderLayer.updateEffect(identifiers:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;

  v3 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectIdentifiers;
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectIdentifiers);
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  specialized Set.formSymmetricDifference(_:)(v4);
  v5 = v17;
  *(_QWORD *)(v1 + v3) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  TextRenderLayer.updateActive(animations:)(v17);
  if (*(_QWORD *)(*(_QWORD *)(v1 + v3) + 16) > *(_QWORD *)(v17 + 16) >> 3)
  {
    v6 = swift_bridgeObjectRetain();
    v5 = specialized _NativeSet.subtracting<A>(_:)(v6, v17);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v5 + 16))
      goto LABEL_3;
LABEL_7:
    swift_bridgeObjectRelease();
    return;
  }
  v10 = swift_bridgeObjectRetain();
  specialized Set._subtract<A>(_:)(v10);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_7;
LABEL_3:
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
  swift_beginAccess();
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 16);
  closure #1 in TextEffectsAnimationController.invalidateAnimations(_:)(v7, v5);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 16);
  if (v8)
  {
    if (!v9)
      TextEffectsAnimationController.clearDisplayLink()();
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  if (!v9)
    goto LABEL_12;
  if ((*(_BYTE *)(v7 + 40) & 1) != 0)
    goto LABEL_12;
  *(_BYTE *)(v7 + 40) = 1;
  *(CFTimeInterval *)(v7 + 56) = CACurrentMediaTime();
  if (TextEffectsAnimationController.startExternalDisplayLink()() || *(_QWORD *)(v7 + 48))
    goto LABEL_12;
  v11 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v7, sel_displayLink_);
  v12 = *(void **)(v7 + 48);
  *(_QWORD *)(v7 + 48) = v11;

  v13 = *(void **)(v7 + 48);
  if (v13)
  {
    v14 = (void *)objc_opt_self();
    v15 = v13;
    v16 = objc_msgSend(v14, sel_mainRunLoop);
    objc_msgSend(v15, sel_addToRunLoop_forMode_, v16, *MEMORY[0x24BDBCB80]);
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t TextRenderLayer.hasChanged(_:)(void *a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  id v4;
  uint64_t v5;
  CGPoint v6;
  CGSize v7;
  uint64_t *v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGPoint v18;
  CGSize v19;
  CGRect v20;
  CGRect v21;

  if (*(char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags) < 0)
  {
    v14 = a1;
    specialized RawTextLayout.init(_:)(v14, &v17);
    v15 = v17;

    v16 = v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_rawLayout;
    *(_QWORD *)v16 = v15;
    *(CGPoint *)(v16 + 8) = v18;
    *(CGSize *)(v16 + 24) = v19;
  }
  else
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment);
    if (v2)
      v3 = v2 == a1;
    else
      v3 = 0;
    if (v3)
      return 0;
    v4 = a1;
    specialized RawTextLayout.init(_:)(v4, &v17);
    v5 = v17;
    v6 = v18;
    v7 = v19;

    v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_rawLayout);
    if (*v8)
    {
      v10 = *((double *)v8 + 3);
      v9 = *((double *)v8 + 4);
      v12 = *((double *)v8 + 1);
      v11 = *((double *)v8 + 2);
      if (specialized static Array<A>.== infix(_:_:)(*v8, v5))
      {
        v21.origin = v6;
        v21.size = v7;
        v20.origin.x = v12;
        v20.origin.y = v11;
        v20.size.width = v10;
        v20.size.height = v9;
        if (CGRectEqualToRect(v20, v21))
        {
          outlined release of LinearGradient((uint64_t)&v17);
          return 0;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    *v8 = v5;
    *(CGPoint *)(v8 + 1) = v6;
    *(CGSize *)(v8 + 3) = v7;
  }
  swift_bridgeObjectRelease();
  return 1;
}

void TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  void *v39;
  id v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  const __CFAttributedString *v55;
  CFIndex Length;
  uint64_t v57;
  const __CFAttributedString *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  char v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const __CFAttributedString *v89;
  uint64_t v90;
  uint64_t v91;
  const __CFAttributedString *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  CFIndex v102;
  uint64_t v103;
  CFIndex v104;
  const __CFAttributedString *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  void *v114;
  int v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  CFIndex v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  uint64_t v126;
  char v127;
  _BYTE v128[7];
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  CFIndex v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const __CFAttributedString *v144;
  __int128 v145;
  unint64_t v146;
  __int128 v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  CFIndex v155;
  CGRect v156;
  CGRect v157;

  v6 = v5;
  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v117 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version] = a4;
  v15 = &v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap];
  *v15 = a2;
  v15[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(a1, sel_textLayoutManager);
  v17 = 0;
  if (v16)
  {
    v18 = v16;
    v19 = objc_msgSend(v16, sel_textContainer);

    if (v19)
    {
      objc_msgSend(v19, sel_lineFragmentPadding);
      v17 = v20;

    }
  }
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutLineFragmentPadding] = v17;
  v21 = &v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
  v22 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
  v23 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds + 8];
  v24 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds + 16];
  v25 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds + 24];
  objc_msgSend(a1, sel_layoutFragmentFrame);
  v157.origin.x = v26;
  v157.origin.y = v27;
  v157.size.width = v28;
  v157.size.height = v29;
  v156.origin.x = v22;
  v156.origin.y = v23;
  v156.size.width = v24;
  v156.size.height = v25;
  v30 = CGRectEqualToRect(v156, v157);
  objc_msgSend(a1, sel_layoutFragmentFrame);
  *v21 = v31;
  v21[1] = v32;
  v21[2] = v33;
  v21[3] = v34;
  v35 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags;
  if (!v30)
  {
    v36 = v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags];
    if ((~v36 & 6) != 0)
    {
      v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] = v36 | 6;
      v35 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags;
    }
  }
  v6[v35] |= 0x20u;
  objc_msgSend(v6, sel_setNeedsLayout);
  v37 = TextRenderLayer.hasChanged(_:)(a1);
  v38 = v37;
  if ((v37 & 1) == 0)
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout], (uint64_t)&v126, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v126, (uint64_t)&v145, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg((uint64_t *)&v145) == 1)
    {
      v102 = 0;
      v98 = MEMORY[0x24BEE4B08];
      v100 = MEMORY[0x24BEE4B00];
      v101 = (void *)MEMORY[0x24BEE4B00];
      v93 = MEMORY[0x24BEE4B00];
      v97 = MEMORY[0x24BEE4B00];
      v99 = MEMORY[0x24BEE4B00];
    }
    else
    {
      v93 = v149;
      v97 = v150;
      v99 = v151;
      v98 = v152;
      v100 = v153;
      v101 = v154;
      v102 = v155;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
LABEL_20:
    *(_QWORD *)a5 = v93;
    *(_QWORD *)(a5 + 8) = v97;
    *(_QWORD *)(a5 + 16) = v99;
    *(_QWORD *)(a5 + 24) = v98;
    *(_QWORD *)(a5 + 32) = v100;
    *(_QWORD *)(a5 + 40) = v101;
    *(_QWORD *)(a5 + 48) = v102;
    *(_BYTE *)(a5 + 56) = v38 & 1;
    return;
  }
  v109 = v35;
  v110 = v13;
  v111 = v12;
  v112 = v37;
  v113 = a5;
  v39 = *(void **)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment];
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment] = a1;

  v40 = a1;
  Text.Layout.init(_:)(v40, (uint64_t)&v145);
  v41 = v145;
  v42 = BYTE8(v145);
  v43 = v146;
  v44 = v40;
  swift_bridgeObjectRetain();
  specialized Text.Effect.RenderSegmentation.init(layout:fragment:)((uint64_t *)&v145, v44);
  v108 = v45;
  v116 = v41;
  v126 = v41;
  v115 = v42;
  v127 = v42;
  v129 = v43;
  Text.Layout.effectsOrderAndMap.getter(&v145);
  v46 = v145;
  v47 = v146;
  v48 = v147;
  v123 = *((_QWORD *)&v145 + 1);
  v124 = v146;
  v125 = v147;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v49 = swift_bridgeObjectRetain();
  v107 = v46;
  v50 = specialized Text.Effect.KeyframeSequence.init(order:map:)(v49, *((uint64_t *)&v46 + 1), v47);
  v114 = v44;
  v51 = objc_msgSend(v44, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v52 & 0xC000000000000001) != 0)
  {
    v53 = (id)MEMORY[0x23B7C6D9C](0, v52);
LABEL_11:
    v54 = v53;
    swift_bridgeObjectRelease();
    v55 = (const __CFAttributedString *)objc_msgSend(v54, sel_attributedString);

    Length = CFAttributedStringGetLength(v55);
    v120 = MEMORY[0x24BEE4B00];
    v121 = (void *)MEMORY[0x24BEE4B00];
    v122 = Length;
    v57 = v116;
    *(_QWORD *)&v145 = v116;
    BYTE8(v145) = v115;
    v106 = v43;
    v146 = v43;
    v58 = v55;
    v59 = v114;
    specialized Text.Effect.KeyframeSequence.gather(into:fragment:layout:attributedString:map:segmentation:)(&v120, v114, (uint64_t)&v145, v58, *((uint64_t *)&v46 + 1), v47, v48, v50);
    v105 = v58;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = v120;
    v61 = v121;
    v104 = v122;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62 = objc_msgSend(v59, sel_textLayoutManager);
    v63 = 0;
    if (v62)
    {
      v64 = v62;
      v65 = objc_msgSend(v62, sel_textContainer);

      if (v65)
      {
        objc_msgSend(v65, sel_size);

      }
    }
    specialized Text.Effect.PartialMap.validate(keyframes:size:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v57 + 16))
    {
      v66 = *(_BYTE *)(v57 + 48);
      v67 = *(_DWORD *)(v57 + 72);
      v145 = *(_OWORD *)(v57 + 32);
      LOBYTE(v146) = v66;
      v147 = *(_OWORD *)(v57 + 56);
      v148 = v67;
      Text.Layout.Line.horizontalAlignmentFactor.getter();
      v63 = v68;
    }
    v69 = v123;
    v70 = v124;
    v103 = *((_QWORD *)&v125 + 1);
    v71 = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72 = NSTextLayoutFragment.drawingInsets.getter();
    v74 = v73;
    v76 = v75;
    v78 = v77;
    v79 = *MEMORY[0x24BEE38E0];
    v114 = v61;
    v80 = v110;
    v81 = v111;
    v82 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 104))(v117, v79, v111);
    TextRenderLayer.pixelLength.getter();
    v84 = v83;
    *(double *)&v145 = v72;
    v126 = v74;
    v118 = v76;
    v119 = v78;
    specialized FloatingPoint.round(_:toMultipleOf:)(v82, v83);
    specialized FloatingPoint.round(_:toMultipleOf:)(v82, v84);
    specialized FloatingPoint.round(_:toMultipleOf:)(v82, v84);
    specialized FloatingPoint.round(_:toMultipleOf:)(v82, v84);
    v85 = v145;
    v86 = v126;
    v87 = v118;
    v88 = v119;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v81);
    v126 = v116;
    v127 = v115;
    *(_DWORD *)v128 = v119;
    *(_DWORD *)&v128[3] = *(_DWORD *)((char *)&v119 + 3);
    v129 = v106;
    v130 = v63;
    v131 = v108;
    v132 = v107;
    v133 = v69;
    v134 = v70;
    v135 = v71;
    v136 = v103;
    v137 = v60;
    v138 = v114;
    v89 = v105;
    v139 = v104;
    v140 = v85;
    v141 = v86;
    v142 = v87;
    v143 = v88;
    v144 = v105;
    _ViewInputs.base.modify(&v126, v90);
    v91 = (uint64_t)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout];
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v6[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout], (uint64_t)&v145, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v126, v91, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    v92 = v89;
    outlined release of TextRenderLayer.Layout?(&v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    v93 = v123;
    v94 = swift_bridgeObjectRetain();
    v95 = specialized Set.init<A>(_:)(v94);
    v6[v109] = v6[v109] & 0x62 | 0xD;
    objc_msgSend(v6, sel_setNeedsLayout);
    TextRenderLayer.updateEffect(identifiers:)(v95);
    swift_beginAccess();
    v96 = swift_bridgeObjectRetain();
    specialized Set.formUnion<A>(_:)(v96);
    swift_endAccess();
    swift_bridgeObjectRelease();

    v97 = v124;
    v98 = *((_QWORD *)&v125 + 1);
    v99 = v125;
    v100 = v120;
    v101 = v121;
    v102 = v122;
    a5 = v113;
    v38 = v112;
    goto LABEL_20;
  }
  if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v53 = *(id *)(v52 + 32);
    goto LABEL_11;
  }
  __break(1u);
}

double NSTextLayoutFragment.drawingInsets.getter()
{
  void *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  double v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  objc_msgSend(v0, sel_layoutFragmentFrame);
  v2 = v1;
  v4 = v3;
  objc_msgSend(v0, sel_renderingSurfaceBounds);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  MinY = CGRectGetMinY(v12);
  v13.origin.x = 0.0;
  v13.origin.y = 0.0;
  v13.size.width = v2;
  v13.size.height = v4;
  v11 = fmin(MinY - CGRectGetMinY(v13), 0.0);
  v14.origin.x = x;
  v14.origin.y = y;
  v14.size.width = width;
  v14.size.height = height;
  CGRectGetMinX(v14);
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.width = v2;
  v15.size.height = v4;
  CGRectGetMinX(v15);
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = v2;
  v16.size.height = v4;
  CGRectGetMaxY(v16);
  v17.origin.x = x;
  v17.origin.y = y;
  v17.size.width = width;
  v17.size.height = height;
  CGRectGetMaxY(v17);
  v18.origin.y = 0.0;
  v18.origin.x = 0.0;
  v18.size.width = v2;
  v18.size.height = v4;
  CGRectGetMaxX(v18);
  v19.origin.x = x;
  v19.origin.y = y;
  v19.size.width = width;
  v19.size.height = height;
  CGRectGetMaxX(v19);
  return v11;
}

_QWORD *TextRenderLayer.appendBaselineOffsets(to:)(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  double v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  _QWORD *v53;
  double *v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD **v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  _QWORD v76[18];
  uint64_t v77[4];
  uint64_t v78;

  v64 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v64);
  v63 = (uint64_t)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v62 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v61 = (uint64_t *)((char *)&v58 - v7);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v58 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v58 - v12;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  v15 = v14;
  v73 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (unint64_t *)((char *)&v58 - v22);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v76, (uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = (_QWORD *)_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v77);
  if ((_DWORD)result == 1)
    return result;
  v59 = a1;
  v25 = v78;
  v26 = *(_QWORD *)(v78 + 16);
  v70 = (unint64_t *)v20;
  v71 = v26;
  v27 = v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements;
  outlined release of TextRenderLayer.Layout?(v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
  v72 = v25;
  swift_bridgeObjectRetain();
  v60 = v27;
  result = (_QWORD *)swift_beginAccess();
  v68 = v13;
  v69 = 0;
  v28 = 0;
  v29 = 0;
  while (1)
  {
    v75 = v28;
    if (v29 == v71)
    {
      v30 = 1;
      v31 = v71;
      v32 = (uint64_t)v70;
      goto LABEL_9;
    }
    if ((v29 & 0x8000000000000000) != 0)
      break;
    if (v29 >= *(_QWORD *)(v72 + 16))
      goto LABEL_53;
    if ((uint64_t)v29 >= v71)
      goto LABEL_54;
    v33 = v72
        + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))
        + *(_QWORD *)(v66 + 72) * v29;
    v34 = v13;
    v35 = v29;
    v31 = v29 + 1;
    v36 = (uint64_t)&v65[*(int *)(v15 + 48)];
    outlined init with copy of TypesettingLanguage(v33, v36, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v32 = (uint64_t)v70;
    v37 = (uint64_t)v70 + *(int *)(v15 + 48);
    *v70 = v35;
    v13 = v34;
    outlined init with take of LocalizedStringKey.FormatArgument(v36, v37, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v30 = 0;
LABEL_9:
    v38 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v32, v30, 1, v15);
    outlined init with take of (key: UUID, value: TextRenderSurface)?(v32, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v38 + 48))(v23, 1, v15) == 1)
    {
      swift_bridgeObjectRelease();
      return outlined release of TextRenderLayer.Layout?(v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    }
    v74 = v31;
    v39 = *v23;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v23 + *(int *)(v15 + 48), (uint64_t)v13, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of TypesettingLanguage((uint64_t)v13, (uint64_t)v10, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v42 = *((_QWORD *)v10 + 2);
      swift_bridgeObjectRelease();
LABEL_15:
      result = (_QWORD *)swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    if (EnumCaseMultiPayload != 1)
    {
      v42 = *(_QWORD *)v10;
      outlined consume of Text.Layout.Line.Line(*((void **)v10 + 3), *((_QWORD *)v10 + 4), v10[40]);
      goto LABEL_15;
    }
    v41 = v63;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v63, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    v42 = *(_QWORD *)(v41 + *(int *)(v64 + 28));
    result = (_QWORD *)outlined destroy of TypesettingConfiguration(v41, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
LABEL_16:
    if ((v75 & (v42 == v69)) != 0)
    {
      v13 = v68;
      result = (_QWORD *)outlined destroy of TypesettingConfiguration((uint64_t)v68, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v28 = 1;
      v29 = v74;
    }
    else
    {
      v13 = v68;
      if ((v39 & 0x8000000000000000) != 0)
        goto LABEL_55;
      if (v39 >= *(_QWORD *)(*(_QWORD *)v60 + 16))
        goto LABEL_56;
      v43 = *(double *)(*(_QWORD *)v60 + 16 * v39 + 40);
      outlined init with copy of TypesettingLanguage((uint64_t)v68, (uint64_t)v61, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v44 = swift_getEnumCaseMultiPayload();
      if (v44)
      {
        if (v44 == 1)
        {
          v45 = v63;
          outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v61, v63, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          v69 = *(_QWORD *)(v45 + *(int *)(v64 + 28));
          outlined destroy of TypesettingConfiguration(v45, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          goto LABEL_26;
        }
        v69 = *v61;
        outlined consume of Text.Layout.Line.Line((void *)v61[3], v61[4], *((_BYTE *)v61 + 40));
      }
      else
      {
        v69 = v61[2];
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_26:
      outlined init with copy of TypesettingLanguage((uint64_t)v13, v62, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v46 = swift_getEnumCaseMultiPayload();
      if (v46)
      {
        if (v46 == 1)
        {
          v47 = v63;
          outlined init with take of LocalizedStringKey.FormatArgument(v62, v63, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          v48 = *(_QWORD *)(v47 + *(int *)(v64 + 28));
          result = (_QWORD *)outlined destroy of TypesettingConfiguration(v47, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          v49 = v48 + 1;
          if (__OFADD__(v48, 1))
            goto LABEL_61;
          v29 = v74;
          if (v49 < v48)
            goto LABEL_62;
        }
        else
        {
          v48 = *(_QWORD *)v62;
          outlined consume of Text.Layout.Line.Line(*(void **)(v62 + 24), *(_QWORD *)(v62 + 32), *(_BYTE *)(v62 + 40));
          result = (_QWORD *)swift_bridgeObjectRelease();
          v49 = v48 + 1;
          v29 = v74;
          if (__OFADD__(v48, 1))
            goto LABEL_65;
          if (v49 < v48)
            goto LABEL_66;
        }
      }
      else
      {
        v48 = *(_QWORD *)(v62 + 16);
        v50 = *(_QWORD *)(*(_QWORD *)v62 + 16);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v49 = v48 + v50;
        if (__OFADD__(v48, v50))
          goto LABEL_63;
        v29 = v74;
        if (v49 < v48)
          goto LABEL_64;
      }
      if (v49 != v48)
      {
        if (v49 < v48)
          goto LABEL_57;
        v51 = v49 - v48;
        if (v49 <= v48)
          goto LABEL_58;
        if (v48 < 0)
          goto LABEL_59;
        v52 = *(_QWORD *)(v77[0] + 16);
        if (v48 >= v52 || v49 - 1 >= v52)
          goto LABEL_60;
        v53 = *v59;
        v54 = (double *)(v77[0] + 48 * v48 + 64);
        do
        {
          v55 = *v54;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
          v57 = v53[2];
          v56 = v53[3];
          if (v57 >= v56 >> 1)
            v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1, v53);
          v53[2] = v57 + 1;
          *(double *)&v53[v57 + 4] = v43 + v55;
          v54 += 6;
          --v51;
        }
        while (v51);
        *v59 = v53;
        v13 = v68;
        v29 = v74;
      }
      result = (_QWORD *)outlined destroy of TypesettingConfiguration((uint64_t)v13, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v28 = 1;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

void TextRenderLayer.drawingBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  void *v33;
  CGFloat v34;
  char v35;
  int v36;
  uint64_t v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  int EnumCaseMultiPayload;
  void *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  double v75;
  void *v76;
  const __CTLine *v77;
  void *v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat *v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CFIndex v92;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  CGFloat *v100;
  const __CTLine *v101;
  CGFloat *v102;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char v107;
  CGFloat v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  void *v112;
  uint64_t v113;
  char v114;
  CGFloat v115;
  CGFloat v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  CGFloat v142;
  CGFloat v143;
  CGFloat v144;
  CGFloat v145;
  double v146;
  double v147;
  double v148;
  double v149;
  uint64_t *v150;
  CGFloat v151;
  CGFloat v152;
  uint64_t v153;
  CGFloat *p_b;
  CGAffineTransform v155;
  __int128 v156;
  uint64_t v157;
  _QWORD v158[18];
  uint64_t v159[4];
  uint64_t v160;
  CFRange v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect ImageBounds;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;

  v1 = MEMORY[0x24BEE1780];
  type metadata accessor for Set<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v128 = *(_QWORD *)(v2 - 8);
  v129 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v127 = (char *)&v118 - v3;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x24BDAC7A8](v4);
  v126 = (char *)&v118 - v5;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v125 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v124 = (char *)&v118 - v7;
  type metadata accessor for Set<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, v1, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v123 = v8;
  v134 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v122 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v133 = (char *)&v118 - v11;
  v121 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0);
  MEMORY[0x24BDAC7A8](v121);
  v120 = (uint64_t *)((char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v118 - v14;
  v119 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v119);
  v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v19 = *(_QWORD *)(v18 - 8);
  v139 = v18;
  v140 = v19;
  MEMORY[0x24BDAC7A8](v18);
  v132 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = v0;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v158, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v158, (uint64_t)v159, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  v21 = _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v159);
  v22 = *MEMORY[0x24BDBF070];
  v23 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v24 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v25 = *(double *)(MEMORY[0x24BDBF070] + 24);
  if (v21 == 1)
    return;
  v26 = v160;
  v138 = *(_QWORD *)(v160 + 16);
  if (!v138)
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v158, (uint64_t)&v155, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined retain of TextRenderLayer.Layout((uint64_t)&v155);
    goto LABEL_36;
  }
  v137 = v160 + ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
  outlined release of TextRenderLayer.Layout?(v158, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
  p_b = &v155.b;
  swift_bridgeObjectRetain();
  v27 = 0;
  v28 = v22;
  v29 = v23;
  v30 = v24;
  v31 = v25;
  v131 = v15;
  v148 = v23;
  v149 = v22;
  v146 = v25;
  v147 = v24;
  v135 = v17;
  v136 = v26;
  v32 = (uint64_t)v132;
  while (1)
  {
    if (v27 >= *(_QWORD *)(v26 + 16))
      goto LABEL_42;
    v142 = v31;
    v143 = v30;
    v144 = v29;
    v145 = v28;
    outlined init with copy of TypesettingLanguage(v137 + *(_QWORD *)(v140 + 72) * v27, v32, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v96 = *(_QWORD *)v32;
      v95 = *(_QWORD *)(v32 + 8);
      v97 = *(_QWORD *)(*(_QWORD *)v32 + 16);
      if (!v97)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 = v22;
        v40 = v23;
        v44 = v146;
        v42 = v147;
        v17 = v135;
        goto LABEL_5;
      }
      v141 = v27;
      v98 = v95;
      swift_bridgeObjectRetain();
      v153 = v98;
      swift_bridgeObjectRetain();
      v99 = 0;
      v100 = (CGFloat *)(v96 + 64);
      v38 = v22;
      v40 = v23;
      v44 = v146;
      v42 = v147;
      while (1)
      {
        if (v99 >= *(_QWORD *)(v96 + 16))
        {
          __break(1u);
          goto LABEL_39;
        }
        v112 = (void *)*((_QWORD *)v100 - 4);
        v113 = *((_QWORD *)v100 - 3);
        v114 = *((_BYTE *)v100 - 16);
        v115 = *(v100 - 1);
        v116 = *v100;
        if ((v114 & 1) != 0)
        {
          v107 = 1;
          outlined copy of Text.Layout.Line.Line(*((void **)v100 - 4), *((_QWORD *)v100 - 3), 1);
          outlined copy of Text.Layout.Line.Line(v112, v113, 1);
          outlined copy of Text.Layout.Line.Line(v112, v113, 1);
          v101 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v112);
          if (!v101)
          {
            y = v148;
            x = v149;
            height = v146;
            width = v147;
            goto LABEL_25;
          }
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(*((void **)v100 - 4), *((_QWORD *)v100 - 3), 0);
          outlined copy of Text.Layout.Line.Line(v112, v113, 0);
          outlined copy of Text.Layout.Line.Line(v112, v113, 0);
          outlined copy of Text.Layout.Line.Line(v112, v113, 0);
          swift_release();
          v101 = (const __CTLine *)v112;
        }
        ImageBounds = CTLineGetImageBounds(v101, 0);
        v102 = p_b;
        *p_b = 0.0;
        v102[1] = 0.0;
        v155.a = 1.0;
        v155.d = -1.0;
        v155.tx = v115;
        v155.ty = v116;
        v171 = CGRectApplyAffineTransform(ImageBounds, &v155);
        x = v171.origin.x;
        y = v171.origin.y;
        width = v171.size.width;
        height = v171.size.height;

        v107 = v114;
LABEL_25:
        outlined consume of Text.Layout.Line.Line(v112, v113, v107);
        ++v99;
        v172.origin.x = x;
        v172.origin.y = y;
        v172.size.width = width;
        v172.size.height = height;
        v173 = CGRectInset(v172, -1.0, -1.0);
        v108 = v173.origin.x;
        v109 = v173.origin.y;
        v110 = v173.size.width;
        v111 = v173.size.height;
        outlined consume of Text.Layout.Line.Line(v112, v113, v114);
        v174.origin.x = v38;
        v174.origin.y = v40;
        v174.size.width = v42;
        v174.size.height = v44;
        v178.origin.x = v108;
        v178.origin.y = v109;
        v178.size.width = v110;
        v178.size.height = v111;
        v175 = CGRectUnion(v174, v178);
        v38 = v175.origin.x;
        v40 = v175.origin.y;
        v42 = v175.size.width;
        v44 = v175.size.height;
        outlined consume of Text.Layout.Line.Line(v112, v113, v114);
        v100 += 6;
        if (v97 == v99)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          v17 = v135;
          v26 = v136;
          v32 = (uint64_t)v132;
          v27 = v141;
          goto LABEL_5;
        }
      }
    }
    v141 = v27;
    if (EnumCaseMultiPayload == 1)
      break;
    v33 = *(void **)(v32 + 24);
    v34 = *(double *)(v32 + 32);
    v35 = *(_BYTE *)(v32 + 40);
    v36 = *(_DWORD *)(v32 + 64);
    v37 = *(_QWORD *)(v32 + 88);
    *(_QWORD *)&v155.a = v33;
    v155.b = v34;
    LOBYTE(v155.c) = v35;
    *(_OWORD *)&v155.d = *(_OWORD *)(v32 + 48);
    LODWORD(v155.ty) = v36;
    v156 = *(_OWORD *)(v32 + 72);
    v157 = v37;
    outlined copy of Text.Layout.Line.Line(v33, *(uint64_t *)&v34, v35);
    swift_bridgeObjectRetain();
    v38 = TextRenderLayer.drawingBounds(for:)((uint64_t *)&v155);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    outlined consume of Text.Layout.Line.Line(v33, *(uint64_t *)&v34, v35);
    swift_bridgeObjectRelease();
    outlined consume of Text.Layout.Line.Line(v33, *(uint64_t *)&v34, v35);
    swift_bridgeObjectRelease();
    v26 = v136;
    v27 = v141;
LABEL_5:
    ++v27;
    v162.origin.y = v144;
    v162.origin.x = v145;
    v162.size.height = v142;
    v162.size.width = v143;
    v176.origin.x = v38;
    v176.origin.y = v40;
    v176.size.width = v42;
    v176.size.height = v44;
    *(CGRect *)&v28 = CGRectUnion(v162, v176);
    v23 = v148;
    v22 = v149;
    if (v27 == v138)
    {
      v22 = v28;
      v23 = v29;
      v24 = v30;
      v25 = v31;
      swift_bridgeObjectRelease();
LABEL_36:
      TextRenderLayer.pixelLength.getter();
      v155.a = v22;
      v155.b = v23;
      v155.c = v24;
      v155.d = v25;
      CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v117);
      outlined release of TextRenderLayer.Layout?(v158, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
      return;
    }
  }
  outlined init with take of LocalizedStringKey.FormatArgument(v32, (uint64_t)v17, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  v46 = *(void **)v17;
  v47 = *((_QWORD *)v17 + 1);
  v48 = v17[16];
  v49 = *((_QWORD *)v17 + 3);
  v50 = *((_QWORD *)v17 + 4);
  v51 = *((_DWORD *)v17 + 10);
  v52 = &v17[*(int *)(v119 + 24)];
  v53 = v133;
  v54 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
  v55 = v123;
  v54(v133, v52, v123);
  v56 = (uint64_t)v120;
  *v120 = v46;
  *(_QWORD *)(v56 + 8) = v47;
  *(_BYTE *)(v56 + 16) = v48;
  *(_QWORD *)(v56 + 24) = v49;
  *(_QWORD *)(v56 + 32) = v50;
  *(_DWORD *)(v56 + 40) = v51;
  v57 = v129;
  v58 = v122;
  v54(v122, v53, v55);
  outlined copy of Text.Layout.Line.Line(v46, v47, v48);
  v59 = v127;
  RangeSet.ranges.getter();
  v60 = *(void (**)(char *, uint64_t))(v134 + 8);
  v60(v58, v55);
  v61 = v128;
  v62 = (uint64_t)v126;
  (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v126, v59, v57);
  v63 = v124;
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v65 = (uint64_t)v131;
  v64(&v124[*(int *)(v125 + 48)], v62, v57);
  *v63 = 0;
  v63[1] = 0;
  v60(v133, v55);
  outlined destroy of RangeSet<Int><>.IndexSequence(v62);
  v66 = v121;
  outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v63, v56 + *(int *)(v121 + 20));
  outlined init with take of LocalizedStringKey.FormatArgument(v56, v65, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
  v67 = (uint64_t *)(v65 + *(int *)(v66 + 20));
  v68 = (uint64_t)v135;
  v69 = *v67;
  v70 = RangeSet.Ranges.count.getter();
  v38 = v22;
  v40 = v23;
  v44 = v146;
  v42 = v147;
  if (v69 >= v70)
  {
LABEL_32:
    outlined destroy of TypesettingConfiguration(v65, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
    outlined destroy of TypesettingConfiguration(v68, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    v17 = (char *)v68;
    v32 = (uint64_t)v132;
    v26 = v136;
    v27 = v141;
    goto LABEL_5;
  }
  v71 = v65;
  v150 = v67;
  v72 = v67[1];
  v74 = *(void **)v71;
  v73 = *(_QWORD *)(v71 + 8);
  LODWORD(v153) = *(unsigned __int8 *)(v71 + 16);
  v40 = v148;
  v38 = v149;
  v44 = v146;
  v42 = v147;
  v75 = *(double *)(v71 + 24);
  v151 = *(double *)(v71 + 32);
  v152 = v75;
  while (1)
  {
    RangeSet.Ranges.subscript.getter();
    v92 = *(_QWORD *)&v155.a + v72;
    if (__OFADD__(*(_QWORD *)&v155.a, v72))
      break;
    if (__OFADD__(v72++, 1))
      goto LABEL_40;
    RangeSet.Ranges.subscript.getter();
    if (__OFSUB__(*(_QWORD *)&v155.b, *(_QWORD *)&v155.a))
      goto LABEL_41;
    if (v72 >= *(_QWORD *)&v155.b - *(_QWORD *)&v155.a)
    {
      v72 = 0;
      *v150 = ++v69;
    }
    if ((v153 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v74, v73, 1);
      v94 = (id)_NSTextLineFragmentGetCTLine(v74);
      if (!v94)
        goto LABEL_43;
      v76 = v94;
      outlined consume of Text.Layout.Line.Line(v74, v73, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v74, v73, 0);
      outlined copy of Text.Layout.Line.Line(v74, v73, 0);

      swift_release();
      v76 = v74;
    }
    swift_retain_n();
    v77 = v76;
    v78 = (id)_CTLineGetRunAtIndex(v77, v92);
    v161.location = 0;
    v161.length = 0;
    v163 = CTRunGetImageBounds((CTRunRef)v78, 0, v161);
    v79 = v163.origin.x;
    v80 = v163.origin.y;
    v81 = v163.size.width;
    v82 = v163.size.height;

    v83 = p_b;
    *p_b = 0.0;
    v83[1] = 0.0;
    v155.a = 1.0;
    v155.d = -1.0;
    v155.tx = v152;
    v155.ty = v151;
    v164.origin.x = v79;
    v164.origin.y = v80;
    v164.size.width = v81;
    v164.size.height = v82;
    v165 = CGRectApplyAffineTransform(v164, &v155);
    v84 = v165.origin.x;
    v85 = v165.origin.y;
    v86 = v165.size.width;
    v87 = v165.size.height;
    swift_release();

    v166.origin.x = v84;
    v166.origin.y = v85;
    v166.size.width = v86;
    v166.size.height = v87;
    v167 = CGRectInset(v166, -1.0, -1.0);
    v88 = v167.origin.x;
    v89 = v167.origin.y;
    v90 = v167.size.width;
    v91 = v167.size.height;
    swift_release();

    v168.origin.x = v38;
    v168.origin.y = v40;
    v168.size.width = v42;
    v168.size.height = v44;
    v177.origin.x = v88;
    v177.origin.y = v89;
    v177.size.width = v90;
    v177.size.height = v91;
    v169 = CGRectUnion(v168, v177);
    v38 = v169.origin.x;
    v40 = v169.origin.y;
    v42 = v169.size.width;
    v44 = v169.size.height;
    swift_release();

    if (v69 >= RangeSet.Ranges.count.getter())
    {
      v150[1] = v72;
      v65 = (uint64_t)v131;
      v68 = (uint64_t)v135;
      goto LABEL_32;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t TextRenderLayer.layoutSublayers()()
{
  _QWORD *v0;
  _QWORD *v1;
  objc_class *ObjectType;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  char *v52;
  char v53;
  Swift::Bool v54;
  uint64_t *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  double v62;
  double v63;
  unint64_t v64;
  uint64_t m;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int EnumCaseMultiPayload;
  id v79;
  void *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t *v131;
  char v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  int v157;
  uint64_t v158;
  double v159;
  double v160;
  CGFloat v161;
  double v162;
  CGFloat v163;
  double v164;
  CGFloat v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  _BYTE *v172;
  char *v173;
  void *v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  void *v178;
  char v179;
  unint64_t v180;
  double v181;
  char **v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  char *v187;
  void *v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  void *v192;
  char v193;
  unint64_t v194;
  uint64_t v195;
  objc_class *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  void *v200;
  uint64_t *v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  double x;
  double v208;
  double y;
  double v210;
  double v211;
  double v212;
  double height;
  _QWORD **v214;
  objc_class *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  void *v219;
  uint64_t *v220;
  id v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  double v226;
  double v227;
  double v228;
  double v229;
  char v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  objc_class *v236;
  id v237;
  uint64_t *v238;
  _QWORD *v239;
  char v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  CGFloat *v247;
  CGFloat v248;
  CGFloat v249;
  CGFloat v250;
  CGFloat v251;
  id v252;
  id v253;
  void *v254;
  uint64_t v255;
  char v256;
  id v257;
  double v258;
  double v259;
  double v260;
  double v261;
  CGFloat v262;
  CGFloat v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  CGFloat v269;
  double v270;
  uint64_t v271;
  double v272;
  uint64_t v273;
  void *v274;
  double v275;
  double v276;
  double v277;
  double v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  objc_class *v282;
  char *v283;
  char *v284;
  uint64_t *v285;
  _QWORD *v286;
  char v287;
  unint64_t v288;
  unint64_t v289;
  int v290;
  uint64_t v291;
  CGFloat *v292;
  CGFloat v293;
  CGFloat v294;
  CGFloat v295;
  CGFloat v296;
  id v297;
  id v298;
  void *v299;
  uint64_t v300;
  char v301;
  id v302;
  double v303;
  double v304;
  double v305;
  double v306;
  CGFloat v307;
  CGFloat v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  CGFloat Width;
  double v315;
  uint64_t v316;
  double v317;
  uint64_t v318;
  void *v319;
  double v320;
  double v321;
  double v322;
  double v323;
  uint64_t v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  id v329;
  void *v330;
  CGFloat v331;
  CGFloat v332;
  CGFloat v333;
  CGFloat v334;
  _QWORD *v335;
  _QWORD *v336;
  char v337;
  unint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t n;
  id v344;
  void *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t i;
  id v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t j;
  id v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t k;
  id v362;
  void *v363;
  id v364;
  void *v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t ii;
  id v369;
  void *v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t *v373;
  uint64_t v374;
  char *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  double v382;
  double v383;
  double v384;
  double v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  char *v389;
  uint64_t v390;
  double v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  int v397;
  unint64_t *v398;
  _QWORD *v399;
  int v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  objc_super v422;
  objc_super v423;
  objc_super v424;
  objc_super v425;
  uint64_t v426[2];
  uint64_t v427;
  uint64_t v428;
  void *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD v438[18];
  uint64_t v439[13];
  double v440;
  double v441;
  double v442;
  double v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  objc_super v448;
  CGRect v449;
  CGRect v450;
  CGRect v451;
  CGRect v452;
  CGRect v453;
  CGRect v454;
  CGRect v455;
  CGRect v456;
  CGRect v457;
  CGRect v458;
  CGRect v459;
  CGRect v460;
  CGRect v461;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v377 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v377);
  v4 = (char *)&v372 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v386 = (uint64_t)&v372 - v6;
  v405 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v390 = *(_QWORD *)(v405 - 8);
  MEMORY[0x24BDAC7A8](v405);
  v393 = (uint64_t)&v372 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v392 = (uint64_t)&v372 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v407 = (uint64_t *)((char *)&v372 - v11);
  MEMORY[0x24BDAC7A8](v12);
  v409 = (uint64_t)&v372 - v13;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  v408 = v14;
  v402 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v389 = (char *)&v372 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v372 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v401 = (uint64_t *)((char *)&v372 - v22);
  v448.receiver = v1;
  v448.super_class = ObjectType;
  objc_msgSendSuper2(&v448, sel_layoutSublayers, v21);
  v23 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
  v376 = (uint64_t *)(v23 + 112);
  swift_beginAccess();
  v413 = v23;
  v24 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags;
  if (*(_QWORD *)(*(_QWORD *)(v23 + 112) + 56) != *(_QWORD *)((char *)v1
                                                               + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version))
  {
    *((_BYTE *)v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags) = 0;
    objc_msgSend(v1, sel_setSublayers_, 0);
    v34 = (_QWORD *)((char *)v1
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers);
    swift_beginAccess();
    *v34 = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  v398 = (unint64_t *)v19;
  v25 = *((char *)v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags);
  v374 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags;
  if (v25 < 0)
  {
    *((_BYTE *)v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags) = v25 & 0x7F;
    if (objc_msgSend(v1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v36 = swift_dynamicCastClass();
      if (v36)
      {
        v37 = (void *)MEMORY[0x23B7C9E44](v36 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        swift_unknownObjectRelease();
        v24 = v374;
        if (v37)
        {
          TextEffectsRenderer.refreshRenderingAttributes()();

        }
      }
      else
      {
        swift_unknownObjectRelease();
        v24 = v374;
      }
    }
  }
  v26 = v24;
  if ((*((_BYTE *)v1 + v24) & 0x20) != 0)
  {
    *((_BYTE *)v1 + v24) &= ~0x20u;
    v27 = *(void **)((char *)v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment);
    v28 = v27;
    specialized Text.Effect.Markers.init(fragment:)(v27);
    v30 = v29;
    v31 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers;
    if (*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers))
    {
      if (v29)
      {
        swift_bridgeObjectRetain();
        v32 = swift_bridgeObjectRetain();
        v33 = specialized static Array<A>.== infix(_:_:)(v32, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v26 = v374;
          goto LABEL_16;
        }
      }
    }
    else
    {
      v26 = v374;
      if (!v29)
        goto LABEL_16;
    }
    *(_QWORD *)((char *)v1 + v31) = v30;
    swift_bridgeObjectRelease();
    v26 = v374;
    if ((*((_BYTE *)v1 + v374) & 0x10) == 0)
      *((_BYTE *)v1 + v374) |= 0x10u;
  }
LABEL_16:
  v38 = *((_BYTE *)v1 + v26);
  if ((v38 & 1) != 0)
  {
    v41 = 1.0;
    if (objc_msgSend(v1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v42 = swift_dynamicCastClass();
      if (v42)
      {
        v43 = MEMORY[0x23B7C9E44](v42 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v43)
        {
          v44 = (void *)v43;
          v41 = *(double *)(v43 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
          swift_unknownObjectRelease();

        }
        else
        {
          swift_unknownObjectRelease();
        }
        v26 = v374;
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    v45 = *((_BYTE *)v1 + v26);
    if ((v45 & 0x4B) != 2)
      *((_BYTE *)v1 + v26) = v45 & 0xB4 | 2;
    v446 = MEMORY[0x24BEE4AF8];
    v447 = MEMORY[0x24BEE4AF8];
    v444 = MEMORY[0x24BEE4AF8];
    v445 = MEMORY[0x24BEE4AF8];
    v46 = (_QWORD *)((char *)v1
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers);
    swift_beginAccess();
    v403 = v46;
    v47 = *v46;
    v48 = *(_QWORD *)(*v46 + 16);
    v381 = v4;
    if (v48)
    {
      swift_bridgeObjectRetain();
      __asm { BR              X9 }
    }
    v49 = v403;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51 = *v49;
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v51 + 16));
    }
    else
    {
      *v49 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v51 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    v52 = (char *)v1
        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectToSegmentsIndices;
    v421 = (_QWORD *)((char *)v1
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectToSegmentsIndices);
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v52 + 16))
    {
      v53 = swift_isUniquelyReferenced_nonNull_native();
      v438[0] = *v421;
      *v421 = 0x8000000000000000;
      type metadata accessor for _NativeDictionary<Text.Effect.Identifier, Set<Int>>();
      v54 = v53;
      v55 = v421;
      _NativeDictionary.removeAll(isUnique:)(v54);
      *v55 = v438[0];
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    v56 = (_QWORD *)((char *)v1
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements);
    swift_beginAccess();
    v57 = swift_isUniquelyReferenced_nonNull_native();
    v58 = *v56;
    v399 = v56;
    if (v57)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v58 + 16));
    }
    else
    {
      *v56 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v58 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v438, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v438, (uint64_t)v439, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v439) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v39 = 0;
      goto LABEL_271;
    }
    v59 = v439[4];
    v372 = (_QWORD *)((char *)v1
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
    v60 = (_QWORD *)((char *)v1
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_activeIdentifiers);
    v375 = (char *)v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_geometryObserver;
    outlined release of TextRenderLayer.Layout?(v438, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
    v404 = v59;
    swift_bridgeObjectRetain();
    v373 = v60;
    swift_beginAccess();
    v387 = 0;
    v406 = 0;
    v61 = 0;
    v62 = *MEMORY[0x24BDBF070];
    v384 = *(double *)(MEMORY[0x24BDBF070] + 8);
    v385 = v62;
    v63 = *(double *)(MEMORY[0x24BDBF070] + 16);
    v382 = *(double *)(MEMORY[0x24BDBF070] + 24);
    v383 = v63;
    v388 = v1;
    v391 = v41;
LABEL_45:
    v418 = v61;
    v64 = *(_QWORD *)(v404 + 16);
    m = v408;
    if (v406 == v64)
    {
      v66 = 1;
      v67 = v398;
    }
    else
    {
      if (v406 >= v64)
        goto LABEL_233;
      v68 = v406;
      v69 = (uint64_t)&v389[*(int *)(v408 + 48)];
      outlined init with copy of TypesettingLanguage(v404+ ((*(unsigned __int8 *)(v390 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v390 + 80))+ *(_QWORD *)(v390 + 72) * v406, v69, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v67 = v398;
      v70 = (uint64_t)v398 + *(int *)(v408 + 48);
      *v398 = v68;
      v71 = v69;
      m = v408;
      outlined init with take of LocalizedStringKey.FormatArgument(v71, v70, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v66 = 0;
      v406 = v68 + 1;
    }
    v72 = v402;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v402 + 56))(v67, v66, 1, m);
    v73 = (uint64_t)v67;
    v74 = v401;
    outlined init with take of (key: UUID, value: TextRenderSurface)?(v73, (uint64_t)v401, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v74, 1, m) == 1)
    {
      swift_bridgeObjectRelease();
      m = v447;
      if (v447 >> 62)
        goto LABEL_246;
      v342 = *(_QWORD *)((v447 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v342)
        goto LABEL_223;
LABEL_247:
      swift_bridgeObjectRelease();
      v346 = v446;
      if (v446 >> 62)
      {
        swift_bridgeObjectRetain();
        v347 = _CocoaArrayWrapper.endIndex.getter();
        if (v347)
        {
LABEL_249:
          if (v347 < 1)
            goto LABEL_293;
          for (i = 0; i != v347; ++i)
          {
            if ((v346 & 0xC000000000000001) != 0)
              v349 = (id)MEMORY[0x23B7C6D9C](i, v346);
            else
              v349 = *(id *)(v346 + 8 * i + 32);
            v350 = v349;
            objc_msgSend(v349, sel_removeFromSuperlayer);

          }
        }
      }
      else
      {
        v347 = *(_QWORD *)((v446 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v347)
          goto LABEL_249;
      }
      swift_bridgeObjectRelease();
      v351 = v445;
      v352 = swift_bridgeObjectRetain();
      v353 = specialized Array._getCount()(v352);
      if (v353)
      {
        v354 = v353;
        if (v353 < 1)
          goto LABEL_294;
        for (j = 0; j != v354; ++j)
        {
          if ((v351 & 0xC000000000000001) != 0)
            v356 = (id)MEMORY[0x23B7C6D9C](j, v351);
          else
            v356 = *(id *)(v351 + 8 * j + 32);
          v357 = v356;
          objc_msgSend(v356, sel_removeFromSuperlayer);

        }
      }
      swift_bridgeObjectRelease();
      v358 = v444;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v359 = specialized Array._getCount()(v358);
      if (v359)
      {
        v360 = v359;
        if (v359 < 1)
          goto LABEL_295;
        for (k = 0; k != v360; ++k)
        {
          if ((v358 & 0xC000000000000001) != 0)
            v362 = (id)MEMORY[0x23B7C6D9C](k, v358);
          else
            v362 = *(id *)(v358 + 8 * k + 32);
          v363 = v362;
          objc_msgSend(v362, sel_removeFromSuperlayer);

        }
      }
      swift_bridgeObjectRelease();
      outlined release of TextRenderLayer.Layout?(v438, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
      v39 = v387;
LABEL_271:
      v26 = v374;
      v38 = *((_BYTE *)v1 + v374);
      if ((v38 & 0x10) != 0)
      {
        v38 &= ~0x10u;
        *((_BYTE *)v1 + v374) = v38;
        if ((v38 & 4) == 0)
          goto LABEL_273;
      }
      else if ((*((_BYTE *)v1 + v374) & 4) == 0)
      {
        goto LABEL_273;
      }
LABEL_18:
      *((_BYTE *)v1 + v26) = v38 & 0xFB;
      TextRenderLayer.computeLayoutBoundsNaturalOutsets()();
      v38 = *((_BYTE *)v1 + v26);
      if ((v38 & 2) != 0)
        goto LABEL_19;
      goto LABEL_274;
    }
    v75 = *v74;
    v76 = (uint64_t)v74 + *(int *)(m + 48);
    v77 = v409;
    outlined init with take of LocalizedStringKey.FormatArgument(v76, v409, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of TypesettingLanguage(v77, (uint64_t)v407, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v83 = *v407;
      v84 = v407[1];
      v85 = v407[2];
      v87 = v407[3];
      v86 = v407[4];
      v89 = v407[5];
      v88 = v407[6];
      m = v447;
      v90 = v447 >> 62;
      if (!(v447 >> 62))
      {
        if (*(_QWORD *)((v447 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_60;
LABEL_170:
        v282 = (objc_class *)type metadata accessor for TextLinesLayer();
        v283 = (char *)objc_allocWithZone(v282);
        v284 = &v283[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
        *(_QWORD *)v284 = v83;
        *((_QWORD *)v284 + 1) = v84;
        *((_QWORD *)v284 + 2) = v85;
        *((_QWORD *)v284 + 3) = v87;
        *((_QWORD *)v284 + 4) = v86;
        *((_QWORD *)v284 + 5) = v89;
        *((_QWORD *)v284 + 6) = v88;
        v422.receiver = v283;
        v422.super_class = v282;
        v93 = (char *)objc_msgSendSuper2(&v422, sel_init);
        objc_msgSend(v93, sel_setOpaque_, 0);
        objc_msgSend(v93, sel_setNeedsDisplay);

LABEL_171:
        v285 = v403;
        swift_beginAccess();
        v286 = (_QWORD *)*v285;
        v206 = v93;
        v287 = swift_isUniquelyReferenced_nonNull_native();
        *v285 = (uint64_t)v286;
        if ((v287 & 1) == 0)
        {
          v286 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v286[2] + 1, 1, v286);
          *v403 = (uint64_t)v286;
        }
        v289 = v286[2];
        v288 = v286[3];
        if (v289 >= v288 >> 1)
        {
          v286 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v288 > 1), v289 + 1, 1, v286);
          *v403 = (uint64_t)v286;
        }
        v286[2] = v289 + 1;
        v286[v289 + 4] = v206;
        swift_endAccess();
        outlined init with copy of TypesettingLanguage(v409, v392, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        v290 = swift_getEnumCaseMultiPayload();
        if (v290)
        {
          v214 = (_QWORD **)v399;
          if (v290 == 1)
          {
            v291 = v386;
            outlined init with take of LocalizedStringKey.FormatArgument(v392, v386, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            v292 = (CGFloat *)(v291 + *(int *)(v377 + 32));
            v293 = *v292;
            v294 = v292[1];
            v296 = v292[2];
            v295 = v292[3];
            v297 = (id)v206;
            outlined destroy of TypesettingConfiguration(v291, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          }
          else
          {
            v299 = *(void **)(v392 + 24);
            v300 = *(_QWORD *)(v392 + 32);
            v301 = *(_BYTE *)(v392 + 40);
            v302 = (id)v206;
            outlined consume of Text.Layout.Line.Line(v299, v300, v301);
            swift_bridgeObjectRelease();
            specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
            v294 = v384;
            v293 = v385;
            v295 = v382;
            v296 = v383;
          }
        }
        else
        {
          v293 = *(double *)(v392 + 24);
          v294 = *(double *)(v392 + 32);
          v296 = *(double *)(v392 + 40);
          v295 = *(double *)(v392 + 48);
          v298 = (id)v206;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v214 = (_QWORD **)v399;
        }
        v303 = v440;
        v304 = v441;
        v305 = v442;
        v306 = v443;
        v454.origin.x = v293;
        v454.origin.y = v294;
        v454.size.width = v296;
        v454.size.height = v295;
        if (CGRectIsNull(v454))
        {
          v307 = v294;
          v308 = v293;
        }
        else
        {
          v455.origin.x = v293;
          v455.origin.y = v294;
          v455.size.width = v296;
          v455.size.height = v295;
          v456 = CGRectStandardize(v455);
          if (v304 == v306)
            v309 = v306;
          else
            v309 = v304;
          v310 = v309 + v456.origin.x;
          v311 = v303 + v456.origin.y;
          v312 = v456.size.width - (v304 + v306);
          v313 = v456.size.height - (v303 + v305);
          v457.origin.x = v309 + v456.origin.x;
          v457.origin.y = v311;
          v457.size.width = v312;
          v457.size.height = v313;
          Width = CGRectGetWidth(v457);
          v307 = v384;
          v308 = v385;
          v295 = v382;
          v296 = v383;
          if (Width >= 0.0)
          {
            v458.origin.x = v310;
            v458.origin.y = v311;
            v458.size.width = v312;
            v458.size.height = v313;
            if (CGRectGetHeight(v458) >= 0.0)
            {
              v308 = v310;
              v307 = v311;
              v296 = v312;
              v295 = v313;
            }
            else
            {
              v307 = v384;
              v308 = v385;
              v295 = v382;
              v296 = v383;
            }
          }
        }
        v315 = 1.0;
        if (objc_msgSend(v1, sel_delegate))
        {
          type metadata accessor for TextRenderSurface();
          v316 = swift_dynamicCastClass();
          v317 = v391;
          if (v316
            && (v318 = MEMORY[0x23B7C9E44](v316 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer)) != 0)
          {
            v319 = (void *)v318;
            v315 = *(double *)(v318 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
            swift_unknownObjectRelease();

          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
        else
        {
          v317 = v391;
        }
        v320 = 1.0 / v315;
        if (v315 == 0.0)
          v320 = 1.0;
        x = CGRect.roundedCoordinates(toMultipleOf:)(v320, v320, v308, v307, v296, v295);
        y = v321;
        v211 = v322;
        height = v323;
        objc_msgSend((id)v206, sel_setContentsScale_, v317);

        goto LABEL_198;
      }
      swift_bridgeObjectRetain();
      v279 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v279)
        goto LABEL_170;
      swift_bridgeObjectRetain();
      v280 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v280)
        goto LABEL_297;
      swift_bridgeObjectRetain();
      v281 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v281)
        goto LABEL_235;
LABEL_60:
      if ((m & 0xC000000000000001) != 0)
      {
        v91 = (char *)MEMORY[0x23B7C6D9C](0, m);
        if (!v90)
          goto LABEL_63;
      }
      else
      {
        if (!*(_QWORD *)((m & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_236;
        v91 = (char *)*(id *)(m + 32);
        if (!v90)
        {
LABEL_63:
          if (!*(_QWORD *)((m & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_241;
LABEL_64:
          specialized Array.replaceSubrange<A>(_:with:)(0, 1);
          v92 = &v91[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
          *(_QWORD *)v92 = v83;
          *((_QWORD *)v92 + 1) = v84;
          *((_QWORD *)v92 + 2) = v85;
          *((_QWORD *)v92 + 3) = v87;
          *((_QWORD *)v92 + 4) = v86;
          *((_QWORD *)v92 + 5) = v89;
          *((_QWORD *)v92 + 6) = v88;
          v93 = v91;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1 = v388;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          objc_msgSend(v93, sel_setNeedsDisplay);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_171;
        }
      }
      swift_bridgeObjectRetain();
      v341 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v341)
        goto LABEL_241;
      goto LABEL_64;
    }
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v407, (uint64_t)v4, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      m = v446;
      if (v446 >> 62)
      {
        swift_bridgeObjectRetain();
        v232 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v232)
          goto LABEL_138;
        swift_bridgeObjectRetain();
        v233 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v233)
          goto LABEL_296;
        swift_bridgeObjectRetain();
        v234 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v234)
          goto LABEL_234;
LABEL_54:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (m & 0xC000000000000001) == 0, m);
        if ((m & 0xC000000000000001) != 0)
          v79 = (id)MEMORY[0x23B7C6D9C](0, m);
        else
          v79 = *(id *)(m + 32);
        v80 = v79;
        if (!specialized Array._getCount()(m))
          goto LABEL_240;
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        v81 = (uint64_t)v80 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
        swift_beginAccess();
        v82 = v80;
        outlined assign with copy of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v4, v81);
        swift_endAccess();
        objc_msgSend(v82, sel_setNeedsDisplay);

      }
      else
      {
        if (*(_QWORD *)((v446 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_54;
LABEL_138:
        v235 = v386;
        outlined init with copy of TypesettingLanguage((uint64_t)v4, v386, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v236 = (objc_class *)type metadata accessor for TextRunsLayer();
        v237 = objc_allocWithZone(v236);
        outlined init with copy of TypesettingLanguage(v235, (uint64_t)v237 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v423.receiver = v237;
        v423.super_class = v236;
        v82 = objc_msgSendSuper2(&v423, sel_init);
        objc_msgSend(v82, sel_setOpaque_, 0);
        objc_msgSend(v82, sel_setNeedsDisplay);

        outlined destroy of TypesettingConfiguration(v235, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      }
      v238 = v403;
      swift_beginAccess();
      v239 = (_QWORD *)*v238;
      v206 = (unint64_t)v82;
      v240 = swift_isUniquelyReferenced_nonNull_native();
      *v238 = (uint64_t)v239;
      if ((v240 & 1) == 0)
      {
        v239 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v239[2] + 1, 1, v239);
        *v403 = (uint64_t)v239;
      }
      v214 = (_QWORD **)v399;
      v242 = v239[2];
      v241 = v239[3];
      if (v242 >= v241 >> 1)
      {
        v335 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v241 > 1), v242 + 1, 1, v239);
        *v403 = (uint64_t)v335;
      }
      v243 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v242, v206 | 0x4000000000000000);
      _ViewInputs.base.modify(v243, v244);
      swift_endAccess();
      outlined init with copy of TypesettingLanguage(v409, v393, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v245 = swift_getEnumCaseMultiPayload();
      if (v245)
      {
        if (v245 == 1)
        {
          v246 = v386;
          outlined init with take of LocalizedStringKey.FormatArgument(v393, v386, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          v247 = (CGFloat *)(v246 + *(int *)(v377 + 32));
          v248 = *v247;
          v249 = v247[1];
          v250 = v247[2];
          v251 = v247[3];
          v252 = (id)v206;
          outlined destroy of TypesettingConfiguration(v246, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          v254 = *(void **)(v393 + 24);
          v255 = *(_QWORD *)(v393 + 32);
          v256 = *(_BYTE *)(v393 + 40);
          v257 = (id)v206;
          outlined consume of Text.Layout.Line.Line(v254, v255, v256);
          swift_bridgeObjectRelease();
          specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
          v249 = v384;
          v248 = v385;
          v251 = v382;
          v250 = v383;
        }
      }
      else
      {
        v248 = *(double *)(v393 + 24);
        v249 = *(double *)(v393 + 32);
        v250 = *(double *)(v393 + 40);
        v251 = *(double *)(v393 + 48);
        v253 = (id)v206;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v258 = v440;
      v259 = v441;
      v260 = v442;
      v261 = v443;
      v449.origin.x = v248;
      v449.origin.y = v249;
      v449.size.width = v250;
      v449.size.height = v251;
      if (CGRectIsNull(v449))
      {
        v262 = v249;
        v263 = v248;
      }
      else
      {
        v450.origin.x = v248;
        v450.origin.y = v249;
        v450.size.width = v250;
        v450.size.height = v251;
        v451 = CGRectStandardize(v450);
        if (v259 == v261)
          v264 = v261;
        else
          v264 = v259;
        v265 = v264 + v451.origin.x;
        v266 = v258 + v451.origin.y;
        v267 = v451.size.width - (v259 + v261);
        v268 = v451.size.height - (v258 + v260);
        v452.origin.x = v264 + v451.origin.x;
        v452.origin.y = v266;
        v452.size.width = v267;
        v452.size.height = v268;
        v269 = CGRectGetWidth(v452);
        v262 = v384;
        v263 = v385;
        v251 = v382;
        v250 = v383;
        if (v269 >= 0.0)
        {
          v453.origin.x = v265;
          v453.origin.y = v266;
          v453.size.width = v267;
          v453.size.height = v268;
          if (CGRectGetHeight(v453) >= 0.0)
          {
            v263 = v265;
            v262 = v266;
            v250 = v267;
            v251 = v268;
          }
          else
          {
            v262 = v384;
            v263 = v385;
            v251 = v382;
            v250 = v383;
          }
        }
      }
      v270 = 1.0;
      if (objc_msgSend(v1, sel_delegate))
      {
        type metadata accessor for TextRenderSurface();
        v271 = swift_dynamicCastClass();
        v272 = v391;
        if (v271
          && (v273 = MEMORY[0x23B7C9E44](v271 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer)) != 0)
        {
          v274 = (void *)v273;
          v270 = *(double *)(v273 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
          swift_unknownObjectRelease();

        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        v272 = v391;
      }
      v275 = 1.0 / v270;
      if (v270 == 0.0)
        v275 = 1.0;
      x = CGRect.roundedCoordinates(toMultipleOf:)(v275, v275, v263, v262, v250, v251);
      y = v276;
      v211 = v277;
      height = v278;
      objc_msgSend((id)v206, sel_setContentsScale_, v272);

      outlined destroy of TypesettingConfiguration((uint64_t)v4, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
LABEL_198:
      v231 = 0;
      goto LABEL_199;
    }
    v94 = v407[1];
    v378 = *v407;
    v379 = v94;
    v95 = (void *)v407[3];
    v380 = v407[2];
    v96 = v407[4];
    v97 = *((unsigned __int8 *)v407 + 40);
    v99 = v407[6];
    v98 = v407[7];
    v400 = *((_DWORD *)v407 + 16);
    v101 = v407[9];
    v100 = v407[10];
    v102 = v407[11];
    v103 = *(_QWORD *)(v102 + 16);
    v104 = v418;
    v394 = v102;
    v395 = v96;
    v397 = v97;
    v396 = v95;
    v420 = v75;
    if (v103)
    {
      v105 = *v372;
      v410 = v372[1];
      v106 = *v376;
      outlined copy of Text.Layout.Line.Line(v95, v96, v97);
      swift_bridgeObjectRetain_n();
      swift_retain();
      v412 = v105;
      swift_bridgeObjectRetain();
      v411 = v106;
      swift_retain();
      v107 = (uint64_t *)(v102 + 56);
      while (1)
      {
        v414 = v103;
        v108 = v107[6];
        v109 = v107[7];
        v110 = v107[4];
        v111 = v107[5];
        v113 = v107[2];
        v112 = v107[3];
        v115 = *v107;
        v114 = v107[1];
        v116 = *(v107 - 2);
        v117 = (void *)*(v107 - 1);
        v118 = *(v107 - 3);
        v427 = v118;
        v428 = v116;
        v429 = v117;
        v430 = v115;
        v431 = v114;
        v416 = v114;
        v417 = v113;
        v432 = v113;
        v433 = v112;
        v418 = v112;
        v419 = v110;
        v434 = v110;
        v435 = v111;
        v436 = v108;
        v437 = v109;
        outlined copy of Text.Effect.Composition.Operation(v118, v116, v117, v115, v114, v113, v112, v110);
        v415 = closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)((Swift::UInt64 *)&v427, v412, v410, v411, v413);
        outlined consume of Text.Effect.Composition.Operation(v118, v116, v117, v115, v416, v417, v418, v419);
        if ((v415 & 1) != 0)
          break;
        v107 += 11;
        v103 = v414 - 1;
        if (v414 == 1)
        {
          v418 = v104;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          v102 = v394;
          swift_bridgeObjectRelease();
          v96 = v395;
          v95 = v396;
          LOBYTE(v97) = v397;
          outlined consume of Text.Layout.Line.Line(v396, v395, v397);
          swift_bridgeObjectRelease();
          goto LABEL_70;
        }
      }
      v418 = v104;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v102 = v394;
      swift_bridgeObjectRelease();
      v96 = v395;
      v95 = v396;
      LOBYTE(v97) = v397;
      outlined consume of Text.Layout.Line.Line(v396, v395, v397);
      swift_bridgeObjectRelease();
      LODWORD(v417) = 1;
    }
    else
    {
LABEL_70:
      LODWORD(v417) = 0;
    }
    v426[0] = MEMORY[0x24BEE4B08];
    v427 = (uint64_t)v95;
    v428 = v96;
    LOBYTE(v429) = v97;
    v430 = v99;
    v431 = v98;
    LODWORD(v432) = v400;
    v433 = v101;
    v434 = v100;
    v435 = v102;
    Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)v426);
    v119 = 0;
    v1 = (_QWORD *)v426[0];
    v120 = v426[0] + 56;
    v121 = 1 << *(_BYTE *)(v426[0] + 32);
    if (v121 < 64)
      v122 = ~(-1 << v121);
    else
      v122 = -1;
    v123 = v122 & *(_QWORD *)(v426[0] + 56);
    v419 = (unint64_t)(v121 + 63) >> 6;
    for (m = v387; ; m = (uint64_t)specialized thunk for @callee_guaranteed () -> (@owned Set<Int>))
    {
      if (v123)
      {
        v125 = __clz(__rbit64(v123));
        v123 &= v123 - 1;
        v126 = v125 | (v119 << 6);
      }
      else
      {
        v127 = __OFADD__(v119++, 1);
        if (v127)
          goto LABEL_231;
        if (v119 >= v419)
        {
LABEL_114:
          v387 = m;
          swift_release();
          v4 = v381;
          v155 = v395;
          v1 = v396;
          v427 = (uint64_t)v396;
          v428 = v395;
          v156 = v397;
          LOBYTE(v429) = v397;
          v430 = v99;
          v431 = v98;
          v157 = v400;
          LODWORD(v432) = v400;
          v433 = v101;
          v434 = v100;
          v158 = v394;
          v435 = v394;
          outlined copy of Text.Layout.Line.Line(v396, v395, v397);
          swift_bridgeObjectRetain();
          v159 = TextRenderLayer.drawingBounds(for:)(&v427);
          v161 = v160;
          v163 = v162;
          v165 = v164;
          outlined consume of Text.Layout.Line.Line(v1, v155, v156);
          swift_bridgeObjectRelease();
          v166 = *v373;
          v426[0] = MEMORY[0x24BEE4B08];
          v427 = (uint64_t)v1;
          v428 = v155;
          LOBYTE(v429) = v156;
          v430 = v99;
          v431 = v98;
          LODWORD(v432) = v157;
          v433 = v101;
          v434 = v100;
          v435 = v158;
          swift_bridgeObjectRetain();
          Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)v426);
          v167 = specialized _NativeSet.intersection(_:)(v426[0], v166, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
          swift_bridgeObjectRelease();
          v168 = *(_QWORD *)(v167 + 16);
          swift_release();
          if (v168)
          {
            m = v444;
            v169 = swift_bridgeObjectRetain();
            v170 = specialized Array._getCount()(v169);
            swift_bridgeObjectRelease();
            if (v170)
            {
              if (specialized Array._getCount()(m))
              {
                if (specialized Array._getCount()(m))
                {
                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (m & 0xC000000000000001) == 0, m);
                  if ((m & 0xC000000000000001) != 0)
                    v171 = (_BYTE *)MEMORY[0x23B7C6D9C](0, m);
                  else
                    v171 = *(id *)(m + 32);
                  v172 = v171;
                  if (specialized Array._getCount()(m))
                  {
                    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
                    v173 = &v172[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content];
                    v174 = *(void **)&v172[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                         + 24];
                    v175 = *(_QWORD *)&v172[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                          + 32];
                    v176 = v172[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                              + 40];
                    v177 = v379;
                    *(_QWORD *)v173 = v378;
                    *((_QWORD *)v173 + 1) = v177;
                    *((_QWORD *)v173 + 2) = v380;
                    *((_QWORD *)v173 + 3) = v1;
                    *((_QWORD *)v173 + 4) = v155;
                    v178 = v1;
                    v179 = v397;
                    v173[40] = v397;
                    *((_QWORD *)v173 + 6) = v99;
                    *((_QWORD *)v173 + 7) = v98;
                    *((_DWORD *)v173 + 16) = v400;
                    *((_QWORD *)v173 + 9) = v101;
                    *((_QWORD *)v173 + 10) = v100;
                    *((_QWORD *)v173 + 11) = v394;
                    outlined copy of Text.Layout.Line.Line(v178, v155, v179);
                    swift_bridgeObjectRetain();
                    v180 = v172;
                    outlined consume of Text.Layout.Line.Line(v174, v175, v176);
                    swift_bridgeObjectRelease();
                    objc_msgSend((id)v180, sel_setNeedsDisplay);

                    v4 = v381;
                    v181 = v391;
                    v182 = &selRef_bundleURL;
                    goto LABEL_130;
                  }
LABEL_244:
                  __break(1u);
LABEL_245:
                  __break(1u);
LABEL_246:
                  swift_bridgeObjectRetain();
                  v342 = _CocoaArrayWrapper.endIndex.getter();
                  if (!v342)
                    goto LABEL_247;
LABEL_223:
                  if (v342 >= 1)
                  {
                    for (n = 0; n != v342; ++n)
                    {
                      if ((m & 0xC000000000000001) != 0)
                        v344 = (id)MEMORY[0x23B7C6D9C](n, m);
                      else
                        v344 = *(id *)(m + 8 * n + 32);
                      v345 = v344;
                      objc_msgSend(v344, sel_removeFromSuperlayer);

                    }
                    goto LABEL_247;
                  }
LABEL_292:
                  __break(1u);
LABEL_293:
                  __break(1u);
LABEL_294:
                  __break(1u);
LABEL_295:
                  __break(1u);
LABEL_296:
                  __break(1u);
LABEL_297:
                  __break(1u);
LABEL_298:
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  JUMPOUT(0x234B9EBACLL);
                }
LABEL_239:
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
                goto LABEL_243;
              }
LABEL_238:
              __break(1u);
              goto LABEL_239;
            }
            v196 = (objc_class *)type metadata accessor for DynamicEffectLayer();
            v197 = (char *)objc_allocWithZone(v196);
            v198 = &v197[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content];
            v199 = v379;
            *(_QWORD *)v198 = v378;
            *((_QWORD *)v198 + 1) = v199;
            *((_QWORD *)v198 + 2) = v380;
            *((_QWORD *)v198 + 3) = v1;
            *((_QWORD *)v198 + 4) = v155;
            v200 = v1;
            v179 = v397;
            v198[40] = v397;
            *((_QWORD *)v198 + 6) = v99;
            *((_QWORD *)v198 + 7) = v98;
            *((_DWORD *)v198 + 16) = v400;
            *((_QWORD *)v198 + 9) = v101;
            *((_QWORD *)v198 + 10) = v100;
            *((_QWORD *)v198 + 11) = v158;
            outlined copy of Text.Layout.Line.Line(v200, v155, v179);
            v425.receiver = v197;
            v425.super_class = v196;
            swift_bridgeObjectRetain();
            v180 = (unint64_t)objc_msgSendSuper2(&v425, sel_init);
            objc_msgSend((id)v180, sel_setOpaque_, 0);
            objc_msgSend((id)v180, sel_setNeedsDisplay);

            v182 = &selRef_bundleURL;
            v181 = v391;
            objc_msgSend((id)v180, sel_setContentsScale_, v391);
LABEL_130:
            v201 = v403;
            swift_beginAccess();
            v202 = (id)v180;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v203 = *(_QWORD *)(*v201 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v203);
            v204 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v203, v180 | 0x8000000000000000);
            _ViewInputs.base.modify(v204, v205);
            swift_endAccess();
            v206 = (unint64_t)v202;
            objc_msgSend((id)v206, v182[1], v181);
            x = CGRect.roundedCoordinates(toMultipleOf:)(16.0, 16.0, v159, v161, v163, v165);
            y = v208;
            v211 = v210;
            height = v212;

            outlined consume of Text.Layout.Line.Line(v396, v395, v179);
            swift_bridgeObjectRelease();
            v214 = (_QWORD **)v399;
            v1 = v388;
          }
          else
          {
            m = v445;
            v183 = swift_bridgeObjectRetain();
            v184 = specialized Array._getCount()(v183);
            swift_bridgeObjectRelease();
            if (v184)
            {
              if (!specialized Array._getCount()(m))
                goto LABEL_242;
              if (!specialized Array._getCount()(m))
              {
LABEL_243:
                __break(1u);
                goto LABEL_244;
              }
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (m & 0xC000000000000001) == 0, m);
              if ((m & 0xC000000000000001) != 0)
                v185 = (_BYTE *)MEMORY[0x23B7C6D9C](0, m);
              else
                v185 = *(id *)(m + 32);
              v186 = v185;
              if (!specialized Array._getCount()(m))
                goto LABEL_245;
              specialized Array.replaceSubrange<A>(_:with:)(0, 1);
              v187 = &v186[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content];
              v188 = *(void **)&v186[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                                   + 24];
              v189 = *(_QWORD *)&v186[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                                    + 32];
              v190 = v186[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content + 40];
              v191 = v379;
              *(_QWORD *)v187 = v378;
              *((_QWORD *)v187 + 1) = v191;
              *((_QWORD *)v187 + 2) = v380;
              *((_QWORD *)v187 + 3) = v1;
              *((_QWORD *)v187 + 4) = v155;
              v192 = v1;
              v193 = v397;
              v187[40] = v397;
              *((_QWORD *)v187 + 6) = v99;
              *((_QWORD *)v187 + 7) = v98;
              *((_DWORD *)v187 + 16) = v400;
              *((_QWORD *)v187 + 9) = v101;
              *((_QWORD *)v187 + 10) = v100;
              *((_QWORD *)v187 + 11) = v394;
              outlined copy of Text.Layout.Line.Line(v192, v155, v193);
              swift_bridgeObjectRetain();
              v194 = v186;
              outlined consume of Text.Layout.Line.Line(v188, v189, v190);
              v195 = v155;
              swift_bridgeObjectRelease();
              v4 = v381;
            }
            else
            {
              v215 = (objc_class *)type metadata accessor for StaticEffectLayer();
              v216 = (char *)objc_allocWithZone(v215);
              v217 = &v216[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content];
              v218 = v379;
              *(_QWORD *)v217 = v378;
              *((_QWORD *)v217 + 1) = v218;
              *((_QWORD *)v217 + 2) = v380;
              *((_QWORD *)v217 + 3) = v1;
              *((_QWORD *)v217 + 4) = v155;
              v195 = v155;
              v219 = v1;
              v193 = v397;
              v217[40] = v397;
              *((_QWORD *)v217 + 6) = v99;
              *((_QWORD *)v217 + 7) = v98;
              *((_DWORD *)v217 + 16) = v400;
              *((_QWORD *)v217 + 9) = v101;
              *((_QWORD *)v217 + 10) = v100;
              *((_QWORD *)v217 + 11) = v158;
              outlined copy of Text.Layout.Line.Line(v219, v155, v193);
              v424.receiver = v216;
              v424.super_class = v215;
              swift_bridgeObjectRetain();
              v194 = (unint64_t)objc_msgSendSuper2(&v424, sel_init);
              objc_msgSend((id)v194, sel_setOpaque_, 0);
            }
            objc_msgSend((id)v194, sel_setNeedsDisplay);

            v220 = v403;
            swift_beginAccess();
            v221 = (id)v194;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v222 = *(_QWORD *)(*v220 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v222);
            v223 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v222, v194 | 0xC000000000000000);
            _ViewInputs.base.modify(v223, v224);
            swift_endAccess();
            v206 = (unint64_t)v221;
            objc_msgSend((id)v206, sel_setContentsScale_, v391);
            v225 = v388;
            TextRenderLayer.pixelLength.getter();
            x = CGRect.roundedCoordinates(toMultipleOf:)(v226, v226, v159, v161, v163, v165);
            y = v227;
            v211 = v228;
            height = v229;

            v230 = v193;
            v1 = v225;
            outlined consume of Text.Layout.Line.Line(v396, v195, v230);
            swift_bridgeObjectRelease();
            v214 = (_QWORD **)v399;
          }
          v231 = v417;
LABEL_199:
          objc_msgSend((id)v206, sel_setDelegate_, v1);
          objc_msgSend(v1, sel_addSublayer_, v206);
          if (!v231)
            goto LABEL_209;
          v324 = MEMORY[0x23B7C9E44](v375);
          if (!v324)
            goto LABEL_209;
          m = v324;
          LayerGeometryObserver.validateLayers()();
          v325 = (unint64_t *)(m
                                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
          swift_beginAccess();
          v326 = *v325;
          if (v326 >> 62)
          {
            swift_bridgeObjectRetain();
            v327 = _CocoaArrayWrapper.endIndex.getter();
            if (!v327)
              goto LABEL_208;
LABEL_203:
            v127 = __OFSUB__(v327, 1);
            v328 = v327 - 1;
            if (!v127)
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v328, (v326 & 0xC000000000000001) == 0, v326);
              if ((v326 & 0xC000000000000001) != 0)
                v329 = (id)MEMORY[0x23B7C6D9C](v328, v326);
              else
                v329 = *(id *)(v326 + 8 * v328 + 32);
              v330 = v329;
              swift_bridgeObjectRelease();
              objc_msgSend(v330, sel_bounds);
              objc_msgSend((id)v206, sel_convertRect_fromLayer_, v330);
              v461.origin.x = v331;
              v461.origin.y = v332;
              v461.size.width = v333;
              v461.size.height = v334;
              v459.origin.x = x;
              v459.origin.y = y;
              v459.size.width = v211;
              v459.size.height = height;
              v460 = CGRectIntersection(v459, v461);
              x = v460.origin.x;
              y = v460.origin.y;
              v211 = v460.size.width;
              height = v460.size.height;

              v214 = (_QWORD **)v399;
              goto LABEL_209;
            }
LABEL_237:
            __break(1u);
            goto LABEL_238;
          }
          v327 = *(_QWORD *)((v326 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v327)
            goto LABEL_203;
LABEL_208:

          swift_bridgeObjectRelease();
LABEL_209:
          objc_msgSend((id)v206, sel_setFrame_, x, y, v211, height);
          objc_msgSend((id)v206, sel_setBounds_, x, y, v211, height);
          swift_beginAccess();
          v336 = *v214;
          v337 = swift_isUniquelyReferenced_nonNull_native();
          *v214 = v336;
          if ((v337 & 1) == 0)
          {
            v336 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v336[2] + 1, 1, v336);
            *v214 = v336;
          }
          v339 = v336[2];
          v338 = v336[3];
          if (v339 >= v338 >> 1)
          {
            v336 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v338 > 1), v339 + 1, 1, v336);
            *v399 = v336;
          }
          v336[2] = v339 + 1;
          v340 = &v336[2 * v339];
          v340[4] = 0;
          v340[5] = 0;
          swift_endAccess();

          outlined destroy of TypesettingConfiguration(v409, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          v61 = v418;
          goto LABEL_45;
        }
        v128 = *(_QWORD *)(v120 + 8 * v119);
        if (!v128)
        {
          v129 = v119 + 1;
          if (v119 + 1 >= v419)
            goto LABEL_114;
          v128 = *(_QWORD *)(v120 + 8 * v129);
          if (!v128)
          {
            v129 = v119 + 2;
            if (v119 + 2 >= v419)
              goto LABEL_114;
            v128 = *(_QWORD *)(v120 + 8 * v129);
            if (!v128)
            {
              v129 = v119 + 3;
              if (v119 + 3 >= v419)
                goto LABEL_114;
              v128 = *(_QWORD *)(v120 + 8 * v129);
              if (!v128)
              {
                while (1)
                {
                  v119 = v129 + 1;
                  if (__OFADD__(v129, 1))
                    goto LABEL_232;
                  if (v119 >= v419)
                    goto LABEL_114;
                  v128 = *(_QWORD *)(v120 + 8 * v119);
                  ++v129;
                  if (v128)
                    goto LABEL_90;
                }
              }
            }
          }
          v119 = v129;
        }
LABEL_90:
        v123 = (v128 - 1) & v128;
        v126 = __clz(__rbit64(v128)) + (v119 << 6);
      }
      v130 = *(_QWORD *)(v1[6] + 8 * v126);
      v131 = v421;
      swift_beginAccess();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(m);
      v132 = swift_isUniquelyReferenced_nonNull_native();
      v426[0] = *v131;
      m = v426[0];
      *v131 = 0x8000000000000000;
      v134 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
      v135 = *(_QWORD *)(m + 16);
      v136 = (v133 & 1) == 0;
      v137 = v135 + v136;
      if (__OFADD__(v135, v136))
      {
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
        goto LABEL_237;
      }
      v138 = v133;
      if (*(_QWORD *)(m + 24) >= v137)
      {
        if ((v132 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          m = v426[0];
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v137, v132);
        m = v426[0];
        v139 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
        if ((v138 & 1) != (v140 & 1))
          goto LABEL_298;
        v134 = v139;
      }
      v141 = v421;
      *v421 = m;
      swift_bridgeObjectRelease();
      v142 = (_QWORD *)*v141;
      v143 = 8 * v134;
      if ((v138 & 1) != 0)
      {
        v144 = swift_bridgeObjectRetain();
      }
      else
      {
        v142[(v134 >> 6) + 8] |= 1 << v134;
        *(_QWORD *)(v142[6] + 8 * v134) = v130;
        *(_QWORD *)(v142[7] + 8 * v134) = MEMORY[0x24BEE4B08];
        v145 = v142[2];
        m = v145 + 1;
        v146 = __OFADD__(v145, 1);
        v144 = swift_bridgeObjectRetain();
        if (v146)
          goto LABEL_230;
        *(_QWORD *)(v144 + 16) = m;
      }
      v147 = *(_QWORD *)(v144 + 56);
      swift_bridgeObjectRelease();
      v148 = *(_QWORD *)(v147 + 8 * v134);
      v149 = v420;
      v150 = static Hasher._hash(seed:_:)();
      v151 = -1 << *(_BYTE *)(v148 + 32);
      v152 = v150 & ~v151;
      if (((*(_QWORD *)(v148 + 56 + ((v152 >> 3) & 0xFFFFFFFFFFFFF8)) >> v152) & 1) == 0)
        goto LABEL_76;
      v153 = *(_QWORD *)(v148 + 48);
      if (*(_QWORD *)(v153 + 8 * v152) != v149)
        break;
LABEL_77:
      swift_endAccess();
    }
    v154 = ~v151;
    while (1)
    {
      v152 = (v152 + 1) & v154;
      if (((*(_QWORD *)(v148 + 56 + ((v152 >> 3) & 0xFFFFFFFFFFFFF8)) >> v152) & 1) == 0)
        break;
      if (*(_QWORD *)(v153 + 8 * v152) == v149)
        goto LABEL_77;
    }
LABEL_76:
    v124 = swift_isUniquelyReferenced_nonNull_native();
    v426[0] = *(_QWORD *)(v147 + v143);
    *(_QWORD *)(v147 + v143) = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v149, v152, v124);
    *(_QWORD *)(v147 + v143) = v426[0];
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  v39 = 0;
  if ((*((_BYTE *)v1 + v26) & 4) != 0)
    goto LABEL_18;
LABEL_273:
  if ((v38 & 2) != 0)
  {
LABEL_19:
    *((_BYTE *)v1 + v26) = v38 & 0xFD;
    TextRenderLayer.displaceSublayers()();
    v38 = *((_BYTE *)v1 + v26);
    if ((v38 & 0x40) != 0)
      goto LABEL_20;
    goto LABEL_275;
  }
LABEL_274:
  if ((v38 & 0x40) != 0)
  {
LABEL_20:
    *((_BYTE *)v1 + v26) = v38 & 0xBF;
    TextRenderLayer.updateClippingBounds()();
    v38 = *((_BYTE *)v1 + v26);
    v40 = v39;
    if ((v38 & 0x10) == 0)
      goto LABEL_285;
    goto LABEL_276;
  }
LABEL_275:
  v40 = v39;
  if ((v38 & 0x10) == 0)
    goto LABEL_285;
LABEL_276:
  *((_BYTE *)v1 + v26) = v38 & 0xEF;
  v364 = objc_msgSend(v1, sel_sublayers);
  if (v364)
  {
    v365 = v364;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    v366 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v366 >> 62)
    {
      swift_bridgeObjectRetain();
      v367 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v367)
        goto LABEL_279;
    }
    else
    {
      v367 = *(_QWORD *)((v366 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v367)
      {
LABEL_279:
        if (v367 < 1)
        {
          __break(1u);
          goto LABEL_292;
        }
        for (ii = 0; ii != v367; ++ii)
        {
          if ((v366 & 0xC000000000000001) != 0)
            v369 = (id)MEMORY[0x23B7C6D9C](ii, v366);
          else
            v369 = *(id *)(v366 + 8 * ii + 32);
          v370 = v369;
          objc_msgSend(v369, sel_setNeedsDisplay);

        }
      }
    }
    swift_bridgeObjectRelease();
    v371 = v39;
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v371);
  }
LABEL_285:
  v371 = v40;
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v371);
}

Swift::Void __swiftcall TextEffectsRenderer.refreshRenderingAttributes()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  if (v1 >> 62)
    goto LABEL_13;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23B7C6D9C](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, sel_textElement);

      if (!v7)
      {
        swift_bridgeObjectRelease_n();
        return;
      }
      ++v3;
      if (v6 == v2)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  specialized TextEffectsRenderer.updateKeyframes(with:)(v0);
}

void specialized thunk for @callee_guaranteed () -> (@owned Set<Int>)(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4B08];
}

uint64_t TextRenderLayer.computeLayoutBoundsNaturalOutsets()()
{
  uint64_t v0;
  uint64_t result;
  _OWORD *v2;
  double x;
  double y;
  double width;
  double height;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  double TypographicBounds;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  const __CTLine *v21;
  _BOOL4 IsNull;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double MinY;
  double MinX;
  double MaxY;
  double v39;
  double MaxX;
  double v41;
  double *v42;
  CGFloat v43;
  CGFloat rect_8;
  double rect_16;
  double rect_24;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent[18];
  _QWORD v50[18];
  uint64_t v51[20];
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v51[18] = *MEMORY[0x24BDAC8D0];
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v50, (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v51);
  if ((_DWORD)result == 1)
  {
    v2 = (_OWORD *)(v0
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets);
    *v2 = 0u;
    v2[1] = 0u;
  }
  else
  {
    x = *MEMORY[0x24BDBF070];
    y = *(double *)(MEMORY[0x24BDBF070] + 8);
    width = *(double *)(MEMORY[0x24BDBF070] + 16);
    height = *(double *)(MEMORY[0x24BDBF070] + 24);
    v7 = v51[0];
    v8 = *(_QWORD *)(v51[0] + 16);
    if (v8)
    {
      outlined release of TextRenderLayer.Layout?(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
      swift_bridgeObjectRetain();
      v9 = (double *)(v7 + 64);
      do
      {
        v16 = (void *)*((_QWORD *)v9 - 4);
        v17 = *((_QWORD *)v9 - 3);
        v18 = *((_BYTE *)v9 - 16);
        v20 = *(v9 - 1);
        v19 = *v9;
        if ((v18 & 1) != 0)
        {
          outlined copy of Text.Layout.Line.Line(v16, v17, 1);
          objc_msgSend(v16, sel_typographicBounds);
          TypographicBounds = v10;
          v13 = v12;
          objc_msgSend(v16, sel_glyphOrigin);
          v15 = v13 - v14;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v16, v17, 0);
          outlined copy of Text.Layout.Line.Line(v16, v17, 0);
          v21 = v16;
          descent = 0.0;
          ascent[0] = 0.0;
          leading = 0.0;
          TypographicBounds = CTLineGetTypographicBounds(v21, ascent, &descent, &leading);

          outlined consume of Text.Layout.Line.Line(v16, v17, 0);
          v15 = descent;
          v14 = ascent[0];
        }
        v62.origin.x = v20 + 0.0;
        v62.origin.y = v19 + 0.0 - v14;
        v62.size.height = v15 + v14;
        v52.origin.x = x;
        v52.origin.y = y;
        v52.size.width = width;
        v52.size.height = height;
        v62.size.width = TypographicBounds;
        v53 = CGRectUnion(v52, v62);
        x = v53.origin.x;
        y = v53.origin.y;
        width = v53.size.width;
        height = v53.size.height;
        outlined consume of Text.Layout.Line.Line(v16, v17, v18);
        v9 += 6;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v50, (uint64_t)ascent, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
      outlined retain of TextRenderLayer.Layout((uint64_t)ascent);
    }
    v54.origin.x = x;
    v54.origin.y = y;
    v54.size.width = width;
    v54.size.height = height;
    IsNull = CGRectIsNull(v54);
    v23 = 0.0;
    if (IsNull)
      v24 = 0.0;
    else
      v24 = width;
    if (IsNull)
      v25 = 0.0;
    else
      v25 = height;
    v43 = v25;
    if (IsNull)
      v26 = 0.0;
    else
      v26 = y;
    if (!IsNull)
      v23 = x;
    v27 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds);
    v28 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds + 8);
    v31 = *(double *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                    + 16);
    v32 = *(double *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                    + 24);
    v33 = v23 + v27;
    v29 = v33;
    v34 = v26 + v28;
    v30 = v34;
    v35 = v24;
    rect_8 = v24;
    MinY = CGRectGetMinY(*(CGRect *)(&v24 - 2));
    v55.origin.x = v27;
    v55.origin.y = v28;
    v55.size.width = v31;
    v55.size.height = v32;
    rect_24 = MinY - CGRectGetMinY(v55);
    v56.origin.x = v29;
    v56.origin.y = v30;
    v56.size.width = v35;
    v56.size.height = v43;
    MinX = CGRectGetMinX(v56);
    v57.origin.x = v27;
    v57.origin.y = v28;
    v57.size.width = v31;
    v57.size.height = v32;
    rect_16 = MinX - CGRectGetMinX(v57);
    v58.origin.x = v27;
    v58.origin.y = v28;
    v58.size.width = v31;
    v58.size.height = v32;
    MaxY = CGRectGetMaxY(v58);
    v59.origin.x = v29;
    v59.origin.y = v30;
    v59.size.width = rect_8;
    v59.size.height = v43;
    v39 = MaxY - CGRectGetMaxY(v59);
    v60.origin.x = v27;
    v60.origin.y = v28;
    v60.size.width = v31;
    v60.size.height = v32;
    MaxX = CGRectGetMaxX(v60);
    v61.origin.x = v29;
    v61.origin.y = v30;
    v61.size.width = rect_8;
    v61.size.height = v43;
    v41 = CGRectGetMaxX(v61);
    result = (uint64_t)outlined release of TextRenderLayer.Layout?(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    v42 = (double *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets);
    *v42 = rect_24;
    v42[1] = rect_16;
    v42[2] = v39;
    v42[3] = MaxX - v41;
  }
  return result;
}

_QWORD *TextRenderLayer.displaceSublayers()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  void *v56;
  int64_t v57;
  double v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  double v67;
  void *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  double v74;
  uint64_t *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  Swift::Int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  double v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char v135;
  unint64_t v136;
  char **v137;
  char **v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  double v152;
  char **v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char v175;
  uint64_t v176;
  uint64_t *v177;
  double v178;
  CGFloat v179;
  void *v180;
  uint64_t v181;
  double v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  char v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  _QWORD *v196;
  void *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  CGFloat v202;
  uint64_t v203;
  char **v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  Swift::Int v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  double v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  char v233;
  void *v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  char *v242;
  uint64_t v243;
  char v244;
  __int128 v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  char *v255;
  const __CTLine *v256;
  const __CTLine *v257;
  void *v258;
  CFRange v259;
  CFIndex v260;
  void (*v261)(CGPoint *, _QWORD);
  char *v262;
  _QWORD *v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  double v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  double v278;
  void *v279;
  void *v280;
  uint64_t v281;
  char v282;
  _QWORD *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  char v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  char v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  char v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t *v306;
  const __CTLine *v307;
  const __CTLine *v308;
  void *v309;
  CFRange v310;
  CFIndex v311;
  void (*v312)(CGPoint *, _QWORD);
  double v313;
  char *v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  char v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  double *v331;
  uint64_t v332;
  int64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  double *v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  uint64_t *v349;
  void *v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  double v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  double v364;
  double v365;
  void *v366;
  uint64_t *v367;
  uint64_t v368;
  char **v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  double v374;
  CFIndex v375;
  double v376;
  double v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  unint64_t v385;
  void *v386;
  uint64_t v387;
  double v388;
  uint64_t v389;
  double v390;
  double v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  char v402;
  CFIndex v403;
  uint64_t v404;
  const __CTLine *v405;
  CFIndex v406;
  void *v407;
  uint64_t v408;
  const __CTLine *v409;
  uint64_t v410;
  uint64_t v411;
  char v412;
  char *v413;
  uint64_t *v414;
  char v415;
  double v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  unint64_t v432;
  char v433;
  uint64_t v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char v439;
  char v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  char *v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char v450;
  uint64_t v451;
  void *v452;
  unint64_t v453;
  uint64_t v454;
  void *v455;
  unint64_t v456;
  uint64_t v457;
  void *v458;
  unint64_t v459;
  char *v460;
  uint64_t v461;
  const __CTLine *v462;
  const __CTLine *v463;
  void *v464;
  CFRange v465;
  CFIndex v466;
  void (*v467)(CGPoint *, _QWORD);
  uint64_t v468;
  char v469;
  double v470;
  double (*v471)(uint64_t, uint64_t, char *);
  char *v472;
  double v473;
  double v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  Swift::Int v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  const __CTLine *v488;
  CFIndex v489;
  void *v490;
  double v491;
  uint64_t v492;
  const __CTLine *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  char v500;
  uint64_t v501;
  void *v502;
  _QWORD *v503;
  char **v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  char v509;
  char **v510;
  uint64_t *v511;
  const __CTLine *v512;
  const __CTLine *v513;
  uint64_t *v514;
  void *v515;
  CFRange StringRange;
  CFIndex v517;
  void (*v518)(CGPoint *, _QWORD);
  char *v519;
  double v520;
  double v521;
  double v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  double v534;
  double v535;
  double v536;
  uint64_t v537;
  uint64_t v538;
  void *v539;
  uint64_t v540;
  _QWORD *v541;
  unint64_t v542;
  double v543;
  CGFloat v544;
  double v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  double v549;
  double v550;
  double v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  id v557;
  void *v558;
  double v559;
  double v560;
  double v561;
  double v562;
  _QWORD *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  char v567;
  int v568;
  double v569;
  double v570;
  double v571;
  double v572;
  double v573;
  double v574;
  uint64_t v575;
  double v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  double v581;
  uint64_t v582;
  double *v583;
  double v584;
  double TypographicBounds;
  double v586;
  double v587;
  double v588;
  double v589;
  void *v590;
  uint64_t v591;
  char v592;
  double v593;
  double v594;
  uint64_t v595;
  uint64_t v596;
  const __CTLine *v597;
  _BOOL4 IsNull;
  char *v599;
  double *v600;
  double v601;
  double v602;
  double v603;
  CGFloat v604;
  CGFloat v605;
  double v606;
  double v607;
  _QWORD *v608;
  double v609;
  CGFloat v610;
  double v611;
  CGFloat v612;
  double v613;
  CGFloat v614;
  CGFloat v615;
  double MaxX;
  double v617;
  double *v618;
  BOOL v619;
  double v620;
  double v621;
  BOOL v623;
  uint64_t v624;
  uint64_t v625;
  void *v626;
  uint64_t v627;
  uint64_t v628;
  _BYTE *v629;
  uint64_t v630;
  char v631;
  void *v632;
  void *v633;
  uint64_t v634;
  double v635;
  double v636;
  CGFloat v637;
  CGFloat v638;
  CGFloat v639;
  CGFloat y;
  CGFloat height;
  CGFloat width;
  uint64_t v643;
  uint64_t *v644;
  double v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int64_t v653;
  uint64_t v654;
  char *v655;
  uint64_t v656;
  uint64_t v657;
  char *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  double v663;
  double v664;
  double v665;
  double v666;
  uint64_t v667;
  double *v668;
  uint64_t v669;
  char *v670;
  uint64_t v671;
  uint64_t v672;
  char *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  double v679;
  char *v680;
  uint64_t v681;
  char *v682;
  double v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  char *v688;
  uint64_t v689;
  void *v690;
  uint64_t *v691;
  char *v692;
  void *v693;
  double v694;
  uint64_t v695;
  double v696;
  char *v697;
  uint64_t v698;
  char *v699;
  double v700;
  uint64_t v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t v704;
  char **v705;
  double v706;
  void *v707;
  uint64_t *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t *v712;
  __int128 v713;
  uint64_t v714;
  uint64_t *v715;
  char *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  char **v720;
  char *v721;
  char **v722;
  uint64_t v723;
  char **v724;
  char **v725;
  CGFloat v726;
  uint64_t v727;
  unint64_t v728;
  char *v729;
  char *v730;
  uint64_t v731;
  char *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  double MaxY;
  double MinX;
  double MinY;
  CGFloat x;
  double v742;
  CGFloat v743;
  double v744;
  CGFloat v745[2];
  CGFloat v746;
  double v747;
  double v748;
  double v749;
  float64x2_t v750;
  double v751;
  double v752;
  double v753;
  _OWORD v754[9];
  CGPoint v755;
  char v756;
  unint64_t v757;
  uint64_t v758;
  int v759;
  CGPoint v760;
  void *v761;
  __int128 v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  _BYTE v769[144];
  __int128 v770;
  char v771;
  char **v772;
  uint64_t v773;
  int v774;
  uint64_t v775;
  char *v776;
  uint64_t v777;
  _QWORD v778[18];
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  uint64_t v788;
  CFRange v789;
  CFRange v790;
  CFRange v791;
  CGRect v792;
  CGRect v793;
  CGRect v794;
  CGRect v795;
  CGRect v796;
  CGRect v797;
  CGRect v798;
  CGRect v799;
  CGRect v800;
  CGRect v801;
  CGRect v802;
  CGRect v803;
  CGRect v804;
  CGRect v805;

  v788 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v711 = v1;
  v698 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v673 = (char *)&v634 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v655 = (char *)&v634 - v4;
  MEMORY[0x24BDAC7A8](v5);
  v697 = (char *)&v634 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v680 = (char *)&v634 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v692 = (char *)&v634 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v688 = (char *)&v634 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v658 = (char *)&v634 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v699 = (char *)&v634 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v682 = (char *)&v634 - v18;
  v657 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v657);
  v656 = (uint64_t)&v634 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v652 = (uint64_t)&v634 - v21;
  v684 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v654 = *(_QWORD *)(v684 - 8);
  MEMORY[0x24BDAC7A8](v684);
  v668 = (double *)((char *)&v634 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v23);
  v672 = (uint64_t)&v634 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v685 = (uint64_t)&v634 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v660 = (uint64_t)&v634 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v659 = (uint64_t)&v634 - v30;
  v670 = v0;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout], (uint64_t)v778, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v778, (uint64_t)&v779, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = (_QWORD *)_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg((uint64_t *)&v779);
  if ((_DWORD)result == 1)
    return result;
  v754[6] = v785;
  v754[7] = v786;
  v754[8] = v787;
  v754[2] = v781;
  v754[3] = v782;
  v754[5] = v784;
  v754[4] = v783;
  v754[0] = v779;
  v754[1] = v780;
  v681 = v781;
  v32 = specialized Array._getCount()(v781);
  if (v32 < 0)
    goto LABEL_433;
  v34 = *MEMORY[0x24BDBF070];
  v33 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v35 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v36 = *(double *)(MEMORY[0x24BDBF070] + 24);
  if (!v32)
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v778, (uint64_t)v769, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined retain of TextRenderLayer.Layout((uint64_t)v769);
    goto LABEL_365;
  }
  v646 = v32;
  v644 = (uint64_t *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap];
  v643 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController;
  v648 = (uint64_t *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements];
  v649 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v778, (uint64_t)v769, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined retain of TextRenderLayer.Layout((uint64_t)v769);
  v37 = 0;
  v38 = 0;
  v39 = v654;
  v40 = v681;
  v41 = v681 + ((*(unsigned __int8 *)(v654 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v654 + 80));
  v637 = v36;
  v638 = v35;
  height = v36;
  width = v35;
  v635 = v34;
  v636 = v33;
  v639 = v34;
  y = v33;
  v645 = 0.0;
  v674 = v41;
  while (2)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v37, 1, v40);
    v671 = *(_QWORD *)(v39 + 72);
    v42 = v659;
    outlined init with copy of TypesettingLanguage(v41 + v671 * v37, v659, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of TypesettingLanguage(v42, v660, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      v44 = v38;
      if (EnumCaseMultiPayload == 1)
      {
        v45 = v652;
        outlined init with take of LocalizedStringKey.FormatArgument(v660, v652, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v647 = *(_QWORD *)(v45 + *(int *)(v657 + 28));
        outlined destroy of TypesettingConfiguration(v45, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      }
      else
      {
        v647 = *(_QWORD *)v660;
        outlined consume of Text.Layout.Line.Line(*(void **)(v660 + 24), *(_QWORD *)(v660 + 32), *(_BYTE *)(v660 + 40));
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v647 = *(_QWORD *)(v660 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44 = v38;
    }
    outlined destroy of TypesettingConfiguration(v659, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined release of TextRenderLayer.Layout?(v778, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
    specialized Collection.prefix(while:)(v37, v646, (uint64_t)v754, v647);
    v47 = v46;
    v49 = v48;
    outlined release of TextRenderLayer.Layout?(v778, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    v50 = *v644;
    v734 = v644[1];
    v51 = *(_QWORD *)&v670[v643];
    swift_beginAccess();
    v52 = v49;
    v53 = *(_QWORD *)(v51 + 112);
    v619 = v47 == v49;
    v54 = v674;
    v686 = v52;
    v737 = v50;
    v736 = v51;
    v735 = v53;
    v667 = v47;
    if (v619)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v663 = 0.0;
      v664 = 0.0;
      v665 = 0.0;
      v666 = 0.0;
      v55 = 0.0;
      goto LABEL_13;
    }
    if (v52 < v47)
      goto LABEL_438;
    v708 = (uint64_t *)(v53 + 40);
    v691 = (uint64_t *)(v53 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v663 = 0.0;
    v664 = 0.0;
    v334 = v47;
    v665 = 0.0;
    v666 = 0.0;
    v683 = 0.0;
    v679 = 0.0;
    v335 = v681;
    v336 = v686;
    while (2)
    {
      if (v334 >= v336)
        goto LABEL_422;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v334, 1, v335);
      v687 = v334;
      outlined init with copy of TypesettingLanguage(v54 + v334 * v671, v685, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v337 = swift_getEnumCaseMultiPayload();
      if (!v337)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_151;
      }
      if (v337 == 1)
      {
        v338 = v656;
        outlined init with take of LocalizedStringKey.FormatArgument(v685, v656, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v339 = (double *)(v338 + *(int *)(v657 + 36));
        v340 = *v339;
        v341 = v339[1];
        v342 = v339[2];
        outlined destroy of TypesettingConfiguration(v338, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v343 = v679;
        if (v679 <= v340)
          v343 = v340;
        v679 = v343;
        if (v665 > v341)
          v344 = v665;
        else
          v344 = v341;
        if (v663 > v342)
          v345 = v663;
        else
          v345 = v342;
        v346 = v683;
        if (v683 <= v340)
          v346 = v340;
        v683 = v346;
        v347 = v666;
        if (v666 <= v341)
          v347 = v341;
        v665 = v344;
        v666 = v347;
        v348 = v664;
        if (v664 <= v342)
          v348 = v342;
        v663 = v345;
        v664 = v348;
        goto LABEL_151;
      }
      v350 = *(void **)(v685 + 24);
      v349 = *(uint64_t **)(v685 + 32);
      v351 = *(unsigned __int8 *)(v685 + 40);
      v352 = *(_QWORD *)(v685 + 48);
      v677 = *(_QWORD *)(v685 + 56);
      v678 = v352;
      LODWORD(v669) = *(_DWORD *)(v685 + 64);
      v353 = *(_QWORD *)(v685 + 72);
      v675 = *(_QWORD *)(v685 + 80);
      v676 = v353;
      v354 = *(_QWORD *)(v685 + 88);
      v690 = (void *)specialized Array._getCount()(v354);
      if (!v690)
      {
        v522 = 0.0;
        v523 = 0.0;
        v356 = 0.0;
        goto LABEL_313;
      }
      swift_bridgeObjectRetain_n();
      outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v349, v351);
      v689 = v354 + 32;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      v355 = 0;
      v356 = 0.0;
      v700 = 0.0;
      v696 = 0.0;
      v707 = v350;
      v715 = v349;
      LODWORD(v716) = v351;
      v662 = v354;
      do
      {
        v366 = (char *)v355 + 1;
        if (__OFADD__(v355, 1))
          goto LABEL_415;
        v367 = (uint64_t *)(v689 + 88 * (_QWORD)v355);
        v709 = *v367;
        v368 = v367[1];
        v369 = (char **)v367[2];
        v370 = v367[4];
        v722 = (char **)v367[3];
        v704 = v367[5];
        v701 = v367[6];
        v371 = v367[8];
        v373 = v367[9];
        v372 = v367[10];
        v703 = v367[7];
        v724 = v369;
        v714 = v368;
        v717 = v370;
        v694 = v356;
        v693 = v366;
        v695 = v371;
        v702 = v373;
        v705 = (char **)v372;
        if (v703 >> 62)
        {
          if (v703 >> 62 == 1)
          {
            v374 = 0.0;
            v375 = v709;
            if (v709 == v368)
            {
              v714 = v709;
              v376 = 0.0;
              v377 = 0.0;
            }
            else
            {
              if (v368 < v709)
                goto LABEL_428;
              outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v349, (char)v716);
              v487 = v714;
              v377 = 0.0;
              v376 = 0.0;
              do
              {
                if (v375 >= v487)
                  goto LABEL_398;
                v492 = v44;
                if ((v716 & 1) != 0)
                {
                  outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v349, 1);
                  v493 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v350);
                  if (!v493)
                    goto LABEL_446;
                  v488 = v493;
                  outlined consume of Text.Layout.Line.Line(v350, (uint64_t)v349, 1);
                }
                else
                {
                  outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v349, 0);
                  outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v349, 0);

                  swift_release();
                  v488 = (const __CTLine *)v350;
                }
                v489 = v375 + 1;
                v490 = (id)_CTLineGetRunAtIndex(v488, v375);
                v760.y = 0.0;
                v760.x = 0.0;
                v745[0] = 0.0;
                v744 = 0.0;
                v743 = 0.0;
                v755.y = 0.0;
                v755.x = 0.0;
                v789.location = 0;
                v789.length = 1;
                CTRunGetPositions((CTRunRef)v490, v789, &v760);
                v790.location = 0;
                v790.length = 1;
                CTRunGetBaseAdvancesAndOrigins((CTRunRef)v490, v790, 0, &v755);
                v791.location = 0;
                v791.length = 0;
                CTRunGetTypographicBounds((CTRunRef)v490, v791, v745, &v744, &v743);

                swift_release();
                v491 = fabs(v744);
                if (v374 <= v745[0])
                  v374 = v745[0];
                if (v376 <= v491)
                  v376 = v491;
                if (v377 <= v743)
                  v377 = v743;
                v375 = v489;
                v487 = v714;
                v619 = v714 == v489;
                v44 = v492;
                v369 = v724;
                v349 = v715;
              }
              while (!v619);
              outlined consume of Text.Layout.Line.Line(v350, (uint64_t)v715, (char)v716);
            }
            goto LABEL_173;
          }
          v479 = v44;
          v480 = *v708;
          if (*(_QWORD *)(*v708 + 16))
          {
            Hasher.init(_seed:)();
            v481 = v709;
            Hasher._combine(_:)(v709);
            v482 = Hasher._finalize()();
            v483 = -1 << *(_BYTE *)(v480 + 32);
            v484 = v482 & ~v483;
            v485 = v480 + 56;
            if (((*(_QWORD *)(v480 + 56 + ((v484 >> 3) & 0xFFFFFFFFFFFFF8)) >> v484) & 1) == 0)
              goto LABEL_283;
            v486 = *(_QWORD *)(v480 + 48);
            v374 = 0.0;
            if (*(_QWORD *)(v486 + 8 * v484) == v481)
            {
              v376 = 0.0;
              v377 = 0.0;
              v44 = v479;
              v369 = v724;
LABEL_173:
              v357 = v709;
              v358 = v714;
              v359 = (uint64_t)v722;
              v360 = v717;
              v361 = v704;
              v362 = v701;
              v363 = v703;
              outlined consume of Text.Effect.Composition.Operation(v709, v714, v369, (uint64_t)v722, v717, v704, v701, v703);
              outlined consume of Text.Effect.Composition.Operation(v357, v358, v369, v359, v360, v361, v362, v363);
              v350 = v707;
              v349 = v715;
              goto LABEL_174;
            }
            v494 = ~v483;
            v495 = (v484 + 1) & v494;
            if (((*(_QWORD *)(v485 + ((v495 >> 3) & 0xFFFFFFFFFFFFF8)) >> v495) & 1) != 0)
            {
              v44 = v479;
              v369 = v724;
              if (*(_QWORD *)(v486 + 8 * v495) == v709)
              {
LABEL_292:
                v376 = 0.0;
                v377 = 0.0;
                goto LABEL_173;
              }
              while (1)
              {
                v495 = (v495 + 1) & v494;
                if (((*(_QWORD *)(v485 + ((v495 >> 3) & 0xFFFFFFFFFFFFF8)) >> v495) & 1) == 0)
                  break;
                if (*(_QWORD *)(v486 + 8 * v495) == v709)
                  goto LABEL_292;
              }
            }
            else
            {
LABEL_283:
              v44 = v479;
              v369 = v724;
            }
          }
          else
          {
            v44 = v479;
          }
          v496 = v691;
          swift_beginAccess();
          v497 = *v496;
          v498 = v715;
          if (*(_QWORD *)(v497 + 16))
          {
            v499 = specialized __RawDictionaryStorage.find<A>(_:)(v709);
            if ((v500 & 1) != 0)
            {
              v501 = v44;
              v502 = *(void **)(*(_QWORD *)(v497 + 56) + 8 * v499);
              swift_endAccess();
              outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v498, (char)v716);
              lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
              v503 = v502;
              RangeSet.init()();
              v504 = v722;
              if (v369 != v722)
              {
                v510 = v369;
                if ((uint64_t)v722 < (uint64_t)v369)
                  goto LABEL_439;
                while ((uint64_t)v510 < (uint64_t)v504)
                {
                  if ((v716 & 1) != 0)
                  {
                    v511 = v715;
                    outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v715, 1);
                    v512 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v350);
                    if (!v512)
                      goto LABEL_450;
                    v513 = v512;
                    outlined consume of Text.Layout.Line.Line(v350, (uint64_t)v511, 1);
                  }
                  else
                  {
                    v514 = v715;
                    outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v715, 0);
                    outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v514, 0);

                    swift_release();
                    v513 = (const __CTLine *)v350;
                  }
                  v515 = (id)_CTLineGetRunAtIndex(v513, (CFIndex)v510);
                  StringRange = CTRunGetStringRange((CTRunRef)v515);

                  swift_release();
                  v517 = StringRange.location + StringRange.length;
                  if (__OFADD__(StringRange.location, StringRange.length))
                    goto LABEL_412;
                  if (v517 < StringRange.location)
                    goto LABEL_413;
                  *(_QWORD *)&v755.x = StringRange.location;
                  *(_QWORD *)&v755.y = StringRange.location + StringRange.length;
                  if (__OFSUB__(v517, StringRange.location))
                    goto LABEL_414;
                  if (v517 != StringRange.location)
                  {
                    v518 = (void (*)(CGPoint *, _QWORD))RangeSet._ranges.modify();
                    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
                    RangeSet.Ranges._insert(contentsOf:)();
                    v518(&v760, 0);
                  }
                  v510 = (char **)((char *)v510 + 1);
                  v504 = v722;
                  v505 = v709;
                  v369 = v724;
                  v350 = v707;
                  if (v722 == v510)
                    goto LABEL_288;
                }
LABEL_411:
                __break(1u);
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
LABEL_414:
                __break(1u);
LABEL_415:
                __break(1u);
LABEL_416:
                __break(1u);
                goto LABEL_417;
              }
              v505 = v709;
LABEL_288:
              (*(void (**)(char *, char *, uint64_t))(v698 + 32))(v658, v688, v711);
              v506 = *(_QWORD *)(v737 + 16);
              if (v506)
              {
                v507 = v737;
                v508 = specialized __RawDictionaryStorage.find<A>(_:)(v505);
                if ((v509 & 1) != 0)
                  v506 = *(_QWORD *)(*(_QWORD *)(v507 + 56) + 8 * v508);
                else
                  v506 = 0;
                v505 = v709;
              }
              if (__OFADD__(v506, v714))
                goto LABEL_434;
              v519 = v658;
              v374 = (*(double (**)(uint64_t, uint64_t, char *))((*MEMORY[0x24BEE4EA0] & *v503) + 0xE8))(v505, v506 + v714, v658);
              v376 = v520;
              v377 = v521;

              (*(void (**)(char *, uint64_t))(v698 + 8))(v519, v711);
              outlined consume of Text.Layout.Line.Line(v350, (uint64_t)v715, (char)v716);
              v44 = v501;
              goto LABEL_173;
            }
          }
          swift_endAccess();
          v374 = 0.0;
          goto LABEL_292;
        }
        v378 = v372;
        v712 = (uint64_t *)specialized Array._getCount()(v372);
        if (v712)
        {
          v379 = v709;
          v380 = v714;
          v381 = v701;
          outlined copy of Text.Effect.Composition.Operation(v709, v714, v369, (uint64_t)v722, v370, v704, v701, v703);
          swift_bridgeObjectRetain();
          v382 = v379;
          v137 = v722;
          outlined copy of Text.Effect.Composition.Operation(v382, v380, v369, (uint64_t)v722, v370, v704, v381, v703);
          swift_bridgeObjectRetain();
          outlined copy of Text.Layout.Line.Line(v707, (uint64_t)v715, (char)v716);
          v710 = v378 + 32;
          swift_beginAccess();
          v383 = 0;
          v377 = 0.0;
          v376 = 0.0;
          v374 = 0.0;
          while (1)
          {
            v392 = (uint64_t *)((char *)v383 + 1);
            if (__OFADD__(v383, 1))
            {
              __break(1u);
LABEL_398:
              __break(1u);
LABEL_399:
              __break(1u);
              goto LABEL_400;
            }
            v393 = (uint64_t *)(v710 + 88 * (_QWORD)v383);
            v394 = *v393;
            v720 = (char **)v393[1];
            v395 = v393[3];
            v730 = (char *)v393[2];
            v397 = v393[4];
            v396 = v393[5];
            v399 = v393[6];
            v398 = *((unint64_t *)v393 + 7);
            v400 = v393[9];
            v401 = (char *)v393[10];
            v718 = v393[8];
            v719 = v400;
            v721 = v401;
            if (v398 >> 62)
            {
              v729 = (char *)v395;
              v728 = v396;
              if (v398 >> 62 == 1)
              {
                if ((char **)v394 != v720)
                {
                  if ((uint64_t)v720 < v394)
                    goto LABEL_416;
                  v725 = (char **)v399;
                  v726 = *(double *)&v398;
                  *(_QWORD *)&v713 = v392;
                  v402 = v717;
                  outlined copy of Text.Layout.Line.Line(v369, (uint64_t)v137, v717 & 1);
                  v391 = 0.0;
                  *((_QWORD *)&v713 + 1) = v394;
                  v403 = v394;
                  v390 = 0.0;
                  v388 = 0.0;
                  v404 = (uint64_t)v720;
                  do
                  {
                    if (v403 >= v404)
                    {
                      __break(1u);
LABEL_383:
                      __break(1u);
                      goto LABEL_384;
                    }
                    v408 = v44;
                    if ((v402 & 1) != 0)
                    {
                      outlined copy of Text.Layout.Line.Line(v369, (uint64_t)v137, 1);
                      v409 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v369);
                      if (!v409)
                        goto LABEL_441;
                      v405 = v409;
                      outlined consume of Text.Layout.Line.Line(v369, (uint64_t)v137, 1);
                    }
                    else
                    {
                      outlined copy of Text.Layout.Line.Line(v369, (uint64_t)v137, 0);
                      outlined copy of Text.Layout.Line.Line(v369, (uint64_t)v137, 0);

                      swift_release();
                      v405 = (const __CTLine *)v369;
                    }
                    v406 = v403 + 1;
                    v407 = (id)_CTLineGetRunAtIndex(v405, v403);
                    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v407, (CFRange)0, &v746);

                    swift_release();
                    if (v388 <= v747)
                      v388 = v747;
                    if (v390 <= v748)
                      v390 = v748;
                    if (v391 <= v749)
                      v391 = v749;
                    v403 = v406;
                    v619 = v404 == v406;
                    v44 = v408;
                    v369 = v724;
                    v137 = v722;
                  }
                  while (!v619);
                  outlined consume of Text.Layout.Line.Line(v724, (uint64_t)v722, v402 & 1);
                  v451 = v404;
                  v452 = v730;
                  v453 = v728;
                  v384 = (uint64_t)v725;
                  v385 = *(_QWORD *)&v726;
                  outlined consume of Text.Effect.Composition.Operation(*((uint64_t *)&v713 + 1), v451, v730, (uint64_t)v729, v397, v728, (uint64_t)v725, *(unint64_t *)&v726);
                  v389 = (uint64_t)v720;
                  v386 = v452;
                  v387 = v453;
                  v394 = *((_QWORD *)&v713 + 1);
                  v392 = (uint64_t *)v713;
                  v395 = (uint64_t)v729;
                  goto LABEL_190;
                }
                v384 = v399;
                v385 = v398;
                outlined consume of Text.Effect.Composition.Operation(v394, v394, v730, v395, v397, v728, v399, v398);
                v386 = v730;
                v387 = v728;
                v388 = 0.0;
                v389 = v394;
                goto LABEL_189;
              }
              v725 = (char **)v399;
              v726 = *(double *)&v398;
              if (specialized Set.contains(_:)(v394, *v708))
              {
                v384 = (uint64_t)v725;
                v385 = *(_QWORD *)&v726;
                outlined consume of Text.Effect.Composition.Operation(v394, (uint64_t)v720, v730, v395, v397, v728, (uint64_t)v725, *(unint64_t *)&v726);
                v389 = (uint64_t)v720;
                v386 = v730;
                v387 = v728;
                v388 = 0.0;
LABEL_189:
                v390 = 0.0;
                v391 = 0.0;
                goto LABEL_190;
              }
              v434 = v394;
              *(_QWORD *)&v713 = v392;
              v435 = v691;
              swift_beginAccess();
              v436 = *v435;
              if (!*(_QWORD *)(v436 + 16))
              {
                swift_endAccess();
                *((_QWORD *)&v713 + 1) = v394;
                v454 = v394;
                v455 = v730;
                v456 = v728;
                v384 = (uint64_t)v725;
                v385 = *(_QWORD *)&v726;
                outlined consume of Text.Effect.Composition.Operation(v454, (uint64_t)v720, v730, v395, v397, v728, (uint64_t)v725, *(unint64_t *)&v726);
                v389 = (uint64_t)v720;
                v386 = v455;
                v387 = v456;
                v388 = 0.0;
                v390 = 0.0;
                v391 = 0.0;
LABEL_256:
                v394 = *((_QWORD *)&v713 + 1);
                v392 = (uint64_t *)v713;
                goto LABEL_190;
              }
              v437 = v394;
              v438 = specialized __RawDictionaryStorage.find<A>(_:)(v394);
              v723 = v397;
              if ((v439 & 1) != 0)
              {
                v727 = v44;
                v440 = v717 & 1;
                v441 = *(_QWORD *)(v436 + 56);
                v442 = (uint64_t)v137;
                v443 = *(void **)(v441 + 8 * v438);
                swift_endAccess();
                outlined copy of Text.Layout.Line.Line(v369, v442, v440);
                lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
                v742 = COERCE_DOUBLE(v443);
                RangeSet.init()();
                v444 = v729;
                v445 = v730;
                if (v730 != v729)
                {
                  v460 = v730;
                  v461 = (uint64_t)v722;
                  v446 = (uint64_t)v720;
                  if ((uint64_t)v729 < (uint64_t)v730)
                    goto LABEL_429;
                  while ((uint64_t)v460 < (uint64_t)v444)
                  {
                    if ((v717 & 1) != 0)
                    {
                      outlined copy of Text.Layout.Line.Line(v369, v461, 1);
                      v462 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v369);
                      if (!v462)
                        goto LABEL_447;
                      v463 = v462;
                      outlined consume of Text.Layout.Line.Line(v369, v461, 1);
                    }
                    else
                    {
                      outlined copy of Text.Layout.Line.Line(v369, v461, 0);
                      outlined copy of Text.Layout.Line.Line(v369, v461, 0);

                      swift_release();
                      v463 = (const __CTLine *)v369;
                    }
                    v464 = (id)_CTLineGetRunAtIndex(v463, (CFIndex)v460);
                    v465 = CTRunGetStringRange((CTRunRef)v464);

                    swift_release();
                    v466 = v465.location + v465.length;
                    if (__OFADD__(v465.location, v465.length))
                      goto LABEL_401;
                    v444 = v729;
                    if (v466 < v465.location)
                      goto LABEL_402;
                    *(_QWORD *)&v755.x = v465.location;
                    *(_QWORD *)&v755.y = v465.location + v465.length;
                    if (__OFSUB__(v466, v465.location))
                      goto LABEL_403;
                    if (v466 != v465.location)
                    {
                      v467 = (void (*)(CGPoint *, _QWORD))RangeSet._ranges.modify();
                      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
                      RangeSet.Ranges._insert(contentsOf:)();
                      v467(&v760, 0);
                    }
                    ++v460;
                    v369 = v724;
                    v461 = (uint64_t)v722;
                    if (v444 == v460)
                      goto LABEL_233;
                  }
LABEL_400:
                  __break(1u);
LABEL_401:
                  __break(1u);
LABEL_402:
                  __break(1u);
LABEL_403:
                  __break(1u);
                  goto LABEL_404;
                }
                v446 = (uint64_t)v720;
LABEL_233:
                (*(void (**)(char *, char *, uint64_t))(v698 + 32))(v682, v699, v711);
                v447 = *(_QWORD *)(v737 + 16);
                LOBYTE(v397) = v723;
                if (v447)
                {
                  v448 = v737;
                  v449 = specialized __RawDictionaryStorage.find<A>(_:)(v434);
                  if ((v450 & 1) != 0)
                    v447 = *(_QWORD *)(*(_QWORD *)(v448 + 56) + 8 * v449);
                  else
                    v447 = 0;
                }
                v468 = v447 + v446;
                if (__OFADD__(v447, v446))
                  goto LABEL_423;
                v469 = v717 & 1;
                v470 = v742;
                v471 = *(double (**)(uint64_t, uint64_t, char *))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)&v742)
                                                                         + 0xE8);
                *((_QWORD *)&v713 + 1) = v434;
                v472 = v682;
                v388 = v471(v434, v468, v682);
                v390 = v473;
                v391 = v474;

                v475 = v472;
                v137 = v722;
                (*(void (**)(char *, uint64_t))(v698 + 8))(v475, v711);
                outlined consume of Text.Layout.Line.Line(v369, (uint64_t)v137, v469);
                v476 = v446;
                v477 = v434;
                v478 = v728;
                v384 = (uint64_t)v725;
                v385 = *(_QWORD *)&v726;
                outlined consume of Text.Effect.Composition.Operation(v477, v476, v445, (uint64_t)v729, v397, v728, (uint64_t)v725, *(unint64_t *)&v726);
                v389 = (uint64_t)v720;
                v386 = v445;
                v387 = v478;
                v44 = v727;
                v395 = (uint64_t)v729;
                goto LABEL_256;
              }
              swift_endAccess();
              v457 = v394;
              v458 = v730;
              v397 = (uint64_t)v729;
              v459 = v728;
              v384 = (uint64_t)v725;
              v385 = *(_QWORD *)&v726;
              outlined consume of Text.Effect.Composition.Operation(v457, (uint64_t)v720, v730, (uint64_t)v729, v723, v728, (uint64_t)v725, *(unint64_t *)&v726);
              v389 = (uint64_t)v720;
              v386 = v458;
              v387 = v459;
              v388 = 0.0;
              v390 = 0.0;
              v391 = 0.0;
              v392 = (uint64_t *)v713;
              v394 = v437;
              v395 = v397;
              LOBYTE(v397) = v723;
            }
            else
            {
              v725 = (char **)v399;
              v410 = v396;
              v726 = *(double *)&v398;
              *(double *)&v411 = COERCE_DOUBLE(specialized Array._getCount()(v401));
              if (*(double *)&v411 == 0.0)
              {
                v388 = 0.0;
                v390 = 0.0;
                v391 = 0.0;
                goto LABEL_191;
              }
              if (v411 < 1)
              {
                __break(1u);
                goto LABEL_411;
              }
              *(_QWORD *)&v713 = v392;
              v706 = v374;
              v727 = v44;
              v412 = v717 & 1;
              v413 = v721;
              *((_QWORD *)&v713 + 1) = v394;
              v742 = *(double *)&v411;
              v728 = v410;
              outlined copy of Text.Effect.Composition.Operation(v394, (uint64_t)v720, v730, v395, v397, v410, (uint64_t)v725, *(unint64_t *)&v726);
              swift_bridgeObjectRetain();
              outlined copy of Text.Layout.Line.Line(v369, (uint64_t)v137, v412);
              v414 = (uint64_t *)(v413 + 56);
              v391 = 0.0;
              v390 = 0.0;
              v388 = 0.0;
              v729 = (char *)v395;
              v723 = v397;
              do
              {
                v415 = v397 & 1;
                v416 = *((double *)v414 - 2);
                v417 = *((void **)v414 - 1);
                v418 = *v414;
                v419 = v414[1];
                v420 = v414[2];
                v421 = v414[3];
                v397 = v414[4];
                v422 = v414[5];
                v423 = v414[6];
                v424 = v414[7];
                *(_QWORD *)&v760.x = *(v414 - 3);
                x = v760.x;
                v760.y = v416;
                MinY = v416;
                v761 = v417;
                MinX = *(double *)&v417;
                *(_QWORD *)&v762 = v418;
                MaxY = *(double *)&v418;
                *((_QWORD *)&v762 + 1) = v419;
                v733 = v419;
                v763 = v420;
                v732 = (char *)v420;
                v764 = v421;
                v731 = v421;
                v765 = v397;
                v766 = v422;
                v767 = v423;
                v768 = v424;
                v425 = v730;
                *(_QWORD *)&v755.x = v730;
                v426 = (uint64_t)v729;
                *(_QWORD *)&v755.y = v729;
                v756 = v415;
                v757 = v728;
                v758 = (uint64_t)v725;
                v759 = LODWORD(v726);
                outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&v760.x, *(uint64_t *)&v416, v417, v418, v419, v420, v421, v397);
                outlined copy of Text.Layout.Line.Line(v425, v426, v415);
                v427 = Text.Effect.Composition.Operation.lineBreakingMetrics(line:context:)((uint64_t)&v755, v737, v734, v735, v736);
                v429 = v428;
                v431 = v430;
                outlined consume of Text.Layout.Line.Line(v425, v426, v415);
                v432 = v397;
                LOBYTE(v397) = v723;
                outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&x, *(uint64_t *)&MinY, *(void **)&MinX, *(uint64_t *)&MaxY, v733, (uint64_t)v732, v731, v432);
                if (v388 <= v427)
                  v388 = v427;
                if (v390 <= v429)
                  v390 = v429;
                if (v391 <= v431)
                  v391 = v431;
                v414 += 11;
                --*(_QWORD *)&v742;
              }
              while (v742 != 0.0);
              v433 = v717 & 1;
              swift_bridgeObjectRelease();
              v369 = v724;
              v137 = v722;
              outlined consume of Text.Layout.Line.Line(v724, (uint64_t)v722, v433);
              v44 = v727;
              v374 = v706;
              v394 = *((_QWORD *)&v713 + 1);
              v392 = (uint64_t *)v713;
              v386 = v730;
              v395 = (uint64_t)v729;
              v387 = v728;
              v389 = (uint64_t)v720;
              v384 = (uint64_t)v725;
              v385 = *(_QWORD *)&v726;
            }
LABEL_190:
            outlined consume of Text.Effect.Composition.Operation(v394, v389, v386, v395, v397, v387, v384, v385);
LABEL_191:
            if (v374 <= v388)
              v374 = v388;
            if (v376 <= v390)
              v376 = v390;
            if (v377 <= v391)
              v377 = v391;
            v383 = v392;
            if (v392 == v712)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of Text.Layout.Line.Line(v707, (uint64_t)v715, (char)v716);
              goto LABEL_173;
            }
          }
        }
        v374 = 0.0;
        v376 = 0.0;
        v377 = 0.0;
LABEL_174:
        v364 = v696;
        if (v696 <= v374)
          v364 = v374;
        v696 = v364;
        v365 = v700;
        if (v700 <= v376)
          v365 = v376;
        v700 = v365;
        v356 = v694;
        if (v694 <= v377)
          v356 = v377;
        v355 = v693;
        LOBYTE(v351) = (_BYTE)v716;
      }
      while (v693 != v690);
      v354 = v662;
      swift_bridgeObjectRelease_n();
      outlined consume of Text.Layout.Line.Line(v350, (uint64_t)v349, v351);
      swift_bridgeObjectRelease();
      v523 = v700;
      v522 = v696;
LABEL_313:
      v524 = v679;
      if (v679 <= v522)
        v524 = v522;
      v679 = v524;
      v525 = v665;
      if (v665 <= v523)
        v525 = v523;
      v665 = v525;
      v526 = v663;
      if (v663 <= v356)
        v526 = v356;
      v663 = v526;
      *(_QWORD *)&v760.x = v350;
      *(_QWORD *)&v760.y = v349;
      LOBYTE(v761) = v351;
      *(_QWORD *)&v762 = v678;
      *((_QWORD *)&v762 + 1) = v677;
      LODWORD(v763) = v669;
      v764 = v676;
      v765 = v675;
      v766 = v354;
      v755.x = *(CGFloat *)&v670[v649];
      outlined copy of Text.Layout.Line.Line(v350, (uint64_t)v349, v351);
      swift_bridgeObjectRetain();
      v527 = Text.Effect.Composition.metrics(at:context:)(&v755.x, v737, v734, v735, v736);
      v529 = v528;
      v531 = v530;
      outlined consume of Text.Layout.Line.Line(v350, (uint64_t)v349, v351);
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v350, (uint64_t)v349, v351);
      swift_bridgeObjectRelease();
      v532 = v683;
      if (v683 <= v527)
        v532 = v527;
      v683 = v532;
      v533 = v666;
      if (v666 <= v529)
        v533 = v529;
      v666 = v533;
      v534 = v664;
      if (v664 <= v531)
        v534 = v531;
      v664 = v534;
LABEL_151:
      v336 = v686;
      v334 = v687 + 1;
      v335 = v681;
      v54 = v674;
      if (v687 + 1 != v686)
        continue;
      break;
    }
    v55 = v683 - v679;
LABEL_13:
    result = objc_msgSend(v670, sel_sublayers);
    if (!result)
    {
      __break(1u);
      goto LABEL_453;
    }
    v56 = result;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    v650 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v57 = v686 - v667;
    if (__OFSUB__(v686, v667))
      goto LABEL_435;
    v58 = v645 + v55;
    v653 = v686 - v667;
    if (!v57)
    {
      v332 = specialized static Array._allocateUninitialized(_:)(0);
      v67 = 0.0;
      v329 = v686;
      v330 = v667;
      if (v667 == v686)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_350;
      }
      v331 = v668;
      goto LABEL_329;
    }
    *(_QWORD *)&v745[0] = protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance ViewResponder();
    specialized ContiguousArray.reserveCapacity(_:)(v57);
    if (v57 < 0)
      goto LABEL_440;
    v59 = v57;
    v60 = 0;
    v715 = (uint64_t *)(v735 + 40);
    *(_QWORD *)&v706 = v735 + 24;
    v61 = v686;
    if (v667 > v686)
      v61 = v667;
    v651 = v61 - v667;
    v62 = 0.0;
    v63 = v667;
LABEL_20:
    if (v60 == v59)
      goto LABEL_425;
    v662 = v60;
    v64 = v63;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v63, 1, v681);
    v661 = v64;
    outlined init with copy of TypesettingLanguage(v674 + v64 * v671, v672, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v65 = swift_getEnumCaseMultiPayload();
    if (!v65)
    {
      v66 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_25:
      v67 = v62;
LABEL_142:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v326 = *(_QWORD *)(*(_QWORD *)&v745[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v326);
      v327 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v326, v62, v58);
      _ViewInputs.base.modify(v327, v328);
      v329 = v686;
      v330 = v667;
      if (v686 < v667)
        goto LABEL_426;
      if (v662 == v651)
        goto LABEL_427;
      v60 = v662 + 1;
      v63 = v661 + 1;
      v62 = v67;
      v59 = v653;
      v331 = v668;
      v44 = v66;
      if (v662 + 1 == v653)
      {
        v332 = *(_QWORD *)&v745[0];
        if (v667 == v686)
        {
          v333 = v653;
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_release();
          if (v333 == 1)
            goto LABEL_453;
LABEL_350:
          v564 = v779;
          v565 = v647;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v647, 1, v779);
          v566 = v564 + 48 * v565;
          v567 = *(_BYTE *)(v566 + 48);
          v568 = *(_DWORD *)(v566 + 72);
          v760 = *(CGPoint *)(v566 + 32);
          LOBYTE(v761) = v567;
          v762 = *(_OWORD *)(v566 + 56);
          LODWORD(v763) = v568;
          Text.Layout.Line.typographicBounds.getter(&v750);
          v569 = v750.f64[1] - v752;
          v570 = v752 + v753;
          v571 = v750.f64[0] - v67 * *((double *)&v780 + 1);
          v572 = v67 + v751;
LABEL_351:
          v38 = v44;
          v804.origin.y = v645 + v569;
          v573 = v666 - v665 + v58;
          v804.size.height = v573 - v645 + v570;
          v792.origin.x = v639;
          v792.origin.y = y;
          v792.size.height = height;
          v792.size.width = width;
          v804.origin.x = v571;
          v804.size.width = v572;
          v793 = CGRectUnion(v792, v804);
          v639 = v793.origin.x;
          y = v793.origin.y;
          height = v793.size.height;
          width = v793.size.width;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          v37 = v686;
          v39 = v654;
          if (v646 < v686)
            goto LABEL_442;
          v645 = v664 - v663 + v573;
          v40 = v681;
          v41 = v674;
          if (v686 == v646)
            goto LABEL_409;
          continue;
        }
LABEL_329:
        if (v329 < v330)
          goto LABEL_444;
        if (v330 >= v329)
          goto LABEL_445;
        v742 = COERCE_DOUBLE(specialized Array._getCount()(v332));
        if (v742 == 0.0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = (_QWORD *)v667;
          if (v653 != 1)
            goto LABEL_350;
LABEL_348:
          v563 = result;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(result, 1, v681);
          outlined init with copy of TypesettingLanguage(v674 + (_QWORD)v563 * v671, (uint64_t)v331, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          if (swift_getEnumCaseMultiPayload())
          {
            outlined destroy of TypesettingConfiguration((uint64_t)v331, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            goto LABEL_350;
          }
          v574 = v331[1];
          v742 = *v331;
          if (specialized Array._getCount()(*(_QWORD *)&v742))
          {
            x = v58;
            v575 = v44;
            v576 = v742;
            v577 = specialized Array._getCount()(*(_QWORD *)&v742);
            v578 = specialized Array._getCount()(*(_QWORD *)&v576);
            if (v578 < 1)
              goto LABEL_449;
            v579 = v578;
            v580 = v577 & ~(v577 >> 63);
            v581 = v742;
            swift_bridgeObjectRetain();
            MinY = v574;
            swift_bridgeObjectRetain();
            v582 = 0;
            v583 = (double *)(*(_QWORD *)&v581 + 64);
            v571 = v635;
            v569 = v636;
            v570 = v637;
            v572 = v638;
            v44 = v575;
            do
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v582, 1, *(_QWORD *)&v742);
              if (v580 == v582)
                goto LABEL_437;
              v590 = (void *)*((_QWORD *)v583 - 4);
              v591 = *((_QWORD *)v583 - 3);
              v592 = *((_BYTE *)v583 - 16);
              v593 = *(v583 - 1);
              v594 = *v583;
              if ((v592 & 1) != 0)
              {
                outlined copy of Text.Layout.Line.Line(v590, v591, 1);
                objc_msgSend(v590, sel_typographicBounds);
                TypographicBounds = v584;
                v587 = v586;
                objc_msgSend(v590, sel_glyphOrigin);
                v589 = v587 - v588;
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(v590, v591, 0);
                outlined copy of Text.Layout.Line.Line(v590, v591, 0);
                v595 = v580;
                v596 = v44;
                v597 = v590;
                v760.x = 0.0;
                v755.x = 0.0;
                v745[0] = 0.0;
                TypographicBounds = CTLineGetTypographicBounds(v597, &v760.x, &v755.x, v745);

                v44 = v596;
                v580 = v595;
                outlined consume of Text.Layout.Line.Line(v590, v591, 0);
                v588 = v760.x;
                v589 = v755.x;
              }
              ++v582;
              v805.origin.x = v593 + 0.0;
              v805.origin.y = v594 + 0.0 - v588;
              v805.size.height = v589 + v588;
              v794.origin.x = v571;
              v794.origin.y = v569;
              v794.size.width = v572;
              v794.size.height = v570;
              v805.size.width = TypographicBounds;
              v795 = CGRectUnion(v794, v805);
              v571 = v795.origin.x;
              v569 = v795.origin.y;
              v572 = v795.size.width;
              v570 = v795.size.height;
              outlined consume of Text.Layout.Line.Line(v590, v591, v592);
              v583 += 6;
            }
            while (v579 != v582);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            v58 = x;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v570 = v637;
            v572 = v638;
            v571 = v635;
            v569 = v636;
          }
          goto LABEL_351;
        }
        v535 = v58;
        v536 = v67 * *((double *)&v780 + 1);
        v537 = v650;
        *(_QWORD *)&x = v650 & 0xC000000000000001;
        v732 = (char *)v332;
        *(_QWORD *)&MinY = v332 + 32;
        swift_beginAccess();
        v538 = 0;
        v539 = 0;
        v540 = v667;
        *(_QWORD *)&MinX = ~v667 + v686;
        v734 = v667 + 1;
        *(_QWORD *)&MaxY = 16 * v667;
        v733 = v537 + 8 * v667 + 32;
        while (1)
        {
          v541 = (char *)v539 + 1;
          if (__OFADD__(v539, 1))
            goto LABEL_431;
          v727 = v44;
          v542 = (unint64_t)v539 + v540;
          v543 = *(double *)(*(_QWORD *)&MinY + v538 + 8);
          v544 = x;
          v545 = *(double *)(*(_QWORD *)&MinY + v538);
          v546 = v648;
          v547 = *v648;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)((char *)v539 + v540, 1, *v648);
          v548 = *(_QWORD *)&MaxY + v538;
          v549 = *(double *)(v547 + *(_QWORD *)&MaxY + v538 + 32);
          v550 = *(double *)(v547 + *(_QWORD *)&MaxY + v538 + 40);
          v551 = v545 - v536;
          swift_beginAccess();
          specialized Array._makeMutableAndUnique()();
          v552 = *v546;
          v553 = specialized Array._checkSubscript_mutating(_:)(v542, *v546);
          v554 = v552 + v548;
          *(double *)(v554 + 32) = v551;
          *(double *)(v554 + 40) = v543;
          _ViewInputs.base.modify(v553, v555);
          swift_endAccess();
          v556 = v650;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v542, *(_QWORD *)&v544 == 0, v650);
          v557 = v544 == 0.0 ? *(id *)(v733 + 8 * (_QWORD)v539) : (id)MEMORY[0x23B7C6D9C](v542, v556);
          v558 = v557;
          objc_msgSend(v557, sel_frame);
          v561 = v551 + v559 - v549;
          v562 = v543 + v560 - v550;
          objc_msgSend(v558, sel_frame);
          objc_msgSend(v558, sel_setFrame_, v561, v562);

          v44 = v727;
          if (*(void **)&MinX == v539)
            break;
          v540 = v667;
          v331 = v668;
          if ((uint64_t)v539 + v734 < v667 || (uint64_t)v539 + v734 >= v686)
            goto LABEL_432;
          v539 = (char *)v539 + 1;
          v538 += 16;
          if (v541 == *(_QWORD **)&v742)
            goto LABEL_346;
        }
        v331 = v668;
LABEL_346:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v58 = v535;
        if (v653 != 1)
          goto LABEL_350;
        result = (_QWORD *)v667;
        if (v667 != v686)
          goto LABEL_348;
LABEL_453:
        __break(1u);
        return result;
      }
      goto LABEL_20;
    }
    break;
  }
  if (v65 == 1)
  {
    v66 = v44;
    outlined destroy of TypesettingConfiguration(v672, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    goto LABEL_25;
  }
  v68 = *(void **)(v672 + 24);
  v69 = *(_QWORD *)(v672 + 32);
  v70 = *(unsigned __int8 *)(v672 + 40);
  v71 = *(_QWORD *)(v672 + 88);
  v72 = *(double *)&v670[v649];
  v677 = specialized Array._getCount()(v71);
  if (!v677)
  {
    v74 = 0.0;
LABEL_141:
    v66 = v44;
    outlined consume of Text.Layout.Line.Line(v68, v69, v70);
    swift_bridgeObjectRelease();
    v67 = v62 + v74;
    goto LABEL_142;
  }
  swift_bridgeObjectRetain_n();
  v693 = v68;
  v691 = (uint64_t *)v69;
  LODWORD(v690) = v70;
  outlined copy of Text.Layout.Line.Line(v68, v69, v70);
  v676 = v71 + 32;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v73 = 0;
  v74 = 0.0;
  v678 = v71;
  while (2)
  {
    v81 = v73 + 1;
    if (__OFADD__(v73, 1))
      goto LABEL_421;
    v82 = (uint64_t *)(v676 + 88 * v73);
    v84 = *v82;
    v83 = v82[1];
    v708 = (uint64_t *)v82[2];
    v712 = (uint64_t *)v82[3];
    v85 = v82[5];
    v710 = v82[4];
    v87 = v82[6];
    v86 = *((double *)v82 + 7);
    v89 = v82[8];
    v88 = v82[9];
    v90 = v82[10];
    v695 = v81;
    v696 = v86;
    if (*(_QWORD *)&v86 >> 62)
    {
      v694 = *(double *)&v87;
      if (*(_QWORD *)&v86 >> 62 == 1)
      {
        v75 = v708;
        v689 = v89;
        v76 = (uint64_t)v712;
        v77 = v710;
        v78 = v87;
        v683 = *(double *)&v85;
        v79 = *(_QWORD *)&v696;
        outlined consume of Text.Effect.Composition.Operation(v84, v83, v708, (uint64_t)v712, v710, v85, v78, *(unint64_t *)&v696);
        outlined consume of Text.Effect.Composition.Operation(v84, v83, v75, v76, v77, *(uint64_t *)&v683, *(uint64_t *)&v694, v79);
        v80 = 0.0;
        goto LABEL_29;
      }
      v91 = v44;
      v92 = *v715;
      v93 = *(_QWORD *)(*v715 + 16);
      v679 = *(double *)&v83;
      v687 = v84;
      v675 = v90;
      if (v93
        && (Hasher.init(_seed:)(),
            Hasher._combine(_:)(v84),
            v94 = Hasher._finalize()(),
            v95 = -1 << *(_BYTE *)(v92 + 32),
            v96 = v94 & ~v95,
            v97 = v92 + 56,
            ((*(_QWORD *)(v92 + 56 + ((v96 >> 3) & 0xFFFFFFFFFFFFF8)) >> v96) & 1) != 0))
      {
        v98 = *(_QWORD *)(v92 + 48);
        if (*(_QWORD *)(v98 + 8 * v96) == v84)
        {
          v99 = v84;
          v100 = v83;
          v101 = v708;
          v669 = v88;
          v102 = (uint64_t)v712;
          v103 = v710;
          v104 = *(_QWORD *)&v694;
          v105 = *(_QWORD *)&v696;
          outlined consume of Text.Effect.Composition.Operation(v99, v100, v708, (uint64_t)v712, v710, v85, *(uint64_t *)&v694, *(unint64_t *)&v696);
          outlined consume of Text.Effect.Composition.Operation(v687, *(uint64_t *)&v679, v101, v102, v103, v85, v104, v105);
          v80 = 0.0;
          v44 = v91;
          goto LABEL_29;
        }
        v303 = ~v95;
        v304 = (v96 + 1) & v303;
        v44 = v91;
        if (((*(_QWORD *)(v97 + ((v304 >> 3) & 0xFFFFFFFFFFFFF8)) >> v304) & 1) != 0)
        {
          v273 = *(_QWORD *)&v694;
          if (*(_QWORD *)(v98 + 8 * v304) == v84)
            goto LABEL_138;
          v305 = (v304 + 1) & v303;
          if (((*(_QWORD *)(v97 + ((v305 >> 3) & 0xFFFFFFFFFFFFF8)) >> v305) & 1) != 0)
          {
            while (*(_QWORD *)(v98 + 8 * v305) != v84)
            {
              v305 = (v305 + 1) & v303;
              if (((*(_QWORD *)(v97 + ((v305 >> 3) & 0xFFFFFFFFFFFFF8)) >> v305) & 1) == 0)
                goto LABEL_105;
            }
LABEL_138:
            v322 = v708;
            v689 = v89;
            v323 = (uint64_t)v712;
            v669 = v88;
            v324 = v710;
            v683 = *(double *)&v85;
            v325 = *(_QWORD *)&v696;
            outlined consume of Text.Effect.Composition.Operation(v84, v83, v708, (uint64_t)v712, v710, v85, *(uint64_t *)&v694, *(unint64_t *)&v696);
            outlined consume of Text.Effect.Composition.Operation(v84, v83, v322, v323, v324, *(uint64_t *)&v683, *(uint64_t *)&v694, v325);
            v80 = 0.0;
LABEL_29:
            v74 = v74 + v80;
            v73 = v695;
            if (v695 == v677)
            {
              swift_bridgeObjectRelease_n();
              v68 = v693;
              v69 = (uint64_t)v691;
              LOBYTE(v70) = (_BYTE)v690;
              outlined consume of Text.Layout.Line.Line(v693, (uint64_t)v691, (char)v690);
              swift_bridgeObjectRelease();
              goto LABEL_141;
            }
            continue;
          }
        }
        else
        {
          v273 = *(_QWORD *)&v694;
        }
      }
      else
      {
        v44 = v91;
        v273 = *(_QWORD *)&v694;
      }
LABEL_105:
      v274 = v706;
      swift_beginAccess();
      v275 = **(_QWORD **)&v274;
      if (*(_QWORD *)(v275 + 16))
      {
        v276 = specialized __RawDictionaryStorage.find<A>(_:)(v84);
        if ((v277 & 1) != 0)
        {
          v669 = v88;
          v278 = *(double *)&v85;
          v727 = v44;
          v279 = *(void **)(*(_QWORD *)(v275 + 56) + 8 * v276);
          swift_endAccess();
          v280 = v693;
          v281 = (uint64_t)v691;
          v282 = (char)v690;
          outlined copy of Text.Layout.Line.Line(v693, (uint64_t)v691, (char)v690);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          v283 = v279;
          RangeSet.init()();
          v284 = v712;
          if (v708 != v712)
          {
            v306 = v708;
            if ((uint64_t)v712 < (uint64_t)v708)
            {
LABEL_443:
              __break(1u);
LABEL_444:
              __break(1u);
LABEL_445:
              __break(1u);
LABEL_446:
              __break(1u);
LABEL_447:
              __break(1u);
LABEL_448:
              __break(1u);
LABEL_449:
              __break(1u);
LABEL_450:
              __break(1u);
LABEL_451:
              __break(1u);
            }
            while ((uint64_t)v306 < (uint64_t)v284)
            {
              if ((v282 & 1) != 0)
              {
                outlined copy of Text.Layout.Line.Line(v280, v281, 1);
                v307 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v280);
                if (!v307)
                  goto LABEL_451;
                v308 = v307;
                outlined consume of Text.Layout.Line.Line(v280, v281, 1);
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(v280, v281, 0);
                outlined copy of Text.Layout.Line.Line(v280, v281, 0);

                swift_release();
                v308 = (const __CTLine *)v280;
              }
              v309 = (id)_CTLineGetRunAtIndex(v308, (CFIndex)v306);
              v310 = CTRunGetStringRange((CTRunRef)v309);

              swift_release();
              v311 = v310.location + v310.length;
              if (__OFADD__(v310.location, v310.length))
                goto LABEL_418;
              if (v311 < v310.location)
                goto LABEL_419;
              *(_QWORD *)&v755.x = v310.location;
              *(_QWORD *)&v755.y = v310.location + v310.length;
              if (__OFSUB__(v311, v310.location))
                goto LABEL_420;
              if (v311 != v310.location)
              {
                v312 = (void (*)(CGPoint *, _QWORD))RangeSet._ranges.modify();
                type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
                RangeSet.Ranges._insert(contentsOf:)();
                v312(&v760, 0);
              }
              v306 = (uint64_t *)((char *)v306 + 1);
              v284 = v712;
              v280 = v693;
              v281 = (uint64_t)v691;
              v282 = (char)v690;
              if (v712 == v306)
                goto LABEL_108;
            }
LABEL_417:
            __break(1u);
LABEL_418:
            __break(1u);
LABEL_419:
            __break(1u);
LABEL_420:
            __break(1u);
LABEL_421:
            __break(1u);
LABEL_422:
            __break(1u);
LABEL_423:
            __break(1u);
LABEL_424:
            __break(1u);
LABEL_425:
            __break(1u);
LABEL_426:
            __break(1u);
LABEL_427:
            __break(1u);
LABEL_428:
            __break(1u);
LABEL_429:
            __break(1u);
LABEL_430:
            __break(1u);
LABEL_431:
            __break(1u);
LABEL_432:
            __break(1u);
LABEL_433:
            __break(1u);
LABEL_434:
            __break(1u);
LABEL_435:
            __break(1u);
LABEL_436:
            __break(1u);
LABEL_437:
            __break(1u);
LABEL_438:
            __break(1u);
LABEL_439:
            __break(1u);
LABEL_440:
            __break(1u);
LABEL_441:
            __break(1u);
LABEL_442:
            __break(1u);
            goto LABEL_443;
          }
LABEL_108:
          (*(void (**)(char *, char *, uint64_t))(v698 + 32))(v655, v673, v711);
          v285 = v737;
          v286 = *(_QWORD *)(v737 + 16);
          v683 = v278;
          if (v286)
          {
            v287 = specialized __RawDictionaryStorage.find<A>(_:)(v687);
            v288 = v283;
            if ((v289 & 1) != 0)
              v286 = *(_QWORD *)(*(_QWORD *)(v285 + 56) + 8 * v287);
            else
              v286 = 0;
          }
          else
          {
            v288 = v283;
          }
          v313 = v679;
          if (__OFADD__(v286, *(_QWORD *)&v679))
            goto LABEL_436;
          v760.x = v72;
          v314 = v655;
          v80 = (*(double (**)(uint64_t, uint64_t, char *, CGPoint *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v288) + 0xF8))(v687, v286 + *(_QWORD *)&v679, v655, &v760, v285, v734, v735, v736);

          (*(void (**)(char *, uint64_t))(v698 + 8))(v314, v711);
          outlined consume of Text.Layout.Line.Line(v280, v281, v282);
          v315 = *(_QWORD *)&v313;
          v316 = v708;
          v317 = (uint64_t)v712;
          v318 = v710;
          v319 = *(_QWORD *)&v683;
          v320 = *(_QWORD *)&v694;
          v321 = *(_QWORD *)&v696;
          outlined consume of Text.Effect.Composition.Operation(v687, v315, v708, (uint64_t)v712, v710, *(uint64_t *)&v683, *(uint64_t *)&v694, *(unint64_t *)&v696);
          outlined consume of Text.Effect.Composition.Operation(v687, *(uint64_t *)&v679, v316, v317, v318, v319, v320, v321);
          v44 = v727;
          goto LABEL_29;
        }
      }
      swift_endAccess();
      v297 = v84;
      v298 = v83;
      v689 = v89;
      v299 = v708;
      v300 = (uint64_t)v712;
      v301 = v710;
      v302 = *(_QWORD *)&v696;
      outlined consume of Text.Effect.Composition.Operation(v297, v298, v708, (uint64_t)v712, v710, v85, v273, *(unint64_t *)&v696);
      outlined consume of Text.Effect.Composition.Operation(v687, *(uint64_t *)&v679, v299, v300, v301, v85, v273, v302);
LABEL_113:
      v80 = 0.0;
      goto LABEL_29;
    }
    break;
  }
  v106 = v90;
  v701 = specialized Array._getCount()(v90);
  if (!v701)
    goto LABEL_113;
  v107 = v85;
  v108 = v85;
  v109 = *(_QWORD *)&v696;
  outlined copy of Text.Effect.Composition.Operation(v84, v83, v708, (uint64_t)v712, v710, v107, v87, *(unint64_t *)&v696);
  swift_bridgeObjectRetain();
  v669 = v88;
  v689 = v89;
  v687 = v84;
  v679 = *(double *)&v83;
  v683 = *(double *)&v108;
  v694 = *(double *)&v87;
  outlined copy of Text.Effect.Composition.Operation(v84, v83, v708, (uint64_t)v712, v710, v108, v87, v109);
  swift_bridgeObjectRetain();
  outlined copy of Text.Layout.Line.Line(v693, (uint64_t)v691, (char)v690);
  v675 = v106;
  *(_QWORD *)&v700 = v106 + 32;
  swift_beginAccess();
  v110 = 0;
  v80 = 0.0;
  while (2)
  {
    v116 = v110 + 1;
    if (__OFADD__(v110, 1))
      goto LABEL_408;
    v117 = *(_QWORD *)&v700 + 88 * v110;
    v118 = *(_QWORD *)v117;
    v119 = *(char **)(v117 + 8);
    v121 = *(char **)(v117 + 16);
    v120 = *(double *)(v117 + 24);
    v122 = *(_QWORD *)(v117 + 32);
    v713 = *(_OWORD *)(v117 + 40);
    v123 = *(_QWORD *)(v117 + 56);
    v124 = *(_QWORD *)(v117 + 64);
    v709 = *(_QWORD *)(v117 + 72);
    v125 = *(char ***)(v117 + 80);
    v714 = v123;
    v726 = v120;
    if (!(v123 >> 62))
    {
      v136 = v124;
      v137 = v125;
      v138 = (char **)specialized Array._getCount()(v125);
      if (!v138)
        goto LABEL_67;
      v702 = v116;
      LODWORD(v742) = v710 & 1;
      v724 = v138;
      v139 = v118;
      v140 = v121;
      v141 = *(_QWORD *)&v120;
      v142 = v713;
      v721 = v121;
      v143 = v136;
      v144 = v118;
      v717 = v122;
      v145 = *((_QWORD *)&v713 + 1);
      v146 = v714;
      outlined copy of Text.Effect.Composition.Operation(v139, (uint64_t)v119, v140, v141, v122, v713, *((uint64_t *)&v713 + 1), v714);
      swift_bridgeObjectRetain();
      v703 = v143;
      v704 = v144;
      v707 = v119;
      outlined copy of Text.Effect.Composition.Operation(v144, (uint64_t)v119, v721, *(uint64_t *)&v726, v717, v142, v145, v146);
      swift_bridgeObjectRetain();
      outlined copy of Text.Layout.Line.Line(v708, (uint64_t)v712, SLOBYTE(v742));
      v705 = v137;
      v725 = v137 + 4;
      swift_beginAccess();
      v147 = 0;
      v148 = 0.0;
      while (1)
      {
        v151 = (char *)v147 + 1;
        if (__OFADD__(v147, 1))
          goto LABEL_383;
        v727 = v44;
        v153 = &v725[11 * (_QWORD)v147];
        v154 = *v153;
        v732 = v153[1];
        v156 = v153[2];
        v155 = (uint64_t)v153[3];
        v157 = (uint64_t)v153[4];
        v137 = (char **)v153[5];
        v159 = (uint64_t)v153[6];
        v158 = (unint64_t)v153[7];
        v160 = (uint64_t)v153[8];
        v161 = v153[9];
        v733 = (uint64_t)v153[10];
        if (!(v158 >> 62))
          break;
        v730 = v151;
        v729 = v154;
        v731 = v160;
        if (v158 >> 62 == 1)
        {
          v149 = (uint64_t)v154;
          v150 = (uint64_t)v732;
          outlined consume of Text.Effect.Composition.Operation(v149, (uint64_t)v732, v156, v155, v157, (uint64_t)v137, v159, v158);
          v151 = v730;
          outlined consume of Text.Effect.Composition.Operation((uint64_t)v729, v150, v156, v155, v157, (uint64_t)v137, v159, v158);
LABEL_50:
          v152 = 0.0;
          v44 = v727;
          goto LABEL_51;
        }
        v728 = v158;
        if (specialized Set.contains(_:)((Swift::UInt64)v154, *v715))
        {
          v162 = (uint64_t)v154;
          v163 = (uint64_t)v732;
          outlined consume of Text.Effect.Composition.Operation(v162, (uint64_t)v732, v156, v155, v157, (uint64_t)v137, v159, v728);
          v164 = (uint64_t)v729;
          v165 = v163;
          v166 = v156;
          v167 = v155;
          v168 = v157;
          v169 = (uint64_t)v137;
          v170 = v159;
LABEL_66:
          outlined consume of Text.Effect.Composition.Operation(v164, v165, v166, v167, v168, v169, v170, v728);
          v152 = 0.0;
          v44 = v727;
          v151 = v730;
          goto LABEL_51;
        }
        v718 = v159;
        v192 = v706;
        swift_beginAccess();
        v193 = **(_QWORD **)&v192;
        if (!*(_QWORD *)(v193 + 16)
          || (v194 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v154), (v195 & 1) == 0))
        {
          swift_endAccess();
          v208 = (uint64_t)v154;
          v209 = (uint64_t)v732;
          v210 = v718;
          outlined consume of Text.Effect.Composition.Operation(v208, (uint64_t)v732, v156, v155, v157, (uint64_t)v137, v718, v728);
          v164 = (uint64_t)v729;
          v165 = v209;
          v166 = v156;
          v167 = v155;
          v168 = v157;
          v169 = (uint64_t)v137;
          v170 = v210;
          goto LABEL_66;
        }
        v196 = (_QWORD *)(v717 & 1);
        v197 = *(void **)(*(_QWORD *)(v193 + 56) + 8 * v194);
        swift_endAccess();
        *(_QWORD *)&v760.x = v721;
        v760.y = v726;
        v742 = *(double *)&v196;
        LOBYTE(v761) = (_BYTE)v196;
        v762 = v713;
        LODWORD(v763) = v714;
        outlined copy of Text.Layout.Line.Line(v721, *(uint64_t *)&v726, (char)v196);
        x = COERCE_DOUBLE(v197);
        v198 = (uint64_t)v154;
        v199 = v692;
        v722 = (char **)v156;
        v723 = v155;
        Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v156, v155);
        v716 = v161;
        v200 = v198;
        v201 = Text.Effect.RelativeIdentifierKey.identifierKey(base:)(v737, v734, v198, (uint64_t)v732);
        v760.x = v72;
        v151 = v730;
        v202 = x;
        v152 = (*(double (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)&x) + 0xF8))(v201);

        (*(void (**)(char *, uint64_t))(v698 + 8))(v199, v711);
        v44 = v727;
        outlined consume of Text.Layout.Line.Line(v721, *(uint64_t *)&v726, SLOBYTE(v742));
        v203 = v200;
        v204 = v722;
        v205 = v723;
        v206 = v718;
        v207 = v728;
        outlined consume of Text.Effect.Composition.Operation(v203, (uint64_t)v732, v722, v723, v157, (uint64_t)v137, v718, v728);
        outlined consume of Text.Effect.Composition.Operation((uint64_t)v729, (uint64_t)v732, v204, v205, v157, (uint64_t)v137, v206, v207);
LABEL_51:
        v148 = v148 + v152;
        v147 = v151;
        if (v151 == (char *)v724)
        {
          v111 = v710 & 1;
          swift_bridgeObjectRelease_n();
          outlined consume of Text.Layout.Line.Line(v708, (uint64_t)v712, v111);
          v112 = v704;
          v113 = (uint64_t)v707;
          v114 = v713;
          v115 = v714;
          outlined consume of Text.Effect.Composition.Operation(v704, (uint64_t)v707, v721, *(uint64_t *)&v726, v717, v713, *((uint64_t *)&v713 + 1), v714);
          outlined consume of Text.Effect.Composition.Operation(v112, v113, v721, *(uint64_t *)&v726, v717, v114, *((uint64_t *)&v114 + 1), v115);
          goto LABEL_40;
        }
      }
      v722 = (char **)v156;
      *(_QWORD *)&v770 = v156;
      v723 = v155;
      *((_QWORD *)&v770 + 1) = v155;
      v719 = v157;
      v771 = v157 & 1;
      v720 = v137;
      v772 = v137;
      v773 = v159;
      v171 = v158;
      v774 = v158;
      v172 = v160;
      v775 = v160;
      v776 = v161;
      v777 = v733;
      v755.x = 0.0;
      v173 = specialized Array._getCount()(v733);
      if (v173)
      {
        v174 = (_QWORD *)v173;
        if (v173 < 1)
          goto LABEL_399;
        v730 = v151;
        v175 = v717 & 1;
        v176 = v733;
        v716 = v161;
        v731 = v172;
        v729 = v154;
        v718 = v159;
        v728 = v171;
        outlined copy of Text.Effect.Composition.Operation((uint64_t)v154, (uint64_t)v732, v722, v723, v719, (uint64_t)v720, v159, v171);
        swift_bridgeObjectRetain();
        outlined copy of Text.Layout.Line.Line(v721, *(uint64_t *)&v726, v175);
        v177 = (uint64_t *)(v176 + 56);
        v44 = v727;
        do
        {
          v742 = *(double *)&v174;
          v179 = *((double *)v177 - 3);
          v178 = *((double *)v177 - 2);
          v180 = *((void **)v177 - 1);
          v181 = *v177;
          v182 = *((double *)v177 + 1);
          v183 = v177[2];
          v185 = v177[3];
          v184 = *((double *)v177 + 4);
          v186 = v177[5];
          v187 = v177[6];
          v188 = v177[7];
          v760.x = v179;
          v760.y = v178;
          MaxY = v178;
          x = *(double *)&v180;
          v761 = v180;
          *(_QWORD *)&v762 = v181;
          MinY = v182;
          *((double *)&v762 + 1) = v182;
          v763 = v183;
          v764 = v185;
          MinX = v184;
          v765 = *(_QWORD *)&v184;
          v766 = v186;
          v767 = v187;
          v768 = v188;
          outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&v179, *(uint64_t *)&v178, v180, v181, SLOBYTE(v182), v183, v185, *(unint64_t *)&v184);
          closure #1 in Text.Effect.Composition.widthDifference(at:context:)(&v755.x, (uint64_t *)&v760, &v770, v737, v734, v735, v736, &v744, v72);
          v189 = *(_QWORD *)&v179;
          v190 = v742;
          outlined consume of Text.Effect.Composition.Operation(v189, *(uint64_t *)&MaxY, *(void **)&x, v181, SLOBYTE(MinY), v183, v185, *(unint64_t *)&MinX);
          v152 = v744;
          v755.x = v744;
          v177 += 11;
          v174 = (_QWORD *)(*(_QWORD *)&v190 - 1);
        }
        while (*(double *)&v174 != 0.0);
        v191 = v717 & 1;
        v137 = (char **)v733;
        swift_bridgeObjectRelease();
        outlined consume of Text.Layout.Line.Line(v721, *(uint64_t *)&v726, v191);
        outlined consume of Text.Effect.Composition.Operation((uint64_t)v729, (uint64_t)v732, v722, v723, v719, (uint64_t)v720, v718, v728);
        v151 = v730;
        goto LABEL_51;
      }
      goto LABEL_50;
    }
    v707 = v119;
    if (v123 >> 62 == 1)
    {
      v126 = v118;
      v127 = *(_QWORD *)&v120;
      v704 = v118;
      v128 = v713;
      v703 = v124;
      v129 = *((_QWORD *)&v713 + 1);
      v130 = v714;
      outlined consume of Text.Effect.Composition.Operation(v126, (uint64_t)v119, v121, v127, v122, v713, *((uint64_t *)&v713 + 1), v714);
      v131 = v704;
      v132 = (uint64_t)v707;
      v133 = v121;
      v134 = *(_QWORD *)&v726;
      v135 = v122;
      goto LABEL_46;
    }
    v211 = (uint64_t)v119;
    v721 = v121;
    v717 = v122;
    v702 = v116;
    v212 = v44;
    v213 = *v715;
    v214 = *(_QWORD *)(*v715 + 16);
    v705 = v125;
    v215 = v124;
    if (v214
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(v118),
          v216 = Hasher._finalize()(),
          v217 = -1 << *(_BYTE *)(v213 + 32),
          v218 = v216 & ~v217,
          v219 = v213 + 56,
          ((*(_QWORD *)(v213 + 56 + ((v218 >> 3) & 0xFFFFFFFFFFFFF8)) >> v218) & 1) != 0))
    {
      v220 = *(_QWORD *)(v213 + 48);
      if (*(_QWORD *)(v220 + 8 * v218) == v118)
      {
        v221 = v118;
        v222 = v721;
        v223 = *(_QWORD *)&v120;
        v224 = v118;
        v225 = v717;
        v226 = *((_QWORD *)&v713 + 1);
        v227 = v713;
        v228 = v714;
        outlined consume of Text.Effect.Composition.Operation(v221, (uint64_t)v119, v721, v223, v717, v713, *((uint64_t *)&v713 + 1), v714);
        outlined consume of Text.Effect.Composition.Operation(v224, (uint64_t)v707, v222, *(uint64_t *)&v726, v225, v227, v226, v228);
        v148 = 0.0;
        v44 = v212;
        goto LABEL_40;
      }
      v247 = ~v217;
      v248 = (v218 + 1) & v247;
      v44 = v212;
      v116 = v702;
      if (((*(_QWORD *)(v219 + ((v248 >> 3) & 0xFFFFFFFFFFFFF8)) >> v248) & 1) != 0)
      {
        if (*(_QWORD *)(v220 + 8 * v248) != v118)
        {
          do
          {
            v248 = (v248 + 1) & v247;
            if (((*(_QWORD *)(v219 + ((v248 >> 3) & 0xFFFFFFFFFFFFF8)) >> v248) & 1) == 0)
              goto LABEL_73;
          }
          while (*(_QWORD *)(v220 + 8 * v248) != v118);
          v116 = v702;
        }
        v703 = v215;
        v249 = v118;
        v250 = (uint64_t)v119;
        v251 = v721;
        v252 = *(_QWORD *)&v120;
        v704 = v118;
        v253 = v717;
        v254 = *(_QWORD *)&v120;
        v129 = *((_QWORD *)&v713 + 1);
        v128 = v713;
        v130 = v714;
        outlined consume of Text.Effect.Composition.Operation(v249, v250, v721, v252, v717, v713, *((uint64_t *)&v713 + 1), v714);
        v131 = v704;
        v132 = (uint64_t)v707;
        v133 = v251;
        v134 = v254;
        v135 = v253;
LABEL_46:
        outlined consume of Text.Effect.Composition.Operation(v131, v132, v133, v134, v135, v128, v129, v130);
LABEL_67:
        v148 = 0.0;
LABEL_41:
        v80 = v80 + v148;
        v110 = v116;
        if (v116 == v701)
        {
          swift_bridgeObjectRelease_n();
          outlined consume of Text.Layout.Line.Line(v693, (uint64_t)v691, (char)v690);
          v290 = *(_QWORD *)&v679;
          v291 = v708;
          v292 = (uint64_t)v712;
          v293 = v710;
          v294 = *(_QWORD *)&v683;
          v295 = *(_QWORD *)&v694;
          v296 = *(_QWORD *)&v696;
          outlined consume of Text.Effect.Composition.Operation(v687, *(uint64_t *)&v679, v708, (uint64_t)v712, v710, *(uint64_t *)&v683, *(uint64_t *)&v694, *(unint64_t *)&v696);
          outlined consume of Text.Effect.Composition.Operation(v687, v290, v291, v292, v293, v294, v295, v296);
          goto LABEL_29;
        }
        continue;
      }
    }
    else
    {
      v44 = v212;
    }
    break;
  }
LABEL_73:
  v229 = v706;
  swift_beginAccess();
  v230 = **(_QWORD **)&v229;
  if (!*(_QWORD *)(v230 + 16) || (v231 = specialized __RawDictionaryStorage.find<A>(_:)(v118), (v232 & 1) == 0))
  {
    swift_endAccess();
    v242 = v721;
    v243 = *(_QWORD *)&v120;
    v244 = v717;
    v245 = v713;
    v246 = v714;
    outlined consume of Text.Effect.Composition.Operation(v118, (uint64_t)v119, v721, v243, v717, v713, *((uint64_t *)&v713 + 1), v714);
    outlined consume of Text.Effect.Composition.Operation(v118, (uint64_t)v707, v242, *(uint64_t *)&v726, v244, v245, *((uint64_t *)&v245 + 1), v246);
    v148 = 0.0;
LABEL_40:
    v116 = v702;
    goto LABEL_41;
  }
  v703 = v215;
  v704 = v118;
  v727 = v44;
  v233 = v710 & 1;
  v234 = *(void **)(*(_QWORD *)(v230 + 56) + 8 * v231);
  swift_endAccess();
  v235 = v708;
  outlined copy of Text.Layout.Line.Line(v708, (uint64_t)v712, v233);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  v236 = v234;
  RangeSet.init()();
  if (v721 == *(char **)&v120)
  {
    v237 = (uint64_t)v712;
LABEL_77:
    (*(void (**)(char *, char *, uint64_t))(v698 + 32))(v680, v697, v711);
    v238 = *(_QWORD *)(v737 + 16);
    if (v238)
    {
      v239 = v737;
      v240 = specialized __RawDictionaryStorage.find<A>(_:)(v704);
      if ((v241 & 1) != 0)
        v238 = *(_QWORD *)(*(_QWORD *)(v239 + 56) + 8 * v240);
      else
        v238 = 0;
      v237 = (uint64_t)v712;
    }
    v262 = &v119[v238];
    if (__OFADD__(v238, v119))
      goto LABEL_424;
    v263 = v236;
    v264 = *(_QWORD *)&v120;
    v265 = v710 & 1;
    v760.x = v72;
    v266 = v704;
    v267 = v680;
    v148 = (*(double (**)(uint64_t, char *, char *, CGPoint *))((*MEMORY[0x24BEE4EA0] & *v263) + 0xF8))(v704, v262, v680, &v760);

    (*(void (**)(char *, uint64_t))(v698 + 8))(v267, v711);
    outlined consume of Text.Layout.Line.Line(v235, v237, v265);
    v268 = v721;
    v269 = v264;
    LOBYTE(v267) = v717;
    v270 = *((_QWORD *)&v713 + 1);
    v271 = v713;
    v272 = v714;
    outlined consume of Text.Effect.Composition.Operation(v266, v211, v721, v269, v717, v713, *((uint64_t *)&v713 + 1), v714);
    outlined consume of Text.Effect.Composition.Operation(v266, (uint64_t)v707, v268, *(uint64_t *)&v726, (char)v267, v271, v270, v272);
    v44 = v727;
    goto LABEL_40;
  }
  v255 = v721;
  v237 = (uint64_t)v712;
  if (*(uint64_t *)&v120 < (uint64_t)v721)
    goto LABEL_430;
  while ((uint64_t)v255 < *(uint64_t *)&v120)
  {
    if ((v710 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v235, v237, 1);
      v256 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v235);
      if (!v256)
        goto LABEL_448;
      v257 = v256;
      outlined consume of Text.Layout.Line.Line(v235, v237, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v235, v237, 0);
      outlined copy of Text.Layout.Line.Line(v235, v237, 0);

      swift_release();
      v257 = (const __CTLine *)v235;
    }
    v258 = (id)_CTLineGetRunAtIndex(v257, (CFIndex)v255);
    v259 = CTRunGetStringRange((CTRunRef)v258);

    swift_release();
    v260 = v259.location + v259.length;
    if (__OFADD__(v259.location, v259.length))
      goto LABEL_405;
    if (v260 < v259.location)
      goto LABEL_406;
    *(_QWORD *)&v755.x = v259.location;
    *(_QWORD *)&v755.y = v259.location + v259.length;
    if (__OFSUB__(v260, v259.location))
      goto LABEL_407;
    if (v260 != v259.location)
    {
      v261 = (void (*)(CGPoint *, _QWORD))RangeSet._ranges.modify();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
      RangeSet.Ranges._insert(contentsOf:)();
      v261(&v760, 0);
    }
    ++v255;
    v120 = v726;
    v237 = (uint64_t)v712;
    v235 = v708;
    if (*(char **)&v726 == v255)
      goto LABEL_77;
  }
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  v36 = height;
  v35 = width;
  v34 = v639;
  v33 = y;
LABEL_365:
  v796.origin.x = v34;
  v796.origin.y = v33;
  v796.size.width = v35;
  v796.size.height = v36;
  IsNull = CGRectIsNull(v796);
  v599 = v670;
  v600 = (double *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
  v601 = *(double *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
  v602 = *(double *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds + 8];
  if (IsNull)
  {
    v604 = v600[2];
    v603 = v600[3];
    v742 = v604;
    x = v603;
    v605 = v602;
    v606 = v601;
  }
  else
  {
    v606 = CGRect.outset(by:)(*(double *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets], *(double *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets+ 8], *(double *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets+ 16], *(double *)&v670[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets+ 24], v34 + v601, v33 + v602, v35, v36);
    v605 = v607;
    v742 = *(double *)&v608;
    x = v609;
    v601 = *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
    v602 = *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                          + 8];
    v604 = *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                          + 16];
    v603 = *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                          + 24];
  }
  v610 = v601;
  v611 = v602;
  v612 = v604;
  v613 = v603;
  MinY = CGRectGetMinY(*(CGRect *)&v601);
  v797.origin.x = v606;
  v797.origin.y = v605;
  v614 = v742;
  v797.size.width = v742;
  v615 = x;
  v797.size.height = x;
  MinY = MinY - CGRectGetMinY(v797);
  v798.origin.x = v610;
  v798.origin.y = v602;
  v798.size.width = v604;
  v798.size.height = v603;
  MinX = CGRectGetMinX(v798);
  v799.origin.x = v606;
  v799.origin.y = v605;
  v799.size.width = v614;
  v799.size.height = v615;
  MinX = MinX - CGRectGetMinX(v799);
  v800.origin.x = v606;
  v800.origin.y = v605;
  v800.size.width = v614;
  v800.size.height = v615;
  MaxY = CGRectGetMaxY(v800);
  v801.origin.x = v610;
  v801.origin.y = v602;
  v801.size.width = v604;
  v801.size.height = v603;
  MaxY = MaxY - CGRectGetMaxY(v801);
  v802.origin.x = v606;
  v802.origin.y = v605;
  v802.size.width = v614;
  v802.size.height = v615;
  MaxX = CGRectGetMaxX(v802);
  v803.origin.x = v610;
  v803.origin.y = v602;
  v803.size.width = v604;
  v803.size.height = v603;
  v617 = MaxX - CGRectGetMaxX(v803);
  v618 = (double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement];
  v619 = MinY == *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement]
      && MinX == *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement
                                + 8];
  v620 = MinX;
  v621 = MaxY;
  v623 = v619
      && MaxY == *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement
                                + 16]
      && v617 == *(double *)&v599[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement
                                + 24];
  v137 = &selRef_bundleURL;
  if (!v623)
  {
    *v618 = MinY;
    v618[1] = v620;
    v618[2] = v621;
    v618[3] = v617;
    if (objc_msgSend(v599, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v624 = swift_dynamicCastClass();
      if (v624)
      {
        v625 = MEMORY[0x23B7C9E44](v624 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v625)
        {
          v626 = (void *)v625;
          TextEffectsRenderer.updateDisplacementAndBounds(changed:)(0);
          swift_unknownObjectRelease();

          goto LABEL_385;
        }
      }
LABEL_384:
      swift_unknownObjectRelease();
LABEL_385:
      v599 = v670;
    }
  }
  if (!objc_msgSend(v599, v137[129]))
    return outlined release of TextRenderLayer.Layout?(v778, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  type metadata accessor for TextRenderSurface();
  v627 = swift_dynamicCastClass();
  if (!v627)
  {
    swift_unknownObjectRelease();
    return outlined release of TextRenderLayer.Layout?(v778, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  }
  v628 = MEMORY[0x23B7C9E44](v627 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
  if (v628)
  {
    v629 = (_BYTE *)v628;
    v630 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags;
    v631 = *(_BYTE *)(v628 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags);
    *(_BYTE *)(v628 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags) = v631 | 2;
    if ((v631 & 1) == 0)
    {
      v632 = (void *)MEMORY[0x23B7C9E44](v628 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
      _NSTextCustomRenderingDelegateSetNeedsLayoutForInteraction(v632);
      swift_unknownObjectRelease();
      if ((v629[v630] & 4) != 0)
      {
        v633 = (void *)MEMORY[0x23B7C9E44](&v629[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate]);
        _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(v633);
        swift_unknownObjectRelease();
      }
      v629[v630] = 0;
    }

  }
  outlined release of TextRenderLayer.Layout?(v778, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  return (_QWORD *)swift_unknownObjectRelease();
}

uint64_t type metadata accessor for TextRenderLayer()
{
  return objc_opt_self();
}

void Text.Layout.Line.xrange(runIndex:range:)(CFIndex a1@<X0>, CFIndex a2@<X1>, CFIndex a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  char v9;
  double v10;
  void *v11;
  const __CTLine *v12;
  const __CTLine *v13;
  void *v14;
  CFRange StringRange;
  CFIndex v16;
  CFIndex location;
  CFIndex v18;
  double v19;
  const __CTLine *v20;
  const __CTLine *v21;
  const __CTLine *v22;
  const __CTLine *v23;
  CFIndex v24;
  CFIndex v25;
  char v26;
  double v27;
  uint64_t v28;
  void *v29;
  CGFloat OffsetForStringIndex;
  uint64_t v31;
  CFIndex v32;
  CFIndex v33;
  const __CTLine *v34;
  void *v35;
  const __CTLine *v36;
  double v37;
  double v38;
  _BOOL8 v39;
  CFIndex v40;
  CFIndex i;
  const __CTLine *v42;
  void *v43;
  double TypographicBounds;
  const __CTLine *v45;
  double v46;
  double v47;
  char Status;
  CFIndex v50;
  CFIndex charIndex;
  CFIndex v52;
  CGPoint originsBuffer;
  CGFloat v56;
  CGFloat leading;
  CGFloat descent;
  CGPoint buffer;
  CGFloat ascent;
  CGFloat secondaryOffset[3];
  CFRange v62;
  CFRange v63;
  CFRange v64;
  CFRange v65;
  CFRange v66;
  CFRange v67;

  secondaryOffset[1] = *(CGFloat *)MEMORY[0x24BDAC8D0];
  v7 = *(void **)v4;
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(_BYTE *)(v4 + 16);
  v10 = *(double *)(v4 + 24);
  v11 = *(void **)v4;
  if ((v9 & 1) != 0)
  {
    outlined copy of Text.Layout.Line.Line(v11, v8, 1);
    v12 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
    if (!v12)
      goto LABEL_72;
    v13 = v12;
    outlined consume of Text.Layout.Line.Line(v7, v8, 1);
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v11, v8, 0);
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);

    swift_release();
    v13 = (const __CTLine *)v7;
  }
  v52 = a1;
  v14 = (id)_CTLineGetRunAtIndex(v13, a1);
  StringRange = CTRunGetStringRange((CTRunRef)v14);

  swift_release();
  v16 = StringRange.location + StringRange.length;
  if (__OFADD__(StringRange.location, StringRange.length))
    goto LABEL_61;
  if (v16 < StringRange.location)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (StringRange.location <= a2)
    location = a2;
  else
    location = StringRange.location;
  v18 = a3;
  if (v16 < a3)
    v18 = StringRange.location + StringRange.length;
  v19 = 0.0;
  v50 = v18;
  if (location >= v18)
    goto LABEL_17;
  charIndex = location;
  if ((v9 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);

    swift_release();
    v23 = (const __CTLine *)v7;
    v21 = (const __CTLine *)v7;
    goto LABEL_19;
  }
  v20 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (!v20)
  {
LABEL_17:
    v24 = 0;
    v25 = 0;
    v26 = 1;
    v27 = 0.0;
    v28 = a4;
LABEL_58:
    *(double *)v28 = v19;
    *(double *)(v28 + 8) = v27;
    *(_QWORD *)(v28 + 16) = v24;
    *(_QWORD *)(v28 + 24) = v25;
    *(_BYTE *)(v28 + 32) = v26;
    return;
  }
  v21 = v20;
  outlined copy of Text.Layout.Line.Line(v7, v8, 1);
  v22 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (!v22)
    goto LABEL_73;
  v23 = v22;
  outlined consume of Text.Layout.Line.Line(v7, v8, 1);
LABEL_19:
  v29 = (id)_CTLineGetRunAtIndex(v23, a1);
  Status = CTRunGetStatus((CTRunRef)v29);

  swift_release();
  secondaryOffset[0] = 0.0;
  OffsetForStringIndex = CTLineGetOffsetForStringIndex(v21, charIndex, secondaryOffset);
  if (OffsetForStringIndex == secondaryOffset[0])
    goto LABEL_33;
  if (__OFSUB__(charIndex, StringRange.location))
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (StringRange.location < a2)
    goto LABEL_33;
  v31 = Status & 1;
  v32 = a1 + v31;
  if (__OFADD__(a1, v31))
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v32 < 0)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (!v32)
    goto LABEL_33;
  outlined copy of Text.Layout.Line.Line(v7, v8, v9);
  v33 = 0;
  while (1)
  {
    if (v32 == v33)
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if ((v9 & 1) != 0)
      break;
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);

    swift_release();
    v34 = (const __CTLine *)v7;
LABEL_27:
    v35 = (id)_CTLineGetRunAtIndex(v34, v33);
    buffer.x = 0.0;
    buffer.y = 0.0;
    ascent = 0.0;
    leading = 0.0;
    descent = 0.0;
    originsBuffer.x = 0.0;
    originsBuffer.y = 0.0;
    v62.location = 0;
    v62.length = 1;
    CTRunGetPositions((CTRunRef)v35, v62, &buffer);
    v63.location = 0;
    v63.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v35, v63, 0, &originsBuffer);
    v64.location = 0;
    v64.length = 0;
    CTRunGetTypographicBounds((CTRunRef)v35, v64, &ascent, &descent, &leading);

    swift_release();
    if (v32 == ++v33)
    {
      outlined consume of Text.Layout.Line.Line(v7, v8, v9);
LABEL_33:
      ascent = 0.0;
      v25 = v50;
      v37 = CTLineGetOffsetForStringIndex(v21, v50, &ascent);
      v38 = 0.0;
      if (ascent != 0.0)
      {
        if (__OFSUB__(v16, v50))
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        if (v16 <= a3)
        {
          v39 = (Status & 1) == 0;
          v40 = v52 + v39;
          if (__OFADD__(v52, v39))
          {
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
          }
          if (v40 < 0)
            goto LABEL_69;
          if (v40)
          {
            outlined copy of Text.Layout.Line.Line(v7, v8, v9);
            for (i = 0; i != v40; ++i)
            {
              if (v40 == i)
                goto LABEL_60;
              if ((v9 & 1) != 0)
              {
                outlined copy of Text.Layout.Line.Line(v7, v8, 1);
                v45 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
                if (!v45)
                  goto LABEL_71;
                v42 = v45;
                outlined consume of Text.Layout.Line.Line(v7, v8, 1);
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(v7, v8, 0);
                outlined copy of Text.Layout.Line.Line(v7, v8, 0);

                swift_release();
                v42 = (const __CTLine *)v7;
              }
              v43 = (id)_CTLineGetRunAtIndex(v42, i);
              buffer.x = 0.0;
              buffer.y = 0.0;
              leading = 0.0;
              descent = 0.0;
              originsBuffer.y = 0.0;
              v56 = 0.0;
              originsBuffer.x = 0.0;
              v65.location = 0;
              v65.length = 1;
              CTRunGetPositions((CTRunRef)v43, v65, &buffer);
              v66.location = 0;
              v66.length = 1;
              CTRunGetBaseAdvancesAndOrigins((CTRunRef)v43, v66, 0, &originsBuffer);
              v67.location = 0;
              v67.length = 0;
              TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v43, v67, &descent, &leading, &v56);

              swift_release();
              v38 = v38 + TypographicBounds;
            }
            outlined consume of Text.Layout.Line.Line(v7, v8, v9);
            v25 = v50;
          }
        }
      }

      if (v38 >= v37)
        v46 = v38;
      else
        v46 = v37;
      if (v38 >= v37)
        v47 = v37;
      else
        v47 = v38;
      v19 = v10 + v47;
      v27 = v10 + v46;
      if (v47 <= v46 && v19 <= v27)
      {
        v26 = 0;
        v28 = a4;
        v24 = charIndex;
        goto LABEL_58;
      }
      goto LABEL_63;
    }
  }
  outlined copy of Text.Layout.Line.Line(v7, v8, 1);
  v36 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (v36)
  {
    v34 = v36;
    outlined consume of Text.Layout.Line.Line(v7, v8, 1);
    goto LABEL_27;
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
}

CFIndex Text.Layout.Line.xranges(range:)(CFIndex a1, CFIndex a2)
{
  const __CTLine *v2;
  uint64_t v3;
  double v4;
  double v5;
  void *v8;
  uint64_t v9;
  char v10;
  double v11;
  void *v12;
  const __CTLine *v13;
  id location;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  CFRange StringRange;
  CFIndex v20;
  CFIndex RunCount;
  char v22;
  double OffsetForStringIndex;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  const __CTLine *v29;
  CFIndex v30;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  CFIndex v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  CFIndex v46;
  CFIndex v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[40];
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v8 = *(void **)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_BYTE *)(v3 + 16);
  v11 = *(double *)(v3 + 24);
  v12 = *(void **)v3;
  if ((v10 & 1) != 0)
  {
    v13 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v12);
    if (!v13)
      return MEMORY[0x24BEE4AF8];
    v2 = v13;
    outlined copy of Text.Layout.Line.Line(v8, v9, 1);
    location = objc_msgSend(v8, sel_characterRange);
    v16 = v15;
    outlined consume of Text.Layout.Line.Line(v8, v9, 1);
    v18 = (CFIndex)location + v16;
    if (__OFADD__(location, v16))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= (uint64_t)location)
      goto LABEL_9;
    __break(1u);
  }
  outlined copy of Text.Layout.Line.Line(v12, v9, 0);
  swift_release();
  StringRange = CTLineGetStringRange((CTLineRef)v8);
  v18 = StringRange.location + StringRange.length;
  if (__OFADD__(StringRange.location, StringRange.length))
  {
    __break(1u);
    goto LABEL_25;
  }
  location = (id)StringRange.location;
  if (v18 < StringRange.location)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v2 = (const __CTLine *)v8;
LABEL_9:
  if ((uint64_t)location <= a1)
    v20 = a1;
  else
    v20 = (CFIndex)location;
  if (v18 >= a2)
    RunCount = a2;
  else
    RunCount = v18;
  if (v20 >= RunCount)
    goto LABEL_34;
  Text.Layout.Line.containsRightToLeft.getter();
  if ((v22 & 1) == 0)
  {
    OffsetForStringIndex = CTLineGetOffsetForStringIndex(v2, v20, 0);
    v24 = CTLineGetOffsetForStringIndex(v2, RunCount, 0);
    if (OffsetForStringIndex < v24)
    {
      v4 = v24;
      type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_23527E860;
      v26 = v11 + OffsetForStringIndex;
      v27 = v11 + v4;
      if (OffsetForStringIndex <= v4 && v26 <= v27)
      {
        RunCount = v25;
        *(double *)(v25 + 32) = v26;
        *(double *)(v25 + 40) = v27;
        goto LABEL_23;
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    goto LABEL_34;
  }
LABEL_26:
  v12 = v8;
  v17 = v9;
  if ((v10 & 1) != 0)
  {
    outlined copy of Text.Layout.Line.Line(v8, v9, 1);
    v29 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v8);
    if (!v29)
    {
      outlined consume of Text.Layout.Line.Line(v8, v9, 1);
LABEL_34:

      return MEMORY[0x24BEE4AF8];
    }
    goto LABEL_31;
  }
LABEL_30:
  outlined copy of Text.Layout.Line.Line(v12, v17, 0);
  outlined copy of Text.Layout.Line.Line(v8, v9, 0);
  swift_release();
  v29 = (const __CTLine *)v8;
LABEL_31:
  RunCount = (CFIndex)_CTLineGetRunCount(v29);

  outlined consume of Text.Layout.Line.Line(v8, v9, v10);
  if (RunCount < 0)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    RunCount = (CFIndex)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(RunCount + 16) + 1, 1, (_QWORD *)RunCount);
LABEL_59:
    v45 = *(_QWORD *)(RunCount + 16);
    v44 = *(_QWORD *)(RunCount + 24);
    if (v45 >= v44 >> 1)
      RunCount = (CFIndex)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, (_QWORD *)RunCount);
    *(_QWORD *)(RunCount + 16) = v45 + 1;
    v46 = RunCount + 16 * v45;
    *(double *)(v46 + 32) = v4;
    *(double *)(v46 + 40) = v5;
    goto LABEL_23;
  }
  v47 = RunCount;
  if (!RunCount)
    goto LABEL_34;
  v49 = 0;
  v51 = 0;
  v30 = 0;
  RunCount = MEMORY[0x24BEE4AF8];
  v48 = 1;
  v4 = 0.0;
  v5 = 0.0;
  do
  {
    Text.Layout.Line.xrange(runIndex:range:)(v30, a1, a2, (uint64_t)v53);
    outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v53, (uint64_t)&v54, &lazy cache variable for type metadata for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>)?, (uint64_t (*)(uint64_t))type metadata accessor for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>));
    if ((v58 & 1) != 0)
    {
      v33 = v49;
      v32 = v51;
      goto LABEL_38;
    }
    v35 = v54;
    v34 = v55;
    v33 = v56;
    v32 = v57;
    if ((v48 & 1) != 0)
    {
      v48 = 0;
    }
    else
    {
      if (vabdd_f64(v5, v54) < 0.001)
      {
        if (__OFSUB__(v56, v51))
          goto LABEL_63;
        if (v56 == v51)
        {
          v33 = v49;
          if (v4 > v55 || v57 < v49)
            goto LABEL_64;
          v48 = 0;
          goto LABEL_56;
        }
      }
      v52 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        RunCount = (CFIndex)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(RunCount + 16) + 1, 1, (_QWORD *)RunCount);
      v38 = *(_QWORD *)(RunCount + 16);
      v37 = *(_QWORD *)(RunCount + 24);
      v39 = v38 + 1;
      v32 = v52;
      if (v38 >= v37 >> 1)
      {
        v50 = v38 + 1;
        v41 = (_QWORD *)RunCount;
        v42 = *(_QWORD *)(RunCount + 16);
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v41);
        v39 = v50;
        v32 = v52;
        v38 = v42;
        RunCount = (CFIndex)v43;
      }
      v48 = 0;
      *(_QWORD *)(RunCount + 16) = v39;
      v40 = RunCount + 16 * v38;
      *(double *)(v40 + 32) = v4;
      *(double *)(v40 + 40) = v5;
    }
    v4 = v35;
LABEL_56:
    v5 = v34;
LABEL_38:
    ++v30;
    v49 = v33;
    v51 = v32;
  }
  while (v47 != v30);
  if ((v48 & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_59;
    goto LABEL_66;
  }
LABEL_23:

  return RunCount;
}

void Text.Layout.Line.containsRightToLeft.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  int v3;
  id v4;
  CFIndex v5;
  const __CTLine *v6;
  const __CFArray *RunCount;
  id v8;
  void *v9;
  char v10;
  const __CTLine *v11;
  const __CFArray *v12;
  const __CTLine *v13;
  CFIndex v14;
  const __CTLine *v15;
  void *v16;
  char Status;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  if ((v3 & 1) != 0)
  {
    v4 = (id)_NSTextLineFragmentGetCTLine(*(void **)v0);
    if (!v4)
      return;
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(*(void **)v0, *(_QWORD *)(v0 + 8), 0);
    swift_release();
    v4 = v1;
  }
  if ((CTLineIsRightToLeft() & 1) != 0 || !CTLineHasBidiLevels())
  {
LABEL_25:

    return;
  }
  outlined copy of Text.Layout.Line.Line(v1, v2, v3);
  v5 = 0;
  while (1)
  {
    if ((v3 & 1) != 0)
    {
      v6 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
      if (!v6)
      {
        if (!v5)
        {
          LOBYTE(v3) = 1;
LABEL_24:
          outlined consume of Text.Layout.Line.Line(v1, v2, v3);
          goto LABEL_25;
        }
        goto LABEL_15;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      v6 = (const __CTLine *)v1;
    }
    RunCount = _CTLineGetRunCount(v6);

    if ((const __CFArray *)v5 == RunCount)
      goto LABEL_24;
    if (!v3)
    {
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);

      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      v13 = (const __CTLine *)v1;
      v9 = v1;
      goto LABEL_19;
    }
LABEL_15:
    v8 = (id)_NSTextLineFragmentGetCTLine(v1);
    if (!v8)
      goto LABEL_27;
    v9 = v8;
    v10 = 1;
    outlined copy of Text.Layout.Line.Line(v1, v2, 1);
    v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
    v12 = 0;
    if (v11)
    {
      v13 = v11;
LABEL_19:
      v12 = _CTLineGetRunCount(v13);

      v10 = v3;
    }
    outlined consume of Text.Layout.Line.Line(v1, v2, v10);
    if (v5 >= (uint64_t)v12)
      break;
    v14 = v5 + 1;
    swift_retain();
    v15 = v9;
    v16 = (id)_CTLineGetRunAtIndex(v15, v5);
    Status = CTRunGetStatus((CTRunRef)v16);
    swift_release_n();

    v5 = v14;
    if ((Status & 1) != 0)
      goto LABEL_24;
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t specialized updatedIdentifiers<A, B>(a:b:makeIdentifier:)(unint64_t a1, uint64_t i, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[4];

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v50 - v11;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!(a3 >> 62))
    {
LABEL_3:
      v14 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13 == v14)
      {
LABEL_4:
        swift_bridgeObjectRetain();
        return i;
      }
      goto LABEL_7;
    }
  }
  else
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!(a3 >> 62))
      goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v13 == v14)
    goto LABEL_4;
LABEL_7:
  v53 = v6;
  specialized Collection<>.commonPrefix<A>(with:)(v54, a3, a1);
  v16 = v15;
  v18 = v17;
  v19 = v54[0];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v16 == v18 >> 1)
  {
    v16 = 0;
    goto LABEL_14;
  }
  if (v16 >= (uint64_t)(v18 >> 1))
    goto LABEL_55;
  v20 = 0;
  do
  {
    if ((v18 >> 1) + ~v16 > 0x7FFFFFFFFFFFFFFELL)
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    --v20;
  }
  while (v16 - (v18 >> 1) != v20);
  v16 = -v20;
LABEL_14:
  specialized BidirectionalCollection<>.commonSuffix<A>(with:)(v54, a3, a1);
  a3 = v21;
  a1 = v22;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (a3 == a1 >> 1)
  {
    a3 = 0;
    v23 = v53;
    goto LABEL_21;
  }
  v23 = v53;
  if ((uint64_t)a3 >= (uint64_t)(a1 >> 1))
    goto LABEL_56;
  v24 = 0;
  do
  {
    if ((a1 >> 1) + ~a3 > 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_53;
    --v24;
  }
  while (a3 - (a1 >> 1) != v24);
  a3 = -v24;
LABEL_21:
  if (__OFADD__(v16, a3))
    goto LABEL_54;
  if ((uint64_t)(v16 + a3) < v14)
  {
    a1 = specialized Collection.prefix(_:)(v16, i);
    v26 = v25;
    v52 = v27;
    v19 = v28;
    if ((v28 & 1) != 0)
    {
      v51 = v25;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      v33 = swift_dynamicCastClass();
      if (!v33)
      {
        swift_unknownObjectRelease();
        v33 = MEMORY[0x24BEE4AF8];
      }
      v34 = *(_QWORD *)(v33 + 16);
      swift_release();
      if (__OFSUB__(v19 >> 1, v52))
        goto LABEL_61;
      if (v34 != (v19 >> 1) - v52)
        goto LABEL_62;
      v29 = swift_dynamicCastClass();
      v23 = v53;
      if (!v29)
      {
        swift_unknownObjectRelease();
        v29 = MEMORY[0x24BEE4AF8];
      }
      goto LABEL_38;
    }
    swift_bridgeObjectRetain();
    while (2)
    {
      v29 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, v26, v52, v19);
LABEL_38:
      swift_unknownObjectRelease();
      v54[0] = v29;
      v35 = v14 - v16;
      if (__OFSUB__(v14, v16))
      {
LABEL_58:
        __break(1u);
      }
      else
      {
        v36 = __OFSUB__(v35, a3);
        v37 = v35 - a3;
        if (!v36)
        {
          if ((v37 & 0x8000000000000000) == 0)
          {
            if (v37)
            {
              v38 = v16 + a3 - v14;
              do
              {
                UUID.init()();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
                v40 = *(_QWORD *)(v29 + 16);
                v39 = *(_QWORD *)(v29 + 24);
                if (v40 >= v39 >> 1)
                  v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v29);
                *(_QWORD *)(v29 + 16) = v40 + 1;
                (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v29+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v40, v12, v23);
              }
              while (!__CFADD__(v38++, 1));
              v54[0] = v29;
            }
            v42 = specialized BidirectionalCollection.suffix(_:)(a3, i);
            v44 = v43;
            v46 = v45;
            v48 = v47;
            swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v42, v44, v46, v48);
            return v54[0];
          }
          goto LABEL_60;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      swift_unknownObjectRelease();
      v23 = v53;
      v26 = v51;
      continue;
    }
  }
  v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v14 < 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  for (i = v30; v14; --v14)
  {
    UUID.init()();
    v32 = *(_QWORD *)(i + 16);
    v31 = *(_QWORD *)(i + 24);
    if (v32 >= v31 >> 1)
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, i);
    *(_QWORD *)(i + 16) = v32 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(i+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v32, v9, v23);
  }
  return i;
}

void specialized Collection<>.commonPrefix<A>(with:)(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id i;
  id v12;
  char v13;
  id v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;

  v4 = a3;
  v7 = (void *)(a3 >> 62);
  if (a3 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = a2 >> 62;
    if (!(a2 >> 62))
    {
LABEL_3:
      v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v35 = a1;
      if (!v8)
        goto LABEL_40;
      goto LABEL_4;
    }
  }
  else
  {
    v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v35 = a1;
  if (!v8)
  {
LABEL_40:
    v3 = 0;
    if (!v7)
      goto LABEL_41;
    goto LABEL_28;
  }
LABEL_4:
  if (!v10)
    goto LABEL_40;
  v37 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_71;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_73;
  }
  for (i = *(id *)(v4 + 32); ; i = (id)MEMORY[0x23B7C6D9C](0, v4))
  {
    v3 = (uint64_t)i;
    v36 = a2 & 0xC000000000000001;
    v34 = v7;
    if ((a2 & 0xC000000000000001) == 0)
      break;
LABEL_73:
    v12 = (id)MEMORY[0x23B7C6D9C](0, a2);
LABEL_11:
    v7 = v12;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
      v33 = v9;
      a1 = 0;
      do
      {
        v3 = (uint64_t)a1 + 1;
        if (__OFADD__(a1, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        if (v3 == v8 || v3 == v10)
          break;
        if (v37)
        {
          v17 = (id)MEMORY[0x23B7C6D9C]((char *)a1 + 1, v4);
        }
        else
        {
          if (v3 < 0)
            goto LABEL_34;
          if ((unint64_t)v3 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_35;
          v17 = *(id *)(v4 + 32 + 8 * v3);
        }
        v7 = v17;
        if (v36)
        {
          v14 = (id)MEMORY[0x23B7C6D9C]((char *)a1 + 1, a2);
        }
        else
        {
          if (v3 < 0)
            goto LABEL_36;
          if ((unint64_t)v3 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_37;
          v14 = *(id *)(a2 + 32 + 8 * v3);
        }
        v15 = v14;
        v16 = static NSObject.== infix(_:_:)();

        a1 = (uint64_t *)((char *)a1 + 1);
      }
      while ((v16 & 1) != 0);
      if (v3 < 0)
        goto LABEL_75;
      v9 = v33;
      v7 = v34;
      if (!v34)
      {
LABEL_41:
        v18 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_42;
      }
    }
    else
    {
      v3 = 0;
      v7 = v34;
      if (!v34)
        goto LABEL_41;
    }
LABEL_28:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 < 0)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_42:
    if (v18 < v3)
      goto LABEL_67;
    if ((v4 & 0xC000000000000001) != 0 && v3)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
      v19 = 0;
      do
      {
        v20 = v19 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v19);
        v19 = v20;
      }
      while (v3 != v20);
    }
    if (v7)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      v8 = v22;
      v7 = v23;
      v10 = v24;
      swift_bridgeObjectRelease();
      if (!v9)
      {
LABEL_55:
        v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_56;
      }
    }
    else
    {
      v8 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
      v10 = (2 * v3) | 1;
      swift_bridgeObjectRetain();
      if (!v9)
        goto LABEL_55;
    }
    if ((a2 & 0x8000000000000000) != 0)
      v4 = a2;
    else
      v4 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21 < 0)
      goto LABEL_69;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_56:
    if (v4 < v3)
      goto LABEL_68;
    if ((a2 & 0xC000000000000001) == 0 || !v3)
      goto LABEL_62;
    if (v3 >= 1)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
      v25 = 0;
      do
      {
        v26 = v25 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v25);
        v25 = v26;
      }
      while (v3 != v26);
LABEL_62:
      if (v9)
      {
        swift_bridgeObjectRetain();
        v27 = _CocoaArrayWrapper.subscript.getter();
        v28 = v30;
        v9 = v31;
        v29 = v32;
        swift_bridgeObjectRelease();
      }
      else
      {
        v27 = a2 & 0xFFFFFFFFFFFFFF8;
        v28 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
        v29 = (2 * v3) | 1;
        swift_bridgeObjectRetain();
      }
      *v35 = v27;
      v35[1] = v28;
      v35[2] = v9;
      v35[3] = v29;
      return;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    ;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)(a2 + 32);
    goto LABEL_11;
  }
  __break(1u);
LABEL_75:
  __break(1u);
}

void specialized BidirectionalCollection<>.commonSuffix<A>(with:)(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  id v11;
  id v12;
  void *v13;
  char v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  Swift::Int v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v5 = a3;
  v7 = a3 >> 62;
  if (!(a3 >> 62))
  {
    v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
LABEL_78:
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  v41 = a2;
  v36 = a2 >> 62;
  v37 = v7;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v38 = v9;
  v10 = v8;
  if (v8)
  {
    v10 = v8;
    if (v9)
    {
      v3 = v8 - 1;
      if (__OFSUB__(v8, 1))
        goto LABEL_88;
      v4 = v9 - 1;
      if (__OFSUB__(v9, 1))
        goto LABEL_89;
      v40 = v5 & 0xC000000000000001;
      if ((v5 & 0xC000000000000001) != 0)
        goto LABEL_90;
      if ((v3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v3 < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v11 = *(id *)(v5 + 8 * v3 + 32);
        goto LABEL_13;
      }
      __break(1u);
LABEL_93:
      v12 = (id)MEMORY[0x23B7C6D9C](v4, v41);
      goto LABEL_17;
    }
  }
  while (1)
  {
LABEL_35:
    if (v8 < v10)
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if (v37)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v4 = v41;
    v3 = v38;
    if (v21 < v10)
      goto LABEL_81;
    if (v10 < 0)
      goto LABEL_82;
    if (v37)
    {
      swift_bridgeObjectRetain();
      v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v22 < v8)
      goto LABEL_83;
    if ((v5 & 0xC000000000000001) != 0 && v10 != v8)
    {
      if (v10 >= (unint64_t)v8)
        goto LABEL_96;
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
      v23 = v10;
      do
      {
        v7 = v23 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v23);
        v23 = v7;
      }
      while (v8 != v7);
    }
    if (v37)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      v8 = v24;
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = (2 * v8) | 1;
      swift_bridgeObjectRetain();
    }
    v5 = v36;
    if (v38 < v9)
      goto LABEL_84;
    if (v36)
    {
      swift_bridgeObjectRetain();
      v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v25 < v9)
      goto LABEL_85;
    if (v9 < 0)
      goto LABEL_86;
    if (v36)
    {
      swift_bridgeObjectRetain();
      v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v26 >= v38)
      break;
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    v11 = (id)MEMORY[0x23B7C6D9C](v3, v5);
LABEL_13:
    v10 = (Swift::Int)v11;
    v39 = v41 & 0xC000000000000001;
    if ((v41 & 0xC000000000000001) != 0)
      goto LABEL_93;
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    if (v4 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_95;
    v12 = *(id *)(v41 + 8 * v4 + 32);
LABEL_17:
    v13 = v12;
    a2 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    v14 = static NSObject.== infix(_:_:)();

    v9 = v38;
    v10 = v8;
    if ((v14 & 1) != 0)
    {
      while (1)
      {
        if (!v3 || !v4)
        {
          v9 = v4;
          v10 = v3;
          goto LABEL_35;
        }
        v17 = v3 - 1;
        if (__OFSUB__(v3, 1))
          break;
        v18 = v4 - 1;
        if (__OFSUB__(v4, 1))
          goto LABEL_73;
        if (v40)
        {
          v19 = (id)MEMORY[0x23B7C6D9C](v3 - 1, v5);
        }
        else
        {
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_74;
          if (v17 >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_75;
          v19 = *(id *)(v5 + 32 + 8 * v17);
        }
        v20 = v19;
        if (v39)
        {
          v15 = (id)MEMORY[0x23B7C6D9C](v4 - 1, v41);
        }
        else
        {
          if ((v18 & 0x8000000000000000) != 0)
            goto LABEL_76;
          if (v18 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_77;
          v15 = *(id *)(v41 + 32 + 8 * v18);
        }
        v16 = v15;
        v7 = static NSObject.== infix(_:_:)();

        v9 = v4;
        v10 = v3;
        --v4;
        --v3;
        if ((v7 & 1) == 0)
          goto LABEL_35;
      }
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
  }
  if ((v41 & 0xC000000000000001) != 0 && v9 != v38)
  {
    if (v9 >= (unint64_t)v38)
    {
LABEL_97:
      __break(1u);
      return;
    }
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    v27 = v9;
    do
    {
      v28 = v27 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v27);
      v27 = v28;
    }
    while (v38 != v28);
  }
  if (v36)
  {
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.subscript.getter();
    v30 = v32;
    v9 = v33;
    v31 = v34;
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = v41 & 0xFFFFFFFFFFFFFF8;
    v30 = (v41 & 0xFFFFFFFFFFFFFF8) + 32;
    v31 = (2 * v38) | 1;
    swift_bridgeObjectRetain();
  }
  *a1 = v29;
  a1[1] = v30;
  a1[2] = v9;
  a1[3] = v31;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for UUID();
    return a2;
  }
  return result;
}

uint64_t TextEffectsRenderer.updateDisplacementAndBounds(changed:)(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  double v21;
  double v22;
  double v23;
  double v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  char v28;
  void *v29;
  char *v30;
  uint64_t v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double *v36;
  double v37;
  double *v38;
  CGFloat v39;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL IsNull;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  CGFloat v53;
  double v54;
  _BOOL4 v55;
  _BOOL4 v56;
  double v57;
  double v58;
  double v59;
  double v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat *v65;
  uint64_t result;
  uint64_t v67;
  char v68;
  void *v69;
  void *v70;
  _QWORD v71[2];
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  int v85;
  double v86;
  double v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v71 - v9;
  v11 = *MEMORY[0x24BDBF070];
  v12 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v13 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v14 = *(double *)(MEMORY[0x24BDBF070] + 24);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v72 = v1;
    v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    v18 = v15;
    v19 = v15 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v88 = *(_QWORD *)(v4 + 72);
    v89 = v20;
    v71[1] = v18;
    swift_bridgeObjectRetain();
    v87 = 0.0;
    v21 = v11;
    v22 = v12;
    v23 = v13;
    v24 = v14;
    v76 = v11;
    v75 = v12;
    v74 = v13;
    v73 = v14;
    while (1)
    {
      v89(v10, v19, v3);
      v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v25(v10, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
      swift_beginAccess();
      v26 = *v17;
      if (*(_QWORD *)(*v17 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v28 & 1) != 0))
      {
        v81 = v24;
        v82 = v23;
        v83 = v22;
        v84 = v21;
        v85 = a1;
        v29 = *(void **)(*(_QWORD *)(v26 + 56) + 8 * v27);
        swift_endAccess();
        v30 = v29;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        v31 = *(_QWORD *)&v30[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        v32 = *(double *)(v31
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds);
        v33 = *(double *)(v31
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                        + 8);
        v34 = *(double *)(v31
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                        + 16);
        v35 = *(double *)(v31
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds
                        + 24);
        v36 = (double *)(v31
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement);
        v86 = *v36;
        v37 = v36[2];
        v78 = v36[1];
        v77 = v36[3];
        v38 = (double *)&v30[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement];
        swift_beginAccess();
        v79 = *v38;
        v39 = v87;
        *v38 = v87;
        v90.origin.x = v32;
        v90.origin.y = v33;
        v90.size.width = v34;
        v90.size.height = v35;
        v91 = CGRectOffset(v90, 0.0, v39);
        x = v91.origin.x;
        y = v91.origin.y;
        width = v91.size.width;
        height = v91.size.height;
        IsNull = CGRectIsNull(v91);
        v80 = v37;
        if (!IsNull)
        {
          v45 = v77;
          v46 = -v77;
          v47 = -v37;
          v92.origin.x = x;
          v92.origin.y = y;
          v92.size.width = width;
          v92.size.height = height;
          v93 = CGRectStandardize(v92);
          v48 = v78 == v45 ? v45 : v78;
          v49 = v93.origin.x - v48;
          v50 = v93.origin.y - v86;
          v51 = v93.size.width - (v46 - v78);
          v52 = v93.size.height - (v47 - v86);
          v94.origin.x = v93.origin.x - v48;
          v94.origin.y = v93.origin.y - v86;
          v94.size.width = v51;
          v94.size.height = v52;
          v53 = CGRectGetWidth(v94);
          x = v76;
          y = v75;
          width = v74;
          height = v73;
          if (v53 >= 0.0)
          {
            v95.origin.x = v49;
            v95.origin.y = v50;
            v95.size.width = v51;
            v95.size.height = v52;
            x = v49;
            y = v50;
            width = v51;
            height = v52;
            if (CGRectGetHeight(v95) < 0.0)
            {
              x = v76;
              y = v75;
              width = v74;
              height = v73;
            }
          }
        }
        v54 = v87;
        v55 = v79 != v87;
        v96.origin.y = v83;
        v96.origin.x = v84;
        v96.size.height = v81;
        v96.size.width = v82;
        v100.origin.x = x;
        v100.origin.y = y;
        v100.size.width = width;
        v100.size.height = height;
        v97 = CGRectUnion(v96, v100);
        v21 = v97.origin.x;
        v22 = v97.origin.y;
        v23 = v97.size.width;
        v24 = v97.size.height;
        v87 = v54 + v86 + v80;
        swift_endAccess();

        a1 = v55 | v85;
      }
      else
      {
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
      v19 += v88;
      if (!--v16)
      {
        v1 = v72;
        goto LABEL_18;
      }
    }
    v1 = v72;
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
    v21 = v11;
    v22 = v12;
    v23 = v13;
    v24 = v14;
LABEL_18:
    v25(v10, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  v98.origin.x = v21;
  v98.origin.y = v22;
  v98.size.width = v23;
  v98.size.height = v24;
  v56 = CGRectIsNull(v98);
  if (v56)
    v57 = 0.0;
  else
    v57 = v21;
  if (v56)
    v58 = 0.0;
  else
    v58 = v22;
  if (v56)
    v59 = 0.0;
  else
    v59 = v23;
  if (v56)
    v60 = 0.0;
  else
    v60 = v24;
  v99.origin.x = CGRect.outset(by:)(0.0, *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding), 0.0, *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding), v57, v58, v59, v60);
  v61 = v99.origin.x;
  v62 = v99.origin.y;
  v63 = v99.size.width;
  v64 = v99.size.height;
  v65 = (CGFloat *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds);
  result = CGRectEqualToRect(v99, *(CGRect *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds));
  if ((result & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return result;
  }
  else
  {
    *v65 = v61;
    v65[1] = v62;
    v65[2] = v63;
    v65[3] = v64;
  }
  v67 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags;
  v68 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags) = v68 | 4;
  if ((v68 & 1) == 0)
  {
    if ((v68 & 2) == 0
      || (v69 = (void *)MEMORY[0x23B7C9E44](v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate),
          _NSTextCustomRenderingDelegateSetNeedsLayoutForInteraction(v69),
          result = swift_unknownObjectRelease(),
          (*(_BYTE *)(v1 + v67) & 4) != 0))
    {
      v70 = (void *)MEMORY[0x23B7C9E44](v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
      _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(v70);
      result = swift_unknownObjectRelease();
    }
    *(_BYTE *)(v1 + v67) = 0;
  }
  return result;
}

uint64_t type metadata accessor for TextRenderSurface()
{
  return objc_opt_self();
}

id @objc TextRenderLayer.action(for:forKey:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;

  v5 = objc_allocWithZone(MEMORY[0x24BDBCEF8]);
  v6 = a3;
  v7 = a1;
  v8 = objc_msgSend(v5, sel_init);

  return v8;
}

void TextEffectsRenderer.contentsScale.didset(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - v7;
  if (*(double *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale) == a1)
    return;
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  v10 = *v9;
  v11 = *(_QWORD *)(*v9 + 64);
  v34 = *v9 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v35 = (unint64_t)(v12 + 63) >> 6;
  v33 = v35 - 1;
  swift_bridgeObjectRetain();
  v15 = 0;
  if (!v14)
    goto LABEL_9;
LABEL_7:
  v20 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v21 = v20 | (v15 << 6);
  while (2)
  {
    v22 = *(_QWORD *)(v10 + 48);
    v23 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v5, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v23);
    v24 = *(_QWORD *)(v10 + 56);
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    v26 = v25;
    v27 = *(void **)(v24 + 8 * v21);
    *(_QWORD *)&v5[*(int *)(v25 + 48)] = v27;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v5, 0, 1, v25);
    v28 = v27;
    while (1)
    {
      outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v5, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v8, 1, v26) == 1)
      {
        swift_release();
        return;
      }
      v16 = *(char **)&v8[*(int *)(v26 + 48)];
      v17 = *(_BYTE **)&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] |= 1u;
      v18 = v17;
      objc_msgSend(v18, sel_setNeedsLayout);

      v19 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v8, v19);
      if (v14)
        goto LABEL_7;
LABEL_9:
      v29 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v35)
      {
        v30 = *(_QWORD *)(v34 + 8 * v29);
        if (v30)
          goto LABEL_12;
        v31 = v15 + 2;
        ++v15;
        if (v29 + 1 < v35)
        {
          v30 = *(_QWORD *)(v34 + 8 * v31);
          if (v30)
            goto LABEL_15;
          v15 = v29 + 1;
          if (v29 + 2 < v35)
          {
            v30 = *(_QWORD *)(v34 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_12;
            }
            v31 = v29 + 3;
            v15 = v29 + 2;
            if (v29 + 3 < v35)
              break;
          }
        }
      }
LABEL_26:
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      v26 = v32;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v5, 1, 1, v32);
      v14 = 0;
    }
    v30 = *(_QWORD *)(v34 + 8 * v31);
    if (v30)
    {
LABEL_15:
      v29 = v31;
LABEL_12:
      v14 = (v30 - 1) & v30;
      v21 = __clz(__rbit64(v30)) + (v29 << 6);
      v15 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v35)
    {
      v15 = v33;
      goto LABEL_26;
    }
    v30 = *(_QWORD *)(v34 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_12;
  }
LABEL_31:
  __break(1u);
}

id TextEffectsRenderer.init()()
{
  _BYTE *v0;
  objc_class *ObjectType;
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  char *v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap] = MEMORY[0x24BEE4B00];
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs] = v2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments] = v2;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds];
  *v3 = 0u;
  v3[1] = 0u;
  v4 = &v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds];
  *v4 = 0u;
  v4[1] = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] = 0;
  type metadata accessor for TextEffectsAnimationController();
  v5 = swift_allocObject();
  v6 = v0;
  TextEffectsAnimationController.init()();
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController] = v5;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LayerGeometryObserver()), sel_init);
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale] = 0x3FF0000000000000;

  v9.receiver = v6;
  v9.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  return v7;
}

uint64_t TextEffectsRenderer.notifyStateObservers(with:time:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v35 - v7;
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  v10 = *v9;
  v11 = *(_QWORD *)(*v9 + 64);
  v36 = *v9 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v35 = v37 - 1;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  if (!v14)
    goto LABEL_8;
LABEL_6:
  v22 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v23 = v22 | (v16 << 6);
  while (2)
  {
    v24 = *(_QWORD *)(v10 + 48);
    v25 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v5, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v25);
    v26 = *(_QWORD *)(v10 + 56);
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    v28 = v27;
    v29 = *(void **)(v26 + 8 * v23);
    *(_QWORD *)&v5[*(int *)(v27 + 48)] = v29;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v5, 0, 1, v27);
    v30 = v29;
    while (1)
    {
      outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v5, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v8, 1, v28) == 1)
        return swift_release();
      v17 = *(char **)&v8[*(int *)(v28 + 48)];
      v18 = *(id *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      swift_bridgeObjectRetain();
      v19 = swift_bridgeObjectRetain();
      v20 = specialized _NativeSet.intersection(_:)(v19, a1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
      swift_bridgeObjectRelease();
      TextRenderLayer.updateActive(animations:)(v20);

      swift_release();
      v21 = type metadata accessor for UUID();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v8, v21);
      if (v14)
        goto LABEL_6;
LABEL_8:
      v31 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v31 < v37)
      {
        v32 = *(_QWORD *)(v36 + 8 * v31);
        if (v32)
          goto LABEL_11;
        v33 = v16 + 2;
        ++v16;
        if (v31 + 1 < v37)
        {
          v32 = *(_QWORD *)(v36 + 8 * v33);
          if (v32)
            goto LABEL_14;
          v16 = v31 + 1;
          if (v31 + 2 < v37)
          {
            v32 = *(_QWORD *)(v36 + 8 * (v31 + 2));
            if (v32)
            {
              v31 += 2;
              goto LABEL_11;
            }
            v33 = v31 + 3;
            v16 = v31 + 2;
            if (v31 + 3 < v37)
              break;
          }
        }
      }
LABEL_25:
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      v28 = v34;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 1, 1, v34);
      v14 = 0;
    }
    v32 = *(_QWORD *)(v36 + 8 * v33);
    if (v32)
    {
LABEL_14:
      v31 = v33;
LABEL_11:
      v14 = (v32 - 1) & v32;
      v23 = __clz(__rbit64(v32)) + (v31 << 6);
      v16 = v31;
      continue;
    }
    break;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v37)
    {
      v16 = v35;
      goto LABEL_25;
    }
    v32 = *(_QWORD *)(v36 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

Swift::Void __swiftcall TextEffectsRenderer.notifyDisplayLinkObservers(with:)(SwiftUI::Time with)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v1;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v38 - v8;
  v10 = *v3;
  v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  v12 = *v11;
  v13 = *(_QWORD *)(*v11 + 64);
  v42 = *v11 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  v39 = v17 - 1;
  swift_bridgeObjectRetain();
  v18 = 0;
  v40 = v12 + 104;
  v41 = v17 - 5;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_7;
    }
    v29 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v29 >= v17)
    {
      v31 = v18;
    }
    else
    {
      v30 = *(_QWORD *)(v42 + 8 * v29);
      if (v30)
        goto LABEL_11;
      v31 = v18 + 1;
      if (v18 + 2 < v17)
      {
        v30 = *(_QWORD *)(v42 + 8 * (v18 + 2));
        if (v30)
        {
          v29 = v18 + 2;
          goto LABEL_11;
        }
        v31 = v18 + 2;
        if (v18 + 3 < v17)
        {
          v30 = *(_QWORD *)(v42 + 8 * (v18 + 3));
          if (v30)
          {
            v29 = v18 + 3;
LABEL_11:
            v16 = (v30 - 1) & v30;
            v21 = __clz(__rbit64(v30)) + (v29 << 6);
            v18 = v29;
LABEL_7:
            v22 = *(_QWORD *)(v12 + 48);
            v23 = type metadata accessor for UUID();
            (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v6, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v23);
            v24 = *(_QWORD *)(v12 + 56);
            type metadata accessor for (key: UUID, value: TextRenderSurface)();
            v26 = v25;
            v27 = *(void **)(v24 + 8 * v21);
            *(_QWORD *)&v6[*(int *)(v25 + 48)] = v27;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 0, 1, v25);
            v28 = v27;
            goto LABEL_14;
          }
          v29 = v18 + 4;
          v31 = v18 + 3;
          if (v18 + 4 < v17)
          {
            v30 = *(_QWORD *)(v42 + 8 * v29);
            if (v30)
              goto LABEL_11;
            while (v41 != v18)
            {
              v30 = *(_QWORD *)(v40 + 8 * v18++);
              if (v30)
              {
                v29 = v18 + 4;
                goto LABEL_11;
              }
            }
            v31 = v39;
          }
        }
      }
    }
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    v26 = v32;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v6, 1, 1, v32);
    v16 = 0;
    v18 = v31;
LABEL_14:
    outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v6, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v9, 1, v26) == 1)
    {
      swift_release();
      return;
    }
    v33 = *(char **)&v9[*(int *)(v26 + 48)];
    v34 = *(char **)&v33[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
    *(_QWORD *)&v34[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time] = v10;
    v35 = &v34[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_activeIdentifiers];
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v35 + 16))
    {
      v43 = v10;
      v36 = v34;
      v37 = swift_bridgeObjectRetain();
      TextRenderLayer.updateLayers(for:at:chunk:)(v37, &v43, 1);
      swift_bridgeObjectRelease();
      v36[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] |= 2u;
      objc_msgSend(v36, sel_setNeedsLayout);

      v33 = v36;
    }

    v19 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v9, v19);
  }
  __break(1u);
}

void specialized TextEffectsRenderer.updateForStaticRendering(with:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  char v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  id v47;
  void *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  void *v57;
  id v58;
  id v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  CFTimeInterval v84[4];

  v2 = type metadata accessor for UUID();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v80 = (char *)&v72 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v83 = (char *)&v72 - v10;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  v79 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v78 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v81 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v72 - v16;
  v84[0] = CACurrentMediaTime();
  TextEffectsAnimationController.displayLinkUpdate(at:removeFinished:)((uint64_t *)v84, 0);
  v76 = a1;
  v77 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v19 = *(_QWORD *)(v18 + 16);
  v75 = v18;
  if (v19)
  {
    v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    v21 = v18 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v22 = *(_QWORD *)(v4 + 72);
    v82 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain();
    v73 = v2;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v82)(v17, v21, v2);
      v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56);
      v23(v17, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v17, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v17, v2);
      swift_beginAccess();
      v24 = *v20;
      if (*(_QWORD *)(*v20 + 16) && (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v26 & 1) != 0))
      {
        v27 = *(void **)(*(_QWORD *)(v24 + 56) + 8 * v25);
        swift_endAccess();
        v28 = v27;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
        v29 = v4;
        v30 = v20;
        v31 = v6;
        v32 = v23;
        v33 = v22;
        v34 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
        objc_msgSend(*(id *)&v28[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer], sel_setNeedsLayout);
        v35 = *(void **)&v28[v34];
        v22 = v33;
        v23 = v32;
        v6 = v31;
        v20 = v30;
        v4 = v29;
        v2 = v73;
        objc_msgSend(v35, sel_layoutIfNeeded);

      }
      else
      {
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
      }
      v21 += v22;
      if (!--v19)
        goto LABEL_10;
    }
  }
  else
  {
    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
LABEL_10:
    v23(v17, 1, 1, v2);
  }
  v36 = (uint64_t)v81;
  v38 = v76;
  v37 = v77;
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(v38 + v37);
  v40 = *(_QWORD *)(v38 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v41 = *(_QWORD *)(v39 + 16);
  v42 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  swift_bridgeObjectRetain();
  v82 = v40;
  swift_bridgeObjectRetain();
  v77 = v41;
  if (v41)
  {
    v43 = 0;
    v74 = (uint64_t *)(v38 + v42);
    v44 = v82 & 0xFFFFFFFFFFFFFF8;
    if (v82 < 0)
      v45 = v82;
    else
      v45 = v82 & 0xFFFFFFFFFFFFFF8;
    v72 = v45;
    v75 = v82 & 0xC000000000000001;
    v76 = (unint64_t)v82 >> 62;
    while (v43 < *(_QWORD *)(v39 + 16))
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v36, v39+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v43, v2);
      v23((char *)v36, 0, 1, v2);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v36, 1, v2) == 1)
        goto LABEL_32;
      v46 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      v46(v83, v36, v2);
      if (v76)
      {
        swift_bridgeObjectRetain();
        v71 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v43 == v71)
        {
LABEL_33:
          (*(void (**)(char *, uint64_t))(v4 + 8))(v83, v2);
          goto LABEL_34;
        }
      }
      else if (v43 == *(_QWORD *)(v44 + 16))
      {
        goto LABEL_33;
      }
      if (v75)
      {
        v47 = (id)MEMORY[0x23B7C6D9C](v43, v82);
      }
      else
      {
        if (v43 >= *(_QWORD *)(v44 + 16))
          goto LABEL_36;
        v47 = *(id *)(v82 + 8 * v43 + 32);
      }
      v48 = v47;
      v49 = v78;
      v50 = *(int *)(v79 + 48);
      v46(v78, (uint64_t)v83, v2);
      *(_QWORD *)&v49[v50] = v48;
      v51 = v80;
      v46(v80, (uint64_t)v49, v2);
      v52 = (uint64_t)v51;
      v53 = v74;
      swift_beginAccess();
      v54 = *v53;
      if (*(_QWORD *)(v54 + 16) && (v55 = specialized __RawDictionaryStorage.find<A>(_:)(v52), (v56 & 1) != 0))
      {
        v57 = *(void **)(*(_QWORD *)(v54 + 56) + 8 * v55);
        swift_endAccess();
        v58 = v57;
        (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v52, v2);
        v59 = v58;
        objc_msgSend(v48, sel_layoutFragmentFrame, v72);
        objc_msgSend(v59, sel_adjustedLayoutFragmentFrame_);
        v61 = v60;
        v63 = v62;
        v65 = v64;
        v67 = v66;
        v68 = objc_msgSend(v59, sel_layer);
        objc_msgSend(v68, sel_setFrame_, v61, v63, v65, v67);

        v69 = objc_msgSend(v59, sel_layer);
        objc_msgSend(v69, sel_setBounds_, v61, v63, v65, v67);

        v70 = objc_msgSend(v59, sel_layer);
        objc_msgSend(v70, sel_layoutIfNeeded);

      }
      else
      {
        swift_endAccess();

        (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v52, v2);
      }
      v36 = (uint64_t)v81;
      if (v77 == ++v43)
        goto LABEL_31;
    }
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
LABEL_31:
    v23((char *)v36, 1, 1, v2);
LABEL_32:
    outlined destroy of Any?(v36, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_34:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t TextEffectsRenderer.drawStatic(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v27[9];
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a1;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v27 - v8;
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    v13 = v10 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    swift_bridgeObjectRetain();
    v14 = 0;
    v27[7] = v3;
    v27[8] = v2;
    v27[5] = v9;
    v27[6] = v5;
    v28 = v10;
    v27[3] = v12;
    v27[4] = v11;
    v27[2] = v13;
    while (1)
    {
      if (v14 >= *(_QWORD *)(v10 + 16))
      {
        __break(1u);
        JUMPOUT(0x234BA7908);
      }
      v15 = *(_QWORD *)(v3 + 72);
      v30 = v14;
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v9, v13 + v15 * v14, v2);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v29(v9, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
      swift_beginAccess();
      v16 = *v12;
      if (*(_QWORD *)(*v12 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v18 & 1) != 0))
      {
        v19 = v11;
        v20 = v13;
        v21 = *(void **)(*(_QWORD *)(v16 + 56) + 8 * v17);
        swift_endAccess();
        v22 = v21;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v23 = *(_QWORD *)&v22[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer]
            + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v23 + 16))
        {
          v24 = swift_bridgeObjectRetain();
          v31 = v22;
          v32 = v24;
          __asm { BR              X9 }
        }

        v13 = v20;
        v11 = v19;
        v10 = v28;
      }
      else
      {
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }
      v14 = v30 + 1;
      if (v30 + 1 == v11)
      {
        v29(v9, 1, 1, v2);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
    v25(v9, 1, 1, v2);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *TextEffectsRenderer.baselineOffsets.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  char *v20;
  id v21;
  _QWORD v23[2];
  uint64_t *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  _QWORD *v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v23 - v7;
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v10 = *(_QWORD *)(v9 + 16);
  v23[1] = v9;
  if (v10)
  {
    v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    v12 = v9 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v13 = *(_QWORD *)(v2 + 72);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain();
    v24 = v11;
    while (1)
    {
      v25(v8, v12, v1);
      v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v14(v8, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
      swift_beginAccess();
      v15 = *v11;
      if (*(_QWORD *)(*v11 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v17 & 1) != 0))
      {
        v18 = *(void **)(*(_QWORD *)(v15 + 56) + 8 * v16);
        swift_endAccess();
        v19 = v13;
        v20 = v18;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        v21 = *(id *)&v20[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        TextRenderLayer.appendBaselineOffsets(to:)(&v26);

        v13 = v19;
        v11 = v24;

      }
      else
      {
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      }
      v12 += v13;
      if (!--v10)
        goto LABEL_10;
    }
  }
  else
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain();
LABEL_10:
    v14(v8, 1, 1, v1);
  }
  swift_bridgeObjectRelease();
  return v26;
}

double TextEffectsRenderer.drawingBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  char *v24;
  id v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  CGRect v39;
  CGRect v40;
  CGRect v41;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v36 - v7;
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
    v17 = v13 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v18 = *(_QWORD *)(v2 + 72);
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    v36 = v16;
    swift_bridgeObjectRetain();
    v37 = v18;
    while (1)
    {
      v38(v8, v17, v1);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v19(v8, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
      swift_beginAccess();
      v20 = *v15;
      if (*(_QWORD *)(*v15 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v22 & 1) != 0))
      {
        v23 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v21);
        swift_endAccess();
        v24 = v23;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        v25 = *(id *)&v24[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        TextRenderLayer.drawingBounds.getter();
        v27 = v26;
        v29 = v28;
        v31 = v30;
        v33 = v32;

        v39.origin.x = x;
        v39.origin.y = y;
        v39.size.width = width;
        v39.size.height = height;
        v41.origin.x = v27;
        v41.origin.y = v29;
        v41.size.width = v31;
        v41.size.height = v33;
        v40 = CGRectUnion(v39, v41);
        x = v40.origin.x;
        y = v40.origin.y;
        width = v40.size.width;
        height = v40.size.height;

        v18 = v37;
      }
      else
      {
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      }
      v17 += v18;
      if (!--v14)
      {
        v19(v8, 1, 1, v1);
        break;
      }
    }
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain();
    v34(v8, 1, 1, v1);
  }
  swift_bridgeObjectRelease();
  return x;
}

uint64_t type metadata accessor for TextEffectsRenderer()
{
  return objc_opt_self();
}

Swift::Void __swiftcall TextEffectsRenderer.postLayoutNotify()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;

  v1 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags;
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags);
  if ((v2 & 2) != 0)
  {
    v3 = (void *)MEMORY[0x23B7C9E44](v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
    _NSTextCustomRenderingDelegateSetNeedsLayoutForInteraction(v3);
    swift_unknownObjectRelease();
    v2 = *(_BYTE *)(v0 + v1);
  }
  if ((v2 & 4) != 0)
  {
    v4 = (void *)MEMORY[0x23B7C9E44](v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
    _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(v4);
    swift_unknownObjectRelease();
  }
  *(_BYTE *)(v0 + v1) = 0;
}

void specialized TextEffectsRenderer.endLayout(with:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  char *v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  Class v43;
  unint64_t v44;
  char v45;
  char v46;
  CGFloat v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  void (*v65)(char *, unint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  void *v68;
  objc_class *v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  _OWORD *v77;
  uint64_t v78;
  id v79;
  char *v80;
  id v81;
  unint64_t v82;
  unint64_t *v83;
  id v84;
  char *v85;
  void *v86;
  char *v87;
  id v88;
  CGFloat v89;
  int v90;
  _QWORD *v91;
  char v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  double *v113;
  uint64_t v114;
  id v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  double *v121;
  uint64_t v122;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v127;
  CGFloat v128;
  double v129;
  double v130;
  double v131;
  CGFloat v132;
  double *v133;
  _BOOL4 v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  int64_t v154;
  CGFloat v155;
  CGFloat v156;
  CGFloat v157;
  _QWORD *v158;
  uint64_t v159;
  objc_super v160;
  objc_super v161;
  __int128 v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v146 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)&v156 = (char *)&v136 - v6;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v148 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v136 - v11;
  v140 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v14 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v16 = (unint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments);
  swift_beginAccess();
  v138 = v16;
  v17 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = specialized updatedIdentifiers<A, B>(a:b:makeIdentifier:)(v13, v15, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v2;
  swift_bridgeObjectRelease();
  v20 = swift_bridgeObjectRetain();
  v21 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  *(double *)&v22 = COERCE_DOUBLE(specialized _NativeSet.subtracting<A>(_:)(v18, v21));
  v23 = swift_bridgeObjectRetain();
  v24 = specialized Set.init<A>(_:)(v23);
  v137 = v18;
  swift_bridgeObjectRelease();
  v139 = v14;
  v25 = swift_bridgeObjectRetain();
  v26 = v24;
  v27 = v3;
  v147 = specialized _NativeSet.subtracting<A>(_:)(v25, v26);
  swift_bridgeObjectRelease();
  v28 = 0;
  v29 = *(_QWORD *)(v22 + 56);
  *(_QWORD *)&v153 = v22 + 56;
  v155 = *(double *)&v22;
  v30 = 1 << *(_BYTE *)(v22 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v145 = a1;
  v154 = (unint64_t)(v30 + 63) >> 6;
  v152 = *(double *)&v19;
  v151 = *(double *)&v27;
  *(_QWORD *)&v157 = a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  while (1)
  {
    if (v32)
    {
      v36 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v37 = v36 | (v28 << 6);
      goto LABEL_22;
    }
    v38 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    v39 = v148;
    if (v38 >= v154)
      goto LABEL_27;
    v40 = *(_QWORD *)(*(_QWORD *)&v153 + 8 * v38);
    ++v28;
    if (!v40)
    {
      v28 = v38 + 1;
      if (v38 + 1 >= v154)
        goto LABEL_27;
      v40 = *(_QWORD *)(*(_QWORD *)&v153 + 8 * v28);
      if (!v40)
      {
        v28 = v38 + 2;
        if (v38 + 2 >= v154)
          goto LABEL_27;
        v40 = *(_QWORD *)(*(_QWORD *)&v153 + 8 * v28);
        if (!v40)
          break;
      }
    }
LABEL_21:
    v32 = (v40 - 1) & v40;
    v37 = __clz(__rbit64(v40)) + (v28 << 6);
LABEL_22:
    v42 = *(_QWORD *)(v27 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v12, *(_QWORD *)(*(_QWORD *)&v155 + 48) + v42 * v37, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v12, 0, 1, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v12, 1, v19) == 1)
    {
      swift_release();
      v39 = v148;
      goto LABEL_28;
    }
    v43 = *(Class *)&v156;
    (*(void (**)(CGFloat, char *, uint64_t))(v27 + 32))(COERCE_CGFLOAT(*(_QWORD *)&v156), v12, v19);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v43);
    v33 = *(double *)&v19;
    v46 = v45;
    swift_bridgeObjectRelease();
    v35 = 0;
    if ((v46 & 1) != 0)
    {
      v47 = v157;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49 = **(_QWORD **)&v47;
      v159 = **(_QWORD **)&v47;
      **(_QWORD **)&v47 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v49 = v159;
      }
      *(double *)&v27 = v151;
      v33 = v152;
      (*(void (**)(unint64_t, double))(*(_QWORD *)&v151 + 8))(*(_QWORD *)(v49 + 48) + v44 * v42, COERCE_DOUBLE(*(_QWORD *)&v152));
      v34 = v159;
      v35 = *(void **)(*(_QWORD *)(v159 + 56) + 8 * v44);
      specialized _NativeDictionary._delete(at:)(v44, v159);
      **(_QWORD **)&v47 = v34;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();

    (*(void (**)(CGFloat, double))(v27 + 8))(COERCE_CGFLOAT(*(_QWORD *)&v156), COERCE_DOUBLE(*(_QWORD *)&v33));
    *(double *)&v19 = v33;
  }
  v41 = v38 + 3;
  if (v41 < v154)
  {
    v40 = *(_QWORD *)(*(_QWORD *)&v153 + 8 * v41);
    if (!v40)
    {
      while (1)
      {
        v28 = v41 + 1;
        if (__OFADD__(v41, 1))
          break;
        if (v28 >= v154)
          goto LABEL_27;
        v40 = *(_QWORD *)(*(_QWORD *)&v153 + 8 * v28);
        ++v41;
        if (v40)
          goto LABEL_21;
      }
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_76;
LABEL_63:
      if ((v27 & 0xC000000000000001) != 0)
      {
        v105 = (id)MEMORY[0x23B7C6D9C](0, v27);
      }
      else
      {
        if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_99:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        v105 = *(id *)(v27 + 32);
      }
      v106 = v105;
      swift_bridgeObjectRelease();
      v107 = objc_msgSend(v106, sel_textLayoutManager);

      v108 = 0;
      if (v107)
      {
        v109 = objc_msgSend(v107, sel_textContainer);

        if (v109)
        {
          objc_msgSend(v109, sel_lineFragmentPadding);
          v108 = v110;

        }
      }
      goto LABEL_77;
    }
    v28 = v41;
    goto LABEL_21;
  }
LABEL_27:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v12, 1, 1, v19);
  swift_release();
LABEL_28:
  v50 = 0;
  v51 = *(_QWORD *)(v147 + 56);
  v141 = v147 + 56;
  v52 = 1 << *(_BYTE *)(v147 + 32);
  if (v52 < 64)
    v53 = ~(-1 << v52);
  else
    v53 = -1;
  v54 = v53 & v51;
  v144 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController;
  v143 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver;
  v142 = (unint64_t)(v52 + 63) >> 6;
  v28 = v145;
  v55 = (uint64_t)v146;
  while (2)
  {
    if (v54)
    {
      v58 = __clz(__rbit64(v54));
      v59 = (v54 - 1) & v54;
      v60 = v58 | (v50 << 6);
LABEL_50:
      v64 = *(_QWORD *)(v27 + 72);
      v65 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
      v65(v39, *(_QWORD *)(v147 + 48) + v64 * v60, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v39, 0, 1, v19);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v39, 1, v19) == 1)
        goto LABEL_61;
      v149 = v64;
      v150 = *(double *)&v65;
      v153 = *(double *)&v59;
      v154 = v50;
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v55, v39, v19);
      v156 = COERCE_DOUBLE(type metadata accessor for TextRenderSurface());
      v66 = (char *)objc_allocWithZone(*(Class *)&v156);
      *(_QWORD *)&v155 = &v66[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer];
      swift_unknownObjectWeakInit();
      *(_QWORD *)&v66[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement] = 0;
      v67 = *(_QWORD *)(v28 + v144);
      v68 = *(void **)(v28 + v143);
      v69 = (objc_class *)type metadata accessor for TextRenderLayer();
      v70 = objc_allocWithZone(v69);
      swift_unknownObjectWeakInit();
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment] = 0;
      v71 = (uint64_t)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout];
      _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(&v162);
      outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v162, v71, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
      v72 = &v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_rawLayout];
      *(_OWORD *)v72 = 0u;
      *((_OWORD *)v72 + 1) = 0u;
      *((_QWORD *)v72 + 4) = 0;
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers] = 0;
      v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] = 0;
      v73 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers] = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectToSegmentsIndices] = MEMORY[0x24BEE4B00];
      v74 = MEMORY[0x24BEE4B08];
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectIdentifiers] = MEMORY[0x24BEE4B08];
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version] = -1;
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements] = v73;
      v75 = &v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
      *v75 = 0u;
      v75[1] = 0u;
      v76 = &v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets];
      *v76 = 0u;
      v76[1] = 0u;
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutLineFragmentPadding] = 0;
      v77 = &v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement];
      *v77 = 0u;
      v77[1] = 0u;
      *(_QWORD *)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_activeIdentifiers] = v74;
      v78 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
      v79 = (id)v28;
      v80 = v66;
      swift_retain();
      v81 = v68;
      v28 = v70;
      *(CFTimeInterval *)&v70[v78] = CACurrentMediaTime();
      *(_QWORD *)(v28 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController) = v67;
      swift_unknownObjectWeakAssign();
      v82 = specialized Dictionary.init(dictionaryLiteral:)(v73);
      v83 = (unint64_t *)(v28
                               + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
      *v83 = v82;
      v83[1] = 0;
      swift_retain();

      v161.receiver = (id)v28;
      v161.super_class = v69;
      v84 = objc_msgSendSuper2(&v161, sel_init);
      v55 = (uint64_t)v146;
      swift_release();

      *(_QWORD *)&v80[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer] = v84;
      swift_unknownObjectWeakAssign();

      v160.receiver = v80;
      *(CGFloat *)&v160.super_class = v156;
      v85 = (char *)objc_msgSendSuper2(&v160, sel_init);
      v86 = *(void **)&v85[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      v87 = v85;
      v88 = v86;
      objc_msgSend(v88, sel_setDelegate_, v87);

      v89 = v157;
      swift_beginAccess();
      v90 = swift_isUniquelyReferenced_nonNull_native();
      v158 = **(_QWORD ***)&v89;
      v91 = v158;
      **(_QWORD **)&v89 = 0x8000000000000000;
      *(double *)&v27 = COERCE_DOUBLE(specialized __RawDictionaryStorage.find<A>(_:)(v55));
      v93 = v91[2];
      v94 = (v92 & 1) == 0;
      v95 = v93 + v94;
      if (__OFADD__(v93, v94))
      {
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v96 = v92;
      if (v91[3] >= v95)
      {
        v28 = v145;
        if ((v90 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v95, v90);
        v97 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
        v28 = v145;
        if ((v96 & 1) != (v98 & 1))
          goto LABEL_99;
        v27 = v97;
      }
      v39 = v148;
      v99 = v158;
      if ((v96 & 1) != 0)
      {
        v56 = v158[7];
        v57 = 8 * v27;

        *(_QWORD *)(v56 + v57) = v87;
        *(double *)&v19 = v152;
      }
      else
      {
        v158[(v27 >> 6) + 8] |= 1 << v27;
        *(double *)&v19 = v152;
        (*(void (**)(unint64_t, uint64_t, _QWORD))&v150)(v99[6] + v27 * v149, v55, *(_QWORD *)&v152);
        *(_QWORD *)(v99[7] + 8 * v27) = v87;
        v100 = v99[2];
        v101 = __OFADD__(v100, 1);
        v102 = v100 + 1;
        if (v101)
          goto LABEL_70;
        v99[2] = v102;
      }
      **(_QWORD **)&v89 = v99;
      swift_bridgeObjectRelease();
      *(double *)&v27 = v151;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)&v151 + 8))(v55, v19);
      swift_endAccess();
      v50 = v154;
      v54 = *(_QWORD *)&v153;
      continue;
    }
    break;
  }
  v61 = v50 + 1;
  if (__OFADD__(v50, 1))
    goto LABEL_72;
  if (v61 < v142)
  {
    v62 = *(_QWORD *)(v141 + 8 * v61);
    ++v50;
    if (!v62)
    {
      v50 = v61 + 1;
      if (v61 + 1 >= v142)
        goto LABEL_60;
      v62 = *(_QWORD *)(v141 + 8 * v50);
      if (!v62)
      {
        v50 = v61 + 2;
        if (v61 + 2 >= v142)
          goto LABEL_60;
        v62 = *(_QWORD *)(v141 + 8 * v50);
        if (!v62)
        {
          v63 = v61 + 3;
          if (v63 >= v142)
            goto LABEL_60;
          v62 = *(_QWORD *)(v141 + 8 * v63);
          if (!v62)
          {
            while (1)
            {
              v50 = v63 + 1;
              if (__OFADD__(v63, 1))
                goto LABEL_74;
              if (v50 >= v142)
                goto LABEL_60;
              v62 = *(_QWORD *)(v141 + 8 * v50);
              ++v63;
              if (v62)
                goto LABEL_49;
            }
          }
          v50 = v63;
        }
      }
    }
LABEL_49:
    v59 = (v62 - 1) & v62;
    v60 = __clz(__rbit64(v62)) + (v50 << 6);
    goto LABEL_50;
  }
LABEL_60:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v39, 1, 1, v19);
LABEL_61:
  swift_release();
  v103 = v140;
  *(_QWORD *)(v28 + v140) = *v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + v139) = v137;
  swift_bridgeObjectRelease();
  specialized TextEffectsRenderer.updateKeyframes(with:)(v28);
  v27 = *(unint64_t *)(v28 + v103);
  if (v27 >> 62)
    goto LABEL_75;
  v104 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v104)
    goto LABEL_63;
LABEL_76:
  swift_bridgeObjectRelease();
  v108 = 0;
LABEL_77:
  v111 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding;
  *(_QWORD *)(v28 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding) = v108;
  v112 = *(_QWORD *)(v28 + v140);
  v113 = (double *)MEMORY[0x24BDBF070];
  if (v112 >> 62)
    goto LABEL_96;
  v114 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  v115 = (id)v28;
  while (1)
  {
    v116 = *v113;
    v117 = v113[1];
    v118 = v113[2];
    v119 = v113[3];
    if (!v114)
      break;
    v120 = 4;
    v153 = *v113;
    v152 = v117;
    v151 = v118;
    v150 = v119;
    while (1)
    {
      v121 = (v112 & 0xC000000000000001) != 0
           ? (double *)MEMORY[0x23B7C6D9C](v120 - 4, v112)
           : (double *)*(id *)(v112 + 8 * v120);
      v113 = v121;
      v122 = v120 - 3;
      if (__OFADD__(v120 - 4, 1))
        break;
      v154 = *(_QWORD *)&v119;
      v155 = v118;
      v156 = v117;
      v157 = v116;
      objc_msgSend(v121, sel_layoutFragmentFrame);
      x = v165.origin.x;
      y = v165.origin.y;
      width = v165.size.width;
      height = v165.size.height;
      v127 = *(double *)(v28 + v111);
      if (!CGRectIsNull(v165))
      {
        v166.origin.x = x;
        v166.origin.y = y;
        v166.size.width = width;
        v166.size.height = height;
        v167 = CGRectStandardize(v166);
        v128 = v167.origin.y;
        v129 = v167.origin.x - v127;
        v130 = v167.size.width - (-v127 - v127);
        v131 = v167.size.height + 0.0;
        v167.origin.x = v129;
        v167.size.width = v130;
        v167.size.height = v167.size.height + 0.0;
        v132 = CGRectGetWidth(v167);
        x = v153;
        y = v152;
        width = v151;
        height = v150;
        if (v132 >= 0.0)
        {
          v168.origin.x = v129;
          v168.origin.y = v128;
          v168.size.width = v130;
          v168.size.height = v131;
          x = v129;
          y = v128;
          width = v130;
          height = v131;
          if (CGRectGetHeight(v168) < 0.0)
          {
            x = v153;
            y = v152;
            width = v151;
            height = v150;
          }
        }
      }
      v163.origin.x = v157;
      v163.origin.y = v156;
      v163.size.width = v155;
      *(_QWORD *)&v163.size.height = v154;
      v170.origin.x = x;
      v170.origin.y = y;
      v170.size.width = width;
      v170.size.height = height;
      v164 = CGRectUnion(v163, v170);
      v116 = v164.origin.x;
      v117 = v164.origin.y;
      v118 = v164.size.width;
      v119 = v164.size.height;

      ++v120;
      if (v122 == v114)
        goto LABEL_90;
    }
    __break(1u);
LABEL_96:
    swift_bridgeObjectRetain_n();
    v135 = (id)v28;
    v114 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_90:

  swift_bridgeObjectRelease_n();
  v169.origin.x = v116;
  v169.origin.y = v117;
  v169.size.width = v118;
  v169.size.height = v119;
  if (CGRectIsNull(v169))
  {
    v118 = 0.0;
    v119 = 0.0;
    v116 = 0.0;
    v117 = 0.0;
  }
  v133 = (double *)(v28 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds);
  v171.origin.x = v116;
  v171.origin.y = v117;
  v171.size.width = v118;
  v171.size.height = v119;
  v134 = CGRectEqualToRect(*(CGRect *)(v28 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds), v171);
  if (!v134)
  {
    *v133 = v116;
    v133[1] = v117;
    v133[2] = v118;
    v133[3] = v119;
  }
  TextEffectsRenderer.updateDisplacementAndBounds(changed:)(!v134);
  TextEffectsAnimationController.restorePendingSnapshots()();
}

uint64_t specialized TextEffectsRenderer.updateKeyframes(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  id v33;
  void *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  void *v62;
  void (*v63)(uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  BOOL v75;
  id v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  void *v89;
  id v90;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  int v103;
  id v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  _QWORD v119[7];
  unsigned __int8 v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v115 = (char *)&v92 - v6;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v118 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v92 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v117 = (char *)&v92 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v110 = (char *)&v92 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v93 = (char *)&v92 - v18;
  type metadata accessor for (NSTextLayoutFragment, UUID)();
  v116 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v109 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v111 = (char *)&v92 - v22;
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion) + 1;
  v99 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion;
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion) = v23;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  v24 = (_QWORD *)swift_allocObject();
  v25 = MEMORY[0x24BEE4B08];
  v24[5] = MEMORY[0x24BEE4B08];
  v26 = MEMORY[0x24BEE4B00];
  v24[6] = MEMORY[0x24BEE4B00];
  v24[2] = v26;
  v24[3] = v26;
  v24[4] = v26;
  swift_beginAccess();
  v24[5] = v25;
  swift_bridgeObjectRelease();
  v24[7] = v23;
  v123 = v24;
  v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v94 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v121 = v27;
  v122 = 0;
  v98 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  v29 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v112 = v29;
  if (!(v28 >> 62))
  {
    v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    if (v30)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_22:
    TextEffectsAnimationController.updateKeyframes(version:)(*(_QWORD *)(a1 + v99));
    goto LABEL_23;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = v112;
  v30 = _CocoaArrayWrapper.endIndex.getter();
  v31 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
  if (!v30)
    goto LABEL_21;
LABEL_3:
  v107 = v30;
  v105 = 0;
  v32 = 0;
  v114 = *(_QWORD *)(v29 + 16);
  v106 = (uint64_t *)(a1 + v31[18]);
  v113 = v28 & 0xC000000000000001;
  v97 = a1;
  v96 = v4;
  v95 = v12;
  v108 = v28;
  while (1)
  {
    v33 = v113 ? (id)MEMORY[0x23B7C6D9C](v32, v28) : *(id *)(v28 + 8 * v32 + 32);
    v34 = v33;
    if (v114 == v32)
      break;
    if (v32 >= *(_QWORD *)(v29 + 16))
    {
      __break(1u);
      goto LABEL_20;
    }
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v4, v29+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v32, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) == 1)
      goto LABEL_16;
    v35 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v35(v12, v4, v7);
    v36 = *(int *)(v116 + 48);
    v37 = v111;
    v38 = &v111[v36];
    *(_QWORD *)v111 = v34;
    v35(&v37[v36], v12, v7);
    v35(v118, v38, v7);
    v39 = v106;
    swift_beginAccess();
    v40 = *v39;
    if (*(_QWORD *)(v40 + 16) && (v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v118), (v42 & 1) != 0))
    {
      v43 = *(void **)(*(_QWORD *)(v40 + 56) + 8 * v41);
      swift_endAccess();
      v44 = v43;
      v104 = v44;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v118, v7);
      v46 = v121;
      v45 = v122;
      v47 = *(_QWORD *)(a1 + v99);
      v48 = *(void **)&v44[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      swift_bridgeObjectRetain();
      v49 = v48;
      TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(v34, v46, v45, v47, (uint64_t)v119);
      v101 = v119[0];
      v102 = v34;
      v50 = v119[1];
      v51 = v119[2];
      v52 = v119[3];
      v53 = v119[4];
      v54 = v119[5];
      v100 = v119[6];
      v103 = v120;
      swift_bridgeObjectRelease();

      Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(v101, v50, v51, v52, v53, v54, v100, (uint64_t)&v121);
      v4 = v96;
      swift_bridgeObjectRelease();
      a1 = v97;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v105 |= v103;
    }
    else
    {
      swift_endAccess();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v118, v7);
    }
    ++v32;
    v28 = v108;
    v29 = v112;
    if (v107 == v32)
      goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
LABEL_16:

  outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v105 & 1) == 0)
    goto LABEL_22;
  v55 = swift_retain();
  TextEffectsAnimationController.updateKeyframes(_:)(v55);
  swift_release();
LABEL_23:
  v56 = (uint64_t)v93;
  v57 = *(_QWORD *)(a1 + v98);
  if (*(_QWORD *)(v57 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v93, v57 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    v58 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    swift_beginAccess();
    v59 = *v58;
    if (*(_QWORD *)(*v58 + 16) && (v60 = specialized __RawDictionaryStorage.find<A>(_:)(v56), (v61 & 1) != 0))
    {
      v62 = *(void **)(*(_QWORD *)(v59 + 56) + 8 * v60);
      swift_endAccess();
      v63 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v64 = v62;
      v63(v56, v7);
      v65 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver);
      v66 = objc_msgSend(*(id *)&v64[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer], sel_superlayer);
      v67 = objc_msgSend(v66, sel_superlayer);

      v68 = *(void **)(v65 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
      *(_QWORD *)(v65 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor) = v67;

    }
    else
    {
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v56, v7);
    }
  }
  v69 = *(_QWORD *)(a1 + v94);
  v70 = *(_QWORD *)(a1 + v98);
  if (v69 >> 62)
    goto LABEL_47;
  v71 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    v72 = (uint64_t)v115;
    if (!v71)
      break;
    v73 = 0;
    v118 = *(char **)(v70 + 16);
    v113 = a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
    v114 = v69 & 0xC000000000000001;
    v74 = v110;
    while (1)
    {
      if (v114)
        v76 = (id)MEMORY[0x23B7C6D9C](v73, v69);
      else
        v76 = *(id *)(v69 + 8 * v73 + 32);
      v77 = v76;
      if (v118 == (char *)v73)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v72, 1, 1, v7);
LABEL_44:

        outlined destroy of Any?(v72, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
        goto LABEL_45;
      }
      if (v73 >= *(_QWORD *)(v70 + 16))
        break;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v72, v70+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v73, v7);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v72, 0, 1, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v72, 1, v7) == 1)
        goto LABEL_44;
      a1 = v70;
      v78 = v69;
      v79 = v71;
      v80 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      v80(v74, v72, v7);
      v81 = *(int *)(v116 + 48);
      v82 = v109;
      v83 = &v109[v81];
      *(_QWORD *)v109 = v77;
      v80(&v82[v81], (uint64_t)v74, v7);
      v80(v117, (uint64_t)v83, v7);
      v84 = (uint64_t)v117;
      v85 = (uint64_t *)v113;
      swift_beginAccess();
      v86 = *v85;
      if (*(_QWORD *)(v86 + 16) && (v87 = specialized __RawDictionaryStorage.find<A>(_:)(v84), (v88 & 1) != 0))
      {
        v89 = *(void **)(*(_QWORD *)(v86 + 56) + 8 * v87);
        swift_endAccess();
        v90 = v89;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v117, v7);

      }
      else
      {
        swift_endAccess();

        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v84, v7);
      }
      ++v73;
      v71 = v79;
      v75 = v79 == v73;
      v72 = (uint64_t)v115;
      v69 = v78;
      v70 = a1;
      if (v75)
        goto LABEL_45;
    }
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char **p_type;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  void (*v35)(char *, unint64_t, unint64_t);
  uint64_t v36;
  char **v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  void *v62;
  void (*v63)(uint64_t, unint64_t);
  char *v64;
  id v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  void (*v74)(void);
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  void *v81;
  id v82;
  id v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  id v92;
  id v93;
  id v94;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  id v106;
  uint64_t v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  char **v111;
  _QWORD *v112;
  char **v113;
  char *v114;
  char **v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD v123[7];
  unsigned __int8 v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v121 = (unint64_t)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v119 = (char *)&v96 - v5;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (unint64_t)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v101 = (char *)&v96 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v96 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v113 = (char **)((char *)&v96 - v16);
  MEMORY[0x24BDAC7A8](v17);
  v97 = (char *)&v96 - v18;
  type metadata accessor for (NSTextLayoutFragment, UUID)();
  v120 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v112 = (uint64_t *)((char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v21);
  v115 = (char **)((char *)&v96 - v22);
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion) + 1;
  v102 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion;
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion) = v23;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  v24 = (_QWORD *)swift_allocObject();
  v25 = MEMORY[0x24BEE4B08];
  v24[5] = MEMORY[0x24BEE4B08];
  v26 = MEMORY[0x24BEE4B00];
  v24[6] = MEMORY[0x24BEE4B00];
  v24[2] = v26;
  v24[3] = v26;
  v24[4] = v26;
  swift_beginAccess();
  v24[5] = v25;
  swift_bridgeObjectRelease();
  v24[7] = v23;
  v127 = v24;
  v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v98 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  p_type = *(char ***)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v125 = v27;
  v126 = 0;
  v100 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  v29 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v116 = v29;
  if ((unint64_t)p_type >> 62)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = v116;
    v30 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v30 = *(_QWORD *)(((unint64_t)p_type & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v122 = v6;
  v114 = v14;
  if (v30)
  {
    v110 = v30;
    v108 = 0;
    v31 = 0;
    v118 = *(_QWORD *)(v29 + 16);
    v109 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    v117 = (unint64_t)p_type & 0xC000000000000001;
    v14 = v101;
    v107 = a1;
    v99 = v9;
    v111 = p_type;
    while (1)
    {
      v32 = v117 ? (char *)MEMORY[0x23B7C6D9C](v31, p_type) : p_type[v31 + 4];
      v33 = v32;
      if (v118 == v31)
        break;
      if (v31 >= *(_QWORD *)(v29 + 16))
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v34 = v121;
      (*(void (**)(unint64_t, unint64_t, unint64_t))(v7 + 16))(v121, v29+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v31, v6);
      (*(void (**)(unint64_t, _QWORD, uint64_t, unint64_t))(v7 + 56))(v34, 0, 1, v6);
      if ((*(unsigned int (**)(unint64_t, uint64_t, unint64_t))(v7 + 48))(v34, 1, v6) == 1)
        goto LABEL_18;
      v35 = *(void (**)(char *, unint64_t, unint64_t))(v7 + 32);
      v35(v14, v121, v6);
      v36 = *(int *)(v120 + 48);
      v37 = v115;
      v38 = (char *)v115 + v36;
      *v115 = v33;
      v35((char *)v37 + v36, (unint64_t)v14, v6);
      v35((char *)v9, (unint64_t)v38, v6);
      v39 = v109;
      swift_beginAccess();
      v40 = *v39;
      if (*(_QWORD *)(v40 + 16) && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v9), (v42 & 1) != 0))
      {
        v43 = *(void **)(*(_QWORD *)(v40 + 56) + 8 * v41);
        swift_endAccess();
        v44 = v43;
        v106 = v44;
        (*(void (**)(unint64_t, unint64_t))(v7 + 8))(v9, v6);
        v46 = v125;
        v45 = v126;
        v47 = *(_QWORD *)(v107 + v102);
        v48 = *(void **)&v44[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        swift_bridgeObjectRetain();
        v49 = v48;
        TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(v33, v46, v45, v47, (uint64_t)v123);
        v50 = v123[1];
        v104 = v123[0];
        v52 = v123[2];
        v51 = v123[3];
        v54 = v123[4];
        v53 = v123[5];
        v103 = v123[6];
        v105 = v124;
        swift_bridgeObjectRelease();

        Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(v104, v50, v52, v51, v54, v53, v103, (uint64_t)&v125);
        v6 = v122;
        swift_bridgeObjectRelease();
        v9 = v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = v101;
        swift_bridgeObjectRelease();
        a1 = v107;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v108 |= v105;
      }
      else
      {
        swift_endAccess();

        (*(void (**)(unint64_t, unint64_t))(v7 + 8))(v9, v6);
      }
      ++v31;
      p_type = v111;
      v29 = v116;
      if (v110 == v31)
        goto LABEL_19;
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, unint64_t))(v7 + 56))(v121, 1, 1, v6);
LABEL_18:

    outlined destroy of Any?(v121, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v108 & 1) == 0)
      goto LABEL_21;
    v55 = swift_retain();
    TextEffectsAnimationController.updateKeyframes(_:)(v55);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    TextEffectsAnimationController.updateKeyframes(version:)(*(_QWORD *)(a1 + v102));
  }
  v56 = (uint64_t)v97;
  v57 = *(_QWORD *)(a1 + v100);
  if (*(_QWORD *)(v57 + 16))
  {
    (*(void (**)(char *, unint64_t, unint64_t))(v7 + 16))(v97, v57 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v58 = a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
    swift_beginAccess();
    v59 = *(_QWORD *)v58;
    if (*(_QWORD *)(*(_QWORD *)v58 + 16)
      && (v60 = specialized __RawDictionaryStorage.find<A>(_:)(v56), (v61 & 1) != 0))
    {
      v62 = *(void **)(*(_QWORD *)(v59 + 56) + 8 * v60);
      swift_endAccess();
      v63 = *(void (**)(uint64_t, unint64_t))(v7 + 8);
      v64 = v62;
      v63(v56, v6);
      p_type = *(char ***)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver);
      v65 = objc_msgSend(*(id *)&v64[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer], sel_superlayer);
      v66 = (char *)objc_msgSend(v65, sel_superlayer);

      v67 = *(char **)((char *)p_type
                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
      *(char **)((char *)p_type
               + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor) = v66;

    }
    else
    {
      swift_endAccess();
      (*(void (**)(uint64_t, unint64_t))(v7 + 8))(v56, v6);
    }
  }
  v9 = *(_QWORD *)(a1 + v98);
  v14 = *(char **)(a1 + v100);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v68 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v68 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v69 = (uint64_t)v119;
  if (v68)
  {
    v6 = 0;
    v117 = a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
    v121 = v9 & 0xC000000000000001;
    v118 = *((_QWORD *)v14 + 2);
    while (1)
    {
      v70 = v121 ? (id)MEMORY[0x23B7C6D9C](v6, v9) : *(id *)(v9 + 8 * v6 + 32);
      v71 = v70;
      if (v118 == v6)
        break;
      if (v6 >= *((_QWORD *)v14 + 2))
        goto LABEL_46;
      v72 = v122;
      (*(void (**)(uint64_t, char *, unint64_t))(v7 + 16))(v69, &v14[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v6], v122);
      (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v7 + 56))(v69, 0, 1, v72);
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v7 + 48))(v69, 1, v72) == 1)
        goto LABEL_43;
      v73 = v68;
      v74 = *(void (**)(void))(v7 + 32);
      p_type = v113;
      ((void (*)(char **, uint64_t, unint64_t))v74)(v113, v69, v72);
      v75 = *(int *)(v120 + 48);
      v76 = v112;
      *v112 = v71;
      ((void (*)(char *, char **, unint64_t))v74)((char *)v76 + v75, p_type, v72);
      a1 = (uint64_t)v114;
      v74();
      v77 = v117;
      swift_beginAccess();
      v78 = *(_QWORD *)v77;
      if (*(_QWORD *)(*(_QWORD *)v77 + 16)
        && (v79 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v80 & 1) != 0))
      {
        v81 = *(void **)(*(_QWORD *)(v78 + 56) + 8 * v79);
        swift_endAccess();
        v82 = v81;
        (*(void (**)(uint64_t, unint64_t))(v7 + 8))(a1, v122);
        v83 = v82;
        objc_msgSend(v71, sel_layoutFragmentFrame);
        objc_msgSend(v83, sel_adjustedLayoutFragmentFrame_);
        v85 = v84;
        v87 = v86;
        v89 = v88;
        v91 = v90;
        p_type = &stru_250685FF0.type;
        v92 = objc_msgSend(v83, sel_layer);
        objc_msgSend(v92, sel_setFrame_, v85, v87, v89, v91);

        v93 = objc_msgSend(v83, sel_layer);
        objc_msgSend(v93, sel_setBounds_, v85, v87, v89, v91);

        v94 = objc_msgSend(v83, sel_layer);
        objc_msgSend(v94, sel_layoutIfNeeded);

      }
      else
      {
        swift_endAccess();

        (*(void (**)(uint64_t, unint64_t))(v7 + 8))(a1, v122);
      }
      ++v6;
      v68 = v73;
      v69 = (uint64_t)v119;
      if (v73 == v6)
        goto LABEL_44;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v7 + 56))(v69, 1, 1, v122);
LABEL_43:

    outlined destroy of Any?(v69, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
LABEL_44:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Void __swiftcall TextEffectsAnimationController.restorePendingSnapshots()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(id, _QWORD, _QWORD, uint64_t, uint64_t);
  id v23;
  _QWORD *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t *v44;
  _QWORD *v45;

  v1 = (_QWORD *)(v0 + 104);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 104);
  v41 = v0;
  v42 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRetain();
  v44 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  v6 = 0;
  v43 = (unint64_t)(v3 + 63) >> 6;
  if (v5)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_42;
    if (v10 >= v43)
      goto LABEL_39;
    v11 = *(_QWORD *)(v42 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v43)
        goto LABEL_39;
      v11 = *(_QWORD *)(v42 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v43)
          goto LABEL_39;
        v11 = *(_QWORD *)(v42 + 8 * v6);
        if (!v11)
        {
          v12 = v10 + 3;
          if (v12 < v43)
          {
            v11 = *(_QWORD *)(v42 + 8 * v12);
            if (v11)
            {
              v6 = v12;
              goto LABEL_21;
            }
            while (1)
            {
              v6 = v12 + 1;
              if (__OFADD__(v12, 1))
                goto LABEL_43;
              if (v6 >= v43)
                break;
              v11 = *(_QWORD *)(v42 + 8 * v6);
              ++v12;
              if (v11)
                goto LABEL_21;
            }
          }
LABEL_39:
          swift_release();
          *v1 = MEMORY[0x24BEE4B00];
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
LABEL_21:
    v5 = (v11 - 1) & v11;
    for (i = __clz(__rbit64(v11)) + (v6 << 6); ; i = v8 | (v6 << 6))
    {
      v13 = 8 * i;
      v14 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v13);
      v15 = *(void **)(*(_QWORD *)(v2 + 56) + v13);
      v16 = *v44;
      swift_beginAccess();
      if (specialized Set.contains(_:)(v14, *(_QWORD *)(v16 + 40)))
        break;
      swift_beginAccess();
      v17 = *(_QWORD *)(v16 + 16);
      if (!*(_QWORD *)(v17 + 16) || (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v19 & 1) == 0))
      {
        swift_endAccess();
        break;
      }
      v20 = *(_QWORD **)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_endAccess();
      v21 = *(_QWORD *)(v41 + 112);
      v22 = *(void (**)(id, _QWORD, _QWORD, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v20) + 0xC8);
      v23 = v15;
      v24 = v20;
      swift_retain();
      swift_retain();
      v22(v23, MEMORY[0x24BEE4B00], 0, v21, v41);

      swift_release();
      swift_release();
      if (!v5)
        goto LABEL_8;
LABEL_7:
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
    }
    swift_beginAccess();
    v25 = v15;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = (_QWORD *)*v1;
    v45 = (_QWORD *)*v1;
    *v1 = 0x8000000000000000;
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    v30 = v27[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (!__OFADD__(v30, v31))
    {
      v33 = v28;
      if (v27[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, isUniquelyReferenced_nonNull_native);
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_44;
        v29 = v34;
        v36 = v45;
        if ((v33 & 1) == 0)
          goto LABEL_35;
LABEL_5:
        v7 = v36[7];

        *(_QWORD *)(v7 + 8 * v29) = v25;
LABEL_6:
        *v1 = v36;
        swift_bridgeObjectRelease();
        swift_endAccess();

        if (!v5)
          continue;
        goto LABEL_7;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v36 = v45;
        if ((v28 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v36 = v45;
        if ((v33 & 1) != 0)
          goto LABEL_5;
      }
LABEL_35:
      v36[(v29 >> 6) + 8] |= 1 << v29;
      v37 = 8 * v29;
      *(_QWORD *)(v36[6] + v37) = v14;
      *(_QWORD *)(v36[7] + v37) = v25;
      v38 = v36[2];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_41;
      v36[2] = v40;
      goto LABEL_6;
    }
    break;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t TextEffectsAnimationController.updateKeyframes(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v2 = v1;
  swift_beginAccess();
  *(_QWORD *)(v2 + 112) = a1;
  swift_retain();
  swift_release();
  result = swift_beginAccess();
  v5 = 0;
  v6 = *(_QWORD *)(v2 + 80);
  v7 = v6 + 64;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v6 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v5 << 6);
      goto LABEL_5;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v14 >= v11)
      return TextEffectsAnimationController.validateInfosIfNeeded()();
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v11)
        return TextEffectsAnimationController.validateInfosIfNeeded()();
      v15 = *(_QWORD *)(v7 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v11)
          return TextEffectsAnimationController.validateInfosIfNeeded()();
        v15 = *(_QWORD *)(v7 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_5:
    result = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v6 + 56) + 8 * v13) + 80))();
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    return TextEffectsAnimationController.validateInfosIfNeeded()();
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v11)
      return TextEffectsAnimationController.validateInfosIfNeeded()();
    v15 = *(_QWORD *)(v7 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t TextEffectsAnimationController.updateKeyframes(version:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = v1 + 112;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 112) + 56) != a1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Text.Effect.Keyframes.Storage();
      swift_allocObject();
      v4 = (_QWORD *)swift_retain();
      v5 = specialized Text.Effect.Keyframes.Storage.init(_:)(v4);
      swift_release();
      *(_QWORD *)v3 = v5;
      swift_release();
    }
    *(_QWORD *)(*(_QWORD *)v3 + 56) = a1;
  }
  return swift_endAccess();
}

Swift::Void __swiftcall TextEffectsRenderer.setNeedsDisplay()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v32 - v5;
  v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  v8 = *v7;
  v9 = *(_QWORD *)(*v7 + 64);
  v34 = *v7 + 64;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v33 = v13 - 1;
  swift_bridgeObjectRetain();
  v14 = 0;
  if (!v12)
    goto LABEL_8;
LABEL_6:
  v19 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  v20 = v19 | (v14 << 6);
  while (2)
  {
    v21 = *(_QWORD *)(v8 + 48);
    v22 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v3, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v22);
    v23 = *(_QWORD *)(v8 + 56);
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    v25 = v24;
    v26 = *(void **)(v23 + 8 * v20);
    *(_QWORD *)&v3[*(int *)(v24 + 48)] = v26;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v3, 0, 1, v24);
    v27 = v26;
    while (1)
    {
      outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v3, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v6, 1, v25) == 1)
      {
        swift_release();
        return;
      }
      v15 = *(char **)&v6[*(int *)(v25 + 48)];
      v16 = *(_BYTE **)&v15[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] |= 0x90u;
      v17 = v16;
      objc_msgSend(v17, sel_setNeedsLayout);

      v18 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v6, v18);
      if (v12)
        goto LABEL_6;
LABEL_8:
      v28 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v28 < v13)
      {
        v29 = *(_QWORD *)(v34 + 8 * v28);
        if (v29)
          goto LABEL_11;
        v30 = v14 + 2;
        ++v14;
        if (v28 + 1 < v13)
        {
          v29 = *(_QWORD *)(v34 + 8 * v30);
          if (v29)
            goto LABEL_14;
          v14 = v28 + 1;
          if (v28 + 2 < v13)
          {
            v29 = *(_QWORD *)(v34 + 8 * (v28 + 2));
            if (v29)
            {
              v28 += 2;
              goto LABEL_11;
            }
            v30 = v28 + 3;
            v14 = v28 + 2;
            if (v28 + 3 < v13)
              break;
          }
        }
      }
LABEL_25:
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      v25 = v31;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v3, 1, 1, v31);
      v12 = 0;
    }
    v29 = *(_QWORD *)(v34 + 8 * v30);
    if (v29)
    {
LABEL_14:
      v28 = v30;
LABEL_11:
      v12 = (v29 - 1) & v29;
      v20 = __clz(__rbit64(v29)) + (v28 << 6);
      v14 = v28;
      continue;
    }
    break;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v13)
    {
      v14 = v33;
      goto LABEL_25;
    }
    v29 = *(_QWORD *)(v34 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
}

double TextEffectsRenderer.customTextBounds.getter()
{
  uint64_t v0;
  double v1;
  double v2;
  __int128 v4;

  v1 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
  if (v1 == 0.0)
    v2 = 1.0;
  else
    v2 = 1.0 / v1;
  v4 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds);
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v2);
  return *(double *)&v4;
}

BOOL TextEffectsRenderer.fragmentsValid.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  _BOOL8 v8;
  BOOL v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  if (v1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23B7C6D9C](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, sel_textElement);

      v8 = v7 != 0;
      ++v3;
      if (v7)
        v9 = v6 == v2;
      else
        v9 = 1;
      if (v9)
        goto LABEL_17;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain_n();
  }
  v8 = 1;
LABEL_17:
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  void *v22;
  uint64_t aBlock;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v7 = *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments];
  if (v7 >> 62)
    goto LABEL_16;
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    v10 = 4;
    while (1)
    {
      v11 = (v7 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23B7C6D9C](v10 - 4, v7) : *(id *)(v7 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      v14 = objc_msgSend(v11, sel_textElement);

      if (!v14)
        goto LABEL_12;
      ++v10;
      if (v13 == v9)
        goto LABEL_10;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = v6;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:);
  *(_QWORD *)(v16 + 24) = v15;
  v32 = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool);
  v33 = v16;
  aBlock = MEMORY[0x24BDAC760];
  v29 = 1107296256;
  v30 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer, @unowned _NSTextLayoutManagerSegmentCategory) -> (@unowned Bool);
  v31 = &block_descriptor_31;
  v17 = _Block_copy(&aBlock);
  a5 = v33;
  v18 = a1;
  v19 = v6;
  swift_retain();
  swift_release();
  _NSTextEnumerateTextSegmentsInRange(a4, (uint64_t)v18, a2, a3, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v17 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    swift_bridgeObjectRelease_n();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a5;
    *(_QWORD *)(v21 + 24) = a6;
    v32 = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool);
    v33 = v21;
    aBlock = MEMORY[0x24BDAC760];
    v29 = 1107296256;
    v30 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool);
    v31 = &block_descriptor_22;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a4, sel_enumerateTextSegmentsInRange_type_options_usingBlock_, a1, a2, a3, v22);
    _Block_release(v22);
    LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v22 & 1) != 0)
      __break(1u);
    else
      return specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t (*v15)(void *, id, double, double, double, double, double);
  id v16;
  id v17;
  char v18;

  v15 = *(uint64_t (**)(void *, id, double, double, double, double, double))(a1 + 32);
  v16 = a2;
  v17 = a3;
  v18 = v15(a2, v17, a4, a5, a6, a7, a8);

  return v18 & 1;
}

void closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, double, double, double, double, double), uint64_t a6, uint64_t a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  void (*v44)(uint64_t, char *, uint64_t);
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(uint64_t, uint64_t, double, double, double, double, double);
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  char *v87;
  double *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, double, double, double, double, double);
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111[6];
  _QWORD v112[18];
  uint64_t v113[4];
  uint64_t v114;
  CGRect v115;
  CGRect v116;

  v97 = a4;
  v94 = a3;
  v95 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v89 - v22;
  v24 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v110 = (char *)&v89 - v29;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  v106 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v105 = (uint64_t)&v89 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || (v32 = NSTextRange.textRange.getter(), v98 = v33, (v34 & 1) != 0))
  {
    v32 = NSTextRange.textRange.getter();
    v98 = v35;
    if ((v36 & 1) != 0)
    {
      a5(a1, v95, a8, a9, a10, a11, a12);
      return;
    }
  }
  v91 = a6;
  v92 = (void (*)(uint64_t, uint64_t, double, double, double, double, double))a5;
  v99 = v32;
  v37 = *(_QWORD *)(a7 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v38 = *(_QWORD *)(*(_QWORD *)(a7 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs) + 16);
  v39 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  v108 = *(_QWORD *)(a7 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v107 = v37;
  v103 = v38;
  if (!v38)
  {
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
LABEL_40:
    v43(v23, 1, 1, v24);
LABEL_41:
    outlined destroy of Any?((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_43:
    swift_bridgeObjectRelease();
    v68 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v68);
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:));
    return;
  }
  v40 = 0;
  v96 = (uint64_t *)(a7 + v39);
  v41 = v37 & 0xFFFFFFFFFFFFFF8;
  v109 = v37 & 0xFFFFFFFFFFFFFF8;
  if (v37 < 0)
    v41 = v37;
  v89 = v41;
  v90 = a1;
  v101 = v37 & 0xC000000000000001;
  v102 = (unint64_t)v37 >> 62;
  v42 = v108;
  v100 = v23;
  v104 = v27;
  while (1)
  {
    if (v40 >= *(_QWORD *)(v42 + 16))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v23, v42+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v40, v24);
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v43(v23, 0, 1, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
      goto LABEL_41;
    v44 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
    v44((uint64_t)v110, v23, v24);
    if (v102)
    {
      swift_bridgeObjectRetain();
      v67 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v40 == v67)
      {
LABEL_42:
        (*(void (**)(char *, uint64_t))(v25 + 8))(v110, v24);
        goto LABEL_43;
      }
    }
    else if (v40 == *(_QWORD *)(v109 + 16))
    {
      goto LABEL_42;
    }
    if (v101)
    {
      v45 = (id)MEMORY[0x23B7C6D9C](v40, v107);
    }
    else
    {
      if (v40 >= *(_QWORD *)(v109 + 16))
        goto LABEL_53;
      v45 = *(id *)(v107 + 8 * v40 + 32);
    }
    v46 = v45;
    v47 = v105;
    v48 = *((int *)v106 + 12);
    v44(v105, v110, v24);
    *(_QWORD *)(v47 + v48) = v46;
    v44((uint64_t)v27, (char *)v47, v24);
    v49 = objc_msgSend(v46, sel_rangeInElement, v89);
    objc_opt_self();
    v50 = (void *)swift_dynamicCastObjCClass();
    if (v50)
    {
      v51 = (char *)objc_msgSend(v50, sel_range);
      v53 = v52;

      v54 = &v51[v53];
      if (__OFADD__(v51, v53))
        goto LABEL_54;
      if ((uint64_t)v54 < (uint64_t)v51)
        goto LABEL_55;
    }
    else
    {
      v61 = objc_msgSend(objc_msgSend(v49, sel_location), sel_compare_, objc_msgSend(v49, sel_endLocation));
      swift_unknownObjectRelease();
      v62 = swift_unknownObjectRelease();
      if (v61)
        goto LABEL_28;
      v63 = objc_msgSend(v49, sel_location);
      objc_opt_self();
      v64 = (void *)swift_dynamicCastObjCClass();
      if (!v64)
      {
        v62 = swift_unknownObjectRelease();
LABEL_28:
        MEMORY[0x24BDAC7A8](v62);
        specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, implicit closure #1 in NSTextRange.textRange.getterpartial apply);

        v27 = v104;
        (*(void (**)(char *, uint64_t))(v25 + 8))(v104, v24);
        goto LABEL_9;
      }
      v51 = (char *)objc_msgSend(v64, sel_range);
      v66 = v65;

      swift_unknownObjectRelease();
      v54 = &v51[v66];
      if (__OFADD__(v51, v66))
        goto LABEL_56;
      if ((uint64_t)v54 < (uint64_t)v51)
        goto LABEL_57;
    }
    v27 = v104;
    if ((uint64_t)v99 >= (uint64_t)v51 && (uint64_t)v54 >= v98)
      break;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v104, v24);
LABEL_9:

LABEL_10:
    v42 = v108;
    ++v40;
    v23 = v100;
    if (v103 == v40)
      goto LABEL_40;
  }
  v55 = v96;
  swift_beginAccess();
  v56 = *v55;
  if (!*(_QWORD *)(v56 + 16) || (v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v27), (v58 & 1) == 0))
  {
    swift_endAccess();

    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    goto LABEL_10;
  }
  v93 = v46;
  v59 = *(char **)(*(_QWORD *)(v56 + 56) + 8 * v57);
  swift_endAccess();
  v60 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(*(_QWORD *)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer]+ OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v112, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v112, (uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v113) == 1)
  {
    v27 = v104;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v104, v24);

    goto LABEL_10;
  }
  v106 = v59;
  outlined release of TextRenderLayer.Layout?(v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v69 = *(_QWORD *)&v59[v60];
  v70 = *(_QWORD *)(v69
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                  + 8);
  v110 = *(char **)(v69
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
  v108 = v70;
  v71 = *(_QWORD *)(v69
                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
  swift_beginAccess();
  v72 = *(_QWORD *)(v71 + 112);
  v73 = (uint64_t *)(v69 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements);
  swift_beginAccess();
  v74 = *v73;
  v109 = *(_QWORD *)(*v73 + 16);
  v107 = v114;
  v75 = *(_QWORD *)(v114 + 16);
  swift_bridgeObjectRetain();
  v105 = v72;
  swift_retain();
  swift_retain();
  if (v109 == v75)
    swift_bridgeObjectRetain();
  else
    v74 = specialized Array.init(repeating:count:)(v75, 0.0, 0.0);
  v76 = v92;
  v77 = __OFSUB__(v99, v51);
  v78 = v99 - v51;
  if (v77)
    goto LABEL_58;
  v79 = v98 - (_QWORD)v99;
  if (__OFSUB__(v98, v99))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v80 = v79 + v78;
  if (__OFADD__(v79, v78))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v80 >= v78)
  {
    v111[0] = *(_QWORD *)(*(_QWORD *)&v59[v60]
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
    v81 = v107;
    swift_bridgeObjectRetain();
    v82 = Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:)(v94, v78, v80, v111, (uint64_t)v110, v108, v105, (char *)v71, v81, v74);
    v84 = v83;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v115.origin.x = a8;
    v115.origin.y = a9;
    v115.size.width = a10;
    v115.size.height = a11;
    v85 = v82 + CGRectGetMinX(v115);
    v116.origin.x = a8;
    v116.origin.y = a9;
    v116.size.width = a10;
    v116.size.height = a11;
    v86 = v84 + CGRectGetMaxX(v116);
    v87 = v106;
    v88 = (double *)&v106[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement];
    swift_beginAccess();
    v76(v90, v95, v85, *v88 + a9, v86 - v85, a11, a12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    outlined release of TextRenderLayer.Layout?(v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v104, v24);
    return;
  }
LABEL_61:
  __break(1u);
}

uint64_t implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(void *a1)
{
  Swift::String v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(33);
  v2._object = (void *)0x80000002352E0CC0;
  v2._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v2);
  v3 = objc_msgSend(a1, sel_description);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer, @unowned _NSTextLayoutManagerSegmentCategory) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t (*v17)(void *, id, uint64_t, double, double, double, double, double);
  id v18;
  id v19;

  v17 = *(uint64_t (**)(void *, id, uint64_t, double, double, double, double, double))(a1 + 32);
  v18 = a2;
  v19 = a3;
  LOBYTE(a4) = v17(a2, v19, a4, a5, a6, a7, a8, a9);

  return a4 & 1;
}

Swift::Void __swiftcall TextEffectsRenderer.invalidateTemporaryAttributes(in:)(NSTextRange in)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  char *v33;
  char *v34;
  id v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  Class isa;

  isa = in.super.isa;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - v6;
  v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 + 64);
  v41 = *v8 + 64;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v14 = (unint64_t)(v11 + 63) >> 6;
  v38 = v14 - 1;
  swift_bridgeObjectRetain();
  v15 = 0;
  v42 = v14;
  v39 = v9 + 104;
  v40 = v14 - 5;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_8;
    }
    v27 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v27 >= v42)
    {
      v29 = v15;
    }
    else
    {
      v28 = *(_QWORD *)(v41 + 8 * v27);
      if (v28)
        goto LABEL_12;
      v29 = v15 + 1;
      if ((uint64_t)(v15 + 2) < v42)
      {
        v28 = *(_QWORD *)(v41 + 8 * (v15 + 2));
        if (v28)
        {
          v27 = v15 + 2;
          goto LABEL_12;
        }
        v29 = v15 + 2;
        if ((uint64_t)(v15 + 3) < v42)
        {
          v28 = *(_QWORD *)(v41 + 8 * (v15 + 3));
          if (v28)
          {
            v27 = v15 + 3;
LABEL_12:
            v13 = (v28 - 1) & v28;
            v19 = __clz(__rbit64(v28)) + (v27 << 6);
            v15 = v27;
LABEL_8:
            v20 = *(_QWORD *)(v9 + 48);
            v21 = type metadata accessor for UUID();
            (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v4, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v21);
            v22 = *(_QWORD *)(v9 + 56);
            type metadata accessor for (key: UUID, value: TextRenderSurface)();
            v24 = v23;
            v25 = *(void **)(v22 + 8 * v19);
            *(_QWORD *)&v4[*(int *)(v23 + 48)] = v25;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v4, 0, 1, v23);
            v26 = v25;
            goto LABEL_15;
          }
          v27 = v15 + 4;
          v29 = v15 + 3;
          if ((uint64_t)(v15 + 4) < v42)
          {
            v28 = *(_QWORD *)(v41 + 8 * v27);
            if (v28)
              goto LABEL_12;
            while (v40 != v15)
            {
              v28 = *(_QWORD *)(v39 + 8 * v15++);
              if (v28)
              {
                v27 = v15 + 4;
                goto LABEL_12;
              }
            }
            v29 = v38;
          }
        }
      }
    }
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    v24 = v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v4, 1, 1, v30);
    v13 = 0;
    v15 = v29;
LABEL_15:
    outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v4, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v7, 1, v24) == 1)
    {
      swift_release();
      return;
    }
    v16 = *(char **)&v7[*(int *)(v24 + 48)];
    v31 = *(char **)&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
    v32 = *(void **)&v31[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment];
    if (v32)
    {
      v33 = v31;
      v34 = v32;
      v35 = objc_msgSend(v34, sel_rangeInElement);
      v36 = objc_msgSend(v35, sel_intersectsWithTextRange_, isa);

      if (v36)
      {
        v33[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] |= 0x90u;
        objc_msgSend(v33, sel_setNeedsLayout);
      }

      v16 = v34;
    }

    v17 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v7, v17);
  }
  __break(1u);
}

CGPoint __swiftcall TextEffectsRenderer.convertFromRenderSpace(_:)(CGPoint a1)
{
  uint64_t v1;
  double y;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  id v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  double *v72;
  double v73;
  double v74;
  int EnumCaseMultiPayload;
  uint64_t v76;
  _BOOL4 v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat width;
  CGFloat height;
  uint64_t v82;
  void *v83;
  double v84;
  double v85;
  int v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  CGFloat v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  double v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  CGFloat v119;
  double v120;
  uint64_t v121;
  double v122;
  double v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const __CTLine *v132;
  const __CTLine *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  double v148;
  double v149;
  double v150;
  CGFloat v151;
  CGFloat v152;
  char v153;
  void *v154;
  uint64_t v155;
  double v156;
  double v157;
  double v158;
  double v159;
  CGFloat v160;
  void *v161;
  uint64_t v162;
  double v163;
  void *v164;
  uint64_t v165;
  double v166;
  Swift::UInt64 *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  double v171;
  Swift::UInt64 v172;
  Swift::UInt64 v173;
  Swift::UInt64 v174;
  uint64_t v175;
  void *v176;
  id v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  double v191;
  CGFloat v192;
  CGFloat v193;
  char v194;
  double v195;
  void *v196;
  uint64_t v197;
  double v198;
  uint64_t v199;
  double v200;
  double v201;
  double v202;
  double v203;
  CGFloat v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  uint64_t *v209;
  CGFloat v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  id v218;
  void *v219;
  uint64_t v220;
  char v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t *v228;
  char v229;
  CGFloat v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  double v235;
  unint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  double v240;
  CGFloat v241;
  double v242;
  CGFloat v243;
  double v244;
  CGFloat v245;
  double v246;
  CGFloat v247;
  char v248;
  void *v249;
  id v250;
  void *v251;
  uint64_t v252;
  void *v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  unint64_t v260;
  char v261;
  uint64_t v262;
  void *v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  unint64_t v270;
  char v271;
  uint64_t v272;
  void *v273;
  id v274;
  void *v275;
  char v276;
  uint64_t v277;
  void *v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  unint64_t v285;
  char v286;
  uint64_t v287;
  void *v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  unint64_t v295;
  char v296;
  double v297;
  const __CTLine *v298;
  const __CTLine *v299;
  void *v300;
  double TypographicBounds;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  unint64_t v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  unint64_t v320;
  char v321;
  uint64_t v322;
  Swift::Int v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  double v329;
  CFIndex v330;
  double v331;
  double v332;
  const __CTLine *v333;
  CFIndex v334;
  void *v335;
  double v336;
  BOOL v337;
  const __CTLine *v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char v347;
  void *v348;
  _QWORD *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  char *v355;
  const __CTLine *v356;
  const __CTLine *v357;
  void *v358;
  CFRange StringRange;
  CFIndex v360;
  void (*v361)(CGPoint *, _QWORD);
  uint64_t v362;
  uint64_t v363;
  double (*v364)(uint64_t, uint64_t, char *, CGPoint *, uint64_t, uint64_t, uint64_t, char *);
  void *v365;
  uint64_t v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  double v375;
  double v376;
  double v377;
  unint64_t v378;
  CGFloat v379;
  unint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  _QWORD *v383;
  char v384;
  CGPoint v385;
  CGPoint result;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  void (*v395)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v396;
  id v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  double v403;
  double v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  CGFloat v409;
  uint64_t *v410;
  char *v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  char *v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  double x;
  uint64_t v430;
  double v431;
  double v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  CGFloat v446;
  CGFloat v447;
  CGFloat v448;
  CGFloat v449;
  uint64_t v450;
  uint64_t v451;
  Swift::UInt64 v452;
  uint64_t v453;
  double v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  double v461;
  void *v462;
  uint64_t v463;
  int v464;
  Swift::UInt64 v465;
  uint64_t v466;
  CGFloat v467;
  CGFloat v468;
  uint64_t v469;
  char *v470;
  double v471;
  double v472;
  char *v473;
  double v474;
  double v475;
  double v476;
  double v477;
  char *v478;
  Swift::UInt v479;
  Swift::UInt64 v480;
  uint64_t v481;
  uint64_t v482;
  double v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  double v489;
  double v490;
  Swift::UInt64 v491;
  uint64_t v492;
  char *v493;
  uint64_t v494;
  unint64_t v495;
  char *v496;
  uint64_t v497;
  double v498;
  double v499;
  CGFloat v500;
  uint64_t v501;
  CGFloat v502;
  CGFloat v503;
  double v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  Swift::UInt64 v508;
  unint64_t v509;
  CGFloat v510;
  CGFloat v511;
  double v512;
  uint64_t v513;
  uint64_t v514;
  void *v515;
  char *v516;
  CGFloat v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  CGFloat v521;
  CGFloat v522;
  CGFloat v523;
  CGFloat v524;
  double v525;
  uint64_t v526[9];
  CGPoint v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  uint64_t v532;
  CGPoint v533;
  uint64_t v534;
  double v535;
  double v536;
  double v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD v546[18];
  uint64_t v547[20];
  CFRange v548;
  CFRange v549;
  CFRange v550;
  CFRange v551;
  CFRange v552;
  CFRange v553;
  CFRange v554;
  CFRange v555;
  CFRange v556;
  CFRange v557;
  CFRange v558;
  CFRange v559;
  CFRange v560;
  CFRange v561;
  CFRange v562;
  CFRange v563;
  CFRange v564;
  CFRange v565;
  CFRange v566;
  CFRange v567;
  CFRange v568;
  CGPoint v569;
  CGPoint v570;
  CGPoint v571;
  CGPoint v572;
  CGRect v573;
  CGRect v574;
  CGRect v575;
  CGRect v576;
  CGRect v577;
  CGRect v578;
  CGRect v579;
  CGRect v580;
  CGRect v581;
  CGRect v582;
  CGRect v583;
  CGRect v584;
  CGRect v585;
  CGRect v586;
  CGRect v587;
  CGRect v588;

  y = a1.y;
  x = a1.x;
  v547[18] = *MEMORY[0x24BDAC8D0];
  v393 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x24BDAC7A8](v393);
  v394 = (uint64_t *)((char *)&v387 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v434 = v4;
  v406 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v435 = (char *)&v387 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v411 = (char *)&v387 - v7;
  v400 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v400);
  v399 = (uint64_t)&v387 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v408 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v414 = *(_QWORD *)(v408 - 8);
  MEMORY[0x24BDAC7A8](v408);
  v418 = (uint64_t)&v387 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v443 = (uint64_t)&v387 - v11;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  v427 = *(_QWORD *)(v12 - 8);
  v428 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v413 = (char *)&v387 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v16);
  v442 = (unint64_t *)((char *)&v387 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v426 = (unint64_t *)((char *)&v387 - v19);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], v14);
  MEMORY[0x24BDAC7A8](v20);
  v422 = (char *)&v387 - v21;
  v430 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v430 - 8);
  MEMORY[0x24BDAC7A8](v430);
  v24 = (char *)&v387 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v436 = (char *)&v387 - v26;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  v421 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v420 = (char *)&v387 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v30 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs) + 16);
  v31 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  v424 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v423 = v29;
  v419 = v30;
  if (!v30)
  {
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v34 = v430;
    v36 = (uint64_t)v422;
LABEL_176:
    v40(v36, 1, 1, v34);
LABEL_177:
    outlined destroy of Any?(v36, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_178:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_179;
  }
  v441 = v22;
  v32 = 0;
  v407 = (uint64_t *)(v1 + v31);
  v33 = v29 & 0xFFFFFFFFFFFFFF8;
  v433 = v29 & 0xFFFFFFFFFFFFFF8;
  if (v29 < 0)
    v33 = v29;
  v387 = v33;
  v416 = v29 + 32;
  v417 = v29 & 0xC000000000000001;
  v477 = *MEMORY[0x24BDBF070];
  v476 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v475 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v474 = *(double *)(MEMORY[0x24BDBF070] + 24);
  v34 = v430;
  v35 = v424;
  v36 = (uint64_t)v422;
  while (1)
  {
    if (v32 >= *(_QWORD *)(v35 + 16))
      goto LABEL_187;
    v37 = v441;
    v38 = v35 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
    v39 = *(_QWORD *)(v441 + 72);
    v440 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v441 + 16))(v36, v38 + v39 * v32, v34);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v40(v36, 0, 1, v34);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v36, 1, v34) == 1)
      goto LABEL_177;
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
    v41(v436, v36, v34);
    if (v423 >> 62)
    {
      swift_bridgeObjectRetain();
      v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = *(_QWORD *)(v433 + 16);
    }
    if (v440 == v42)
    {
      (*(void (**)(char *, uint64_t))(v441 + 8))(v436, v430);
      goto LABEL_178;
    }
    if (v417)
    {
      v43 = (id)MEMORY[0x23B7C6D9C](v440);
    }
    else
    {
      if (v440 >= *(_QWORD *)(v433 + 16))
        goto LABEL_188;
      v43 = *(id *)(v416 + 8 * v440);
    }
    v44 = v43;
    v45 = v420;
    v46 = *(int *)(v421 + 48);
    v47 = v430;
    v41(v420, (uint64_t)v436, v430);
    *(_QWORD *)&v45[v46] = v44;
    v34 = v47;
    v41(v24, (uint64_t)v45, v47);
    objc_msgSend(v44, sel_layoutFragmentFrame, v387);
    v569.x = x;
    v569.y = y;
    if (CGRectContainsPoint(v573, v569))
      break;
    (*(void (**)(char *, uint64_t))(v441 + 8))(v24, v47);
LABEL_6:

LABEL_7:
    v32 = v440 + 1;
    v35 = v424;
    v36 = (uint64_t)v422;
    if (v440 + 1 == v419)
      goto LABEL_176;
  }
  v48 = v407;
  swift_beginAccess();
  v49 = *v48;
  if (!*(_QWORD *)(v49 + 16) || (v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24), (v51 & 1) == 0))
  {
    swift_endAccess();

    v54 = *(void (**)(char *, uint64_t))(v441 + 8);
LABEL_22:
    v34 = v430;
    v54(v24, v430);
    goto LABEL_7;
  }
  v52 = *(char **)(*(_QWORD *)(v49 + 56) + 8 * v50);
  swift_endAccess();
  v402 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
  v53 = *(_QWORD *)&v52[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v53 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v546, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v546, (uint64_t)v547, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v547) == 1)
  {
    v34 = v430;
    (*(void (**)(char *, uint64_t))(v441 + 8))(v24, v430);
    goto LABEL_6;
  }
  v401 = v24;
  v55 = v547[4];
  v56 = (uint64_t *)(v53 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements);
  swift_beginAccess();
  v57 = *v56;
  v58 = *(double *)(v53 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds);
  v403 = *(double *)(v53 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds + 8);
  v404 = v58;
  v425 = *(_QWORD *)(v55 + 16);
  v388 = v52;
  outlined release of TextRenderLayer.Layout?(v546, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
  v405 = v57 + 32;
  v412 = v55;
  swift_bridgeObjectRetain();
  v59 = v57;
  swift_bridgeObjectRetain();
  v60 = 0;
  v409 = y;
  v395 = v40;
  v396 = v57;
  v397 = v44;
  v398 = v52;
  while (1)
  {
LABEL_25:
    if (v60 == v425)
    {
      v61 = 1;
      v439 = v425;
      v62 = v428;
      v63 = v442;
    }
    else
    {
      v62 = v428;
      if ((v60 & 0x8000000000000000) != 0)
        goto LABEL_189;
      if (v60 >= *(_QWORD *)(v412 + 16))
      {
LABEL_190:
        __break(1u);
        goto LABEL_191;
      }
      v64 = (uint64_t)&v413[*(int *)(v428 + 48)];
      outlined init with copy of TypesettingLanguage(v412+ ((*(unsigned __int8 *)(v414 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v414 + 80))+ *(_QWORD *)(v414 + 72) * v60, v64, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v65 = (uint64_t)v442 + *(int *)(v62 + 48);
      *v442 = v60;
      outlined init with take of LocalizedStringKey.FormatArgument(v64, v65, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v63 = v442;
      v61 = 0;
      v439 = v60 + 1;
    }
    v66 = v427;
    v67 = (uint64_t)v63;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v427 + 56))(v63, v61, 1, v62);
    v68 = v67;
    v69 = v426;
    outlined init with take of (key: UUID, value: TextRenderSurface)?(v68, (uint64_t)v426, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v66 + 48))(v69, 1, v62) == 1)
    {

      outlined release of TextRenderLayer.Layout?(v546, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v54 = *(void (**)(char *, uint64_t))(v441 + 8);
      v24 = v401;
      goto LABEL_22;
    }
    v70 = *v69;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v69 + *(int *)(v62 + 48), v443, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if ((v70 & 0x8000000000000000) == 0 && v70 < *(_QWORD *)(v59 + 16))
      break;
    outlined destroy of TypesettingConfiguration(v443, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v60 = v439;
  }
  v71 = v52;
  v72 = (double *)(v405 + 16 * v70);
  v73 = *v72;
  v74 = v72[1];
  outlined init with copy of TypesettingLanguage(v443, v418, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v575 = CGRectOffset(*(CGRect *)(v418 + 24), v404 + v73, v403 + v74);
    v78 = v575.origin.x;
    v79 = v575.origin.y;
    width = v575.size.width;
    height = v575.size.height;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v576.origin.x = v78;
    v576.origin.y = v79;
    v576.size.width = width;
    v576.size.height = height;
    v571.x = x;
    y = v409;
    v571.y = v409;
    v77 = CGRectContainsPoint(v576, v571);
LABEL_37:
    outlined destroy of TypesettingConfiguration(v443, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v60 = v439;
    if (v77)
    {

      outlined release of TextRenderLayer.Layout?(v546, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v441 + 8))(v401, v430);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      x = x - v73;
      y = y - v74;
      goto LABEL_179;
    }
    goto LABEL_25;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v76 = v399;
    outlined init with take of LocalizedStringKey.FormatArgument(v418, v399, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    v574 = CGRectOffset(*(CGRect *)(v76 + *(int *)(v400 + 32)), v404 + v73, v403 + v74);
    v570.x = x;
    y = v409;
    v570.y = v409;
    v77 = CGRectContainsPoint(v574, v570);
    outlined destroy of TypesettingConfiguration(v76, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    goto LABEL_37;
  }
  v83 = *(void **)(v418 + 24);
  v82 = *(uint64_t *)(v418 + 32);
  v464 = *(unsigned __int8 *)(v418 + 40);
  v84 = *(double *)(v418 + 48);
  v85 = *(double *)(v418 + 56);
  v86 = *(_DWORD *)(v418 + 64);
  v87 = *(_QWORD *)(v418 + 72);
  v389 = *(uint64_t *)(v418 + 80);
  v390 = v87;
  v88 = *(char **)&v71[v402];
  v89 = *(_QWORD *)(v418 + 88);
  v90 = *(double *)&v88[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time];
  v92 = *(uint64_t *)&v88[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap];
  v91 = *(_QWORD *)&v88[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                      + 8];
  v93 = *(char **)&v88[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController];
  swift_beginAccess();
  v94 = *((uint64_t *)v93 + 14);
  v533.x = v90;
  *(_QWORD *)&v533.y = v83;
  v534 = v82;
  LOBYTE(v535) = v464;
  v431 = v85;
  v432 = v84;
  v536 = v84;
  v537 = v85;
  v391 = v86;
  LODWORD(v538) = v86;
  v539 = v92;
  v485 = v91;
  v540 = v91;
  v541 = v94;
  v542 = v93;
  v543 = 0;
  v544 = MEMORY[0x24BEE4B00];
  v545 = MEMORY[0x24BEE4B00];
  v95 = *(_QWORD *)(v89 + 16);
  v462 = v83;
  v96 = v464;
  v461 = *(double *)&v82;
  v487 = v92;
  v493 = v93;
  v486 = v94;
  if (v95)
  {
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    v516 = v88;
    v97 = v88;
    v98 = v462;
    v99 = *(_QWORD *)&v461;
    outlined copy of Text.Layout.Line.Line(v462, *(uint64_t *)&v461, v96);
    swift_bridgeObjectRetain();
    outlined copy of Text.Layout.Line.Line(v98, v99, v96);
    swift_bridgeObjectRetain();
    v100 = v89 + 64;
    do
    {
      v101 = *(_QWORD *)(v100 + 48);
      v527 = *(CGPoint *)(v100 - 32);
      v528 = *(_OWORD *)(v100 - 16);
      v529 = *(_OWORD *)v100;
      v530 = *(_OWORD *)(v100 + 16);
      v531 = *(_OWORD *)(v100 + 32);
      v532 = v101;
      Text.Effect.Composition.Operation.appendDisplacement(to:)((uint64_t)&v533);
      v100 += 88;
      --v95;
    }
    while (v95);
    swift_bridgeObjectRelease();
    v102 = v545;
    v517 = v533.y;
    v518 = v534;
    LODWORD(v519) = LOBYTE(v535);
    v522 = *(double *)&v539;
    v521 = *(double *)&v541;
    v103 = v544;
    v520 = v542;
    v104 = v462;
    v92 = v487;
    v93 = v493;
    v94 = v486;
    v88 = v516;
  }
  else
  {
    v105 = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    v106 = v88;
    v104 = v462;
    v107 = *(_QWORD *)&v461;
    outlined copy of Text.Layout.Line.Line(v462, *(uint64_t *)&v461, v96);
    swift_bridgeObjectRetain();
    outlined copy of Text.Layout.Line.Line(v104, v107, v96);
    v520 = v93;
    v521 = *(double *)&v94;
    v522 = *(double *)&v92;
    LODWORD(v519) = v96;
    v518 = v107;
    v517 = *(double *)&v104;
    v102 = v105;
    v103 = v105;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of Text.Layout.Line.Line(*(void **)&v517, v518, v519);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(double *)&v108 = v461;
  outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v461, v464);
  swift_bridgeObjectRelease();
  v526[0] = v92;
  v526[1] = v485;
  v526[2] = v94;
  v526[3] = (uint64_t)v93;
  v109 = v477;
  v481 = v103;
  v526[4] = v103;
  v482 = v102;
  v526[5] = v102;
  v110 = v476;
  v111 = v475;
  v112 = v474;
  v113 = *(double *)&v108;
  v438 = *(_QWORD *)(v89 + 16);
  v114 = v401;
  if (!v438)
  {
LABEL_170:
    v375 = v109;
    v585 = CGRectOffset(*(CGRect *)(&v110 - 1), v404 + v73, v403 + v74);
    TypographicBounds = v585.origin.x;
    v331 = v585.origin.y;
    v572.x = x;
    v572.y = v409;
    if (CGRectContainsPoint(v585, v572))
      goto LABEL_182;
    outlined destroy of TypesettingConfiguration(v443, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
    swift_bridgeObjectRelease();
    y = v409;
    v40 = v395;
    v59 = v396;
    v44 = v397;
    v52 = v398;
    v60 = v439;
    goto LABEL_25;
  }
  v511 = *(double *)(*(_QWORD *)&v398[v402]
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
  v410 = (uint64_t *)(v94 + 24);
  v437 = v89 + 32;
  swift_bridgeObjectRetain();
  outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
  v392 = v89;
  swift_bridgeObjectRetain_n();
  v415 = v94 + 40;
  swift_beginAccess();
  v115 = 0;
  v448 = v476;
  v449 = v477;
  v446 = v474;
  v447 = v475;
  v490 = v74;
  v489 = v73;
  while (2)
  {
    v124 = (uint64_t *)(v437 + 88 * v115);
    v125 = v124[1];
    v455 = *v124;
    v114 = (char *)v124[2];
    v470 = (char *)v124[3];
    v126 = v124[4];
    v127 = *((double *)v124 + 5);
    v128 = v124[6];
    v129 = v124[7];
    v130 = v124[8];
    v131 = v124[9];
    v89 = v124[10];
    v463 = v125;
    v473 = v114;
    v458 = v129;
    v457 = *(_QWORD *)&v127;
    v456 = v128;
    v445 = v115;
    v469 = v126;
    v450 = v89;
    v451 = v131;
    if (!(v129 >> 62))
    {
      v460 = *(_QWORD *)(v89 + 16);
      if (v460)
      {
        v454 = v127;
        v453 = v128;
        v459 = v89 + 32;
        v134 = v130;
        outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
        v444 = v134;
        outlined copy of Text.Effect.Composition.Operation(v455, v125, v114, (uint64_t)v470, v469, v457, v456, v458);
        swift_bridgeObjectRetain();
        v135 = 0;
        v471 = v477;
        v472 = v476;
        v468 = v475;
        v467 = v474;
        while (1)
        {
          v166 = v113;
          v167 = (Swift::UInt64 *)(v459 + 88 * v135);
          v480 = *v167;
          v479 = v167[1];
          v168 = *((uint64_t *)v167 + 3);
          v505 = (void *)v167[2];
          v151 = *((double *)v167 + 4);
          v169 = *((uint64_t *)v167 + 5);
          v171 = *((double *)v167 + 6);
          v170 = v167[7];
          v172 = v167[8];
          v173 = v167[9];
          v174 = v167[10];
          v504 = *(double *)&v168;
          v500 = v151;
          v495 = v170;
          v494 = v169;
          v488 = *(_QWORD *)&v171;
          v466 = v135;
          v478 = (char *)v174;
          if (v170 >> 62)
          {
            v465 = v172;
            if (v170 >> 62 == 1)
            {
              if ((v469 & 1) != 0)
              {
                v175 = v173;
                v176 = v473;
                outlined copy of Text.Layout.Line.Line(v473, (uint64_t)v470, 1);
                v177 = (id)_NSTextLineFragmentGetCTLine(v176);
                if (!v177)
                  goto LABEL_197;
                v178 = v177;
                v179 = v487;
              }
              else
              {
                v175 = v173;
                v179 = v487;
                v277 = (uint64_t)v470;
                v178 = v473;
                outlined copy of Text.Layout.Line.Line(v473, (uint64_t)v470, 0);
                outlined copy of Text.Layout.Line.Line(v178, v277, 0);
                outlined copy of Text.Layout.Line.Line(v178, v277, 0);

                swift_release();
              }
              v278 = (id)_CTLineGetRunAtIndex((const __CTLine *)v178, v480);
              v533.y = 0.0;
              v533.x = 0.0;
              v525 = 0.0;
              v524 = 0.0;
              v523 = 0.0;
              v527.y = 0.0;
              v527.x = 0.0;
              v554.location = 0;
              v554.length = 1;
              CTRunGetPositions((CTRunRef)v278, v554, &v533);
              v555.location = 0;
              v555.length = 1;
              CTRunGetBaseAdvancesAndOrigins((CTRunRef)v278, v555, 0, &v527);
              v279 = v527.x;
              v280 = v527.y;
              v281 = v533.x;
              v282 = v533.y;
              v556.location = 0;
              v556.length = 0;
              CTRunGetTypographicBounds((CTRunRef)v278, v556, &v525, &v524, &v523);

              swift_release();
              v283 = v525;
              v284 = 0.0;
              if (*(_QWORD *)(v481 + 16))
              {
                v136 = (uint64_t)v505;
                v285 = specialized __RawDictionaryStorage.find<A>(_:)(0);
                v137 = v486;
                v138 = v511;
                v139 = v458;
                v140 = v457;
                v141 = v456;
                *(double *)&v142 = v504;
                v143 = v495;
                v144 = v494;
                v145 = v488;
                v146 = v465;
                v147 = v478;
                if ((v286 & 1) != 0)
                  v284 = *(double *)(*(_QWORD *)(v481 + 56) + 8 * v285);
              }
              else
              {
                v136 = (uint64_t)v505;
                v137 = v486;
                v138 = v511;
                v139 = v458;
                v140 = v457;
                v141 = v456;
                *(double *)&v142 = v504;
                v143 = v495;
                v144 = v494;
                v145 = v488;
                v146 = v465;
                v147 = v478;
              }
              v148 = v281 - v279 + v454;
              v149 = *(double *)&v453 - (v282 - v280) - v283;
              v150 = v148 + v284;
              v151 = *(double *)&v480;
              v152 = *(double *)&v479;
            }
            else
            {
              if ((v469 & 1) != 0)
              {
                v175 = v173;
                v273 = v473;
                outlined copy of Text.Layout.Line.Line(v473, (uint64_t)v470, 1);
                v274 = (id)_NSTextLineFragmentGetCTLine(v273);
                if (!v274)
                  goto LABEL_198;
                v275 = v274;
                v179 = v487;
              }
              else
              {
                v175 = v173;
                v179 = v487;
                v287 = (uint64_t)v470;
                v275 = v473;
                outlined copy of Text.Layout.Line.Line(v473, (uint64_t)v470, 0);
                outlined copy of Text.Layout.Line.Line(v275, v287, 0);
                outlined copy of Text.Layout.Line.Line(v275, v287, 0);

                swift_release();
              }
              v136 = (uint64_t)v505;
              v288 = (id)_CTLineGetRunAtIndex((const __CTLine *)v275, (CFIndex)v505);
              v533.y = 0.0;
              v533.x = 0.0;
              v525 = 0.0;
              v524 = 0.0;
              v523 = 0.0;
              v527.y = 0.0;
              v527.x = 0.0;
              v557.location = 0;
              v557.length = 1;
              CTRunGetPositions((CTRunRef)v288, v557, &v533);
              v558.location = 0;
              v558.length = 1;
              CTRunGetBaseAdvancesAndOrigins((CTRunRef)v288, v558, 0, &v527);
              v289 = v527.x;
              v290 = v527.y;
              v291 = v533.x;
              v292 = v533.y;
              v559.location = 0;
              v559.length = 0;
              CTRunGetTypographicBounds((CTRunRef)v288, v559, &v525, &v524, &v523);

              swift_release();
              v293 = v525;
              v294 = 0.0;
              if (*(_QWORD *)(v482 + 16))
              {
                v151 = *(double *)&v480;
                v152 = *(double *)&v479;
                v295 = specialized __RawDictionaryStorage.find<A>(_:)(v480, v479);
                v137 = v486;
                v138 = v511;
                v139 = v458;
                v140 = v457;
                v141 = v456;
                *(double *)&v142 = v504;
                v143 = v495;
                v144 = v494;
                v145 = v488;
                v146 = v465;
                v147 = v478;
                if ((v296 & 1) != 0)
                  v294 = *(double *)(*(_QWORD *)(v482 + 56) + 8 * v295);
              }
              else
              {
                v137 = v486;
                v138 = v511;
                v139 = v458;
                v140 = v457;
                v141 = v456;
                v151 = *(double *)&v480;
                v152 = *(double *)&v479;
                *(double *)&v142 = v504;
                v143 = v495;
                v144 = v494;
                v145 = v488;
                v146 = v465;
                v147 = v478;
              }
              v297 = v291 - v289 + v454;
              v149 = *(double *)&v453 - (v292 - v290) - v293;
              v150 = v297 + v294;
            }
            v153 = v469 & 1;
            v533.x = v151;
            v533.y = v152;
            v534 = v136;
            v535 = *(double *)&v142;
            LOBYTE(v151) = LOBYTE(v500);
            v536 = v500;
            v537 = *(double *)&v144;
            v538 = v145;
            v539 = v143;
            v540 = v146;
            v541 = v175;
            v542 = v147;
            v525 = v138;
            v154 = v473;
            *(_QWORD *)&v527.x = v473;
            v155 = (uint64_t)v470;
            *(_QWORD *)&v527.y = v470;
            LOBYTE(v528) = v469 & 1;
            *((_QWORD *)&v528 + 1) = v140;
            *(_QWORD *)&v529 = v141;
            DWORD2(v529) = v139;
            v156 = Text.Effect.Composition.Operation.metrics(at:line:context:)(&v525, (uint64_t)&v527, v179, v485, v137, (uint64_t)v493);
            v158 = v157;
            v160 = v159;
            v161 = v154;
            v162 = *(_QWORD *)&v504;
            outlined consume of Text.Layout.Line.Line(v161, v155, v153);
            v163 = v156 + v158;
            v74 = v490;
            v73 = v489;
            v113 = v461;
            v104 = v462;
            v164 = v505;
          }
          else
          {
            v492 = *(_QWORD *)(v174 + 16);
            if (v492)
            {
              v484 = v169;
              v483 = v171;
              v491 = v174 + 32;
              outlined copy of Text.Layout.Line.Line(v473, (uint64_t)v470, v469 & 1);
              v452 = v173;
              v465 = v172;
              outlined copy of Text.Effect.Composition.Operation(v480, v479, v505, *(uint64_t *)&v504, SLOBYTE(v151), v169, *(uint64_t *)&v171, v170);
              swift_bridgeObjectRetain();
              v180 = 0;
              v150 = v477;
              v149 = v476;
              v160 = v475;
              v163 = v474;
              do
              {
                v209 = (uint64_t *)(v491 + 88 * v180);
                v199 = *v209;
                v210 = *((double *)v209 + 1);
                v207 = v209[3];
                v515 = (void *)v209[2];
                v195 = *((double *)v209 + 4);
                v211 = v209[5];
                v212 = v209[6];
                v213 = *((unint64_t *)v209 + 7);
                v215 = v209[8];
                v214 = v209[9];
                v216 = v209[10];
                v508 = v199;
                v506 = v214;
                v503 = v160;
                v502 = v163;
                v501 = *(_QWORD *)&v210;
                v514 = v212;
                v507 = v215;
                if (v213 >> 62)
                {
                  v499 = v149;
                  v498 = v150;
                  v497 = v180;
                  v512 = v195;
                  v513 = v211;
                  v496 = (char *)v216;
                  if (v213 >> 62 == 1)
                  {
                    if ((LOBYTE(v151) & 1) != 0)
                    {
                      v217 = v505;
                      outlined copy of Text.Layout.Line.Line(v505, *(uint64_t *)&v504, 1);
                      v218 = (id)_NSTextLineFragmentGetCTLine(v217);
                      if (!v218)
                        goto LABEL_194;
                      v219 = v218;
                    }
                    else
                    {
                      v219 = v505;
                      v252 = *(_QWORD *)&v504;
                      outlined copy of Text.Layout.Line.Line(v505, *(uint64_t *)&v504, 0);
                      outlined copy of Text.Layout.Line.Line(v219, v252, 0);
                      outlined copy of Text.Layout.Line.Line(v219, v252, 0);

                      swift_release();
                    }
                    v195 = *(double *)&v207;
                    v253 = (id)_CTLineGetRunAtIndex((const __CTLine *)v219, v508);
                    v533.y = 0.0;
                    v533.x = 0.0;
                    v525 = 0.0;
                    v524 = 0.0;
                    v523 = 0.0;
                    v527.y = 0.0;
                    v527.x = 0.0;
                    v548.location = 0;
                    v548.length = 1;
                    CTRunGetPositions((CTRunRef)v253, v548, &v533);
                    v549.location = 0;
                    v549.length = 1;
                    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v253, v549, 0, &v527);
                    v254 = v527.x;
                    v255 = v527.y;
                    v256 = v533.x;
                    v257 = v533.y;
                    v550.location = 0;
                    v550.length = 0;
                    CTRunGetTypographicBounds((CTRunRef)v253, v550, &v525, &v524, &v523);

                    swift_release();
                    v258 = v525;
                    v259 = 0.0;
                    if (*(_QWORD *)(v481 + 16))
                    {
                      v260 = specialized __RawDictionaryStorage.find<A>(_:)(0);
                      v181 = v486;
                      v182 = v511;
                      v183 = v495;
                      v184 = v494;
                      v185 = v488;
                      v186 = (uint64_t)v515;
                      v187 = v513;
                      v188 = v514;
                      v189 = v506;
                      if ((v261 & 1) != 0)
                        v259 = *(double *)(*(_QWORD *)(v481 + 56) + 8 * v260);
                    }
                    else
                    {
                      v181 = v486;
                      v182 = v511;
                      v183 = v495;
                      v184 = v494;
                      v185 = v488;
                      v186 = (uint64_t)v515;
                      v187 = v513;
                      v188 = v514;
                      v189 = v506;
                    }
                    v190 = v483 - (v257 - v255) - v258;
                    v191 = v256 - v254 + *(double *)&v484 + v259;
                    v192 = v504;
                    v193 = *(double *)&v508;
                  }
                  else
                  {
                    if ((LOBYTE(v151) & 1) != 0)
                    {
                      v249 = v505;
                      outlined copy of Text.Layout.Line.Line(v505, *(uint64_t *)&v504, 1);
                      v250 = (id)_NSTextLineFragmentGetCTLine(v249);
                      if (!v250)
                        goto LABEL_195;
                      v251 = v250;
                    }
                    else
                    {
                      v251 = v505;
                      v262 = *(_QWORD *)&v504;
                      outlined copy of Text.Layout.Line.Line(v505, *(uint64_t *)&v504, 0);
                      outlined copy of Text.Layout.Line.Line(v251, v262, 0);
                      outlined copy of Text.Layout.Line.Line(v251, v262, 0);

                      swift_release();
                    }
                    v263 = (id)_CTLineGetRunAtIndex((const __CTLine *)v251, (CFIndex)v515);
                    v533.y = 0.0;
                    v533.x = 0.0;
                    v525 = 0.0;
                    v524 = 0.0;
                    v523 = 0.0;
                    v527.y = 0.0;
                    v527.x = 0.0;
                    v551.location = 0;
                    v551.length = 1;
                    CTRunGetPositions((CTRunRef)v263, v551, &v533);
                    v552.location = 0;
                    v552.length = 1;
                    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v263, v552, 0, &v527);
                    v264 = v527.x;
                    v265 = v527.y;
                    v266 = v533.x;
                    v267 = v533.y;
                    v553.location = 0;
                    v553.length = 0;
                    CTRunGetTypographicBounds((CTRunRef)v263, v553, &v525, &v524, &v523);

                    swift_release();
                    v268 = v525;
                    v269 = 0.0;
                    v195 = *(double *)&v207;
                    if (*(_QWORD *)(v482 + 16))
                    {
                      v270 = specialized __RawDictionaryStorage.find<A>(_:)(v508, *(Swift::UInt *)&v210);
                      v181 = v486;
                      v182 = v511;
                      v183 = v495;
                      v184 = v494;
                      v185 = v488;
                      v187 = v513;
                      v188 = v514;
                      v189 = v506;
                      if ((v271 & 1) != 0)
                        v269 = *(double *)(*(_QWORD *)(v482 + 56) + 8 * v270);
                    }
                    else
                    {
                      v181 = v486;
                      v182 = v511;
                      v183 = v495;
                      v184 = v494;
                      v185 = v488;
                      v187 = v513;
                      v188 = v514;
                      v189 = v506;
                    }
                    v190 = v483 - (v267 - v265) - v268;
                    v191 = v266 - v264 + *(double *)&v484 + v269;
                    v192 = v504;
                    v193 = *(double *)&v508;
                    v186 = (uint64_t)v515;
                  }
                  v194 = LOBYTE(v500) & 1;
                  v533.x = v193;
                  v533.y = v210;
                  v534 = v186;
                  v151 = v195;
                  v535 = v195;
                  LOBYTE(v195) = LOBYTE(v512);
                  v536 = v512;
                  v537 = *(double *)&v187;
                  v538 = v188;
                  v539 = v213;
                  v540 = v507;
                  v541 = v189;
                  v542 = v496;
                  v525 = v182;
                  v196 = v505;
                  *(_QWORD *)&v527.x = v505;
                  v527.y = v192;
                  LOBYTE(v528) = LOBYTE(v500) & 1;
                  *((_QWORD *)&v528 + 1) = v184;
                  *(_QWORD *)&v529 = v185;
                  DWORD2(v529) = v183;
                  v197 = *(_QWORD *)&v192;
                  v198 = Text.Effect.Composition.Operation.metrics(at:line:context:)(&v525, (uint64_t)&v527, v487, v485, v181, (uint64_t)v493);
                  v199 = v508;
                  v200 = v198;
                  v202 = v201;
                  v204 = v203;
                  v205 = v197;
                  v206 = v187;
                  *(double *)&v207 = v151;
                  LOBYTE(v151) = LOBYTE(v500);
                  outlined consume of Text.Layout.Line.Line(v196, v205, v194);
                  v208 = v200 + v202;
                  v74 = v490;
                  v73 = v489;
                  v149 = v499;
                  v150 = v498;
                  v180 = v497;
                }
                else
                {
                  v220 = *(_QWORD *)(v216 + 16);
                  if (v220)
                  {
                    v497 = v180;
                    v498 = v150;
                    v499 = v149;
                    v221 = LOBYTE(v151) & 1;
                    v222 = (uint64_t *)v216;
                    v223 = *(_QWORD *)&v210;
                    v510 = *(double *)&v207;
                    v513 = v211;
                    v224 = v212;
                    v225 = v220;
                    outlined copy of Text.Layout.Line.Line(v505, *(uint64_t *)&v504, v221);
                    v226 = v199;
                    v227 = v515;
                    outlined copy of Text.Effect.Composition.Operation(v226, v223, v515, *(uint64_t *)&v510, SLOBYTE(v195), v513, v224, v213);
                    swift_bridgeObjectRetain();
                    v496 = (char *)v222;
                    v228 = v222 + 7;
                    v191 = v477;
                    v190 = v476;
                    v204 = v475;
                    v208 = v474;
                    v509 = v213;
                    v512 = v195;
                    do
                    {
                      v229 = LOBYTE(v195) & 1;
                      v230 = *((double *)v228 - 2);
                      v231 = (char *)*(v228 - 1);
                      v232 = *v228;
                      v234 = *((double *)v228 + 1);
                      v233 = v228[2];
                      v235 = *((double *)v228 + 3);
                      v236 = *((unint64_t *)v228 + 4);
                      v195 = *((double *)v228 + 5);
                      v237 = v228[6];
                      v238 = (char *)v228[7];
                      *(_QWORD *)&v533.x = *(v228 - 3);
                      v522 = v533.x;
                      v533.y = v230;
                      v521 = v230;
                      v534 = (uint64_t)v231;
                      v520 = v231;
                      v535 = *(double *)&v232;
                      v519 = v232;
                      v536 = v234;
                      v537 = *(double *)&v233;
                      v518 = v233;
                      v538 = *(_QWORD *)&v235;
                      v517 = v235;
                      v539 = v236;
                      v516 = (char *)v236;
                      v540 = *(_QWORD *)&v195;
                      v541 = v237;
                      v542 = v238;
                      v525 = v511;
                      *(_QWORD *)&v527.x = v227;
                      v239 = *(_QWORD *)&v510;
                      v527.y = v510;
                      LOBYTE(v528) = v229;
                      *((_QWORD *)&v528 + 1) = v513;
                      *(_QWORD *)&v529 = v514;
                      DWORD2(v529) = v509;
                      outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&v533.x, *(uint64_t *)&v230, v231, v232, SLOBYTE(v234), v233, *(uint64_t *)&v235, v236);
                      outlined copy of Text.Layout.Line.Line(v227, v239, v229);
                      Text.Effect.Composition.Operation.bounds(at:line:context:)((uint64_t *)&v525, (uint64_t)&v527, v526);
                      v227 = v515;
                      v241 = v240;
                      v243 = v242;
                      v245 = v244;
                      v247 = v246;
                      outlined consume of Text.Layout.Line.Line(v515, v239, v229);
                      v583.origin.x = v191;
                      v583.origin.y = v190;
                      v583.size.width = v204;
                      v583.size.height = v208;
                      v588.origin.x = v241;
                      v588.origin.y = v243;
                      v588.size.width = v245;
                      v588.size.height = v247;
                      v584 = CGRectUnion(v583, v588);
                      v191 = v584.origin.x;
                      v190 = v584.origin.y;
                      v204 = v584.size.width;
                      v208 = v584.size.height;
                      LOBYTE(v195) = LOBYTE(v512);
                      outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v522, *(uint64_t *)&v521, v520, v519, SLOBYTE(v234), v518, *(uint64_t *)&v517, (unint64_t)v516);
                      v228 += 11;
                      --v225;
                    }
                    while (v225);
                    LOBYTE(v151) = LOBYTE(v500);
                    v248 = LOBYTE(v500) & 1;
                    swift_bridgeObjectRelease();
                    outlined consume of Text.Layout.Line.Line(v505, *(uint64_t *)&v504, v248);
                    v74 = v490;
                    v73 = v489;
                    v149 = v499;
                    v150 = v498;
                    v180 = v497;
                    v199 = v508;
                    v213 = v509;
                    v206 = v513;
                    *(double *)&v207 = v510;
                  }
                  else
                  {
                    v272 = *(_QWORD *)&v210;
                    v206 = v211;
                    outlined copy of Text.Effect.Composition.Operation(v199, v272, v515, v207, SLOBYTE(v195), v211, v212, v213);
                    v191 = v477;
                    v190 = v476;
                    v204 = v475;
                    v208 = v474;
                  }
                }
                ++v180;
                v581.origin.x = v150;
                v581.origin.y = v149;
                v581.size.width = v503;
                v581.size.height = v502;
                v587.origin.x = v191;
                v587.origin.y = v190;
                v587.size.width = v204;
                v587.size.height = v208;
                v582 = CGRectUnion(v581, v587);
                v150 = v582.origin.x;
                v149 = v582.origin.y;
                v160 = v582.size.width;
                v163 = v582.size.height;
                outlined consume of Text.Effect.Composition.Operation(v199, v501, v515, v207, SLOBYTE(v195), v206, v514, v213);
              }
              while (v180 != v492);
              v276 = v469 & 1;
              swift_bridgeObjectRelease();
              outlined consume of Text.Layout.Line.Line(v473, (uint64_t)v470, v276);
              v164 = v505;
              v145 = v488;
              v113 = v461;
              v104 = v462;
              v162 = *(_QWORD *)&v504;
            }
            else
            {
              v162 = *(_QWORD *)&v504;
              v145 = *(_QWORD *)&v171;
              v164 = v505;
              outlined copy of Text.Effect.Composition.Operation(v480, v479, v505, *(uint64_t *)&v504, SLOBYTE(v151), v169, v145, v170);
              v150 = v477;
              v149 = v476;
              v160 = v475;
              v163 = v474;
              v113 = v166;
              v104 = v462;
            }
          }
          v165 = v466 + 1;
          v579.origin.x = v471;
          v579.origin.y = v472;
          v579.size.width = v468;
          v579.size.height = v467;
          v586.origin.x = v150;
          v586.origin.y = v149;
          v586.size.width = v160;
          v586.size.height = v163;
          v580 = CGRectUnion(v579, v586);
          v471 = v580.origin.x;
          v472 = v580.origin.y;
          v468 = v580.size.width;
          v467 = v580.size.height;
          outlined consume of Text.Effect.Composition.Operation(v480, v479, v164, v162, SLOBYTE(v151), v494, v145, v495);
          v135 = v165;
          v93 = v493;
          if (v165 == v460)
          {
            swift_bridgeObjectRelease();
            outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
            v116 = v458;
            v117 = v457;
            v118 = v456;
            v119 = v468;
            v120 = v467;
            goto LABEL_47;
          }
        }
      }
      v340 = v114;
      v341 = *(_QWORD *)&v127;
      v117 = *(_QWORD *)&v127;
      v118 = v128;
      v116 = v129;
      outlined copy of Text.Effect.Composition.Operation(v455, v125, v340, (uint64_t)v470, v469, v341, v128, v129);
      v471 = v477;
      v472 = v476;
      v119 = v475;
      v120 = v474;
      goto LABEL_47;
    }
    v444 = v130;
    if (v129 >> 62 != 1)
    {
      if ((v464 & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
        outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
        v298 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v104);
        if (!v298)
          goto LABEL_201;
        v299 = v298;
        outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);
        outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);
        outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);

        swift_release();
        v299 = (const __CTLine *)v104;
      }
      v313 = (id)_CTLineGetRunAtIndex(v299, (CFIndex)v473);
      v533.y = 0.0;
      v533.x = 0.0;
      v525 = 0.0;
      v524 = 0.0;
      v523 = 0.0;
      v527.y = 0.0;
      v527.x = 0.0;
      v563.location = 0;
      v563.length = 1;
      CTRunGetPositions((CTRunRef)v313, v563, &v533);
      v564.location = 0;
      v564.length = 1;
      CTRunGetBaseAdvancesAndOrigins((CTRunRef)v313, v564, 0, &v527);
      v314 = v527.x;
      v315 = v527.y;
      v316 = v533.x;
      v317 = v533.y;
      v565.location = 0;
      v565.length = 0;
      CTRunGetTypographicBounds((CTRunRef)v313, v565, &v525, &v524, &v523);

      swift_release();
      v318 = v525;
      v319 = 0.0;
      if (*(_QWORD *)(v482 + 16))
      {
        v320 = specialized __RawDictionaryStorage.find<A>(_:)(v455, v463);
        if ((v321 & 1) != 0)
          v319 = *(double *)(*(_QWORD *)(v482 + 56) + 8 * v320);
      }
      v472 = v431 - (v317 - v315) - v318;
      v471 = v432 + v316 - v314 + v319;
      v322 = *(_QWORD *)v415;
      v74 = v490;
      v73 = v489;
      if (*(_QWORD *)(*(_QWORD *)v415 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v455);
        v323 = Hasher._finalize()();
        v324 = -1 << *(_BYTE *)(v322 + 32);
        v325 = v323 & ~v324;
        if (((*(_QWORD *)(v322 + 56 + ((v325 >> 3) & 0xFFFFFFFFFFFFF8)) >> v325) & 1) != 0)
        {
          v326 = *(_QWORD *)(v322 + 48);
          v327 = v455;
          if (*(_QWORD *)(v326 + 8 * v325) == v455)
          {
            outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
            v328 = v327;
LABEL_152:
            v117 = v457;
            v118 = v456;
            v116 = v458;
            outlined consume of Text.Effect.Composition.Operation(v328, v463, v473, (uint64_t)v470, v469, v457, v456, v458);
            v119 = 0.0;
            v120 = 0.0 + 0.0;
            goto LABEL_47;
          }
          v342 = ~v324;
          while (1)
          {
            v325 = (v325 + 1) & v342;
            if (((*(_QWORD *)(v322 + 56 + ((v325 >> 3) & 0xFFFFFFFFFFFFF8)) >> v325) & 1) == 0)
              break;
            if (*(_QWORD *)(v326 + 8 * v325) == v455)
              goto LABEL_150;
          }
        }
      }
      v343 = v410;
      swift_beginAccess();
      v344 = *v343;
      if (!*(_QWORD *)(v344 + 16))
      {
        swift_endAccess();
LABEL_150:
        outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
        v328 = v455;
        goto LABEL_152;
      }
      v345 = v455;
      v346 = specialized __RawDictionaryStorage.find<A>(_:)(v455);
      if ((v347 & 1) == 0)
      {
        swift_endAccess();
        outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
        v328 = v345;
        goto LABEL_152;
      }
      v348 = *(void **)(*(_QWORD *)(v344 + 56) + 8 * v346);
      swift_endAccess();
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      v349 = v348;
      RangeSet.init()();
      v350 = v470;
      if (v473 != v470)
      {
        v355 = v473;
        if ((uint64_t)v470 < (uint64_t)v473)
          goto LABEL_193;
        while ((uint64_t)v355 < (uint64_t)v350)
        {
          if ((v464 & 1) != 0)
          {
            outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
            v356 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v104);
            if (!v356)
              goto LABEL_199;
            v357 = v356;
            outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);
            outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);

            swift_release();
            v357 = (const __CTLine *)v104;
          }
          v358 = (id)_CTLineGetRunAtIndex(v357, (CFIndex)v355);
          StringRange = CTRunGetStringRange((CTRunRef)v358);

          swift_release();
          v360 = StringRange.location + StringRange.length;
          if (__OFADD__(StringRange.location, StringRange.length))
            goto LABEL_184;
          if (v360 < StringRange.location)
            goto LABEL_185;
          *(_QWORD *)&v527.x = StringRange.location;
          *(_QWORD *)&v527.y = StringRange.location + StringRange.length;
          if (__OFSUB__(v360, StringRange.location))
            goto LABEL_186;
          if (v360 != StringRange.location)
          {
            v361 = (void (*)(CGPoint *, _QWORD))RangeSet._ranges.modify();
            type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
            RangeSet.Ranges._insert(contentsOf:)();
            v361(&v533, 0);
          }
          ++v355;
          v104 = v462;
          v113 = v461;
          v93 = v493;
          if (v350 == v355)
            goto LABEL_146;
        }
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
        goto LABEL_190;
      }
LABEL_146:
      (*(void (**)(char *, char *, uint64_t))(v406 + 32))(v411, v435, v434);
      v351 = v487;
      v352 = *(_QWORD *)(v487 + 16);
      if (v352)
      {
        v353 = specialized __RawDictionaryStorage.find<A>(_:)(v455);
        if ((v354 & 1) != 0)
          v352 = *(_QWORD *)(*(_QWORD *)(v351 + 56) + 8 * v353);
        else
          v352 = 0;
      }
      v362 = v463;
      v363 = v352 + v463;
      if (__OFADD__(v352, v463))
        goto LABEL_192;
      v533.x = v511;
      v364 = *(double (**)(uint64_t, uint64_t, char *, CGPoint *, uint64_t, uint64_t, uint64_t, char *))((*MEMORY[0x24BEE4EA0] & *v349) + 0xF0);
      v365 = v349;
      v366 = v455;
      v367 = v364(v455, v363, v411, &v533, v487, v485, v486, v93);
      v369 = v368;
      v371 = v370;

      (*(void (**)(char *, uint64_t))(v406 + 8))(v411, v434);
      outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
      v372 = v366;
      v373 = v362;
      v374 = (uint64_t)v350;
      v117 = v457;
      v118 = v456;
      v116 = v458;
      outlined consume of Text.Effect.Composition.Operation(v372, v373, v473, v374, v469, v457, v456, v458);
      v119 = v371;
      v120 = v367 + v369;
LABEL_47:
      v121 = v445 + 1;
      v577.origin.y = v448;
      v577.origin.x = v449;
      v577.size.height = v446;
      v577.size.width = v447;
      v122 = v471;
      v123 = v472;
      v578 = CGRectUnion(v577, *(CGRect *)(&v119 - 2));
      v448 = v578.origin.y;
      v449 = v578.origin.x;
      v446 = v578.size.height;
      v447 = v578.size.width;
      outlined consume of Text.Effect.Composition.Operation(v455, v463, v473, (uint64_t)v470, v469, v117, v118, v116);
      v115 = v121;
      if (v121 == v438)
      {
        v89 = v392;
        swift_bridgeObjectRelease_n();
        outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
        swift_bridgeObjectRelease();
        v110 = v448;
        v109 = v449;
        v112 = v446;
        v111 = v447;
        v114 = v401;
        goto LABEL_170;
      }
      continue;
    }
    break;
  }
  if ((v464 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);
    outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);
    outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);

    swift_release();
    v133 = (const __CTLine *)v104;
    goto LABEL_112;
  }
  outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
  outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
  v132 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v104);
  if (!v132)
  {
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
  }
  v133 = v132;
  outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
LABEL_112:
  v300 = (id)_CTLineGetRunAtIndex(v133, v455);
  v533.y = 0.0;
  v533.x = 0.0;
  v525 = 0.0;
  v524 = 0.0;
  v523 = 0.0;
  v527.y = 0.0;
  v527.x = 0.0;
  v560.location = 0;
  v560.length = 1;
  CTRunGetPositions((CTRunRef)v300, v560, &v533);
  v561.location = 0;
  v561.length = 1;
  CTRunGetBaseAdvancesAndOrigins((CTRunRef)v300, v561, 0, &v527);
  TypographicBounds = v527.x;
  v302 = v527.y;
  v303 = v533.x;
  v304 = v533.y;
  v562.location = 0;
  v562.length = 0;
  CTRunGetTypographicBounds((CTRunRef)v300, v562, &v525, &v524, &v523);

  swift_release();
  v305 = v525;
  v306 = 0.0;
  if (*(_QWORD *)(v481 + 16))
  {
    v307 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if ((v308 & 1) != 0)
      v306 = *(double *)(*(_QWORD *)(v481 + 56) + 8 * v307);
  }
  v309 = v455;
  v310 = v463;
  v472 = v431 - (v304 - v302) - v305;
  v471 = v432 + v303 - TypographicBounds + v306;
  if (v455 == v463)
  {
    outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
    v311 = v309;
    v312 = v309;
    v117 = v457;
    v118 = v456;
    v116 = v458;
    outlined consume of Text.Effect.Composition.Operation(v311, v312, v473, (uint64_t)v470, v469, v457, v456, v458);
    v119 = 0.0;
    v120 = 0.0 + 0.0;
    v74 = v490;
    v73 = v489;
    goto LABEL_47;
  }
  if (v463 < v455)
  {
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  v329 = 0.0;
  v330 = v455;
  v331 = 0.0;
  v332 = 0.0;
  v74 = v490;
  v73 = v489;
  while (v330 < v310)
  {
    if ((v464 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
      v338 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v104);
      if (!v338)
        goto LABEL_196;
      v333 = v338;
      outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);
      outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, 0);

      swift_release();
      v333 = (const __CTLine *)v104;
    }
    v334 = v330 + 1;
    v335 = (id)_CTLineGetRunAtIndex(v333, v330);
    v533.y = 0.0;
    v533.x = 0.0;
    v525 = 0.0;
    v524 = 0.0;
    v523 = 0.0;
    v527.y = 0.0;
    v527.x = 0.0;
    v566.location = 0;
    v566.length = 1;
    CTRunGetPositions((CTRunRef)v335, v566, &v533);
    v567.location = 0;
    v567.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v335, v567, 0, &v527);
    v568.location = 0;
    v568.length = 0;
    TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v335, v568, &v525, &v524, &v523);

    swift_release();
    v336 = fabs(v524);
    if (v332 <= v525)
      v332 = v525;
    if (v331 <= v336)
      v331 = v336;
    v329 = v329 + TypographicBounds;
    v330 = v334;
    v310 = v463;
    v337 = v463 == v334;
    v93 = v493;
    if (v337)
    {
      v339 = v463;
      outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
      v117 = v457;
      v118 = v456;
      v116 = v458;
      outlined consume of Text.Effect.Composition.Operation(v455, v339, v473, (uint64_t)v470, v469, v457, v456, v458);
      v119 = v329;
      v120 = v332 + v331;
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_182:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)&v378 = x - v73;
  v379 = *(double *)(*(_QWORD *)&v398[v402]
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
  *(double *)&v380 = v409 - v74;
  v382 = v393;
  v381 = v394;
  *v394 = MEMORY[0x24BEE4AF8];
  outlined copy of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v464);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  swift_bridgeObjectRetain();
  RangeSet.init()();
  *(_QWORD *)((char *)v381 + *(int *)(v382 + 24)) = MEMORY[0x24BEE4B08];
  v383 = (_QWORD *)((char *)v381 + *(int *)(v382 + 28));
  *v383 = 0;
  v383[1] = 0;
  *(_QWORD *)&v533.x = v104;
  v533.y = v113;
  v384 = v464;
  LOBYTE(v534) = v464;
  v535 = v432;
  v536 = v431;
  LODWORD(v537) = v391;
  v538 = v390;
  v539 = v389;
  v540 = v89;
  v527.x = v379;
  Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(v381, (uint64_t *)&v527, v487, v485, v486, v493);
  outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v384);
  swift_bridgeObjectRelease();
  v385 = Text.Effect.InteractionMetrics.displacedPoint(from:activeOrigin:)((CGPoint)__PAIR128__(v380, v378), (CGPoint)__PAIR128__(*(unint64_t *)&v331, *(unint64_t *)&TypographicBounds));
  x = v385.x;
  y = v385.y;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  outlined release of TextRenderLayer.Layout?(v546, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
  outlined consume of Text.Layout.Line.Line(v104, *(uint64_t *)&v113, v384);
  swift_bridgeObjectRelease();
  outlined destroy of TypesettingConfiguration((uint64_t)v381, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
  outlined destroy of TypesettingConfiguration(v443, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  (*(void (**)(char *, uint64_t))(v441 + 8))(v114, v430);
LABEL_179:
  v376 = x;
  v377 = y;
  result.y = v377;
  result.x = v376;
  return result;
}

