uint64_t specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t KeyPath;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t result;
  uint64_t v105;
  void (*v106)(_BYTE *, _QWORD);
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int OffsetAttribute2;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  Swift::UInt32 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  __int128 v153;
  __int128 v154;
  unsigned __int8 v155;
  unsigned int v156;
  unsigned __int8 v157;
  unsigned int v158;
  unsigned __int8 v159;
  _BYTE v160[32];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  int v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _QWORD v168[3];

  v148 = __PAIR64__(a3, a1);
  v168[1] = *MEMORY[0x24BDAC8D0];
  v149 = MEMORY[0x24BEE4AF8];
  v12 = *MEMORY[0x24BE096C0];
  LODWORD(v150) = 0;
  HIDWORD(v150) = *MEMORY[0x24BE096C0];
  v151 = *(_QWORD *)(a2 + 48);
  v13 = v151;
  v152 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v15 = *(_QWORD *)(v151 + 16);
  if (!v15)
    goto LABEL_36;
  v16 = v14;
  v17 = (_QWORD *)(v151 + 32);
  v18 = *(_QWORD *)(v151 + 16);
  while (*v17 != v14)
  {
    v17 += 2;
    if (!--v18)
      goto LABEL_36;
  }
  v129 = HIDWORD(a6);
  v132 = HIDWORD(a5);
  v135 = a5;
  v138 = a6;
  v141 = ++lastIdentity;
  v19 = *(_OWORD *)(a2 + 32);
  v166 = *(_OWORD *)(a2 + 16);
  v167 = v19;
  v165 = *(_OWORD *)a2;
  v20 = BYTE4(v19);
  if ((WORD2(v19) & 0x100) != 0)
  {
    v105 = a4;
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    result = AGWeakAttributeGetAttribute();
    if ((_DWORD)result == v12)
    {
      __break(1u);
      return result;
    }
    LODWORD(v153) = v141;
    v106 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v153);
    v106(v160, 0);
    a4 = v105;
  }
  v144 = v151;
  v21 = *(_DWORD *)(a2 + 72);
  swift_retain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = v166;
  v23 = (unsigned int *)(v166 + 16);
  swift_beginAccess();
  v126 = a4;
  if ((v20 & 0x20) != 0)
  {
    v112 = *(_DWORD *)(a2 + 8);
    v116 = *(_QWORD *)(a2 + 16);
    v118 = *(_QWORD *)a2;
    v25 = *(_DWORD *)(a2 + 24);
    v26 = *(_QWORD *)(a2 + 32);
    v114 = *(_QWORD *)(a2 + 40);
    v120 = *(_QWORD *)(a2 + 48);
    v27 = *(_QWORD *)(a2 + 56);
    v108 = *(_QWORD *)(a2 + 72);
    v110 = *(_QWORD *)(a2 + 64);
    v107 = *(_DWORD *)(a2 + 80);
    v28 = *(_OWORD *)(a2 + 48);
    v161 = *(_OWORD *)(a2 + 32);
    v162 = v28;
    v163 = *(_OWORD *)(a2 + 64);
    v164 = *(_DWORD *)(a2 + 80);
    v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v160 = *(_OWORD *)a2;
    *(_OWORD *)&v160[16] = v29;
    outlined retain of _ViewInputs(a2);
    v30 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v123 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v22 + 81) & 1) == 0
      && (_DWORD)v110 == *(_DWORD *)(v22 + 32)
      && (_DWORD)v108 == *(_DWORD *)(v22 + 36)
      && v123 == *(_DWORD *)(v22 + 40)
      && v112 == *(_DWORD *)(v22 + 44)
      && v30 == *(_DWORD *)(v22 + 48)
      && v25 == *(_DWORD *)(v22 + 52))
    {
      if ((*(_BYTE *)(v22 + 72) & 1) == 0)
      {
        v32 = *(_DWORD *)(v22 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(_QWORD *)v160 = v118;
      *(_DWORD *)&v160[8] = v112;
      *(_QWORD *)&v160[16] = v116;
      *(_DWORD *)&v160[24] = v25;
      *(_DWORD *)&v160[28] = v30;
      *(_QWORD *)&v161 = v26;
      *((_QWORD *)&v161 + 1) = v114;
      *(_QWORD *)&v162 = v120;
      *((_QWORD *)&v162 + 1) = v27;
      *(_QWORD *)&v163 = v110;
      *((_QWORD *)&v163 + 1) = v108;
      v164 = v107;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v160, v123, (uint64_t)&v153);
      v32 = v156;
      v33 = v157;
      v34 = v159;
      v35 = v155 | ((unint64_t)v156 << 32);
      v36 = v157 | ((unint64_t)v158 << 32);
      v37 = v154;
      *(_OWORD *)(v22 + 32) = v153;
      *(_OWORD *)(v22 + 48) = v37;
      *(_QWORD *)(v22 + 64) = v35;
      *(_QWORD *)(v22 + 72) = v36;
      *(_WORD *)(v22 + 80) = v34;
      if (v33 != 1)
        goto LABEL_20;
    }
    v32 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v22 + 68) = v32;
    *(_BYTE *)(v22 + 72) = 0;
LABEL_20:
    v122 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v38 = *(_DWORD *)(a2 + 8);
    v39 = *(_DWORD *)(a2 + 24);
    v40 = *(_QWORD *)(a2 + 32);
    v119 = *(_QWORD *)(a2 + 40);
    v121 = *(_QWORD *)a2;
    v115 = *(_QWORD *)(a2 + 16);
    v117 = *(_QWORD *)(a2 + 48);
    v41 = *(_QWORD *)(a2 + 56);
    v111 = *(_QWORD *)(a2 + 72);
    v113 = *(_QWORD *)(a2 + 64);
    v109 = *(_DWORD *)(a2 + 80);
    v42 = *(_OWORD *)(a2 + 48);
    v161 = *(_OWORD *)(a2 + 32);
    v162 = v42;
    v163 = *(_OWORD *)(a2 + 64);
    v164 = *(_DWORD *)(a2 + 80);
    v43 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v160 = *(_OWORD *)a2;
    *(_OWORD *)&v160[16] = v43;
    outlined retain of _ViewInputs(a2);
    v44 = _ViewInputs.geometryTransaction()();
    v45 = swift_getKeyPath();
    v46 = specialized CachedEnvironment.attribute<A>(keyPath:)(v45);
    swift_release();
    if ((*(_BYTE *)(v22 + 81) & 1) == 0
      && (_DWORD)v113 == *(_DWORD *)(v22 + 32)
      && (_DWORD)v111 == *(_DWORD *)(v22 + 36)
      && v46 == *(_DWORD *)(v22 + 40)
      && v38 == *(_DWORD *)(v22 + 44)
      && v44 == *(_DWORD *)(v22 + 48)
      && v39 == *(_DWORD *)(v22 + 52))
    {
      if ((*(_BYTE *)(v22 + 64) & 1) == 0)
      {
        LODWORD(v24) = *(_DWORD *)(v22 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(_QWORD *)v160 = v121;
      *(_DWORD *)&v160[8] = v38;
      *(_QWORD *)&v160[16] = v115;
      *(_DWORD *)&v160[24] = v39;
      *(_DWORD *)&v160[28] = v44;
      *(_QWORD *)&v161 = v40;
      *((_QWORD *)&v161 + 1) = v119;
      *(_QWORD *)&v162 = v117;
      *((_QWORD *)&v162 + 1) = v41;
      *(_QWORD *)&v163 = v113;
      *((_QWORD *)&v163 + 1) = v111;
      v164 = v109;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v160, v46, (uint64_t)&v153);
      v47 = v154;
      v48 = v155;
      v49 = v159;
      v50 = v155 | ((unint64_t)v156 << 32);
      v51 = v157 | ((unint64_t)v158 << 32);
      *(_OWORD *)(v22 + 32) = v153;
      *(_OWORD *)(v22 + 48) = v47;
      *(_QWORD *)(v22 + 64) = v50;
      *(_QWORD *)(v22 + 72) = v51;
      *(_WORD *)(v22 + 80) = v49;
      if (v48 != 1)
      {
        v24 = HIDWORD(*((_QWORD *)&v47 + 1));
LABEL_31:
        v23 = (unsigned int *)(v22 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v24) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v22 + 60) = v24;
    *(_BYTE *)(v22 + 64) = 0;
    goto LABEL_31;
  }
  v122 = v21;
  LODWORD(v24) = *(_DWORD *)(a2 + 64);
LABEL_32:
  swift_endAccess();
  v52 = *v23;
  v53 = v165;
  v168[0] = v165;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v165);
  outlined retain of ViewTransform((uint64_t)v168);
  v54 = specialized find<A>(_:key:)(v53);
  v146 = a7;
  if (v54)
    v55 = *(_BYTE *)(v54 + 72);
  else
    v55 = 0;
  v56 = *(_DWORD *)(a2 + 68);
  v57 = *(_DWORD *)(a2 + 60);
  v58 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v168);
  outlined release of _GraphInputs((uint64_t)&v165);
  outlined release of _ViewInputs(a2);
  *(_QWORD *)v160 = v126;
  *(_DWORD *)&v160[8] = v141;
  *(_QWORD *)&v160[12] = v148;
  *(_DWORD *)&v160[20] = OffsetAttribute2;
  *(_DWORD *)&v160[24] = v122;
  *(_DWORD *)&v160[28] = v24;
  *(_QWORD *)&v161 = __PAIR64__(v57, v56);
  *((_QWORD *)&v161 + 1) = __PAIR64__(v58, v52);
  LOBYTE(v162) = v55;
  *(_QWORD *)((char *)&v162 + 4) = __PAIR64__(v132, v135);
  HIDWORD(v162) = v138;
  LODWORD(v163) = v129;
  WORD2(v163) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>();
  v59 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v160[0] = 0;
  PreferencesOutputs.subscript.setter(v59, v16, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v60);
  v13 = v144;
  a7 = v146;
LABEL_36:
  v61 = *(_QWORD *)(a2 + 16);
  v62 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v62 & 0x20) != 0)
  {
    v145 = v13;
    v147 = a7;
    v64 = *(_DWORD *)(a2 + 8);
    v140 = *(_QWORD *)(a2 + 16);
    v142 = *(_QWORD *)a2;
    v65 = *(_DWORD *)(a2 + 24);
    v66 = *(_QWORD *)(a2 + 32);
    v67 = *(_QWORD *)(a2 + 48);
    v136 = *(_QWORD *)(a2 + 40);
    v68 = *(_QWORD *)(a2 + 56);
    v130 = *(_QWORD *)(a2 + 72);
    v133 = *(_QWORD *)(a2 + 64);
    v127 = *(_DWORD *)(a2 + 80);
    v69 = *(_OWORD *)(a2 + 48);
    v161 = *(_OWORD *)(a2 + 32);
    v162 = v69;
    v163 = *(_OWORD *)(a2 + 64);
    v164 = *(_DWORD *)(a2 + 80);
    v70 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v160 = *(_OWORD *)a2;
    *(_OWORD *)&v160[16] = v70;
    outlined retain of _ViewInputs(a2);
    v71 = _ViewInputs.geometryTransaction()();
    v72 = swift_getKeyPath();
    v73 = specialized CachedEnvironment.attribute<A>(keyPath:)(v72);
    swift_release();
    if ((*(_BYTE *)(v61 + 81) & 1) == 0
      && (_DWORD)v133 == *(_DWORD *)(v61 + 32)
      && (_DWORD)v130 == *(_DWORD *)(v61 + 36)
      && v73 == *(_DWORD *)(v61 + 40)
      && v64 == *(_DWORD *)(v61 + 44)
      && v71 == *(_DWORD *)(v61 + 48)
      && v65 == *(_DWORD *)(v61 + 52))
    {
      if ((*(_BYTE *)(v61 + 72) & 1) == 0)
      {
        v74 = *(_DWORD *)(v61 + 68);
LABEL_49:
        v139 = v74;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v143 = *(_QWORD *)a2;
        v80 = *(_DWORD *)(a2 + 8);
        v137 = *(_QWORD *)(a2 + 16);
        v81 = *(_DWORD *)(a2 + 24);
        v82 = *(_QWORD *)(a2 + 32);
        v83 = *(_QWORD *)(a2 + 48);
        v134 = *(_QWORD *)(a2 + 40);
        v84 = *(_QWORD *)(a2 + 56);
        v128 = *(_QWORD *)(a2 + 72);
        v131 = *(_QWORD *)(a2 + 64);
        v125 = *(_DWORD *)(a2 + 80);
        v85 = *(_OWORD *)(a2 + 48);
        v161 = *(_OWORD *)(a2 + 32);
        v162 = v85;
        v163 = *(_OWORD *)(a2 + 64);
        v164 = *(_DWORD *)(a2 + 80);
        v86 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v160 = *(_OWORD *)a2;
        *(_OWORD *)&v160[16] = v86;
        outlined retain of _ViewInputs(a2);
        v87 = _ViewInputs.geometryTransaction()();
        v88 = swift_getKeyPath();
        v89 = specialized CachedEnvironment.attribute<A>(keyPath:)(v88);
        swift_release();
        if ((*(_BYTE *)(v61 + 81) & 1) == 0
          && (_DWORD)v131 == *(_DWORD *)(v61 + 32)
          && (_DWORD)v128 == *(_DWORD *)(v61 + 36)
          && v89 == *(_DWORD *)(v61 + 40)
          && v80 == *(_DWORD *)(v61 + 44)
          && v87 == *(_DWORD *)(v61 + 48)
          && v81 == *(_DWORD *)(v61 + 52))
        {
          v13 = v145;
          a7 = v147;
          if ((*(_BYTE *)(v61 + 64) & 1) == 0)
          {
            LODWORD(v63) = *(_DWORD *)(v61 + 60);
LABEL_61:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_62;
          }
        }
        else
        {
          *(_QWORD *)v160 = v143;
          *(_DWORD *)&v160[8] = v80;
          *(_QWORD *)&v160[16] = v137;
          *(_DWORD *)&v160[24] = v81;
          *(_DWORD *)&v160[28] = v87;
          *(_QWORD *)&v161 = v82;
          *((_QWORD *)&v161 + 1) = v134;
          *(_QWORD *)&v162 = v83;
          *((_QWORD *)&v162 + 1) = v84;
          *(_QWORD *)&v163 = v131;
          *((_QWORD *)&v163 + 1) = v128;
          v164 = v125;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v160, v89, (uint64_t)&v153);
          v90 = v154;
          v91 = v155;
          v92 = v159;
          v93 = v155 | ((unint64_t)v156 << 32);
          v94 = v157 | ((unint64_t)v158 << 32);
          *(_OWORD *)(v61 + 32) = v153;
          *(_OWORD *)(v61 + 48) = v90;
          *(_QWORD *)(v61 + 64) = v93;
          *(_QWORD *)(v61 + 72) = v94;
          *(_WORD *)(v61 + 80) = v92;
          v13 = v145;
          a7 = v147;
          if (v91 != 1)
          {
            v63 = HIDWORD(*((_QWORD *)&v90 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v63) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v61 + 60) = v63;
        *(_BYTE *)(v61 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(_QWORD *)v160 = v142;
      *(_DWORD *)&v160[8] = v64;
      *(_QWORD *)&v160[16] = v140;
      *(_DWORD *)&v160[24] = v65;
      *(_DWORD *)&v160[28] = v71;
      *(_QWORD *)&v161 = v66;
      *((_QWORD *)&v161 + 1) = v136;
      *(_QWORD *)&v162 = v67;
      *((_QWORD *)&v162 + 1) = v68;
      *(_QWORD *)&v163 = v133;
      *((_QWORD *)&v163 + 1) = v130;
      v164 = v127;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v160, v73, (uint64_t)&v153);
      v74 = v156;
      v75 = v157;
      v76 = v159;
      v77 = v155 | ((unint64_t)v156 << 32);
      v78 = v157 | ((unint64_t)v158 << 32);
      v79 = v154;
      *(_OWORD *)(v61 + 32) = v153;
      *(_OWORD *)(v61 + 48) = v79;
      *(_QWORD *)(v61 + 64) = v77;
      *(_QWORD *)(v61 + 72) = v78;
      *(_WORD *)(v61 + 80) = v76;
      if (v75 != 1)
        goto LABEL_49;
    }
    v74 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v61 + 68) = v74;
    *(_BYTE *)(v61 + 72) = 0;
    goto LABEL_49;
  }
  v139 = *(_DWORD *)(a2 + 72);
  LODWORD(v63) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  v95 = *(_DWORD *)(a2 + 60);
  type metadata accessor for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>(0);
  v96 = swift_allocObject();
  *(_QWORD *)(v96 + 48) = 0;
  *(_QWORD *)(v96 + 40) = 0;
  _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOi0_(v160);
  outlined init with take of ShapeStyledResponderData<Image.Resolved>?((uint64_t)v160, v96 + 56);
  *(_OWORD *)(v96 + 248) = 0u;
  *(_OWORD *)(v96 + 264) = 0u;
  *(_QWORD *)(v96 + 280) = 0;
  *(_QWORD *)(v96 + 288) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v96 + 296) = 0;
  *(_BYTE *)(v96 + 300) = 1;
  *(_QWORD *)(v96 + 24) = 0;
  *(_QWORD *)(v96 + 304) = 0;
  *(_QWORD *)(v96 + 312) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v97 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v97 + 200);
  v98 = *(_QWORD *)(v97 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v96 + 24) = v98;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v15)
  {
    v100 = v99;
    v101 = (_QWORD *)(v13 + 32);
    while (*v101 != v99)
    {
      v101 += 2;
      if (!--v15)
        goto LABEL_68;
    }
    *(_QWORD *)&v153 = v148;
    *((_QWORD *)&v153 + 1) = __PAIR64__(v63, v139);
    LODWORD(v154) = v95;
    *((_QWORD *)&v154 + 1) = v96;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v151);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    v102 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v153) = 0;
    PreferencesOutputs.subscript.setter(v102, v100, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v103);
    outlined release of LinearGradient((uint64_t)&v151);
  }
LABEL_68:
  result = swift_release();
  *a7 = v149;
  a7[1] = v150;
  return result;
}

void specialized _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(uint64_t a1, unsigned int a2, uint64_t a3, char a4, char a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *i;
  int v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned __int8 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int OffsetAttribute2;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t KeyPath;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  __int16 v55;
  int v56;
  unsigned int v57;
  char v58;
  char v59;
  unsigned int v60;
  _OWORD __dst[17];
  _BYTE v62[184];
  _OWORD __src[17];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v11 = *v5;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v14 = v12;
    for (i = (_DWORD *)(v11 + 48); *((_QWORD *)i - 2) != v12; i += 6)
    {
      if (!--v13)
        return;
    }
    v58 = a4;
    v59 = a5;
    v16 = *i;
    v17 = *(_DWORD *)(a3 + 64);
    v18 = *(_OWORD *)(a3 + 16);
    v64 = *(_OWORD *)a3;
    v65 = v18;
    v66 = *(_OWORD *)(a3 + 32);
    v19 = v18;
    v20 = (unsigned int *)(v18 + 16);
    swift_beginAccess();
    v55 = WORD2(v66);
    v56 = v16;
    v57 = a2;
    v60 = v17;
    if ((BYTE4(v66) & 0x20) == 0)
    {
      swift_retain();
      v53 = v17;
LABEL_20:
      v33 = a1;
      swift_endAccess();
      v34 = *(_DWORD *)(a3 + 68);
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v37 = DWORD2(v65);
      v36 = HIDWORD(v65);
      v38 = DWORD2(v64);
      v39 = *v20;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _GraphInputs((uint64_t)&v64);
      v41 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v64);
      swift_release();
      _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v62);
      *(_QWORD *)&__src[0] = v33;
      *((_QWORD *)&__src[0] + 1) = __PAIR64__(v60, v57);
      *(_QWORD *)&__src[1] = __PAIR64__(v34, v53);
      *((_QWORD *)&__src[1] + 1) = __PAIR64__(v37, OffsetAttribute2);
      *(_QWORD *)&__src[2] = __PAIR64__(v36, v38);
      *((_QWORD *)&__src[2] + 1) = __PAIR64__(v41, v39);
      LODWORD(__src[3]) = v56;
      BYTE4(__src[3]) = v58 & 1;
      BYTE5(__src[3]) = v59 & 1;
      BYTE6(__src[3]) = (v55 & 0x400) != 0;
      outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v62, (uint64_t)&__src[3] + 8, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
      *((_QWORD *)&__src[16] + 1) = 0;
      memset(&__src[15], 0, 20);
      memcpy(__dst, __src, sizeof(__dst));
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for InterpolatedDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
      lazy protocol witness table accessor for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>();
      v42 = Attribute.init<A>(body:value:flags:update:)();
      outlined release of InterpolatedDisplayList<Image.Resolved>((uint64_t)__src);
      AGGraphSetFlags();
      LOBYTE(__dst[0]) = 0;
      PreferencesOutputs.subscript.setter(v42, v14, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v43);
      return;
    }
    v51 = *(_QWORD *)(a3 + 16);
    v52 = *(_QWORD *)a3;
    v47 = *(_DWORD *)(a3 + 24);
    v48 = *(_DWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a3 + 32);
    v49 = *(_QWORD *)(a3 + 48);
    v50 = *(_QWORD *)(a3 + 40);
    v22 = *(_QWORD *)(a3 + 56);
    v46 = *(_QWORD *)(a3 + 72);
    v44 = *(_DWORD *)(a3 + 80);
    v45 = *(_DWORD *)(a3 + 68);
    v23 = *(_OWORD *)(a3 + 48);
    __src[2] = *(_OWORD *)(a3 + 32);
    __src[3] = v23;
    __src[4] = *(_OWORD *)(a3 + 64);
    LODWORD(__src[5]) = *(_DWORD *)(a3 + 80);
    v24 = *(_OWORD *)(a3 + 16);
    __src[0] = *(_OWORD *)a3;
    __src[1] = v24;
    swift_retain();
    outlined retain of _ViewInputs(a3);
    v25 = _ViewInputs.geometryTransaction()();
    v26 = swift_getKeyPath();
    v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v26);
    swift_release();
    if ((*(_BYTE *)(v19 + 81) & 1) == 0
      && v17 == *(_DWORD *)(v19 + 32)
      && (_DWORD)v46 == *(_DWORD *)(v19 + 36)
      && v54 == *(_DWORD *)(v19 + 40)
      && v48 == *(_DWORD *)(v19 + 44)
      && v25 == *(_DWORD *)(v19 + 48)
      && v47 == *(_DWORD *)(v19 + 52))
    {
      if ((*(_BYTE *)(v19 + 64) & 1) == 0)
      {
        LODWORD(v32) = *(_DWORD *)(v19 + 60);
        goto LABEL_19;
      }
    }
    else
    {
      *(_QWORD *)&__src[0] = v52;
      DWORD2(__src[0]) = v48;
      *(_QWORD *)&__src[1] = v51;
      *((_QWORD *)&__src[1] + 1) = __PAIR64__(v25, v47);
      *(_QWORD *)&__src[2] = v21;
      *((_QWORD *)&__src[2] + 1) = v50;
      *(_QWORD *)&__src[3] = v49;
      *((_QWORD *)&__src[3] + 1) = v22;
      *(_QWORD *)&__src[4] = __PAIR64__(v45, v17);
      *((_QWORD *)&__src[4] + 1) = v46;
      LODWORD(__src[5]) = v44;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(__src, v54, (uint64_t)__dst);
      v27 = __dst[1];
      v28 = LOBYTE(__dst[2]);
      v29 = __dst[3];
      v30 = LOBYTE(__dst[2]) | ((unint64_t)DWORD1(__dst[2]) << 32);
      v31 = BYTE8(__dst[2]) | ((unint64_t)HIDWORD(__dst[2]) << 32);
      *(_OWORD *)(v19 + 32) = __dst[0];
      *(_OWORD *)(v19 + 48) = v27;
      *(_QWORD *)(v19 + 64) = v30;
      *(_QWORD *)(v19 + 72) = v31;
      *(_WORD *)(v19 + 80) = v29;
      if (v28 != 1)
      {
        v32 = HIDWORD(*((_QWORD *)&v27 + 1));
LABEL_19:
        v20 = (unsigned int *)(v19 + 16);
        v53 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_20;
      }
    }
    LODWORD(v32) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 60) = v32;
    *(_BYTE *)(v19 + 64) = 0;
    goto LABEL_19;
  }
}

{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *i;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int OffsetAttribute2;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t KeyPath;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  __int16 v55;
  int v56;
  unsigned int v57;
  char v58;
  char v59;
  unsigned int v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  unsigned int v65;
  unsigned __int8 v66;
  unsigned int v67;
  unsigned __int8 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v11 = *v5;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v14 = v12;
    for (i = (_DWORD *)(v11 + 48); *((_QWORD *)i - 2) != v12; i += 6)
    {
      if (!--v13)
        return;
    }
    v56 = *i;
    v57 = a2;
    v16 = *(_DWORD *)(a3 + 64);
    v17 = *(_OWORD *)(a3 + 16);
    v76 = *(_OWORD *)a3;
    v77 = v17;
    v78 = *(_OWORD *)(a3 + 32);
    v18 = v17;
    v19 = (unsigned int *)(v17 + 16);
    swift_beginAccess();
    v55 = WORD2(v78);
    v58 = a4;
    v59 = a5;
    v60 = v16;
    if ((BYTE4(v78) & 0x20) == 0)
    {
      swift_retain();
      v53 = v16;
LABEL_20:
      v33 = a1;
      swift_endAccess();
      v34 = *(_DWORD *)(a3 + 68);
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v37 = DWORD2(v77);
      v36 = HIDWORD(v77);
      v38 = DWORD2(v76);
      v39 = *v19;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _GraphInputs((uint64_t)&v76);
      v41 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v76);
      swift_release();
      *(_QWORD *)&v69 = v33;
      *((_QWORD *)&v69 + 1) = __PAIR64__(v60, v57);
      *(_QWORD *)&v70 = __PAIR64__(v34, v53);
      *((_QWORD *)&v70 + 1) = __PAIR64__(v37, OffsetAttribute2);
      *(_QWORD *)&v71 = __PAIR64__(v36, v38);
      *((_QWORD *)&v71 + 1) = __PAIR64__(v41, v39);
      LODWORD(v72) = v56;
      BYTE4(v72) = v58 & 1;
      BYTE5(v72) = v59 & 1;
      BYTE6(v72) = (v55 & 0x400) != 0;
      v75 = 0;
      v73 = 0uLL;
      *((_QWORD *)&v72 + 1) = 0;
      v74 = 0;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for InterpolatedDisplayList<ResolvedStyledText>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedStyledText, (uint64_t)&protocol witness table for ResolvedStyledText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
      lazy protocol witness table accessor for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>();
      v42 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      AGGraphSetFlags();
      LOBYTE(v69) = 0;
      PreferencesOutputs.subscript.setter(v42, v14, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v43);
      return;
    }
    v51 = *(_QWORD *)(a3 + 16);
    v52 = *(_QWORD *)a3;
    v48 = *(_DWORD *)(a3 + 24);
    v49 = *(_DWORD *)(a3 + 8);
    v20 = *(_QWORD *)(a3 + 32);
    v50 = *(_QWORD *)(a3 + 40);
    v46 = *(_QWORD *)(a3 + 48);
    v21 = *(_QWORD *)(a3 + 56);
    v47 = *(_QWORD *)(a3 + 72);
    v44 = *(_DWORD *)(a3 + 80);
    v45 = *(_DWORD *)(a3 + 68);
    v22 = *(_OWORD *)(a3 + 48);
    v71 = *(_OWORD *)(a3 + 32);
    v72 = v22;
    v73 = *(_OWORD *)(a3 + 64);
    v74 = *(_DWORD *)(a3 + 80);
    v23 = *(_OWORD *)(a3 + 16);
    v69 = *(_OWORD *)a3;
    v70 = v23;
    swift_retain();
    outlined retain of _ViewInputs(a3);
    v24 = _ViewInputs.geometryTransaction()();
    v25 = swift_getKeyPath();
    v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v25);
    swift_release();
    if ((*(_BYTE *)(v18 + 81) & 1) == 0
      && v16 == *(_DWORD *)(v18 + 32)
      && (_DWORD)v47 == *(_DWORD *)(v18 + 36)
      && v54 == *(_DWORD *)(v18 + 40)
      && v49 == *(_DWORD *)(v18 + 44)
      && v24 == *(_DWORD *)(v18 + 48)
      && v48 == *(_DWORD *)(v18 + 52))
    {
      if ((*(_BYTE *)(v18 + 64) & 1) == 0)
      {
        LODWORD(v32) = *(_DWORD *)(v18 + 60);
        goto LABEL_19;
      }
    }
    else
    {
      *(_QWORD *)&v69 = v52;
      DWORD2(v69) = v49;
      *(_QWORD *)&v70 = v51;
      *((_QWORD *)&v70 + 1) = __PAIR64__(v24, v48);
      *(_QWORD *)&v71 = v20;
      *((_QWORD *)&v71 + 1) = v50;
      *(_QWORD *)&v72 = v46;
      *((_QWORD *)&v72 + 1) = v21;
      *(_QWORD *)&v73 = __PAIR64__(v45, v16);
      *((_QWORD *)&v73 + 1) = v47;
      v74 = v44;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v69, v54, (uint64_t)&v61);
      v27 = v62;
      v26 = v63;
      v28 = v64;
      v29 = v68;
      v30 = v64 | ((unint64_t)v65 << 32);
      v31 = v66 | ((unint64_t)v67 << 32);
      *(_OWORD *)(v18 + 32) = v61;
      *(_QWORD *)(v18 + 48) = v27;
      *(_QWORD *)(v18 + 56) = v26;
      *(_QWORD *)(v18 + 64) = v30;
      *(_QWORD *)(v18 + 72) = v31;
      *(_WORD *)(v18 + 80) = v29;
      if ((v28 & 1) == 0)
      {
        v32 = HIDWORD(v26);
LABEL_19:
        v19 = (unsigned int *)(v18 + 16);
        v53 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_20;
      }
    }
    LODWORD(v32) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v32;
    *(_BYTE *)(v18 + 64) = 0;
    goto LABEL_19;
  }
}

uint64_t key path getter for EnvironmentValues.tintColor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintColor : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.foregroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundStyle : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance Image.Resolved.MakeRepresentableContext@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[200];

  _s7SwiftUI33PlatformImageRepresentableContextVSgWOi0_((uint64_t)v3);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, a1, &lazy cache variable for type metadata for PlatformImageRepresentableContext?, (uint64_t)&type metadata for PlatformImageRepresentableContext);
}

uint64_t protocol witness for Rule.value.getter in conformance Image.Resolved.MakeRepresentableContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[10];
  _BYTE v22[19];

  Value = AGGraphGetValue();
  v3 = *(_OWORD *)(Value + 48);
  v5 = *(_OWORD *)Value;
  v4 = *(_OWORD *)(Value + 16);
  v21[2] = *(_OWORD *)(Value + 32);
  v21[3] = v3;
  v21[0] = v5;
  v21[1] = v4;
  v6 = *(_OWORD *)(Value + 112);
  v8 = *(_OWORD *)(Value + 64);
  v7 = *(_OWORD *)(Value + 80);
  v21[6] = *(_OWORD *)(Value + 96);
  v21[7] = v6;
  v21[4] = v8;
  v21[5] = v7;
  v10 = *(_OWORD *)(Value + 144);
  v9 = *(_OWORD *)(Value + 160);
  v11 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v22[15] = *(_DWORD *)(Value + 175);
  v21[9] = v10;
  *(_OWORD *)v22 = v9;
  v21[8] = v11;
  v12 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))v12);
  v14 = *(_QWORD *)AGGraphGetValue();
  v15 = *(_OWORD *)(Value + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(Value + 128);
  *(_OWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(Value + 160);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)(Value + 175);
  v16 = *(_OWORD *)(Value + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(Value + 64);
  *(_OWORD *)(a1 + 80) = v16;
  v17 = *(_OWORD *)(Value + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(Value + 96);
  *(_OWORD *)(a1 + 112) = v17;
  v18 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(Value + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(Value + 32);
  *(_OWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 184) = v13;
  *(_QWORD *)(a1 + 192) = v14;
  outlined retain of Image.Resolved((uint64_t)v21);
  swift_retain();
  return swift_retain();
}

double protocol witness for ShapeStyledLeafView.backgroundShape(in:) in conformance Image.Resolved(uint64_t a1, double a2, double a3)
{
  Image.Resolved.backgroundShape(in:)(a1, a2, a3);
  return 0.0;
}

uint64_t static Image.Resolved.defaultTransition.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  if (one-time initialization token for v4 != -1)
    swift_once();
  v2 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    v3 = dyld_program_sdk_at_least();
  else
    v3 = static Semantics.forced >= v2;
  if (v3)
    v4 = 0x8000000003;
  else
    v4 = 0x8000000001;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_BYTE *)(a1 + 12) = 3;
  *(_WORD *)(a1 + 13) = 0;
  return outlined copy of ContentTransition.Storage(v4, 0x302000000, 0);
}

void Image.Resolved.modifyTransition(state:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  int v5;
  _QWORD *v6;
  int v7;
  _BYTE *v8;
  char v9;
  id v10;
  char v11;
  _BYTE *v12;
  char v13;
  _BYTE *v14;
  char v15;
  id v16;
  char v17;
  void *v18;
  char v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v4 = *(_BYTE **)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  v6 = *(_QWORD **)v2;
  v7 = *(unsigned __int8 *)(v2 + 8);
  switch(*(_BYTE *)(v2 + 8))
  {
    case 0:
      if (!*(_BYTE *)(a2 + 8))
        goto LABEL_17;
      v8 = *(_BYTE **)a2;
      if (v5 == 255)
        v9 = -1;
      else
        v9 = *(_BYTE *)(a2 + 8);
      outlined copy of GraphicsImage.Contents?(v8, v9);
      outlined copy of GraphicsImage.Contents?(v6, 0);
      LOBYTE(v7) = 0;
      goto LABEL_36;
    case 1:
      if (v5 == 1)
      {
LABEL_17:
        v20 = v6 == (_QWORD *)v4;
        goto LABEL_27;
      }
      v12 = *(_BYTE **)a2;
      if (v5 == 255)
        v13 = -1;
      else
        v13 = *(_BYTE *)(a2 + 8);
      outlined copy of GraphicsImage.Contents?(v12, v13);
      LOBYTE(v7) = 1;
      v18 = v6;
      v19 = 1;
      goto LABEL_35;
    case 2:
      if (v5 != 2)
      {
        v14 = *(_BYTE **)a2;
        if (v5 == 255)
          v15 = -1;
        else
          v15 = *(_BYTE *)(a2 + 8);
        outlined copy of GraphicsImage.Contents?(v14, v15);
        LOBYTE(v7) = 2;
        v18 = v6;
        v19 = 2;
        goto LABEL_35;
      }
      if (v4[44] == 1)
      {
        LOBYTE(v7) = 2;
        outlined copy of GraphicsImage.Contents?(*(id *)a2, 2);
        outlined copy of GraphicsImage.Contents?(v6, 2);
        LOBYTE(v5) = 2;
        goto LABEL_36;
      }
      v22 = 0x8000000001;
      v23 = *(_QWORD *)a1;
      v24 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
      v25 = *(_BYTE *)(a1 + 13);
      outlined copy of GraphicsImage.Contents?(*(id *)a2, 2);
      outlined copy of GraphicsImage.Contents?(v6, 2);
      outlined consume of ContentTransition.Storage(v23, v24, v25);
      outlined consume of GraphicsImage.Contents?(v6, 2);
      outlined consume of GraphicsImage.Contents?(v4, 2);
      goto LABEL_38;
    case 3:
      if (v5 != 3)
      {
        v16 = *(id *)a2;
        if (v5 == 255)
          v17 = -1;
        else
          v17 = *(_BYTE *)(a2 + 8);
        outlined copy of GraphicsImage.Contents?(v16, v17);
        LOBYTE(v7) = 3;
        v18 = v6;
        v19 = 3;
        goto LABEL_35;
      }
      v20 = v6[2] == *((_QWORD *)v4 + 2);
LABEL_27:
      v21 = v20;
      outlined copy of GraphicsImage.Contents?(*(id *)a2, *(_BYTE *)(a2 + 8));
      outlined copy of GraphicsImage.Contents?(v6, v7);
      outlined consume of GraphicsImage.Contents?(v6, v7);
      outlined consume of GraphicsImage.Contents?(v4, v5);
      if ((v21 & 1) != 0 || (*(_BYTE *)(a1 + 24) & 2) != 0)
        return;
      goto LABEL_37;
    default:
      v10 = *(id *)a2;
      v11 = *(_BYTE *)(a2 + 8);
      if (v7 == 255)
      {
        outlined copy of GraphicsImage.Contents?(v10, v11);
        LOBYTE(v7) = -1;
      }
      else
      {
        outlined copy of GraphicsImage.Contents?(v10, v11);
        v18 = v6;
        v19 = v7;
LABEL_35:
        outlined copy of GraphicsImage.Contents?(v18, v19);
      }
LABEL_36:
      outlined consume of GraphicsImage.Contents?(v6, v7);
      outlined consume of GraphicsImage.Contents?(v4, v5);
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
LABEL_37:
        outlined consume of ContentTransition.Storage(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(_BYTE *)(a1 + 13));
        v22 = 0x8000000002;
LABEL_38:
        *(_QWORD *)a1 = v22;
        *(_WORD *)(a1 + 12) = 3;
        *(_DWORD *)(a1 + 8) = 0x2000000;
      }
      return;
  }
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance ResolvedImageLayoutComputer()
{
  uint64_t Value;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v17[16];
  _OWORD *v18;
  _OWORD v19[10];
  _OWORD v20[2];
  _OWORD v21[10];
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  Value = AGGraphGetValue();
  v1 = *(_OWORD *)(Value + 48);
  v3 = *(_OWORD *)Value;
  v2 = *(_OWORD *)(Value + 16);
  v21[2] = *(_OWORD *)(Value + 32);
  v21[3] = v1;
  v21[0] = v3;
  v21[1] = v2;
  v4 = *(_OWORD *)(Value + 112);
  v6 = *(_OWORD *)(Value + 64);
  v5 = *(_OWORD *)(Value + 80);
  v21[6] = *(_OWORD *)(Value + 96);
  v21[7] = v4;
  v21[4] = v6;
  v21[5] = v5;
  v8 = *(_OWORD *)(Value + 144);
  v7 = *(_OWORD *)(Value + 160);
  v9 = *(_OWORD *)(Value + 128);
  *(_DWORD *)((char *)v22 + 15) = *(_DWORD *)(Value + 175);
  v21[9] = v8;
  v22[0] = v7;
  v21[8] = v9;
  v10 = *(_OWORD *)(Value + 160);
  v32 = *(_OWORD *)(Value + 144);
  v33[0] = v10;
  *(_DWORD *)((char *)v33 + 15) = *(_DWORD *)(Value + 175);
  v11 = *(_OWORD *)(Value + 128);
  v12 = *(_OWORD *)(Value + 80);
  v27 = *(_OWORD *)(Value + 64);
  v28 = v12;
  v13 = *(_OWORD *)(Value + 112);
  v29 = *(_OWORD *)(Value + 96);
  v30 = v13;
  v31 = v11;
  v14 = *(_OWORD *)(Value + 16);
  v23 = *(_OWORD *)Value;
  v24 = v14;
  v15 = *(_OWORD *)(Value + 48);
  v25 = *(_OWORD *)(Value + 32);
  v26 = v15;
  v19[8] = v11;
  v19[9] = v32;
  v20[0] = v33[0];
  *(_DWORD *)((char *)v20 + 15) = *(_DWORD *)((char *)v33 + 15);
  v19[4] = v27;
  v19[5] = v28;
  v19[6] = v29;
  v19[7] = v30;
  v19[0] = v23;
  v19[1] = v24;
  v19[2] = v25;
  v19[3] = v15;
  v18 = v19;
  outlined retain of Image.Resolved((uint64_t)v21);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v17, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  return outlined release of Image.Resolved((uint64_t)v21);
}

SwiftUI::Spacing ResolvedImageLayoutEngine.spacing()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  double *v3;
  SwiftUI::Spacing result;
  double v6;
  double v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;

  if (*(_BYTE *)(v1 + 96) != 2)
    return Spacing.init()();
  v3 = *(double **)(v1 + 144);
  if (!v3 || *(_BYTE *)(v1 + 153) != 3)
    return Spacing.init()();
  v6 = v3[2];
  v7 = v3[7];
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacing.Key, Spacing.Value), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_235283240;
  v9 = inited + 48;
  if (one-time initialization token for textToText != -1)
  {
    swift_once();
    v9 = inited + 48;
  }
  v10 = static Spacing.Category.textToText;
  *(_QWORD *)(inited + 32) = static Spacing.Category.textToText;
  *(_BYTE *)(inited + 40) = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(inited + 88) = v10;
  *(_BYTE *)(inited + 96) = 2;
  *(_OWORD *)(inited + 104) = 0u;
  *(_OWORD *)(inited + 120) = 0u;
  *(_BYTE *)(inited + 136) = 0;
  if (one-time initialization token for edgeAboveText != -1)
    swift_once();
  *(_QWORD *)(inited + 144) = static Spacing.Category.edgeAboveText;
  *(_BYTE *)(inited + 152) = 0;
  v11 = *((_QWORD *)v3 + 2);
  *(_BYTE *)(inited + 192) = 0;
  *(_QWORD *)(inited + 176) = 0;
  *(_QWORD *)(inited + 184) = 0;
  *(_QWORD *)(inited + 160) = v11;
  *(_QWORD *)(inited + 168) = 0;
  if (one-time initialization token for edgeBelowText != -1)
    swift_once();
  v12 = v6 + v7;
  *(_QWORD *)(inited + 200) = static Spacing.Category.edgeBelowText;
  *(_BYTE *)(inited + 208) = 2;
  *(double *)(inited + 216) = v3[2] + 1.0;
  *(_BYTE *)(inited + 248) = 0;
  *(_QWORD *)(inited + 232) = 0;
  *(_QWORD *)(inited + 240) = 0;
  *(_QWORD *)(inited + 224) = 0;
  if (one-time initialization token for textBaseline != -1)
    swift_once();
  v13 = static Spacing.Category.textBaseline;
  *(_QWORD *)(inited + 256) = static Spacing.Category.textBaseline;
  *(_BYTE *)(inited + 264) = 2;
  *(double *)(inited + 272) = -v12;
  *(_QWORD *)(inited + 288) = 0;
  *(_QWORD *)(inited + 296) = 0;
  *(_QWORD *)(inited + 280) = 0;
  *(_BYTE *)(inited + 304) = 0;
  *(_QWORD *)(inited + 312) = v13;
  *(_BYTE *)(inited + 320) = 0;
  *(double *)(inited + 328) = -(v3[5] - v12);
  *(_BYTE *)(inited + 360) = 0;
  *(_QWORD *)(inited + 344) = 0;
  *(_QWORD *)(inited + 352) = 0;
  *(_QWORD *)(inited + 336) = 0;
  v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result.minima._rawValue = (void *)swift_setDeallocating();
  *a1 = v14;
  return result;
}

uint64_t ResolvedImageLayoutEngine.explicitAlignment(_:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  double *v4;
  uint64_t result;
  double v8;
  double v9;
  double v10;

  v3 = *(unsigned __int8 *)(v2 + 96);
  v4 = *(double **)(v2 + 144);
  if (v3 != 2 || v4 == 0)
    goto LABEL_6;
  v8 = v4[7];
  v9 = *(double *)(a2 + 8) - v4[2];
  if (one-time initialization token for lastTextBaseline != -1)
    swift_once();
  v10 = v9 - v8;
  if (static VerticalAlignment.lastTextBaseline == a1)
    goto LABEL_13;
  if (one-time initialization token for firstTextBaseline != -1)
    swift_once();
  if (static VerticalAlignment.firstTextBaseline == a1)
  {
LABEL_13:
    *(double *)&result = v10;
    return result;
  }
  if (one-time initialization token for _firstTextLineCenter != -1)
    swift_once();
  if (static VerticalAlignment._firstTextLineCenter != a1)
  {
LABEL_6:
    *(double *)&result = 0.0;
    return result;
  }
  *(double *)&result = v10 + v4[3] * -0.5;
  return result;
}

uint64_t protocol witness for LayoutEngine.sizeThatFits(_:) in conformance ResolvedImageLayoutEngine(uint64_t *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v6 = *((_BYTE *)a1 + 8);
  v7 = a1[2];
  v8 = *((_BYTE *)a1 + 24);
  v10 = *a1;
  v11 = v6;
  v12 = v7;
  v13 = v8;
  return Image.Resolved.sizeThatFits(in:)((uint64_t)&v10, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance ResolvedImageLayoutEngine(uint64_t a1, uint64_t a2)
{
  return ResolvedImageLayoutEngine.explicitAlignment(_:at:)(a1, a2);
}

uint64_t EnvironmentValues.imageIsTemplate(renderingMode:)(unsigned __int8 *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  int v4;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v2 = *a1;
  if (v2 != 2)
    return (v2 & 1) == 0;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v10);
    swift_release_n();
    swift_release_n();
    v4 = v10;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v6);
    v7 = swift_retain_n();
    v8 = specialized find1<A>(_:key:filter:)(v7, v9);
    if (v8)
      v4 = *(unsigned __int8 *)(v8 + 72);
    else
      v4 = 1;
    swift_release_n();
  }
  return v4 ^ 1u;
}

uint64_t Image.Resolved.resolve(in:)@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];

  v2 = v1[9];
  v3 = v1[7];
  v24 = v1[8];
  v25 = v2;
  v4 = v1[9];
  v26[0] = v1[10];
  v5 = v1[5];
  v7 = v1[3];
  v20 = v1[4];
  v6 = v20;
  v21 = v5;
  v8 = v1[5];
  v9 = v1[7];
  v22 = v1[6];
  v10 = v22;
  v23 = v9;
  v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  v12 = v1[3];
  v14 = *v1;
  v13 = v1[1];
  v18 = v1[2];
  v15 = v18;
  v19 = v12;
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v1[10];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v1 + 175);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v1 + 175);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

double Image.Resolved.resolveNamedImage(in:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t protocol witness for ImageProvider.resolve(in:) in conformance Image.Resolved@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];

  v2 = v1[9];
  v3 = v1[7];
  v24 = v1[8];
  v25 = v2;
  v4 = v1[9];
  v26[0] = v1[10];
  v5 = v1[5];
  v7 = v1[3];
  v20 = v1[4];
  v6 = v20;
  v21 = v5;
  v8 = v1[5];
  v9 = v1[7];
  v22 = v1[6];
  v10 = v22;
  v23 = v9;
  v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  v12 = v1[3];
  v14 = *v1;
  v13 = v1[1];
  v18 = v1[2];
  v15 = v18;
  v19 = v12;
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v1[10];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v1 + 175);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v1 + 175);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

double protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.Resolved@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t specialized LeafDisplayList.updateValue()()
{
  int *v0;
  _OWORD *Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  double *v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  __int128 *v14;
  int v15;
  double v16;
  double v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  double v28;
  double v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  int v37;
  double v38;
  double v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  unsigned __int8 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  Value = (_OWORD *)AGGraphGetValue();
  v3 = v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *Value;
  v5 = v4 | 0x1000000000000000;
  v6 = ++static DisplayList.Version.lastValue;
  if ((v3 & 1) != 0)
  {
    if (v6)
      v7 = (2 * ((33 * (v6 >> 16)) ^ v6)) | 1;
    else
      LOWORD(v7) = 0;
    *((_WORD *)v0 + 11) = v7;
  }
  else
  {
    LOWORD(v7) = *((_WORD *)v0 + 11);
  }
  v8 = (double *)AGGraphGetValue();
  v9 = *v8;
  v10 = v8[1];
  v11 = (double *)AGGraphGetValue();
  v12 = v9 - *v11;
  v13 = v10 - v11[1];
  type metadata accessor for CGSize(0);
  v14 = (__int128 *)AGGraphGetValue();
  v15 = *v0;
  v38 = v12;
  v39 = v13;
  v40 = *v14;
  v41 = v6;
  v42 = v5;
  v43 = (unsigned __int16)v7;
  v44 = 0;
  v46 = 0;
  v45 = 0;
  v47 = v15;
  LOBYTE(v28) = *((_BYTE *)v0 + 20);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v28);
  v16 = v38;
  v17 = v39;
  v18 = v40;
  v19 = v41;
  v20 = v42;
  v21 = v43;
  v22 = v44;
  v23 = v45 | (v46 << 16);
  v24 = v47;
  v25 = v43 >> 62;
  if (v43 >> 62 != 3 || (v23 & 0xFFFFFF) != 0 || v43 != 0xC000000000000000 || v44 | v42)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_23527E860;
    *(double *)(v26 + 32) = v16;
    *(double *)(v26 + 40) = v17;
    *(_OWORD *)(v26 + 48) = v18;
    *(_QWORD *)(v26 + 64) = v19;
    *(_QWORD *)(v26 + 72) = v20;
    *(_QWORD *)(v26 + 80) = v21;
    *(_QWORD *)(v26 + 88) = v22;
    *(_BYTE *)(v26 + 98) = BYTE2(v23);
    *(_WORD *)(v26 + 96) = v23;
    *(_DWORD *)(v26 + 100) = v24;
    v28 = v16;
    v29 = v17;
    v30 = v18;
    v31 = v19;
    v32 = v20;
    v33 = v21;
    v34 = v22;
    v36 = BYTE2(v23);
    v35 = v23;
    v37 = v24;
    outlined copy of DisplayList.Item.Value(v20, v21);
    DisplayList.Item.features.getter();
    __asm { BR              X11 }
  }
  v28 = MEMORY[0x24BEE4AF8];
  LOWORD(v29) = 0;
  BYTE2(v29) = v44 | v42;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v20, 0xC000000000000000);
}

{
  int *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  double *Value;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  __int128 *v13;
  int v14;
  double v15;
  double v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  double v27;
  double v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  double v37;
  double v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  AGGraphGetValue();
  v2 = v1;
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 1065353216;
  *(_QWORD *)(v3 + 28) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 20) = 0;
  *(_QWORD *)(v3 + 40) = v4;
  v5 = ++static DisplayList.Version.lastValue;
  if ((v2 & 1) != 0)
  {
    if (v5)
      v6 = (2 * ((33 * (v5 >> 16)) ^ v5)) | 1;
    else
      LOWORD(v6) = 0;
    *((_WORD *)v0 + 11) = v6;
  }
  else
  {
    LOWORD(v6) = *((_WORD *)v0 + 11);
  }
  Value = (double *)AGGraphGetValue();
  v8 = *Value;
  v9 = Value[1];
  v10 = (double *)AGGraphGetValue();
  v11 = v8 - *v10;
  v12 = v9 - v10[1];
  type metadata accessor for CGSize(0);
  v13 = (__int128 *)AGGraphGetValue();
  v14 = *v0;
  v37 = v11;
  v38 = v12;
  v39 = *v13;
  v40 = v5;
  v41 = v3;
  v42 = (unsigned __int16)v6;
  v43 = 0;
  v45 = 0;
  v44 = 0;
  v46 = v14;
  LOBYTE(v27) = *((_BYTE *)v0 + 20);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v27);
  v15 = v37;
  v16 = v38;
  v17 = v39;
  v18 = v40;
  v19 = v41;
  v20 = v42;
  v21 = v43;
  v22 = v44 | (v45 << 16);
  v23 = v46;
  v24 = v42 >> 62;
  if (v42 >> 62 != 3 || (v22 & 0xFFFFFF) != 0 || v42 != 0xC000000000000000 || v43 | v41)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_23527E860;
    *(double *)(v25 + 32) = v15;
    *(double *)(v25 + 40) = v16;
    *(_OWORD *)(v25 + 48) = v17;
    *(_QWORD *)(v25 + 64) = v18;
    *(_QWORD *)(v25 + 72) = v19;
    *(_QWORD *)(v25 + 80) = v20;
    *(_QWORD *)(v25 + 88) = v21;
    *(_BYTE *)(v25 + 98) = BYTE2(v22);
    *(_WORD *)(v25 + 96) = v22;
    *(_DWORD *)(v25 + 100) = v23;
    v27 = v15;
    v28 = v16;
    v29 = v17;
    v30 = v18;
    v31 = v19;
    v32 = v20;
    v33 = v21;
    v35 = BYTE2(v22);
    v34 = v22;
    v36 = v23;
    outlined copy of DisplayList.Item.Value(v19, v20);
    DisplayList.Item.features.getter();
    __asm { BR              X11 }
  }
  v27 = MEMORY[0x24BEE4AF8];
  LOWORD(v28) = 0;
  BYTE2(v28) = v43 | v41;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v19, 0xC000000000000000);
}

uint64_t specialized LeafLayoutComputer.updateValue()()
{
  uint64_t Value;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v22[16];
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[24];
  _OWORD v35[10];
  _BYTE v36[19];
  char v37;
  char v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[24];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;

  Value = AGGraphGetValue();
  v1 = *(_OWORD *)(Value + 48);
  v3 = *(_OWORD *)Value;
  v2 = *(_OWORD *)(Value + 16);
  v35[2] = *(_OWORD *)(Value + 32);
  v35[3] = v1;
  v35[0] = v3;
  v35[1] = v2;
  v4 = *(_OWORD *)(Value + 112);
  v6 = *(_OWORD *)(Value + 64);
  v5 = *(_OWORD *)(Value + 80);
  v35[6] = *(_OWORD *)(Value + 96);
  v35[7] = v4;
  v35[4] = v6;
  v35[5] = v5;
  v8 = *(_OWORD *)(Value + 144);
  v7 = *(_OWORD *)(Value + 160);
  v9 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v36[15] = *(_DWORD *)(Value + 175);
  v35[9] = v8;
  *(_OWORD *)v36 = v7;
  v35[8] = v9;
  v10 = *(_OWORD *)(Value + 144);
  v11 = *(_OWORD *)(Value + 112);
  v32 = *(_OWORD *)(Value + 128);
  v33 = v10;
  v12 = *(_OWORD *)(Value + 144);
  *(_OWORD *)v34 = *(_OWORD *)(Value + 160);
  v13 = *(_OWORD *)(Value + 80);
  v14 = *(_OWORD *)(Value + 48);
  v28 = *(_OWORD *)(Value + 64);
  v29 = v13;
  v15 = *(_OWORD *)(Value + 80);
  v16 = *(_OWORD *)(Value + 112);
  v30 = *(_OWORD *)(Value + 96);
  v31 = v16;
  v17 = *(_OWORD *)(Value + 16);
  v24 = *(_OWORD *)Value;
  v25 = v17;
  v18 = *(_OWORD *)(Value + 48);
  v20 = *(_OWORD *)Value;
  v19 = *(_OWORD *)(Value + 16);
  v26 = *(_OWORD *)(Value + 32);
  v27 = v18;
  v48 = v32;
  v49 = v12;
  *(_OWORD *)v50 = *(_OWORD *)(Value + 160);
  v44 = v28;
  v45 = v15;
  v46 = v30;
  v47 = v11;
  v39 = 1;
  v38 = 1;
  v37 = 1;
  *(_DWORD *)&v34[15] = *(_DWORD *)(Value + 175);
  *(_DWORD *)&v50[15] = *(_DWORD *)(Value + 175);
  v40 = v20;
  v41 = v19;
  v42 = v26;
  v43 = v14;
  v59 = v32;
  v60 = v12;
  v61 = *(_OWORD *)v50;
  v62 = *(_QWORD *)&v50[16];
  v55 = v28;
  v56 = v15;
  v57 = v30;
  v58 = v11;
  v51 = v20;
  v52 = v19;
  v53 = v26;
  v54 = v14;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v66 = 1;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 1;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 1;
  v23 = &v51;
  outlined retain of Image.Resolved((uint64_t)v35);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v22, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v59 = v32;
  v60 = v33;
  v61 = *(_OWORD *)v34;
  v62 = *(_QWORD *)&v34[16];
  v55 = v28;
  v56 = v29;
  v57 = v30;
  v58 = v31;
  v51 = v24;
  v52 = v25;
  v53 = v26;
  v54 = v27;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v66 = 1;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 1;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 1;
  return outlined release of Image.Resolved((uint64_t)&v51);
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  char v3;
  _BYTE v5[16];
  uint64_t *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 8);
  v3 = *(_BYTE *)(Value + 9);
  v9 = 1;
  v8 = 1;
  v7 = 1;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v6 = &v10;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v5, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  return outlined release of LinearGradient((uint64_t)&v10);
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  char v3;
  _BYTE v5[16];
  uint64_t *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 8);
  v3 = *(_BYTE *)(Value + 9);
  v9 = 1;
  v8 = 1;
  v7 = 1;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v6 = &v10;
  swift_retain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v5, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  return outlined release of ViewTransform((uint64_t)&v10);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int8 v7;
  _QWORD v9[6];
  char v10[16];
  uint64_t *v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;

  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  Value = AGGraphGetValue();
  v9[1] = v9;
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_QWORD *)(Value + 24);
  v5 = *(_BYTE *)(Value + 33);
  v6 = *(_BYTE *)(Value + 34);
  v14 = 1;
  v13 = 1;
  v12 = 1;
  v7 = *(_BYTE *)(Value + 32);
  v15 = v1;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = v7;
  v20 = v5;
  v21 = v6;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 1;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 1;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 1;
  v11 = &v15;
  v9[4] = &v15;
  outlined copy of Path.Storage(v1, v2, v3, v4, v7);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v10, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v15 = v1;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = v7;
  v20 = v5;
  v21 = v6;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 1;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 1;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 1;
  return outlined retain of Path.Storage((uint64_t)&v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[16];
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_QWORD *)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_BYTE *)(Value + 40);
  v7 = *(_BYTE *)(Value + 41);
  v13 = 1;
  v12 = 1;
  v11 = 1;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[16];
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_QWORD *)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_BYTE *)(Value + 40);
  v7 = *(_BYTE *)(Value + 41);
  v13 = 1;
  v12 = 1;
  v11 = 1;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[16];
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_QWORD *)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_BYTE *)(Value + 40);
  v7 = *(_BYTE *)(Value + 41);
  v13 = 1;
  v12 = 1;
  v11 = 1;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[16];
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_QWORD *)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_BYTE *)(Value + 40);
  v7 = *(_BYTE *)(Value + 41);
  v13 = 1;
  v12 = 1;
  v11 = 1;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  int v12;
  int v13;
  int *v14;
  uint64_t *v15;
  _BYTE v16[16];
  uint64_t *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  Value = AGGraphGetValue();
  v14 = &v12;
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_BYTE *)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_BYTE *)(Value + 40);
  v7 = *(_QWORD *)(Value + 48);
  v8 = *(unsigned __int8 *)(Value + 57);
  v12 = *(unsigned __int8 *)(Value + 56);
  v13 = v8;
  v9 = *(_BYTE *)(Value + 58);
  v10 = *(_BYTE *)(Value + 59);
  v19 = v4;
  v18 = v6;
  v24 = v4;
  v28 = v4;
  v22 = 1;
  v21 = 1;
  v20 = 1;
  v23 = v6;
  v25 = v1;
  v26 = v2;
  v27 = v3;
  v29 = v5;
  v30 = v6;
  v31 = v7;
  v32 = v12;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 1;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 1;
  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  v47 = 1;
  v17 = &v25;
  v15 = &v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v16, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  v25 = v1;
  v26 = v2;
  v27 = v3;
  v28 = v19;
  v29 = v5;
  v30 = v18;
  v31 = v7;
  v32 = v12;
  v33 = v13;
  v34 = v9;
  v35 = v10;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 1;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 1;
  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  v47 = 1;
  return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)&v25);
}

uint64_t specialized ShapeStyledDisplayList.updateValue()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  uint64_t Value;
  double x;
  double y;
  double width;
  double height;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  __int16 x_low;
  uint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  double v120;
  double v121;
  double v122;
  double v123;
  _BOOL4 IsNull;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  char v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int16 v143;
  uint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  _QWORD *v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  char v172;
  __int16 v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 v181;
  CGFloat v182;
  CGFloat v183;
  CGFloat v184;
  CGFloat v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  double v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  char v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char v226;
  unint64_t v227;
  int v228;
  int v229;
  int v230;
  unint64_t v231;
  unsigned __int8 v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  void *v245;
  uint64_t v246;
  int v247;
  void *v248;
  uint64_t v249;
  int v250;
  void *v251;
  uint64_t v252;
  __int16 v253;
  __int128 v254;
  __int128 v255;
  _BYTE v256[32];
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _OWORD v267[2];
  CGRect v268;
  __int128 v269;
  __int128 v270;
  _BYTE v271[112];
  _BYTE v272[80];
  _BYTE v273[25];
  _QWORD v274[9];
  unint64_t v275;
  _QWORD v276[4];
  unsigned __int8 v277;
  uint64_t v278;
  CGRect v279;
  CGRect v280;
  CGRect v281;

  v278 = *MEMORY[0x24BDAC8D0];
  v7 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  Value = AGGraphGetValue();
  x = *(double *)Value;
  y = *(double *)(Value + 8);
  width = *(double *)(Value + 16);
  height = *(double *)(Value + 24);
  v13 = *(unsigned __int8 *)(Value + 32);
  v14 = *(unsigned __int8 *)(Value + 33);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v269 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v269) = v7;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_117:
    swift_once();
    v43 = v188;
    goto LABEL_15;
  }
  v247 = v14;
  v19 = *((_DWORD *)v0 + 10);
  v20 = AGCreateWeakAttribute();
  v241 = v17;
  v21 = v20;
  v237 = HIDWORD(v20);
  v22 = AGCreateWeakAttribute();
  v244 = v13;
  v23 = v22;
  v234 = HIDWORD(v22);
  v250 = v19;
  v24 = AGCreateWeakAttribute();
  v25 = v24;
  v231 = HIDWORD(v24);
  v26 = AGCreateWeakAttribute();
  v27 = v26;
  v227 = HIDWORD(v26);
  v28 = AGCreateWeakAttribute();
  v29 = v28;
  v224 = HIDWORD(v28);
  v30 = AGCreateWeakAttribute();
  v31 = v30;
  v222 = HIDWORD(v30);
  v32 = (double *)AGGraphGetValue();
  v33 = *v32;
  v34 = v32[1];
  v35 = (double *)AGGraphGetValue();
  v36 = v33 - *v35;
  v37 = v34 - v35[1];
  v38 = AGGraphGetValue();
  v39 = *(double *)v38;
  v40 = *(double *)(v38 + 8);
  _threadGeometryProxyData();
  *(_QWORD *)&v269 = __PAIR64__(v237, v21);
  *((_QWORD *)&v269 + 1) = __PAIR64__(v234, v23);
  *(_QWORD *)&v270 = __PAIR64__(v231, v25);
  *((_QWORD *)&v270 + 1) = __PAIR64__(v227, v27);
  *(_DWORD *)v271 = v29;
  *(_DWORD *)&v271[4] = v224;
  *(_DWORD *)&v271[8] = v31;
  *(_DWORD *)&v271[12] = v222;
  v14 = v241;
  *(_DWORD *)&v271[16] = v241;
  _setThreadGeometryProxyData();
  specialized Shape.effectivePath(in:)((uint64_t)v276, 0.0, 0.0, v39, v40, x, y, width, height);
  v17 = v276[0];
  v13 = v276[1];
  v1 = v276[2];
  v6 = v276[3];
  v41 = 256;
  if (!v244)
    v41 = 0;
  v42 = 0x10000;
  if (!v247)
    v42 = 0;
  v4 = v42 | v41 | v277;
  _setThreadGeometryProxyData();
  v2 = *v0;
  memset(&v274[1], 0, 64);
  v274[0] = v2;
  v275 = 0x80000000;
  swift_retain();
  outlined retain of Path.Storage((uint64_t)v276, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  v279.origin.x = 0.0;
  v279.origin.y = 0.0;
  v279.size.width = v39;
  v279.size.height = v40;
  v280 = CGRectOffset(v279, v36, v37);
  x = v280.origin.x;
  y = v280.origin.y;
  width = v280.size.width;
  height = v280.size.height;
  v3 = *((_DWORD *)v0 + 2);
  v5 = *((_WORD *)v0 + 25);
  v43 = *((_BYTE *)v0 + 48);
  v188 = v43;
  if (one-time initialization token for normal != -1)
    goto LABEL_117;
LABEL_15:
  *(_QWORD *)&v269 = v17;
  *((_QWORD *)&v269 + 1) = v13;
  *(_QWORD *)&v270 = v1;
  *((_QWORD *)&v270 + 1) = v6;
  *(_QWORD *)v271 = v4;
  memset(&v271[8], 0, 60);
  *(_WORD *)&v271[68] = v5;
  *(double *)&v271[72] = x;
  *(double *)&v271[80] = y;
  *(double *)&v271[88] = width;
  *(double *)&v271[96] = height;
  *(_QWORD *)&v271[104] = 0;
  *(_DWORD *)v272 = 0;
  *(double *)&v272[8] = x;
  *(double *)&v272[16] = y;
  *(double *)&v272[24] = width;
  *(double *)&v272[32] = height;
  *(_OWORD *)&v272[48] = xmmword_23527E880;
  *(_QWORD *)&v272[40] = v14;
  *(_QWORD *)&v272[64] = 0;
  v272[74] = 0;
  *(_WORD *)&v272[72] = 0;
  *(_DWORD *)&v272[76] = v3;
  v273[0] = v43;
  *(_DWORD *)&v273[4] = v250;
  *(_QWORD *)&v273[8] = static GraphicsBlendMode.normal;
  v273[16] = byte_254266040;
  *(_DWORD *)&v273[20] = 1065353216;
  v273[24] = 0;
  LOBYTE(v254) = 0;
  v44 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v254, v44, (uint64_t)v274);
  v219 = v2;
  if (v2)
  {
    v45 = v2;
    v46 = (uint64_t *)(v2 + 24);
    v47 = *(_DWORD *)(v2 + 60);
    v48 = v47;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) > v47)
    {
      v184 = *(double *)(MEMORY[0x24BDBF070] + 8);
      v185 = *MEMORY[0x24BDBF070];
      v182 = *(double *)(MEMORY[0x24BDBF070] + 24);
      v183 = *(double *)(MEMORY[0x24BDBF070] + 16);
      v49 = v47;
      v195 = (uint64_t *)(v2 + 24);
      do
      {
        ++*(_DWORD *)(v45 + 60);
        swift_beginAccess();
        v52 = *(_QWORD **)(v45 + 24);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v45 + 24) = v52;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if (v49 < 0)
            goto LABEL_111;
        }
        else
        {
          v52 = specialized _ArrayBuffer._consumeAndCreateNew()(v52);
          *v46 = (uint64_t)v52;
          if (v49 < 0)
          {
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
            JUMPOUT(0x234AC14A0);
          }
        }
        if (v52[2] <= v48)
          goto LABEL_112;
        v54 = 224 * v48;
        BYTE4(v52[28 * v48 + 31]) = 1;
        v55 = *v46;
        swift_endAccess();
        if (*(_QWORD *)(v55 + 16) <= v48)
          goto LABEL_113;
        v56 = v55 + v54;
        v228 = *(_DWORD *)(v55 + v54 + 52);
        v248 = *(void **)(v55 + v54 + 72);
        v251 = *(void **)(v55 + v54 + 56);
        v57 = *(_QWORD *)(v55 + v54 + 88);
        v242 = *(_QWORD *)(v55 + v54 + 64);
        v245 = *(void **)(v55 + v54 + 80);
        v58 = *(_QWORD *)(v55 + v54 + 96);
        v238 = *(_QWORD *)(v55 + v54 + 104);
        v60 = *(_QWORD *)(v55 + v54 + 112);
        v59 = *(_QWORD *)(v55 + v54 + 120);
        v61 = *(_QWORD *)(v55 + v54 + 128);
        v62 = *(_QWORD *)(v55 + v54 + 136);
        v63 = *(_QWORD *)(v55 + v54 + 144);
        v64 = *(_QWORD *)(v56 + 152);
        v65 = *(_QWORD *)(v56 + 160);
        v212 = *((_QWORD *)&v269 + 1);
        v213 = v269;
        v210 = *((_QWORD *)&v270 + 1);
        v211 = v270;
        v216 = *(_QWORD *)&v271[8];
        v217 = *(_QWORD *)v271;
        v208 = *(_QWORD *)&v271[24];
        v209 = *(_QWORD *)&v271[16];
        v206 = *(_QWORD *)&v271[40];
        v207 = *(_QWORD *)&v271[32];
        v204 = *(_QWORD *)&v271[56];
        v205 = *(_QWORD *)&v271[48];
        v203 = *(_DWORD *)&v271[64];
        memset(v271, 0, 64);
        v269 = 0u;
        v270 = 0u;
        *(_DWORD *)&v271[64] = 0x800000;
        swift_retain_n();
        v181 = v64;
        v232 = v64;
        v235 = v58;
        v66 = v61;
        outlined copy of _ShapeStyle_Pack.Style?(v251, v242, v248, v245, v57, v58, v238, v60, v59, v61, v62, v63, v181, v65);
        v67 = v59;
        v68 = v62;
        v69 = v67;
        swift_release();
        *(_QWORD *)&v271[104] = v219;
        *(_DWORD *)v272 = v228;
        v200 = v65;
        if (v65)
        {
          *(_QWORD *)&v254 = v251;
          *((_QWORD *)&v254 + 1) = v242;
          *(_QWORD *)&v255 = v248;
          *((_QWORD *)&v255 + 1) = v245;
          *(_QWORD *)v256 = v57;
          *(_QWORD *)&v256[8] = v58;
          *(_QWORD *)&v256[16] = v238;
          *(_QWORD *)&v256[24] = v60;
          *(_QWORD *)&v257 = v69;
          *((_QWORD *)&v257 + 1) = v61;
          LOBYTE(v258) = v68;
          DWORD1(v258) = HIDWORD(v68);
          *((_QWORD *)&v258 + 1) = v63;
          LOBYTE(v259) = v232;
          *((_QWORD *)&v259 + 1) = v65;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v254);
        }
        v218 = v57;
        v70 = v69;
        v71 = v63;
        v201 = v68;
        v202 = v66;
        v72 = *(float *)&v273[20];
        v214 = v70;
        v215 = v60;
        if (*(float *)&v273[20] == 0.0
          || (v73 = *(double *)&v271[72],
              v74 = *(double *)&v271[80],
              v75 = *(_QWORD *)&v271[88],
              v76 = *(_QWORD *)&v271[96],
              CGRectIsEmpty(*(CGRect *)&v271[72])))
        {
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v272[48], *(unint64_t *)&v272[56]);
          *(_OWORD *)&v272[48] = xmmword_23527E880;
          *(_QWORD *)&v272[64] = 0;
          v272[74] = 0;
          *(_WORD *)&v272[72] = 0;
          if (*(_QWORD *)&v271[104])
          {
            *(_QWORD *)&v272[48] = *(_QWORD *)&v271[104];
            *(_QWORD *)&v272[56] = *(unsigned int *)v272 | 0x4000001100000000;
            *(_QWORD *)&v272[64] = MEMORY[0x24BEE4AF8];
            LOBYTE(v254) = v273[0];
            DisplayList.Item.canonicalize(options:)((char *)&v254);
            *(_QWORD *)&v271[104] = 0;
            *(_DWORD *)v272 = 0;
            v77 = *(_QWORD *)&v272[48];
            v220 = *(_OWORD *)&v272[56];
            v229 = *(unsigned __int16 *)&v272[72] | (v272[74] << 16);
          }
          else
          {
            v229 = 0;
            v77 = 0;
            v220 = 0xC000000000000000;
          }
          v225 = v77;
          v78 = *(double *)&v272[16];
          v79 = *(double *)&v272[8];
          v80 = *(_QWORD *)&v272[32];
          v81 = *(_QWORD *)&v272[24];
          v198 = *(_QWORD *)&v272[40];
          v82 = *(unsigned int *)&v272[76];
          v83 = static GraphicsBlendMode.normal;
          v84 = byte_254266040;
          v85 = *(_QWORD *)&v273[8];
          v86 = v273[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v85, v86);
          *(_QWORD *)&v273[8] = v83;
          v273[16] = v84;
          *(_DWORD *)&v273[20] = 1065353216;
          v273[24] = 0;
          *(_OWORD *)&v272[48] = xmmword_23527E880;
          *(_QWORD *)&v272[64] = 0;
          v272[74] = 0;
          *(_WORD *)&v272[72] = 0;
          v73 = *(double *)&v271[72];
          v74 = *(double *)&v271[80];
          v75 = *(_QWORD *)&v271[88];
          v76 = *(_QWORD *)&v271[96];
        }
        else
        {
          v226 = v273[0];
          LOBYTE(v254) = v273[0];
          DisplayList.Item.canonicalize(options:)((char *)&v254);
          v101 = *(_QWORD *)&v271[104];
          v197 = v63;
          if (*(_QWORD *)&v271[104])
          {
            v102 = *(unsigned int *)v272;
            v103 = *(_OWORD *)&v272[56];
            v104 = *(unsigned __int16 *)&v272[72] | (v272[74] << 16);
            v105 = *(_OWORD *)&v272[24];
            v106 = *(_QWORD *)&v272[48];
            v107 = *(_QWORD *)&v272[40];
            if (*(_QWORD *)&v272[56] >> 62 != 3
              || (v104 & 0xFFFFFF) != 0
              || *(_QWORD *)&v272[56] != 0xC000000000000000
              || *(_QWORD *)&v272[64] | *(_QWORD *)&v272[48])
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v110 = swift_allocObject();
              *(_OWORD *)(v110 + 16) = xmmword_23527E860;
              *(_QWORD *)(v110 + 32) = 0;
              *(_QWORD *)(v110 + 40) = 0;
              *(_OWORD *)(v110 + 48) = v105;
              *(_QWORD *)(v110 + 64) = v107;
              *(_QWORD *)(v110 + 72) = v106;
              *(_OWORD *)(v110 + 80) = v103;
              *(_BYTE *)(v110 + 98) = BYTE2(v104);
              *(_WORD *)(v110 + 96) = v104;
              *(_DWORD *)(v110 + 100) = 0;
              v254 = 0uLL;
              v255 = v105;
              *(_QWORD *)v256 = v107;
              *(_QWORD *)&v256[8] = v106;
              *(_OWORD *)&v256[16] = v103;
              BYTE2(v257) = BYTE2(v104);
              LOWORD(v257) = v104;
              DWORD1(v257) = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v106, v103);
              DisplayList.Item.features.getter();
              x_low = LOWORD(v268.origin.x);
              v254 = 0uLL;
              v255 = v105;
              *(_QWORD *)v256 = v107;
              *(_QWORD *)&v256[8] = v106;
              *(_OWORD *)&v256[16] = v103;
              BYTE2(v257) = BYTE2(v104);
              LOWORD(v257) = v104;
              DWORD1(v257) = 0;
              DisplayList.Item.properties.getter();
              v108 = LOBYTE(v268.origin.x);
            }
            else
            {
              swift_retain();
              v108 = 0;
              x_low = 0;
              v110 = MEMORY[0x24BEE4AF8];
            }
            *(_QWORD *)&v272[48] = v101;
            *(_QWORD *)&v272[56] = v102 | 0x4000001100000000;
            *(_QWORD *)&v272[64] = v110;
            v272[74] = v108;
            *(_WORD *)&v272[72] = x_low;
            LOBYTE(v254) = v226;
            DisplayList.Item.canonicalize(options:)((char *)&v254);
            outlined consume of DisplayList.Item.Value(v106, v103);
            swift_release();
            *(_QWORD *)&v271[104] = 0;
            *(_DWORD *)v272 = 0;
            v71 = v63;
          }
          v111 = v273[24];
          v112 = *(_QWORD *)&v272[48];
          v114 = *(_QWORD *)&v272[64];
          v113 = *(_QWORD *)&v272[56];
          v115 = *(unsigned __int16 *)&v272[72] | (v272[74] << 16);
          if ((v273[24] & 1) != 0)
          {
            v116 = *(_QWORD *)&v272[56] >> 62;
            if (*(_QWORD *)&v272[56] >> 62 != 3
              || (v115 & 0xFFFFFF) != 0
              || *(_QWORD *)&v272[56] != 0xC000000000000000
              || *(_QWORD *)&v272[64] | *(_QWORD *)&v272[48])
            {
              v199 = *(unsigned __int16 *)&v271[68];
              v221 = v273[24];
              v223 = v75;
              v268.origin.x = v185;
              v268.origin.y = v184;
              v268.size.width = v183;
              v268.size.height = v182;
              v117 = *(_QWORD *)&v272[40];
              v190 = *(double *)&v272[16];
              v193 = *(double *)&v272[8];
              v254 = *(_OWORD *)&v272[8];
              v186 = *(_QWORD *)&v272[32];
              v187 = *(_QWORD *)&v272[24];
              v255 = *(_OWORD *)&v272[24];
              *(_OWORD *)v256 = *(_OWORD *)&v272[40];
              *(_OWORD *)&v256[16] = *(_OWORD *)&v272[56];
              v118 = *(_QWORD *)&v272[64];
              BYTE2(v257) = v272[74];
              v230 = *(unsigned __int16 *)&v272[72] | (v272[74] << 16);
              LOWORD(v257) = *(_WORD *)&v272[72];
              DWORD1(v257) = *(_DWORD *)&v272[76];
              v119 = *(_QWORD *)&v272[56];
              DisplayList.Item.addExtent(to:)();
              v120 = v268.origin.x;
              v121 = v268.origin.y;
              v122 = v268.size.width;
              v123 = v268.size.height;
              IsNull = CGRectIsNull(v268);
              v125 = 0.0;
              if (IsNull)
                v126 = 0.0;
              else
                v126 = v120;
              if (IsNull)
                v127 = 0.0;
              else
                v127 = v121;
              if (IsNull)
                v128 = 0.0;
              else
                v128 = v122;
              if (!IsNull)
                v125 = v123;
              v281 = CGRectIntegral(*(CGRect *)(&v125 - 3));
              v129 = v281.origin.x;
              v130 = v281.origin.y;
              *(CGRect *)&v272[8] = v281;
              if (v116 < 3 || (v230 & 0xFFFFFF) != 0 || v119 != 0xC000000000000000 || v118 | v112)
              {
                type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                v134 = swift_allocObject();
                *(_OWORD *)(v134 + 16) = xmmword_23527E860;
                *(_QWORD *)(v134 + 32) = 0;
                *(_QWORD *)(v134 + 40) = 0;
                *(_QWORD *)(v134 + 48) = v187;
                *(_QWORD *)(v134 + 56) = v186;
                *(_QWORD *)(v134 + 64) = v117;
                *(_QWORD *)(v134 + 72) = v112;
                *(_QWORD *)(v134 + 80) = v119;
                *(_QWORD *)(v134 + 88) = v118;
                *(_BYTE *)(v134 + 98) = BYTE2(v115);
                *(_WORD *)(v134 + 96) = v230;
                *(_DWORD *)(v134 + 100) = 0;
                v254 = 0uLL;
                *(_QWORD *)&v255 = v187;
                *((_QWORD *)&v255 + 1) = v186;
                *(_QWORD *)v256 = v117;
                *(_QWORD *)&v256[8] = v112;
                *(_QWORD *)&v256[16] = v119;
                *(_QWORD *)&v256[24] = v118;
                BYTE2(v257) = BYTE2(v115);
                LOWORD(v257) = v230;
                DWORD1(v257) = 0;
                outlined copy of DisplayList.Item.Value(v112, v119);
                DisplayList.Item.features.getter();
                v132 = v112;
                v133 = v253;
                v254 = 0uLL;
                *(_QWORD *)&v255 = v187;
                *((_QWORD *)&v255 + 1) = v186;
                *(_QWORD *)v256 = v117;
                *(_QWORD *)&v256[8] = v132;
                *(_QWORD *)&v256[16] = v119;
                *(_QWORD *)&v256[24] = v118;
                BYTE2(v257) = BYTE2(v115);
                LOWORD(v257) = v230;
                DWORD1(v257) = 0;
                DisplayList.Item.properties.getter();
                v131 = v253;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                v131 = 0;
                v132 = v112;
                v133 = 0;
                v134 = MEMORY[0x24BEE4AF8];
              }
              v135 = swift_allocObject();
              *(_QWORD *)(v135 + 16) = v134;
              *(_WORD *)(v135 + 24) = v133;
              *(_BYTE *)(v135 + 26) = v131;
              *(double *)(v135 + 32) = v129 - v193;
              *(double *)(v135 + 40) = v130 - v190;
              *(_BYTE *)(v135 + 48) = 0;
              *(_DWORD *)(v135 + 52) = 0;
              *(_BYTE *)(v135 + 56) = 1;
              *(_DWORD *)(v135 + 60) = 161;
              *(_BYTE *)(v135 + 64) = 3;
              outlined consume of DisplayList.Item.Value(v132, v119);
              v114 = 0;
              v112 = v135 | 0x9000000000000000;
              *(_QWORD *)&v272[48] = v135 | 0x9000000000000000;
              v113 = v199;
              *(_OWORD *)&v272[56] = v199;
              v272[74] = 0;
              *(_WORD *)&v272[72] = 0;
              v71 = v197;
              v75 = v223;
              v111 = v221;
            }
            else
            {
              v113 = 0xC000000000000000;
            }
            v115 = 0;
            v273[24] = v111 & 0xFE;
          }
          v136 = *(_QWORD *)&v273[8];
          v137 = v273[16];
          v191 = v273[16];
          v194 = *(_QWORD *)&v273[8];
          if ((v273[16] & 1) != 0 || *(_DWORD *)&v273[8])
          {
            v138 = *(_OWORD *)&v272[24];
            v139 = *(_QWORD *)&v272[40];
            if (v113 >> 62 != 3 || (v115 & 0xFFFFFF) != 0 || v113 != 0xC000000000000000 || v114 | v112)
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v144 = swift_allocObject();
              *(_OWORD *)(v144 + 16) = xmmword_23527E860;
              *(_QWORD *)(v144 + 32) = 0;
              *(_QWORD *)(v144 + 40) = 0;
              *(_OWORD *)(v144 + 48) = v138;
              *(_QWORD *)(v144 + 64) = v139;
              *(_QWORD *)(v144 + 72) = v112;
              *(_QWORD *)(v144 + 80) = v113;
              *(_QWORD *)(v144 + 88) = v114;
              *(_BYTE *)(v144 + 98) = BYTE2(v115);
              *(_WORD *)(v144 + 96) = v115;
              *(_DWORD *)(v144 + 100) = 0;
              v254 = 0uLL;
              v255 = v138;
              *(_QWORD *)v256 = v139;
              *(_QWORD *)&v256[8] = v112;
              *(_QWORD *)&v256[16] = v113;
              *(_QWORD *)&v256[24] = v114;
              BYTE2(v257) = BYTE2(v115);
              LOWORD(v257) = v115;
              DWORD1(v257) = 0;
              outlined copy of GraphicsBlendMode(v136, v137);
              outlined copy of DisplayList.Item.Value(v112, v113);
              v145 = v113;
              DisplayList.Item.features.getter();
              v143 = LOWORD(v268.origin.x);
              v254 = 0uLL;
              v255 = v138;
              *(_QWORD *)v256 = v139;
              *(_QWORD *)&v256[8] = v112;
              *(_QWORD *)&v256[16] = v113;
              *(_QWORD *)&v256[24] = v114;
              BYTE2(v257) = BYTE2(v115);
              v141 = v191;
              v140 = v194;
              LOWORD(v257) = v115;
              DWORD1(v257) = 0;
              DisplayList.Item.properties.getter();
              v142 = LOBYTE(v268.origin.x);
            }
            else
            {
              v140 = *(_QWORD *)&v273[8];
              v141 = v273[16];
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v273[8], v273[16]);
              v142 = 0;
              v143 = 0;
              v144 = MEMORY[0x24BEE4AF8];
              v145 = 0xC000000000000000;
            }
            *(_QWORD *)&v272[48] = v140;
            *(_QWORD *)&v272[56] = v141 | 0x4000000500000000;
            *(_QWORD *)&v272[64] = v144;
            v272[74] = v142;
            *(_WORD *)&v272[72] = v143;
            LOBYTE(v254) = v226;
            DisplayList.Item.canonicalize(options:)((char *)&v254);
            outlined consume of DisplayList.Item.Value(v112, v145);
            v112 = *(_QWORD *)&v272[48];
            v114 = *(_QWORD *)&v272[64];
            v113 = *(_QWORD *)&v272[56];
            v115 = *(unsigned __int16 *)&v272[72] | (v272[74] << 16);
          }
          if (v72 == 1.0)
          {
            v229 = v115;
            *(_QWORD *)&v220 = v113;
            *((_QWORD *)&v220 + 1) = v114;
          }
          else
          {
            v146 = *(_OWORD *)&v272[24];
            v147 = *(_QWORD *)&v272[40];
            if (v113 >> 62 != 3
              || (v115 & 0xFFFFFF) != 0
              || v113 != 0xC000000000000000
              || (v148 = v114 | v112, v114 | v112))
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v151 = swift_allocObject();
              *(_OWORD *)(v151 + 16) = xmmword_23527E860;
              *(_QWORD *)(v151 + 32) = 0;
              *(_QWORD *)(v151 + 40) = 0;
              *(_OWORD *)(v151 + 48) = v146;
              *(_QWORD *)(v151 + 64) = v147;
              *(_QWORD *)(v151 + 72) = v112;
              *(_QWORD *)(v151 + 80) = v113;
              *(_QWORD *)(v151 + 88) = v114;
              *(_BYTE *)(v151 + 98) = BYTE2(v115);
              *(_WORD *)(v151 + 96) = v115;
              *(_DWORD *)(v151 + 100) = 0;
              v254 = 0uLL;
              v255 = v146;
              *(_QWORD *)v256 = v147;
              *(_QWORD *)&v256[8] = v112;
              *(_QWORD *)&v256[16] = v113;
              *(_QWORD *)&v256[24] = v114;
              BYTE2(v257) = BYTE2(v115);
              LOWORD(v257) = v115;
              DWORD1(v257) = 0;
              outlined copy of DisplayList.Item.Value(v112, v113);
              v152 = v113;
              DisplayList.Item.features.getter();
              v153 = v147;
              v149 = v112;
              v150 = LOWORD(v268.origin.x);
              v254 = 0uLL;
              v255 = v146;
              *(_QWORD *)v256 = v153;
              *(_QWORD *)&v256[8] = v149;
              *(_QWORD *)&v256[16] = v113;
              *(_QWORD *)&v256[24] = v114;
              BYTE2(v257) = BYTE2(v115);
              LOWORD(v257) = v115;
              DWORD1(v257) = 0;
              DisplayList.Item.properties.getter();
              v148 = LOBYTE(v268.origin.x);
            }
            else
            {
              v149 = v112;
              v150 = 0;
              v151 = MEMORY[0x24BEE4AF8];
              v152 = 0xC000000000000000;
            }
            *(_QWORD *)&v272[48] = LODWORD(v72);
            *(_QWORD *)&v272[56] = 0x4000000400000000;
            *(_QWORD *)&v272[64] = v151;
            v272[74] = v148;
            *(_WORD *)&v272[72] = v150;
            LOBYTE(v254) = v226;
            DisplayList.Item.canonicalize(options:)((char *)&v254);
            outlined consume of DisplayList.Item.Value(v149, v152);
            v112 = *(_QWORD *)&v272[48];
            v220 = *(_OWORD *)&v272[56];
            v229 = *(unsigned __int16 *)&v272[72] | (v272[74] << 16);
          }
          v225 = v112;
          v78 = *(double *)&v272[16];
          v79 = *(double *)&v272[8];
          v80 = *(_QWORD *)&v272[32];
          v81 = *(_QWORD *)&v272[24];
          v198 = *(_QWORD *)&v272[40];
          v82 = *(unsigned int *)&v272[76];
          v154 = static GraphicsBlendMode.normal;
          v155 = byte_254266040;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v194, v191);
          *(_QWORD *)&v273[8] = v154;
          v273[16] = v155;
          *(_DWORD *)&v273[20] = 1065353216;
          v273[24] = 0;
          *(_OWORD *)&v272[48] = xmmword_23527E880;
          *(_QWORD *)&v272[64] = 0;
          v272[74] = 0;
          *(_WORD *)&v272[72] = 0;
        }
        *(double *)&v272[8] = v73;
        *(double *)&v272[16] = v74;
        *(_QWORD *)&v272[24] = v75;
        *(_QWORD *)&v272[32] = v76;
        v87 = (_QWORD *)v274[1];
        v88 = v274[2];
        v89 = v274[3];
        v90 = v274[4];
        v91 = v274[6];
        v92 = v275;
        v93 = v274[7];
        v94 = v274[8];
        if (v275 >> 30)
        {
          if (v275 >> 30 == 1)
          {
            v196 = v71;
            v189 = v274[5];
            v192 = v274[6];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v274[1], v274[2], v274[3], v274[4], v274[5], v274[6], v274[7], v274[8], v275);
            outlined copy of DisplayList.Item.Value(v225, v220);
            v95 = v87;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87[2] + 1, 1, v87);
            v97 = v95[2];
            v96 = v95[3];
            if (v97 >= v96 >> 1)
              v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v96 > 1), v97 + 1, 1, v95);
            v95[2] = v97 + 1;
            v98 = (double *)&v95[9 * v97];
            v98[4] = v79 - v73;
            v98[5] = v78 - v74;
            *((_QWORD *)v98 + 6) = v81;
            *((_QWORD *)v98 + 7) = v80;
            *((_QWORD *)v98 + 8) = v198;
            *((_QWORD *)v98 + 9) = v225;
            *((_OWORD *)v98 + 5) = v220;
            *((_BYTE *)v98 + 98) = BYTE2(v229);
            *((_WORD *)v98 + 48) = v229;
            *((_DWORD *)v98 + 25) = 0;
            outlined consume of DisplayList.Item.Value(v225, v220);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v87, v88, v89, v90, v189, v192, v93, v94, v92);
            v274[1] = v95;
            memset(&v274[2], 0, 56);
            v50 = 0x40000000;
            v45 = v219;
            v51 = v202;
            v71 = v196;
            goto LABEL_20;
          }
          *(double *)&v274[1] = v79;
          *(double *)&v274[2] = v78;
          v50 = v229 & 0xFFFFFF | (unint64_t)(v82 << 32);
          v274[3] = v81;
          v274[4] = v80;
          v274[5] = v198;
          v274[6] = v225;
          *(_OWORD *)&v274[7] = v220;
        }
        else
        {
          v99 = v274[5];
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v100 = swift_allocObject();
          *(_OWORD *)(v100 + 16) = xmmword_2352828C0;
          *(double *)(v100 + 32) = *(double *)&v87 - v73;
          *(double *)(v100 + 40) = *(double *)&v88 - v74;
          *(_QWORD *)(v100 + 48) = v89;
          *(_QWORD *)(v100 + 56) = v90;
          *(_QWORD *)(v100 + 64) = v99;
          *(_QWORD *)(v100 + 72) = v91;
          *(_QWORD *)(v100 + 80) = v93;
          *(_QWORD *)(v100 + 88) = v94;
          *(_BYTE *)(v100 + 98) = BYTE2(v92);
          *(_WORD *)(v100 + 96) = v92;
          *(_DWORD *)(v100 + 100) = 0;
          *(double *)(v100 + 104) = v79 - v73;
          *(double *)(v100 + 112) = v78 - v74;
          *(_QWORD *)(v100 + 120) = v81;
          *(_QWORD *)(v100 + 128) = v80;
          *(_QWORD *)(v100 + 136) = v198;
          *(_QWORD *)(v100 + 144) = v225;
          *(_OWORD *)(v100 + 152) = v220;
          *(_BYTE *)(v100 + 170) = BYTE2(v229);
          *(_WORD *)(v100 + 168) = v229;
          *(_DWORD *)(v100 + 172) = 0;
          v274[1] = v100;
          memset(&v274[2], 0, 56);
          v50 = 0x40000000;
        }
        v45 = v219;
        v51 = v202;
LABEL_20:
        v275 = v50;
        outlined consume of _ShapeStyle_RenderedShape.Shape(v269, *((uint64_t *)&v269 + 1), v270, *((uint64_t *)&v270 + 1), *(uint64_t *)v271, *(uint64_t *)&v271[8], *(uint64_t *)&v271[16], *(uint64_t *)&v271[24], *(uint64_t *)&v271[32], *(uint64_t *)&v271[40], *(uint64_t *)&v271[48], *(uint64_t *)&v271[56], *(unsigned int *)&v271[64]);
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?((unint64_t)v251, v242, (unint64_t)v248, v245, v218, v235, v238, v215, v214, v51, v201, v71, v232, v200);
        *(_QWORD *)&v269 = v213;
        *((_QWORD *)&v269 + 1) = v212;
        *(_QWORD *)&v270 = v211;
        *((_QWORD *)&v270 + 1) = v210;
        *(_QWORD *)&v271[16] = v209;
        *(_QWORD *)&v271[24] = v208;
        *(_QWORD *)&v271[32] = v207;
        *(_QWORD *)&v271[40] = v206;
        *(_QWORD *)&v271[48] = v205;
        *(_QWORD *)&v271[56] = v204;
        *(_DWORD *)&v271[64] = v203;
        v49 = *(_DWORD *)(v45 + 60);
        v48 = v49;
        *(_QWORD *)v271 = v217;
        *(_QWORD *)&v271[8] = v216;
        v46 = v195;
        swift_beginAccess();
      }
      while (*(_QWORD *)(*(_QWORD *)(v45 + 24) + 16) > v49);
    }
    *(_DWORD *)(v45 + 60) = 0;
  }
  v156 = v274[1];
  v157 = v274[2];
  v158 = v274[3];
  v159 = v274[4];
  v160 = v274[5];
  v161 = v274[6];
  v162 = v274[7];
  v163 = v274[8];
  v164 = v275;
  v252 = v274[2];
  if (!(v275 >> 30))
  {
    if (v274[7] >> 62 != 3 || v274[7] != 0xC000000000000000 || v274[8] | v274[6] || (v275 & 0xFFFFFF) != 0)
    {
      v240 = HIDWORD(v275);
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v174 = swift_allocObject();
      *(_OWORD *)(v174 + 16) = xmmword_23527E860;
      *(_QWORD *)(v174 + 32) = v156;
      *(_QWORD *)(v174 + 40) = v157;
      *(_QWORD *)(v174 + 48) = v158;
      *(_QWORD *)(v174 + 56) = v159;
      *(_QWORD *)(v174 + 64) = v160;
      *(_QWORD *)(v174 + 72) = v161;
      *(_QWORD *)(v174 + 80) = v162;
      *(_QWORD *)(v174 + 88) = v163;
      v236 = HIWORD(v164);
      *(_BYTE *)(v174 + 98) = BYTE2(v164);
      *(_WORD *)(v174 + 96) = v164;
      *(_DWORD *)(v174 + 100) = v240;
      *(_QWORD *)&v254 = v156;
      *((_QWORD *)&v254 + 1) = v157;
      *(_QWORD *)&v255 = v158;
      *((_QWORD *)&v255 + 1) = v159;
      *(_QWORD *)v256 = v160;
      *(_QWORD *)&v256[8] = v161;
      *(_QWORD *)&v256[16] = v162;
      *(_QWORD *)&v256[24] = v163;
      BYTE2(v257) = BYTE2(v164);
      LOWORD(v257) = v164;
      DWORD1(v257) = v240;
      outlined copy of DisplayList.Item.Value(v161, v162);
      DisplayList.Item.features.getter();
      v177 = v164;
      v173 = LOWORD(v268.origin.x);
      *(_QWORD *)&v254 = v156;
      *((_QWORD *)&v254 + 1) = v252;
      *(_QWORD *)&v255 = v158;
      *((_QWORD *)&v255 + 1) = v159;
      *(_QWORD *)v256 = v160;
      *(_QWORD *)&v256[8] = v161;
      *(_QWORD *)&v256[16] = v162;
      *(_QWORD *)&v256[24] = v163;
      BYTE2(v257) = v236;
      LOWORD(v257) = v177;
      DWORD1(v257) = v240;
      DisplayList.Item.properties.getter();
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v156, v252, v158, v159, v160, v161, v162, v163, v177);
      v156 = 0;
      v252 = 0;
      v158 = 0;
      v159 = 0;
      v178 = 0;
      v179 = 0;
      v162 = 0;
      v163 = 0;
      v172 = LOBYTE(v268.origin.x);
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v274[1], v274[2], v274[3], v274[4], v274[5], 0, 0xC000000000000000, 0, v275);
      v156 = 0;
      v252 = 0;
      v158 = 0;
      v159 = 0;
      v178 = 0;
      v179 = 0;
      v162 = 0;
      v163 = 0;
      v173 = 0;
      v172 = 0;
      v174 = MEMORY[0x24BEE4AF8];
    }
LABEL_114:
    v175 = 0x80000000;
    goto LABEL_115;
  }
  if (v275 >> 30 == 1)
  {
    v243 = v274[3];
    v246 = v274[4];
    v165 = (_QWORD *)swift_bridgeObjectRetain();
    v249 = v156;
    DisplayList.init(_:)(v165, (uint64_t)&v268);
    v254 = *(_OWORD *)&v271[72];
    v255 = *(_OWORD *)&v271[88];
    *(_QWORD *)v256 = *(_QWORD *)&v272[40];
    *(_OWORD *)&v256[8] = xmmword_23527E870;
    *(CGFloat *)&v256[24] = v268.origin.x;
    BYTE2(v257) = BYTE2(v268.origin.y);
    LOWORD(v257) = LOWORD(v268.origin.y);
    DWORD1(v257) = *(_DWORD *)&v272[76];
    LOBYTE(v268.origin.x) = v188;
    DisplayList.Item.canonicalize(options:)((char *)&v268);
    v166 = v254;
    v167 = v255;
    v168 = *(_QWORD *)v256;
    v169 = *(_OWORD *)&v256[16];
    v170 = (unsigned __int16)v257 | (BYTE2(v257) << 16);
    v233 = DWORD1(v257);
    v171 = *(_QWORD *)&v256[16] >> 62;
    if (*(_QWORD *)&v256[16] >> 62 != 3
      || (v170 & 0xFFFFFF) != 0
      || *(_QWORD *)&v256[16] != 0xC000000000000000
      || *(_QWORD *)&v256[24] | *(_QWORD *)&v256[8])
    {
      v239 = *(_QWORD *)&v256[8];
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v176 = swift_allocObject();
      *(_OWORD *)(v176 + 16) = xmmword_23527E860;
      *(_OWORD *)(v176 + 32) = v166;
      *(_OWORD *)(v176 + 48) = v167;
      *(_QWORD *)(v176 + 64) = v168;
      *(_QWORD *)(v176 + 72) = v239;
      *(_OWORD *)(v176 + 80) = v169;
      *(_BYTE *)(v176 + 98) = BYTE2(v170);
      *(_WORD *)(v176 + 96) = v170;
      *(_DWORD *)(v176 + 100) = v233;
      __asm { BR              X10 }
    }
    outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v249, v252, v243, v246, v160, v161, v162, v163, v164);
    v172 = 0;
    v173 = 0;
    v174 = MEMORY[0x24BEE4AF8];
    v156 = 0;
    v252 = 0;
    v158 = 0;
    v159 = 0;
    v178 = 0;
    v179 = 0;
    v162 = 0;
    v163 = 0;
    goto LABEL_114;
  }
  v179 = v274[6];
  v178 = v274[5];
  v175 = v275;
  v173 = 0;
  v172 = 0;
  v174 = MEMORY[0x24BEE4AF8];
LABEL_115:
  *(_QWORD *)&v254 = v174;
  WORD4(v254) = v173;
  BYTE10(v254) = v172;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v276, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v265 = *(_OWORD *)&v272[48];
  v266 = *(_OWORD *)&v272[64];
  v267[0] = *(_OWORD *)v273;
  *(_OWORD *)((char *)v267 + 9) = *(_OWORD *)&v273[9];
  v261 = *(_OWORD *)&v271[96];
  v262 = *(_OWORD *)v272;
  v263 = *(_OWORD *)&v272[16];
  v264 = *(_OWORD *)&v272[32];
  v257 = *(_OWORD *)&v271[32];
  v258 = *(_OWORD *)&v271[48];
  v259 = *(_OWORD *)&v271[64];
  v260 = *(_OWORD *)&v271[80];
  v254 = v269;
  v255 = v270;
  *(_OWORD *)v256 = *(_OWORD *)v271;
  *(_OWORD *)&v256[16] = *(_OWORD *)&v271[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v254);
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v156, v252, v158, v159, v178, v179, v162, v163, v175);
}

{
  uint64_t *v0;
  int v1;
  __int128 *v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t *v8;
  __int128 *v9;
  int v10;
  uint64_t Value;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned __int128 v25;
  char v26;
  __int128 *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  double *v45;
  double v46;
  double v47;
  double *v48;
  double v49;
  double v50;
  char v51;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v56;
  double v57;
  CGFloat v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  CGFloat v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  int v72;
  __int16 v73;
  char v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _QWORD *v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  double v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  char v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  double *v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  __int16 x_low;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int v162;
  uint64_t v163;
  _BOOL4 IsNull;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  char v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  char v181;
  __int16 v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  char v187;
  __int16 v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unsigned int v199;
  _QWORD *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  char v208;
  __int16 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  CGFloat v215;
  CGFloat v216;
  CGFloat v217;
  CGFloat v218;
  uint64_t v219;
  char v220;
  __int128 *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  uint64_t v232;
  unsigned __int8 v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  id v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  int v276;
  int v277;
  char v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  CGFloat v286;
  uint64_t v287;
  uint64_t v288;
  CGFloat v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  __int16 v299;
  CGRect v300;
  unsigned __int8 v301[24];
  __int128 v302;
  __int128 v303;
  _BYTE v304[80];
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  _BYTE v312[25];
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  _BYTE v319[48];
  _BYTE v320[48];
  __int128 v321;
  __int128 v322;
  _BYTE v323[25];
  _QWORD v324[9];
  unint64_t v325;
  _OWORD v326[2];
  _BYTE v327[32];
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  unsigned __int8 v334[32];
  __int128 v335;
  __int128 v336;
  __int128 v337;
  unsigned __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  _BYTE v345[19];
  char v346;
  _QWORD v347[4];
  unsigned __int8 v348;
  _OWORD v349[10];
  _BYTE v350[19];
  uint64_t v351;
  __C::CGRect v352;
  CGRect v353;
  CGRect v354;
  CGRect v355;
  CGRect v356;
  CGRect v357;

  v8 = v0;
  v9 = &v335;
  v351 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  Value = AGGraphGetValue();
  v12 = *(_OWORD *)(Value + 48);
  v14 = *(_OWORD *)Value;
  v13 = *(_OWORD *)(Value + 16);
  v349[2] = *(_OWORD *)(Value + 32);
  v349[3] = v12;
  v349[0] = v14;
  v349[1] = v13;
  v15 = *(_OWORD *)(Value + 112);
  v17 = *(_OWORD *)(Value + 64);
  v16 = *(_OWORD *)(Value + 80);
  v349[6] = *(_OWORD *)(Value + 96);
  v349[7] = v15;
  v349[4] = v17;
  v349[5] = v16;
  v19 = *(_OWORD *)(Value + 144);
  v18 = *(_OWORD *)(Value + 160);
  v20 = *(_DWORD *)(Value + 175);
  v349[8] = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v350[15] = v20;
  v349[9] = v19;
  *(_OWORD *)v350 = v18;
  v21 = *(_OWORD *)(Value + 144);
  v343 = *(_OWORD *)(Value + 128);
  v344 = v21;
  *(_OWORD *)v345 = *(_OWORD *)(Value + 160);
  *(_DWORD *)&v345[15] = *(_DWORD *)(Value + 175);
  v22 = *(_OWORD *)(Value + 80);
  v339 = *(_OWORD *)(Value + 64);
  v340 = v22;
  v23 = *(_OWORD *)(Value + 112);
  v341 = *(_OWORD *)(Value + 96);
  v342 = v23;
  v24 = *(_OWORD *)(Value + 16);
  v335 = *(_OWORD *)Value;
  v336 = v24;
  v25 = *(_OWORD *)(Value + 48);
  v337 = *(_OWORD *)(Value + 32);
  v338 = v25;
  v27 = (__int128 *)(v26 & 1);
  v346 = v26 & 1;
  v28 = (_DWORD)v0 + 52;
  v29 = *((unsigned int *)v0 + 7);
  outlined retain of Image.Resolved((uint64_t)v349);
  v30 = (unint64_t)&v335;
  if ((Image.Resolved.mustUpdate(data:position:)() & 1) != 0)
  {
    v346 = 1;
  }
  else if (!v27 && *((_WORD *)v8 + 34))
  {
    *(_QWORD *)&v313 = __PAIR64__(*((_DWORD *)v8 + 8), v29);
    DWORD2(v313) = v10;
    v31 = AGGraphAnyInputsChanged();
    v32 = ++static DisplayList.Version.lastValue;
    if (!v31)
      goto LABEL_11;
    if (!v32)
      goto LABEL_9;
    goto LABEL_7;
  }
  v32 = ++static DisplayList.Version.lastValue;
  if (!static DisplayList.Version.lastValue)
  {
LABEL_9:
    LOWORD(v33) = 0;
    goto LABEL_10;
  }
LABEL_7:
  v33 = (2 * ((33 * (v32 >> 16)) ^ v32)) | 1;
LABEL_10:
  *((_WORD *)v8 + 34) = v33;
LABEL_11:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_126:
    swift_once();
    v79 = v220;
    goto LABEL_25;
  }
  v292 = v32;
  v34 = *((_DWORD *)v8 + 10);
  v295 = v8;
  v285 = AGCreateWeakAttribute();
  v279 = AGCreateWeakAttribute();
  v271 = v34;
  v273 = AGCreateWeakAttribute();
  v35 = AGCreateWeakAttribute();
  v36 = v35;
  v37 = HIDWORD(v35);
  v38 = AGCreateWeakAttribute();
  v39 = v38;
  v40 = HIDWORD(v38);
  v238 = v38;
  v41 = AGCreateWeakAttribute();
  v42 = (double *)AGGraphGetValue();
  v43 = *v42;
  v44 = v42[1];
  v45 = (double *)AGGraphGetValue();
  v46 = v43 - *v45;
  v47 = v44 - v45[1];
  v48 = (double *)AGGraphGetValue();
  v49 = *v48;
  v50 = v48[1];
  _threadGeometryProxyData();
  *(_QWORD *)&v313 = v285;
  *((_QWORD *)&v313 + 1) = v279;
  *(_QWORD *)&v314 = v273;
  *((_QWORD *)&v314 + 1) = __PAIR64__(v37, v36);
  *(_QWORD *)&v315 = __PAIR64__(v40, v39);
  *((_QWORD *)&v315 + 1) = v41;
  LODWORD(v316) = v32;
  _setThreadGeometryProxyData();
  v332 = v343;
  v333 = v344;
  *(_OWORD *)v334 = *(_OWORD *)v345;
  *(_DWORD *)&v334[15] = *(_DWORD *)&v345[15];
  v328 = v339;
  v329 = v340;
  v330 = v341;
  v331 = v342;
  v326[0] = v335;
  v326[1] = v336;
  *(_OWORD *)v327 = v337;
  *(_OWORD *)&v327[16] = v338;
  v9 = (__int128 *)v335;
  v51 = BYTE8(v335);
  v222 = BYTE8(v335);
  v265 = *((_QWORD *)&v336 + 1);
  v268 = v336;
  v246 = BYTE8(v337);
  v244 = *(_QWORD *)&v327[12];
  v242 = BYTE12(v338);
  v261 = (id)v339;
  v262 = v337;
  v258 = v340;
  v259 = *((_QWORD *)&v339 + 1);
  v254 = v338 >> 32;
  v256 = *((_QWORD *)&v340 + 1);
  v252 = v341;
  v240 = BYTE1(v341);
  v250 = BYTE2(v341);
  v248 = BYTE3(v341);
  v352 = Image.Resolved.frame(in:)((CGSize)__PAIR128__(*(unint64_t *)&v50, *(unint64_t *)&v49));
  x = v352.origin.x;
  y = v352.origin.y;
  width = v352.size.width;
  height = v352.size.height;
  outlined copy of GraphicsImage.Contents?(v9, v51);
  _setThreadGeometryProxyData();
  v56 = *v295;
  memset(&v324[1], 0, 64);
  v324[0] = v56;
  v325 = 0x80000000;
  v264 = v56;
  swift_retain();
  _threadGeometryProxyData();
  LODWORD(v313) = v285;
  DWORD2(v313) = v279;
  LODWORD(v314) = v273;
  *((_QWORD *)&v314 + 1) = __PAIR64__(v37, v36);
  *(_QWORD *)&v315 = __PAIR64__(v40, v238);
  DWORD2(v315) = v41;
  _setThreadGeometryProxyData();
  v221 = v9;
  if (BYTE9(v333) == 3 || !(_QWORD)v333)
  {
    _setThreadGeometryProxyData();
    v27 = &v313;
    v8 = v295;
  }
  else
  {
    v57 = v49 / *(double *)(v333 + 32);
    v58 = v46;
    v59 = *(double *)(v333 + 64) * v57;
    v60 = v50 / *(double *)(v333 + 40);
    v61 = v47;
    v62 = *(double *)(v333 + 72) * v60;
    LOBYTE(v302) = BYTE9(v333);
    LOBYTE(v300.origin.x) = v334[0];
    SymbolVariants.Shape.path(in:cornerRadius:)(HIDWORD(v333) | ((unint64_t)v334[0] << 32), (uint64_t)v347, 0.0, 0.0, v59, v62);
    v63 = v347[0];
    v64 = v347[1];
    v65 = v347[2];
    v66 = v347[3];
    v67 = v348 | 0x10000;
    _setThreadGeometryProxyData();
    outlined copy of _ShapeStyle_RenderedShape.Shape(v63, v64, v65, v66, v67, 0, 0, 0, 0, 0, 0, 0, 0);
    v353.origin.x = 0.0;
    v353.origin.y = 0.0;
    v353.size.width = v59;
    v353.size.height = v62;
    v286 = v61;
    v289 = v58;
    v354 = CGRectOffset(v353, v58, v61);
    v68 = v354.origin.x;
    v69 = v354.origin.y;
    v70 = v354.size.width;
    v71 = v354.size.height;
    v8 = v295;
    v72 = *((_DWORD *)v295 + 2);
    v73 = *((_WORD *)v295 + 34);
    v74 = *((_BYTE *)v295 + 48);
    if (one-time initialization token for normal != -1)
      swift_once();
    LOBYTE(v300.origin.x) = byte_254266040;
    *(_QWORD *)&v302 = v63;
    *((_QWORD *)&v302 + 1) = v64;
    *(_QWORD *)&v303 = v65;
    *((_QWORD *)&v303 + 1) = v66;
    *(_QWORD *)v304 = v67;
    memset(&v304[8], 0, 60);
    *(_WORD *)&v304[68] = v73;
    *(CGFloat *)&v304[72] = v68;
    *(CGFloat *)&v305 = v69;
    *((CGFloat *)&v305 + 1) = v70;
    v306 = *(unint64_t *)&v71;
    LODWORD(v307) = 0;
    *((CGFloat *)&v307 + 1) = v68;
    *(CGFloat *)&v308 = v69;
    *((CGFloat *)&v308 + 1) = v70;
    *(CGFloat *)&v309 = v71;
    v310 = xmmword_23527E880;
    *((_QWORD *)&v309 + 1) = v292;
    *(_QWORD *)&v311 = 0;
    BYTE10(v311) = 0;
    WORD4(v311) = 0;
    HIDWORD(v311) = v72;
    v312[0] = v74;
    *(_DWORD *)&v312[4] = v271;
    *(_QWORD *)&v312[8] = static GraphicsBlendMode.normal;
    v312[16] = byte_254266040;
    *(_DWORD *)&v312[20] = 1065353216;
    v312[24] = 0;
    v301[0] = 1;
    v75 = *((unsigned int *)v295 + 4);
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)(v301, v75, (uint64_t)v324);
    outlined consume of _ShapeStyle_RenderedShape.Shape(v63, v64, v65, v66, v67, 0, 0, 0, 0, 0, 0, 0, 0);
    v321 = v310;
    v322 = v311;
    *(_OWORD *)v323 = *(_OWORD *)v312;
    *(_OWORD *)&v323[9] = *(_OWORD *)&v312[9];
    *(_OWORD *)&v319[32] = v306;
    *(_OWORD *)v320 = v307;
    *(_OWORD *)&v320[16] = v308;
    *(_OWORD *)&v320[32] = v309;
    v317 = *(_OWORD *)&v304[32];
    v318 = *(_OWORD *)&v304[48];
    *(_OWORD *)v319 = *(_OWORD *)&v304[64];
    *(_OWORD *)&v319[16] = v305;
    v313 = v302;
    v314 = v303;
    v315 = *(_OWORD *)v304;
    v316 = *(_OWORD *)&v304[16];
    v27 = &v313;
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v313);
    v9 = v221;
    v47 = v286;
    v46 = v289;
  }
  *((_QWORD *)&v76 + 1) = v254;
  *(_QWORD *)&v76 = v244;
  v30 = v76 >> 32;
  v29 = v246 | (v244 << 32);
  if (v242)
    v77 = 0x100000000;
  else
    v77 = 0;
  v32 = v77 & 0xFFFFFFFF00000000 | HIDWORD(v254);
  if (v240)
    v78 = 256;
  else
    v78 = 0;
  v28 = v78 | v252 | (v250 << 16) | (v248 << 24) | 0x400000;
  v3 = v222;
  outlined copy of GraphicsImage.Contents?(v9, v222);
  v355.origin.x = x;
  v355.origin.y = y;
  v355.size.width = width;
  v355.size.height = height;
  v356 = CGRectOffset(v355, v46, v47);
  v4 = v356.origin.x;
  v5 = v356.origin.y;
  v6 = v356.size.width;
  v7 = v356.size.height;
  v1 = *((_DWORD *)v8 + 2);
  v2 = v9;
  LOWORD(v9) = *((_WORD *)v8 + 34);
  v79 = *((_BYTE *)v8 + 48);
  v220 = v79;
  if (one-time initialization token for normal != -1)
    goto LABEL_126;
LABEL_25:
  v80 = static GraphicsBlendMode.normal;
  v81 = byte_254266040;
  v298 = byte_254266040;
  *(_QWORD *)&v313 = v2;
  *((_QWORD *)&v313 + 1) = v3;
  *(_QWORD *)&v314 = v268;
  *((_QWORD *)&v314 + 1) = v265;
  *(_QWORD *)&v315 = v262;
  *((_QWORD *)&v315 + 1) = v29;
  *(_QWORD *)&v316 = v30;
  *((_QWORD *)&v316 + 1) = v32;
  *(_QWORD *)&v317 = v261;
  *((_QWORD *)&v317 + 1) = v259;
  *(_QWORD *)&v318 = v258;
  *((_QWORD *)&v318 + 1) = v256;
  *(_DWORD *)v319 = v28;
  *(_WORD *)&v319[4] = (_WORD)v9;
  *(CGFloat *)&v319[8] = v4;
  *(CGFloat *)&v319[16] = v5;
  *(CGFloat *)&v319[24] = v6;
  *(CGFloat *)&v319[32] = v7;
  *(_QWORD *)&v319[40] = 0;
  *(_DWORD *)v320 = 0;
  *(CGFloat *)&v320[8] = v4;
  *(CGFloat *)&v320[16] = v5;
  *(CGFloat *)&v320[24] = v6;
  *(CGFloat *)&v320[32] = v7;
  v27[12] = xmmword_23527E880;
  *(_QWORD *)&v320[40] = v292;
  *(_QWORD *)&v322 = 0;
  BYTE10(v322) = 0;
  WORD4(v322) = 0;
  HIDWORD(v322) = v1;
  v323[0] = v79;
  *(_DWORD *)&v323[4] = v271;
  *(_QWORD *)&v323[8] = v80;
  v323[16] = v298;
  *(_DWORD *)&v323[20] = 1065353216;
  v323[24] = 0;
  LOBYTE(v302) = 0;
  v82 = *((unsigned int *)v8 + 4);
  outlined copy of GraphicsBlendMode(v80, v81);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v302, v82, (uint64_t)v324);
  v83 = v264;
  if (v264)
  {
    v84 = (uint64_t *)(v264 + 24);
    v85 = *(_DWORD *)(v264 + 60);
    v86 = v85;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v264 + 24) + 16) > v85)
    {
      v217 = *(double *)(MEMORY[0x24BDBF070] + 8);
      v218 = *MEMORY[0x24BDBF070];
      v215 = *(double *)(MEMORY[0x24BDBF070] + 24);
      v216 = *(double *)(MEMORY[0x24BDBF070] + 16);
      v87 = v85;
      do
      {
        ++*(_DWORD *)(v83 + 60);
        swift_beginAccess();
        v89 = *(_QWORD **)(v83 + 24);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v83 + 24) = v89;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if (v87 < 0)
            goto LABEL_120;
        }
        else
        {
          v89 = specialized _ArrayBuffer._consumeAndCreateNew()(v89);
          *v84 = (uint64_t)v89;
          if (v87 < 0)
          {
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
            JUMPOUT(0x234AC3C50);
          }
        }
        if (v89[2] <= v86)
          goto LABEL_121;
        v91 = 224 * v86;
        BYTE4(v89[28 * v86 + 31]) = 1;
        v92 = *v84;
        swift_endAccess();
        if (*(_QWORD *)(v92 + 16) <= v86)
          goto LABEL_122;
        v93 = (_QWORD *)(v92 + v91);
        v277 = *(_DWORD *)(v92 + v91 + 52);
        v94 = *(void **)(v92 + v91 + 56);
        v293 = *(void **)(v92 + v91 + 72);
        v296 = *(_QWORD *)(v92 + v91 + 64);
        v280 = *(void **)(v92 + v91 + 80);
        v95 = *(_QWORD *)(v92 + v91 + 104);
        v287 = *(_QWORD *)(v92 + v91 + 96);
        v290 = *(_QWORD *)(v92 + v91 + 88);
        v96 = *(_QWORD *)(v92 + v91 + 112);
        v97 = v93[15];
        v98 = v93[16];
        v99 = v93[17];
        v101 = v93[18];
        v100 = v93[19];
        v102 = v93[20];
        v253 = *((_QWORD *)&v313 + 1);
        v255 = v313;
        v249 = *((_QWORD *)&v314 + 1);
        v251 = v314;
        v103 = v315;
        v245 = *((_QWORD *)&v316 + 1);
        v247 = v316;
        v241 = *((_QWORD *)&v317 + 1);
        v243 = v317;
        v237 = *((_QWORD *)&v318 + 1);
        v239 = v318;
        v236 = *(_DWORD *)v319;
        v317 = 0u;
        v318 = 0u;
        v315 = 0u;
        v316 = 0u;
        v313 = 0u;
        v314 = 0u;
        *(_DWORD *)v319 = 0x800000;
        swift_retain_n();
        v283 = v97;
        outlined copy of _ShapeStyle_Pack.Style?(v94, v296, v293, v280, v290, v287, v95, v96, v97, v98, v99, v101, v100, v102);
        swift_release();
        *(_QWORD *)&v319[40] = v264;
        *(_DWORD *)v320 = v277;
        if (v102)
        {
          *(_QWORD *)&v302 = v94;
          *((_QWORD *)&v302 + 1) = v296;
          *(_QWORD *)&v303 = v293;
          *((_QWORD *)&v303 + 1) = v280;
          *(_QWORD *)v304 = v290;
          *(_QWORD *)&v304[8] = v287;
          *(_QWORD *)&v304[16] = v95;
          *(_QWORD *)&v304[24] = v96;
          *(_QWORD *)&v304[32] = v97;
          *(_QWORD *)&v304[40] = v98;
          v304[48] = v99;
          *(_DWORD *)&v304[52] = HIDWORD(v99);
          *(_QWORD *)&v304[56] = v101;
          v304[64] = v100;
          *(_QWORD *)&v304[72] = v102;
          v104 = v101;
          v105 = v102;
          v106 = v96;
          v107 = v104;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v302);
          v108 = v107;
          v96 = v106;
          v102 = v105;
          v101 = v108;
        }
        v263 = (unint64_t)v94;
        v278 = v99;
        v109 = *(float *)&v323[20];
        v260 = v95;
        v257 = v96;
        v234 = v101;
        v235 = v98;
        v232 = v102;
        v233 = v100;
        if (*(float *)&v323[20] == 0.0
          || (v110 = *(double *)&v319[8],
              v111 = *(double *)&v319[16],
              v112 = *(_QWORD *)&v319[24],
              v113 = *(_QWORD *)&v319[32],
              CGRectIsEmpty(*(CGRect *)&v319[8])))
        {
          outlined consume of DisplayList.Item.Value(v321, *((unint64_t *)&v321 + 1));
          v321 = xmmword_23527E880;
          *(_QWORD *)&v322 = 0;
          BYTE10(v322) = 0;
          WORD4(v322) = 0;
          v114 = *(_DWORD *)&v319[40];
          if (*(_QWORD *)&v319[40])
          {
            *(_QWORD *)&v321 = *(_QWORD *)&v319[40];
            *((_QWORD *)&v321 + 1) = *(unsigned int *)v320 | 0x4000001100000000;
            *(_QWORD *)&v322 = MEMORY[0x24BEE4AF8];
            LOBYTE(v302) = v323[0];
            DisplayList.Item.canonicalize(options:)((char *)&v302);
            *(_QWORD *)&v319[40] = 0;
            *(_DWORD *)v320 = 0;
            v116 = *((_QWORD *)&v321 + 1);
            v115 = v321;
            v272 = v322;
            v114 = WORD4(v322) | (BYTE10(v322) << 16);
          }
          else
          {
            v272 = 0;
            v115 = 0;
            v116 = 0xC000000000000000;
          }
          v266 = v114;
          v269 = v116;
          v274 = v115;
          v117 = *(double *)&v320[16];
          v118 = *(double *)&v320[8];
          v119 = *(_QWORD *)&v320[32];
          v120 = *(_QWORD *)&v320[24];
          v230 = *(_QWORD *)&v320[40];
          v121 = HIDWORD(v322);
          v122 = static GraphicsBlendMode.normal;
          v123 = byte_254266040;
          v124 = *(_QWORD *)&v323[8];
          v125 = v323[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v124, v125);
          *(_QWORD *)&v323[8] = v122;
          v323[16] = v123;
          *(_DWORD *)&v323[20] = 1065353216;
          v323[24] = 0;
          v321 = xmmword_23527E880;
          *(_QWORD *)&v322 = 0;
          BYTE10(v322) = 0;
          WORD4(v322) = 0;
          v110 = *(double *)&v319[8];
          v111 = *(double *)&v319[16];
          v112 = *(_QWORD *)&v319[24];
          v113 = *(_QWORD *)&v319[32];
          v126 = v99;
        }
        else
        {
          v275 = v323[0];
          LOBYTE(v302) = v323[0];
          DisplayList.Item.canonicalize(options:)((char *)&v302);
          v142 = *(_QWORD *)&v319[40];
          if (*(_QWORD *)&v319[40])
          {
            v143 = *(unsigned int *)v320;
            v144 = *((_QWORD *)&v321 + 1);
            v145 = v322;
            v146 = WORD4(v322) | (BYTE10(v322) << 16);
            v147 = *(_OWORD *)&v320[24];
            v148 = v321;
            v149 = *(_QWORD *)&v320[40];
            if (*((_QWORD *)&v321 + 1) >> 62 != 3
              || (v146 & 0xFFFFFF) != 0
              || *((_QWORD *)&v321 + 1) != 0xC000000000000000
              || (unint64_t)v322 | (unint64_t)v321)
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v152 = swift_allocObject();
              *(_OWORD *)(v152 + 16) = xmmword_23527E860;
              *(_QWORD *)(v152 + 32) = 0;
              *(_QWORD *)(v152 + 40) = 0;
              *(_OWORD *)(v152 + 48) = v147;
              *(_QWORD *)(v152 + 64) = v149;
              *(_QWORD *)(v152 + 72) = v148;
              *(_QWORD *)(v152 + 80) = v144;
              *(_QWORD *)(v152 + 88) = v145;
              *(_BYTE *)(v152 + 98) = BYTE2(v146);
              *(_WORD *)(v152 + 96) = v146;
              *(_DWORD *)(v152 + 100) = 0;
              v302 = 0uLL;
              v303 = v147;
              *(_QWORD *)v304 = v149;
              *(_QWORD *)&v304[8] = v148;
              *(_QWORD *)&v304[16] = v144;
              *(_QWORD *)&v304[24] = v145;
              v304[34] = BYTE2(v146);
              *(_WORD *)&v304[32] = v146;
              *(_DWORD *)&v304[36] = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v148, v144);
              DisplayList.Item.features.getter();
              v153 = v149;
              x_low = LOWORD(v300.origin.x);
              v302 = 0uLL;
              v303 = v147;
              *(_QWORD *)v304 = v153;
              *(_QWORD *)&v304[8] = v148;
              *(_QWORD *)&v304[16] = v144;
              *(_QWORD *)&v304[24] = v145;
              v304[34] = BYTE2(v146);
              *(_WORD *)&v304[32] = v146;
              *(_DWORD *)&v304[36] = 0;
              DisplayList.Item.properties.getter();
              v150 = LOBYTE(v300.origin.x);
            }
            else
            {
              swift_retain();
              v150 = 0;
              x_low = 0;
              v152 = MEMORY[0x24BEE4AF8];
            }
            *(_QWORD *)&v321 = v142;
            *((_QWORD *)&v321 + 1) = v143 | 0x4000001100000000;
            *(_QWORD *)&v322 = v152;
            BYTE10(v322) = v150;
            WORD4(v322) = x_low;
            LOBYTE(v302) = v275;
            DisplayList.Item.canonicalize(options:)((char *)&v302);
            outlined consume of DisplayList.Item.Value(v148, v144);
            swift_release();
            *(_QWORD *)&v319[40] = 0;
            *(_DWORD *)v320 = 0;
          }
          v154 = v323[24];
          v155 = *((_QWORD *)&v321 + 1);
          v156 = v321;
          v157 = v322;
          v158 = WORD4(v322) | (BYTE10(v322) << 16);
          v97 = v283;
          if ((v323[24] & 1) != 0)
          {
            v159 = *((_QWORD *)&v321 + 1) >> 62;
            if (*((_QWORD *)&v321 + 1) >> 62 != 3
              || (v158 & 0xFFFFFF) != 0
              || *((_QWORD *)&v321 + 1) != 0xC000000000000000
              || (unint64_t)v322 | (unint64_t)v321)
            {
              v267 = *(unsigned __int16 *)&v319[4];
              v270 = v323[24];
              v300.origin.x = v218;
              v300.origin.y = v217;
              v300.size.width = v216;
              v300.size.height = v215;
              v160 = *(_QWORD *)&v320[40];
              v231 = *(double *)&v320[8];
              v302 = *(_OWORD *)&v320[8];
              v224 = *(_QWORD *)&v320[24];
              v228 = *(double *)&v320[16];
              v303 = *(_OWORD *)&v320[24];
              v219 = *(_QWORD *)&v320[32];
              *(_QWORD *)v304 = *(_QWORD *)&v320[40];
              v161 = *((_QWORD *)&v321 + 1);
              *(_OWORD *)&v304[8] = v321;
              *(_QWORD *)&v304[24] = v322;
              v162 = HIWORD(v158);
              v304[34] = BYTE2(v158);
              *(_WORD *)&v304[32] = WORD4(v322);
              *(_DWORD *)&v304[36] = HIDWORD(v322);
              v163 = v322;
              DisplayList.Item.addExtent(to:)();
              IsNull = CGRectIsNull(v300);
              v165 = 0.0;
              if (IsNull)
                v166 = 0.0;
              else
                v166 = v300.origin.x;
              if (IsNull)
                v167 = 0.0;
              else
                v167 = v300.origin.y;
              if (IsNull)
                v168 = 0.0;
              else
                v168 = v300.size.width;
              if (!IsNull)
                v165 = v300.size.height;
              v357 = CGRectIntegral(*(CGRect *)(&v165 - 3));
              v169 = v357.origin.x;
              v170 = v357.origin.y;
              *(CGRect *)&v320[8] = v357;
              if (v159 < 3 || (v158 & 0xFFFFFF) != 0 || v161 != 0xC000000000000000 || v163 | v156)
              {
                type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                v173 = swift_allocObject();
                *(_OWORD *)(v173 + 16) = xmmword_23527E860;
                *(_QWORD *)(v173 + 32) = 0;
                *(_QWORD *)(v173 + 40) = 0;
                *(_QWORD *)(v173 + 48) = v224;
                *(_QWORD *)(v173 + 56) = v219;
                *(_QWORD *)(v173 + 64) = v160;
                *(_QWORD *)(v173 + 72) = v156;
                *(_QWORD *)(v173 + 80) = v161;
                *(_QWORD *)(v173 + 88) = v163;
                *(_BYTE *)(v173 + 98) = BYTE2(v158);
                *(_WORD *)(v173 + 96) = v158;
                *(_DWORD *)(v173 + 100) = 0;
                v302 = 0uLL;
                *(_QWORD *)&v303 = v224;
                *((_QWORD *)&v303 + 1) = v219;
                *(_QWORD *)v304 = v160;
                *(_QWORD *)&v304[8] = v156;
                *(_QWORD *)&v304[16] = v161;
                *(_QWORD *)&v304[24] = v163;
                v304[34] = BYTE2(v158);
                *(_WORD *)&v304[32] = v158;
                *(_DWORD *)&v304[36] = 0;
                outlined copy of DisplayList.Item.Value(v156, v161);
                v174 = v158;
                v175 = v163;
                DisplayList.Item.features.getter();
                v172 = v299;
                v302 = 0uLL;
                *(_QWORD *)&v303 = v224;
                *((_QWORD *)&v303 + 1) = v219;
                *(_QWORD *)v304 = v160;
                *(_QWORD *)&v304[8] = v156;
                *(_QWORD *)&v304[16] = v161;
                *(_QWORD *)&v304[24] = v175;
                v304[34] = v162;
                *(_WORD *)&v304[32] = v174;
                *(_DWORD *)&v304[36] = 0;
                DisplayList.Item.properties.getter();
                v171 = v299;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                v171 = 0;
                v172 = 0;
                v173 = MEMORY[0x24BEE4AF8];
              }
              v176 = swift_allocObject();
              *(_QWORD *)(v176 + 16) = v173;
              *(_WORD *)(v176 + 24) = v172;
              *(_BYTE *)(v176 + 26) = v171;
              *(double *)(v176 + 32) = v169 - v231;
              *(double *)(v176 + 40) = v170 - v228;
              *(_BYTE *)(v176 + 48) = 0;
              *(_DWORD *)(v176 + 52) = 0;
              *(_BYTE *)(v176 + 56) = 1;
              *(_DWORD *)(v176 + 60) = 161;
              *(_BYTE *)(v176 + 64) = 3;
              outlined consume of DisplayList.Item.Value(v156, v161);
              v157 = 0;
              v156 = v176 | 0x9000000000000000;
              *(_QWORD *)&v321 = v176 | 0x9000000000000000;
              v155 = v267;
              *((_QWORD *)&v321 + 1) = v267;
              *(_QWORD *)&v322 = 0;
              BYTE10(v322) = 0;
              WORD4(v322) = 0;
              v154 = v270;
            }
            else
            {
              v155 = 0xC000000000000000;
            }
            v158 = 0;
            v323[24] = v154 & 0xFE;
          }
          v177 = *(_QWORD *)&v323[8];
          v178 = v323[16];
          v126 = v278;
          v229 = *(_QWORD *)&v323[8];
          if ((v323[16] & 1) != 0 || *(_DWORD *)&v323[8])
          {
            v179 = *(_OWORD *)&v320[24];
            v180 = *(_QWORD *)&v320[40];
            v225 = v323[16];
            if (v155 >> 62 != 3 || (v158 & 0xFFFFFF) != 0 || v155 != 0xC000000000000000 || v157 | v156)
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v183 = swift_allocObject();
              *(_OWORD *)(v183 + 16) = xmmword_23527E860;
              *(_QWORD *)(v183 + 32) = 0;
              *(_QWORD *)(v183 + 40) = 0;
              *(_OWORD *)(v183 + 48) = v179;
              *(_QWORD *)(v183 + 64) = v180;
              *(_QWORD *)(v183 + 72) = v156;
              *(_QWORD *)(v183 + 80) = v155;
              *(_QWORD *)(v183 + 88) = v157;
              *(_BYTE *)(v183 + 98) = BYTE2(v158);
              *(_WORD *)(v183 + 96) = v158;
              *(_DWORD *)(v183 + 100) = 0;
              v302 = 0uLL;
              v303 = v179;
              *(_QWORD *)v304 = v180;
              *(_QWORD *)&v304[8] = v156;
              *(_QWORD *)&v304[16] = v155;
              *(_QWORD *)&v304[24] = v157;
              v304[34] = BYTE2(v158);
              *(_WORD *)&v304[32] = v158;
              *(_DWORD *)&v304[36] = 0;
              outlined copy of GraphicsBlendMode(v177, v178);
              outlined copy of DisplayList.Item.Value(v156, v155);
              DisplayList.Item.features.getter();
              v184 = v180;
              v182 = LOWORD(v300.origin.x);
              v302 = 0uLL;
              v303 = v179;
              *(_QWORD *)v304 = v184;
              *(_QWORD *)&v304[8] = v156;
              *(_QWORD *)&v304[16] = v155;
              *(_QWORD *)&v304[24] = v157;
              v304[34] = BYTE2(v158);
              *(_WORD *)&v304[32] = v158;
              *(_DWORD *)&v304[36] = 0;
              DisplayList.Item.properties.getter();
              v181 = LOBYTE(v300.origin.x);
            }
            else
            {
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v323[8], v323[16]);
              v181 = 0;
              v182 = 0;
              v183 = MEMORY[0x24BEE4AF8];
            }
            v178 = v225;
            *(_QWORD *)&v321 = v177;
            *((_QWORD *)&v321 + 1) = v225 | 0x4000000500000000;
            *(_QWORD *)&v322 = v183;
            BYTE10(v322) = v181;
            WORD4(v322) = v182;
            LOBYTE(v302) = v275;
            DisplayList.Item.canonicalize(options:)((char *)&v302);
            outlined consume of DisplayList.Item.Value(v156, v155);
            v155 = *((_QWORD *)&v321 + 1);
            v156 = v321;
            v157 = v322;
            v158 = WORD4(v322) | (BYTE10(v322) << 16);
            v126 = v278;
            v97 = v283;
          }
          if (v109 == 1.0)
          {
            v272 = v157;
          }
          else
          {
            v226 = v178;
            v185 = *(_OWORD *)&v320[24];
            v186 = *(_QWORD *)&v320[40];
            if (v155 >> 62 != 3
              || (v158 & 0xFFFFFF) != 0
              || v155 != 0xC000000000000000
              || (v187 = v157 | v156, v157 | v156))
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v189 = swift_allocObject();
              *(_OWORD *)(v189 + 16) = xmmword_23527E860;
              *(_QWORD *)(v189 + 32) = 0;
              *(_QWORD *)(v189 + 40) = 0;
              *(_OWORD *)(v189 + 48) = v185;
              *(_QWORD *)(v189 + 64) = v186;
              *(_QWORD *)(v189 + 72) = v156;
              *(_QWORD *)(v189 + 80) = v155;
              *(_QWORD *)(v189 + 88) = v157;
              v191 = HIWORD(v158);
              *(_BYTE *)(v189 + 98) = BYTE2(v158);
              *(_WORD *)(v189 + 96) = v158;
              *(_DWORD *)(v189 + 100) = 0;
              v302 = 0uLL;
              v303 = v185;
              *(_QWORD *)v304 = v186;
              *(_QWORD *)&v304[8] = v156;
              *(_QWORD *)&v304[16] = v155;
              *(_QWORD *)&v304[24] = v157;
              v304[34] = BYTE2(v158);
              *(_WORD *)&v304[32] = v158;
              *(_DWORD *)&v304[36] = 0;
              outlined copy of DisplayList.Item.Value(v156, v155);
              v192 = v186;
              v193 = v158;
              v190 = v155;
              DisplayList.Item.features.getter();
              v188 = LOWORD(v300.origin.x);
              v302 = 0uLL;
              v303 = v185;
              *(_QWORD *)v304 = v192;
              *(_QWORD *)&v304[8] = v156;
              *(_QWORD *)&v304[16] = v155;
              *(_QWORD *)&v304[24] = v157;
              v304[34] = v191;
              *(_WORD *)&v304[32] = v193;
              *(_DWORD *)&v304[36] = 0;
              DisplayList.Item.properties.getter();
              v187 = LOBYTE(v300.origin.x);
            }
            else
            {
              v188 = 0;
              v189 = MEMORY[0x24BEE4AF8];
              v190 = 0xC000000000000000;
            }
            *(_QWORD *)&v321 = LODWORD(v109);
            *((_QWORD *)&v321 + 1) = 0x4000000400000000;
            *(_QWORD *)&v322 = v189;
            BYTE10(v322) = v187;
            WORD4(v322) = v188;
            LOBYTE(v302) = v275;
            DisplayList.Item.canonicalize(options:)((char *)&v302);
            outlined consume of DisplayList.Item.Value(v156, v190);
            v155 = *((_QWORD *)&v321 + 1);
            v156 = v321;
            v272 = v322;
            v158 = WORD4(v322) | (BYTE10(v322) << 16);
            v126 = v278;
            v178 = v226;
          }
          v266 = v158;
          v269 = v155;
          v274 = v156;
          v117 = *(double *)&v320[16];
          v118 = *(double *)&v320[8];
          v119 = *(_QWORD *)&v320[32];
          v120 = *(_QWORD *)&v320[24];
          v230 = *(_QWORD *)&v320[40];
          v121 = HIDWORD(v322);
          v194 = static GraphicsBlendMode.normal;
          v195 = byte_254266040;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v229, v178);
          *(_QWORD *)&v323[8] = v194;
          v323[16] = v195;
          *(_DWORD *)&v323[20] = 1065353216;
          v323[24] = 0;
          v321 = xmmword_23527E880;
          *(_QWORD *)&v322 = 0;
          BYTE10(v322) = 0;
          WORD4(v322) = 0;
        }
        *(double *)&v320[8] = v110;
        *(double *)&v320[16] = v111;
        *(_QWORD *)&v320[24] = v112;
        *(_QWORD *)&v320[32] = v113;
        v127 = (_QWORD *)v324[1];
        v128 = v324[2];
        v129 = v324[3];
        v130 = v324[4];
        v131 = v325;
        v132 = v324[7];
        v133 = v324[8];
        if (v325 >> 30)
        {
          if (v325 >> 30 == 1)
          {
            v223 = v324[5];
            v227 = v324[6];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v324[1], v324[2], v324[3], v324[4], v324[5], v324[6], v324[7], v324[8], v325);
            outlined copy of DisplayList.Item.Value(v274, v269);
            v134 = v127;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v127[2] + 1, 1, v127);
            v136 = v134[2];
            v135 = v134[3];
            if (v136 >= v135 >> 1)
              v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v135 > 1), v136 + 1, 1, v134);
            v134[2] = v136 + 1;
            v137 = (double *)&v134[9 * v136];
            v137[4] = v118 - v110;
            v137[5] = v117 - v111;
            *((_QWORD *)v137 + 6) = v120;
            *((_QWORD *)v137 + 7) = v119;
            *((_QWORD *)v137 + 8) = v230;
            *((_QWORD *)v137 + 9) = v274;
            *((_QWORD *)v137 + 10) = v269;
            *((_QWORD *)v137 + 11) = v272;
            *((_BYTE *)v137 + 98) = BYTE2(v266);
            *((_WORD *)v137 + 48) = v266;
            *((_DWORD *)v137 + 25) = 0;
            outlined consume of DisplayList.Item.Value(v274, v269);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v127, v128, v129, v130, v223, v227, v132, v133, v131);
            v324[1] = v134;
            memset(&v324[2], 0, 56);
            v88 = 0x40000000;
            v97 = v283;
            v126 = v278;
          }
          else
          {
            *(double *)&v324[1] = v118;
            *(double *)&v324[2] = v117;
            v88 = v266 & 0xFFFFFF | (unint64_t)(v121 << 32);
            v324[3] = v120;
            v324[4] = v119;
            v324[5] = v230;
            v324[6] = v274;
            v324[7] = v269;
            v324[8] = v272;
          }
        }
        else
        {
          v138 = *(double *)&v324[1] - v110;
          v139 = v324[6];
          v140 = v324[5];
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v141 = swift_allocObject();
          *(_OWORD *)(v141 + 16) = xmmword_2352828C0;
          *(double *)(v141 + 32) = v138;
          *(double *)(v141 + 40) = *(double *)&v128 - v111;
          *(_QWORD *)(v141 + 48) = v129;
          *(_QWORD *)(v141 + 56) = v130;
          *(_QWORD *)(v141 + 64) = v140;
          *(_QWORD *)(v141 + 72) = v139;
          *(_QWORD *)(v141 + 80) = v132;
          *(_QWORD *)(v141 + 88) = v133;
          *(_BYTE *)(v141 + 98) = BYTE2(v131);
          *(_WORD *)(v141 + 96) = v131;
          *(_DWORD *)(v141 + 100) = 0;
          *(double *)(v141 + 104) = v118 - v110;
          *(double *)(v141 + 112) = v117 - v111;
          *(_QWORD *)(v141 + 120) = v120;
          *(_QWORD *)(v141 + 128) = v119;
          *(_QWORD *)(v141 + 136) = v230;
          *(_QWORD *)(v141 + 144) = v274;
          *(_QWORD *)(v141 + 152) = v269;
          *(_QWORD *)(v141 + 160) = v272;
          *(_BYTE *)(v141 + 170) = BYTE2(v266);
          *(_WORD *)(v141 + 168) = v266;
          *(_DWORD *)(v141 + 172) = 0;
          v324[1] = v141;
          memset(&v324[2], 0, 56);
          v88 = 0x40000000;
        }
        v325 = v88;
        outlined consume of _ShapeStyle_RenderedShape.Shape(v313, *((uint64_t *)&v313 + 1), v314, *((uint64_t *)&v314 + 1), v315, *((uint64_t *)&v315 + 1), v316, *((uint64_t *)&v316 + 1), v317, *((uint64_t *)&v317 + 1), v318, *((uint64_t *)&v318 + 1), *(unsigned int *)v319);
        v83 = v264;
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?(v263, v296, (unint64_t)v293, v280, v290, v287, v260, v257, v97, v235, v126, v234, v233, v232);
        *(_QWORD *)&v313 = v255;
        *((_QWORD *)&v313 + 1) = v253;
        *(_QWORD *)&v314 = v251;
        *((_QWORD *)&v314 + 1) = v249;
        *(_QWORD *)&v316 = v247;
        *((_QWORD *)&v316 + 1) = v245;
        *(_QWORD *)&v317 = v243;
        *((_QWORD *)&v317 + 1) = v241;
        *(_QWORD *)&v318 = v239;
        *((_QWORD *)&v318 + 1) = v237;
        *(_DWORD *)v319 = v236;
        v87 = *(_DWORD *)(v264 + 60);
        v86 = v87;
        v315 = v103;
        v84 = (uint64_t *)(v264 + 24);
        swift_beginAccess();
      }
      while (*(_QWORD *)(*(_QWORD *)(v264 + 24) + 16) > v87);
    }
    *(_DWORD *)(v83 + 60) = 0;
  }
  v196 = v324[1];
  v291 = v324[2];
  v294 = v324[4];
  v297 = v324[5];
  v284 = v324[3];
  v288 = v324[6];
  v197 = v324[7];
  v198 = v324[8];
  v199 = v325;
  if (!(v325 >> 30))
  {
    if (v324[7] >> 62 != 3 || v324[7] != 0xC000000000000000 || v324[8] | v324[6] || (v325 & 0xFFFFFF) != 0)
    {
      v282 = HIDWORD(v325);
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v210 = swift_allocObject();
      *(_OWORD *)(v210 + 16) = xmmword_23527E860;
      *(_QWORD *)(v210 + 32) = v196;
      *(_QWORD *)(v210 + 40) = v291;
      *(_QWORD *)(v210 + 48) = v284;
      *(_QWORD *)(v210 + 56) = v294;
      *(_QWORD *)(v210 + 64) = v297;
      *(_QWORD *)(v210 + 72) = v288;
      *(_QWORD *)(v210 + 80) = v197;
      *(_QWORD *)(v210 + 88) = v198;
      *(_BYTE *)(v210 + 98) = BYTE2(v199);
      *(_WORD *)(v210 + 96) = v199;
      *(_DWORD *)(v210 + 100) = v282;
      *(_QWORD *)&v302 = v196;
      *((_QWORD *)&v302 + 1) = v291;
      *(_QWORD *)&v303 = v284;
      *((_QWORD *)&v303 + 1) = v294;
      *(_QWORD *)v304 = v297;
      *(_QWORD *)&v304[8] = v288;
      *(_QWORD *)&v304[16] = v197;
      *(_QWORD *)&v304[24] = v198;
      v304[34] = BYTE2(v199);
      *(_WORD *)&v304[32] = v199;
      *(_DWORD *)&v304[36] = v282;
      outlined copy of DisplayList.Item.Value(v288, v197);
      DisplayList.Item.features.getter();
      v212 = v196;
      v209 = LOWORD(v300.origin.x);
      *(_QWORD *)&v302 = v212;
      *((_QWORD *)&v302 + 1) = v291;
      *(_QWORD *)&v303 = v284;
      *((_QWORD *)&v303 + 1) = v294;
      *(_QWORD *)v304 = v297;
      *(_QWORD *)&v304[8] = v288;
      *(_QWORD *)&v304[16] = v197;
      *(_QWORD *)&v304[24] = v198;
      v304[34] = BYTE2(v199);
      *(_WORD *)&v304[32] = v199;
      *(_DWORD *)&v304[36] = v282;
      DisplayList.Item.properties.getter();
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v212, v291, v284, v294, v297, v288, v197, v198, v199);
      v213 = 0;
      v291 = 0;
      v294 = 0;
      v284 = 0;
      v288 = 0;
      v297 = 0;
      v197 = 0;
      v198 = 0;
      v208 = LOBYTE(v300.origin.x);
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v324[1], v324[2], v324[3], v324[4], v324[5], 0, 0xC000000000000000, 0, v325);
      v213 = 0;
      v291 = 0;
      v294 = 0;
      v284 = 0;
      v288 = 0;
      v297 = 0;
      v197 = 0;
      v198 = 0;
      v209 = 0;
      v208 = 0;
      v210 = MEMORY[0x24BEE4AF8];
    }
LABEL_123:
    v199 = 0x80000000;
    goto LABEL_124;
  }
  if (v325 >> 30 == 1)
  {
    v200 = (_QWORD *)swift_bridgeObjectRetain();
    DisplayList.init(_:)(v200, (uint64_t)&v300);
    v302 = *(_OWORD *)&v319[8];
    v303 = *(_OWORD *)&v319[24];
    *(_OWORD *)&v304[8] = xmmword_23527E870;
    *(_QWORD *)v304 = *(_QWORD *)&v320[40];
    *(CGFloat *)&v304[24] = v300.origin.x;
    v304[34] = BYTE2(v300.origin.y);
    *(_WORD *)&v304[32] = LOWORD(v300.origin.y);
    *(_DWORD *)&v304[36] = HIDWORD(v322);
    LOBYTE(v300.origin.x) = v220;
    DisplayList.Item.canonicalize(options:)((char *)&v300);
    v201 = v302;
    v202 = v303;
    v203 = *(_QWORD *)v304;
    v204 = *(_QWORD *)&v304[16];
    v205 = *(_QWORD *)&v304[24];
    v206 = *(unsigned __int16 *)&v304[32] | (v304[34] << 16);
    v276 = *(_DWORD *)&v304[36];
    v207 = *(_QWORD *)&v304[16] >> 62;
    if (*(_QWORD *)&v304[16] >> 62 != 3
      || (v206 & 0xFFFFFF) != 0
      || *(_QWORD *)&v304[16] != 0xC000000000000000
      || *(_QWORD *)&v304[24] | *(_QWORD *)&v304[8])
    {
      v281 = *(_QWORD *)&v304[8];
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v211 = swift_allocObject();
      *(_OWORD *)(v211 + 16) = xmmword_23527E860;
      *(_OWORD *)(v211 + 32) = v201;
      *(_OWORD *)(v211 + 48) = v202;
      *(_QWORD *)(v211 + 64) = v203;
      *(_QWORD *)(v211 + 72) = v281;
      *(_QWORD *)(v211 + 80) = v204;
      *(_QWORD *)(v211 + 88) = v205;
      *(_BYTE *)(v211 + 98) = BYTE2(v206);
      *(_WORD *)(v211 + 96) = v206;
      *(_DWORD *)(v211 + 100) = v276;
      __asm { BR              X10 }
    }
    outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v196, v291, v284, v294, v297, v288, v197, v198, v199);
    v208 = 0;
    v209 = 0;
    v210 = MEMORY[0x24BEE4AF8];
    v213 = 0;
    v291 = 0;
    v294 = 0;
    v284 = 0;
    v288 = 0;
    v297 = 0;
    v197 = 0;
    v198 = 0;
    goto LABEL_123;
  }
  v213 = v324[1];
  v209 = 0;
  v208 = 0;
  v210 = MEMORY[0x24BEE4AF8];
LABEL_124:
  *(_QWORD *)&v302 = v210;
  WORD4(v302) = v209;
  BYTE10(v302) = v208;
  AGGraphSetOutputValue();
  outlined consume of GraphicsImage.Contents?(v221, v222);
  swift_bridgeObjectRelease();
  v310 = v321;
  v311 = v322;
  *(_OWORD *)v312 = *(_OWORD *)v323;
  *(_OWORD *)&v312[9] = *(_OWORD *)&v323[9];
  v306 = *(_OWORD *)&v319[32];
  v307 = *(_OWORD *)v320;
  v308 = *(_OWORD *)&v320[16];
  v309 = *(_OWORD *)&v320[32];
  *(_OWORD *)&v304[32] = v317;
  *(_OWORD *)&v304[48] = v318;
  *(_OWORD *)&v304[64] = *(_OWORD *)v319;
  v305 = *(_OWORD *)&v319[16];
  v302 = v313;
  v303 = v314;
  *(_OWORD *)v304 = v315;
  *(_OWORD *)&v304[16] = v316;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v302);
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v213, v291, v284, v294, v297, v288, v197, v198, v199);
  return outlined release of Image.Resolved((uint64_t)v326);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  unint64_t v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  CGFloat v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  double *v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  __int16 x_low;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  _BOOL4 IsNull;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  char v129;
  __int16 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  char v137;
  __int16 v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  char v143;
  __int16 v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  __int16 v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  CGFloat v166;
  CGFloat v167;
  CGFloat v168;
  CGFloat v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  unint64_t v206;
  uint64_t v207;
  char v208;
  int v209;
  unint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  unsigned __int8 v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  __int16 v235;
  __int128 v236;
  __int128 v237;
  _BYTE v238[32];
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  _OWORD v249[2];
  CGRect v250;
  __int128 v251;
  __int128 v252;
  _BYTE v253[112];
  _BYTE v254[80];
  _BYTE v255[25];
  _QWORD v256[9];
  uint64_t v257;
  _QWORD v258[4];
  unsigned __int8 v259;
  uint64_t v260;
  CGRect v261;
  CGRect v262;
  CGRect v263;

  v260 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  Value = AGGraphGetValue();
  v12 = *(_QWORD *)Value;
  v13 = *(unsigned __int8 *)(Value + 8);
  v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    swift_bridgeObjectRetain();
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v251 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v251) = v10;
    swift_bridgeObjectRetain();
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_117:
    swift_once();
    v41 = v171;
    goto LABEL_15;
  }
  v19 = *((_DWORD *)v0 + 10);
  v221 = AGCreateWeakAttribute();
  v228 = v13;
  v215 = AGCreateWeakAttribute();
  v232 = v19;
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v218 = HIDWORD(v20);
  v22 = AGCreateWeakAttribute();
  v23 = v22;
  v210 = HIDWORD(v22);
  v24 = AGCreateWeakAttribute();
  v25 = v24;
  v206 = HIDWORD(v24);
  v26 = AGCreateWeakAttribute();
  v27 = v26;
  v203 = HIDWORD(v26);
  v28 = (double *)AGGraphGetValue();
  v29 = *v28;
  v30 = v28[1];
  v31 = (double *)AGGraphGetValue();
  v32 = v29 - *v31;
  v33 = v30 - v31[1];
  v34 = AGGraphGetValue();
  v35 = *(double *)v34;
  v36 = *(double *)(v34 + 8);
  _threadGeometryProxyData();
  *(_QWORD *)&v251 = v221;
  *((_QWORD *)&v251 + 1) = v215;
  *(_QWORD *)&v252 = __PAIR64__(v218, v21);
  *((_QWORD *)&v252 + 1) = __PAIR64__(v210, v23);
  *(_DWORD *)v253 = v25;
  *(_DWORD *)&v253[4] = v206;
  *(_DWORD *)&v253[8] = v27;
  *(_DWORD *)&v253[12] = v203;
  v5 = v17;
  *(_DWORD *)&v253[16] = v17;
  _setThreadGeometryProxyData();
  v37 = swift_bridgeObjectRetain();
  specialized Shape.effectivePath(in:)(v37, (uint64_t)v258, v35);
  v17 = v258[0];
  v13 = v258[1];
  v1 = v258[2];
  v2 = v258[3];
  v38 = v259;
  swift_bridgeObjectRelease();
  v39 = 256;
  if (!v228)
    v39 = 0;
  v40 = 0x10000;
  if (!v14)
    v40 = 0;
  v3 = v40 | v39 | v38;
  _setThreadGeometryProxyData();
  v12 = *v0;
  memset(&v256[1], 0, 64);
  v256[0] = v12;
  v257 = 0x80000000;
  swift_retain();
  outlined retain of Path.Storage((uint64_t)v258, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  v261.origin.x = 0.0;
  v261.origin.y = 0.0;
  v261.size.width = v35;
  v261.size.height = v36;
  v262 = CGRectOffset(v261, v32, v33);
  x = v262.origin.x;
  y = v262.origin.y;
  width = v262.size.width;
  height = v262.size.height;
  v14 = *((_DWORD *)v0 + 2);
  v4 = *((_WORD *)v0 + 25);
  v41 = *((_BYTE *)v0 + 48);
  v171 = v41;
  if (one-time initialization token for normal != -1)
    goto LABEL_117;
LABEL_15:
  *(_QWORD *)&v251 = v17;
  *((_QWORD *)&v251 + 1) = v13;
  *(_QWORD *)&v252 = v1;
  *((_QWORD *)&v252 + 1) = v2;
  *(_QWORD *)v253 = v3;
  memset(&v253[8], 0, 60);
  *(_WORD *)&v253[68] = v4;
  *(CGFloat *)&v253[72] = x;
  *(CGFloat *)&v253[80] = y;
  *(CGFloat *)&v253[88] = width;
  *(CGFloat *)&v253[96] = height;
  *(_QWORD *)&v253[104] = 0;
  *(_DWORD *)v254 = 0;
  *(CGFloat *)&v254[8] = x;
  *(CGFloat *)&v254[16] = y;
  *(CGFloat *)&v254[24] = width;
  *(CGFloat *)&v254[32] = height;
  *(_OWORD *)&v254[48] = xmmword_23527E880;
  *(_QWORD *)&v254[40] = v5;
  *(_QWORD *)&v254[64] = 0;
  v254[74] = 0;
  *(_WORD *)&v254[72] = 0;
  *(_DWORD *)&v254[76] = v14;
  v255[0] = v41;
  *(_DWORD *)&v255[4] = v232;
  *(_QWORD *)&v255[8] = static GraphicsBlendMode.normal;
  v255[16] = byte_254266040;
  *(_DWORD *)&v255[20] = 1065353216;
  v255[24] = 0;
  LOBYTE(v236) = 0;
  v42 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v236, v42, (uint64_t)v256);
  v181 = v12;
  if (v12)
  {
    v43 = v12;
    v44 = (_QWORD *)(v12 + 24);
    v45 = *(_DWORD *)(v12 + 60);
    v46 = v45;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v12 + 24) + 16) > v45)
    {
      v168 = *(double *)(MEMORY[0x24BDBF070] + 8);
      v169 = *MEMORY[0x24BDBF070];
      v166 = *(double *)(MEMORY[0x24BDBF070] + 24);
      v167 = *(double *)(MEMORY[0x24BDBF070] + 16);
      v47 = v45;
      v180 = v44;
      do
      {
        ++*(_DWORD *)(v43 + 60);
        swift_beginAccess();
        v49 = *(_QWORD **)(v43 + 24);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v43 + 24) = v49;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if (v47 < 0)
            goto LABEL_111;
        }
        else
        {
          v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v49);
          *v44 = v49;
          if (v47 < 0)
          {
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
            JUMPOUT(0x234AC5EA4);
          }
        }
        if (v49[2] <= v46)
          goto LABEL_112;
        v51 = 224 * v46;
        BYTE4(v49[28 * v46 + 31]) = 1;
        v52 = *v44;
        swift_endAccess();
        if (*(_QWORD *)(v52 + 16) <= v46)
          goto LABEL_113;
        v53 = (_QWORD *)(v52 + v51);
        v211 = *(_DWORD *)(v52 + v51 + 52);
        v54 = *(void **)(v52 + v51 + 56);
        v55 = *(_QWORD *)(v52 + v51 + 64);
        v56 = (void *)v53[9];
        v224 = (void *)v53[10];
        v226 = v54;
        v222 = v53[11];
        v57 = v53[14];
        v231 = v53[13];
        v233 = v53[12];
        v59 = v53[15];
        v58 = v53[16];
        v60 = v53[17];
        v61 = v53[18];
        v63 = v53[19];
        v62 = v53[20];
        v194 = *((_QWORD *)&v251 + 1);
        v195 = v251;
        v192 = *((_QWORD *)&v252 + 1);
        v193 = v252;
        v198 = *(_QWORD *)&v253[8];
        v199 = *(_QWORD *)v253;
        v190 = *(_QWORD *)&v253[24];
        v191 = *(_QWORD *)&v253[16];
        v188 = *(_QWORD *)&v253[40];
        v189 = *(_QWORD *)&v253[32];
        v186 = *(_QWORD *)&v253[56];
        v187 = *(_QWORD *)&v253[48];
        v185 = *(_DWORD *)&v253[64];
        memset(v253, 0, 64);
        v251 = 0u;
        v252 = 0u;
        *(_DWORD *)&v253[64] = 0x800000;
        swift_retain_n();
        v216 = v63;
        v219 = v55;
        v229 = v58;
        outlined copy of _ShapeStyle_Pack.Style?(v226, v55, v56, v224, v222, v233, v231, v57, v59, v58, v60, v61, v63, v62);
        swift_release();
        *(_QWORD *)&v253[104] = v43;
        *(_DWORD *)v254 = v211;
        v182 = v62;
        if (v62)
        {
          *(_QWORD *)&v236 = v226;
          *((_QWORD *)&v236 + 1) = v55;
          *(_QWORD *)&v237 = v56;
          *((_QWORD *)&v237 + 1) = v224;
          *(_QWORD *)v238 = v222;
          *(_QWORD *)&v238[8] = v233;
          *(_QWORD *)&v238[16] = v231;
          *(_QWORD *)&v238[24] = v57;
          *(_QWORD *)&v239 = v59;
          *((_QWORD *)&v239 + 1) = v58;
          LOBYTE(v240) = v60;
          DWORD1(v240) = HIDWORD(v60);
          *((_QWORD *)&v240 + 1) = v61;
          LOBYTE(v241) = v63;
          *((_QWORD *)&v241 + 1) = v62;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v236);
        }
        v200 = (unint64_t)v56;
        v183 = v61;
        v184 = v60;
        v64 = *(float *)&v255[20];
        v196 = v59;
        v197 = v57;
        if (*(float *)&v255[20] == 0.0
          || (v65 = *(double *)&v253[72],
              v66 = *(double *)&v253[80],
              v67 = *(_QWORD *)&v253[88],
              v68 = *(_QWORD *)&v253[96],
              CGRectIsEmpty(*(CGRect *)&v253[72])))
        {
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v254[48], *(unint64_t *)&v254[56]);
          *(_OWORD *)&v254[48] = xmmword_23527E880;
          *(_QWORD *)&v254[64] = 0;
          v254[74] = 0;
          *(_WORD *)&v254[72] = 0;
          if (*(_QWORD *)&v253[104])
          {
            *(_QWORD *)&v254[48] = *(_QWORD *)&v253[104];
            *(_QWORD *)&v254[56] = *(unsigned int *)v254 | 0x4000001100000000;
            *(_QWORD *)&v254[64] = MEMORY[0x24BEE4AF8];
            LOBYTE(v236) = v255[0];
            DisplayList.Item.canonicalize(options:)((char *)&v236);
            *(_QWORD *)&v253[104] = 0;
            *(_DWORD *)v254 = 0;
            v207 = *(_QWORD *)&v254[48];
            v69 = *(_QWORD *)&v254[64];
            v70 = *(_QWORD *)&v254[56];
            v212 = *(unsigned __int16 *)&v254[72] | (v254[74] << 16);
          }
          else
          {
            v207 = 0;
            v212 = 0;
            v69 = 0;
            v70 = 0xC000000000000000;
          }
          v201 = v70;
          v204 = v69;
          v71 = *(double *)&v254[16];
          v72 = *(double *)&v254[8];
          v73 = *(_QWORD *)&v254[32];
          v74 = *(_QWORD *)&v254[24];
          v75 = *(_QWORD *)&v254[40];
          v76 = *(unsigned int *)&v254[76];
          v77 = static GraphicsBlendMode.normal;
          v78 = byte_254266040;
          v79 = *(_QWORD *)&v255[8];
          v80 = v255[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v79, v80);
          *(_QWORD *)&v255[8] = v77;
          v255[16] = v78;
          *(_DWORD *)&v255[20] = 1065353216;
          v255[24] = 0;
          *(_OWORD *)&v254[48] = xmmword_23527E880;
          *(_QWORD *)&v254[64] = 0;
          v254[74] = 0;
          *(_WORD *)&v254[72] = 0;
          v65 = *(double *)&v253[72];
          v66 = *(double *)&v253[80];
          v67 = *(_QWORD *)&v253[88];
          v68 = *(_QWORD *)&v253[96];
          v81 = v229;
        }
        else
        {
          v208 = v255[0];
          LOBYTE(v236) = v255[0];
          DisplayList.Item.canonicalize(options:)((char *)&v236);
          v97 = *(_QWORD *)&v253[104];
          v81 = v58;
          if (*(_QWORD *)&v253[104])
          {
            v98 = *(unsigned int *)v254;
            v99 = *(_OWORD *)&v254[56];
            v100 = *(unsigned __int16 *)&v254[72] | (v254[74] << 16);
            v101 = *(_OWORD *)&v254[24];
            v102 = *(_QWORD *)&v254[48];
            v103 = *(_QWORD *)&v254[40];
            if (*(_QWORD *)&v254[56] >> 62 != 3
              || (v100 & 0xFFFFFF) != 0
              || *(_QWORD *)&v254[56] != 0xC000000000000000
              || *(_QWORD *)&v254[64] | *(_QWORD *)&v254[48])
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v106 = swift_allocObject();
              *(_OWORD *)(v106 + 16) = xmmword_23527E860;
              *(_QWORD *)(v106 + 32) = 0;
              *(_QWORD *)(v106 + 40) = 0;
              *(_OWORD *)(v106 + 48) = v101;
              *(_QWORD *)(v106 + 64) = v103;
              *(_QWORD *)(v106 + 72) = v102;
              *(_OWORD *)(v106 + 80) = v99;
              *(_BYTE *)(v106 + 98) = BYTE2(v100);
              *(_WORD *)(v106 + 96) = v100;
              *(_DWORD *)(v106 + 100) = 0;
              v236 = 0uLL;
              v237 = v101;
              *(_QWORD *)v238 = v103;
              *(_QWORD *)&v238[8] = v102;
              *(_OWORD *)&v238[16] = v99;
              BYTE2(v239) = BYTE2(v100);
              LOWORD(v239) = v100;
              DWORD1(v239) = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v102, v99);
              DisplayList.Item.features.getter();
              v107 = v103;
              x_low = LOWORD(v250.origin.x);
              v236 = 0uLL;
              v237 = v101;
              *(_QWORD *)v238 = v107;
              *(_QWORD *)&v238[8] = v102;
              *(_OWORD *)&v238[16] = v99;
              BYTE2(v239) = BYTE2(v100);
              v81 = v229;
              LOWORD(v239) = v100;
              DWORD1(v239) = 0;
              DisplayList.Item.properties.getter();
              v104 = LOBYTE(v250.origin.x);
            }
            else
            {
              swift_retain();
              v104 = 0;
              x_low = 0;
              v106 = MEMORY[0x24BEE4AF8];
            }
            *(_QWORD *)&v254[48] = v97;
            *(_QWORD *)&v254[56] = v98 | 0x4000001100000000;
            *(_QWORD *)&v254[64] = v106;
            v254[74] = v104;
            *(_WORD *)&v254[72] = x_low;
            LOBYTE(v236) = v208;
            DisplayList.Item.canonicalize(options:)((char *)&v236);
            outlined consume of DisplayList.Item.Value(v102, v99);
            swift_release();
            *(_QWORD *)&v253[104] = 0;
            *(_DWORD *)v254 = 0;
          }
          v108 = v255[24];
          v109 = *(_QWORD *)&v254[48];
          v111 = *(_QWORD *)&v254[64];
          v110 = *(_QWORD *)&v254[56];
          v112 = *(unsigned __int16 *)&v254[72] | (v254[74] << 16);
          if ((v255[24] & 1) != 0)
          {
            v113 = *(_QWORD *)&v254[56] >> 62;
            if (*(_QWORD *)&v254[56] >> 62 != 3
              || (v112 & 0xFFFFFF) != 0
              || *(_QWORD *)&v254[56] != 0xC000000000000000
              || *(_QWORD *)&v254[64] | *(_QWORD *)&v254[48])
            {
              v202 = *(unsigned __int16 *)&v253[68];
              v205 = v255[24];
              v213 = v67;
              v250.origin.x = v169;
              v250.origin.y = v168;
              v250.size.width = v167;
              v250.size.height = v166;
              v175 = *(double *)&v254[16];
              v178 = *(double *)&v254[8];
              v236 = *(_OWORD *)&v254[8];
              v173 = *(_QWORD *)&v254[24];
              v237 = *(_OWORD *)&v254[24];
              v170 = *(_QWORD *)&v254[32];
              v114 = *(_QWORD *)&v254[40];
              *(_OWORD *)v238 = *(_OWORD *)&v254[40];
              v115 = *(_QWORD *)&v254[48];
              v116 = *(_QWORD *)&v254[56];
              *(_OWORD *)&v238[16] = *(_OWORD *)&v254[56];
              v117 = *(_QWORD *)&v254[64];
              BYTE2(v239) = BYTE2(v112);
              LOWORD(v239) = *(_WORD *)&v254[72];
              DWORD1(v239) = *(_DWORD *)&v254[76];
              DisplayList.Item.addExtent(to:)();
              v118 = v250.origin.x;
              v119 = v250.origin.y;
              v120 = v250.size.width;
              v121 = v250.size.height;
              IsNull = CGRectIsNull(v250);
              v123 = 0.0;
              if (IsNull)
                v124 = 0.0;
              else
                v124 = v118;
              if (IsNull)
                v125 = 0.0;
              else
                v125 = v119;
              if (IsNull)
                v126 = 0.0;
              else
                v126 = v120;
              if (!IsNull)
                v123 = v121;
              v263 = CGRectIntegral(*(CGRect *)(&v123 - 3));
              v127 = v263.origin.x;
              v128 = v263.origin.y;
              *(CGRect *)&v254[8] = v263;
              if (v113 < 3 || (v112 & 0xFFFFFF) != 0 || v116 != 0xC000000000000000 || v117 | v109)
              {
                type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                v131 = swift_allocObject();
                *(_OWORD *)(v131 + 16) = xmmword_23527E860;
                *(_QWORD *)(v131 + 32) = 0;
                *(_QWORD *)(v131 + 40) = 0;
                *(_QWORD *)(v131 + 48) = v173;
                *(_QWORD *)(v131 + 56) = v170;
                *(_QWORD *)(v131 + 64) = v114;
                *(_QWORD *)(v131 + 72) = v109;
                *(_QWORD *)(v131 + 80) = v116;
                *(_QWORD *)(v131 + 88) = v117;
                *(_BYTE *)(v131 + 98) = BYTE2(v112);
                *(_WORD *)(v131 + 96) = v112;
                *(_DWORD *)(v131 + 100) = 0;
                v236 = 0uLL;
                *(_QWORD *)&v237 = v173;
                *((_QWORD *)&v237 + 1) = v170;
                *(_QWORD *)v238 = v114;
                *(_QWORD *)&v238[8] = v109;
                *(_QWORD *)&v238[16] = v116;
                *(_QWORD *)&v238[24] = v117;
                BYTE2(v239) = BYTE2(v112);
                LOWORD(v239) = v112;
                DWORD1(v239) = 0;
                outlined copy of DisplayList.Item.Value(v109, v116);
                DisplayList.Item.features.getter();
                v130 = v235;
                v236 = 0uLL;
                *(_QWORD *)&v237 = v173;
                *((_QWORD *)&v237 + 1) = v170;
                *(_QWORD *)v238 = v114;
                *(_QWORD *)&v238[8] = v115;
                *(_QWORD *)&v238[16] = v116;
                *(_QWORD *)&v238[24] = v117;
                BYTE2(v239) = BYTE2(v112);
                LOWORD(v239) = v112;
                DWORD1(v239) = 0;
                DisplayList.Item.properties.getter();
                v129 = v235;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                v129 = 0;
                v130 = 0;
                v131 = MEMORY[0x24BEE4AF8];
              }
              v132 = swift_allocObject();
              *(_QWORD *)(v132 + 16) = v131;
              *(_WORD *)(v132 + 24) = v130;
              *(_BYTE *)(v132 + 26) = v129;
              *(double *)(v132 + 32) = v127 - v178;
              *(double *)(v132 + 40) = v128 - v175;
              *(_BYTE *)(v132 + 48) = 0;
              *(_DWORD *)(v132 + 52) = 0;
              *(_BYTE *)(v132 + 56) = 1;
              *(_DWORD *)(v132 + 60) = 161;
              *(_BYTE *)(v132 + 64) = 3;
              outlined consume of DisplayList.Item.Value(v115, v116);
              v111 = 0;
              v109 = v132 | 0x9000000000000000;
              *(_QWORD *)&v254[48] = v132 | 0x9000000000000000;
              v110 = v202;
              *(_OWORD *)&v254[56] = v202;
              v254[74] = 0;
              *(_WORD *)&v254[72] = 0;
              v67 = v213;
              v108 = v205;
            }
            else
            {
              v110 = 0xC000000000000000;
            }
            v112 = 0;
            v255[24] = v108 & 0xFE;
          }
          v133 = *(_QWORD *)&v255[8];
          v134 = v255[16];
          v176 = *(_QWORD *)&v255[8];
          v179 = v255[16];
          if ((v255[16] & 1) != 0 || *(_DWORD *)&v255[8])
          {
            v135 = *(_OWORD *)&v254[24];
            v136 = *(_QWORD *)&v254[40];
            if (v110 >> 62 != 3 || (v112 & 0xFFFFFF) != 0 || v110 != 0xC000000000000000 || v111 | v109)
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v139 = swift_allocObject();
              *(_OWORD *)(v139 + 16) = xmmword_23527E860;
              *(_QWORD *)(v139 + 32) = 0;
              *(_QWORD *)(v139 + 40) = 0;
              *(_OWORD *)(v139 + 48) = v135;
              *(_QWORD *)(v139 + 64) = v136;
              *(_QWORD *)(v139 + 72) = v109;
              *(_QWORD *)(v139 + 80) = v110;
              *(_QWORD *)(v139 + 88) = v111;
              *(_BYTE *)(v139 + 98) = BYTE2(v112);
              *(_WORD *)(v139 + 96) = v112;
              *(_DWORD *)(v139 + 100) = 0;
              v236 = 0uLL;
              v237 = v135;
              *(_QWORD *)v238 = v136;
              *(_QWORD *)&v238[8] = v109;
              *(_QWORD *)&v238[16] = v110;
              *(_QWORD *)&v238[24] = v111;
              BYTE2(v239) = BYTE2(v112);
              LOWORD(v239) = v112;
              DWORD1(v239) = 0;
              outlined copy of GraphicsBlendMode(v133, v134);
              outlined copy of DisplayList.Item.Value(v109, v110);
              DisplayList.Item.features.getter();
              v140 = v136;
              v138 = LOWORD(v250.origin.x);
              v236 = 0uLL;
              v237 = v135;
              *(_QWORD *)v238 = v140;
              *(_QWORD *)&v238[8] = v109;
              *(_QWORD *)&v238[16] = v110;
              *(_QWORD *)&v238[24] = v111;
              BYTE2(v239) = BYTE2(v112);
              v81 = v229;
              LOWORD(v239) = v112;
              DWORD1(v239) = 0;
              DisplayList.Item.properties.getter();
              v134 = v179;
              v137 = LOBYTE(v250.origin.x);
            }
            else
            {
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v255[8], v255[16]);
              v137 = 0;
              v138 = 0;
              v139 = MEMORY[0x24BEE4AF8];
            }
            *(_QWORD *)&v254[48] = v133;
            *(_QWORD *)&v254[56] = v134 | 0x4000000500000000;
            *(_QWORD *)&v254[64] = v139;
            v254[74] = v137;
            *(_WORD *)&v254[72] = v138;
            LOBYTE(v236) = v208;
            DisplayList.Item.canonicalize(options:)((char *)&v236);
            outlined consume of DisplayList.Item.Value(v109, v110);
            v109 = *(_QWORD *)&v254[48];
            v111 = *(_QWORD *)&v254[64];
            v110 = *(_QWORD *)&v254[56];
            v112 = *(unsigned __int16 *)&v254[72] | (v254[74] << 16);
          }
          v212 = v112;
          if (v64 == 1.0)
          {
            v207 = v109;
          }
          else
          {
            v141 = *(_OWORD *)&v254[24];
            v142 = *(_QWORD *)&v254[40];
            if (v110 >> 62 != 3
              || (v112 & 0xFFFFFF) != 0
              || v110 != 0xC000000000000000
              || (v143 = v111 | v109, v111 | v109))
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v145 = swift_allocObject();
              *(_OWORD *)(v145 + 16) = xmmword_23527E860;
              *(_QWORD *)(v145 + 32) = 0;
              *(_QWORD *)(v145 + 40) = 0;
              *(_OWORD *)(v145 + 48) = v141;
              *(_QWORD *)(v145 + 64) = v142;
              *(_QWORD *)(v145 + 72) = v109;
              *(_QWORD *)(v145 + 80) = v110;
              *(_QWORD *)(v145 + 88) = v111;
              *(_BYTE *)(v145 + 98) = BYTE2(v112);
              *(_WORD *)(v145 + 96) = v112;
              *(_DWORD *)(v145 + 100) = 0;
              v236 = 0uLL;
              v237 = v141;
              *(_QWORD *)v238 = v142;
              *(_QWORD *)&v238[8] = v109;
              *(_QWORD *)&v238[16] = v110;
              *(_QWORD *)&v238[24] = v111;
              BYTE2(v239) = BYTE2(v112);
              LOWORD(v239) = v112;
              DWORD1(v239) = 0;
              outlined copy of DisplayList.Item.Value(v109, v110);
              DisplayList.Item.features.getter();
              v144 = LOWORD(v250.origin.x);
              v236 = 0uLL;
              v237 = v141;
              *(_QWORD *)v238 = v142;
              *(_QWORD *)&v238[8] = v109;
              *(_QWORD *)&v238[16] = v110;
              *(_QWORD *)&v238[24] = v111;
              BYTE2(v239) = BYTE2(v212);
              LOWORD(v239) = v212;
              DWORD1(v239) = 0;
              DisplayList.Item.properties.getter();
              v143 = LOBYTE(v250.origin.x);
            }
            else
            {
              v144 = 0;
              v145 = MEMORY[0x24BEE4AF8];
            }
            *(_QWORD *)&v254[48] = LODWORD(v64);
            *(_QWORD *)&v254[56] = 0x4000000400000000;
            *(_QWORD *)&v254[64] = v145;
            v254[74] = v143;
            *(_WORD *)&v254[72] = v144;
            LOBYTE(v236) = v208;
            DisplayList.Item.canonicalize(options:)((char *)&v236);
            outlined consume of DisplayList.Item.Value(v109, v110);
            v111 = *(_QWORD *)&v254[64];
            v110 = *(_QWORD *)&v254[56];
            v207 = *(_QWORD *)&v254[48];
            v212 = *(unsigned __int16 *)&v254[72] | (v254[74] << 16);
          }
          v201 = v110;
          v204 = v111;
          v71 = *(double *)&v254[16];
          v72 = *(double *)&v254[8];
          v73 = *(_QWORD *)&v254[32];
          v74 = *(_QWORD *)&v254[24];
          v75 = *(_QWORD *)&v254[40];
          v76 = *(unsigned int *)&v254[76];
          v146 = static GraphicsBlendMode.normal;
          v147 = byte_254266040;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v176, v179);
          *(_QWORD *)&v255[8] = v146;
          v255[16] = v147;
          *(_DWORD *)&v255[20] = 1065353216;
          v255[24] = 0;
          *(_OWORD *)&v254[48] = xmmword_23527E880;
          *(_QWORD *)&v254[64] = 0;
          v254[74] = 0;
          *(_WORD *)&v254[72] = 0;
        }
        *(double *)&v254[8] = v65;
        *(double *)&v254[16] = v66;
        *(_QWORD *)&v254[24] = v67;
        *(_QWORD *)&v254[32] = v68;
        v82 = (_QWORD *)v256[1];
        v83 = v256[2];
        v84 = v256[3];
        v85 = v256[4];
        v86 = v257;
        v87 = v256[7];
        v88 = v256[8];
        if (v257 >> 30)
        {
          if (v257 >> 30 == 1)
          {
            v174 = v256[6];
            v177 = v75;
            v172 = v256[5];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v256[1], v256[2], v256[3], v256[4], v256[5], v256[6], v256[7], v256[8], v257);
            outlined copy of DisplayList.Item.Value(v207, v201);
            v89 = v82;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82[2] + 1, 1, v82);
            v91 = v89[2];
            v90 = v89[3];
            if (v91 >= v90 >> 1)
              v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v90 > 1), v91 + 1, 1, v89);
            v89[2] = v91 + 1;
            v92 = (double *)&v89[9 * v91];
            v92[4] = v72 - v65;
            v92[5] = v71 - v66;
            *((_QWORD *)v92 + 6) = v74;
            *((_QWORD *)v92 + 7) = v73;
            *((_QWORD *)v92 + 8) = v177;
            *((_QWORD *)v92 + 9) = v207;
            *((_QWORD *)v92 + 10) = v201;
            *((_QWORD *)v92 + 11) = v204;
            *((_BYTE *)v92 + 98) = BYTE2(v212);
            *((_WORD *)v92 + 48) = v212;
            *((_DWORD *)v92 + 25) = 0;
            outlined consume of DisplayList.Item.Value(v207, v201);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v82, v83, v84, v85, v172, v174, v87, v88, v86);
            v256[1] = v89;
            memset(&v256[2], 0, 56);
            v48 = 0x40000000;
            v43 = v181;
            v81 = v229;
            goto LABEL_20;
          }
          *(double *)&v256[1] = v72;
          *(double *)&v256[2] = v71;
          v48 = v212 & 0xFFFFFF | (unint64_t)(v76 << 32);
          v256[3] = v74;
          v256[4] = v73;
          v256[5] = v75;
          v256[6] = v207;
          v256[7] = v201;
          v256[8] = v204;
        }
        else
        {
          v93 = *(double *)&v256[1] - v65;
          v94 = v256[6];
          v95 = v256[5];
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v96 = swift_allocObject();
          *(_OWORD *)(v96 + 16) = xmmword_2352828C0;
          *(double *)(v96 + 32) = v93;
          *(double *)(v96 + 40) = *(double *)&v83 - v66;
          *(_QWORD *)(v96 + 48) = v84;
          *(_QWORD *)(v96 + 56) = v85;
          *(_QWORD *)(v96 + 64) = v95;
          *(_QWORD *)(v96 + 72) = v94;
          *(_QWORD *)(v96 + 80) = v87;
          *(_QWORD *)(v96 + 88) = v88;
          *(_BYTE *)(v96 + 98) = BYTE2(v86);
          *(_WORD *)(v96 + 96) = v86;
          *(_DWORD *)(v96 + 100) = 0;
          *(double *)(v96 + 104) = v72 - v65;
          *(double *)(v96 + 112) = v71 - v66;
          *(_QWORD *)(v96 + 120) = v74;
          *(_QWORD *)(v96 + 128) = v73;
          *(_QWORD *)(v96 + 136) = v75;
          *(_QWORD *)(v96 + 144) = v207;
          *(_QWORD *)(v96 + 152) = v201;
          *(_QWORD *)(v96 + 160) = v204;
          *(_BYTE *)(v96 + 170) = BYTE2(v212);
          *(_WORD *)(v96 + 168) = v212;
          *(_DWORD *)(v96 + 172) = 0;
          v256[1] = v96;
          memset(&v256[2], 0, 56);
          v48 = 0x40000000;
        }
        v43 = v181;
LABEL_20:
        v257 = v48;
        outlined consume of _ShapeStyle_RenderedShape.Shape(v251, *((uint64_t *)&v251 + 1), v252, *((uint64_t *)&v252 + 1), *(uint64_t *)v253, *(uint64_t *)&v253[8], *(uint64_t *)&v253[16], *(uint64_t *)&v253[24], *(uint64_t *)&v253[32], *(uint64_t *)&v253[40], *(uint64_t *)&v253[48], *(uint64_t *)&v253[56], *(unsigned int *)&v253[64]);
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?((unint64_t)v226, v219, v200, v224, v222, v233, v231, v197, v196, v81, v184, v183, v216, v182);
        *(_QWORD *)&v251 = v195;
        *((_QWORD *)&v251 + 1) = v194;
        *(_QWORD *)&v252 = v193;
        *((_QWORD *)&v252 + 1) = v192;
        *(_QWORD *)&v253[16] = v191;
        *(_QWORD *)&v253[24] = v190;
        *(_QWORD *)&v253[32] = v189;
        *(_QWORD *)&v253[40] = v188;
        *(_QWORD *)&v253[48] = v187;
        *(_QWORD *)&v253[56] = v186;
        *(_DWORD *)&v253[64] = v185;
        v47 = *(_DWORD *)(v43 + 60);
        v46 = v47;
        *(_QWORD *)v253 = v199;
        *(_QWORD *)&v253[8] = v198;
        v44 = v180;
        swift_beginAccess();
      }
      while (*(_QWORD *)(*(_QWORD *)(v43 + 24) + 16) > v47);
    }
    *(_DWORD *)(v43 + 60) = 0;
  }
  v148 = v256[1];
  v234 = v256[2];
  v227 = v256[5];
  v230 = *(_OWORD *)&v256[3];
  v225 = v256[6];
  v149 = v256[7];
  v150 = v256[8];
  v151 = v257;
  if (!(v257 >> 30))
  {
    if (v256[7] >> 62 != 3 || v256[7] != 0xC000000000000000 || v256[8] | v256[6] || (v257 & 0xFFFFFF) != 0)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v160 = swift_allocObject();
      *(_OWORD *)(v160 + 16) = xmmword_23527E860;
      *(_QWORD *)(v160 + 32) = v148;
      *(_QWORD *)(v160 + 40) = v234;
      *(_OWORD *)(v160 + 48) = v230;
      *(_QWORD *)(v160 + 64) = v227;
      *(_QWORD *)(v160 + 72) = v225;
      *(_QWORD *)(v160 + 80) = v149;
      *(_QWORD *)(v160 + 88) = v150;
      v163 = WORD1(v151);
      *(_BYTE *)(v160 + 98) = BYTE2(v151);
      *(_WORD *)(v160 + 96) = v151;
      v220 = HIDWORD(v151);
      *(_DWORD *)(v160 + 100) = HIDWORD(v151);
      *(_QWORD *)&v236 = v148;
      *((_QWORD *)&v236 + 1) = v234;
      v237 = v230;
      *(_QWORD *)v238 = v227;
      *(_QWORD *)&v238[8] = v225;
      *(_QWORD *)&v238[16] = v149;
      *(_QWORD *)&v238[24] = v150;
      BYTE2(v239) = BYTE2(v151);
      LOWORD(v239) = v151;
      DWORD1(v239) = HIDWORD(v151);
      outlined copy of DisplayList.Item.Value(v225, v149);
      DisplayList.Item.features.getter();
      v164 = v151;
      v159 = LOWORD(v250.origin.x);
      *(_QWORD *)&v236 = v148;
      *((_QWORD *)&v236 + 1) = v234;
      v237 = v230;
      *(_QWORD *)v238 = v227;
      *(_QWORD *)&v238[8] = v225;
      *(_QWORD *)&v238[16] = v149;
      *(_QWORD *)&v238[24] = v150;
      BYTE2(v239) = v163;
      LOWORD(v239) = v164;
      DWORD1(v239) = v220;
      DisplayList.Item.properties.getter();
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v148, v234, v230, *((uint64_t *)&v230 + 1), v227, v225, v149, v150, v164);
      v148 = 0;
      v234 = 0;
      v227 = 0;
      v230 = 0uLL;
      v225 = 0;
      v149 = 0;
      v150 = 0;
      v158 = LOBYTE(v250.origin.x);
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v256[1], v256[2], v256[3], v256[4], v256[5], 0, 0xC000000000000000, 0, v257);
      v148 = 0;
      v234 = 0;
      v227 = 0;
      v230 = 0uLL;
      v225 = 0;
      v149 = 0;
      v150 = 0;
      v159 = 0;
      v158 = 0;
      v160 = MEMORY[0x24BEE4AF8];
    }
LABEL_114:
    v161 = 0x80000000;
    goto LABEL_115;
  }
  if (v257 >> 30 == 1)
  {
    v152 = (_QWORD *)swift_bridgeObjectRetain();
    v223 = v148;
    DisplayList.init(_:)(v152, (uint64_t)&v250);
    v236 = *(_OWORD *)&v253[72];
    v237 = *(_OWORD *)&v253[88];
    *(_QWORD *)v238 = *(_QWORD *)&v254[40];
    *(_OWORD *)&v238[8] = xmmword_23527E870;
    *(CGFloat *)&v238[24] = v250.origin.x;
    BYTE2(v239) = BYTE2(v250.origin.y);
    LOWORD(v239) = LOWORD(v250.origin.y);
    DWORD1(v239) = *(_DWORD *)&v254[76];
    LOBYTE(v250.origin.x) = v171;
    DisplayList.Item.canonicalize(options:)((char *)&v250);
    v153 = v236;
    v154 = v237;
    v155 = *(_OWORD *)v238;
    v156 = *(_QWORD *)&v238[24];
    v209 = DWORD1(v239);
    v157 = *(_QWORD *)&v238[16] >> 62;
    if (*(_QWORD *)&v238[16] >> 62 != 3
      || (((unsigned __int16)v239 | (BYTE2(v239) << 16)) & 0xFFFFFF) != 0
      || *(_QWORD *)&v238[16] != 0xC000000000000000
      || *(_QWORD *)&v238[24] | *(_QWORD *)&v238[8])
    {
      v217 = *(_QWORD *)&v238[16];
      v214 = (unsigned __int16)v239 | (BYTE2(v239) << 16);
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v162 = swift_allocObject();
      *(_OWORD *)(v162 + 16) = xmmword_23527E860;
      *(_OWORD *)(v162 + 32) = v153;
      *(_OWORD *)(v162 + 48) = v154;
      *(_OWORD *)(v162 + 64) = v155;
      *(_QWORD *)(v162 + 80) = v217;
      *(_QWORD *)(v162 + 88) = v156;
      *(_BYTE *)(v162 + 98) = BYTE2(v214);
      *(_WORD *)(v162 + 96) = v214;
      *(_DWORD *)(v162 + 100) = v209;
      __asm { BR              X10 }
    }
    outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v223, v234, v230, *((uint64_t *)&v230 + 1), v227, v225, v149, v150, v151);
    v158 = 0;
    v159 = 0;
    v160 = MEMORY[0x24BEE4AF8];
    v148 = 0;
    v234 = 0;
    v227 = 0;
    v230 = 0uLL;
    v225 = 0;
    v149 = 0;
    v150 = 0;
    goto LABEL_114;
  }
  v161 = v257;
  v159 = 0;
  v158 = 0;
  v160 = MEMORY[0x24BEE4AF8];
LABEL_115:
  *(_QWORD *)&v236 = v160;
  WORD4(v236) = v159;
  BYTE10(v236) = v158;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v258, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v247 = *(_OWORD *)&v254[48];
  v248 = *(_OWORD *)&v254[64];
  v249[0] = *(_OWORD *)v255;
  *(_OWORD *)((char *)v249 + 9) = *(_OWORD *)&v255[9];
  v243 = *(_OWORD *)&v253[96];
  v244 = *(_OWORD *)v254;
  v245 = *(_OWORD *)&v254[16];
  v246 = *(_OWORD *)&v254[32];
  v239 = *(_OWORD *)&v253[32];
  v240 = *(_OWORD *)&v253[48];
  v241 = *(_OWORD *)&v253[64];
  v242 = *(_OWORD *)&v253[80];
  v236 = v251;
  v237 = v252;
  *(_OWORD *)v238 = *(_OWORD *)v253;
  *(_OWORD *)&v238[16] = *(_OWORD *)&v253[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v236);
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v148, v234, v230, *((uint64_t *)&v230 + 1), v227, v225, v149, v150, v161);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t *v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  double *v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double *v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  int v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int16 x_low;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  double v120;
  _BOOL4 IsNull;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  char v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  char v136;
  __int16 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  char v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  _QWORD *v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  uint64_t v155;
  char v156;
  __int16 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  CGFloat v176;
  CGFloat v177;
  CGFloat v178;
  CGFloat v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  double v202;
  uint64_t v203;
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  id v221;
  uint64_t v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  __int16 v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  void *v251;
  uint64_t v252;
  uint64_t *v253;
  void *v254;
  uint64_t v255;
  __int16 v256;
  __int128 v257;
  __int128 v258;
  _BYTE v259[32];
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  _OWORD v270[2];
  CGRect v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _BYTE v278[48];
  _BYTE v279[80];
  _BYTE v280[25];
  _QWORD v281[9];
  unint64_t v282;
  _QWORD v283[12];
  unsigned int v284;
  double v285;
  double v286;
  double v287;
  double v288;
  uint64_t v289[2];
  char v290;
  char v291;
  uint64_t v292;
  CGRect v293;
  CGRect v294;
  CGRect v295;

  v292 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(v0 + 12);
  Value = AGGraphGetValue();
  v13 = *(_QWORD *)Value;
  v12 = *(_QWORD *)(Value + 8);
  v14 = *(_BYTE *)(Value + 16);
  v289[0] = *(_QWORD *)Value;
  v289[1] = v12;
  v290 = v14;
  v291 = v15 & 1;
  v16 = &lazy cache variable for type metadata for Locale?;
  if ((v15 & 1) != 0 || !*((_WORD *)v253 + 25))
  {
    swift_retain();
    swift_retain();
    v18 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v272 = *(uint64_t *)((char *)v253 + 28);
    DWORD2(v272) = v10;
    swift_retain();
    swift_retain();
    v17 = AGGraphAnyInputsChanged();
    v18 = ++static DisplayList.Version.lastValue;
    if (!v17)
      goto LABEL_9;
  }
  v19 = (2 * ((33 * (v18 >> 16)) ^ v18)) | 1;
  if (!v18)
    LOWORD(v19) = 0;
  *((_WORD *)v253 + 25) = v19;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v20 = *((_DWORD *)v253 + 10);
    AGCreateWeakAttribute();
    AGCreateWeakAttribute();
    v250 = v20;
    AGCreateWeakAttribute();
    AGCreateWeakAttribute();
    AGCreateWeakAttribute();
    AGCreateWeakAttribute();
    v21 = (double *)AGGraphGetValue();
    v22 = *v21;
    v23 = v21[1];
    v24 = (double *)AGGraphGetValue();
    v25 = *v24;
    v26 = v24[1];
    type metadata accessor for CGSize(0);
    v27 = (double *)AGGraphGetValue();
    v28 = *v27;
    v29 = v27[1];
    _threadGeometryProxyData();
    v247 = v18;
    _setThreadGeometryProxyData();
    specialized closure #2 in ShapeStyledDisplayList.updateValue()(v289, (uint64_t)v283, v28, v29);
    v30 = v23 - v26;
    v31 = v22 - v25;
    _setThreadGeometryProxyData();
    v193 = v283[0];
    v200 = v283[1];
    v16 = (unint64_t *)v283[2];
    v32 = v283[3];
    v190 = v283[5];
    v191 = v283[4];
    v33 = v283[6];
    v188 = v283[7];
    v34 = v283[8];
    v35 = v283[9];
    v36 = v283[10];
    v37 = v283[11];
    v38 = v284;
    v39 = v285;
    v40 = v286;
    v41 = v287;
    v42 = v288;
    v4 = *v253;
    memset(&v281[1], 0, 64);
    v281[0] = v4;
    v282 = 0x80000000;
    swift_retain();
    v183 = v38;
    v175 = v38;
    v184 = v37;
    v185 = v36;
    v174 = v37;
    v186 = v35;
    v187 = v34;
    v172 = v34;
    v173 = v35;
    v1 = v193;
    v18 = v200;
    v192 = (uint64_t)v16;
    v13 = v32;
    v43 = v32;
    v12 = v190;
    v5 = v191;
    v189 = v33;
    v44 = v33;
    v3 = v188;
    outlined copy of _ShapeStyle_RenderedShape.Shape(v193, v200, (uint64_t)v16, v43, v191, v190, v44, v188, v172, v173, v36, v174, v175);
    v293.origin.x = v39;
    v293.origin.y = v40;
    v293.size.width = v41;
    v293.size.height = v42;
    v294 = CGRectOffset(v293, v31, v30);
    x = v294.origin.x;
    y = v294.origin.y;
    width = v294.size.width;
    height = v294.size.height;
    v2 = *((_DWORD *)v253 + 2);
    LOWORD(v16) = *((_WORD *)v253 + 25);
    v45 = *((_BYTE *)v253 + 48);
    v181 = v45;
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
  v45 = v181;
LABEL_11:
  *(_QWORD *)&v272 = v1;
  v46 = v18;
  *((_QWORD *)&v272 + 1) = v18;
  *(_QWORD *)&v273 = v192;
  *((_QWORD *)&v273 + 1) = v13;
  *(_QWORD *)&v274 = v5;
  *((_QWORD *)&v274 + 1) = v12;
  *(_QWORD *)&v275 = v189;
  *((_QWORD *)&v275 + 1) = v3;
  *(_QWORD *)&v276 = v187;
  *((_QWORD *)&v276 + 1) = v186;
  *(_QWORD *)&v277 = v185;
  *((_QWORD *)&v277 + 1) = v184;
  *(_DWORD *)v278 = v183;
  *(_WORD *)&v278[4] = (_WORD)v16;
  *(CGFloat *)&v278[8] = x;
  *(CGFloat *)&v278[16] = y;
  *(CGFloat *)&v278[24] = width;
  *(CGFloat *)&v278[32] = height;
  *(_QWORD *)&v278[40] = 0;
  *(_DWORD *)v279 = 0;
  *(CGFloat *)&v279[8] = x;
  *(CGFloat *)&v279[16] = y;
  *(CGFloat *)&v279[24] = width;
  *(CGFloat *)&v279[32] = height;
  *(_OWORD *)&v279[48] = xmmword_23527E880;
  *(_QWORD *)&v279[40] = v247;
  *(_QWORD *)&v279[64] = 0;
  v279[74] = 0;
  *(_WORD *)&v279[72] = 0;
  *(_DWORD *)&v279[76] = v2;
  v280[0] = v45;
  *(_DWORD *)&v280[4] = v250;
  *(_QWORD *)&v280[8] = static GraphicsBlendMode.normal;
  v280[16] = byte_254266040;
  *(_DWORD *)&v280[20] = 1065353216;
  v280[24] = 0;
  LOBYTE(v257) = 0;
  v47 = *((unsigned int *)v253 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v257, v47, (uint64_t)v281);
  v222 = v4;
  v182 = v13;
  if (v4)
  {
    v48 = (uint64_t *)(v4 + 24);
    v49 = *(_DWORD *)(v4 + 60);
    v50 = v49;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16) > v49)
    {
      v178 = *(double *)(MEMORY[0x24BDBF070] + 8);
      v179 = *MEMORY[0x24BDBF070];
      v176 = *(double *)(MEMORY[0x24BDBF070] + 24);
      v177 = *(double *)(MEMORY[0x24BDBF070] + 16);
      v51 = v49;
      v199 = (uint64_t *)(v4 + 24);
      do
      {
        ++*(_DWORD *)(v4 + 60);
        swift_beginAccess();
        v57 = *(_QWORD **)(v4 + 24);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v4 + 24) = v57;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if (v51 < 0)
            goto LABEL_106;
        }
        else
        {
          v57 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
          *v48 = (uint64_t)v57;
          if (v51 < 0)
          {
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
            JUMPOUT(0x234AC8264);
          }
        }
        if (v57[2] <= v50)
          goto LABEL_107;
        v59 = 224 * v50;
        BYTE4(v57[28 * v50 + 31]) = 1;
        v60 = *v48;
        swift_endAccess();
        if (*(_QWORD *)(v60 + 16) <= v50)
          goto LABEL_108;
        v61 = (_QWORD *)(v60 + v59);
        v232 = *(_DWORD *)(v60 + v59 + 52);
        v62 = *(void **)(v60 + v59 + 56);
        v248 = *(_QWORD *)(v60 + v59 + 64);
        v254 = *(void **)(v60 + v59 + 72);
        v63 = *(_QWORD *)(v60 + v59 + 88);
        v251 = *(void **)(v60 + v59 + 80);
        v64 = *(_QWORD *)(v60 + v59 + 96);
        v245 = *(_QWORD *)(v60 + v59 + 104);
        v65 = *(_QWORD *)(v60 + v59 + 120);
        v241 = *(_QWORD *)(v60 + v59 + 112);
        v66 = *(_QWORD *)(v60 + v59 + 128);
        v67 = v61[17];
        v69 = v61[18];
        v68 = v61[19];
        v70 = v61[20];
        v216 = *((_QWORD *)&v272 + 1);
        v217 = v272;
        v214 = *((_QWORD *)&v273 + 1);
        v215 = v273;
        v219 = *((_QWORD *)&v274 + 1);
        v220 = v274;
        v212 = *((_QWORD *)&v275 + 1);
        v213 = v275;
        v210 = *((_QWORD *)&v276 + 1);
        v211 = v276;
        v208 = *((_QWORD *)&v277 + 1);
        v209 = v277;
        v207 = *(_DWORD *)v278;
        v276 = 0u;
        v277 = 0u;
        v274 = 0u;
        v275 = 0u;
        v272 = 0u;
        v273 = 0u;
        *(_DWORD *)v278 = 0x800000;
        swift_retain_n();
        v239 = v67;
        v238 = v63;
        v235 = v64;
        outlined copy of _ShapeStyle_Pack.Style?(v62, v248, v254, v251, v63, v64, v245, v241, v65, v66, v67, v69, v68, v70);
        swift_release();
        *(_QWORD *)&v278[40] = v222;
        *(_DWORD *)v279 = v232;
        if (v70)
        {
          *(_QWORD *)&v257 = v62;
          *((_QWORD *)&v257 + 1) = v248;
          *(_QWORD *)&v258 = v254;
          *((_QWORD *)&v258 + 1) = v251;
          *(_QWORD *)v259 = v63;
          *(_QWORD *)&v259[8] = v64;
          *(_QWORD *)&v259[16] = v245;
          *(_QWORD *)&v259[24] = v241;
          *(_QWORD *)&v260 = v65;
          *((_QWORD *)&v260 + 1) = v66;
          LOBYTE(v261) = v67;
          DWORD1(v261) = HIDWORD(v67);
          *((_QWORD *)&v261 + 1) = v69;
          LOBYTE(v262) = v68;
          *((_QWORD *)&v262 + 1) = v70;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v257);
        }
        v71 = *(float *)&v280[20];
        v218 = v65;
        v205 = v69;
        v206 = v66;
        v203 = v70;
        v204 = v68;
        v221 = v62;
        if (*(float *)&v280[20] == 0.0
          || (v72 = *(double *)&v278[8],
              v73 = *(double *)&v278[16],
              v74 = *(_QWORD *)&v278[24],
              v75 = *(_QWORD *)&v278[32],
              CGRectIsEmpty(*(CGRect *)&v278[8])))
        {
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v279[48], *(unint64_t *)&v279[56]);
          *(_OWORD *)&v279[48] = xmmword_23527E880;
          *(_QWORD *)&v279[64] = 0;
          v279[74] = 0;
          *(_WORD *)&v279[72] = 0;
          v76 = *(_DWORD *)&v278[40];
          if (*(_QWORD *)&v278[40])
          {
            *(_QWORD *)&v279[48] = *(_QWORD *)&v278[40];
            *(_QWORD *)&v279[56] = *(unsigned int *)v279 | 0x4000001100000000;
            *(_QWORD *)&v279[64] = MEMORY[0x24BEE4AF8];
            LOBYTE(v257) = v280[0];
            DisplayList.Item.canonicalize(options:)((char *)&v257);
            *(_QWORD *)&v278[40] = 0;
            *(_DWORD *)v279 = 0;
            v77 = *(_QWORD *)&v279[48];
            v227 = *(_QWORD *)&v279[64];
            v78 = *(_QWORD *)&v279[56];
            v76 = *(unsigned __int16 *)&v279[72] | (v279[74] << 16);
          }
          else
          {
            v227 = 0;
            v77 = 0;
            v78 = 0xC000000000000000;
          }
          v223 = v76;
          v225 = v78;
          v233 = v77;
          v79 = *(double *)&v279[16];
          v80 = *(double *)&v279[8];
          v81 = *(_QWORD *)&v279[32];
          v82 = *(_QWORD *)&v279[24];
          v201 = *(_QWORD *)&v279[40];
          v83 = *(unsigned int *)&v279[76];
          v84 = static GraphicsBlendMode.normal;
          v85 = byte_254266040;
          v86 = *(_QWORD *)&v280[8];
          v87 = v280[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v86, v87);
          *(_QWORD *)&v280[8] = v84;
          v280[16] = v85;
          *(_DWORD *)&v280[20] = 1065353216;
          v280[24] = 0;
          *(_OWORD *)&v279[48] = xmmword_23527E880;
          *(_QWORD *)&v279[64] = 0;
          v279[74] = 0;
          *(_WORD *)&v279[72] = 0;
          v72 = *(double *)&v278[8];
          v73 = *(double *)&v278[16];
          v74 = *(_QWORD *)&v278[24];
          v75 = *(_QWORD *)&v278[32];
        }
        else
        {
          v234 = v280[0];
          LOBYTE(v257) = v280[0];
          DisplayList.Item.canonicalize(options:)((char *)&v257);
          v100 = *(_QWORD *)&v278[40];
          if (*(_QWORD *)&v278[40])
          {
            v101 = *(unsigned int *)v279;
            v102 = *(_OWORD *)&v279[56];
            v103 = *(unsigned __int16 *)&v279[72] | (v279[74] << 16);
            v104 = *(_OWORD *)&v279[24];
            v105 = *(_QWORD *)&v279[48];
            v106 = *(_QWORD *)&v279[40];
            if (*(_QWORD *)&v279[56] >> 62 != 3
              || (v103 & 0xFFFFFF) != 0
              || *(_QWORD *)&v279[56] != 0xC000000000000000
              || *(_QWORD *)&v279[64] | *(_QWORD *)&v279[48])
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v109 = swift_allocObject();
              *(_OWORD *)(v109 + 16) = xmmword_23527E860;
              *(_QWORD *)(v109 + 32) = 0;
              *(_QWORD *)(v109 + 40) = 0;
              *(_OWORD *)(v109 + 48) = v104;
              *(_QWORD *)(v109 + 64) = v106;
              *(_QWORD *)(v109 + 72) = v105;
              *(_OWORD *)(v109 + 80) = v102;
              *(_BYTE *)(v109 + 98) = BYTE2(v103);
              *(_WORD *)(v109 + 96) = v103;
              *(_DWORD *)(v109 + 100) = 0;
              v257 = 0uLL;
              v258 = v104;
              *(_QWORD *)v259 = v106;
              *(_QWORD *)&v259[8] = v105;
              *(_OWORD *)&v259[16] = v102;
              BYTE2(v260) = BYTE2(v103);
              LOWORD(v260) = v103;
              DWORD1(v260) = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v105, v102);
              DisplayList.Item.features.getter();
              v110 = v106;
              x_low = LOWORD(v271.origin.x);
              v257 = 0uLL;
              v258 = v104;
              *(_QWORD *)v259 = v110;
              *(_QWORD *)&v259[8] = v105;
              *(_OWORD *)&v259[16] = v102;
              BYTE2(v260) = BYTE2(v103);
              LOWORD(v260) = v103;
              DWORD1(v260) = 0;
              DisplayList.Item.properties.getter();
              v107 = LOBYTE(v271.origin.x);
            }
            else
            {
              swift_retain();
              v107 = 0;
              x_low = 0;
              v109 = MEMORY[0x24BEE4AF8];
            }
            *(_QWORD *)&v279[48] = v100;
            *(_QWORD *)&v279[56] = v101 | 0x4000001100000000;
            *(_QWORD *)&v279[64] = v109;
            v279[74] = v107;
            *(_WORD *)&v279[72] = x_low;
            LOBYTE(v257) = v234;
            DisplayList.Item.canonicalize(options:)((char *)&v257);
            outlined consume of DisplayList.Item.Value(v105, v102);
            swift_release();
            *(_QWORD *)&v278[40] = 0;
            *(_DWORD *)v279 = 0;
          }
          v111 = v280[24];
          v112 = *(_QWORD *)&v279[48];
          v113 = *(_QWORD *)&v279[64];
          v114 = *(_QWORD *)&v279[56];
          v115 = *(unsigned __int16 *)&v279[72] | (v279[74] << 16);
          if ((v280[24] & 1) != 0)
          {
            if (*(_QWORD *)&v279[56] >> 62 != 3
              || (v115 & 0xFFFFFF) != 0
              || *(_QWORD *)&v279[56] != 0xC000000000000000
              || *(_QWORD *)&v279[64] | *(_QWORD *)&v279[48])
            {
              v224 = *(unsigned __int16 *)&v278[4];
              v226 = v280[24];
              v228 = v74;
              v271.origin.x = v179;
              v271.origin.y = v178;
              v271.size.width = v177;
              v271.size.height = v176;
              v116 = *(_QWORD *)&v279[40];
              v202 = *(double *)&v279[8];
              v257 = *(_OWORD *)&v279[8];
              v195 = *(_QWORD *)&v279[24];
              v197 = *(double *)&v279[16];
              v258 = *(_OWORD *)&v279[24];
              v180 = *(_QWORD *)&v279[32];
              *(_OWORD *)v259 = *(_OWORD *)&v279[40];
              *(_OWORD *)&v259[16] = *(_OWORD *)&v279[56];
              BYTE2(v260) = v279[74];
              LOWORD(v260) = *(_WORD *)&v279[72];
              DWORD1(v260) = *(_DWORD *)&v279[76];
              DisplayList.Item.addExtent(to:)();
              v117 = v271.origin.x;
              v118 = v271.origin.y;
              v119 = v271.size.width;
              v120 = v271.size.height;
              IsNull = CGRectIsNull(v271);
              v122 = 0.0;
              if (IsNull)
                v123 = 0.0;
              else
                v123 = v117;
              if (IsNull)
                v124 = 0.0;
              else
                v124 = v118;
              if (IsNull)
                v125 = 0.0;
              else
                v125 = v119;
              if (!IsNull)
                v122 = v120;
              v295 = CGRectIntegral(*(CGRect *)(&v122 - 3));
              v126 = v295.origin.x;
              v127 = v295.origin.y;
              *(CGRect *)&v279[8] = v295;
              if (v114 >> 62 != 3 || (v115 & 0xFFFFFF) != 0 || v114 != 0xC000000000000000 || v113 | v112)
              {
                type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                v130 = swift_allocObject();
                *(_OWORD *)(v130 + 16) = xmmword_23527E860;
                *(_QWORD *)(v130 + 32) = 0;
                *(_QWORD *)(v130 + 40) = 0;
                *(_QWORD *)(v130 + 48) = v195;
                *(_QWORD *)(v130 + 56) = v180;
                *(_QWORD *)(v130 + 64) = v116;
                *(_QWORD *)(v130 + 72) = v112;
                *(_QWORD *)(v130 + 80) = v114;
                *(_QWORD *)(v130 + 88) = v113;
                *(_BYTE *)(v130 + 98) = BYTE2(v115);
                *(_WORD *)(v130 + 96) = v115;
                *(_DWORD *)(v130 + 100) = 0;
                v257 = 0uLL;
                *(_QWORD *)&v258 = v195;
                *((_QWORD *)&v258 + 1) = v180;
                *(_QWORD *)v259 = v116;
                *(_QWORD *)&v259[8] = v112;
                *(_QWORD *)&v259[16] = v114;
                *(_QWORD *)&v259[24] = v113;
                BYTE2(v260) = BYTE2(v115);
                LOWORD(v260) = v115;
                DWORD1(v260) = 0;
                outlined copy of DisplayList.Item.Value(v112, v114);
                DisplayList.Item.features.getter();
                v129 = v256;
                v257 = 0uLL;
                *(_QWORD *)&v258 = v195;
                *((_QWORD *)&v258 + 1) = v180;
                *(_QWORD *)v259 = v116;
                *(_QWORD *)&v259[8] = v112;
                *(_QWORD *)&v259[16] = v114;
                *(_QWORD *)&v259[24] = v113;
                BYTE2(v260) = BYTE2(v115);
                LOWORD(v260) = v115;
                DWORD1(v260) = 0;
                DisplayList.Item.properties.getter();
                v128 = v256;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                v128 = 0;
                v129 = 0;
                v130 = MEMORY[0x24BEE4AF8];
              }
              v131 = swift_allocObject();
              *(_QWORD *)(v131 + 16) = v130;
              *(_WORD *)(v131 + 24) = v129;
              *(_BYTE *)(v131 + 26) = v128;
              *(double *)(v131 + 32) = v126 - v202;
              *(double *)(v131 + 40) = v127 - v197;
              *(_BYTE *)(v131 + 48) = 0;
              *(_DWORD *)(v131 + 52) = 0;
              *(_BYTE *)(v131 + 56) = 1;
              *(_DWORD *)(v131 + 60) = 161;
              *(_BYTE *)(v131 + 64) = 3;
              outlined consume of DisplayList.Item.Value(v112, v114);
              v113 = 0;
              v112 = v131 | 0x9000000000000000;
              *(_QWORD *)&v279[48] = v131 | 0x9000000000000000;
              v114 = v224;
              *(_OWORD *)&v279[56] = v224;
              v279[74] = 0;
              *(_WORD *)&v279[72] = 0;
              v74 = v228;
              v111 = v226;
            }
            else
            {
              v114 = 0xC000000000000000;
            }
            v115 = 0;
            v280[24] = v111 & 0xFE;
          }
          v132 = *(_QWORD *)&v280[8];
          v133 = v280[16];
          v198 = v280[16];
          if ((v280[16] & 1) != 0 || *(_DWORD *)&v280[8])
          {
            v134 = *(_OWORD *)&v279[24];
            v135 = *(_QWORD *)&v279[40];
            if (v114 >> 62 != 3 || (v115 & 0xFFFFFF) != 0 || v114 != 0xC000000000000000 || v113 | v112)
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v138 = swift_allocObject();
              *(_OWORD *)(v138 + 16) = xmmword_23527E860;
              *(_QWORD *)(v138 + 32) = 0;
              *(_QWORD *)(v138 + 40) = 0;
              *(_OWORD *)(v138 + 48) = v134;
              *(_QWORD *)(v138 + 64) = v135;
              *(_QWORD *)(v138 + 72) = v112;
              *(_QWORD *)(v138 + 80) = v114;
              *(_QWORD *)(v138 + 88) = v113;
              *(_BYTE *)(v138 + 98) = BYTE2(v115);
              *(_WORD *)(v138 + 96) = v115;
              *(_DWORD *)(v138 + 100) = 0;
              v257 = 0uLL;
              v258 = v134;
              *(_QWORD *)v259 = v135;
              *(_QWORD *)&v259[8] = v112;
              *(_QWORD *)&v259[16] = v114;
              *(_QWORD *)&v259[24] = v113;
              BYTE2(v260) = BYTE2(v115);
              LOWORD(v260) = v115;
              DWORD1(v260) = 0;
              outlined copy of GraphicsBlendMode(v132, v133);
              outlined copy of DisplayList.Item.Value(v112, v114);
              DisplayList.Item.features.getter();
              v229 = LOWORD(v271.origin.x);
              v257 = 0uLL;
              v258 = v134;
              *(_QWORD *)v259 = v135;
              *(_QWORD *)&v259[8] = v112;
              *(_QWORD *)&v259[16] = v114;
              *(_QWORD *)&v259[24] = v113;
              BYTE2(v260) = BYTE2(v115);
              LOWORD(v260) = v115;
              DWORD1(v260) = 0;
              DisplayList.Item.properties.getter();
              v137 = v229;
              v133 = v198;
              v136 = LOBYTE(v271.origin.x);
            }
            else
            {
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v280[8], v280[16]);
              v136 = 0;
              v137 = 0;
              v138 = MEMORY[0x24BEE4AF8];
            }
            *(_QWORD *)&v279[48] = v132;
            *(_QWORD *)&v279[56] = v133 | 0x4000000500000000;
            *(_QWORD *)&v279[64] = v138;
            v279[74] = v136;
            *(_WORD *)&v279[72] = v137;
            LOBYTE(v257) = v234;
            DisplayList.Item.canonicalize(options:)((char *)&v257);
            outlined consume of DisplayList.Item.Value(v112, v114);
            v112 = *(_QWORD *)&v279[48];
            v113 = *(_QWORD *)&v279[64];
            v114 = *(_QWORD *)&v279[56];
            v115 = *(unsigned __int16 *)&v279[72] | (v279[74] << 16);
          }
          if (v71 == 1.0)
          {
            v227 = v113;
          }
          else
          {
            v230 = v132;
            v139 = *(_OWORD *)&v279[24];
            v140 = *(_QWORD *)&v279[40];
            if (v114 >> 62 != 3
              || (v115 & 0xFFFFFF) != 0
              || v114 != 0xC000000000000000
              || (v141 = v113 | v112, v113 | v112))
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
              v143 = swift_allocObject();
              *(_OWORD *)(v143 + 16) = xmmword_23527E860;
              *(_QWORD *)(v143 + 32) = 0;
              *(_QWORD *)(v143 + 40) = 0;
              *(_OWORD *)(v143 + 48) = v139;
              *(_QWORD *)(v143 + 64) = v140;
              *(_QWORD *)(v143 + 72) = v112;
              *(_QWORD *)(v143 + 80) = v114;
              *(_QWORD *)(v143 + 88) = v113;
              *(_BYTE *)(v143 + 98) = BYTE2(v115);
              *(_WORD *)(v143 + 96) = v115;
              *(_DWORD *)(v143 + 100) = 0;
              v257 = 0uLL;
              v258 = v139;
              *(_QWORD *)v259 = v140;
              *(_QWORD *)&v259[8] = v112;
              *(_QWORD *)&v259[16] = v114;
              *(_QWORD *)&v259[24] = v113;
              BYTE2(v260) = BYTE2(v115);
              LOWORD(v260) = v115;
              DWORD1(v260) = 0;
              outlined copy of DisplayList.Item.Value(v112, v114);
              DisplayList.Item.features.getter();
              v142 = LOWORD(v271.origin.x);
              v257 = 0uLL;
              v258 = v139;
              *(_QWORD *)v259 = v140;
              *(_QWORD *)&v259[8] = v112;
              *(_QWORD *)&v259[16] = v114;
              *(_QWORD *)&v259[24] = v113;
              BYTE2(v260) = BYTE2(v115);
              LOWORD(v260) = v115;
              DWORD1(v260) = 0;
              DisplayList.Item.properties.getter();
              v141 = LOBYTE(v271.origin.x);
            }
            else
            {
              v142 = 0;
              v143 = MEMORY[0x24BEE4AF8];
            }
            v132 = v230;
            *(_QWORD *)&v279[48] = LODWORD(v71);
            *(_QWORD *)&v279[56] = 0x4000000400000000;
            *(_QWORD *)&v279[64] = v143;
            v279[74] = v141;
            *(_WORD *)&v279[72] = v142;
            LOBYTE(v257) = v234;
            DisplayList.Item.canonicalize(options:)((char *)&v257);
            outlined consume of DisplayList.Item.Value(v112, v114);
            v112 = *(_QWORD *)&v279[48];
            v227 = *(_QWORD *)&v279[64];
            v114 = *(_QWORD *)&v279[56];
            v115 = *(unsigned __int16 *)&v279[72] | (v279[74] << 16);
          }
          v223 = v115;
          v225 = v114;
          v233 = v112;
          v79 = *(double *)&v279[16];
          v80 = *(double *)&v279[8];
          v81 = *(_QWORD *)&v279[32];
          v82 = *(_QWORD *)&v279[24];
          v201 = *(_QWORD *)&v279[40];
          v83 = *(unsigned int *)&v279[76];
          v144 = static GraphicsBlendMode.normal;
          v145 = byte_254266040;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          outlined consume of GraphicsBlendMode(v132, v198);
          *(_QWORD *)&v280[8] = v144;
          v280[16] = v145;
          *(_DWORD *)&v280[20] = 1065353216;
          v280[24] = 0;
          *(_OWORD *)&v279[48] = xmmword_23527E880;
          *(_QWORD *)&v279[64] = 0;
          v279[74] = 0;
          *(_WORD *)&v279[72] = 0;
        }
        *(double *)&v279[8] = v72;
        *(double *)&v279[16] = v73;
        *(_QWORD *)&v279[24] = v74;
        *(_QWORD *)&v279[32] = v75;
        v88 = (_QWORD *)v281[1];
        v89 = v281[2];
        v90 = v281[3];
        v91 = v281[4];
        v92 = v282;
        v93 = v281[7];
        v94 = v281[8];
        v95 = v239;
        if (v282 >> 30)
        {
          if (v282 >> 30 == 1)
          {
            v194 = v281[5];
            v196 = v281[6];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v281[1], v281[2], v281[3], v281[4], v281[5], v281[6], v281[7], v281[8], v282);
            outlined copy of DisplayList.Item.Value(v233, v225);
            v96 = v88;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88[2] + 1, 1, v88);
            v98 = v96[2];
            v97 = v96[3];
            if (v98 >= v97 >> 1)
              v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v97 > 1), v98 + 1, 1, v96);
            v96[2] = v98 + 1;
            v99 = (double *)&v96[9 * v98];
            v99[4] = v80 - v72;
            v99[5] = v79 - v73;
            *((_QWORD *)v99 + 6) = v82;
            *((_QWORD *)v99 + 7) = v81;
            *((_QWORD *)v99 + 8) = v201;
            *((_QWORD *)v99 + 9) = v233;
            *((_QWORD *)v99 + 10) = v225;
            *((_QWORD *)v99 + 11) = v227;
            *((_BYTE *)v99 + 98) = BYTE2(v223);
            *((_WORD *)v99 + 48) = v223;
            *((_DWORD *)v99 + 25) = 0;
            outlined consume of DisplayList.Item.Value(v233, v225);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v88, v89, v90, v91, v194, v196, v93, v94, v92);
            v281[1] = v96;
            memset(&v281[2], 0, 56);
            v56 = 0x40000000;
            v95 = v239;
          }
          else
          {
            *(double *)&v281[1] = v80;
            *(double *)&v281[2] = v79;
            v56 = v223 & 0xFFFFFF | (unint64_t)(v83 << 32);
            v281[3] = v82;
            v281[4] = v81;
            v281[5] = v201;
            v281[6] = v233;
            v281[7] = v225;
            v281[8] = v227;
          }
        }
        else
        {
          v52 = *(double *)&v281[1] - v72;
          v53 = v281[6];
          v54 = v281[5];
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v55 = swift_allocObject();
          *(_OWORD *)(v55 + 16) = xmmword_2352828C0;
          *(double *)(v55 + 32) = v52;
          *(double *)(v55 + 40) = *(double *)&v89 - v73;
          *(_QWORD *)(v55 + 48) = v90;
          *(_QWORD *)(v55 + 56) = v91;
          *(_QWORD *)(v55 + 64) = v54;
          *(_QWORD *)(v55 + 72) = v53;
          *(_QWORD *)(v55 + 80) = v93;
          *(_QWORD *)(v55 + 88) = v94;
          *(_BYTE *)(v55 + 98) = BYTE2(v92);
          *(_WORD *)(v55 + 96) = v92;
          *(_DWORD *)(v55 + 100) = 0;
          *(double *)(v55 + 104) = v80 - v72;
          *(double *)(v55 + 112) = v79 - v73;
          *(_QWORD *)(v55 + 120) = v82;
          *(_QWORD *)(v55 + 128) = v81;
          *(_QWORD *)(v55 + 136) = v201;
          *(_QWORD *)(v55 + 144) = v233;
          *(_QWORD *)(v55 + 152) = v225;
          *(_QWORD *)(v55 + 160) = v227;
          *(_BYTE *)(v55 + 170) = BYTE2(v223);
          *(_WORD *)(v55 + 168) = v223;
          *(_DWORD *)(v55 + 172) = 0;
          v281[1] = v55;
          memset(&v281[2], 0, 56);
          v56 = 0x40000000;
        }
        v282 = v56;
        outlined consume of _ShapeStyle_RenderedShape.Shape(v272, *((uint64_t *)&v272 + 1), v273, *((uint64_t *)&v273 + 1), v274, *((uint64_t *)&v274 + 1), v275, *((uint64_t *)&v275 + 1), v276, *((uint64_t *)&v276 + 1), v277, *((uint64_t *)&v277 + 1), *(unsigned int *)v278);
        v4 = v222;
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?((unint64_t)v221, v248, (unint64_t)v254, v251, v238, v235, v245, v241, v218, v206, v95, v205, v204, v203);
        *(_QWORD *)&v272 = v217;
        *((_QWORD *)&v272 + 1) = v216;
        *(_QWORD *)&v273 = v215;
        *((_QWORD *)&v273 + 1) = v214;
        *(_QWORD *)&v275 = v213;
        *((_QWORD *)&v275 + 1) = v212;
        *(_QWORD *)&v276 = v211;
        *((_QWORD *)&v276 + 1) = v210;
        *(_QWORD *)&v277 = v209;
        *((_QWORD *)&v277 + 1) = v208;
        *(_DWORD *)v278 = v207;
        v51 = *(_DWORD *)(v222 + 60);
        v50 = v51;
        *(_QWORD *)&v274 = v220;
        *((_QWORD *)&v274 + 1) = v219;
        v48 = v199;
        swift_beginAccess();
        v46 = v200;
      }
      while (*(_QWORD *)(*(_QWORD *)(v222 + 24) + 16) > v51);
    }
    *(_DWORD *)(v4 + 60) = 0;
  }
  v146 = v281[1];
  v240 = v281[2];
  v255 = v281[3];
  v147 = v281[5];
  v249 = v281[7];
  v246 = v281[8];
  v148 = v282;
  v252 = v281[4];
  if (!(v282 >> 30))
  {
    if (v281[7] >> 62 != 3 || v281[7] != 0xC000000000000000 || v281[8] | v281[6] || (v282 & 0xFFFFFF) != 0)
    {
      v243 = HIDWORD(v282);
      v160 = v281[4];
      v161 = v281[1];
      v162 = v281[5];
      v163 = v281[6];
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v164 = swift_allocObject();
      *(_OWORD *)(v164 + 16) = xmmword_23527E860;
      *(_QWORD *)(v164 + 32) = v161;
      *(_QWORD *)(v164 + 40) = v240;
      *(_QWORD *)(v164 + 48) = v255;
      *(_QWORD *)(v164 + 56) = v160;
      *(_QWORD *)(v164 + 64) = v162;
      *(_QWORD *)(v164 + 72) = v163;
      *(_QWORD *)(v164 + 80) = v249;
      *(_QWORD *)(v164 + 88) = v246;
      *(_BYTE *)(v164 + 98) = BYTE2(v148);
      *(_WORD *)(v164 + 96) = v148;
      *(_DWORD *)(v164 + 100) = v243;
      *(_QWORD *)&v257 = v161;
      *((_QWORD *)&v257 + 1) = v240;
      *(_QWORD *)&v258 = v255;
      *((_QWORD *)&v258 + 1) = v160;
      *(_QWORD *)v259 = v162;
      *(_QWORD *)&v259[8] = v163;
      *(_QWORD *)&v259[16] = v249;
      *(_QWORD *)&v259[24] = v246;
      BYTE2(v260) = BYTE2(v148);
      LOWORD(v260) = v148;
      DWORD1(v260) = v243;
      outlined copy of DisplayList.Item.Value(v163, v249);
      DisplayList.Item.features.getter();
      v165 = v163;
      v237 = v163;
      v157 = LOWORD(v271.origin.x);
      *(_QWORD *)&v257 = v161;
      *((_QWORD *)&v257 + 1) = v240;
      *(_QWORD *)&v258 = v255;
      *((_QWORD *)&v258 + 1) = v252;
      *(_QWORD *)v259 = v162;
      *(_QWORD *)&v259[8] = v165;
      *(_QWORD *)&v259[16] = v249;
      *(_QWORD *)&v259[24] = v246;
      BYTE2(v260) = BYTE2(v148);
      v46 = v200;
      LOWORD(v260) = v148;
      DWORD1(v260) = v243;
      DisplayList.Item.properties.getter();
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v161, v240, v255, v252, v162, v237, v249, v246, v148);
      v158 = v164;
      v244 = 0;
      v166 = 0;
      v255 = 0;
      v252 = 0;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v170 = 0;
      v156 = LOBYTE(v271.origin.x);
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v281[1], v281[2], v281[3], v281[4], v281[5], 0, 0xC000000000000000, 0, v282);
      v244 = 0;
      v166 = 0;
      v255 = 0;
      v252 = 0;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v170 = 0;
      v157 = 0;
      v156 = 0;
      v158 = MEMORY[0x24BEE4AF8];
    }
LABEL_109:
    v148 = 0x80000000;
    goto LABEL_110;
  }
  if (v282 >> 30 == 1)
  {
    v236 = v281[6];
    v149 = (_QWORD *)swift_bridgeObjectRetain();
    DisplayList.init(_:)(v149, (uint64_t)&v271);
    v257 = *(_OWORD *)&v278[8];
    v258 = *(_OWORD *)&v278[24];
    *(_QWORD *)v259 = *(_QWORD *)&v279[40];
    *(_OWORD *)&v259[8] = xmmword_23527E870;
    *(CGFloat *)&v259[24] = v271.origin.x;
    BYTE2(v260) = BYTE2(v271.origin.y);
    LOWORD(v260) = LOWORD(v271.origin.y);
    DWORD1(v260) = *(_DWORD *)&v279[76];
    LOBYTE(v271.origin.x) = v181;
    DisplayList.Item.canonicalize(options:)((char *)&v271);
    v150 = v257;
    v151 = v258;
    v152 = *(_QWORD *)v259;
    v153 = *(_OWORD *)&v259[16];
    v154 = (unsigned __int16)v260 | (BYTE2(v260) << 16);
    v231 = DWORD1(v260);
    v155 = *(_QWORD *)&v259[16] >> 62;
    if (*(_QWORD *)&v259[16] >> 62 != 3
      || (v154 & 0xFFFFFF) != 0
      || *(_QWORD *)&v259[16] != 0xC000000000000000
      || *(_QWORD *)&v259[24] | *(_QWORD *)&v259[8])
    {
      v242 = *(_QWORD *)&v259[8];
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v159 = swift_allocObject();
      *(_OWORD *)(v159 + 16) = xmmword_23527E860;
      *(_OWORD *)(v159 + 32) = v150;
      *(_OWORD *)(v159 + 48) = v151;
      *(_QWORD *)(v159 + 64) = v152;
      *(_QWORD *)(v159 + 72) = v242;
      *(_OWORD *)(v159 + 80) = v153;
      *(_BYTE *)(v159 + 98) = BYTE2(v154);
      *(_WORD *)(v159 + 96) = v154;
      *(_DWORD *)(v159 + 100) = v231;
      __asm { BR              X10 }
    }
    outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v146, v240, v255, v252, v147, v236, v249, v246, v148);
    v156 = 0;
    v157 = 0;
    v158 = MEMORY[0x24BEE4AF8];
    v244 = 0;
    v166 = 0;
    v255 = 0;
    v252 = 0;
    v167 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 0;
    goto LABEL_109;
  }
  v170 = v281[8];
  v244 = v281[1];
  v169 = v281[7];
  v166 = v281[2];
  v168 = v281[6];
  v167 = v281[5];
  v157 = 0;
  v156 = 0;
  v158 = MEMORY[0x24BEE4AF8];
LABEL_110:
  *(_QWORD *)&v257 = v158;
  WORD4(v257) = v157;
  BYTE10(v257) = v156;
  AGGraphSetOutputValue();
  outlined consume of _ShapeStyle_RenderedShape.Shape(v193, v46, v192, v182, v191, v190, v189, v188, v187, v186, v185, v184, v183);
  swift_bridgeObjectRelease();
  v268 = *(_OWORD *)&v279[48];
  v269 = *(_OWORD *)&v279[64];
  v270[0] = *(_OWORD *)v280;
  *(_OWORD *)((char *)v270 + 9) = *(_OWORD *)&v280[9];
  v264 = *(_OWORD *)&v278[32];
  v265 = *(_OWORD *)v279;
  v266 = *(_OWORD *)&v279[16];
  v267 = *(_OWORD *)&v279[32];
  v260 = v276;
  v261 = v277;
  v262 = *(_OWORD *)v278;
  v263 = *(_OWORD *)&v278[16];
  v257 = v272;
  v258 = v273;
  *(_OWORD *)v259 = v274;
  *(_OWORD *)&v259[16] = v275;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v257);
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v244, v166, v255, v252, v167, v168, v169, v170, v148);
  swift_release();
  return swift_release();
}

{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  __int16 v3;
  uint64_t *v4;
  unint64_t v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  unsigned __int8 *Value;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  double v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  _BOOL4 IsNull;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  __int128 v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[80];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[25];
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _OWORD v94[16];
  uint64_t v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;

  v95 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
  Value = (unsigned __int8 *)AGGraphGetValue();
  v12 = *Value;
  v13 = Value[1];
  if ((v14 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v16 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v94[0] = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v94[0]) = v10;
    v15 = AGGraphAnyInputsChanged();
    v16 = ++static DisplayList.Version.lastValue;
    if (!v15)
      goto LABEL_9;
  }
  v17 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
  if (!v16)
    LOWORD(v17) = 0;
  *((_WORD *)v0 + 25) = v17;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_20;
  }
  v59 = v13;
  v60 = v12;
  v18 = *((_DWORD *)v0 + 10);
  v19 = AGCreateWeakAttribute();
  v20 = v19;
  v57 = HIDWORD(v19);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v56 = HIDWORD(v21);
  v58 = v18;
  v23 = AGCreateWeakAttribute();
  v24 = v23;
  v55 = HIDWORD(v23);
  v25 = AGCreateWeakAttribute();
  v26 = v25;
  v54 = HIDWORD(v25);
  v27 = AGCreateWeakAttribute();
  v28 = v27;
  v53 = HIDWORD(v27);
  v29 = AGCreateWeakAttribute();
  v30 = v29;
  v52 = HIDWORD(v29);
  v5 = v16;
  v31 = (double *)AGGraphGetValue();
  v32 = *v31;
  v33 = v31[1];
  v34 = (double *)AGGraphGetValue();
  v35 = v32 - *v34;
  v36 = v33 - v34[1];
  v37 = AGGraphGetValue();
  v38 = *(double *)v37;
  v39 = *(double *)(v37 + 8);
  _threadGeometryProxyData();
  v64 = v20;
  v65 = v57;
  v66 = v22;
  v67 = v56;
  v68 = v24;
  v69 = v55;
  v70 = v26;
  v71 = v54;
  v72 = v28;
  v73 = v53;
  v74 = v30;
  v4 = &v88;
  v75 = v52;
  v76 = v16;
  _setThreadGeometryProxyData();
  v96.origin.x = 0.0;
  v96.origin.y = 0.0;
  v96.size.width = v38;
  v96.size.height = v39;
  IsNull = CGRectIsNull(v96);
  if (IsNull)
    v12 = 0;
  else
    v12 = *(_QWORD *)&v38;
  if (IsNull)
    v13 = 0;
  else
    v13 = *(_QWORD *)&v39;
  if (IsNull)
    v1 = 6;
  else
    v1 = 0;
  _setThreadGeometryProxyData();
  v41 = *v0;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v88 = v41;
  v93 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v12, v13, v1);
  v97.origin.x = 0.0;
  v97.origin.y = 0.0;
  v97.size.width = v38;
  v97.size.height = v39;
  v98 = CGRectOffset(v97, v35, v36);
  x = v98.origin.x;
  y = v98.origin.y;
  width = v98.size.width;
  height = v98.size.height;
  LODWORD(v16) = *((_DWORD *)v0 + 2);
  v3 = *((_WORD *)v0 + 25);
  v2 = *((_BYTE *)v0 + 48);
  if (one-time initialization token for normal != -1)
    goto LABEL_26;
LABEL_20:
  v42 = 0x10000;
  if (!v59)
    v42 = 0;
  v43 = 256;
  if (!v60)
    v43 = 0;
  v77 = 0uLL;
  *(_QWORD *)&v78 = v12;
  *((_QWORD *)&v78 + 1) = v13;
  *(_QWORD *)v79 = v42 | v43 | v1;
  memset(&v79[8], 0, 60);
  *(_WORD *)&v79[68] = v3;
  *(CGFloat *)&v79[72] = x;
  *(CGFloat *)&v80 = y;
  *((CGFloat *)&v80 + 1) = width;
  v81 = *(unint64_t *)&height;
  LODWORD(v82) = 0;
  *((CGFloat *)&v82 + 1) = x;
  *(CGFloat *)&v83 = y;
  *((CGFloat *)&v83 + 1) = width;
  *(CGFloat *)&v84 = height;
  v85 = xmmword_23527E880;
  *((_QWORD *)&v84 + 1) = v5;
  *(_QWORD *)&v86 = 0;
  BYTE10(v86) = 0;
  WORD4(v86) = 0;
  HIDWORD(v86) = v16;
  v87[0] = v2;
  *(_DWORD *)&v87[4] = v58;
  *(_QWORD *)&v87[8] = static GraphicsBlendMode.normal;
  v87[16] = byte_254266040;
  *(_DWORD *)&v87[20] = 1065353216;
  v87[24] = 0;
  LOBYTE(v94[0]) = 0;
  v44 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v94, v44, (uint64_t)&v88);
  LOBYTE(v94[0]) = v2;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v77, (char *)v94, (uint64_t)&v61);
  *(_QWORD *)&v94[0] = v61;
  WORD4(v94[0]) = v62;
  BYTE10(v94[0]) = v63;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v12, v13, v1);
  swift_bridgeObjectRelease();
  v45 = v86;
  *((_OWORD *)v4 + 17) = v85;
  *((_OWORD *)v4 + 18) = v45;
  *((_OWORD *)v4 + 19) = *(_OWORD *)v87;
  *(_OWORD *)((char *)&v94[14] + 9) = *(_OWORD *)&v87[9];
  v94[8] = v81;
  v94[9] = v82;
  v94[10] = v83;
  v94[11] = v84;
  v94[4] = *(_OWORD *)&v79[32];
  v94[5] = *(_OWORD *)&v79[48];
  v94[6] = *(_OWORD *)&v79[64];
  v94[7] = v80;
  v94[0] = v77;
  v94[1] = v78;
  v94[2] = *(_OWORD *)v79;
  v94[3] = *(_OWORD *)&v79[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v94);
  v46 = v89;
  v47 = v90;
  v48 = v91;
  v50 = v92;
  v49 = v93;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  __int128 *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  int v10;
  uint64_t Value;
  CGFloat v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned __int8 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unsigned int v64;
  __int128 v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  __int128 v95;
  __int128 v96;
  _BYTE v97[32];
  __int16 v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  uint64_t v103;
  int v104;
  CGFloat v105;
  CGFloat v106;
  CGFloat v107;
  CGFloat v108;
  unint64_t v109;
  uint64_t v110;
  __int16 v111;
  char v112;
  int v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  int v118;
  char v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;

  v131 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v12 = *(double *)Value;
  v13 = *(unsigned __int8 *)(Value + 8);
  v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    v126 = *(uint64_t *)((char *)v0 + 28);
    v127 = v10;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_20:
    v73 = v19;
    swift_once();
    v19 = v73;
    goto LABEL_14;
  }
  v75 = v14;
  v76 = v13;
  v20 = *((_DWORD *)v0 + 10);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v72 = HIDWORD(v21);
  v23 = AGCreateWeakAttribute();
  v24 = v23;
  v71 = HIDWORD(v23);
  v74 = v20;
  v25 = AGCreateWeakAttribute();
  v26 = v25;
  v70 = HIDWORD(v25);
  v27 = AGCreateWeakAttribute();
  v28 = v27;
  v69 = HIDWORD(v27);
  v29 = AGCreateWeakAttribute();
  v30 = v29;
  v68 = HIDWORD(v29);
  v31 = AGCreateWeakAttribute();
  v32 = v31;
  v67 = HIDWORD(v31);
  v77 = v17;
  v33 = (double *)AGGraphGetValue();
  v34 = *v33;
  v35 = v33[1];
  v36 = (double *)AGGraphGetValue();
  v37 = v34 - *v36;
  v38 = v35 - v36[1];
  v39 = AGGraphGetValue();
  v40 = *(double *)v39;
  v41 = *(double *)(v39 + 8);
  _threadGeometryProxyData();
  v82 = v22;
  v83 = v72;
  v84 = v24;
  v85 = v71;
  v86 = v26;
  v87 = v70;
  v88 = v28;
  v89 = v69;
  v90 = v30;
  v91 = v68;
  v92 = v32;
  v93 = v67;
  v94 = v17;
  _setThreadGeometryProxyData();
  v132.origin.x = 0.0;
  v132.origin.y = 0.0;
  v132.size.width = v40;
  v132.size.height = v41;
  v133 = CGRectInset(v132, v12, v12);
  x = v133.origin.x;
  y = v133.origin.y;
  width = v133.size.width;
  height = v133.size.height;
  if (CGRectIsNull(v133))
  {
    v2 = 0;
    v3 = 0;
    v14 = 0;
    v17 = 0;
    v46 = 6;
  }
  else
  {
    v46 = 0;
    v2 = *(_QWORD *)&x;
    v3 = *(_QWORD *)&y;
    v14 = *(_QWORD *)&width;
    v17 = *(_QWORD *)&height;
  }
  v5 = &v126;
  v6 = &v95;
  _setThreadGeometryProxyData();
  v47 = *v0;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v120 = v47;
  v125 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(v2, v3, v14, v17, v46);
  v134.origin.x = 0.0;
  v134.origin.y = 0.0;
  v134.size.width = v40;
  v134.size.height = v41;
  v135 = CGRectOffset(v134, v37, v38);
  v12 = v135.origin.x;
  v7 = v135.origin.y;
  v8 = v135.size.width;
  v9 = v135.size.height;
  v19 = v46;
  v1 = v17;
  LODWORD(v17) = *((_DWORD *)v0 + 2);
  LOWORD(v13) = *((_WORD *)v0 + 25);
  v4 = *((_BYTE *)v0 + 48);
  if (one-time initialization token for normal != -1)
    goto LABEL_20;
LABEL_14:
  v48 = 0x10000;
  if (!v75)
    v48 = 0;
  v49 = 256;
  if (!v76)
    v49 = 0;
  v50 = static GraphicsBlendMode.normal;
  v51 = byte_254266040;
  v78 = byte_254266040;
  *(_QWORD *)&v95 = v2;
  *((_QWORD *)&v95 + 1) = v3;
  *(_QWORD *)&v96 = v14;
  *((_QWORD *)&v96 + 1) = v1;
  *(_QWORD *)v97 = v48 | v49 | v19;
  *(_OWORD *)&v97[8] = 0u;
  *(__int128 *)((char *)v6 + 56) = 0u;
  *(__int128 *)((char *)v6 + 72) = 0u;
  *(__int128 *)((char *)v6 + 84) = 0u;
  v98 = v13;
  v99 = v12;
  v100 = v7;
  v101 = v8;
  v102 = v9;
  v103 = 0;
  v104 = 0;
  v105 = v12;
  v106 = v7;
  v107 = v8;
  v108 = v9;
  v6[12] = xmmword_23527E880;
  v109 = v77;
  v110 = 0;
  v112 = 0;
  v111 = 0;
  v113 = v17;
  v114 = v4;
  v115 = v74;
  v116 = v50;
  v117 = v78;
  v118 = 1065353216;
  v119 = 0;
  LOBYTE(v126) = 0;
  v52 = *((unsigned int *)v0 + 4);
  v53 = v19;
  outlined copy of GraphicsBlendMode(v50, v51);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v126, v52, (uint64_t)&v120);
  LOBYTE(v126) = v4;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v95, (char *)&v126, (uint64_t)&v79);
  v126 = v79;
  LOWORD(v127) = v80;
  BYTE2(v127) = v81;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(v2, v3, v14, v1, v53);
  swift_bridgeObjectRelease();
  v54 = v6[13];
  v128 = v6[12];
  v129 = v54;
  v130 = v6[14];
  *(_OWORD *)((char *)v5 + 233) = *(__int128 *)((char *)v6 + 233);
  v55 = v6[9];
  *((_OWORD *)v5 + 8) = v6[8];
  *((_OWORD *)v5 + 9) = v55;
  v56 = v6[11];
  *((_OWORD *)v5 + 10) = v6[10];
  *((_OWORD *)v5 + 11) = v56;
  v57 = v6[5];
  *((_OWORD *)v5 + 4) = v6[4];
  *((_OWORD *)v5 + 5) = v57;
  v58 = v6[7];
  *((_OWORD *)v5 + 6) = v6[6];
  *((_OWORD *)v5 + 7) = v58;
  v59 = v96;
  *(_OWORD *)v5 = v95;
  *((_OWORD *)v5 + 1) = v59;
  v60 = *(_OWORD *)&v97[16];
  *((_OWORD *)v5 + 2) = *(_OWORD *)v97;
  *((_OWORD *)v5 + 3) = v60;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v126);
  v61 = v121;
  v62 = v122;
  v63 = v123;
  v65 = v124;
  v64 = v125;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v61, *((uint64_t *)&v61 + 1), v62, *((uint64_t *)&v62 + 1), v63, *((uint64_t *)&v63 + 1), v65, *((uint64_t *)&v65 + 1), v64);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  CGFloat v35;
  CGFloat v36;
  uint64_t v37;
  double v38;
  CGFloat v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unsigned int v48;
  __int128 v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[80];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[25];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  _QWORD v96[4];
  unsigned __int8 v97;
  uint64_t v98;
  CGRect v99;
  CGRect v100;

  v98 = *MEMORY[0x24BDAC8D0];
  v9 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v11 = *(_QWORD *)Value;
  v12 = *(unsigned __int8 *)(Value + 8);
  v13 = *(unsigned __int8 *)(Value + 9);
  if ((v14 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    swift_retain();
    v16 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v81 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v81) = v9;
    swift_retain();
    v15 = AGGraphAnyInputsChanged();
    v16 = ++static DisplayList.Version.lastValue;
    if (!v15)
      goto LABEL_9;
  }
  v17 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
  if (!v16)
    LOWORD(v17) = 0;
  *((_WORD *)v0 + 25) = v17;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v58 = v13;
    v59 = v12;
    v18 = *((_DWORD *)v0 + 10);
    v60 = v16;
    v19 = AGCreateWeakAttribute();
    v20 = v19;
    v56 = HIDWORD(v19);
    v21 = AGCreateWeakAttribute();
    v22 = v21;
    v55 = HIDWORD(v21);
    v57 = v18;
    v23 = AGCreateWeakAttribute();
    v24 = v23;
    v54 = HIDWORD(v23);
    v25 = AGCreateWeakAttribute();
    v26 = v25;
    v53 = HIDWORD(v25);
    v27 = AGCreateWeakAttribute();
    v28 = v27;
    v52 = HIDWORD(v27);
    v29 = AGCreateWeakAttribute();
    v30 = v29;
    v51 = HIDWORD(v29);
    v31 = (double *)AGGraphGetValue();
    v32 = *v31;
    v33 = v31[1];
    v34 = (double *)AGGraphGetValue();
    v35 = v32 - *v34;
    v36 = v33 - v34[1];
    v37 = AGGraphGetValue();
    v38 = *(double *)v37;
    v39 = *(double *)(v37 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v81 = __PAIR64__(v56, v20);
    *((_QWORD *)&v81 + 1) = __PAIR64__(v55, v22);
    *(_QWORD *)&v82 = __PAIR64__(v54, v24);
    *((_QWORD *)&v82 + 1) = __PAIR64__(v53, v26);
    *(_QWORD *)&v83 = __PAIR64__(v52, v28);
    *((_QWORD *)&v83 + 1) = __PAIR64__(v51, v30);
    LODWORD(v84) = v16;
    _setThreadGeometryProxyData();
    v40 = swift_retain();
    specialized Shape.effectivePath(in:)(v40, (uint64_t)v96, v38);
    v12 = v96[0];
    v13 = v96[1];
    v1 = v96[2];
    v2 = v96[3];
    v3 = v97;
    swift_release();
    _setThreadGeometryProxyData();
    v41 = *v0;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v75 = v41;
    v80 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v99.origin.x = 0.0;
    v99.origin.y = 0.0;
    v99.size.width = v38;
    v99.size.height = v39;
    v100 = CGRectOffset(v99, v35, v36);
    x = v100.origin.x;
    y = v100.origin.y;
    width = v100.size.width;
    height = v100.size.height;
    LODWORD(v11) = *((_DWORD *)v0 + 2);
    v4 = *((_WORD *)v0 + 25);
    LOBYTE(v16) = *((_BYTE *)v0 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v42 = 0x10000;
  if (!v58)
    v42 = 0;
  v43 = 256;
  if (!v59)
    v43 = 0;
  *(_QWORD *)&v64 = v12;
  *((_QWORD *)&v64 + 1) = v13;
  *(_QWORD *)&v65 = v1;
  *((_QWORD *)&v65 + 1) = v2;
  *(_QWORD *)v66 = v42 | v43 | v3;
  memset(&v66[8], 0, 60);
  *(_WORD *)&v66[68] = v4;
  *(CGFloat *)&v66[72] = x;
  *(CGFloat *)&v67 = y;
  *((CGFloat *)&v67 + 1) = width;
  v68 = *(unint64_t *)&height;
  LODWORD(v69) = 0;
  *((CGFloat *)&v69 + 1) = x;
  *(CGFloat *)&v70 = y;
  *((CGFloat *)&v70 + 1) = width;
  *(CGFloat *)&v71 = height;
  v72 = xmmword_23527E880;
  *((_QWORD *)&v71 + 1) = v60;
  *(_QWORD *)&v73 = 0;
  BYTE10(v73) = 0;
  WORD4(v73) = 0;
  HIDWORD(v73) = v11;
  v74[0] = v16;
  *(_DWORD *)&v74[4] = v57;
  *(_QWORD *)&v74[8] = static GraphicsBlendMode.normal;
  v74[16] = byte_254266040;
  *(_DWORD *)&v74[20] = 1065353216;
  v74[24] = 0;
  LOBYTE(v81) = 0;
  v44 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v81, v44, (uint64_t)&v75);
  LOBYTE(v81) = v16;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v64, (char *)&v81, (uint64_t)&v61);
  *(_QWORD *)&v81 = v61;
  WORD4(v81) = v62;
  BYTE10(v81) = v63;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v93 = v72;
  v94 = v73;
  v95[0] = *(_OWORD *)v74;
  *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)&v74[9];
  v89 = v68;
  v90 = v69;
  v91 = v70;
  v92 = v71;
  v85 = *(_OWORD *)&v66[32];
  v86 = *(_OWORD *)&v66[48];
  v87 = *(_OWORD *)&v66[64];
  v88 = v67;
  v81 = v64;
  v82 = v65;
  v83 = *(_OWORD *)v66;
  v84 = *(_OWORD *)&v66[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v81);
  v45 = v76;
  v46 = v77;
  v47 = v78;
  v49 = v79;
  v48 = v80;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v49, *((uint64_t *)&v49 + 1), v48);
  return swift_release();
}

{
  uint64_t *v0;
  unsigned int v1;
  char v2;
  uint64_t *v3;
  __int128 *v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v11;
  unsigned __int8 *Value;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[32];
  __int16 v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  uint64_t v95;
  int v96;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  CGFloat v100;
  unint64_t v101;
  uint64_t v102;
  __int16 v103;
  char v104;
  int v105;
  char v106;
  int v107;
  uint64_t v108;
  char v109;
  int v110;
  char v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;

  v120 = *MEMORY[0x24BDAC8D0];
  v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
  Value = (unsigned __int8 *)AGGraphGetValue();
  v13 = *Value;
  v14 = Value[1];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    v118 = *(uint64_t *)((char *)v0 + 28);
    v119 = v11;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_14;
  }
  v67 = v14;
  v68 = v13;
  v19 = *((_DWORD *)v0 + 10);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v65 = HIDWORD(v20);
  v22 = AGCreateWeakAttribute();
  v23 = v22;
  v64 = HIDWORD(v22);
  v66 = v19;
  v24 = AGCreateWeakAttribute();
  v25 = v24;
  v63 = HIDWORD(v24);
  v26 = AGCreateWeakAttribute();
  v27 = v26;
  v62 = HIDWORD(v26);
  v28 = AGCreateWeakAttribute();
  v29 = v28;
  v61 = HIDWORD(v28);
  v30 = AGCreateWeakAttribute();
  v31 = v30;
  v60 = HIDWORD(v30);
  v69 = v17;
  v32 = (double *)AGGraphGetValue();
  v33 = *v32;
  v34 = v32[1];
  v35 = (double *)AGGraphGetValue();
  v36 = v33 - *v35;
  v37 = v34 - v35[1];
  v38 = AGGraphGetValue();
  v39 = *(double *)v38;
  v40 = *(double *)(v38 + 8);
  _threadGeometryProxyData();
  v74 = v21;
  v75 = v65;
  v76 = v23;
  v77 = v64;
  v78 = v25;
  v79 = v63;
  v80 = v27;
  v81 = v62;
  v82 = v29;
  v83 = v61;
  v84 = v31;
  v85 = v60;
  v86 = v17;
  _setThreadGeometryProxyData();
  v121.origin.x = 0.0;
  v121.origin.y = 0.0;
  v121.size.width = v39;
  v121.size.height = v40;
  if (CGRectIsNull(v121))
  {
    v13 = 0;
    v14 = 0;
    v1 = 6;
  }
  else
  {
    v122.origin.x = 0.0;
    v122.origin.y = 0.0;
    v122.size.width = v39;
    v122.size.height = v40;
    v13 = *(_QWORD *)&v39;
    v14 = *(_QWORD *)&v40;
    v1 = !CGRectIsInfinite(v122);
  }
  v3 = &v118;
  v4 = &v87;
  _setThreadGeometryProxyData();
  v41 = *v0;
  v6 = &v112;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v112 = v41;
  v117 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v13, v14, v1);
  v123.origin.x = 0.0;
  v123.origin.y = 0.0;
  v123.size.width = v39;
  v123.size.height = v40;
  v124 = CGRectOffset(v123, v36, v37);
  x = v124.origin.x;
  y = v124.origin.y;
  width = v124.size.width;
  height = v124.size.height;
  LODWORD(v17) = *((_DWORD *)v0 + 2);
  v5 = *((_WORD *)v0 + 25);
  v2 = *((_BYTE *)v0 + 48);
  if (one-time initialization token for normal != -1)
    goto LABEL_20;
LABEL_14:
  v42 = 0x10000;
  if (!v67)
    v42 = 0;
  v43 = 256;
  if (!v68)
    v43 = 0;
  v44 = static GraphicsBlendMode.normal;
  v45 = byte_254266040;
  v70 = byte_254266040;
  v87 = 0uLL;
  *(_QWORD *)&v88 = v13;
  *((_QWORD *)&v88 + 1) = v14;
  *(_QWORD *)v89 = v42 | v43 | v1;
  *(_OWORD *)&v89[8] = 0u;
  *(__int128 *)((char *)v4 + 56) = 0u;
  *(__int128 *)((char *)v4 + 72) = 0u;
  *(__int128 *)((char *)v4 + 84) = 0u;
  v90 = v5;
  v91 = x;
  v92 = y;
  v93 = width;
  v94 = height;
  v95 = 0;
  v96 = 0;
  v97 = x;
  v98 = y;
  v99 = width;
  v100 = height;
  v4[12] = xmmword_23527E880;
  v101 = v69;
  v102 = 0;
  v104 = 0;
  v103 = 0;
  v105 = v17;
  v106 = v2;
  v107 = v66;
  v108 = v44;
  v109 = v70;
  v110 = 1065353216;
  v111 = 0;
  LOBYTE(v118) = 0;
  v46 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(v44, v45);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v118, v46, (uint64_t)&v112);
  LOBYTE(v118) = v2;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v87, (char *)&v118, (uint64_t)&v71);
  v118 = v71;
  LOWORD(v119) = v72;
  BYTE2(v119) = v73;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v13, v14, v1);
  swift_bridgeObjectRelease();
  v47 = v4[13];
  *((_OWORD *)v6 + 17) = v4[12];
  *((_OWORD *)v6 + 18) = v47;
  *((_OWORD *)v6 + 19) = v4[14];
  *(_OWORD *)((char *)v3 + 233) = *(__int128 *)((char *)v4 + 233);
  v48 = v4[9];
  *((_OWORD *)v3 + 8) = v4[8];
  *((_OWORD *)v3 + 9) = v48;
  v49 = v4[11];
  *((_OWORD *)v3 + 10) = v4[10];
  *((_OWORD *)v3 + 11) = v49;
  v50 = v4[5];
  *((_OWORD *)v3 + 4) = v4[4];
  *((_OWORD *)v3 + 5) = v50;
  v51 = v4[7];
  *((_OWORD *)v3 + 6) = v4[6];
  *((_OWORD *)v3 + 7) = v51;
  v52 = v88;
  *(_OWORD *)v3 = v87;
  *((_OWORD *)v3 + 1) = v52;
  v53 = *(_OWORD *)&v89[16];
  *((_OWORD *)v3 + 2) = *(_OWORD *)v89;
  *((_OWORD *)v3 + 3) = v53;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v118);
  v54 = v113;
  v55 = v114;
  v56 = v115;
  v58 = v116;
  v57 = v117;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v54, *((uint64_t *)&v54 + 1), v55, *((uint64_t *)&v55 + 1), v56, *((uint64_t *)&v56 + 1), v58, *((uint64_t *)&v58 + 1), v57);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  __int128 *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  int v10;
  uint64_t Value;
  CGFloat v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned __int8 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unsigned int v64;
  __int128 v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  __int128 v95;
  __int128 v96;
  _BYTE v97[32];
  __int16 v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  uint64_t v103;
  int v104;
  CGFloat v105;
  CGFloat v106;
  CGFloat v107;
  CGFloat v108;
  unint64_t v109;
  uint64_t v110;
  __int16 v111;
  char v112;
  int v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  int v118;
  char v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;

  v131 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v12 = *(double *)Value;
  v13 = *(unsigned __int8 *)(Value + 8);
  v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    v126 = *(uint64_t *)((char *)v0 + 28);
    v127 = v10;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_20:
    v73 = v19;
    swift_once();
    v19 = v73;
    goto LABEL_14;
  }
  v75 = v14;
  v76 = v13;
  v20 = *((_DWORD *)v0 + 10);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v72 = HIDWORD(v21);
  v23 = AGCreateWeakAttribute();
  v24 = v23;
  v71 = HIDWORD(v23);
  v74 = v20;
  v25 = AGCreateWeakAttribute();
  v26 = v25;
  v70 = HIDWORD(v25);
  v27 = AGCreateWeakAttribute();
  v28 = v27;
  v69 = HIDWORD(v27);
  v29 = AGCreateWeakAttribute();
  v30 = v29;
  v68 = HIDWORD(v29);
  v31 = AGCreateWeakAttribute();
  v32 = v31;
  v67 = HIDWORD(v31);
  v77 = v17;
  v33 = (double *)AGGraphGetValue();
  v34 = *v33;
  v35 = v33[1];
  v36 = (double *)AGGraphGetValue();
  v37 = v34 - *v36;
  v38 = v35 - v36[1];
  v39 = AGGraphGetValue();
  v40 = *(double *)v39;
  v41 = *(double *)(v39 + 8);
  _threadGeometryProxyData();
  v82 = v22;
  v83 = v72;
  v84 = v24;
  v85 = v71;
  v86 = v26;
  v87 = v70;
  v88 = v28;
  v89 = v69;
  v90 = v30;
  v91 = v68;
  v92 = v32;
  v93 = v67;
  v94 = v17;
  _setThreadGeometryProxyData();
  v132.origin.x = 0.0;
  v132.origin.y = 0.0;
  v132.size.width = v40;
  v132.size.height = v41;
  v133 = CGRectInset(v132, v12, v12);
  x = v133.origin.x;
  y = v133.origin.y;
  width = v133.size.width;
  height = v133.size.height;
  if (CGRectIsNull(v133))
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v14 = 0;
    v46 = 6;
  }
  else
  {
    v134.origin.x = x;
    v134.origin.y = y;
    v134.size.width = width;
    v134.size.height = height;
    v1 = *(_QWORD *)&x;
    v2 = *(_QWORD *)&y;
    v3 = *(_QWORD *)&width;
    v14 = *(_QWORD *)&height;
    v46 = !CGRectIsInfinite(v134);
  }
  v5 = &v126;
  v6 = &v95;
  _setThreadGeometryProxyData();
  v47 = *v0;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v120 = v47;
  v125 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(v1, v2, v3, v14, v46);
  v135.origin.x = 0.0;
  v135.origin.y = 0.0;
  v135.size.width = v40;
  v135.size.height = v41;
  v136 = CGRectOffset(v135, v37, v38);
  v12 = v136.origin.x;
  v7 = v136.origin.y;
  v8 = v136.size.width;
  v9 = v136.size.height;
  v19 = v46;
  LODWORD(v17) = *((_DWORD *)v0 + 2);
  LOWORD(v13) = *((_WORD *)v0 + 25);
  v4 = *((_BYTE *)v0 + 48);
  if (one-time initialization token for normal != -1)
    goto LABEL_20;
LABEL_14:
  v48 = 0x10000;
  if (!v75)
    v48 = 0;
  v49 = 256;
  if (!v76)
    v49 = 0;
  v50 = static GraphicsBlendMode.normal;
  v51 = byte_254266040;
  v78 = byte_254266040;
  *(_QWORD *)&v95 = v1;
  *((_QWORD *)&v95 + 1) = v2;
  *(_QWORD *)&v96 = v3;
  *((_QWORD *)&v96 + 1) = v14;
  *(_QWORD *)v97 = v48 | v49 | v19;
  *(_OWORD *)&v97[8] = 0u;
  *(__int128 *)((char *)v6 + 56) = 0u;
  *(__int128 *)((char *)v6 + 72) = 0u;
  *(__int128 *)((char *)v6 + 84) = 0u;
  v98 = v13;
  v99 = v12;
  v100 = v7;
  v101 = v8;
  v102 = v9;
  v103 = 0;
  v104 = 0;
  v105 = v12;
  v106 = v7;
  v107 = v8;
  v108 = v9;
  v6[12] = xmmword_23527E880;
  v109 = v77;
  v110 = 0;
  v112 = 0;
  v111 = 0;
  v113 = v17;
  v114 = v4;
  v115 = v74;
  v116 = v50;
  v117 = v78;
  v118 = 1065353216;
  v119 = 0;
  LOBYTE(v126) = 0;
  v52 = *((unsigned int *)v0 + 4);
  v53 = v19;
  outlined copy of GraphicsBlendMode(v50, v51);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v126, v52, (uint64_t)&v120);
  LOBYTE(v126) = v4;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v95, (char *)&v126, (uint64_t)&v79);
  v126 = v79;
  LOWORD(v127) = v80;
  BYTE2(v127) = v81;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(v1, v2, v3, v14, v53);
  swift_bridgeObjectRelease();
  v54 = v6[13];
  v128 = v6[12];
  v129 = v54;
  v130 = v6[14];
  *(_OWORD *)((char *)v5 + 233) = *(__int128 *)((char *)v6 + 233);
  v55 = v6[9];
  *((_OWORD *)v5 + 8) = v6[8];
  *((_OWORD *)v5 + 9) = v55;
  v56 = v6[11];
  *((_OWORD *)v5 + 10) = v6[10];
  *((_OWORD *)v5 + 11) = v56;
  v57 = v6[5];
  *((_OWORD *)v5 + 4) = v6[4];
  *((_OWORD *)v5 + 5) = v57;
  v58 = v6[7];
  *((_OWORD *)v5 + 6) = v6[6];
  *((_OWORD *)v5 + 7) = v58;
  v59 = v96;
  *(_OWORD *)v5 = v95;
  *((_OWORD *)v5 + 1) = v59;
  v60 = *(_OWORD *)&v97[16];
  *((_OWORD *)v5 + 2) = *(_OWORD *)v97;
  *((_OWORD *)v5 + 3) = v60;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v126);
  v61 = v121;
  v62 = v122;
  v63 = v123;
  v65 = v124;
  v64 = v125;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v61, *((uint64_t *)&v61 + 1), v62, *((uint64_t *)&v62 + 1), v63, *((uint64_t *)&v63 + 1), v65, *((uint64_t *)&v65 + 1), v64);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t *v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  unsigned __int8 *Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  __int128 v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[80];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[25];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _QWORD v96[4];
  unsigned __int8 v97;
  uint64_t v98;
  CGRect v99;
  CGRect v100;

  v98 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  Value = (unsigned __int8 *)AGGraphGetValue();
  v12 = *Value;
  v13 = Value[1];
  v14 = Value[2];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v83 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v83) = v10;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v61 = v14;
    v62 = v13;
    v19 = *((_DWORD *)v0 + 10);
    v56 = AGCreateWeakAttribute();
    v20 = AGCreateWeakAttribute();
    v58 = v12;
    v21 = v20;
    v57 = HIDWORD(v20);
    v60 = v19;
    v22 = AGCreateWeakAttribute();
    v23 = v22;
    v55 = HIDWORD(v22);
    v24 = AGCreateWeakAttribute();
    v25 = v24;
    v54 = HIDWORD(v24);
    v26 = AGCreateWeakAttribute();
    v27 = v26;
    v53 = HIDWORD(v26);
    v28 = AGCreateWeakAttribute();
    v29 = v28;
    v52 = HIDWORD(v28);
    v30 = (double *)AGGraphGetValue();
    v31 = *v30;
    v32 = v30[1];
    v33 = (double *)AGGraphGetValue();
    v34 = v31 - *v33;
    v35 = v32 - v33[1];
    v36 = AGGraphGetValue();
    v37 = *(double *)v36;
    v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v83 = v56;
    *((_QWORD *)&v83 + 1) = __PAIR64__(v57, v21);
    *(_QWORD *)&v84 = __PAIR64__(v55, v23);
    *((_QWORD *)&v84 + 1) = __PAIR64__(v54, v25);
    *(_QWORD *)&v85 = __PAIR64__(v53, v27);
    *((_QWORD *)&v85 + 1) = __PAIR64__(v52, v29);
    v5 = &v77;
    v59 = v17;
    LODWORD(v86) = v17;
    _setThreadGeometryProxyData();
    specialized Shape.effectivePath(in:)(v58, (uint64_t)v96, 0.0, 0.0, v37, v38);
    v14 = v96[0];
    v12 = v96[1];
    v1 = v96[2];
    v2 = v96[3];
    v3 = v97;
    _setThreadGeometryProxyData();
    v39 = *v0;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v77 = v39;
    v82 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v99.origin.x = 0.0;
    v99.origin.y = 0.0;
    v99.size.width = v37;
    v99.size.height = v38;
    v100 = CGRectOffset(v99, v34, v35);
    x = v100.origin.x;
    y = v100.origin.y;
    width = v100.size.width;
    height = v100.size.height;
    LODWORD(v17) = *((_DWORD *)v0 + 2);
    v4 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((_BYTE *)v0 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v40 = 0x10000;
  if (!v61)
    v40 = 0;
  v41 = 256;
  if (!v62)
    v41 = 0;
  *(_QWORD *)&v66 = v14;
  *((_QWORD *)&v66 + 1) = v12;
  *(_QWORD *)&v67 = v1;
  *((_QWORD *)&v67 + 1) = v2;
  *(_QWORD *)v68 = v40 | v41 | v3;
  memset(&v68[8], 0, 60);
  *(_WORD *)&v68[68] = v4;
  *(CGFloat *)&v68[72] = x;
  *(CGFloat *)&v69 = y;
  *((CGFloat *)&v69 + 1) = width;
  v70 = *(unint64_t *)&height;
  LODWORD(v71) = 0;
  *((CGFloat *)&v71 + 1) = x;
  *(CGFloat *)&v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  *(CGFloat *)&v73 = height;
  v74 = xmmword_23527E880;
  *((_QWORD *)&v73 + 1) = v59;
  *(_QWORD *)&v75 = 0;
  BYTE10(v75) = 0;
  WORD4(v75) = 0;
  HIDWORD(v75) = v17;
  v76[0] = v13;
  *(_DWORD *)&v76[4] = v60;
  *(_QWORD *)&v76[8] = static GraphicsBlendMode.normal;
  v76[16] = byte_254266040;
  *(_DWORD *)&v76[20] = 1065353216;
  v76[24] = 0;
  LOBYTE(v83) = 0;
  v42 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v83, v42, (uint64_t)&v77);
  LOBYTE(v83) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v66, (char *)&v83, (uint64_t)&v63);
  *(_QWORD *)&v83 = v63;
  WORD4(v83) = v64;
  BYTE10(v83) = v65;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v43 = v75;
  v44 = *(_OWORD *)v76;
  v45 = v73;
  *((_OWORD *)v5 + 17) = v74;
  *((_OWORD *)v5 + 18) = v43;
  *((_OWORD *)v5 + 19) = v44;
  v95 = *(_OWORD *)&v76[9];
  v91 = v70;
  v92 = v71;
  v93 = v72;
  v94 = v45;
  v87 = *(_OWORD *)&v68[32];
  v88 = *(_OWORD *)&v68[48];
  v89 = *(_OWORD *)&v68[64];
  v90 = v69;
  v83 = v66;
  v84 = v67;
  v85 = *(_OWORD *)v68;
  v86 = *(_OWORD *)&v68[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v83);
  v46 = v78;
  v47 = v79;
  v48 = v80;
  v50 = v81;
  v49 = v82;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v11;
  unsigned __int8 *Value;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  __int128 v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[80];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[25];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[4];
  unsigned __int8 v96;
  uint64_t v97;
  CGRect v98;
  CGRect v99;

  v97 = *MEMORY[0x24BDAC8D0];
  v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
  Value = (unsigned __int8 *)AGGraphGetValue();
  v13 = *Value;
  v14 = Value[1];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v82 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v82) = v11;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v60 = v14;
    v61 = v13;
    v19 = *((_DWORD *)v0 + 10);
    v56 = AGCreateWeakAttribute();
    v20 = AGCreateWeakAttribute();
    v21 = v20;
    v57 = HIDWORD(v20);
    v59 = v19;
    v22 = AGCreateWeakAttribute();
    v23 = v22;
    v55 = HIDWORD(v22);
    v24 = AGCreateWeakAttribute();
    v25 = v24;
    v54 = HIDWORD(v24);
    v26 = AGCreateWeakAttribute();
    v27 = v26;
    v53 = HIDWORD(v26);
    v28 = AGCreateWeakAttribute();
    v29 = v28;
    v52 = HIDWORD(v28);
    v6 = &v76;
    v30 = (double *)AGGraphGetValue();
    v31 = *v30;
    v32 = v30[1];
    v33 = (double *)AGGraphGetValue();
    v34 = v31 - *v33;
    v35 = v32 - v33[1];
    v36 = AGGraphGetValue();
    v37 = *(double *)v36;
    v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v82 = v56;
    *((_QWORD *)&v82 + 1) = __PAIR64__(v57, v21);
    *(_QWORD *)&v83 = __PAIR64__(v55, v23);
    *((_QWORD *)&v83 + 1) = __PAIR64__(v54, v25);
    *(_QWORD *)&v84 = __PAIR64__(v53, v27);
    *((_QWORD *)&v84 + 1) = __PAIR64__(v52, v29);
    v58 = v17;
    LODWORD(v85) = v17;
    _setThreadGeometryProxyData();
    specialized Circle.path(in:)((uint64_t)v95, 0.0, 0.0, v37, v38);
    v14 = v95[0];
    v1 = v95[1];
    v2 = v95[2];
    v3 = v95[3];
    v4 = v96;
    _setThreadGeometryProxyData();
    v39 = *v0;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v76 = v39;
    v81 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v98.origin.x = 0.0;
    v98.origin.y = 0.0;
    v98.size.width = v37;
    v98.size.height = v38;
    v99 = CGRectOffset(v98, v34, v35);
    x = v99.origin.x;
    y = v99.origin.y;
    width = v99.size.width;
    height = v99.size.height;
    LODWORD(v17) = *((_DWORD *)v0 + 2);
    v5 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((_BYTE *)v0 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v40 = 0x10000;
  if (!v60)
    v40 = 0;
  v41 = 256;
  if (!v61)
    v41 = 0;
  *(_QWORD *)&v65 = v14;
  *((_QWORD *)&v65 + 1) = v1;
  *(_QWORD *)&v66 = v2;
  *((_QWORD *)&v66 + 1) = v3;
  *(_QWORD *)v67 = v40 | v41 | v4;
  memset(&v67[8], 0, 60);
  *(_WORD *)&v67[68] = v5;
  *(CGFloat *)&v67[72] = x;
  *(CGFloat *)&v68 = y;
  *((CGFloat *)&v68 + 1) = width;
  v69 = *(unint64_t *)&height;
  LODWORD(v70) = 0;
  *((CGFloat *)&v70 + 1) = x;
  *(CGFloat *)&v71 = y;
  *((CGFloat *)&v71 + 1) = width;
  *(CGFloat *)&v72 = height;
  v73 = xmmword_23527E880;
  *((_QWORD *)&v72 + 1) = v58;
  *(_QWORD *)&v74 = 0;
  BYTE10(v74) = 0;
  WORD4(v74) = 0;
  HIDWORD(v74) = v17;
  v75[0] = v13;
  *(_DWORD *)&v75[4] = v59;
  *(_QWORD *)&v75[8] = static GraphicsBlendMode.normal;
  v75[16] = byte_254266040;
  *(_DWORD *)&v75[20] = 1065353216;
  v75[24] = 0;
  LOBYTE(v82) = 0;
  v42 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v82, v42, (uint64_t)&v76);
  LOBYTE(v82) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v65, (char *)&v82, (uint64_t)&v62);
  *(_QWORD *)&v82 = v62;
  WORD4(v82) = v63;
  BYTE10(v82) = v64;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v43 = v74;
  v44 = *(_OWORD *)v75;
  v45 = v72;
  *((_OWORD *)v6 + 17) = v73;
  *((_OWORD *)v6 + 18) = v43;
  *((_OWORD *)v6 + 19) = v44;
  v94 = *(_OWORD *)&v75[9];
  v90 = v69;
  v91 = v70;
  v92 = v71;
  v93 = v45;
  v86 = *(_OWORD *)&v67[32];
  v87 = *(_OWORD *)&v67[48];
  v88 = *(_OWORD *)&v67[64];
  v89 = v68;
  v82 = v65;
  v83 = v66;
  v84 = *(_OWORD *)v67;
  v85 = *(_OWORD *)&v67[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v82);
  v46 = v77;
  v47 = v78;
  v48 = v79;
  v50 = v80;
  v49 = v81;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  uint64_t Value;
  CGFloat x;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  __int128 v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[80];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[25];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[4];
  unsigned __int8 v96;
  uint64_t v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;

  v97 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  x = *(double *)Value;
  v13 = *(unsigned __int8 *)(Value + 8);
  v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v82 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v82) = v10;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v60 = v14;
    v61 = v13;
    v19 = *((_DWORD *)v0 + 10);
    v56 = AGCreateWeakAttribute();
    v20 = AGCreateWeakAttribute();
    v21 = v20;
    v57 = HIDWORD(v20);
    v59 = v19;
    v22 = AGCreateWeakAttribute();
    v23 = v22;
    v55 = HIDWORD(v22);
    v24 = AGCreateWeakAttribute();
    v25 = v24;
    v54 = HIDWORD(v24);
    v26 = AGCreateWeakAttribute();
    v27 = v26;
    v53 = HIDWORD(v26);
    v28 = AGCreateWeakAttribute();
    v29 = v28;
    v52 = HIDWORD(v28);
    v6 = &v76;
    v30 = (double *)AGGraphGetValue();
    v31 = *v30;
    v32 = v30[1];
    v33 = (double *)AGGraphGetValue();
    v34 = v31 - *v33;
    v35 = v32 - v33[1];
    v36 = AGGraphGetValue();
    v37 = *(double *)v36;
    v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v82 = v56;
    *((_QWORD *)&v82 + 1) = __PAIR64__(v57, v21);
    *(_QWORD *)&v83 = __PAIR64__(v55, v23);
    *((_QWORD *)&v83 + 1) = __PAIR64__(v54, v25);
    *(_QWORD *)&v84 = __PAIR64__(v53, v27);
    *((_QWORD *)&v84 + 1) = __PAIR64__(v52, v29);
    v58 = v17;
    LODWORD(v85) = v17;
    _setThreadGeometryProxyData();
    v98.origin.x = 0.0;
    v98.origin.y = 0.0;
    v98.size.width = v37;
    v98.size.height = v38;
    v99 = CGRectInset(v98, x, x);
    specialized Circle.path(in:)((uint64_t)v95, v99.origin.x, v99.origin.y, v99.size.width, v99.size.height);
    v17 = v95[0];
    v14 = v95[1];
    v1 = v95[2];
    v2 = v95[3];
    v4 = v96;
    _setThreadGeometryProxyData();
    v39 = *v0;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v76 = v39;
    v81 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v100.origin.x = 0.0;
    v100.origin.y = 0.0;
    v100.size.width = v37;
    v100.size.height = v38;
    v101 = CGRectOffset(v100, v34, v35);
    x = v101.origin.x;
    y = v101.origin.y;
    width = v101.size.width;
    height = v101.size.height;
    v3 = *((_DWORD *)v0 + 2);
    v5 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((_BYTE *)v0 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v40 = 0x10000;
  if (!v60)
    v40 = 0;
  v41 = 256;
  if (!v61)
    v41 = 0;
  *(_QWORD *)&v65 = v17;
  *((_QWORD *)&v65 + 1) = v14;
  *(_QWORD *)&v66 = v1;
  *((_QWORD *)&v66 + 1) = v2;
  *(_QWORD *)v67 = v40 | v41 | v4;
  memset(&v67[8], 0, 60);
  *(_WORD *)&v67[68] = v5;
  *(CGFloat *)&v67[72] = x;
  *(CGFloat *)&v68 = y;
  *((CGFloat *)&v68 + 1) = width;
  v69 = *(unint64_t *)&height;
  LODWORD(v70) = 0;
  *((CGFloat *)&v70 + 1) = x;
  *(CGFloat *)&v71 = y;
  *((CGFloat *)&v71 + 1) = width;
  *(CGFloat *)&v72 = height;
  v73 = xmmword_23527E880;
  *((_QWORD *)&v72 + 1) = v58;
  *(_QWORD *)&v74 = 0;
  BYTE10(v74) = 0;
  WORD4(v74) = 0;
  HIDWORD(v74) = v3;
  v75[0] = v13;
  *(_DWORD *)&v75[4] = v59;
  *(_QWORD *)&v75[8] = static GraphicsBlendMode.normal;
  v75[16] = byte_254266040;
  *(_DWORD *)&v75[20] = 1065353216;
  v75[24] = 0;
  LOBYTE(v82) = 0;
  v42 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v82, v42, (uint64_t)&v76);
  LOBYTE(v82) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v65, (char *)&v82, (uint64_t)&v62);
  *(_QWORD *)&v82 = v62;
  WORD4(v82) = v63;
  BYTE10(v82) = v64;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v43 = v74;
  v44 = *(_OWORD *)v75;
  v45 = v72;
  *((_OWORD *)v6 + 17) = v73;
  *((_OWORD *)v6 + 18) = v43;
  *((_OWORD *)v6 + 19) = v44;
  v94 = *(_OWORD *)&v75[9];
  v90 = v69;
  v91 = v70;
  v92 = v71;
  v93 = v45;
  v86 = *(_OWORD *)&v67[32];
  v87 = *(_OWORD *)&v67[48];
  v88 = *(_OWORD *)&v67[64];
  v89 = v68;
  v82 = v65;
  v83 = v66;
  v84 = *(_OWORD *)v67;
  v85 = *(_OWORD *)&v67[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v82);
  v46 = v77;
  v47 = v78;
  v48 = v79;
  v50 = v80;
  v49 = v81;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v6;
  int v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  CGFloat v35;
  CGFloat v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unsigned int v48;
  __int128 v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned __int8 v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  char v71;
  __int16 v72;
  char v73;
  __int16 v74;
  char v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[80];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[25];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  _QWORD v108[4];
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  CGRect v116;
  CGRect v117;

  v6 = v0;
  v115 = *MEMORY[0x24BDAC8D0];
  v7 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  Value = AGGraphGetValue();
  v10 = *(_QWORD *)Value;
  v9 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v12 = *(_QWORD *)(Value + 24);
  v13 = *(_BYTE *)(Value + 32);
  v14 = *(unsigned __int8 *)(Value + 33);
  v15 = *(unsigned __int8 *)(Value + 34);
  if ((v16 & 1) != 0 || !*((_WORD *)v6 + 25))
  {
    outlined copy of Path.Storage(*(_QWORD *)Value, v9, v11, v12, v13);
    v18 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v93 = *(uint64_t *)((char *)v6 + 28);
    DWORD2(v93) = v7;
    outlined copy of Path.Storage(v10, v9, v11, v12, v13);
    v17 = AGGraphAnyInputsChanged();
    v18 = ++static DisplayList.Version.lastValue;
    if (!v17)
      goto LABEL_9;
  }
  v19 = (2 * ((33 * (v18 >> 16)) ^ v18)) | 1;
  if (!v18)
    LOWORD(v19) = 0;
  *((_WORD *)v6 + 25) = v19;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v60 = v15;
    v61 = v14;
    v64 = v18;
    v20 = *((_DWORD *)v6 + 10);
    v66 = v11;
    v67 = v12;
    v21 = AGCreateWeakAttribute();
    v65 = v9;
    v56 = v21;
    v63 = HIDWORD(v21);
    v22 = AGCreateWeakAttribute();
    v68 = v10;
    v23 = v22;
    v58 = HIDWORD(v22);
    v59 = v20;
    v24 = AGCreateWeakAttribute();
    v25 = v24;
    v54 = HIDWORD(v24);
    v26 = AGCreateWeakAttribute();
    v27 = v26;
    v53 = HIDWORD(v26);
    v28 = AGCreateWeakAttribute();
    LODWORD(v10) = v28;
    v52 = HIDWORD(v28);
    v29 = AGCreateWeakAttribute();
    v30 = v29;
    v51 = HIDWORD(v29);
    v31 = (double *)AGGraphGetValue();
    v32 = *v31;
    v33 = v31[1];
    v34 = (double *)AGGraphGetValue();
    v35 = v32 - *v34;
    v36 = v33 - v34[1];
    v37 = AGGraphGetValue();
    v38 = *(double *)v37;
    v39 = *(double *)(v37 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v93 = __PAIR64__(v63, v56);
    *((_QWORD *)&v93 + 1) = __PAIR64__(v58, v23);
    *(_QWORD *)&v94 = __PAIR64__(v54, v25);
    *((_QWORD *)&v94 + 1) = __PAIR64__(v53, v27);
    *(_QWORD *)&v95 = __PAIR64__(v52, v10);
    *((_QWORD *)&v95 + 1) = __PAIR64__(v51, v30);
    LODWORD(v96) = v64;
    _setThreadGeometryProxyData();
    v40 = v9;
    v110 = v68;
    v111 = v9;
    v112 = v66;
    v113 = v12;
    v114 = v13;
    outlined copy of Path.Storage(v68, v9, v66, v12, v13);
    specialized Shape.effectivePath(in:)((uint64_t)v108, *(unint64_t *)&v38);
    v9 = v108[0];
    v1 = v108[3];
    v55 = v108[2];
    v57 = v108[1];
    v14 = v109;
    v62 = v13;
    outlined consume of Path.Storage(v68, v40, v66, v12, v13);
    _setThreadGeometryProxyData();
    v41 = *v6;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v87 = v41;
    v92 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v116.origin.x = 0.0;
    v116.origin.y = 0.0;
    v116.size.width = v38;
    v116.size.height = v39;
    v117 = CGRectOffset(v116, v35, v36);
    x = v117.origin.x;
    y = v117.origin.y;
    width = v117.size.width;
    height = v117.size.height;
    LODWORD(v18) = *((_DWORD *)v6 + 2);
    LOWORD(v15) = *((_WORD *)v6 + 25);
    LOBYTE(v10) = *((_BYTE *)v6 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v42 = 0x10000;
  if (!v60)
    v42 = 0;
  v43 = 256;
  if (!v61)
    v43 = 0;
  *(_QWORD *)&v76 = v9;
  *((_QWORD *)&v76 + 1) = v57;
  *(_QWORD *)&v77 = v55;
  *((_QWORD *)&v77 + 1) = v1;
  *(_QWORD *)v78 = v42 | v43 | v14;
  memset(&v78[8], 0, 60);
  *(_WORD *)&v78[68] = v15;
  *(CGFloat *)&v78[72] = x;
  *(CGFloat *)&v79 = y;
  *((CGFloat *)&v79 + 1) = width;
  v80 = *(unint64_t *)&height;
  LODWORD(v81) = 0;
  *((CGFloat *)&v81 + 1) = x;
  *(CGFloat *)&v82 = y;
  *((CGFloat *)&v82 + 1) = width;
  *(CGFloat *)&v83 = height;
  *((_QWORD *)&v83 + 1) = v64;
  v84 = xmmword_23527E880;
  *(_QWORD *)&v85 = 0;
  BYTE10(v85) = 0;
  WORD4(v85) = 0;
  HIDWORD(v85) = v18;
  v86[0] = v10;
  *(_WORD *)&v86[1] = v74;
  v86[3] = v75;
  *(_DWORD *)&v86[4] = v59;
  *(_QWORD *)&v86[8] = static GraphicsBlendMode.normal;
  v86[16] = byte_254266040;
  *(_WORD *)&v86[17] = v72;
  v86[19] = v73;
  *(_DWORD *)&v86[20] = 1065353216;
  v86[24] = 0;
  LOBYTE(v93) = 0;
  v44 = *((unsigned int *)v6 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v93, v44, (uint64_t)&v87);
  LOBYTE(v93) = v10;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v76, (char *)&v93, (uint64_t)&v69);
  *(_QWORD *)&v93 = v69;
  WORD4(v93) = v70;
  BYTE10(v93) = v71;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v105 = v84;
  v106 = v85;
  v107[0] = *(_OWORD *)v86;
  *(_OWORD *)((char *)v107 + 9) = *(_OWORD *)&v86[9];
  v101 = v80;
  v102 = v81;
  v103 = v82;
  v104 = v83;
  v97 = *(_OWORD *)&v78[32];
  v98 = *(_OWORD *)&v78[48];
  v99 = *(_OWORD *)&v78[64];
  v100 = v79;
  v93 = v76;
  v94 = v77;
  v95 = *(_OWORD *)v78;
  v96 = *(_OWORD *)&v78[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v93);
  v45 = v88;
  v46 = v89;
  v47 = v90;
  v49 = v91;
  v48 = v92;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v49, *((uint64_t *)&v49 + 1), v48);
  return outlined consume of Path.Storage(v68, v65, v66, v67, v62);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v11;
  int v12;
  uint64_t Value;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unsigned int v50;
  __int128 v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  __int128 v66;
  __int128 v67;
  char v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[80];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[25];
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _QWORD v99[4];
  unsigned __int8 v100;
  uint64_t v101;
  CGRect v102;
  CGRect v103;

  v11 = v0;
  v101 = *MEMORY[0x24BDAC8D0];
  v12 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v14 = *(_OWORD *)(Value + 16);
  v66 = *(_OWORD *)Value;
  v67 = v14;
  v68 = *(_BYTE *)(Value + 32);
  v15 = *(unsigned __int8 *)(Value + 33);
  v16 = *(unsigned __int8 *)(Value + 34);
  if ((v17 & 1) != 0 || !*((_WORD *)v11 + 25))
  {
    v19 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v86 = *(uint64_t *)((char *)v11 + 28);
    DWORD2(v86) = v12;
    v18 = AGGraphAnyInputsChanged();
    v19 = ++static DisplayList.Version.lastValue;
    if (!v18)
      goto LABEL_9;
  }
  v20 = (2 * ((33 * (v19 >> 16)) ^ v19)) | 1;
  if (!v19)
    LOWORD(v20) = 0;
  *((_WORD *)v11 + 25) = v20;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v60 = v16;
    v61 = v15;
    v15 = *((_DWORD *)v11 + 10);
    v21 = AGCreateWeakAttribute();
    v62 = v19;
    v22 = v21;
    v58 = HIDWORD(v21);
    v23 = AGCreateWeakAttribute();
    v24 = v23;
    v57 = HIDWORD(v23);
    v59 = v15;
    v25 = AGCreateWeakAttribute();
    v26 = v25;
    v56 = HIDWORD(v25);
    v27 = AGCreateWeakAttribute();
    v28 = v27;
    v55 = HIDWORD(v27);
    v29 = AGCreateWeakAttribute();
    v30 = v29;
    v54 = HIDWORD(v29);
    v31 = AGCreateWeakAttribute();
    v32 = v31;
    v53 = HIDWORD(v31);
    v6 = &v80;
    v33 = (double *)AGGraphGetValue();
    v34 = *v33;
    v35 = v33[1];
    v36 = (double *)AGGraphGetValue();
    v37 = v34 - *v36;
    v38 = v35 - v36[1];
    v39 = AGGraphGetValue();
    v40 = *(double *)v39;
    v41 = *(double *)(v39 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v86 = __PAIR64__(v58, v22);
    *((_QWORD *)&v86 + 1) = __PAIR64__(v57, v24);
    *(_QWORD *)&v87 = __PAIR64__(v56, v26);
    *((_QWORD *)&v87 + 1) = __PAIR64__(v55, v28);
    *(_QWORD *)&v88 = __PAIR64__(v54, v30);
    *((_QWORD *)&v88 + 1) = __PAIR64__(v53, v32);
    LODWORD(v89) = v62;
    _setThreadGeometryProxyData();
    specialized Shape.effectivePath(in:)((uint64_t)v99, 0.0, 0.0, v40, v41);
    v19 = v99[0];
    v16 = v99[1];
    v1 = v99[2];
    v2 = v99[3];
    v3 = v100;
    _setThreadGeometryProxyData();
    v42 = *v11;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v80 = v42;
    v85 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v102.origin.x = 0.0;
    v102.origin.y = 0.0;
    v102.size.width = v40;
    v102.size.height = v41;
    v103 = CGRectOffset(v102, v37, v38);
    x = v103.origin.x;
    y = v103.origin.y;
    width = v103.size.width;
    height = v103.size.height;
    v4 = *((_DWORD *)v11 + 2);
    v5 = *((_WORD *)v11 + 25);
    LOBYTE(v15) = *((_BYTE *)v11 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v43 = 0x10000;
  if (!v60)
    v43 = 0;
  v44 = 256;
  if (!v61)
    v44 = 0;
  *(_QWORD *)&v69 = v19;
  *((_QWORD *)&v69 + 1) = v16;
  *(_QWORD *)&v70 = v1;
  *((_QWORD *)&v70 + 1) = v2;
  *(_QWORD *)v71 = v43 | v44 | v3;
  memset(&v71[8], 0, 60);
  *(_WORD *)&v71[68] = v5;
  *(CGFloat *)&v71[72] = x;
  *(CGFloat *)&v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  v73 = *(unint64_t *)&height;
  LODWORD(v74) = 0;
  *((CGFloat *)&v74 + 1) = x;
  *(CGFloat *)&v75 = y;
  *((CGFloat *)&v75 + 1) = width;
  *(CGFloat *)&v76 = height;
  v77 = xmmword_23527E880;
  *((_QWORD *)&v76 + 1) = v62;
  *(_QWORD *)&v78 = 0;
  BYTE10(v78) = 0;
  WORD4(v78) = 0;
  HIDWORD(v78) = v4;
  v79[0] = v15;
  *(_DWORD *)&v79[4] = v59;
  *(_QWORD *)&v79[8] = static GraphicsBlendMode.normal;
  v79[16] = byte_254266040;
  *(_DWORD *)&v79[20] = 1065353216;
  v79[24] = 0;
  LOBYTE(v86) = 0;
  v45 = *((unsigned int *)v11 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v86, v45, (uint64_t)&v80);
  LOBYTE(v86) = v15;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v69, (char *)&v86, (uint64_t)&v63);
  *(_QWORD *)&v86 = v63;
  WORD4(v86) = v64;
  BYTE10(v86) = v65;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v46 = v78;
  *((_OWORD *)v6 + 17) = v77;
  *((_OWORD *)v6 + 18) = v46;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v79;
  v98 = *(_OWORD *)&v79[9];
  v94 = v73;
  v95 = v74;
  v96 = v75;
  v97 = v76;
  v90 = *(_OWORD *)&v71[32];
  v91 = *(_OWORD *)&v71[48];
  v92 = *(_OWORD *)&v71[64];
  v93 = v72;
  v86 = v69;
  v87 = v70;
  v88 = *(_OWORD *)v71;
  v89 = *(_OWORD *)&v71[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v86);
  v47 = v81;
  v48 = v82;
  v49 = v83;
  v51 = v84;
  v50 = v85;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v51, *((uint64_t *)&v51 + 1), v50);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v11;
  int v12;
  uint64_t Value;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  CGFloat v40;
  CGFloat v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unsigned int v50;
  __int128 v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[80];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[25];
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _QWORD v99[4];
  unsigned __int8 v100;
  uint64_t v101;
  CGRect v102;
  CGRect v103;

  v11 = v0;
  v101 = *MEMORY[0x24BDAC8D0];
  v12 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v14 = *(_OWORD *)(Value + 16);
  v66 = *(_OWORD *)Value;
  v67 = v14;
  v68 = *(_OWORD *)(Value + 32);
  v15 = *(unsigned __int8 *)(Value + 48);
  v16 = *(unsigned __int8 *)(Value + 49);
  if ((v17 & 1) != 0 || !*((_WORD *)v11 + 25))
  {
    v19 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v86 = *(uint64_t *)((char *)v11 + 28);
    DWORD2(v86) = v12;
    v18 = AGGraphAnyInputsChanged();
    v19 = ++static DisplayList.Version.lastValue;
    if (!v18)
      goto LABEL_9;
  }
  v20 = (2 * ((33 * (v19 >> 16)) ^ v19)) | 1;
  if (!v19)
    LOWORD(v20) = 0;
  *((_WORD *)v11 + 25) = v20;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v60 = v16;
    v61 = v15;
    v15 = *((_DWORD *)v11 + 10);
    v21 = AGCreateWeakAttribute();
    v62 = v19;
    v22 = v21;
    v58 = HIDWORD(v21);
    v23 = AGCreateWeakAttribute();
    v24 = v23;
    v57 = HIDWORD(v23);
    v59 = v15;
    v25 = AGCreateWeakAttribute();
    v26 = v25;
    v56 = HIDWORD(v25);
    v27 = AGCreateWeakAttribute();
    v28 = v27;
    v55 = HIDWORD(v27);
    v29 = AGCreateWeakAttribute();
    v30 = v29;
    v54 = HIDWORD(v29);
    v31 = AGCreateWeakAttribute();
    v32 = v31;
    v53 = HIDWORD(v31);
    v6 = &v80;
    v33 = (double *)AGGraphGetValue();
    v34 = *v33;
    v35 = v33[1];
    v36 = (double *)AGGraphGetValue();
    v37 = v34 - *v36;
    v38 = v35 - v36[1];
    v39 = AGGraphGetValue();
    v40 = *(double *)v39;
    v41 = *(double *)(v39 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v86 = __PAIR64__(v58, v22);
    *((_QWORD *)&v86 + 1) = __PAIR64__(v57, v24);
    *(_QWORD *)&v87 = __PAIR64__(v56, v26);
    *((_QWORD *)&v87 + 1) = __PAIR64__(v55, v28);
    *(_QWORD *)&v88 = __PAIR64__(v54, v30);
    *((_QWORD *)&v88 + 1) = __PAIR64__(v53, v32);
    LODWORD(v89) = v62;
    _setThreadGeometryProxyData();
    specialized Shape.effectivePath(in:)((uint64_t)v99, 0.0, *(unint64_t *)&v40);
    v19 = v99[0];
    v16 = v99[1];
    v1 = v99[2];
    v2 = v99[3];
    v3 = v100;
    _setThreadGeometryProxyData();
    v42 = *v11;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v80 = v42;
    v85 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v102.origin.x = 0.0;
    v102.origin.y = 0.0;
    v102.size.width = v40;
    v102.size.height = v41;
    v103 = CGRectOffset(v102, v37, v38);
    x = v103.origin.x;
    y = v103.origin.y;
    width = v103.size.width;
    height = v103.size.height;
    v4 = *((_DWORD *)v11 + 2);
    v5 = *((_WORD *)v11 + 25);
    LOBYTE(v15) = *((_BYTE *)v11 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v43 = 0x10000;
  if (!v60)
    v43 = 0;
  v44 = 256;
  if (!v61)
    v44 = 0;
  *(_QWORD *)&v69 = v19;
  *((_QWORD *)&v69 + 1) = v16;
  *(_QWORD *)&v70 = v1;
  *((_QWORD *)&v70 + 1) = v2;
  *(_QWORD *)v71 = v43 | v44 | v3;
  memset(&v71[8], 0, 60);
  *(_WORD *)&v71[68] = v5;
  *(CGFloat *)&v71[72] = x;
  *(CGFloat *)&v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  v73 = *(unint64_t *)&height;
  LODWORD(v74) = 0;
  *((CGFloat *)&v74 + 1) = x;
  *(CGFloat *)&v75 = y;
  *((CGFloat *)&v75 + 1) = width;
  *(CGFloat *)&v76 = height;
  v77 = xmmword_23527E880;
  *((_QWORD *)&v76 + 1) = v62;
  *(_QWORD *)&v78 = 0;
  BYTE10(v78) = 0;
  WORD4(v78) = 0;
  HIDWORD(v78) = v4;
  v79[0] = v15;
  *(_DWORD *)&v79[4] = v59;
  *(_QWORD *)&v79[8] = static GraphicsBlendMode.normal;
  v79[16] = byte_254266040;
  *(_DWORD *)&v79[20] = 1065353216;
  v79[24] = 0;
  LOBYTE(v86) = 0;
  v45 = *((unsigned int *)v11 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v86, v45, (uint64_t)&v80);
  LOBYTE(v86) = v15;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v69, (char *)&v86, (uint64_t)&v63);
  *(_QWORD *)&v86 = v63;
  WORD4(v86) = v64;
  BYTE10(v86) = v65;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v46 = v78;
  *((_OWORD *)v6 + 17) = v77;
  *((_OWORD *)v6 + 18) = v46;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v79;
  v98 = *(_OWORD *)&v79[9];
  v94 = v73;
  v95 = v74;
  v96 = v75;
  v97 = v76;
  v90 = *(_OWORD *)&v71[32];
  v91 = *(_OWORD *)&v71[48];
  v92 = *(_OWORD *)&v71[64];
  v93 = v72;
  v86 = v69;
  v87 = v70;
  v88 = *(_OWORD *)v71;
  v89 = *(_OWORD *)&v71[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v86);
  v47 = v81;
  v48 = v82;
  v49 = v83;
  v51 = v84;
  v50 = v85;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v51, *((uint64_t *)&v51 + 1), v50);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v11;
  unsigned __int8 *Value;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  __int128 v54;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[80];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[25];
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _QWORD v99[4];
  unsigned __int8 v100;
  uint64_t v101;
  CGRect v102;
  CGRect v103;

  v101 = *MEMORY[0x24BDAC8D0];
  v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
  Value = (unsigned __int8 *)AGGraphGetValue();
  v13 = *Value;
  v14 = Value[1];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v86 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v86) = v11;
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v64 = v14;
    v65 = v13;
    v19 = *((_DWORD *)v0 + 10);
    v60 = AGCreateWeakAttribute();
    v20 = AGCreateWeakAttribute();
    v21 = v20;
    v61 = HIDWORD(v20);
    v63 = v19;
    v22 = AGCreateWeakAttribute();
    v23 = v22;
    v59 = HIDWORD(v22);
    v24 = AGCreateWeakAttribute();
    v25 = v24;
    v58 = HIDWORD(v24);
    v26 = AGCreateWeakAttribute();
    v27 = v26;
    v57 = HIDWORD(v26);
    v28 = AGCreateWeakAttribute();
    v29 = v28;
    v56 = HIDWORD(v28);
    v6 = &v80;
    v30 = (double *)AGGraphGetValue();
    v31 = *v30;
    v32 = v30[1];
    v33 = (double *)AGGraphGetValue();
    v34 = v31 - *v33;
    v35 = v32 - v33[1];
    v36 = AGGraphGetValue();
    v37 = *(double *)v36;
    v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v86 = v60;
    *((_QWORD *)&v86 + 1) = __PAIR64__(v61, v21);
    *(_QWORD *)&v87 = __PAIR64__(v59, v23);
    *((_QWORD *)&v87 + 1) = __PAIR64__(v58, v25);
    *(_QWORD *)&v88 = __PAIR64__(v57, v27);
    *((_QWORD *)&v88 + 1) = __PAIR64__(v56, v29);
    v62 = v17;
    LODWORD(v89) = v17;
    _setThreadGeometryProxyData();
    v39.n128_u64[0] = 0;
    v40.n128_u64[0] = 0;
    v41.n128_f64[0] = v37;
    v42.n128_f64[0] = v38;
    specialized Shape.effectivePath(in:)((uint64_t)v99, v39, v40, v41, v42);
    v14 = v99[0];
    v1 = v99[1];
    v2 = v99[2];
    v3 = v99[3];
    v4 = v100;
    _setThreadGeometryProxyData();
    v43 = *v0;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v80 = v43;
    v85 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v102.origin.x = 0.0;
    v102.origin.y = 0.0;
    v102.size.width = v37;
    v102.size.height = v38;
    v103 = CGRectOffset(v102, v34, v35);
    x = v103.origin.x;
    y = v103.origin.y;
    width = v103.size.width;
    height = v103.size.height;
    LODWORD(v17) = *((_DWORD *)v0 + 2);
    v5 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((_BYTE *)v0 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v44 = 0x10000;
  if (!v64)
    v44 = 0;
  v45 = 256;
  if (!v65)
    v45 = 0;
  *(_QWORD *)&v69 = v14;
  *((_QWORD *)&v69 + 1) = v1;
  *(_QWORD *)&v70 = v2;
  *((_QWORD *)&v70 + 1) = v3;
  *(_QWORD *)v71 = v44 | v45 | v4;
  memset(&v71[8], 0, 60);
  *(_WORD *)&v71[68] = v5;
  *(CGFloat *)&v71[72] = x;
  *(CGFloat *)&v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  v73 = *(unint64_t *)&height;
  LODWORD(v74) = 0;
  *((CGFloat *)&v74 + 1) = x;
  *(CGFloat *)&v75 = y;
  *((CGFloat *)&v75 + 1) = width;
  *(CGFloat *)&v76 = height;
  v77 = xmmword_23527E880;
  *((_QWORD *)&v76 + 1) = v62;
  *(_QWORD *)&v78 = 0;
  BYTE10(v78) = 0;
  WORD4(v78) = 0;
  HIDWORD(v78) = v17;
  v79[0] = v13;
  *(_DWORD *)&v79[4] = v63;
  *(_QWORD *)&v79[8] = static GraphicsBlendMode.normal;
  v79[16] = byte_254266040;
  *(_DWORD *)&v79[20] = 1065353216;
  v79[24] = 0;
  LOBYTE(v86) = 0;
  v46 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v86, v46, (uint64_t)&v80);
  LOBYTE(v86) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v69, (char *)&v86, (uint64_t)&v66);
  *(_QWORD *)&v86 = v66;
  WORD4(v86) = v67;
  BYTE10(v86) = v68;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v47 = v78;
  v48 = *(_OWORD *)v79;
  v49 = v76;
  *((_OWORD *)v6 + 17) = v77;
  *((_OWORD *)v6 + 18) = v47;
  *((_OWORD *)v6 + 19) = v48;
  v98 = *(_OWORD *)&v79[9];
  v94 = v73;
  v95 = v74;
  v96 = v75;
  v97 = v49;
  v90 = *(_OWORD *)&v71[32];
  v91 = *(_OWORD *)&v71[48];
  v92 = *(_OWORD *)&v71[64];
  v93 = v72;
  v86 = v69;
  v87 = v70;
  v88 = *(_OWORD *)v71;
  v89 = *(_OWORD *)&v71[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v86);
  v50 = v81;
  v51 = v82;
  v52 = v83;
  v54 = v84;
  v53 = v85;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v54, *((uint64_t *)&v54 + 1), v53);
}

{
  uint64_t *v0;
  unsigned int v1;
  char v2;
  uint64_t *v3;
  __int128 *v4;
  __int16 v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  uint64_t Value;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  double *v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  CGFloat v41;
  CGFloat v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  __int128 v60;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  __int16 v75;
  char v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[32];
  __int16 v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  uint64_t v98;
  int v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  unint64_t v104;
  uint64_t v105;
  __int16 v106;
  char v107;
  int v108;
  char v109;
  int v110;
  uint64_t v111;
  char v112;
  int v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;

  v126 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v12 = *(double *)Value;
  v13 = *(double *)(Value + 8);
  v14 = *(unsigned __int8 *)(Value + 16);
  v15 = *(unsigned __int8 *)(Value + 17);
  v16 = *(unsigned __int8 *)(Value + 18);
  if ((v17 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    v19 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    v121 = *(uint64_t *)((char *)v0 + 28);
    v122 = v10;
    v18 = AGGraphAnyInputsChanged();
    v19 = ++static DisplayList.Version.lastValue;
    if (!v18)
      goto LABEL_9;
  }
  v20 = (2 * ((33 * (v19 >> 16)) ^ v19)) | 1;
  if (!v19)
    LOWORD(v20) = 0;
  *((_WORD *)v0 + 25) = v20;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v62 = v14;
    v70 = v16;
    v71 = v15;
    v21 = *((_DWORD *)v0 + 10);
    v22 = AGCreateWeakAttribute();
    v23 = v22;
    v68 = HIDWORD(v22);
    v24 = AGCreateWeakAttribute();
    v25 = v24;
    v67 = HIDWORD(v24);
    v69 = v21;
    v26 = AGCreateWeakAttribute();
    v27 = v26;
    v66 = HIDWORD(v26);
    v28 = AGCreateWeakAttribute();
    v29 = v28;
    v65 = HIDWORD(v28);
    v30 = AGCreateWeakAttribute();
    v31 = v30;
    v64 = HIDWORD(v30);
    v32 = AGCreateWeakAttribute();
    v33 = v32;
    v63 = HIDWORD(v32);
    v72 = v19;
    v34 = (double *)AGGraphGetValue();
    v35 = *v34;
    v36 = v34[1];
    v37 = (double *)AGGraphGetValue();
    v38 = v35 - *v37;
    v39 = v36 - v37[1];
    v40 = AGGraphGetValue();
    v41 = *(double *)v40;
    v42 = *(double *)(v40 + 8);
    _threadGeometryProxyData();
    v77 = v23;
    v78 = v68;
    v79 = v25;
    v80 = v67;
    v81 = v27;
    v82 = v66;
    v83 = v29;
    v84 = v65;
    v85 = v31;
    v86 = v64;
    v87 = v33;
    v88 = v63;
    v89 = v19;
    _setThreadGeometryProxyData();
    v127.origin.x = 0.0;
    v127.origin.y = 0.0;
    v127.size.width = v41;
    v127.size.height = v42;
    if (CGRectIsNull(v127))
    {
      v16 = 0;
      v15 = 0;
      v14 = 0;
      v1 = 6;
    }
    else if (v12 == 0.0 && v13 == 0.0
           || (v128.origin.x = 0.0,
               v128.origin.y = 0.0,
               v128.size.width = v41,
               v128.size.height = v42,
               CGRectIsInfinite(v128)))
    {
      v16 = 0;
      v1 = 0;
      v15 = *(_QWORD *)&v41;
      v14 = *(_QWORD *)&v42;
    }
    else
    {
      v16 = swift_allocObject();
      v15 = 0;
      v14 = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(CGFloat *)(v16 + 32) = v41;
      *(CGFloat *)(v16 + 40) = v42;
      *(double *)(v16 + 48) = v12;
      *(double *)(v16 + 56) = v13;
      v1 = 2;
      *(_BYTE *)(v16 + 64) = v62;
    }
    v3 = &v121;
    v4 = &v90;
    _setThreadGeometryProxyData();
    v43 = *v0;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    v115 = v43;
    v120 = 0x80000000;
    swift_retain();
    outlined copy of Path.Storage(v16, 0, v15, v14, v1);
    v129.origin.x = 0.0;
    v129.origin.y = 0.0;
    v129.size.width = v41;
    v129.size.height = v42;
    v130 = CGRectOffset(v129, v38, v39);
    x = v130.origin.x;
    y = v130.origin.y;
    width = v130.size.width;
    height = v130.size.height;
    LODWORD(v19) = *((_DWORD *)v0 + 2);
    v5 = *((_WORD *)v0 + 25);
    v2 = *((_BYTE *)v0 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_18;
  }
  swift_once();
LABEL_18:
  v44 = 0x10000;
  if (!v70)
    v44 = 0;
  v45 = 256;
  if (!v71)
    v45 = 0;
  v46 = static GraphicsBlendMode.normal;
  v47 = byte_254266040;
  v73 = byte_254266040;
  v90 = (unint64_t)v16;
  *(_QWORD *)&v91 = v15;
  *((_QWORD *)&v91 + 1) = v14;
  *(_QWORD *)v92 = v44 | v45 | v1;
  *(_OWORD *)&v92[8] = 0u;
  *(__int128 *)((char *)v4 + 56) = 0u;
  *(__int128 *)((char *)v4 + 72) = 0u;
  *(__int128 *)((char *)v4 + 84) = 0u;
  v93 = v5;
  v94 = x;
  v95 = y;
  v96 = width;
  v97 = height;
  v98 = 0;
  v99 = 0;
  v100 = x;
  v101 = y;
  v102 = width;
  v103 = height;
  v4[12] = xmmword_23527E880;
  v104 = v72;
  v105 = 0;
  v107 = 0;
  v106 = 0;
  v108 = v19;
  v109 = v2;
  v110 = v69;
  v111 = v46;
  v112 = v73;
  v113 = 1065353216;
  v114 = 0;
  LOBYTE(v121) = 0;
  v48 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(v46, v47);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v121, v48, (uint64_t)&v115);
  LOBYTE(v121) = v2;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v90, (char *)&v121, (uint64_t)&v74);
  v121 = v74;
  LOWORD(v122) = v75;
  BYTE2(v122) = v76;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(v16, 0, v15, v14, v1);
  swift_bridgeObjectRelease();
  v49 = v4[13];
  v123 = v4[12];
  v124 = v49;
  v125 = v4[14];
  *(_OWORD *)((char *)v3 + 233) = *(__int128 *)((char *)v4 + 233);
  v50 = v4[9];
  *((_OWORD *)v3 + 8) = v4[8];
  *((_OWORD *)v3 + 9) = v50;
  v51 = v4[11];
  *((_OWORD *)v3 + 10) = v4[10];
  *((_OWORD *)v3 + 11) = v51;
  v52 = v4[5];
  *((_OWORD *)v3 + 4) = v4[4];
  *((_OWORD *)v3 + 5) = v52;
  v53 = v4[7];
  *((_OWORD *)v3 + 6) = v4[6];
  *((_OWORD *)v3 + 7) = v53;
  v54 = v91;
  *(_OWORD *)v3 = v90;
  *((_OWORD *)v3 + 1) = v54;
  v55 = *(_OWORD *)&v92[16];
  *((_OWORD *)v3 + 2) = *(_OWORD *)v92;
  *((_OWORD *)v3 + 3) = v55;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v121);
  v56 = v116;
  v57 = v117;
  v58 = v118;
  v60 = v119;
  v59 = v120;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58, *((uint64_t *)&v58 + 1), v60, *((uint64_t *)&v60 + 1), v59);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  __int16 v4;
  uint64_t *v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v10;
  int v11;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  CGFloat v42;
  CGFloat v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[80];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[25];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[4];
  unsigned __int8 v102;
  uint64_t v103;
  CGRect v104;
  CGRect v105;

  v10 = v0;
  v103 = *MEMORY[0x24BDAC8D0];
  v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v13 = *(_QWORD *)Value;
  v14 = *(_QWORD *)(Value + 8);
  v15 = *(unsigned __int8 *)(Value + 16);
  v16 = *(_QWORD *)(Value + 24);
  v17 = *(unsigned __int8 *)(Value + 32);
  v18 = *(unsigned __int8 *)(Value + 33);
  if ((v19 & 1) != 0 || !*((_WORD *)v10 + 25))
  {
    v21 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v88 = *(uint64_t *)((char *)v10 + 28);
    DWORD2(v88) = v11;
    v20 = AGGraphAnyInputsChanged();
    v21 = ++static DisplayList.Version.lastValue;
    if (!v20)
      goto LABEL_9;
  }
  v22 = (2 * ((33 * (v21 >> 16)) ^ v21)) | 1;
  if (!v21)
    LOWORD(v22) = 0;
  *((_WORD *)v10 + 25) = v22;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v65 = v18;
    v66 = v17;
    v17 = *((_DWORD *)v10 + 10);
    v23 = AGCreateWeakAttribute();
    v67 = v21;
    v24 = v23;
    v62 = HIDWORD(v23);
    v25 = AGCreateWeakAttribute();
    v26 = v25;
    v61 = HIDWORD(v25);
    v64 = v17;
    v27 = AGCreateWeakAttribute();
    v63 = v15;
    v28 = v27;
    v60 = HIDWORD(v27);
    v29 = AGCreateWeakAttribute();
    v30 = v29;
    v59 = HIDWORD(v29);
    v31 = AGCreateWeakAttribute();
    v32 = v31;
    v58 = HIDWORD(v31);
    v33 = AGCreateWeakAttribute();
    v34 = v33;
    v57 = HIDWORD(v33);
    v5 = &v82;
    v35 = (double *)AGGraphGetValue();
    v36 = *v35;
    v37 = v35[1];
    v38 = (double *)AGGraphGetValue();
    v39 = v36 - *v38;
    v40 = v37 - v38[1];
    v41 = AGGraphGetValue();
    v42 = *(double *)v41;
    v43 = *(double *)(v41 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v88 = __PAIR64__(v62, v24);
    *((_QWORD *)&v88 + 1) = __PAIR64__(v61, v26);
    *(_QWORD *)&v89 = __PAIR64__(v60, v28);
    *((_QWORD *)&v89 + 1) = __PAIR64__(v59, v30);
    *(_QWORD *)&v90 = __PAIR64__(v58, v32);
    *((_QWORD *)&v90 + 1) = __PAIR64__(v57, v34);
    LODWORD(v91) = v67;
    _setThreadGeometryProxyData();
    *(_QWORD *)&v71 = v13;
    *((_QWORD *)&v71 + 1) = v14;
    LOBYTE(v72) = v63;
    *((_QWORD *)&v72 + 1) = v16;
    RoundedRectangle._Inset.path(in:)((uint64_t)v101, 0.0);
    v21 = v101[0];
    v18 = v101[1];
    v15 = v101[2];
    v1 = v101[3];
    v2 = v102;
    _setThreadGeometryProxyData();
    v44 = *v10;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v82 = v44;
    v87 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v104.origin.x = 0.0;
    v104.origin.y = 0.0;
    v104.size.width = v42;
    v104.size.height = v43;
    v105 = CGRectOffset(v104, v39, v40);
    x = v105.origin.x;
    y = v105.origin.y;
    width = v105.size.width;
    height = v105.size.height;
    v3 = *((_DWORD *)v10 + 2);
    v4 = *((_WORD *)v10 + 25);
    LOBYTE(v17) = *((_BYTE *)v10 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v45 = 0x10000;
  if (!v65)
    v45 = 0;
  v46 = 256;
  if (!v66)
    v46 = 0;
  *(_QWORD *)&v71 = v21;
  *((_QWORD *)&v71 + 1) = v18;
  *(_QWORD *)&v72 = v15;
  *((_QWORD *)&v72 + 1) = v1;
  *(_QWORD *)v73 = v45 | v46 | v2;
  memset(&v73[8], 0, 60);
  *(_WORD *)&v73[68] = v4;
  *(CGFloat *)&v73[72] = x;
  *(CGFloat *)&v74 = y;
  *((CGFloat *)&v74 + 1) = width;
  v75 = *(unint64_t *)&height;
  LODWORD(v76) = 0;
  *((CGFloat *)&v76 + 1) = x;
  *(CGFloat *)&v77 = y;
  *((CGFloat *)&v77 + 1) = width;
  *(CGFloat *)&v78 = height;
  v79 = xmmword_23527E880;
  *((_QWORD *)&v78 + 1) = v67;
  *(_QWORD *)&v80 = 0;
  BYTE10(v80) = 0;
  WORD4(v80) = 0;
  HIDWORD(v80) = v3;
  v81[0] = v17;
  *(_DWORD *)&v81[4] = v64;
  *(_QWORD *)&v81[8] = static GraphicsBlendMode.normal;
  v81[16] = byte_254266040;
  *(_DWORD *)&v81[20] = 1065353216;
  v81[24] = 0;
  LOBYTE(v88) = 0;
  v47 = *((unsigned int *)v10 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v88, v47, (uint64_t)&v82);
  LOBYTE(v88) = v17;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v71, (char *)&v88, (uint64_t)&v68);
  *(_QWORD *)&v88 = v68;
  WORD4(v88) = v69;
  BYTE10(v88) = v70;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v48 = v80;
  v49 = *(_OWORD *)v81;
  v50 = v78;
  *((_OWORD *)v5 + 17) = v79;
  *((_OWORD *)v5 + 18) = v48;
  *((_OWORD *)v5 + 19) = v49;
  v100 = *(_OWORD *)&v81[9];
  v96 = v75;
  v97 = v76;
  v98 = v77;
  v99 = v50;
  v92 = *(_OWORD *)&v73[32];
  v93 = *(_OWORD *)&v73[48];
  v94 = *(_OWORD *)&v73[64];
  v95 = v74;
  v88 = v71;
  v89 = v72;
  v90 = *(_OWORD *)v73;
  v91 = *(_OWORD *)&v73[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v88);
  v51 = v83;
  v52 = v84;
  v53 = v85;
  v55 = v86;
  v54 = v87;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v55, *((uint64_t *)&v55 + 1), v54);
}

{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  _BOOL4 IsNull;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unsigned int v48;
  __int128 v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[80];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[25];
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _OWORD v94[16];
  uint64_t v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;

  v95 = *MEMORY[0x24BDAC8D0];
  v7 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  Value = AGGraphGetValue();
  v9 = *(_QWORD *)(Value + 16);
  v10 = *(_QWORD *)(Value + 32);
  v11 = *(unsigned __int8 *)(Value + 58);
  v12 = *(unsigned __int8 *)(Value + 59);
  if ((v13 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v15 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v94[0] = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v94[0]) = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = AGGraphAnyInputsChanged();
    v15 = ++static DisplayList.Version.lastValue;
    if (!v14)
      goto LABEL_9;
  }
  v16 = (2 * ((33 * (v15 >> 16)) ^ v15)) | 1;
  if (!v15)
    LOWORD(v16) = 0;
  *((_WORD *)v0 + 25) = v16;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_20;
  }
  v59 = v12;
  v60 = v11;
  v17 = *((_DWORD *)v0 + 10);
  v58 = v15;
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v56 = HIDWORD(v18);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v55 = HIDWORD(v20);
  v57 = v17;
  v22 = AGCreateWeakAttribute();
  v23 = v22;
  v54 = HIDWORD(v22);
  v24 = AGCreateWeakAttribute();
  v25 = v24;
  v53 = HIDWORD(v24);
  v26 = AGCreateWeakAttribute();
  v27 = v26;
  v52 = HIDWORD(v26);
  v28 = AGCreateWeakAttribute();
  v29 = v28;
  v51 = HIDWORD(v28);
  v30 = (double *)AGGraphGetValue();
  v31 = *v30;
  v32 = v30[1];
  v33 = (double *)AGGraphGetValue();
  v34 = v31 - *v33;
  v35 = v32 - v33[1];
  v2 = v58;
  v36 = AGGraphGetValue();
  v37 = *(double *)v36;
  v38 = *(double *)(v36 + 8);
  _threadGeometryProxyData();
  v64 = v19;
  v65 = v56;
  v66 = v21;
  v67 = v55;
  v68 = v23;
  v69 = v54;
  v70 = v25;
  v1 = &v88;
  v71 = v53;
  v72 = v27;
  v73 = v52;
  v74 = v29;
  v75 = v51;
  v76 = v58;
  _setThreadGeometryProxyData();
  v96.origin.x = 0.0;
  v96.origin.y = 0.0;
  v96.size.width = v37;
  v96.size.height = v38;
  IsNull = CGRectIsNull(v96);
  if (IsNull)
    v11 = 0;
  else
    v11 = *(_QWORD *)&v37;
  if (IsNull)
    v12 = 0;
  else
    v12 = *(_QWORD *)&v38;
  if (IsNull)
    v15 = 6;
  else
    v15 = 0;
  _setThreadGeometryProxyData();
  v40 = *v0;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v88 = v40;
  v93 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v11, v12, v15);
  v97.origin.x = 0.0;
  v97.origin.y = 0.0;
  v97.size.width = v37;
  v97.size.height = v38;
  v98 = CGRectOffset(v97, v34, v35);
  x = v98.origin.x;
  y = v98.origin.y;
  width = v98.size.width;
  height = v98.size.height;
  v7 = *((_DWORD *)v0 + 2);
  LOWORD(v9) = *((_WORD *)v0 + 25);
  LOBYTE(v10) = *((_BYTE *)v0 + 48);
  if (one-time initialization token for normal != -1)
    goto LABEL_26;
LABEL_20:
  v41 = 0x10000;
  if (!v59)
    v41 = 0;
  v42 = 256;
  if (!v60)
    v42 = 0;
  v77 = 0uLL;
  *(_QWORD *)&v78 = v11;
  *((_QWORD *)&v78 + 1) = v12;
  *(_QWORD *)v79 = v41 | v42 | v15;
  memset(&v79[8], 0, 60);
  *(_WORD *)&v79[68] = v9;
  *(CGFloat *)&v79[72] = x;
  *(CGFloat *)&v80 = y;
  *((CGFloat *)&v80 + 1) = width;
  v81 = *(unint64_t *)&height;
  LODWORD(v82) = 0;
  *((CGFloat *)&v82 + 1) = x;
  *(CGFloat *)&v83 = y;
  *((CGFloat *)&v83 + 1) = width;
  *(CGFloat *)&v84 = height;
  v85 = xmmword_23527E880;
  *((_QWORD *)&v84 + 1) = v2;
  *(_QWORD *)&v86 = 0;
  BYTE10(v86) = 0;
  WORD4(v86) = 0;
  HIDWORD(v86) = v7;
  v87[0] = v10;
  *(_DWORD *)&v87[4] = v57;
  *(_QWORD *)&v87[8] = static GraphicsBlendMode.normal;
  v87[16] = byte_254266040;
  *(_DWORD *)&v87[20] = 1065353216;
  v87[24] = 0;
  LOBYTE(v94[0]) = 0;
  v43 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v94, v43, (uint64_t)&v88);
  LOBYTE(v94[0]) = v10;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v77, (char *)v94, (uint64_t)&v61);
  *(_QWORD *)&v94[0] = v61;
  WORD4(v94[0]) = v62;
  BYTE10(v94[0]) = v63;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v11, v12, v15);
  swift_bridgeObjectRelease();
  v44 = v86;
  *((_OWORD *)v1 + 17) = v85;
  *((_OWORD *)v1 + 18) = v44;
  *((_OWORD *)v1 + 19) = *(_OWORD *)v87;
  *(_OWORD *)((char *)&v94[14] + 9) = *(_OWORD *)&v87[9];
  v94[8] = v81;
  v94[9] = v82;
  v94[10] = v83;
  v94[11] = v84;
  v94[4] = *(_OWORD *)&v79[32];
  v94[5] = *(_OWORD *)&v79[48];
  v94[6] = *(_OWORD *)&v79[64];
  v94[7] = v80;
  v94[0] = v77;
  v94[1] = v78;
  v94[2] = *(_OWORD *)v79;
  v94[3] = *(_OWORD *)&v79[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v94);
  v45 = v89;
  v46 = v90;
  v47 = v91;
  v49 = v92;
  v48 = v93;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v49, *((uint64_t *)&v49 + 1), v48);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyledDisplayList.updateValue()(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(_QWORD *__return_ptr, _QWORD *, double, double, double, double, double))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t *v9;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v14;
  uint64_t Value;
  double x;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  double *v34;
  double v35;
  double v36;
  double *v37;
  CGFloat v38;
  CGFloat v39;
  uint64_t v40;
  double v41;
  double v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(_QWORD *__return_ptr, _QWORD *, double, double, double, double, double);
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[80];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[25];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[4];
  unsigned __int8 v102;
  uint64_t v103;
  CGRect v104;
  CGRect v105;

  v103 = *MEMORY[0x24BDAC8D0];
  v14 = *((_DWORD *)v4 + 3);
  type metadata accessor for FontBox<Font.SystemProvider>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  x = *(double *)Value;
  v17 = *(unsigned __int8 *)(Value + 8);
  v18 = *(unsigned __int8 *)(Value + 9);
  if ((v19 & 1) != 0 || !*((_WORD *)v4 + 25))
  {
    v21 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v88 = *(uint64_t *)((char *)v4 + 28);
    DWORD2(v88) = v14;
    v20 = AGGraphAnyInputsChanged();
    v21 = ++static DisplayList.Version.lastValue;
    if (!v20)
      goto LABEL_9;
  }
  v22 = (2 * ((33 * (v21 >> 16)) ^ v21)) | 1;
  if (!v21)
    LOWORD(v22) = 0;
  *((_WORD *)v4 + 25) = v22;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v66 = v18;
    v67 = v17;
    v23 = *((_DWORD *)v4 + 10);
    v61 = AGCreateWeakAttribute();
    v24 = AGCreateWeakAttribute();
    v63 = a4;
    v25 = v24;
    v62 = HIDWORD(v24);
    v65 = v23;
    v26 = AGCreateWeakAttribute();
    v27 = v26;
    v60 = HIDWORD(v26);
    v28 = AGCreateWeakAttribute();
    v29 = v28;
    v59 = HIDWORD(v28);
    v30 = AGCreateWeakAttribute();
    v31 = v30;
    v58 = HIDWORD(v30);
    v32 = AGCreateWeakAttribute();
    v33 = v32;
    v57 = HIDWORD(v32);
    v34 = (double *)AGGraphGetValue();
    v35 = *v34;
    v36 = v34[1];
    v37 = (double *)AGGraphGetValue();
    v38 = v35 - *v37;
    v39 = v36 - v37[1];
    v40 = AGGraphGetValue();
    v41 = *(double *)v40;
    v42 = *(double *)(v40 + 8);
    _threadGeometryProxyData();
    *(_QWORD *)&v88 = v61;
    *((_QWORD *)&v88 + 1) = __PAIR64__(v62, v25);
    *(_QWORD *)&v89 = __PAIR64__(v60, v27);
    *((_QWORD *)&v89 + 1) = __PAIR64__(v59, v29);
    *(_QWORD *)&v90 = __PAIR64__(v58, v31);
    *((_QWORD *)&v90 + 1) = __PAIR64__(v57, v33);
    v9 = &v82;
    v64 = v21;
    LODWORD(v91) = v21;
    v43 = _setThreadGeometryProxyData();
    v63(v101, v43, 0.0, 0.0, v41, v42, x);
    v18 = v101[0];
    a4 = (void (*)(_QWORD *__return_ptr, _QWORD *, double, double, double, double, double))v101[1];
    v5 = v101[2];
    v6 = v101[3];
    v7 = v102;
    _setThreadGeometryProxyData();
    v44 = *v4;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v82 = v44;
    v87 = 0x80000000;
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v104.origin.x = 0.0;
    v104.origin.y = 0.0;
    v104.size.width = v41;
    v104.size.height = v42;
    v105 = CGRectOffset(v104, v38, v39);
    x = v105.origin.x;
    y = v105.origin.y;
    width = v105.size.width;
    height = v105.size.height;
    LODWORD(v21) = *((_DWORD *)v4 + 2);
    v8 = *((_WORD *)v4 + 25);
    LOBYTE(v17) = *((_BYTE *)v4 + 48);
    if (one-time initialization token for normal == -1)
      goto LABEL_11;
  }
  swift_once();
LABEL_11:
  v45 = 0x10000;
  if (!v66)
    v45 = 0;
  v46 = 256;
  if (!v67)
    v46 = 0;
  *(_QWORD *)&v71 = v18;
  *((_QWORD *)&v71 + 1) = a4;
  *(_QWORD *)&v72 = v5;
  *((_QWORD *)&v72 + 1) = v6;
  *(_QWORD *)v73 = v45 | v46 | v7;
  memset(&v73[8], 0, 60);
  *(_WORD *)&v73[68] = v8;
  *(double *)&v73[72] = x;
  *(CGFloat *)&v74 = y;
  *((CGFloat *)&v74 + 1) = width;
  v75 = *(unint64_t *)&height;
  LODWORD(v76) = 0;
  *((double *)&v76 + 1) = x;
  *(CGFloat *)&v77 = y;
  *((CGFloat *)&v77 + 1) = width;
  *(CGFloat *)&v78 = height;
  v79 = xmmword_23527E880;
  *((_QWORD *)&v78 + 1) = v64;
  *(_QWORD *)&v80 = 0;
  BYTE10(v80) = 0;
  WORD4(v80) = 0;
  HIDWORD(v80) = v21;
  v81[0] = v17;
  *(_DWORD *)&v81[4] = v65;
  *(_QWORD *)&v81[8] = static GraphicsBlendMode.normal;
  v81[16] = byte_254266040;
  *(_DWORD *)&v81[20] = 1065353216;
  v81[24] = 0;
  LOBYTE(v88) = 0;
  v47 = *((unsigned int *)v4 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v88, v47, (uint64_t)&v82);
  LOBYTE(v88) = v17;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v71, (char *)&v88, (uint64_t)&v68);
  *(_QWORD *)&v88 = v68;
  WORD4(v88) = v69;
  BYTE10(v88) = v70;
  AGGraphSetOutputValue();
  outlined retain of Path.Storage((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v48 = v80;
  v49 = *(_OWORD *)v81;
  v50 = v78;
  *((_OWORD *)v9 + 17) = v79;
  *((_OWORD *)v9 + 18) = v48;
  *((_OWORD *)v9 + 19) = v49;
  v100 = *(_OWORD *)&v81[9];
  v96 = v75;
  v97 = v76;
  v98 = v77;
  v99 = v50;
  v92 = *(_OWORD *)&v73[32];
  v93 = *(_OWORD *)&v73[48];
  v94 = *(_OWORD *)&v73[64];
  v95 = v74;
  v88 = v71;
  v89 = v72;
  v90 = *(_OWORD *)v73;
  v91 = *(_OWORD *)&v73[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v88);
  v51 = v83;
  v52 = v84;
  v53 = v85;
  v55 = v86;
  v54 = v87;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v55, *((uint64_t *)&v55 + 1), v54);
}

uint64_t specialized ShapeStyledDisplayList.updateValue()(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t v2;
  __int16 v3;
  uint64_t *v4;
  unint64_t v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  CGFloat v39;
  CGFloat v40;
  _BOOL4 IsNull;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unsigned int v50;
  __int128 v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[80];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[25];
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD v95[16];
  uint64_t v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;

  v96 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)v1 + 3);
  a1(0);
  Value = AGGraphGetValue();
  v12 = *(_QWORD *)Value;
  v13 = *(unsigned __int8 *)(Value + 40);
  v14 = *(unsigned __int8 *)(Value + 41);
  if ((v15 & 1) != 0 || !*((_WORD *)v1 + 25))
  {
    swift_bridgeObjectRetain();
    v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(_QWORD *)&v95[0] = *(uint64_t *)((char *)v1 + 28);
    DWORD2(v95[0]) = v10;
    swift_bridgeObjectRetain();
    v16 = AGGraphAnyInputsChanged();
    v17 = ++static DisplayList.Version.lastValue;
    if (!v16)
      goto LABEL_9;
  }
  v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17)
    LOWORD(v18) = 0;
  *((_WORD *)v1 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_20;
  }
  v60 = v14;
  v61 = v13;
  v19 = *((_DWORD *)v1 + 10);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v58 = HIDWORD(v20);
  v22 = AGCreateWeakAttribute();
  v23 = v22;
  v57 = HIDWORD(v22);
  v59 = v19;
  v24 = AGCreateWeakAttribute();
  v25 = v24;
  v56 = HIDWORD(v24);
  v26 = AGCreateWeakAttribute();
  v27 = v26;
  v55 = HIDWORD(v26);
  v28 = AGCreateWeakAttribute();
  v29 = v28;
  v54 = HIDWORD(v28);
  v30 = AGCreateWeakAttribute();
  v31 = v30;
  v53 = HIDWORD(v30);
  v32 = (double *)AGGraphGetValue();
  v33 = *v32;
  v34 = v32[1];
  v35 = (double *)AGGraphGetValue();
  v36 = v33 - *v35;
  v37 = v34 - v35[1];
  v38 = AGGraphGetValue();
  v39 = *(double *)v38;
  v40 = *(double *)(v38 + 8);
  _threadGeometryProxyData();
  v65 = v21;
  v66 = v58;
  v67 = v23;
  v68 = v57;
  v69 = v25;
  v70 = v56;
  v71 = v27;
  v72 = v55;
  v73 = v29;
  v4 = &v89;
  v74 = v54;
  v75 = v31;
  v5 = v17;
  v76 = v53;
  v77 = v17;
  _setThreadGeometryProxyData();
  v97.origin.x = 0.0;
  v97.origin.y = 0.0;
  v97.size.width = v39;
  v97.size.height = v40;
  IsNull = CGRectIsNull(v97);
  if (IsNull)
    v13 = 0;
  else
    v13 = *(_QWORD *)&v39;
  if (IsNull)
    v14 = 0;
  else
    v14 = *(_QWORD *)&v40;
  if (IsNull)
    v2 = 6;
  else
    v2 = 0;
  _setThreadGeometryProxyData();
  v42 = *v1;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v89 = v42;
  v94 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v13, v14, v2);
  v98.origin.x = 0.0;
  v98.origin.y = 0.0;
  v98.size.width = v39;
  v98.size.height = v40;
  v99 = CGRectOffset(v98, v36, v37);
  x = v99.origin.x;
  y = v99.origin.y;
  width = v99.size.width;
  height = v99.size.height;
  LODWORD(v12) = *((_DWORD *)v1 + 2);
  v3 = *((_WORD *)v1 + 25);
  LOBYTE(v17) = *((_BYTE *)v1 + 48);
  if (one-time initialization token for normal != -1)
    goto LABEL_26;
LABEL_20:
  v43 = 0x10000;
  if (!v60)
    v43 = 0;
  v44 = 256;
  if (!v61)
    v44 = 0;
  v78 = 0uLL;
  *(_QWORD *)&v79 = v13;
  *((_QWORD *)&v79 + 1) = v14;
  *(_QWORD *)v80 = v43 | v44 | v2;
  memset(&v80[8], 0, 60);
  *(_WORD *)&v80[68] = v3;
  *(CGFloat *)&v80[72] = x;
  *(CGFloat *)&v81 = y;
  *((CGFloat *)&v81 + 1) = width;
  v82 = *(unint64_t *)&height;
  LODWORD(v83) = 0;
  *((CGFloat *)&v83 + 1) = x;
  *(CGFloat *)&v84 = y;
  *((CGFloat *)&v84 + 1) = width;
  *(CGFloat *)&v85 = height;
  v86 = xmmword_23527E880;
  *((_QWORD *)&v85 + 1) = v5;
  *(_QWORD *)&v87 = 0;
  BYTE10(v87) = 0;
  WORD4(v87) = 0;
  HIDWORD(v87) = v12;
  v88[0] = v17;
  *(_DWORD *)&v88[4] = v59;
  *(_QWORD *)&v88[8] = static GraphicsBlendMode.normal;
  v88[16] = byte_254266040;
  *(_DWORD *)&v88[20] = 1065353216;
  v88[24] = 0;
  LOBYTE(v95[0]) = 0;
  v45 = *((unsigned int *)v1 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v95, v45, (uint64_t)&v89);
  LOBYTE(v95[0]) = v17;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v78, (char *)v95, (uint64_t)&v62);
  *(_QWORD *)&v95[0] = v62;
  WORD4(v95[0]) = v63;
  BYTE10(v95[0]) = v64;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v13, v14, v2);
  swift_bridgeObjectRelease();
  v46 = v87;
  *((_OWORD *)v4 + 17) = v86;
  *((_OWORD *)v4 + 18) = v46;
  *((_OWORD *)v4 + 19) = *(_OWORD *)v88;
  *(_OWORD *)((char *)&v95[14] + 9) = *(_OWORD *)&v88[9];
  v95[8] = v82;
  v95[9] = v83;
  v95[10] = v84;
  v95[11] = v85;
  v95[4] = *(_OWORD *)&v80[32];
  v95[5] = *(_OWORD *)&v80[48];
  v95[6] = *(_OWORD *)&v80[64];
  v95[7] = v81;
  v95[0] = v78;
  v95[1] = v79;
  v95[2] = *(_OWORD *)v80;
  v95[3] = *(_OWORD *)&v80[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v95);
  v47 = v90;
  v48 = v91;
  v49 = v92;
  v51 = v93;
  v50 = v94;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v51, *((uint64_t *)&v51 + 1), v50);
  return swift_bridgeObjectRelease();
}

double specialized closure #2 in ShapeStyledDisplayList.updateValue()@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(uint64_t);
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  v8 = *a1;
  v7 = a1[1];
  v9 = *((unsigned __int8 *)a1 + 16);
  if (!v7)
  {
    swift_retain();
    v19 = 0.0;
    goto LABEL_5;
  }
  v10 = *(double (**)(uint64_t))(*(_QWORD *)v7 + 112);
  swift_retain();
  v11 = swift_retain_n();
  v12 = v10(v11);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = 0.0;
  v25.origin.x = 0.0;
  v25.origin.y = 0.0;
  v25.size.width = a3;
  v25.size.height = a4;
  if (CGRectIsNull(v25))
  {
    swift_release();
LABEL_5:
    v20 = 0.0;
    goto LABEL_13;
  }
  v21 = -v16;
  v22 = -v18;
  v26.origin.x = 0.0;
  v26.origin.y = 0.0;
  v26.size.width = a3;
  v26.size.height = a4;
  v27 = CGRectStandardize(v26);
  if (v14 == v18)
    v23 = v18;
  else
    v23 = v14;
  v19 = v27.origin.x - v23;
  v20 = v27.origin.y - v12;
  a3 = v27.size.width - (v22 - v14);
  a4 = v27.size.height - (v21 - v12);
  v28.origin.x = v27.origin.x - v23;
  v28.origin.y = v27.origin.y - v12;
  v28.size.width = a3;
  v28.size.height = a4;
  if (CGRectGetWidth(v28) < 0.0
    || (v29.origin.x = v19, v29.origin.y = v20, v29.size.width = a3, v29.size.height = a4, CGRectGetHeight(v29) < 0.0))
  {
    v19 = *MEMORY[0x24BDBF070];
    v20 = *(double *)(MEMORY[0x24BDBF070] + 8);
    a3 = *(double *)(MEMORY[0x24BDBF070] + 16);
    a4 = *(double *)(MEMORY[0x24BDBF070] + 24);
  }
  swift_release();
LABEL_13:
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v9;
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 96) = 0x200000;
  *(double *)(a2 + 104) = v19;
  *(double *)(a2 + 112) = v20;
  *(CGFloat *)(a2 + 120) = a3;
  *(CGFloat *)(a2 + 128) = a4;
  return result;
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  Value = AGGraphGetValue();
  v3 = v2;
  v31 = *(_OWORD *)Value;
  v4 = *(_QWORD *)(Value + 16);
  v5 = *(_QWORD *)(Value + 24);
  v6 = *(_BYTE *)(Value + 32);
  v7 = *(_BYTE *)(Value + 33);
  v8 = *(_QWORD *)AGGraphGetValue();
  v10 = v3 | v9;
  v11 = *(_QWORD *)(v0 + 24);
  v32 = v31;
  v33 = v4;
  v34 = v5;
  v35 = v6;
  v36 = v7;
  v37 = v8;
  v12 = (double *)AGGraphGetValue();
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = v12[3];
  v18 = v17 & 1;
  v19 = (double *)AGGraphGetValue();
  v20 = *v19;
  v21 = v19[1];
  v23 = v22 & 1;
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_OWORD *)(v24 + 16);
  v39[0] = *(_OWORD *)v24;
  v39[1] = v26;
  v40 = v25;
  v28 = v27 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v39);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)&v32, v10 & 1, v18, v23, (uint64_t)v39, v28, v11, v13, v14, v15, v16, v20, v21);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v39);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_235283250;
    *(_QWORD *)(v29 + 32) = v11;
    v38 = v29;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char v22;
  char v23;
  double *v24;
  double v25;
  double v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  char v33;
  uint64_t v34;
  _OWORD v36[10];
  _BYTE v37[32];
  __int128 v38[12];
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[19];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v3 = v2;
  v4 = *(_OWORD *)(Value + 48);
  v6 = *(_OWORD *)Value;
  v5 = *(_OWORD *)(Value + 16);
  v43 = *(_OWORD *)(Value + 32);
  v44 = v4;
  v41 = v6;
  v42 = v5;
  v7 = *(_OWORD *)(Value + 112);
  v9 = *(_OWORD *)(Value + 64);
  v8 = *(_OWORD *)(Value + 80);
  v47 = *(_OWORD *)(Value + 96);
  v48 = v7;
  v45 = v9;
  v46 = v8;
  v11 = *(_OWORD *)(Value + 144);
  v10 = *(_OWORD *)(Value + 160);
  v12 = *(_DWORD *)(Value + 175);
  v49 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v51[15] = v12;
  v50 = v11;
  *(_OWORD *)v51 = v10;
  v13 = *(_QWORD *)AGGraphGetValue();
  v15 = v3 | v14;
  v16 = *(_QWORD *)(v0 + 24);
  v36[9] = v50;
  *(_OWORD *)v37 = *(_OWORD *)v51;
  *(_DWORD *)&v37[15] = *(_DWORD *)&v51[15];
  v36[4] = v45;
  v36[5] = v46;
  v36[6] = v47;
  v36[7] = v48;
  v36[8] = v49;
  v36[0] = v41;
  v36[1] = v42;
  v36[2] = v43;
  v36[3] = v44;
  *(_QWORD *)&v37[24] = v13;
  v38[8] = v49;
  v38[9] = v50;
  v38[4] = v45;
  v38[5] = v46;
  v38[6] = v47;
  v38[7] = v48;
  v38[0] = v41;
  v38[1] = v42;
  v38[2] = v43;
  v38[3] = v44;
  v38[10] = *(_OWORD *)v37;
  v38[11] = *(_OWORD *)&v37[16];
  v17 = (double *)AGGraphGetValue();
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v17[3];
  v23 = v22 & 1;
  v24 = (double *)AGGraphGetValue();
  v25 = *v24;
  v26 = v24[1];
  v28 = v27 & 1;
  v29 = AGGraphGetValue();
  v30 = *(_QWORD *)(v29 + 32);
  v31 = *(_OWORD *)(v29 + 16);
  v39[0] = *(_OWORD *)v29;
  v39[1] = v31;
  v40 = v30;
  v33 = v32 & 1;
  swift_beginAccess();
  outlined retain of Image.Resolved((uint64_t)&v41);
  outlined retain of Image.Resolved((uint64_t)&v41);
  swift_bridgeObjectRetain();
  outlined retain of ShapeStyledResponderData<Image.Resolved>((uint64_t)v36);
  outlined retain of ViewTransform((uint64_t)v39);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v38, v15 & 1, v23, v28, (uint64_t)v39, v33, v16, v18, v19, v20, v21, v25, v26);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v39);
  outlined release of ShapeStyledResponderData<Image.Resolved>((uint64_t)v36);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_235283250;
    *(_QWORD *)(v34 + 32) = v16;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  outlined release of ShapeStyledResponderData<Image.Resolved>((uint64_t)v36);
  return outlined release of Image.Resolved((uint64_t)&v41);
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  char v28;
  __int16 v29;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  Value = AGGraphGetValue();
  v3 = v2;
  v4 = *(_QWORD *)Value;
  v5 = *(unsigned __int8 *)(Value + 8);
  v6 = *(unsigned __int8 *)(Value + 9);
  v7 = (uint64_t *)AGGraphGetValue();
  v9 = v3 | v8;
  v10 = *v7;
  v11 = *(_QWORD *)(v0 + 24);
  v12 = (double *)AGGraphGetValue();
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = v12[3];
  v18 = v17 & 1;
  v19 = (double *)AGGraphGetValue();
  v20 = *v19;
  v21 = v19[1];
  v23 = v22 & 1;
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_OWORD *)(v24 + 16);
  v32[0] = *(_OWORD *)v24;
  v32[1] = v26;
  v33 = v25;
  v28 = v27 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v32);
  if (v6)
    v29 = 256;
  else
    v29 = 0;
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v29 | v5, v10, v9 & 1, v18, v23, (uint64_t)v32, v28, v13, v14, v15, v16, v20, v21, v11);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_235283250;
    *(_QWORD *)(v31 + 32) = v11;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v3 = v2;
  v4 = *(_QWORD *)Value;
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_BYTE *)(Value + 16);
  v7 = (uint64_t *)AGGraphGetValue();
  v9 = v3 | v8;
  v10 = *v7;
  v11 = *(_QWORD *)(v0 + 24);
  v12 = (double *)AGGraphGetValue();
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = v12[3];
  v18 = v17 & 1;
  v19 = (double *)AGGraphGetValue();
  v20 = *v19;
  v21 = v19[1];
  v23 = v22 & 1;
  v24 = AGGraphGetValue();
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 32);
  v28 = *(_OWORD *)(v24 + 16);
  v31[0] = *(_OWORD *)v24;
  v31[1] = v28;
  v32 = v27;
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v31);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v5, v6, v10, v9 & 1, v18, v23, (uint64_t)v31, v13, v14, v15, v16, v20, v21, v26 & 1, v11);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v31);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_235283250;
    *(_QWORD *)(v30 + 32) = v11;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  char v28;
  __int16 v29;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_QWORD *)Value;
  v6 = *(unsigned __int8 *)(Value + 8);
  v7 = *(unsigned __int8 *)(Value + 9);
  v8 = (uint64_t *)AGGraphGetValue();
  v10 = v4 | v9;
  v11 = *v8;
  v12 = (double *)AGGraphGetValue();
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = v12[3];
  v18 = v17 & 1;
  v19 = (double *)AGGraphGetValue();
  v20 = *v19;
  v21 = v19[1];
  v23 = v22 & 1;
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_OWORD *)(v24 + 16);
  v32[0] = *(_OWORD *)v24;
  v32[1] = v26;
  v33 = v25;
  v28 = v27 & 1;
  swift_beginAccess();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v32);
  if (v7)
    v29 = 256;
  else
    v29 = 0;
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v5, v29 | v6, v11, v10 & 1, v18, v23, (uint64_t)v32, v28, v13, v14, v15, v16, v20, v21, v1);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v32);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_235283250;
    *(_QWORD *)(v31 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *Value;
  char v3;
  char v4;
  int v5;
  int v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  char v17;
  double *v18;
  double v19;
  double v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  char v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  Value = (unsigned __int8 *)AGGraphGetValue();
  v4 = v3;
  v33 = *Value;
  v5 = Value[1];
  v6 = Value[2];
  v7 = (uint64_t *)AGGraphGetValue();
  v9 = v4 | v8;
  v10 = *v7;
  v11 = (double *)AGGraphGetValue();
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v17 = v16 & 1;
  v18 = (double *)AGGraphGetValue();
  v19 = *v18;
  v20 = v18[1];
  v22 = v21 & 1;
  v23 = AGGraphGetValue();
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_OWORD *)(v23 + 16);
  v34[0] = *(_OWORD *)v23;
  v34[1] = v25;
  v35 = v24;
  v27 = v26 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v34);
  if (v5)
    v28 = 256;
  else
    v28 = 0;
  v29 = v28 | v33;
  if (v6)
    v30 = 0x10000;
  else
    v30 = 0;
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v29 | v30, v10, v9 & 1, v17, v22, (uint64_t)v34, v27, v1, v12, v13, v14, v15, v19, v20);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v34);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_235283250;
    *(_QWORD *)(v31 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  double *v21;
  double v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  char v32;
  char v33;
  _QWORD v34[4];
  unsigned __int8 v35;
  char v36;
  char v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_QWORD *)Value;
  v6 = *(_QWORD *)(Value + 8);
  v7 = *(_QWORD *)(Value + 16);
  v8 = *(_QWORD *)(Value + 24);
  v9 = *(_BYTE *)(Value + 32);
  v10 = *(_BYTE *)(Value + 33);
  v11 = *(_BYTE *)(Value + 34);
  v12 = *(_QWORD *)AGGraphGetValue();
  v33 = v4 | v13;
  v34[0] = v5;
  v34[1] = v6;
  v34[2] = v7;
  v34[3] = v8;
  v35 = v9;
  v36 = v10;
  v14 = v1;
  v37 = v11;
  v38 = v12;
  v15 = (double *)AGGraphGetValue();
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = v15[3];
  v32 = v20 & 1;
  v21 = (double *)AGGraphGetValue();
  v22 = *v21;
  v23 = v21[1];
  v25 = v24 & 1;
  v26 = AGGraphGetValue();
  v27 = *(_QWORD *)(v26 + 32);
  v28 = *(_OWORD *)(v26 + 16);
  v39[0] = *(_OWORD *)v26;
  v39[1] = v28;
  v40 = v27;
  LOBYTE(v1) = v29 & 1;
  swift_beginAccess();
  outlined copy of Path.Storage(v5, v6, v7, v8, v9);
  outlined copy of Path.Storage(v5, v6, v7, v8, v9);
  outlined copy of Path.Storage(v5, v6, v7, v8, v9);
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v39);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v34, v33 & 1, v32, v25, (uint64_t)v39, v1, v14, v16, v17, v18, v19, v22, v23);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v39);
  outlined consume of Path.Storage(v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_235283250;
    *(_QWORD *)(v30 + 32) = v14;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  outlined consume of Path.Storage(v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  return outlined consume of Path.Storage(v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  char v19;
  double *v20;
  double v21;
  double v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v4 = v3;
  v32 = *(_OWORD *)Value;
  v5 = *(_QWORD *)(Value + 16);
  v6 = *(_QWORD *)(Value + 24);
  v7 = *(_BYTE *)(Value + 32);
  v8 = *(_BYTE *)(Value + 33);
  v9 = *(_BYTE *)(Value + 34);
  v10 = *(_QWORD *)AGGraphGetValue();
  v12 = v4 | v11;
  v33 = v32;
  v34 = v5;
  v35 = v6;
  v36 = v7;
  v37 = v8;
  v38 = v9;
  v39 = v10;
  v13 = (double *)AGGraphGetValue();
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v19 = v18 & 1;
  v20 = (double *)AGGraphGetValue();
  v21 = *v20;
  v22 = v20[1];
  v24 = v23 & 1;
  v25 = AGGraphGetValue();
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_OWORD *)(v25 + 16);
  v41[0] = *(_OWORD *)v25;
  v41[1] = v27;
  v42 = v26;
  v29 = v28 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v41);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)&v33, v12 & 1, v19, v24, (uint64_t)v41, v29, v1, v14, v15, v16, v17, v21, v22);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v41);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_235283250;
    *(_QWORD *)(v30 + 32) = v1;
    v40 = v30;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  char v20;
  double *v21;
  double v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  char v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v4 = v3;
  v33 = *(_OWORD *)Value;
  v5 = *(_QWORD *)(Value + 16);
  v6 = *(_QWORD *)(Value + 24);
  v7 = *(_BYTE *)(Value + 32);
  v8 = *(_QWORD *)(Value + 40);
  v9 = *(_BYTE *)(Value + 48);
  v10 = *(_BYTE *)(Value + 49);
  v11 = *(_QWORD *)AGGraphGetValue();
  v13 = v4 | v12;
  v34 = v33;
  v35 = v5;
  v36 = v6;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v40 = v10;
  v41 = v11;
  v14 = (double *)AGGraphGetValue();
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  v18 = v14[3];
  v20 = v19 & 1;
  v21 = (double *)AGGraphGetValue();
  v22 = *v21;
  v23 = v21[1];
  v25 = v24 & 1;
  v26 = AGGraphGetValue();
  v27 = *(_QWORD *)(v26 + 32);
  v28 = *(_OWORD *)(v26 + 16);
  v43[0] = *(_OWORD *)v26;
  v43[1] = v28;
  v44 = v27;
  v30 = v29 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v43);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)&v34, v13 & 1, v20, v25, (uint64_t)v43, v30, v1, v15, v16, v17, v18, v22, v23);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v43);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_235283250;
    *(_QWORD *)(v31 + 32) = v1;
    v42 = v31;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  double v5;
  double v6;
  int v7;
  int v8;
  uint64_t *v9;
  char v10;
  char v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  char v19;
  double *v20;
  double v21;
  double v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  char v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(double *)Value;
  v6 = *(double *)(Value + 8);
  v35 = *(unsigned __int8 *)(Value + 16);
  v7 = *(unsigned __int8 *)(Value + 17);
  v8 = *(unsigned __int8 *)(Value + 18);
  v9 = (uint64_t *)AGGraphGetValue();
  v11 = v4 | v10;
  v12 = *v9;
  v13 = (double *)AGGraphGetValue();
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v19 = v18 & 1;
  v20 = (double *)AGGraphGetValue();
  v21 = *v20;
  v22 = v20[1];
  v24 = v23 & 1;
  v25 = AGGraphGetValue();
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_OWORD *)(v25 + 16);
  v36[0] = *(_OWORD *)v25;
  v36[1] = v27;
  v37 = v26;
  v29 = v28 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v36);
  if (v7)
    v30 = 256;
  else
    v30 = 0;
  v31 = v30 | v35;
  if (v8)
    v32 = 0x10000;
  else
    v32 = 0;
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v31 | v32, v12, v11 & 1, v19, v24, (uint64_t)v36, v29, v1, v5, v6, v14, v15, v16, v17, v21, v22);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v36);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283250;
    *(_QWORD *)(v33 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  char v20;
  double *v21;
  double v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  char v30;
  uint64_t v31;
  _QWORD v33[2];
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_QWORD *)Value;
  v6 = *(_QWORD *)(Value + 8);
  v7 = *(_BYTE *)(Value + 16);
  v8 = *(_QWORD *)(Value + 24);
  v9 = *(_BYTE *)(Value + 32);
  v10 = *(_BYTE *)(Value + 33);
  v11 = *(_QWORD *)AGGraphGetValue();
  v13 = v4 | v12;
  v33[0] = v5;
  v33[1] = v6;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v10;
  v38 = v11;
  v14 = (double *)AGGraphGetValue();
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  v18 = v14[3];
  v20 = v19 & 1;
  v21 = (double *)AGGraphGetValue();
  v22 = *v21;
  v23 = v21[1];
  v25 = v24 & 1;
  v26 = AGGraphGetValue();
  v27 = *(_QWORD *)(v26 + 32);
  v28 = *(_OWORD *)(v26 + 16);
  v40[0] = *(_OWORD *)v26;
  v40[1] = v28;
  v41 = v27;
  v30 = v29 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v40);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v33, v13 & 1, v20, v25, (uint64_t)v40, v30, v1, v15, v16, v17, v18, v22, v23);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v40);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_235283250;
    *(_QWORD *)(v31 + 32) = v1;
    v39 = v31;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  char v19;
  double *v20;
  double v21;
  double v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_QWORD *)Value;
  v32 = *(_OWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_BYTE *)(Value + 40);
  v9 = *(_BYTE *)(Value + 41);
  v10 = *(_QWORD *)AGGraphGetValue();
  v12 = v4 | v11;
  v33 = v5;
  v34 = v32;
  v35 = v6;
  v36 = v7;
  v37 = v8;
  v38 = v9;
  v39 = v10;
  v13 = (double *)AGGraphGetValue();
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v19 = v18 & 1;
  v20 = (double *)AGGraphGetValue();
  v21 = *v20;
  v22 = v20[1];
  v24 = v23 & 1;
  v25 = AGGraphGetValue();
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_OWORD *)(v25 + 16);
  v41[0] = *(_OWORD *)v25;
  v41[1] = v27;
  v42 = v26;
  v29 = v28 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v41);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(&v33, v12 & 1, v19, v24, (uint64_t)v41, v29, v1, v14, v15, v16, v17, v21, v22);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_235283250;
    *(_QWORD *)(v31 + 32) = v1;
    v40 = v31;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  char v21;
  double *v22;
  double v23;
  double v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[3];
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v36 = *(_QWORD *)(v0 + 24);
  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  Value = AGGraphGetValue();
  v3 = v2;
  v4 = *(_QWORD *)(Value + 16);
  v34 = *(_QWORD *)(Value + 8);
  v35 = *(_QWORD *)Value;
  v5 = *(_BYTE *)(Value + 24);
  v6 = *(_QWORD *)(Value + 32);
  v7 = *(_BYTE *)(Value + 40);
  v8 = *(_QWORD *)(Value + 48);
  v9 = *(_BYTE *)(Value + 56);
  v10 = *(_BYTE *)(Value + 57);
  v11 = *(_BYTE *)(Value + 58);
  v12 = *(_BYTE *)(Value + 59);
  v13 = *(_QWORD *)AGGraphGetValue();
  v37 = v3 | v14;
  v38[0] = v35;
  v38[1] = v34;
  v38[2] = v4;
  v39 = v5;
  v40 = v6;
  v41 = v7;
  v42 = v8;
  v43 = v9;
  v44 = v10;
  v45 = v11;
  v46 = v12;
  v47 = v13;
  v15 = (double *)AGGraphGetValue();
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = v15[3];
  v21 = v20 & 1;
  v22 = (double *)AGGraphGetValue();
  v23 = *v22;
  v24 = v22[1];
  v26 = v25 & 1;
  v27 = AGGraphGetValue();
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(_OWORD *)(v27 + 16);
  v48[0] = *(_OWORD *)v27;
  v48[1] = v29;
  v49 = v28;
  v31 = v30 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v48);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v38, v37 & 1, v21, v26, (uint64_t)v48, v31, v36, v16, v17, v18, v19, v23, v24);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v48);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283250;
    *(_QWORD *)(v33 + 32) = v36;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()(void (*a1)(_QWORD), void (*a2)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *Value;
  char v5;
  char v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  char v10;
  char v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(v2 + 24);
  a1(0);
  Value = (unsigned __int8 *)AGGraphGetValue();
  v6 = v5;
  v7 = *Value;
  v8 = Value[1];
  v9 = (uint64_t *)AGGraphGetValue();
  v11 = v6 | v10;
  v12 = *v9;
  v13 = (double *)AGGraphGetValue();
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v19 = v18 & 1;
  v20 = (double *)AGGraphGetValue();
  v21 = *v20;
  v22 = v20[1];
  v24 = v23 & 1;
  v25 = AGGraphGetValue();
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_OWORD *)(v25 + 16);
  v34[0] = *(_OWORD *)v25;
  v34[1] = v27;
  v35 = v26;
  v29 = v28 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v34);
  if (v8)
    v30 = 256;
  else
    v30 = 0;
  a2(v30 | v7, v12, v11 & 1, v19, v24, v34, v29, v3, v14, v15, v16, v17, v21, v22);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v34);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_235283250;
    *(_QWORD *)(v31 + 32) = v3;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;
  char v7;
  char v8;
  double v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  char v13;
  char v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(v4 + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v8 = v7;
  v9 = *(double *)Value;
  v10 = *(unsigned __int8 *)(Value + 8);
  v11 = *(unsigned __int8 *)(Value + 9);
  v12 = (uint64_t *)AGGraphGetValue();
  v14 = v8 | v13;
  v15 = *v12;
  v16 = (double *)AGGraphGetValue();
  v17 = *v16;
  v18 = v16[1];
  v19 = v16[2];
  v20 = v16[3];
  v22 = v21 & 1;
  v23 = (double *)AGGraphGetValue();
  v24 = *v23;
  v25 = v23[1];
  v27 = v26 & 1;
  v28 = AGGraphGetValue();
  v29 = *(_QWORD *)(v28 + 32);
  v30 = *(_OWORD *)(v28 + 16);
  v37[0] = *(_OWORD *)v28;
  v37[1] = v30;
  v38 = v29;
  v32 = v31 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v37);
  if (v11)
    v33 = 256;
  else
    v33 = 0;
  a4(v33 | v10, v15, v14 & 1, v22, v27, v37, v32, v5, v9, v17, v18, v19, v20, v24, v25);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v37);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_235283250;
    *(_QWORD *)(v34 + 32) = v5;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()(void (*a1)(_QWORD), void (*a2)(uint64_t *, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Value;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  __int128 v34;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(v2 + 24);
  a1(0);
  Value = AGGraphGetValue();
  v6 = v5;
  v7 = *(_QWORD *)Value;
  v34 = *(_OWORD *)(Value + 8);
  v8 = *(_QWORD *)(Value + 24);
  v9 = *(_QWORD *)(Value + 32);
  v10 = *(_BYTE *)(Value + 40);
  v11 = *(_BYTE *)(Value + 41);
  v12 = *(_QWORD *)AGGraphGetValue();
  v14 = v6 | v13;
  v36 = v7;
  v37 = v34;
  v38 = v8;
  v39 = v9;
  v40 = v10;
  v41 = v11;
  v42 = v12;
  v15 = (double *)AGGraphGetValue();
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = v15[3];
  v21 = v20 & 1;
  v22 = (double *)AGGraphGetValue();
  v23 = *v22;
  v24 = v22[1];
  v26 = v25 & 1;
  v27 = AGGraphGetValue();
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(_OWORD *)(v27 + 16);
  v44[0] = *(_OWORD *)v27;
  v44[1] = v29;
  v45 = v28;
  v31 = v30 & 1;
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v44);
  a2(&v36, v14 & 1, v21, v26, v44, v31, v3, v16, v17, v18, v19, v23, v24);
  swift_endAccess();
  outlined release of ViewTransform((uint64_t)v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283250;
    *(_QWORD *)(v33 + 32) = v3;
    v43 = v33;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

unint64_t *specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, double a3, double a4, uint64_t a5, unint64_t a6, char a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *result;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  unsigned int v45;
  float v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v13 = type metadata accessor for OSSignpostID();
  v57 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v58 = (char *)&v51 - v17;
  result = (unint64_t *)AGGraphGetValue();
  v20 = *result;
  v21 = result[1];
  if ((a2 & 1) != 0)
    goto LABEL_2;
  if ((v19 & 1) == 0)
    return result;
  if ((a7 & 1) == 0)
  {
LABEL_2:
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    v23 = swift_retain_n();
    v24 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v23);
    swift_release();
    if ((v24 & 1) == 0)
    {
      swift_release();
      return (unint64_t *)swift_release();
    }
  }
  PropertyList.Tracker.reset()();
  v56 = a1;
  if (v20)
    v22 = *(_QWORD *)(v20 + 64);
  else
    v22 = 0;
  v25 = *(_QWORD *)(a6 + 16);
  swift_retain_n();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 16));
  *(_QWORD *)(v25 + 24) = v22;
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 16));
  swift_release();
  swift_release();
  v26 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v52 = v26;
    v53 = v21;
    v54 = v20;
    v55 = a6;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v28 = AGTypeID.description.getter();
    v30 = v29;
    v31 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v32 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v28;
    v33 = inited + 32;
    *(_QWORD *)(inited + 64) = v32;
    *(_QWORD *)(inited + 40) = v30;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v31;
    *(_QWORD *)(inited + 104) = v32;
    *(_QWORD *)(inited + 80) = v34;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v15, v58, v13);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v60 = v35;
    v36 = swift_initStackObject();
    v59 = xmmword_235283260;
    *(_OWORD *)(v36 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v37 = v36;
      outlined init with copy of AnyTrackedValue(inited + 32, v36 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v51 = inited;
        v33 = v52 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v37 + 72);
        *(_OWORD *)(v37 + 128) = 0u;
        *(_QWORD *)(v37 + 144) = 0;
        *(_OWORD *)(v37 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v33, v37, v33, (uint64_t)v15);
        outlined init with copy of CVarArg?(v37 + 112, (uint64_t)&v61, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v65)
        {
LABEL_22:
          outlined destroy of ScrollStateRequest?((uint64_t)&v61, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v44 = *(void (**)(char *, uint64_t))(v57 + 8);
          v44(v58, v13);
          v44(v15, v13);
          v20 = v54;
          a6 = v55;
          goto LABEL_23;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v61, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_17:
          v38 = __swift_project_value_buffer(v13, (uint64_t)static OSSignpostID.continuation);
          v39 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 24);
          v39(v15, v38, v13);
          v40 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v41 = swift_initStackObject();
            *(_OWORD *)(v41 + 16) = v59;
            *(_OWORD *)(v41 + 32) = 0u;
            *(_OWORD *)(v41 + 48) = 0u;
            *(_OWORD *)(v41 + 64) = 0u;
            *(_OWORD *)(v41 + 80) = 0u;
            *(_OWORD *)(v41 + 96) = 0u;
            *(_OWORD *)(v41 + 128) = 0u;
            *(_QWORD *)(v41 + 144) = 0;
            *(_OWORD *)(v41 + 112) = 0u;
            v42 = v41 + 112;
            specialized withKDebugValues(_:_:closure:)(v33, v41, v33, (uint64_t)v15);
            outlined init with copy of CVarArg?(v42, (uint64_t)&v61, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v40);
            swift_bridgeObjectRelease();
            if (!v65)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v61, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v40);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v43 = __swift_project_value_buffer(v13, (uint64_t)static OSSignpostID.continuation);
            v39(v15, v43, v13);
          }
          goto LABEL_22;
        }
LABEL_27:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_23:
  AGGraphClearUpdate();
  v61 = v20;
  v62 = a6;
  *(float *)&v45 = (*(float (**)(unint64_t *))(*(_QWORD *)v56 + 104))(&v61);
  v46 = a4;
  v61 = __PAIR64__(v47, v45);
  v48 = a3;
  v62 = __PAIR64__(v50, v49);
  v63 = v46;
  v64 = v48;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  AGGraphSetOutputValue();
  swift_release();
  swift_release_n();
  return (unint64_t *)swift_release();
}

uint64_t *specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for OSSignpostID();
  v52 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v45 - v13;
  result = (uint64_t *)AGGraphGetValue();
  v18 = *result;
  v17 = result[1];
  if ((a2 & 1) != 0)
    goto LABEL_2;
  if ((v16 & 1) == 0)
    return result;
  if ((a5 & 1) == 0)
  {
LABEL_2:
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    v20 = swift_retain_n();
    v21 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      swift_release();
      return (uint64_t *)swift_release();
    }
  }
  PropertyList.Tracker.reset()();
  v50 = v17;
  v51 = v14;
  if (v18)
    v19 = *(_QWORD *)(v18 + 64);
  else
    v19 = 0;
  v22 = *(_QWORD *)(a4 + 16);
  swift_retain_n();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v22 + 16));
  *(_QWORD *)(v22 + 24) = v19;
  os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 16));
  swift_release();
  swift_release();
  v23 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v46 = v23;
    v47 = a1;
    v48 = v18;
    v49 = a4;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v25 = AGTypeID.description.getter();
    v27 = v26;
    v28 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v29 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v25;
    v30 = inited + 32;
    *(_QWORD *)(inited + 64) = v29;
    *(_QWORD *)(inited + 40) = v27;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v28;
    *(_QWORD *)(inited + 104) = v29;
    *(_QWORD *)(inited + 80) = v31;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v11, v51, v9);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v54 = v32;
    v33 = swift_initStackObject();
    v53 = xmmword_235283260;
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v34 = v33;
      outlined init with copy of AnyTrackedValue(inited + 32, v33 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v45 = inited;
        v30 = v46 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v34 + 72);
        *(_OWORD *)(v34 + 128) = 0u;
        *(_QWORD *)(v34 + 144) = 0;
        *(_OWORD *)(v34 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v30, v34, v30, (uint64_t)v11);
        outlined init with copy of CVarArg?(v34 + 112, (uint64_t)&v55, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v57)
        {
LABEL_22:
          outlined destroy of ScrollStateRequest?((uint64_t)&v55, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v41 = *(void (**)(char *, uint64_t))(v52 + 8);
          v41(v51, v9);
          v41(v11, v9);
          v18 = v48;
          a4 = v49;
          a1 = v47;
          goto LABEL_23;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v55, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_17:
          v35 = __swift_project_value_buffer(v9, (uint64_t)static OSSignpostID.continuation);
          v36 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 24);
          v36(v11, v35, v9);
          v37 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v38 = swift_initStackObject();
            *(_OWORD *)(v38 + 16) = v53;
            *(_OWORD *)(v38 + 32) = 0u;
            *(_OWORD *)(v38 + 48) = 0u;
            *(_OWORD *)(v38 + 64) = 0u;
            *(_OWORD *)(v38 + 80) = 0u;
            *(_OWORD *)(v38 + 96) = 0u;
            *(_OWORD *)(v38 + 128) = 0u;
            *(_QWORD *)(v38 + 144) = 0;
            *(_OWORD *)(v38 + 112) = 0u;
            v39 = v38 + 112;
            specialized withKDebugValues(_:_:closure:)(v30, v38, v30, (uint64_t)v11);
            outlined init with copy of CVarArg?(v39, (uint64_t)&v55, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v37);
            swift_bridgeObjectRelease();
            if (!v57)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v55, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v37);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v40 = __swift_project_value_buffer(v9, (uint64_t)static OSSignpostID.continuation);
            v36(v11, v40, v9);
          }
          goto LABEL_22;
        }
LABEL_27:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_23:
  AGGraphClearUpdate();
  v55 = v18;
  v56 = a4;
  LODWORD(v55) = (*(float (**)(uint64_t *))(*(_QWORD *)a1 + 104))(&v55);
  HIDWORD(v55) = v42;
  v56 = __PAIR64__(v44, v43);
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  AGGraphSetOutputValue();
  swift_release();
  swift_release_n();
  return (uint64_t *)swift_release();
}

uint64_t *specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, double a3, double a4, double a5, uint64_t a6, unint64_t a7, char a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  double v64;
  int v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v15 = type metadata accessor for OSSignpostID();
  v56 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v57 = (char *)&v50 - v19;
  result = (uint64_t *)AGGraphGetValue();
  v22 = *result;
  v23 = result[1];
  if ((a2 & 1) != 0)
    goto LABEL_2;
  if ((v21 & 1) == 0)
    return result;
  if ((a8 & 1) == 0)
  {
LABEL_2:
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    v25 = swift_retain_n();
    v26 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      swift_release();
      return (uint64_t *)swift_release();
    }
  }
  PropertyList.Tracker.reset()();
  v55 = a1;
  if (v22)
    v24 = *(_QWORD *)(v22 + 64);
  else
    v24 = 0;
  v27 = *(_QWORD *)(a7 + 16);
  swift_retain_n();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v27 + 16));
  *(_QWORD *)(v27 + 24) = v24;
  os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 16));
  swift_release();
  swift_release();
  v28 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v51 = v28;
    v52 = v23;
    v53 = v22;
    v54 = a7;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v30 = AGTypeID.description.getter();
    v32 = v31;
    v33 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v34 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v30;
    v35 = inited + 32;
    *(_QWORD *)(inited + 64) = v34;
    *(_QWORD *)(inited + 40) = v32;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v33;
    *(_QWORD *)(inited + 104) = v34;
    *(_QWORD *)(inited + 80) = v36;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v17, v57, v15);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v59 = v37;
    v38 = swift_initStackObject();
    v58 = xmmword_235283260;
    *(_OWORD *)(v38 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v39 = v38;
      outlined init with copy of AnyTrackedValue(inited + 32, v38 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v50 = inited;
        v35 = v51 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v39 + 72);
        *(_OWORD *)(v39 + 128) = 0u;
        *(_QWORD *)(v39 + 144) = 0;
        *(_OWORD *)(v39 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v35, v39, v35, (uint64_t)v17);
        outlined init with copy of CVarArg?(v39 + 112, (uint64_t)&v60, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (v63 == 0.0)
        {
LABEL_22:
          outlined destroy of ScrollStateRequest?((uint64_t)&v60, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v46 = *(void (**)(char *, uint64_t))(v56 + 8);
          v46(v57, v15);
          v46(v17, v15);
          v22 = v53;
          a7 = v54;
          goto LABEL_23;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v60, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_17:
          v40 = __swift_project_value_buffer(v15, (uint64_t)static OSSignpostID.continuation);
          v41 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 24);
          v41(v17, v40, v15);
          v42 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v43 = swift_initStackObject();
            *(_OWORD *)(v43 + 16) = v58;
            *(_OWORD *)(v43 + 32) = 0u;
            *(_OWORD *)(v43 + 48) = 0u;
            *(_OWORD *)(v43 + 64) = 0u;
            *(_OWORD *)(v43 + 80) = 0u;
            *(_OWORD *)(v43 + 96) = 0u;
            *(_OWORD *)(v43 + 128) = 0u;
            *(_QWORD *)(v43 + 144) = 0;
            *(_OWORD *)(v43 + 112) = 0u;
            v44 = v43 + 112;
            specialized withKDebugValues(_:_:closure:)(v35, v43, v35, (uint64_t)v17);
            outlined init with copy of CVarArg?(v44, (uint64_t)&v60, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v42);
            swift_bridgeObjectRelease();
            if (v63 == 0.0)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v60, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v42);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v45 = __swift_project_value_buffer(v15, (uint64_t)static OSSignpostID.continuation);
            v41(v17, v45, v15);
          }
          goto LABEL_22;
        }
LABEL_27:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_23:
  AGGraphClearUpdate();
  v60 = v22;
  v61 = a7;
  LODWORD(v60) = (*(float (**)(uint64_t *))(*(_QWORD *)v55 + 104))(&v60);
  HIDWORD(v60) = v47;
  v61 = __PAIR64__(v49, v48);
  v62 = a3;
  v63 = a4;
  v64 = a5;
  v65 = 1056964608;
  v66 = 0;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  AGGraphSetOutputValue();
  swift_release();
  swift_release_n();
  return (uint64_t *)swift_release();
}

_QWORD *specialized SizeFittingTextCache.CacheEntry.result(for:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[6];
  uint64_t v26[2];

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = (_QWORD *)a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v25[2] = *a2;
  v25[3] = v5;
  v25[4] = v6;
  v25[5] = (uint64_t)v7;
  v22 = v9;
  v23 = v8;
  v26[0] = v8;
  v26[1] = v9;
  type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  v11 = v10;
  v12 = (uint64_t *)(v2 + *(int *)(v10 + 52));
  v14 = *v12;
  v13 = v12[1];
  v24 = v12[2];
  if (*v12)
  {
    v21 = v10;
    v15 = *(_BYTE *)(v2 + *(int *)(v10 + 56));
    swift_retain();
    swift_retain();
    swift_retain();
    if (!ResolvedTextHelper.shouldUpdate(for:inputChanged:)(v4, v5, v6, (uint64_t)v7, v26, v15))
    {
      v19 = 0;
      v17 = (_QWORD *)v14;
      v20 = v13;
      v18 = v24;
      v11 = v21;
      goto LABEL_7;
    }
    swift_release();
    swift_release();
    swift_release();
    v11 = v21;
  }
  v25[0] = v23;
  v25[1] = v22;
  result = ResolvedTextHelper.resolve(_:with:sizeFitting:)(v4, v5, v6, v7, v25, 1);
  if (result)
  {
    v17 = result;
    v18 = 0;
    v19 = 1;
    v20 = swift_retain();
LABEL_7:
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v14);
    *v12 = (uint64_t)v17;
    v12[1] = v20;
    v12[2] = v18;
    *(_BYTE *)(v2 + *(int *)(v11 + 56)) = 0;
    *a1 = v17;
    a1[1] = v20;
    a1[2] = v18;
    swift_retain();
    swift_retain();
    swift_retain();
    return (_QWORD *)v19;
  }
  __break(1u);
  return result;
}

uint64_t specialized SizeFittingTextCache.suggestedVariant(for:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  _BYTE v31[16];
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;

  if ((*(_BYTE *)(v5 + 89) & 1) != 0)
    goto LABEL_9;
  v7 = v5;
  v11 = result;
  v12 = *(_BYTE *)(v5 + 88);
  v13 = *(_QWORD *)(v5 + 80);
  v14 = *(_DWORD *)(v5 + 72);
  v16 = *(_QWORD *)(v5 + 56);
  v15 = *(_QWORD *)(v5 + 64);
  v17 = *(_BYTE *)(v5 + 49);
  v18 = *(_BYTE *)(v5 + 48);
  v43 = result;
  v19 = a2 & 1;
  v44 = a2 & 1;
  v45 = a3;
  v20 = a4 & 1;
  v46 = a4 & 1;
  v39 = v15;
  v40 = v14 & 1;
  v41 = v13;
  v42 = v12 & 1;
  result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v18, v17);
  if ((result & 1) == 0)
    goto LABEL_9;
  v36 = a2;
  v37 = a4;
  v38 = 0;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = &v38;
  MEMORY[0x24BDAC7A8](v21);
  v32 = v11;
  v33 = v19;
  v34 = a3;
  v35 = v20;
  v22 = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v16, (void (*)(void))partial apply for specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:), v21, (void (*)(__int128 *__return_ptr, __int128 *))partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v31);
  swift_release();
  result = swift_beginAccess();
  if (v38 == 1)
  {
    if ((*(_BYTE *)(v7 + 89) & 1) == 0)
    {
      v23 = *(_BYTE *)(v7 + 88);
      v24 = *(_QWORD *)(v7 + 80);
      v25 = *(_DWORD *)(v7 + 72);
      v27 = *(_QWORD *)(v7 + 56);
      v26 = *(_QWORD *)(v7 + 64);
      v28 = *(_BYTE *)(v7 + 49);
      v29 = *(_BYTE *)(v7 + 48);
      v43 = v11;
      v44 = v36 & 1;
      v45 = a3;
      v46 = v37 & 1;
      v39 = v26;
      v40 = v25 & 1;
      v41 = v24;
      v42 = v23 & 1;
      result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v29, v28);
      if ((result & 1) != 0)
      {
        if (v27 == v16
          || (MEMORY[0x24BDAC7A8](result),
              v32 = v11,
              v33 = v36 & 1,
              v34 = a3,
              v35 = v37 & 1,
              result = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v27, (void (*)(void))_ViewInputs.base.modify, 0, (void (*)(__int128 *__return_ptr, __int128 *))partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v31), (result & 1) != 0))
        {
          v30 = 0;
          goto LABEL_10;
        }
      }
    }
LABEL_9:
    v27 = 0;
    v30 = 1;
    goto LABEL_10;
  }
  if ((v22 & 1) != 0)
    v27 = v16;
  else
    v27 = 0;
  v30 = v22 ^ 1;
LABEL_10:
  *(_QWORD *)a5 = v27;
  *(_BYTE *)(a5 + 8) = v30 & 1;
  return result;
}

{
  uint64_t v5;
  uint64_t v7;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  _BYTE v31[16];
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;

  if ((*(_BYTE *)(v5 + 89) & 1) != 0)
    goto LABEL_9;
  v7 = v5;
  v11 = result;
  v12 = *(_BYTE *)(v5 + 88);
  v13 = *(_QWORD *)(v5 + 80);
  v14 = *(_DWORD *)(v5 + 72);
  v16 = *(_QWORD *)(v5 + 56);
  v15 = *(_QWORD *)(v5 + 64);
  v17 = *(_BYTE *)(v5 + 49);
  v18 = *(_BYTE *)(v5 + 48);
  v43 = result;
  v19 = a2 & 1;
  v44 = a2 & 1;
  v45 = a3;
  v20 = a4 & 1;
  v46 = a4 & 1;
  v39 = v15;
  v40 = v14 & 1;
  v41 = v13;
  v42 = v12 & 1;
  result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v18, v17);
  if ((result & 1) == 0)
    goto LABEL_9;
  v36 = a2;
  v37 = a4;
  v38 = 0;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = &v38;
  MEMORY[0x24BDAC7A8](v21);
  v32 = v11;
  v33 = v19;
  v34 = a3;
  v35 = v20;
  v22 = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v16, (void (*)(uint64_t))closure #1 in SizeFittingTextCache.suggestedVariant(for:)specialized partial apply, v21, (void (*)(__int128 *__return_ptr, __int128 *))partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v31);
  swift_release();
  result = swift_beginAccess();
  if (v38 == 1)
  {
    if ((*(_BYTE *)(v7 + 89) & 1) == 0)
    {
      v23 = *(_BYTE *)(v7 + 88);
      v24 = *(_QWORD *)(v7 + 80);
      v25 = *(_DWORD *)(v7 + 72);
      v27 = *(_QWORD *)(v7 + 56);
      v26 = *(_QWORD *)(v7 + 64);
      v28 = *(_BYTE *)(v7 + 49);
      v29 = *(_BYTE *)(v7 + 48);
      v43 = v11;
      v44 = v36 & 1;
      v45 = a3;
      v46 = v37 & 1;
      v39 = v26;
      v40 = v25 & 1;
      v41 = v24;
      v42 = v23 & 1;
      result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v29, v28);
      if ((result & 1) != 0)
      {
        if (v27 == v16
          || (MEMORY[0x24BDAC7A8](result),
              v32 = v11,
              v33 = v36 & 1,
              v34 = a3,
              v35 = v37 & 1,
              result = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v27, (void (*)(uint64_t))_ViewInputs.base.modify, 0, (void (*)(__int128 *__return_ptr, __int128 *))partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v31), (result & 1) != 0))
        {
          v30 = 0;
          goto LABEL_10;
        }
      }
    }
LABEL_9:
    v27 = 0;
    v30 = 1;
    goto LABEL_10;
  }
  if ((v22 & 1) != 0)
    v27 = v16;
  else
    v27 = 0;
  v30 = v22 ^ 1;
LABEL_10:
  *(_QWORD *)a5 = v27;
  *(_BYTE *)(a5 + 8) = v30 & 1;
  return result;
}

uint64_t specialized SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[6];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;

  LOBYTE(v31) = 1;
  LOBYTE(v28) = 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)(0, 1, 0, 1, (uint64_t)&v33);
  if ((v34 & 1) != 0)
  {
    swift_beginAccess();
    swift_retain();
    LOBYTE(v31) = 1;
    LOBYTE(v28) = 1;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(0, 1, 0.0, 1, a2 + 2, 0, 1, (uint64_t *)&v31, 0, 1);
    swift_endAccess();
    v3 = v31;
  }
  else
  {
    v3 = v33;
    v31 = v33;
  }
  swift_beginAccess();
  v5 = a2[12];
  v4 = a2[13];
  v6 = a2[14];
  v7 = a2[15];
  v8 = a2[16];
  v9 = a2[17];
  swift_beginAccess();
  v10 = a2[5];
  v26 = v5;
  outlined copy of Text?(v5, v4, v6, v7);
  swift_retain();
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  a2[5] = v10;
  if ((result & 1) != 0)
  {
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  v10 = result;
  a2[5] = result;
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_12;
LABEL_6:
  if (v3 >= *(_QWORD *)(v10 + 16))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  v13 = v12;
  v14 = v10
      + ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v3;
  v27[0] = v26;
  v27[1] = v4;
  v27[2] = v6;
  v27[3] = v7;
  v27[4] = v8;
  v27[5] = v9;
  specialized SizeFittingTextCache.CacheEntry.result(for:)(&v28, v27);
  v15 = v29;
  v16 = *(void **)(v29 + 192);
  if (v16)
  {
    v17 = objc_msgSend(v16, sel_string);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

  }
  else
  {
    v25 = 0;
    v19 = (void *)0xE000000000000000;
  }
  v20 = v28;
  v21 = v30;
  v22 = (uint64_t *)(v14 + *(int *)(v13 + 52));
  outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v22);
  *v22 = v20;
  v22[1] = v15;
  v22[2] = v21;
  outlined consume of Text?(v26, v4, v6, v7);
  swift_release();
  swift_release();
  swift_endAccess();
  v31 = 0;
  v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v31 = 0xD00000000000001ELL;
  v32 = 0x80000002352DF290;
  v23._countAndFlagsBits = v25;
  v23._object = v19;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 41;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return v31;
}

uint64_t specialized LeafResponderFilter.responder.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LeafViewResponder<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_BYTE *)(v1 + 72) = 1;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    v2 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v1 + 112) = 0;
    *(_QWORD *)(v1 + 120) = v2;
    *(_DWORD *)(v1 + 128) = 0;
    *(_BYTE *)(v1 + 132) = 1;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 136) = 0;
    *(_QWORD *)(v1 + 144) = 0;
    swift_unknownObjectWeakInit();
    swift_weakInit();
    swift_retain();
    v3 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    MEMORY[0x23B7C9E44](v3 + 200);
    v4 = *(_QWORD *)(v3 + 208);
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v1 + 24) = v4;
    swift_unknownObjectWeakAssign();
    swift_release();
    swift_unknownObjectRelease();
    *(_QWORD *)(v0 + 16) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LeafViewResponder<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    *(_BYTE *)(v1 + 56) = 1;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    v2 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v1 + 96) = 0;
    *(_QWORD *)(v1 + 104) = v2;
    *(_DWORD *)(v1 + 112) = 0;
    *(_BYTE *)(v1 + 116) = 1;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 128) = 0;
    swift_unknownObjectWeakInit();
    swift_weakInit();
    swift_retain();
    v3 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    MEMORY[0x23B7C9E44](v3 + 200);
    v4 = *(_QWORD *)(v3 + 208);
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v1 + 24) = v4;
    swift_unknownObjectWeakAssign();
    swift_release();
    swift_unknownObjectRelease();
    *(_QWORD *)(v0 + 16) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t specialized LeafResponderFilter.updateValue()()
{
  float *Value;
  float v1;
  float v2;
  char v3;
  char v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char v10;
  char v11;
  double *v12;
  double v13;
  double v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  float v25;
  float v26;
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  specialized LeafResponderFilter.responder.getter();
  Value = (float *)AGGraphGetValue();
  v1 = Value[2];
  v25 = Value[1];
  v26 = *Value;
  v2 = Value[3];
  v4 = v3 & 1;
  v5 = (double *)AGGraphGetValue();
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v11 = v10 & 1;
  v12 = (double *)AGGraphGetValue();
  v13 = *v12;
  v14 = v12[1];
  v16 = v15 & 1;
  v17 = AGGraphGetValue();
  v18 = *(_QWORD *)(v17 + 32);
  v19 = *(_OWORD *)(v17 + 16);
  v27[0] = *(_OWORD *)v17;
  v27[1] = v19;
  v28 = v18;
  v21 = v20 & 1;
  outlined retain of ViewTransform((uint64_t)v27);
  v22 = specialized LeafResponderFilter.responder.getter();
  swift_beginAccess();
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v11, v16, (uint64_t)v27, v21, v22, v26, v25, v1, v2, v6, v7, v8, v9, v13, v14);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined release of ViewTransform((uint64_t)v27);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_235283250;
    *(_QWORD *)(v24 + 32) = specialized LeafResponderFilter.responder.getter();
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  char v0;
  char v1;
  double *Value;
  double v3;
  double v4;
  double v5;
  double v6;
  char v7;
  char v8;
  double *v9;
  double v10;
  double v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  specialized LeafResponderFilter.responder.getter();
  AGGraphGetValue();
  v1 = v0 & 1;
  Value = (double *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v5 = Value[2];
  v6 = Value[3];
  v8 = v7 & 1;
  v9 = (double *)AGGraphGetValue();
  v10 = *v9;
  v11 = v9[1];
  v13 = v12 & 1;
  v14 = AGGraphGetValue();
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(_OWORD *)(v14 + 16);
  v22[0] = *(_OWORD *)v14;
  v22[1] = v16;
  v23 = v15;
  v18 = v17 & 1;
  outlined retain of ViewTransform((uint64_t)v22);
  v19 = specialized LeafResponderFilter.responder.getter();
  swift_beginAccess();
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v1, v8, v13, (uint64_t)v22, v18, v19, v3, v4, v5, v6, v10, v11);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined release of ViewTransform((uint64_t)v22);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_235283250;
    *(_QWORD *)(v21 + 32) = specialized LeafResponderFilter.responder.getter();
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ChildEnvironment.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t result;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  Value = AGGraphGetValue();
  v3 = v2;
  v4 = *(_QWORD *)Value;
  v5 = *(_BYTE *)(Value + 8);
  AGGraphGetValue();
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 8))
    {
      swift_retain();
      swift_retain_n();
      swift_retain();
      v7 = specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()();
      swift_release();
      if ((v7 & 1) != 0)
        goto LABEL_9;
      goto LABEL_6;
    }
LABEL_8:
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_6:
  if (AGGraphGetOutputValue())
  {
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_9:
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  result = swift_release();
  *(_QWORD *)(v0 + 8) = v4;
  *(_BYTE *)(v0 + 16) = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t *Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = v2;
  v4 = *Value;
  v5 = Value[1];
  AGGraphGetValue();
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 8))
    {
      swift_retain();
      swift_retain_n();
      swift_retain();
      v7 = specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()();
      swift_release();
      if ((v7 & 1) != 0)
        goto LABEL_9;
      goto LABEL_6;
    }
LABEL_8:
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_6:
  if (AGGraphGetOutputValue())
  {
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_9:
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  result = swift_release();
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t *Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = v2;
  v5 = *Value;
  v4 = Value[1];
  v6 = (uint64_t *)AGGraphGetValue();
  v7 = v6[1];
  v17 = *v6;
  v18 = v7;
  v19 = v8 & 1;
  if ((v8 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    if ((v3 & 1) != 0)
    {
      v9 = *(_QWORD *)(v0 + 8);
      v10 = *(_QWORD *)(v0 + 16);
      v14 = v5;
      v15 = v4;
      v16 = 1;
      MEMORY[0x24BDAC7A8](v6);
      v13[2] = &v14;
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      outlined copy of _EnvironmentKeyWritingModifier<Font?>?(v9);
      v11 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_EnvironmentKeyWritingModifierVyAD4FontVSgG_s5NeverOSbTg5((void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue(), (uint64_t)v13, v9, v10);
      outlined consume of _EnvironmentKeyWritingModifier<Font?>?(v9);
      swift_release();
      swift_release_n();
      swift_release();
      swift_release();
      if (v11 == 2 || (v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    if (AGGraphGetOutputValue())
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
LABEL_9:
  v14 = v4;
  swift_retain();
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  v14 = v17;
  v15 = v18;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  result = outlined consume of _EnvironmentKeyWritingModifier<Font?>?(*(_QWORD *)(v0 + 8));
  *(_QWORD *)(v0 + 8) = v5;
  *(_QWORD *)(v0 + 16) = v4;
  return result;
}

uint64_t specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()()
{
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, RedactionReasons>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE2B60]);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    return AGCompareValues() ^ 1;
  else
    return 1;
}

{
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE2B60]);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    return AGCompareValues() ^ 1;
  else
    return 1;
}

{
  type metadata accessor for WritableKeyPath<EnvironmentValues, Font?>();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 1;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return AGCompareValues() ^ 1;
}

BOOL specialized ResettableGestureRule.resetIfNeeded()()
{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  _BOOL8 v4;

  v1 = *(_DWORD *)(v0 + 40);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    OutputValue = AGGraphGetOutputValue();
    v4 = 1;
    if (OutputValue)
    {
      v3 = *(unsigned __int8 *)(OutputValue + 24);
      if (v3 == 2
        || v3 == 3 && !(*(_QWORD *)(OutputValue + 8) | *(_QWORD *)(OutputValue + 16) | *(_QWORD *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(_DWORD *)(v0 + 36) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    v4 = 1;
    *(_BYTE *)(v0 + 32) = 1;
    *(_DWORD *)(v0 + 40) = *(_DWORD *)AGGraphGetValue();
  }
  return v4;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  _BOOL8 v5;

  v1 = *(_DWORD *)(v0 + 48);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    OutputValue = AGGraphGetOutputValue();
    v5 = 1;
    if (OutputValue)
    {
      v3 = *(unsigned __int8 *)(OutputValue + 9);
      if (v3 == 2)
        return 0;
      if (v3 == 3 && !*(_BYTE *)(OutputValue + 8) && *(_QWORD *)OutputValue == 0)
        return 0;
    }
  }
  else
  {
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    v5 = 1;
    *(_BYTE *)(v0 + 32) = 1;
    *(_QWORD *)(v0 + 40) = 0;
    *(_DWORD *)(v0 + 48) = *(_DWORD *)AGGraphGetValue();
  }
  return v5;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  int8x16_t v4;
  _BOOL8 v5;

  v1 = *(_DWORD *)(v0 + 40);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    OutputValue = AGGraphGetOutputValue();
    v5 = 1;
    if (OutputValue)
    {
      v3 = *(unsigned __int8 *)(OutputValue + 72);
      if (v3 == 2)
        return 0;
      if (v3 == 3)
      {
        v4 = vorrq_s8(vorrq_s8(*(int8x16_t *)(OutputValue + 8), *(int8x16_t *)(OutputValue + 40)), vorrq_s8(*(int8x16_t *)(OutputValue + 24), *(int8x16_t *)(OutputValue + 56)));
        if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | *(_QWORD *)OutputValue))
          return 0;
      }
    }
  }
  else
  {
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    v5 = 1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    AGGraphSetOutputValue();
    *(_DWORD *)(v0 + 40) = *(_DWORD *)AGGraphGetValue();
  }
  return v5;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  _BOOL8 v5;

  v1 = *(_DWORD *)(v0 + 36);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    OutputValue = AGGraphGetOutputValue();
    v5 = 1;
    if (OutputValue)
    {
      v3 = *(unsigned __int8 *)(OutputValue + 9);
      if (v3 == 2)
        return 0;
      if (v3 == 3 && !*(_BYTE *)(OutputValue + 8) && *(_QWORD *)OutputValue == 0)
        return 0;
    }
  }
  else
  {
    *(_QWORD *)(v0 + 24) = 0;
    v5 = 1;
    *(_BYTE *)(v0 + 32) = 1;
    *(_DWORD *)(v0 + 36) = *(_DWORD *)AGGraphGetValue();
  }
  return v5;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  _BOOL8 v4;

  v1 = *(_DWORD *)(v0 + 40);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    OutputValue = AGGraphGetOutputValue();
    v4 = 1;
    if (OutputValue)
    {
      v3 = *(unsigned __int8 *)(OutputValue + 24);
      if (v3 == 2
        || v3 == 3 && !(*(_QWORD *)(OutputValue + 8) | *(_QWORD *)(OutputValue + 16) | *(_QWORD *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    v4 = 1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    AGGraphSetOutputValue();
    *(_DWORD *)(v0 + 40) = *(_DWORD *)AGGraphGetValue();
  }
  return v4;
}

uint64_t specialized ResettableGestureRule.resetIfNeeded()()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t OutputValue;
  int v4;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(_DWORD *)AGGraphGetValue();
  if (v1 == v2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    OutputValue = AGGraphGetOutputValue();
    if (OutputValue)
    {
      v4 = *(unsigned __int8 *)(OutputValue + 24);
      if (v4 == 2
        || v4 == 3 && !(*(_QWORD *)(OutputValue + 8) | *(_QWORD *)(OutputValue + 16) | *(_QWORD *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(_DWORD *)(v0 + 16) = v2;
  }
  return 1;
}

{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t OutputValue;
  int v4;

  v1 = *(_DWORD *)(v0 + 12);
  v2 = *(_DWORD *)AGGraphGetValue();
  if (v1 == v2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    OutputValue = AGGraphGetOutputValue();
    if (OutputValue)
    {
      v4 = *(unsigned __int8 *)(OutputValue + 24);
      if (v4 == 2
        || v4 == 3 && !(*(_QWORD *)(OutputValue + 8) | *(_QWORD *)(OutputValue + 16) | *(_QWORD *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(_DWORD *)(v0 + 12) = v2;
  }
  return 1;
}

uint64_t specialized SpacerLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, double))
{
  uint64_t v4;
  uint64_t Value;
  uint64_t v8;
  double v9;

  if (*(_BYTE *)(v4 + 4) == 2 && *(_DWORD *)(v4 + 8) != *MEMORY[0x24BE096C0])
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, (uint64_t)&type metadata for Axis, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    AGGraphGetValue();
  }
  Value = AGGraphGetValue();
  MEMORY[0x24BDAC7A8](Value);
  v9 = MEMORY[0x24BDAC7A8](v8);
  return a4(a2, v9);
}

uint64_t specialized EventListenerPhase.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Value;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  Swift::UInt v50;
  Swift::UInt v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  int64_t v79;
  uint64_t v80;
  __int128 v81[2];
  uint64_t v82;
  _QWORD v83[3];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[5];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  __int128 v95;
  char v96;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v105;
  uint64_t v106;

  v1 = v0;
  v106 = *MEMORY[0x24BDAC8D0];
  result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0)
    return result;
  v105 = 0;
  memset(v104, 0, sizeof(v104));
  type metadata accessor for [EventID : EventType]();
  v3 = *(_QWORD *)AGGraphGetValue();
  v73 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v74 = (unint64_t)(v4 + 63) >> 6;
  v76 = v3;
  swift_bridgeObjectRetain();
  v79 = 0;
  v7 = &lazy cache variable for type metadata for SpatialEventType;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  while (2)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v79 << 6);
LABEL_8:
    v10 = *(_QWORD *)(v76 + 56);
    v11 = (uint64_t *)(*(_QWORD *)(v76 + 48) + 16 * v9);
    v13 = *v11;
    v12 = v11[1];
    *(_QWORD *)&v100 = v13;
    *((_QWORD *)&v100 + 1) = v12;
    outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v101);
    while (1)
    {
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v100, (uint64_t)&v87);
      v17 = v87;
      if (!(_QWORD)v87)
      {
        swift_release();
        outlined init with copy of CVarArg?((uint64_t)v104, (uint64_t)&v87, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        if (!*((_QWORD *)&v88 + 1))
        {
          outlined destroy of ScrollStateRequest?((uint64_t)&v87, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
          type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
          if (!AGGraphGetOutputValue())
          {
            outlined consume of GesturePhase<SpatialEvent>?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
            v64 = 0;
            v57 = 0;
            v65 = 0;
            v66 = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v67 = 0;
            v71 = 5;
            v59 = 1;
            goto LABEL_73;
          }
          return outlined destroy of ScrollStateRequest?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        }
        outlined init with take of ScrollStateRequest(&v87, (uint64_t)v97);
        if ((*(_BYTE *)(v1 + 20) & 1) == 0)
        {
          AGGraphClearUpdate();
          Value = AGGraphGetValue();
          v41 = *(_QWORD *)Value;
          v42 = *(double *)(Value + 8);
          v43 = *(double *)(Value + 16);
          v44 = *(double *)(Value + 24);
          v45 = *(double *)(Value + 32);
          v46 = AGGraphGetValue();
          v47 = *(double *)v46;
          v48 = *(double *)(v46 + 8);
          v49 = v44 - (*(double *)v46 - v42);
          swift_retain();
          result = AGGraphSetUpdate();
          *(_QWORD *)&v100 = v41;
          *((double *)&v100 + 1) = v47;
          *(double *)&v101 = v48;
          *((double *)&v101 + 1) = v49;
          *(double *)&v102 = v45 - (v48 - v43);
          v50 = *(_QWORD *)(v1 + 24);
          if (!v50)
          {
            __break(1u);
            return result;
          }
          v51 = *(_QWORD *)(v1 + 32);
          type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = xmmword_23527E860;
          *(_QWORD *)(v52 + 32) = v50;
          *(_QWORD *)(v52 + 40) = v51;
          outlined init with copy of AnyTrackedValue((uint64_t)v97, v52 + 48);
          v53 = specialized Dictionary.init(dictionaryLiteral:)(v52);
          swift_setDeallocating();
          type metadata accessor for (EventID, EventType)();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v86[0] = v53;
          swift_retain();
          specialized defaultConvertEventLocations<A>(_:converter:)(v86, (uint64_t)&v100);
          swift_release();
          v54 = v86[0];
          if (!*(_QWORD *)(v86[0] + 16))
            goto LABEL_77;
          v55 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v51);
          if ((v56 & 1) == 0)
          {
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
          }
          outlined init with copy of AnyTrackedValue(*(_QWORD *)(v54 + 56) + 40 * v55, (uint64_t)&v87);
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
          outlined init with take of ScrollStateRequest(&v87, (uint64_t)v97);
          swift_bridgeObjectRelease();
        }
        outlined init with copy of AnyTrackedValue((uint64_t)v97, (uint64_t)v86);
        SpatialEvent.init(_:)((uint64_t)v86, (uint64_t)&v87);
        v57 = *((_QWORD *)&v87 + 1);
        v58 = v87;
        v59 = v88;
        v60 = v90;
        v61 = v91;
        v62 = v92;
        v63 = v93;
        if ((_QWORD)v88 != 1)
        {
          v77 = v87;
          v78 = BYTE8(v88);
          v80 = v89;
          v68 = v98;
          v69 = v99;
          __swift_project_boxed_opaque_existential_1(v97, v98);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v69 + 8))(&v87, v68, v69);
          outlined consume of GesturePhase<SpatialEvent>?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
          if (v87 >= 2u)
          {
            v70 = v77;
            if (v87 == 2)
            {
              v75 = 5;
              v67 = 2;
            }
            else
            {
              outlined consume of HitTestableEvent?(v77, v57, v59);
              v70 = 0;
              v57 = 0;
              v59 = 0;
              v78 = 0;
              v80 = 0;
              v60 = 0;
              v61 = 0;
              v62 = 0;
              v63 = 0;
              v75 = 4;
              v67 = 3;
            }
          }
          else
          {
            v75 = 5;
            v67 = 1;
            v70 = v77;
          }
          v65 = v78;
          v64 = v70;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
          v66 = v80;
          v71 = v75;
          goto LABEL_73;
        }
        outlined consume of GesturePhase<SpatialEvent>?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
        outlined destroy of ScrollStateRequest?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        outlined consume of HitTestableEvent?(v58, v57, 1);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      }
      v18 = v7;
      v19 = *((_QWORD *)&v87 + 1);
      outlined init with take of ScrollStateRequest(&v88, (uint64_t)&v100);
      v21 = *((_QWORD *)&v101 + 1);
      v20 = v102;
      __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v97, v21, v20);
      v22 = v97[0];
      swift_release();
      if (v22)
        break;
      v39 = *(_QWORD *)(v1 + 24);
      if (v39 && *(_QWORD *)(v1 + 32) == v19 && v17 == v39)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
        v71 = 0;
        goto LABEL_71;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      if (v6)
        goto LABEL_7;
LABEL_9:
      v14 = v79 + 1;
      if (__OFADD__(v79, 1))
      {
        __break(1u);
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      if (v14 >= v74)
        goto LABEL_26;
      v15 = *(_QWORD *)(v73 + 8 * v14);
      if (v15)
        goto LABEL_12;
      v16 = v79 + 2;
      ++v79;
      if (v14 + 1 >= v74)
        goto LABEL_26;
      v15 = *(_QWORD *)(v73 + 8 * v16);
      if (v15)
        goto LABEL_15;
      v79 = v14 + 1;
      if (v14 + 2 >= v74)
        goto LABEL_26;
      v15 = *(_QWORD *)(v73 + 8 * (v14 + 2));
      if (v15)
      {
        v14 += 2;
LABEL_12:
        v6 = (v15 - 1) & v15;
        v9 = __clz(__rbit64(v15)) + (v14 << 6);
        v79 = v14;
        goto LABEL_8;
      }
      v16 = v14 + 3;
      v79 = v14 + 2;
      if (v14 + 3 < v74)
      {
        v15 = *(_QWORD *)(v73 + 8 * v16);
        if (v15)
        {
LABEL_15:
          v14 = v16;
          goto LABEL_12;
        }
        while (1)
        {
          v14 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_79;
          if (v14 >= v74)
            break;
          v15 = *(_QWORD *)(v73 + 8 * v14);
          ++v16;
          if (v15)
            goto LABEL_12;
        }
        v79 = v74 - 1;
      }
LABEL_26:
      v6 = 0;
      v103 = 0;
      v101 = 0u;
      v102 = 0u;
      v100 = 0u;
    }
    if ((*(_BYTE *)(v1 + 21) & 1) == 0)
    {
      v23 = *(_QWORD *)(v1 + 24);
      if (!v23 || *(_QWORD *)(v1 + 32) != v19 || v17 != v23)
      {
        v24 = *((_QWORD *)&v101 + 1);
        v25 = v102;
        __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v97, v24, v25);
        if (LOBYTE(v97[0]))
        {
          if (!v23
            || (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener), (*(_BYTE *)AGGraphGetValue() & 1) == 0))
          {
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
            v71 = 1;
            goto LABEL_71;
          }
        }
      }
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v100, (uint64_t)v97);
    outlined init with copy of AnyTrackedValue((uint64_t)v97, (uint64_t)v83);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    v7 = v18;
    type metadata accessor for ScrollStateRequest(0, v18);
    if (!swift_dynamicCast())
    {
      v82 = 0;
      memset(v81, 0, sizeof(v81));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      outlined destroy of ScrollStateRequest?((uint64_t)v81, (unint64_t *)&lazy cache variable for type metadata for SpatialEventType?, v18, (uint64_t)&protocol descriptor for SpatialEventType);
      if (!*(_QWORD *)(v1 + 24)
        || (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener), (*(_BYTE *)AGGraphGetValue() & 1) == 0))
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
        v71 = 3;
        goto LABEL_71;
      }
      goto LABEL_51;
    }
    outlined init with take of ScrollStateRequest(v81, (uint64_t)v86);
    outlined init with copy of AnyTrackedValue((uint64_t)v86, (uint64_t)v83);
    v27 = v84;
    v26 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v26 + 8) + 8))(v81, v27);
    v29 = v84;
    v28 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v28 + 8) + 16))(v81, v29);
    v30 = v84;
    v31 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    v32 = v84;
    v33 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v33 + 40))(v32, v33);
    v34 = v84;
    v35 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
    v36 = v84;
    v37 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v37 + 72))(v81, v36, v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    v38 = *(_QWORD *)(v1 + 24);
    if (!v38)
    {
      outlined destroy of ScrollStateRequest?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
      *(_QWORD *)(v1 + 24) = v17;
      *(_QWORD *)(v1 + 32) = v19;
      goto LABEL_50;
    }
    if (*(_QWORD *)(v1 + 32) == v19 && v17 == v38
      || (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener), *(_BYTE *)AGGraphGetValue() == 1))
    {
      outlined destroy of ScrollStateRequest?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
LABEL_50:
      outlined init with copy of AnyTrackedValue((uint64_t)&v100, (uint64_t)v104);
LABEL_51:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      if (v6)
        continue;
      goto LABEL_9;
    }
    break;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
  v71 = 2;
LABEL_71:
  v64 = 0;
  v57 = 0;
  v59 = 0;
  v65 = 0;
  v66 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v67 = 3;
LABEL_73:
  *(_QWORD *)&v87 = v64;
  *((_QWORD *)&v87 + 1) = v57;
  *(_QWORD *)&v88 = v59;
  *((_QWORD *)&v88 + 1) = v65;
  v89 = v66;
  v90 = v60;
  v91 = v61;
  v92 = v62;
  v93 = v63;
  v94 = v67;
  v95 = *(_OWORD *)(v1 + 24);
  v96 = v71;
  v72 = v66;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  AGGraphSetOutputValue();
  outlined consume of GesturePhase<SpatialEvent>?(v64, v57, v59, v65, v72, v60, v61, v62, v63, v67);
  return outlined destroy of ScrollStateRequest?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Value;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  Swift::UInt v42;
  Swift::UInt v43;
  uint64_t inited;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  __int128 v60[2];
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];
  uint64_t v66;
  __int128 v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  char v76;
  _OWORD v77[2];
  uint64_t v78;
  uint64_t v79;

  v1 = v0;
  v79 = *MEMORY[0x24BDAC8D0];
  result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0)
    return result;
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  type metadata accessor for [EventID : EventType]();
  v3 = *(_QWORD *)AGGraphGetValue();
  v56 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v57 = (unint64_t)(v4 + 63) >> 6;
  v58 = v3;
  swift_bridgeObjectRetain();
  v59 = 0;
  v7 = &lazy cache variable for type metadata for TappableEventType;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  while (2)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v59 << 6);
LABEL_8:
    v10 = *(_QWORD *)(v58 + 56);
    v11 = (uint64_t *)(*(_QWORD *)(v58 + 48) + 16 * v9);
    v13 = *v11;
    v12 = v11[1];
    *(_QWORD *)&v68 = v13;
    *((_QWORD *)&v68 + 1) = v12;
    outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v69);
    while (1)
    {
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v68, (uint64_t)&v72);
      v17 = v72;
      if (!v72)
      {
        swift_release();
        outlined init with copy of CVarArg?((uint64_t)v77, (uint64_t)&v68, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        if (!*((_QWORD *)&v69 + 1))
        {
          outlined destroy of ScrollStateRequest?((uint64_t)&v68, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
          type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
          if (!AGGraphGetOutputValue())
          {
            outlined consume of GesturePhase<TappableEvent>?(0, 0, 0, 255);
            v50 = 0;
            v49 = 0;
            v52 = 0;
            v55 = 5;
            v51 = 1;
            goto LABEL_73;
          }
          return outlined destroy of ScrollStateRequest?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        }
        outlined init with take of ScrollStateRequest(&v68, (uint64_t)&v72);
        if ((*(_BYTE *)(v1 + 20) & 1) == 0)
        {
          AGGraphClearUpdate();
          Value = AGGraphGetValue();
          v33 = *(_QWORD *)Value;
          v34 = *(double *)(Value + 8);
          v35 = *(double *)(Value + 16);
          v36 = *(double *)(Value + 24);
          v37 = *(double *)(Value + 32);
          v38 = AGGraphGetValue();
          v39 = *(double *)v38;
          v40 = *(double *)(v38 + 8);
          v41 = v36 - (*(double *)v38 - v34);
          swift_retain();
          result = AGGraphSetUpdate();
          *(_QWORD *)&v68 = v33;
          *((double *)&v68 + 1) = v39;
          *(double *)&v69 = v40;
          *((double *)&v69 + 1) = v41;
          *(double *)&v70 = v37 - (v40 - v35);
          v42 = *(_QWORD *)(v1 + 24);
          if (!v42)
          {
            __break(1u);
            return result;
          }
          v43 = *(_QWORD *)(v1 + 32);
          type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_23527E860;
          *(_QWORD *)(inited + 32) = v42;
          *(_QWORD *)(inited + 40) = v43;
          outlined init with copy of AnyTrackedValue((uint64_t)&v72, inited + 48);
          v45 = specialized Dictionary.init(dictionaryLiteral:)(inited);
          swift_setDeallocating();
          type metadata accessor for (EventID, EventType)();
          swift_arrayDestroy();
          v65[0] = v45;
          swift_retain();
          specialized defaultConvertEventLocations<A>(_:converter:)(v65, (uint64_t)&v68);
          swift_release();
          v46 = v65[0];
          if (!*(_QWORD *)(v65[0] + 16))
            goto LABEL_77;
          v47 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
          if ((v48 & 1) == 0)
          {
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
          }
          outlined init with copy of AnyTrackedValue(*(_QWORD *)(v46 + 56) + 40 * v47, (uint64_t)v67);
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
          outlined init with take of ScrollStateRequest(v67, (uint64_t)&v72);
          swift_bridgeObjectRelease();
        }
        outlined init with copy of AnyTrackedValue((uint64_t)&v72, (uint64_t)v67);
        TappableEvent.init(_:)((uint64_t)v67, (uint64_t)v65);
        v50 = v65[0];
        v49 = v65[1];
        v51 = v66;
        if (v66 != 1)
        {
          v53 = *((_QWORD *)&v74 + 1);
          v54 = v75;
          __swift_project_boxed_opaque_existential_1(&v72, *((uint64_t *)&v74 + 1));
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v54 + 8))(v67, v53, v54);
          outlined consume of GesturePhase<TappableEvent>?(0, 0, 0, 255);
          if (LOBYTE(v67[0]) >= 2u)
          {
            if (LOBYTE(v67[0]) == 2)
            {
              v55 = 5;
              v52 = 2;
            }
            else
            {
              outlined consume of HitTestableEvent?(v50, v49, v51);
              LOBYTE(v50) = 0;
              v49 = 0;
              v51 = 0;
              v55 = 4;
              v52 = 3;
            }
          }
          else
          {
            v55 = 5;
            v52 = 1;
          }
          v50 = v50;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
          goto LABEL_73;
        }
        outlined consume of GesturePhase<TappableEvent>?(0, 0, 0, 255);
        outlined destroy of ScrollStateRequest?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        outlined consume of HitTestableEvent?(v50, v49, 1);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
      }
      v18 = v7;
      v19 = v73;
      outlined init with take of ScrollStateRequest(&v74, (uint64_t)&v68);
      v21 = *((_QWORD *)&v69 + 1);
      v20 = v70;
      __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v67, v21, v20);
      v22 = *(_QWORD *)&v67[0];
      swift_release();
      if (v22)
        break;
      v31 = *(_QWORD *)(v1 + 24);
      if (v31 && *(_QWORD *)(v1 + 32) == v19 && v17 == v31)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        v55 = 0;
        goto LABEL_71;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      if (v6)
        goto LABEL_7;
LABEL_9:
      v14 = v59 + 1;
      if (__OFADD__(v59, 1))
      {
        __break(1u);
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      if (v14 >= v57)
        goto LABEL_26;
      v15 = *(_QWORD *)(v56 + 8 * v14);
      if (v15)
        goto LABEL_12;
      v16 = v59 + 2;
      ++v59;
      if (v14 + 1 >= v57)
        goto LABEL_26;
      v15 = *(_QWORD *)(v56 + 8 * v16);
      if (v15)
        goto LABEL_15;
      v59 = v14 + 1;
      if (v14 + 2 >= v57)
        goto LABEL_26;
      v15 = *(_QWORD *)(v56 + 8 * (v14 + 2));
      if (v15)
      {
        v14 += 2;
LABEL_12:
        v6 = (v15 - 1) & v15;
        v9 = __clz(__rbit64(v15)) + (v14 << 6);
        v59 = v14;
        goto LABEL_8;
      }
      v16 = v14 + 3;
      v59 = v14 + 2;
      if (v14 + 3 < v57)
      {
        v15 = *(_QWORD *)(v56 + 8 * v16);
        if (v15)
        {
LABEL_15:
          v14 = v16;
          goto LABEL_12;
        }
        while (1)
        {
          v14 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_79;
          if (v14 >= v57)
            break;
          v15 = *(_QWORD *)(v56 + 8 * v14);
          ++v16;
          if (v15)
            goto LABEL_12;
        }
        v59 = v57 - 1;
      }
LABEL_26:
      v6 = 0;
      v71 = 0;
      v69 = 0u;
      v70 = 0u;
      v68 = 0u;
    }
    if ((*(_BYTE *)(v1 + 21) & 1) == 0)
    {
      v23 = *(_QWORD *)(v1 + 24);
      if (!v23 || *(_QWORD *)(v1 + 32) != v19 || v17 != v23)
      {
        v24 = *((_QWORD *)&v69 + 1);
        v25 = v70;
        __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v67, v24, v25);
        if (LOBYTE(v67[0]))
        {
          if (!v23
            || (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener), (*(_BYTE *)AGGraphGetValue() & 1) == 0))
          {
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
            v55 = 1;
            goto LABEL_71;
          }
        }
      }
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v68, (uint64_t)v67);
    outlined init with copy of AnyTrackedValue((uint64_t)v67, (uint64_t)v62);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    v7 = v18;
    type metadata accessor for ScrollStateRequest(0, v18);
    if (!swift_dynamicCast())
    {
      v61 = 0;
      memset(v60, 0, sizeof(v60));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
      outlined destroy of ScrollStateRequest?((uint64_t)v60, (unint64_t *)&lazy cache variable for type metadata for TappableEventType?, v18, (uint64_t)&protocol descriptor for TappableEventType);
      if (!*(_QWORD *)(v1 + 24)
        || (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener), (*(_BYTE *)AGGraphGetValue() & 1) == 0))
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        v55 = 3;
        goto LABEL_71;
      }
      goto LABEL_51;
    }
    outlined init with take of ScrollStateRequest(v60, (uint64_t)v65);
    outlined init with copy of AnyTrackedValue((uint64_t)v65, (uint64_t)v62);
    v27 = v63;
    v26 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v26 + 8) + 8))(v60, v27);
    v29 = v63;
    v28 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v28 + 8) + 16))(v60, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    v30 = *(_QWORD *)(v1 + 24);
    if (!v30)
    {
      outlined destroy of ScrollStateRequest?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
      *(_QWORD *)(v1 + 24) = v17;
      *(_QWORD *)(v1 + 32) = v19;
      goto LABEL_50;
    }
    if (*(_QWORD *)(v1 + 32) == v19 && v17 == v30
      || (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener), *(_BYTE *)AGGraphGetValue() == 1))
    {
      outlined destroy of ScrollStateRequest?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
LABEL_50:
      outlined init with copy of AnyTrackedValue((uint64_t)&v68, (uint64_t)v77);
LABEL_51:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      if (v6)
        continue;
      goto LABEL_9;
    }
    break;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  v55 = 2;
LABEL_71:
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v52 = 3;
LABEL_73:
  v72 = v50;
  v73 = v49;
  *(_QWORD *)&v74 = v51;
  BYTE8(v74) = v52;
  v75 = *(_OWORD *)(v1 + 24);
  v76 = v55;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  AGGraphSetOutputValue();
  outlined consume of GesturePhase<TappableEvent>?(v50, v49, v51, v52);
  return outlined destroy of ScrollStateRequest?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
}

uint64_t specialized ShapeStyleResolver.updateValue()()
{
  _DWORD *v0;
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  char v8;
  unsigned __int16 v9;
  uint64_t Value;
  char v11;
  char v12;
  id v13;
  unsigned __int16 v14;
  char v15;
  id v16;
  id v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t OutputValue;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(__int128 *);
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 v67;
  void *v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  BOOL v72;
  __int128 v73;
  uint64_t v74;
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;
  uint64_t v97;

  v1 = v0;
  v97 = *MEMORY[0x24BDAC8D0];
  v2 = *v0;
  v3 = *MEMORY[0x24BE096C0];
  if (v2 == *MEMORY[0x24BE096C0])
    goto LABEL_5;
  v4 = *(_QWORD *)AGGraphGetValue();
  if (v4 == 1)
  {
    swift_retain();
LABEL_5:
    v6 = 0;
    v69 = 0;
    goto LABEL_6;
  }
  v6 = v5 & 1;
  v69 = v4;
  swift_retain();
LABEL_6:
  if (v1[1] == v3)
  {
    v7 = 0;
    v68 = 0;
    v8 = 0;
    v9 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v12 = v11;
    v13 = *(id *)Value;
    v14 = *(_WORD *)(Value + 8);
    v15 = *(_BYTE *)(Value + 10);
    v16 = *(id *)Value;
    if (v13 == (id)1)
      v7 = 0;
    else
      v7 = v12 & 1;
    if (v13 == (id)1)
      v17 = 0;
    else
      v17 = v13;
    v68 = v17;
    if (v13 == (id)1)
      v9 = 1;
    else
      v9 = v14;
    if (v13 == (id)1)
      v8 = 0;
    else
      v8 = v15;
  }
  v19 = *(_QWORD *)AGGraphGetValue();
  v71 = MEMORY[0x24BEE4AF8];
  if ((v6 | v7) == 1)
  {
    v20 = 1;
    v72 = 1;
    swift_retain();
    swift_retain();
    goto LABEL_44;
  }
  v21 = v18;
  OutputValue = AGGraphGetOutputValue();
  v72 = OutputValue == 0;
  if (!OutputValue)
  {
    swift_retain();
    swift_retain();
    v20 = 1;
    goto LABEL_44;
  }
  if ((v21 & 1) == 0)
  {
    v23 = (uint64_t)(v1 + 4);
    v24 = *((_QWORD *)v1 + 5);
    swift_retain();
    swift_retain();
    if (v24)
      goto LABEL_59;
LABEL_48:
    if (v1[12] == *(_DWORD *)AGGraphGetValue() >> 1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return swift_release();
    }
    ((void (*)(void))specialized AnimatableAttributeHelper.reset())();
    v72 = 1;
    goto LABEL_51;
  }
  v67 = v9;
  v25 = *(_QWORD *)(*((_QWORD *)v1 + 7) + 16);
  swift_retain();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 16));
  v26 = *(_QWORD *)(v25 + 32);
  v66 = *(_QWORD *)(v25 + 24);
  v27 = *(_QWORD *)(v25 + 40);
  v28 = *(_QWORD *)(v25 + 48);
  v29 = *(_BYTE *)(v25 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 16));
  swift_release();
  if ((v29 & 1) != 0)
    goto LABEL_41;
  if (v19)
  {
    v30 = v27;
    v31 = v28;
    v32 = v26;
    if (*(_QWORD *)(v19 + 64) == v66)
    {
LABEL_39:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_40:
      v20 = 0;
      v72 = 0;
      goto LABEL_43;
    }
  }
  else
  {
    v30 = v27;
    v31 = v28;
    v32 = v26;
    if (!v66)
      goto LABEL_39;
  }
  if ((compare(_:against:)(v32, v19) & 1) != 0 && (compare(_:against:)(v30, v19) & 1) != 0)
  {
    v33 = *(_QWORD *)(v31 + 16);
    if (!v33)
      goto LABEL_39;
    v34 = v31 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v34, (uint64_t)&v73);
      v35 = v75;
      v36 = v76;
      __swift_project_boxed_opaque_existential_1(&v73, (uint64_t)v75);
      if (((*(uint64_t (**)(uint64_t, id, uint64_t))(v36 + 16))(v19, v35, v36) & 1) == 0)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      v34 += 40;
      if (!--v33)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_41:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v20 = 1;
  v72 = 1;
LABEL_43:
  v9 = v67;
LABEL_44:
  v23 = (uint64_t)(v1 + 4);
  if (*((_QWORD *)v1 + 5))
  {
    if (!v20)
      goto LABEL_59;
    goto LABEL_51;
  }
  if ((v20 & 1) == 0)
    goto LABEL_48;
LABEL_51:
  v38 = *(_QWORD *)(*((_QWORD *)v1 + 7) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 16));
  *(_QWORD *)(v38 + 24) = 0;
  if (*(_QWORD *)(*(_QWORD *)(v38 + 32) + 16))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v73 = *(_QWORD *)(v38 + 32);
    *(_QWORD *)(v38 + 32) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v38 + 32) = v73;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v38 + 40) + 16))
  {
    v40 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v73 = *(_QWORD *)(v38 + 40);
    *(_QWORD *)(v38 + 40) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(v40);
    *(_QWORD *)(v38 + 40) = v73;
    swift_bridgeObjectRelease();
  }
  v41 = swift_isUniquelyReferenced_nonNull_native();
  v42 = *(_QWORD *)(v38 + 48);
  if (v41)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v42 + 16));
  }
  else
  {
    *(_QWORD *)(v38 + 48) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v42 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(v38 + 56) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 16));
  swift_release();
LABEL_59:
  v43 = v9;
  if ((v8 & 1) != 0)
    v44 = v9;
  else
    v44 = v9 != 0;
  v45 = *((_QWORD *)v1 + 7);
  if (v19)
    v46 = *(_QWORD *)(v19 + 64);
  else
    v46 = 0;
  v47 = *(_QWORD *)(v45 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v47 + 16));
  *(_QWORD *)(v47 + 24) = v46;
  os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 16));
  swift_release();
  swift_release();
  v48 = swift_release();
  v49 = *((_BYTE *)v1 + 12);
  v96 = 0;
  v85 = 0uLL;
  v86 = v44;
  v87 = 1;
  v88 = 0;
  v89 = 5;
  *(_QWORD *)&v90 = v19;
  *((_QWORD *)&v90 + 1) = v45;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  v94 = 1;
  v95 = v49;
  if (v44)
  {
    if (v69)
    {
      v50 = *(void (**)(__int128 *))(*(_QWORD *)v69 + 80);
      swift_retain();
      v50(&v85);
      swift_release();
      if ((v8 & 1) != 0)
        goto LABEL_79;
    }
    else
    {
      specialized ForegroundStyle._apply(to:)((uint64_t)&v85);
      if ((v8 & 1) != 0)
        goto LABEL_79;
    }
    v70 = 0;
    v73 = v90;
    v51 = MEMORY[0x24BEE4AF8];
    if (v89 == 1)
    {
      v51 = v88;
      v52 = 0;
    }
    else
    {
      v52 = v88;
    }
    if (v89 == 1)
      v53 = 5;
    else
      v53 = v89;
    *(_QWORD *)&v84 = v51;
    _ShapeStyle_Pack.createOpacities(count:name:environment:)(v43, (char *)&v70, (uint64_t *)&v73);
    outlined consume of _ShapeStyle_Shape.Result(v52, v53);
    v88 = v84;
    v89 = 1;
  }
  else if (v72)
  {
    specialized AnimatableAttributeHelper.reset()(v48);
  }
LABEL_79:
  if ((v8 & 2) != 0)
  {
    v85 = xmmword_235260EF0;
    v86 = 1;
    v87 = 1;
    v95 = 0;
    BackgroundStyle._apply(to:)((uint64_t)&v85);
  }
  if ((v8 & 4) != 0)
  {
    v84 = v90;
    v56 = v68;
    v57 = v68;
    swift_retain();
    swift_retain();
    ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v84, (uint64_t)v68, (uint64_t)&v73);
    v58 = 256;
    if (!BYTE1(v74))
      v58 = 0;
    v59 = v58 | v74;
    v60 = 0x10000;
    if (!BYTE2(v74))
      v60 = 0;
    v74 = v59 | v60;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 6;
    v80 = 1065353216;
    v81 = 0;
    v82 = -1;
    v61 = MEMORY[0x24BEE4AF8];
    v83 = MEMORY[0x24BEE4AF8];
    if (v89 == 1)
      v61 = v88;
    v70 = 2;
    if (v89 == 1)
      v62 = 0;
    else
      v62 = v88;
    if (v89 == 1)
      v63 = 5;
    else
      v63 = v89;
    *(_QWORD *)&v84 = v61;
    v64 = v75;
    _ShapeStyle_Pack.subscript.setter((uint64_t *)&v73, &v70, 0);
    outlined consume of _ShapeStyle_Shape.Result(v62, v63);

    v55 = v84;
    v88 = v84;
    v89 = 1;
  }
  else
  {
    v54 = v89;
    v55 = v88;
    if (v89 != 1)
    {
      v65 = MEMORY[0x24BEE4AF8];
      v56 = v68;
      goto LABEL_99;
    }
    v56 = v68;
  }
  swift_bridgeObjectRetain();
  v54 = 1;
  v65 = v55;
LABEL_99:
  swift_bridgeObjectRelease();
  v71 = v65;
  if ((*((_BYTE *)v1 + 13) & 1) == 0)
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v71, 0, v1[2], v23);
  if (v72)
  {
    *(_QWORD *)&v73 = v71;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  swift_release();
  outlined consume of _ShapeStyle_Shape.Result(v55, v54);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t *Value;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  id v12;
  __int16 v13;
  char v14;
  id v15;
  __int16 v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t OutputValue;
  char v26;
  char v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned __int16 v58;
  char v59;
  uint64_t v60;
  void *v61;
  char v62;
  unsigned __int8 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  id v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v1 = *MEMORY[0x24BE096C0];
  if (*(_DWORD *)v0 == *MEMORY[0x24BE096C0])
  {
    v54 = 0;
    v2 = 0;
    if (*(_DWORD *)(v0 + 4) == *(_DWORD *)v0)
    {
      v3 = 0;
      v62 = 0;
      v58 = 1;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v4 = 0;
      v61 = 0;
      goto LABEL_20;
    }
    v8 = 0;
    v52 = 0;
    v53 = 0;
    v51 = 0;
  }
  else
  {
    Value = (uint64_t *)AGGraphGetValue();
    v4 = *Value;
    v52 = Value[2];
    v53 = Value[1];
    v51 = Value[3];
    v54 = Value[4];
    v2 = v6 & 1;
    v7 = *(_DWORD *)(v0 + 4);
    swift_bridgeObjectRetain();
    if (v7 == v1)
    {
      v3 = 0;
      v61 = 0;
      v62 = 0;
      v58 = 1;
      goto LABEL_20;
    }
    v8 = v4;
  }
  v9 = AGGraphGetValue();
  v11 = v10;
  v12 = *(id *)v9;
  v13 = *(_WORD *)(v9 + 8);
  v14 = *(_BYTE *)(v9 + 10);
  v15 = *(id *)v9;
  v16 = 1;
  if (v12 == (id)1)
    v3 = 0;
  else
    v3 = v11 & 1;
  if (v12 == (id)1)
    v17 = 0;
  else
    v17 = v12;
  v61 = v17;
  if (v12 != (id)1)
    v16 = v13;
  v58 = v16;
  if (v12 == (id)1)
    v18 = 0;
  else
    v18 = v14;
  v62 = v18;
  v4 = v8;
LABEL_20:
  v60 = v0;
  v19 = v0 + 16;
  v59 = *(_BYTE *)(v0 + 12);
  v20 = *(_QWORD *)(v0 + 40);
  v57 = *(_DWORD *)(v0 + 48);
  v21 = *(_QWORD *)(v0 + 56);
  v55 = *(_DWORD *)(v0 + 8);
  v23 = *(_QWORD *)AGGraphGetValue();
  if ((v2 & 1) != 0 || v3)
  {
    v27 = 1;
    v65 = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    v24 = v22;
    OutputValue = AGGraphGetOutputValue();
    v65 = OutputValue == 0;
    if (OutputValue)
    {
      v26 = v62;
      if ((v24 & 1) == 0)
      {
        swift_retain();
        swift_retain();
        if (!v20)
          goto LABEL_33;
LABEL_30:
        v56 = 0;
        goto LABEL_37;
      }
      swift_retain();
      v28 = swift_retain_n();
      v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v28);
      swift_release();
      v65 = v27 & 1;
      if (!v20)
        goto LABEL_32;
      goto LABEL_29;
    }
    swift_retain();
    swift_retain();
    v27 = 1;
  }
  v26 = v62;
  if (!v20)
  {
LABEL_32:
    if ((v27 & 1) == 0)
    {
LABEL_33:
      v29 = (_DWORD *)AGGraphGetValue();
      if (v57 == *v29 >> 1)
      {
        swift_bridgeObjectRelease();

        swift_release();
        return swift_release();
      }
      specialized AnimatableAttributeHelper.reset()(v29);
      v65 = 1;
      goto LABEL_36;
    }
    goto LABEL_36;
  }
LABEL_29:
  if ((v27 & 1) == 0)
    goto LABEL_30;
LABEL_36:
  PropertyList.Tracker.reset()();
  v56 = 1;
LABEL_37:
  v31 = v4;
  if ((v26 & 1) != 0)
    v32 = v58;
  else
    v32 = v58 != 0;
  if (v23)
    v33 = *(_QWORD *)(v23 + 64);
  else
    v33 = 0;
  v34 = *(_QWORD *)(v21 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v34 + 16));
  *(_QWORD *)(v34 + 24) = v33;
  os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 16));
  swift_release();
  swift_release();
  v35 = swift_release();
  v94 = 0;
  v83 = 0uLL;
  v84 = v32;
  v85 = 1;
  v86 = 0;
  v87 = 5;
  *(_QWORD *)&v88 = v23;
  *((_QWORD *)&v88 + 1) = v21;
  v89 = 0u;
  v90 = 0u;
  v91 = 0;
  v92 = 1;
  v93 = v59;
  if (v32)
  {
    if (v31)
    {
      v66 = v31;
      v67 = v53;
      v68 = v52;
      v69 = v51;
      v70 = v54;
      swift_bridgeObjectRetain();
      specialized Paint._apply(to:)((uint64_t)&v83);
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized ForegroundStyle._apply(to:)((uint64_t)&v83);
    }
    v36 = v62;
    if ((v62 & 1) == 0)
    {
      v63 = 0;
      v71 = v88;
      v37 = MEMORY[0x24BEE4AF8];
      if (v87 == 1)
      {
        v37 = v86;
        v38 = 0;
      }
      else
      {
        v38 = v86;
      }
      if (v87 == 1)
        v39 = 5;
      else
        v39 = v87;
      *(_QWORD *)&v82 = v37;
      _ShapeStyle_Pack.createOpacities(count:name:environment:)(v58, (char *)&v63, (uint64_t *)&v71);
      outlined consume of _ShapeStyle_Shape.Result(v38, v39);
      v86 = v82;
      v87 = 1;
    }
  }
  else
  {
    v36 = v62;
    if ((v56 & 1) != 0)
      specialized AnimatableAttributeHelper.reset()(v35);
  }
  if ((v36 & 2) != 0)
  {
    v83 = xmmword_235260EF0;
    v84 = 1;
    v85 = 1;
    v93 = 0;
    BackgroundStyle._apply(to:)((uint64_t)&v83);
  }
  if ((v36 & 4) != 0)
  {
    v82 = v88;
    v43 = v61;
    swift_retain();
    swift_retain();
    ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v82, (uint64_t)v61, (uint64_t)&v71);
    v44 = 256;
    if (!BYTE1(v72))
      v44 = 0;
    v45 = v44 | v72;
    v46 = 0x10000;
    if (!BYTE2(v72))
      v46 = 0;
    v72 = v45 | v46;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 6;
    v78 = 1065353216;
    v79 = 0;
    v80 = -1;
    v63 = 2;
    if (v87 == 1)
      v47 = 5;
    else
      v47 = v87;
    if (v87 == 1)
      v48 = v86;
    else
      v48 = MEMORY[0x24BEE4AF8];
    if (v87 == 1)
      v49 = 0;
    else
      v49 = v86;
    v81 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v82 = v48;
    v50 = v73;
    _ShapeStyle_Pack.subscript.setter((uint64_t *)&v71, &v63, 0);
    outlined consume of _ShapeStyle_Shape.Result(v49, v47);

    v41 = v82;
  }
  else
  {
    v40 = v87;
    v41 = v86;
    if (v87 != 1)
    {
      v42 = MEMORY[0x24BEE4AF8];
      goto LABEL_77;
    }
  }
  swift_bridgeObjectRetain();
  v40 = 1;
  v42 = v41;
LABEL_77:
  v64 = v42;
  if ((*(_BYTE *)(v60 + 13) & 1) == 0)
  {
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v64, 0, v55, v19);
    if ((v65 & 1) == 0)
      goto LABEL_79;
LABEL_81:
    *(_QWORD *)&v71 = v64;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_82;
  }
  if (v56)
    goto LABEL_81;
LABEL_79:
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
LABEL_82:
  outlined consume of _ShapeStyle_Shape.Result(v41, v40);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  __int16 v4;
  int v5;
  uint64_t Value;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  __int16 v14;
  char v15;
  id v16;
  __int16 v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t OutputValue;
  char v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  id v53;
  int v54;
  int v55;
  int v56;
  unsigned __int16 v57;
  char v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned __int8 v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  id v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v1 = *MEMORY[0x24BE096C0];
  if (*(_DWORD *)v0 == *MEMORY[0x24BE096C0])
  {
    v2 = 0;
    if (*(_DWORD *)(v0 + 4) == *(_DWORD *)v0)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v67 = 0;
      v57 = 1;
      v66 = 0;
      v64 = 0;
      v65 = 0;
      v62 = 0;
      v63 = 0;
      v60 = 0;
      v61 = 0;
      goto LABEL_19;
    }
    v4 = 0;
    v3 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v61 = *(_QWORD *)Value;
    v62 = *(_QWORD *)(Value + 8);
    v63 = *(_QWORD *)(Value + 16);
    v64 = *(unsigned __int8 *)(Value + 24);
    v7 = *(_QWORD *)(Value + 32);
    v66 = *(unsigned __int8 *)(Value + 40);
    v2 = *(_QWORD *)(Value + 48);
    v3 = v8 & 1;
    v4 = *(unsigned __int8 *)(Value + 56) | (*(unsigned __int8 *)(Value + 57) << 8);
    v9 = *(_DWORD *)(v0 + 4);
    swift_bridgeObjectRetain();
    v65 = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v9 == v1)
    {
      v5 = 0;
      v60 = 0;
      v67 = 0;
      v57 = 1;
      goto LABEL_19;
    }
  }
  v10 = AGGraphGetValue();
  v12 = v11;
  v13 = *(id *)v10;
  v14 = *(_WORD *)(v10 + 8);
  v15 = *(_BYTE *)(v10 + 10);
  v16 = *(id *)v10;
  v17 = 1;
  if (v13 == (id)1)
    v5 = 0;
  else
    v5 = v12 & 1;
  if (v13 == (id)1)
    v18 = 0;
  else
    v18 = v13;
  v60 = v18;
  if (v13 != (id)1)
    v17 = v14;
  v57 = v17;
  if (v13 == (id)1)
    v19 = 0;
  else
    v19 = v15;
  v67 = v19;
LABEL_19:
  v59 = v0;
  v20 = v0 + 16;
  v58 = *(_BYTE *)(v0 + 12);
  v21 = *(_QWORD *)(v0 + 40);
  v55 = *(_DWORD *)(v0 + 48);
  v22 = *(_QWORD *)(v0 + 56);
  v54 = *(_DWORD *)(v0 + 8);
  v24 = *(_QWORD *)AGGraphGetValue();
  if ((v3 & 1) != 0 || v5)
  {
    v27 = 1;
    v70 = 1;
    swift_retain();
    swift_retain();
    if (v21)
      goto LABEL_26;
    goto LABEL_29;
  }
  v25 = v23;
  OutputValue = AGGraphGetOutputValue();
  v70 = OutputValue == 0;
  if (!OutputValue)
  {
    swift_retain();
    swift_retain();
    v27 = 1;
    if (v21)
      goto LABEL_26;
LABEL_29:
    if ((v27 & 1) == 0)
    {
LABEL_30:
      v29 = (_DWORD *)AGGraphGetValue();
      if (v55 == *v29 >> 1)
      {
        outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v2);

        swift_release();
        return swift_release();
      }
      specialized AnimatableAttributeHelper.reset()(v29);
      v70 = 1;
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  if ((v25 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    if (!v21)
      goto LABEL_30;
LABEL_27:
    v28 = v2;
    v56 = 0;
    goto LABEL_36;
  }
  swift_retain();
  v31 = swift_retain_n();
  v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v31);
  swift_release();
  v70 = v27 & 1;
  if (!v21)
    goto LABEL_29;
LABEL_26:
  if ((v27 & 1) == 0)
    goto LABEL_27;
LABEL_35:
  v28 = v2;
  PropertyList.Tracker.reset()();
  v56 = 1;
LABEL_36:
  v32 = v4;
  if ((v67 & 1) != 0)
    v33 = v57;
  else
    v33 = v57 != 0;
  if (v24)
    v34 = *(_QWORD *)(v24 + 64);
  else
    v34 = 0;
  v35 = *(_QWORD *)(v22 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v35 + 16));
  *(_QWORD *)(v35 + 24) = v34;
  os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 16));
  swift_release();
  swift_release();
  v36 = swift_release();
  v94 = 0;
  v83 = 0uLL;
  v84 = v33;
  v85 = 1;
  v86 = 0;
  v87 = 5;
  *(_QWORD *)&v88 = v24;
  *((_QWORD *)&v88 + 1) = v22;
  v89 = 0u;
  v90 = 0u;
  v91 = 0;
  v92 = 1;
  v93 = v58;
  if (v33)
  {
    v37 = v28;
    if (v28)
    {
      v95 = v61;
      v96 = v62;
      v97 = v63;
      v98 = v64 != 0;
      v99 = v65;
      v100 = v66 != 0;
      v101 = v28;
      v102 = v32 & 0xFF01;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Paint._apply(to:)((uint64_t)&v83);
      outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v28);
    }
    else
    {
      specialized ForegroundStyle._apply(to:)((uint64_t)&v83);
    }
    v38 = v60;
    v39 = v67;
    if ((v67 & 1) == 0)
    {
      v68 = 0;
      v71 = v88;
      v40 = MEMORY[0x24BEE4AF8];
      if (v87 == 1)
      {
        v40 = v86;
        v41 = 0;
      }
      else
      {
        v41 = v86;
      }
      if (v87 == 1)
        v42 = 5;
      else
        v42 = v87;
      *(_QWORD *)&v82 = v40;
      _ShapeStyle_Pack.createOpacities(count:name:environment:)(v57, (char *)&v68, (uint64_t *)&v71);
      outlined consume of _ShapeStyle_Shape.Result(v41, v42);
      v86 = v82;
      v87 = 1;
    }
  }
  else
  {
    v37 = v28;
    v38 = v60;
    v39 = v67;
    if ((v56 & 1) != 0)
      specialized AnimatableAttributeHelper.reset()(v36);
  }
  if ((v39 & 2) != 0)
  {
    v83 = xmmword_235260EF0;
    v84 = 1;
    v85 = 1;
    v93 = 0;
    BackgroundStyle._apply(to:)((uint64_t)&v83);
  }
  if ((v39 & 4) != 0)
  {
    v82 = v88;
    v46 = v38;
    swift_retain();
    swift_retain();
    ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v82, (uint64_t)v38, (uint64_t)&v71);
    v47 = 256;
    if (!BYTE1(v72))
      v47 = 0;
    v48 = v47 | v72;
    v49 = 0x10000;
    if (!BYTE2(v72))
      v49 = 0;
    v72 = v48 | v49;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 6;
    v78 = 1065353216;
    v79 = 0;
    v50 = MEMORY[0x24BEE4AF8];
    v80 = -1;
    v81 = MEMORY[0x24BEE4AF8];
    if (v87 == 1)
      v50 = v86;
    v68 = 2;
    if (v87 == 1)
      v51 = 0;
    else
      v51 = v86;
    if (v87 == 1)
      v52 = 5;
    else
      v52 = v87;
    *(_QWORD *)&v82 = v50;
    v53 = v73;
    _ShapeStyle_Pack.subscript.setter((uint64_t *)&v71, &v68, 0);
    outlined consume of _ShapeStyle_Shape.Result(v51, v52);

    v44 = v82;
  }
  else
  {
    v43 = v87;
    v44 = v86;
    if (v87 != 1)
    {
      v45 = MEMORY[0x24BEE4AF8];
      goto LABEL_75;
    }
  }
  swift_bridgeObjectRetain();
  v43 = 1;
  v45 = v44;
LABEL_75:
  v69 = v45;
  if ((*(_BYTE *)(v59 + 13) & 1) == 0)
  {
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v69, 0, v54, v20);
    if ((v70 & 1) == 0)
      goto LABEL_77;
LABEL_79:
    *(_QWORD *)&v71 = v69;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v37);
    goto LABEL_80;
  }
  if (v56)
    goto LABEL_79;
LABEL_77:
  outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v37);
  swift_release();

  swift_release();
LABEL_80:
  outlined consume of _ShapeStyle_Shape.Result(v44, v43);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyleResolver.updateValue()(uint64_t a1, void (*a2)(__int128 *))
{
  uint64_t v2;
  int v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t *Value;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  id v14;
  __int16 v15;
  char v16;
  id v17;
  __int16 v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t OutputValue;
  char v28;
  char v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v58;
  int v59;
  int v60;
  unsigned __int16 v61;
  char v62;
  uint64_t v63;
  void *v64;
  char v65;
  unsigned __int8 v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  int v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  if (*(_DWORD *)v2 == *MEMORY[0x24BE096C0])
  {
    v56 = 0;
    v4 = 0;
    if (*(_DWORD *)(v2 + 4) == *(_DWORD *)v2)
    {
      v5 = 0;
      v65 = 0;
      v61 = 1;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v6 = 0;
      v64 = 0;
      goto LABEL_20;
    }
    v10 = 0;
    v54 = 0;
    v55 = 0;
    v53 = 0;
  }
  else
  {
    Value = (uint64_t *)AGGraphGetValue();
    v6 = *Value;
    v54 = Value[2];
    v55 = Value[1];
    v53 = Value[3];
    v56 = Value[4];
    v4 = v8 & 1;
    v9 = *(_DWORD *)(v2 + 4);
    swift_bridgeObjectRetain();
    if (v9 == v3)
    {
      v5 = 0;
      v64 = 0;
      v65 = 0;
      v61 = 1;
      goto LABEL_20;
    }
    v10 = v6;
  }
  v11 = AGGraphGetValue();
  v13 = v12;
  v14 = *(id *)v11;
  v15 = *(_WORD *)(v11 + 8);
  v16 = *(_BYTE *)(v11 + 10);
  v17 = *(id *)v11;
  v18 = 1;
  if (v14 == (id)1)
    v5 = 0;
  else
    v5 = v13 & 1;
  if (v14 == (id)1)
    v19 = 0;
  else
    v19 = v14;
  v64 = v19;
  if (v14 != (id)1)
    v18 = v15;
  v61 = v18;
  if (v14 == (id)1)
    v20 = 0;
  else
    v20 = v16;
  v65 = v20;
  v6 = v10;
LABEL_20:
  v63 = v2;
  v21 = v2 + 16;
  v62 = *(_BYTE *)(v2 + 12);
  v22 = *(_QWORD *)(v2 + 40);
  v60 = *(_DWORD *)(v2 + 48);
  v23 = *(_QWORD *)(v2 + 56);
  v58 = *(_DWORD *)(v2 + 8);
  v25 = *(_QWORD *)AGGraphGetValue();
  if ((v4 & 1) != 0 || v5)
  {
    v29 = 1;
    v68 = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    v26 = v24;
    OutputValue = AGGraphGetOutputValue();
    v68 = OutputValue == 0;
    if (OutputValue)
    {
      v28 = v65;
      if ((v26 & 1) == 0)
      {
        swift_retain();
        swift_retain();
        if (!v22)
          goto LABEL_33;
LABEL_30:
        v59 = 0;
        goto LABEL_37;
      }
      swift_retain();
      v30 = swift_retain_n();
      v29 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v30);
      swift_release();
      v68 = v29 & 1;
      if (!v22)
        goto LABEL_32;
      goto LABEL_29;
    }
    swift_retain();
    swift_retain();
    v29 = 1;
  }
  v28 = v65;
  if (!v22)
  {
LABEL_32:
    if ((v29 & 1) == 0)
    {
LABEL_33:
      v31 = (_DWORD *)AGGraphGetValue();
      if (v60 == *v31 >> 1)
      {
        swift_bridgeObjectRelease();

        swift_release();
        return swift_release();
      }
      specialized AnimatableAttributeHelper.reset()(v31);
      v68 = 1;
      goto LABEL_36;
    }
    goto LABEL_36;
  }
LABEL_29:
  if ((v29 & 1) == 0)
    goto LABEL_30;
LABEL_36:
  PropertyList.Tracker.reset()();
  v59 = 1;
LABEL_37:
  v33 = v6;
  if ((v28 & 1) != 0)
    v34 = v61;
  else
    v34 = v61 != 0;
  if (v25)
    v35 = *(_QWORD *)(v25 + 64);
  else
    v35 = 0;
  v36 = *(_QWORD *)(v23 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v36 + 16));
  *(_QWORD *)(v36 + 24) = v35;
  os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 16));
  swift_release();
  swift_release();
  v37 = swift_release();
  v97 = 0;
  v86 = 0uLL;
  v87 = v34;
  v88 = 1;
  v89 = 0;
  v90 = 5;
  *(_QWORD *)&v91 = v25;
  *((_QWORD *)&v91 + 1) = v23;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  v95 = 1;
  v96 = v62;
  if (v34)
  {
    if (v33)
    {
      v69 = v33;
      v70 = v55;
      v71 = v54;
      v72 = v53;
      v73 = v56;
      swift_bridgeObjectRetain();
      a2(&v86);
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized ForegroundStyle._apply(to:)((uint64_t)&v86);
    }
    v38 = v65;
    if ((v65 & 1) == 0)
    {
      v66 = 0;
      v74 = v91;
      v39 = MEMORY[0x24BEE4AF8];
      if (v90 == 1)
      {
        v39 = v89;
        v40 = 0;
      }
      else
      {
        v40 = v89;
      }
      if (v90 == 1)
        v41 = 5;
      else
        v41 = v90;
      *(_QWORD *)&v85 = v39;
      _ShapeStyle_Pack.createOpacities(count:name:environment:)(v61, (char *)&v66, (uint64_t *)&v74);
      outlined consume of _ShapeStyle_Shape.Result(v40, v41);
      v89 = v85;
      v90 = 1;
    }
  }
  else
  {
    v38 = v65;
    if ((v59 & 1) != 0)
      specialized AnimatableAttributeHelper.reset()(v37);
  }
  if ((v38 & 2) != 0)
  {
    v86 = xmmword_235260EF0;
    v87 = 1;
    v88 = 1;
    v96 = 0;
    BackgroundStyle._apply(to:)((uint64_t)&v86);
  }
  if ((v38 & 4) != 0)
  {
    v85 = v91;
    v45 = v64;
    swift_retain();
    swift_retain();
    ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v85, (uint64_t)v64, (uint64_t)&v74);
    v46 = 256;
    if (!BYTE1(v75))
      v46 = 0;
    v47 = v46 | v75;
    v48 = 0x10000;
    if (!BYTE2(v75))
      v48 = 0;
    v75 = v47 | v48;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 6;
    v81 = 1065353216;
    v82 = 0;
    v83 = -1;
    v66 = 2;
    if (v90 == 1)
      v49 = 5;
    else
      v49 = v90;
    if (v90 == 1)
      v50 = v89;
    else
      v50 = MEMORY[0x24BEE4AF8];
    if (v90 == 1)
      v51 = 0;
    else
      v51 = v89;
    v84 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v85 = v50;
    v52 = v76;
    _ShapeStyle_Pack.subscript.setter((uint64_t *)&v74, &v66, 0);
    outlined consume of _ShapeStyle_Shape.Result(v51, v49);

    v43 = v85;
  }
  else
  {
    v42 = v90;
    v43 = v89;
    if (v90 != 1)
    {
      v44 = MEMORY[0x24BEE4AF8];
      goto LABEL_77;
    }
  }
  swift_bridgeObjectRetain();
  v42 = 1;
  v44 = v43;
LABEL_77:
  v67 = v44;
  if ((*(_BYTE *)(v63 + 13) & 1) == 0)
  {
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v67, 0, v58, v21);
    if ((v68 & 1) == 0)
      goto LABEL_79;
LABEL_81:
    *(_QWORD *)&v74 = v67;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_82;
  }
  if (v59)
    goto LABEL_81;
LABEL_79:
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
LABEL_82:
  outlined consume of _ShapeStyle_Shape.Result(v43, v42);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized StaticBody.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  double *Value;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v30 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = (double *)AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(1, *Value, Value[1], Value[2], Value[3]);
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v30;
    v19(v30, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v30 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  AGGraphGetValue();
  v18 = swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v18, 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v30;
    v19(v30, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  double v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v31;
  void *v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v31 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v31 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v32 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  v18 = *(double *)AGGraphGetValue();
  v19 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v19, 1, v18);
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v21 = v31;
    v20(v31, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v33, v21, v0);
    swift_beginAccess();
    v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    v25 = *((_QWORD *)v22 + 2);
    v24 = *((_QWORD *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((_QWORD *)v22 + 2) = v25 + 1;
    v20(&v22[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v25], v33, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v21, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v26 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v26)
  {
    v27 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v28 = *(_QWORD *)(v1 + 72);
    v29 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v29(v3, v27, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v27 += v28;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v32;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  double *Value;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v30 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = (double *)AGGraphGetValue();
  specialized GestureBodyAccessor.updateBody(of:changed:)(1, *Value, Value[1]);
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v30;
    v19(v30, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else if (one-time initialization token for lastestAccessLists == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  specialized GestureBodyAccessor.updateBody(of:changed:)(1);
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  v18 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v19(v8, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v8, v0);
    swift_beginAccess();
    v20 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v20 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, (unint64_t)v20);
      static ObservationRegistrar.lastestAccessLists = v20;
    }
    v23 = *((_QWORD *)v20 + 2);
    v22 = *((_QWORD *)v20 + 3);
    if (v23 >= v22 >> 1)
    {
      v20 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, (unint64_t)v20);
      static ObservationRegistrar.lastestAccessLists = v20;
    }
    *((_QWORD *)v20 + 2) = v23 + 1;
    v19(&v20[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v23], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
    v18 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v24 = v18[463];
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v26 = v24 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  v18[463] = v31;
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t StatusReg;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t Value;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for ObservationTracking._AccessList();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v40 = (char *)&v37 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - v8;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v37 - v15;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v37 = v9;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v39 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v16, 1, 1, v1);
  v41 = v16;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v38 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v16;
  v18 = *v0;
  v19 = *((_QWORD *)v0 + 1);
  v20 = *((_BYTE *)v0 + 16);
  Value = AGGraphGetValue();
  v22 = *(double *)(Value + 8);
  v23 = *(double *)(Value + 16);
  swift_retain();
  v24 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v24, 1, v22, v23, v18, v19, v20);
  swift_release();
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v38;
  v25 = (uint64_t)v41;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v41, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v13, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v13);
  }
  else
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v27 = v37;
    v26(v37, v13, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v40, v27, v1);
    swift_beginAccess();
    v28 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    v31 = *((_QWORD *)v28 + 2);
    v30 = *((_QWORD *)v28 + 3);
    if (v31 >= v30 >> 1)
    {
      v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    *((_QWORD *)v28 + 2) = v31 + 1;
    v26(&v28[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v31], v40, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v27, v1);
    v25 = (uint64_t)v41;
  }
  outlined destroy of ObservationTracking._AccessList?(v25);
  v32 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v32)
  {
    v33 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v34 = *(_QWORD *)(v2 + 72);
    v35 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v35(v4, v33, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v33 += v34;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v39;
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t StatusReg;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for ObservationTracking._AccessList();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)&v34 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v34 - v8;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v34 - v15;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v34 = v9;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v36 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v16, 1, 1, v1);
  v38 = v16;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v35 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v16;
  v18 = *v0;
  v19 = *((_QWORD *)v0 + 1);
  v20 = *((_BYTE *)v0 + 16);
  AGGraphGetValue();
  swift_retain();
  v21 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v21, 1, v18, v19, v20);
  swift_release();
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v35;
  v22 = (uint64_t)v38;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v38, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v13, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v13);
  }
  else
  {
    v23 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v24 = v34;
    v23(v34, v13, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v37, v24, v1);
    swift_beginAccess();
    v25 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    v28 = *((_QWORD *)v25 + 2);
    v27 = *((_QWORD *)v25 + 3);
    if (v28 >= v27 >> 1)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    *((_QWORD *)v25 + 2) = v28 + 1;
    v23(&v25[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v28], v37, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v24, v1);
    v22 = (uint64_t)v38;
  }
  outlined destroy of ObservationTracking._AccessList?(v22);
  v29 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v29)
  {
    v30 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v31 = *(_QWORD *)(v2 + 72);
    v32 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v32(v4, v30, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v30 += v31;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v36;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t *Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v37 = (char *)&v34 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v34 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v34 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v34 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v36 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  v38 = v15;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v35 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = (uint64_t *)AGGraphGetValue();
  v18 = *Value;
  v19 = Value[1];
  v21 = Value[2];
  v20 = Value[3];
  swift_retain();
  swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v18, v19, v21, v20, 1);
  swift_release();
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v35;
  v22 = (uint64_t)v38;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v38, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v23 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v24 = v34;
    v23(v34, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v37, v24, v0);
    swift_beginAccess();
    v25 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    v28 = *((_QWORD *)v25 + 2);
    v27 = *((_QWORD *)v25 + 3);
    if (v28 >= v27 >> 1)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    *((_QWORD *)v25 + 2) = v28 + 1;
    v23(&v25[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v28], v37, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v24, v0);
    v22 = (uint64_t)v38;
  }
  outlined destroy of ObservationTracking._AccessList?(v22);
  v29 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v29)
  {
    v30 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v31 = *(_QWORD *)(v1 + 72);
    v32 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v32(v3, v30, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v30 += v31;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v36;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v30 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  AGGraphGetValue();
  v18 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v18, 1);
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v30;
    v19(v30, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  unsigned __int8 *Value;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v30 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = (unsigned __int8 *)AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(*Value, 1);
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v30;
    v19(v30, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  char *v40;
  char *v41;
  uint64_t v42[4];
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v36 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v36 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v36 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v38 = v12;
    v36 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v39 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  v41 = v15;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v37 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = AGGraphGetValue();
  v19 = *(_QWORD *)(Value + 8);
  v21 = *(_QWORD *)(Value + 16);
  v20 = *(_QWORD *)(Value + 24);
  v42[0] = *(_QWORD *)Value;
  v18 = v42[0];
  v42[1] = v19;
  v42[2] = v21;
  v42[3] = v20;
  v22 = *(_BYTE *)(Value + 32);
  v43 = v22;
  outlined copy of Path.Storage(v42[0], v19, v21, v20, v22);
  specialized ViewBodyAccessor.updateBody(of:changed:)((uint64_t)v42, 1);
  outlined consume of Path.Storage(v18, v19, v21, v20, v22);
  *(_QWORD *)(StatusReg + 848) = v37;
  v23 = (uint64_t)v41;
  v24 = (uint64_t)v38;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v41, (uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v24, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v24);
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 32);
    v26 = v36;
    v25(v36, v24, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v40, v26, v0);
    swift_beginAccess();
    v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    v30 = *((_QWORD *)v27 + 2);
    v29 = *((_QWORD *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((_QWORD *)v27 + 2) = v30 + 1;
    v25(&v27[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v30], (uint64_t)v40, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v26, v0);
    v23 = (uint64_t)v41;
  }
  outlined destroy of ObservationTracking._AccessList?(v23);
  v31 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v31)
  {
    v32 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v33 = *(_QWORD *)(v1 + 72);
    v34 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v34(v3, v32, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v39;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t Value;
  __int128 v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  __int128 v35[2];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v31 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v32 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v33 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = AGGraphGetValue();
  v19 = *(_OWORD *)(Value + 16);
  v35[0] = *(_OWORD *)Value;
  v35[1] = v19;
  v36 = *(_BYTE *)(Value + 32);
  specialized ViewBodyAccessor.updateBody(of:changed:)(v35, 1);
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v21 = v32;
    v20(v32, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v34, v21, v0);
    swift_beginAccess();
    v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    v25 = *((_QWORD *)v22 + 2);
    v24 = *((_QWORD *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((_QWORD *)v22 + 2) = v25 + 1;
    v20(&v22[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v25], v34, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v21, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v26 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v26)
  {
    v27 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v28 = *(_QWORD *)(v1 + 72);
    v29 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v29(v3, v27, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v27 += v28;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v33;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  _OWORD *Value;
  __int128 v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v31 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v32 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v33 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = (_OWORD *)AGGraphGetValue();
  v19 = Value[1];
  v35[0] = *Value;
  v35[1] = v19;
  v35[2] = Value[2];
  specialized ViewBodyAccessor.updateBody(of:changed:)(v35, 1);
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v21 = v32;
    v20(v32, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v34, v21, v0);
    swift_beginAccess();
    v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    v25 = *((_QWORD *)v22 + 2);
    v24 = *((_QWORD *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((_QWORD *)v22 + 2) = v25 + 1;
    v20(&v22[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v25], v34, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v21, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v26 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v26)
  {
    v27 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v28 = *(_QWORD *)(v1 + 72);
    v29 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v29(v3, v27, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v27 += v28;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v33;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  unsigned __int8 *Value;
  int v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v35 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v35 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v35 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v36 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v39 = v15;
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = (unsigned __int8 *)AGGraphGetValue();
  v19 = *Value;
  v20 = (void *)*((_QWORD *)Value + 2);
  v21 = *((id *)Value + 1);
  v22 = v20;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v19, v21, v22, 1);

  *(_QWORD *)(StatusReg + 848) = v17;
  v23 = (uint64_t)v39;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v39, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v25 = v36;
    v24(v36, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v38, v25, v0);
    swift_beginAccess();
    v26 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    v29 = *((_QWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    *((_QWORD *)v26 + 2) = v29 + 1;
    v24(&v26[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v29], v38, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v25, v0);
    v23 = (uint64_t)v39;
  }
  outlined destroy of ObservationTracking._AccessList?(v23);
  v30 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v30)
  {
    v31 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v32 = *(_QWORD *)(v1 + 72);
    v33 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v33(v3, v31, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v31 += v32;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v34 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v34 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v34 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v35 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  v39 = v15;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v36 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = AGGraphGetValue();
  v18 = *(_QWORD *)Value;
  v19 = *(_QWORD *)(Value + 8);
  v20 = *(unsigned __int8 *)(Value + 16);
  v21 = *(_QWORD *)(Value + 24);
  outlined copy of Text.Storage(*(_QWORD *)Value, v19, v20);
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v18, v19, v20, v21, 1);
  outlined consume of Text.Storage(v18, v19, v20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v36;
  v22 = (uint64_t)v39;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v39, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v23 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v24 = v35;
    v23(v35, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v38, v24, v0);
    swift_beginAccess();
    v25 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    v28 = *((_QWORD *)v25 + 2);
    v27 = *((_QWORD *)v25 + 3);
    if (v28 >= v27 >> 1)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    *((_QWORD *)v25 + 2) = v28 + 1;
    v23(&v25[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v28], v38, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v24, v0);
    v22 = (uint64_t)v39;
  }
  outlined destroy of ObservationTracking._AccessList?(v22);
  v29 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v29)
  {
    v30 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v31 = *(_QWORD *)(v1 + 72);
    v32 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v32(v3, v30, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v30 += v31;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t Value;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v30 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(*(unsigned __int8 *)(Value + 16), 1, *(double *)Value, *(double *)(Value + 8));
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v30;
    v19(v30, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t Value;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v30 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(*(unsigned __int8 *)(Value + 16), 1, *(double *)Value, *(double *)(Value + 8), *(double *)(Value + 24));
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v30;
    v19(v30, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v32, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v32, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t Value;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  void *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v30 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v31 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v32 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = AGGraphGetValue();
  v34 = *(_QWORD *)Value;
  v35 = *(_OWORD *)(Value + 8);
  v36 = *(_OWORD *)(Value + 24);
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)((__int128 *)&v34, 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v20 = v31;
    v19(v31, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v33, v20, v0);
    swift_beginAccess();
    v21 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    v24 = *((_QWORD *)v21 + 2);
    v23 = *((_QWORD *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      v21 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v21);
      static ObservationRegistrar.lastestAccessLists = v21;
    }
    *((_QWORD *)v21 + 2) = v24 + 1;
    v19(&v21[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v24], v33, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v25 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v25)
  {
    v26 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v28(v3, v26, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v32;
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t StatusReg;
  uint64_t v18;
  unint64_t v19;
  char v20;
  double *Value;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for ObservationTracking._AccessList();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v38 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v38 - v8;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v38 - v15;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v38 = v9;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v40 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v16, 1, 1, v1);
  v42 = v16;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v39 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v16;
  v18 = *v0;
  v19 = *((_QWORD *)v0 + 1);
  v20 = *((_BYTE *)v0 + 16);
  Value = (double *)AGGraphGetValue();
  v22 = Value[1];
  v23 = Value[2];
  v24 = Value[3];
  swift_retain();
  v25 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v25, 1, v22, v23, v24, v18, v19, v20);
  swift_release();
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v39;
  v26 = (uint64_t)v42;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v42, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v13, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v13);
  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v28 = v38;
    v27(v38, v13, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v41, v28, v1);
    swift_beginAccess();
    v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    v32 = *((_QWORD *)v29 + 2);
    v31 = *((_QWORD *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((_QWORD *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v32], v41, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v28, v1);
    v26 = (uint64_t)v42;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  v33 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    v34 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v35 = *(_QWORD *)(v2 + 72);
    v36 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v36(v4, v34, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v34 += v35;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v40;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t StatusReg;
  uint64_t v17;
  __int128 *Value;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  _OWORD v37[2];
  _BYTE v38[26];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for ObservationTracking._AccessList();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v36 = (char *)&v33 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v33 - v14;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v34 = v8;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v35 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v15;
  Value = (__int128 *)AGGraphGetValue();
  v20 = Value[1];
  v19 = Value[2];
  v21 = *Value;
  *(_OWORD *)&v38[10] = *(__int128 *)((char *)Value + 42);
  v37[1] = v20;
  *(_OWORD *)v38 = v19;
  v37[0] = v21;
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v37);
  specialized ViewBodyAccessor.updateBody(of:changed:)(v37, 1);
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v37);
  *(_QWORD *)(StatusReg + 848) = v17;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v23 = v34;
    v22(v34, v12, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v36, v23, v0);
    swift_beginAccess();
    v24 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, (unint64_t)v24);
      static ObservationRegistrar.lastestAccessLists = v24;
    }
    v27 = *((_QWORD *)v24 + 2);
    v26 = *((_QWORD *)v24 + 3);
    if (v27 >= v26 >> 1)
    {
      v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, (unint64_t)v24);
      static ObservationRegistrar.lastestAccessLists = v24;
    }
    *((_QWORD *)v24 + 2) = v27 + 1;
    v22(&v24[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v27], v36, v0);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v23, v0);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  v28 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v28)
  {
    v29 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v30 = *(_QWORD *)(v1 + 72);
    v31 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v31(v3, v29, v0);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v29 += v30;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v35;
  return swift_bridgeObjectRelease();
}

uint64_t specialized StaticBody.updateValue()(void (*a1)(uint64_t), void (*a2)(char *, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  void *v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for ObservationTracking._AccessList();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v40 = (char *)&v36 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v36 - v12;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v36 - v19;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v2 = CurrentAttribute;
    v38 = v13;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v39 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v20, 1, 1, v5);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v20;
  a1(1);
  *(_QWORD *)(StatusReg + 848) = v23;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v20, (uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  v24 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v17);
  }
  else
  {
    v25 = v38;
    v37 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v37(v38, v17, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v40, v25, v5);
    swift_beginAccess();
    v26 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    v29 = *((_QWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    *((_QWORD *)v26 + 2) = v29 + 1;
    v37(&v26[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v29], v40, v5);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v5);
    v24 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v20);
  v30 = v24[463];
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v33 = *(_QWORD *)(v6 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v34(v8, v32, v5);
      a2(v8, v2);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    v24 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v24[463] = v39;
  return swift_bridgeObjectRelease();
}

uint64_t specialized StaticBody.updateValue()(void (*a1)(char *, char *, uint64_t), void (*a2)(uint64_t, double), void (*a3)(char *, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v24;
  double *Value;
  char *v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v36;
  void (*v37)(uint64_t, double);
  void *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;

  v40 = a1;
  v41 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for ObservationTracking._AccessList();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)&v36 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v36 - v13;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v36 - v20;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v3 = CurrentAttribute;
    v36 = v14;
    v37 = a2;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v38 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v21, 1, 1, v6);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v21;
  Value = (double *)AGGraphGetValue();
  v37(1, *Value);
  *(_QWORD *)(StatusReg + 848) = v24;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v21, (uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  }
  else
  {
    v26 = v36;
    v40 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v40(v36, v18, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v39, v26, v6);
    swift_beginAccess();
    v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    v30 = *((_QWORD *)v27 + 2);
    v29 = *((_QWORD *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((_QWORD *)v27 + 2) = v30 + 1;
    v40(&v27[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v30], v39, v6);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  v31 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v31)
  {
    v32 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v33 = *(_QWORD *)(v7 + 72);
    v34 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v34(v9, v32, v6);
      a3(v9, v3);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v38;
  return swift_bridgeObjectRelease();
}

uint64_t specialized StaticBody.updateValue()(uint64_t a1, void (*a2)(uint64_t *, uint64_t), void (*a3)(char *, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v22;
  uint64_t Value;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v36;
  void (*v37)(uint64_t *, uint64_t);
  void *v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v41 = a3;
  v45 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for ObservationTracking._AccessList();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)&v36 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v36 - v12;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v36 - v18;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v3 = CurrentAttribute;
    v37 = a2;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v38 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v19, 1, 1, v5);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v19;
  Value = AGGraphGetValue();
  v42 = *(_QWORD *)Value;
  v43 = *(_OWORD *)(Value + 8);
  v44 = *(_OWORD *)(Value + 24);
  swift_bridgeObjectRetain();
  v37(&v42, 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v22;
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v19, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v16);
    v24 = v41;
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v26 = v40;
    v25(v40, v16, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v39, v26, v5);
    swift_beginAccess();
    v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    v24 = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    v30 = *((_QWORD *)v27 + 2);
    v29 = *((_QWORD *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((_QWORD *)v27 + 2) = v30 + 1;
    v25(&v27[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v30], v39, v5);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v5);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v19);
  v31 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v31)
  {
    v32 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v33 = *(_QWORD *)(v6 + 72);
    v34 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v34(v8, v32, v5);
      v24(v8, v3);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v38;
  return swift_bridgeObjectRelease();
}

unsigned int *specialized DynamicBody.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 *Value;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  unint64_t StatusReg;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  char *v37;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = v0;
  v57 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v45 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v45 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v51 = (uint64_t)&v45 - v15;
  result = (unsigned int *)AGGraphGetValue();
  v17 = *result;
  v18 = *(_DWORD *)(v1 + 24);
  v48 = v13;
  if (v18 != v17 >> 1)
  {
    v19 = *(_DWORD *)(v1 + 20);
    if (v19)
    {
      v20 = *(_QWORD *)(v1 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      v21 = 0;
      v22 = v19 - 1;
      do
      {
        v25 = (uint64_t *)(v20 + v21);
        if (v22)
          v21 += *((_DWORD *)v25 + 2);
        else
          v21 = 0;
        v23 = v22 | v21;
        v24 = *v25;
        *(_QWORD *)&v53 = v25;
        (*(void (**)(__int128 *))(v24 + 112))(&v53);
        --v22;
      }
      while (v23);
    }
    *(_DWORD *)(v1 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (__int128 *)AGGraphGetValue();
  v28 = v27;
  v29 = Value[1];
  v53 = *Value;
  v54 = v29;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v46 = v28;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_12;
  }
  swift_once();
LABEL_12:
  v30 = 1;
  swift_beginAccess();
  v47 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v31 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v51, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v33 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v31;
  v55 = *(_QWORD *)(v1 + 8);
  v56 = *(_QWORD *)(v1 + 16);
  v52 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v53, &v52) & 1) == 0 && (v46 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v30 = AGGraphCurrentAttributeWasModified();
    else
      v30 = 1;
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v30, *(double *)&v53, *((double *)&v53 + 1), *(double *)&v54, *((double *)&v54 + 1));
  *(_QWORD *)(StatusReg + 848) = v33;
  v34 = (uint64_t)v48;
  outlined init with copy of AccessibilityTextAttributeResolver?(v51, (uint64_t)v48, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v34, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v34);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v36 = v50;
    v35(v50, v34, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v49, v36, v2);
    swift_beginAccess();
    v37 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v37 + 2) + 1, 1, (unint64_t)v37);
      static ObservationRegistrar.lastestAccessLists = v37;
    }
    v40 = *((_QWORD *)v37 + 2);
    v39 = *((_QWORD *)v37 + 3);
    if (v40 >= v39 >> 1)
    {
      v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, (unint64_t)v37);
      static ObservationRegistrar.lastestAccessLists = v37;
    }
    *((_QWORD *)v37 + 2) = v40 + 1;
    v35(&v37[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v40], (uint64_t)v49, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v50, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v51);
  v41 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v41)
  {
    v42 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v43 = *(_QWORD *)(v3 + 72);
    v44 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v44(v5, v42, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v42 += v43;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v47;
  return (unsigned int *)swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t StatusReg;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  char *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  _QWORD v54[4];
  _QWORD v55[4];

  v1 = v0;
  v55[3] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v50 = (char *)&v46 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)&v46 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v52 = (uint64_t)&v46 - v15;
  result = (unsigned int *)AGGraphGetValue();
  v17 = *result;
  v18 = *(_DWORD *)(v0 + 24);
  v49 = v13;
  if (v18 != v17 >> 1)
  {
    v19 = *(_DWORD *)(v0 + 20);
    if (v19)
    {
      v20 = *(_QWORD *)(v0 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      v21 = 0;
      v22 = v19 - 1;
      do
      {
        v25 = (uint64_t *)(v20 + v21);
        if (v22)
          v21 += *((_DWORD *)v25 + 2);
        else
          v21 = 0;
        v23 = v22 | v21;
        v24 = *v25;
        v55[0] = v25;
        (*(void (**)(_QWORD *))(v24 + 112))(v55);
        --v22;
      }
      while (v23);
    }
    *(_DWORD *)(v1 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (_QWORD *)AGGraphGetValue();
  v28 = v27;
  v54[0] = *Value;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v47 = v28;
    v29 = one-time initialization token for lastestAccessLists;
    swift_bridgeObjectRetain();
    if (v29 == -1)
      goto LABEL_12;
  }
  swift_once();
LABEL_12:
  v30 = 1;
  swift_beginAccess();
  v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v31 = v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v52, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v33 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v31;
  v54[1] = *(_QWORD *)(v1 + 8);
  v54[2] = *(_QWORD *)(v1 + 16);
  v53 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v54, &v53) & 1) == 0 && (v47 & 1) == 0)
  {
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v30 = AGGraphCurrentAttributeWasModified();
    else
      v30 = 1;
  }
  v34 = swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v34, v30);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v33;
  v35 = (uint64_t)v49;
  outlined init with copy of AccessibilityTextAttributeResolver?(v52, (uint64_t)v49, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v35, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v35);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v37 = v51;
    v36(v51, v35, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v50, v37, v2);
    swift_beginAccess();
    v38 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v38 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v38 + 2) + 1, 1, (unint64_t)v38);
      static ObservationRegistrar.lastestAccessLists = v38;
    }
    v41 = *((_QWORD *)v38 + 2);
    v40 = *((_QWORD *)v38 + 3);
    if (v41 >= v40 >> 1)
    {
      v38 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, (unint64_t)v38);
      static ObservationRegistrar.lastestAccessLists = v38;
    }
    *((_QWORD *)v38 + 2) = v41 + 1;
    v36(&v38[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v41], (uint64_t)v50, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v51, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v52);
  v42 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v42)
  {
    v43 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v44 = *(_QWORD *)(v3 + 72);
    v45 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v45(v5, v43, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v43 += v44;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  swift_bridgeObjectRelease();
  return (unsigned int *)swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t StatusReg;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  _QWORD v55[5];
  _QWORD v56[4];

  v1 = v0;
  v56[3] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v51 = (char *)&v48 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v48 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v53 = (uint64_t)&v48 - v15;
  result = (unsigned int *)AGGraphGetValue();
  v17 = *result;
  v18 = *(_DWORD *)(v0 + 24);
  v50 = v13;
  if (v18 != v17 >> 1)
  {
    v19 = *(_DWORD *)(v0 + 20);
    if (v19)
    {
      v20 = *(_QWORD *)(v0 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      v21 = 0;
      v22 = v19 - 1;
      do
      {
        v25 = (uint64_t *)(v20 + v21);
        if (v22)
          v21 += *((_DWORD *)v25 + 2);
        else
          v21 = 0;
        v23 = v22 | v21;
        v24 = *v25;
        v56[0] = v25;
        (*(void (**)(_QWORD *))(v24 + 112))(v56);
        --v22;
      }
      while (v23);
    }
    *(_DWORD *)(v1 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (_QWORD *)AGGraphGetValue();
  v28 = v27;
  v29 = Value[1];
  v55[0] = *Value;
  v55[1] = v29;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v48 = v28;
    v30 = one-time initialization token for lastestAccessLists;
    swift_retain();
    if (v30 == -1)
      goto LABEL_12;
  }
  swift_once();
LABEL_12:
  v31 = 1;
  swift_beginAccess();
  v49 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v32 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v53, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v34 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v32;
  v55[2] = *(_QWORD *)(v1 + 8);
  v55[3] = *(_QWORD *)(v1 + 16);
  v54 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v55, &v54) & 1) == 0 && (v48 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>, (uint64_t (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t)&type metadata for Image);
    if (AGGraphGetOutputValue())
      v31 = AGGraphCurrentAttributeWasModified();
    else
      v31 = 1;
  }
  v35 = *(double *)v55;
  v36 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v36, v31, v35);
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v34;
  v37 = (uint64_t)v50;
  outlined init with copy of AccessibilityTextAttributeResolver?(v53, (uint64_t)v50, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v37, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v37);
  }
  else
  {
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v39 = v52;
    v38(v52, v37, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v51, v39, v2);
    swift_beginAccess();
    v40 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v40 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v40 + 2) + 1, 1, (unint64_t)v40);
      static ObservationRegistrar.lastestAccessLists = v40;
    }
    v43 = *((_QWORD *)v40 + 2);
    v42 = *((_QWORD *)v40 + 3);
    if (v43 >= v42 >> 1)
    {
      v40 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, (unint64_t)v40);
      static ObservationRegistrar.lastestAccessLists = v40;
    }
    *((_QWORD *)v40 + 2) = v43 + 1;
    v38(&v40[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v43], (uint64_t)v51, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v52, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v53);
  v44 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v44)
  {
    v45 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v46 = *(_QWORD *)(v3 + 72);
    v47 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v47(v5, v45, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v45 += v46;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v49;
  swift_bridgeObjectRelease();
  return (unsigned int *)swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 *Value;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t StatusReg;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[4];

  v1 = v0;
  v55[3] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)&v44 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v49 = (char *)&v44 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v50 = (uint64_t)&v44 - v15;
  result = (unsigned int *)AGGraphGetValue();
  v17 = *result;
  v18 = *(_DWORD *)(v1 + 24);
  v47 = v13;
  if (v18 != v17 >> 1)
  {
    v19 = *(_DWORD *)(v1 + 20);
    if (v19)
    {
      v20 = *(_QWORD *)(v1 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      v21 = 0;
      v22 = v19 - 1;
      do
      {
        v25 = (uint64_t *)(v20 + v21);
        if (v22)
          v21 += *((_DWORD *)v25 + 2);
        else
          v21 = 0;
        v23 = v22 | v21;
        v24 = *v25;
        v55[0] = v25;
        (*(void (**)(_QWORD *))(v24 + 112))(v55);
        --v22;
      }
      while (v23);
    }
    *(_DWORD *)(v1 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (__int128 *)AGGraphGetValue();
  v28 = v27;
  v52 = *Value;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v45 = v28;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_12;
  }
  swift_once();
LABEL_12:
  v29 = 1;
  swift_beginAccess();
  v46 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v30 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v50, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v32 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v30;
  v53 = *(_QWORD *)(v1 + 8);
  v54 = *(_QWORD *)(v1 + 16);
  v51 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, &v51) & 1) == 0 && (v45 & 1) == 0)
  {
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    if (AGGraphGetOutputValue())
      v29 = AGGraphCurrentAttributeWasModified();
    else
      v29 = 1;
  }
  specialized GestureBodyAccessor.updateBody(of:changed:)(v29, *(double *)&v52, *((double *)&v52 + 1));
  *(_QWORD *)(StatusReg + 848) = v32;
  v33 = (uint64_t)v47;
  outlined init with copy of AccessibilityTextAttributeResolver?(v50, (uint64_t)v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v33, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v33);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v35 = v49;
    v34(v49, v33, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v48, v35, v2);
    swift_beginAccess();
    v36 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v36;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v36 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, (unint64_t)v36);
      static ObservationRegistrar.lastestAccessLists = v36;
    }
    v39 = *((_QWORD *)v36 + 2);
    v38 = *((_QWORD *)v36 + 3);
    if (v39 >= v38 >> 1)
    {
      v36 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, (unint64_t)v36);
      static ObservationRegistrar.lastestAccessLists = v36;
    }
    *((_QWORD *)v36 + 2) = v39 + 1;
    v34(&v36[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v39], (uint64_t)v48, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v49, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v50);
  v40 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v40)
  {
    v41 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v42 = *(_QWORD *)(v3 + 72);
    v43 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v43(v5, v41, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v46;
  return (unsigned int *)swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t StatusReg;
  uint64_t v31;
  int *Value;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  void *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];

  v1 = v0;
  v53[3] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v44 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v48 = (char *)&v44 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v49 = (uint64_t)&v44 - v15;
  result = (unsigned int *)AGGraphGetValue();
  v17 = *result;
  v18 = *(_DWORD *)(v0 + 24);
  v46 = v13;
  if (v18 != v17 >> 1)
  {
    v19 = *(_DWORD *)(v0 + 20);
    if (v19)
    {
      v20 = *(_QWORD *)(v0 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      v21 = 0;
      v22 = v19 - 1;
      do
      {
        v25 = (uint64_t *)(v20 + v21);
        if (v22)
          v21 += *((_DWORD *)v25 + 2);
        else
          v21 = 0;
        v23 = v22 | v21;
        v24 = *v25;
        v53[0] = v25;
        (*(void (**)(_QWORD *))(v24 + 112))(v53);
        --v22;
      }
      while (v23);
    }
    *(_DWORD *)(v1 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  AGGraphGetValue();
  v27 = v26;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_31;
  }
  v44 = v27;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_31:
    swift_once();
  v28 = 1;
  swift_beginAccess();
  v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v29 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v49, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v31 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v29;
  v51 = *(_QWORD *)(v1 + 8);
  v52 = *(_QWORD *)(v1 + 16);
  Value = (int *)AGGraphGetValue();
  v50 = *Value;
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)Value, &v50) & 1) != 0)
  {
    v33 = v48;
  }
  else
  {
    v33 = v48;
    if ((v44 & 1) == 0)
    {
      type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
      if (AGGraphGetOutputValue())
        v28 = AGGraphCurrentAttributeWasModified();
      else
        v28 = 1;
    }
  }
  specialized GestureBodyAccessor.updateBody(of:changed:)(v28);
  *(_QWORD *)(StatusReg + 848) = v31;
  v34 = (uint64_t)v46;
  outlined init with copy of AccessibilityTextAttributeResolver?(v49, (uint64_t)v46, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v34, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v34);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v35(v33, v34, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v47, v33, v2);
    swift_beginAccess();
    v36 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v36;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v36 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, (unint64_t)v36);
      static ObservationRegistrar.lastestAccessLists = v36;
    }
    v39 = *((_QWORD *)v36 + 2);
    v38 = *((_QWORD *)v36 + 3);
    if (v39 >= v38 >> 1)
    {
      v36 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, (unint64_t)v36);
      static ObservationRegistrar.lastestAccessLists = v36;
    }
    *((_QWORD *)v36 + 2) = v39 + 1;
    v35(&v36[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v39], (uint64_t)v47, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v33, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v49);
  v40 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v40)
  {
    v41 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v42 = *(_QWORD *)(v3 + 72);
    v43 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v43(v5, v41, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  return (unsigned int *)swift_bridgeObjectRelease();
}

uint64_t specialized DynamicBody.updateValue()()
{
  unsigned int *v0;
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t StatusReg;
  uint64_t v23;
  unint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v1 = v0;
  v51 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v40 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v44 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v45 = (uint64_t)&v40 - v15;
  if (v0[12] != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v49 = *((_QWORD *)v0 + 4);
    *(_QWORD *)&v50 = *((_QWORD *)v0 + 5);
    _DynamicPropertyBuffer.reset()();
    v0[12] = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v18 = v17;
  v49 = *(_QWORD *)Value;
  v50 = *(_OWORD *)(Value + 8);
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v40 = v10;
  v19 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v19 != -1)
LABEL_23:
    swift_once();
  v20 = 1;
  swift_beginAccess();
  v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v21 = v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v45, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v41 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v21;
  v47 = *((_QWORD *)v1 + 4);
  v48 = *((_QWORD *)v1 + 5);
  v46 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v49, &v46) & 1) == 0 && (v18 & 1) == 0)
  {
    if (AGGraphGetOutputValue())
      v20 = AGGraphCurrentAttributeWasModified();
    else
      v20 = 1;
  }
  v23 = *v1;
  v24 = *((_QWORD *)v1 + 1);
  v25 = *((_BYTE *)v1 + 16);
  v26 = v50;
  swift_retain();
  v27 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v27, v20, *(double *)&v26, *((double *)&v26 + 1), v23, v24, v25);
  swift_release();
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v41;
  v28 = v44;
  outlined init with copy of AccessibilityTextAttributeResolver?(v45, v44, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v28, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v30 = v40;
    v29(v40, v28, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v43, v30, v2);
    swift_beginAccess();
    v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    v34 = *((_QWORD *)v31 + 2);
    v33 = *((_QWORD *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((_QWORD *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v34], (uint64_t)v43, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v45);
  v35 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    v36 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v37 = *(_QWORD *)(v3 + 72);
    v38 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v38(v5, v36, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v36 += v37;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  unsigned int *v0;
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *Value;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t StatusReg;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD v47[8];

  v1 = v0;
  v47[7] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v39 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v44 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v45 = (uint64_t)&v39 - v15;
  if (v0[12] != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v47[4] = *((_QWORD *)v0 + 4);
    v47[5] = *((_QWORD *)v0 + 5);
    _DynamicPropertyBuffer.reset()();
    v0[12] = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (_QWORD *)AGGraphGetValue();
  v18 = v17;
  v47[0] = *Value;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v40 = v10;
  v19 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v19 != -1)
LABEL_23:
    swift_once();
  v20 = 1;
  swift_beginAccess();
  v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v21 = v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v45, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v41 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v21;
  v47[1] = *((_QWORD *)v1 + 4);
  v47[2] = *((_QWORD *)v1 + 5);
  v46 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v47, &v46) & 1) == 0 && (v18 & 1) == 0)
  {
    if (AGGraphGetOutputValue())
      v20 = AGGraphCurrentAttributeWasModified();
    else
      v20 = 1;
  }
  v23 = *v1;
  v24 = *((_QWORD *)v1 + 1);
  v25 = *((_BYTE *)v1 + 16);
  swift_retain();
  v26 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v26, v20, v23, v24, v25);
  swift_release();
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v41;
  v27 = v44;
  outlined init with copy of AccessibilityTextAttributeResolver?(v45, v44, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v27, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v27);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v29 = v40;
    v28(v40, v27, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v43, v29, v2);
    swift_beginAccess();
    v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    v33 = *((_QWORD *)v30 + 2);
    v32 = *((_QWORD *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((_QWORD *)v30 + 2) = v33 + 1;
    v28(&v30[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v33], (uint64_t)v43, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v29, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v45);
  v34 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v34)
  {
    v35 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(_QWORD *)(v3 + 72);
    v37 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v37(v5, v35, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v35 += v36;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t StatusReg;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v1 = v0;
  v55 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v41 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v48 = (uint64_t)&v41 - v16;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v52 = *(_QWORD *)(v0 + 8);
    v53 = *(_QWORD *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v19 = v18;
  v20 = *(_QWORD *)(Value + 8);
  v52 = *(_QWORD *)Value;
  v53 = v20;
  v47 = *(_OWORD *)(Value + 16);
  v54 = v47;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v43 = v19;
  v45 = v14;
  v21 = one-time initialization token for lastestAccessLists;
  swift_retain();
  swift_retain();
  if (v21 != -1)
LABEL_23:
    swift_once();
  v22 = 1;
  swift_beginAccess();
  *(_QWORD *)&v47 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v23 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v48, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v44 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v23;
  v50 = *(_QWORD *)(v1 + 8);
  v51 = *(_QWORD *)(v1 + 16);
  v49 = *(_DWORD *)AGGraphGetValue();
  v25 = _DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, &v49);
  v42 = v10;
  if ((v25 & 1) == 0 && (v43 & 1) == 0)
  {
    if (AGGraphGetOutputValue())
      v22 = AGGraphCurrentAttributeWasModified();
    else
      v22 = 1;
  }
  v26 = v52;
  v27 = v53;
  v28 = v54;
  swift_retain();
  swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v26, v27, v28, *((uint64_t *)&v28 + 1), v22);
  swift_release();
  swift_release();
  v29 = (uint64_t)v45;
  *(_QWORD *)(StatusReg + 848) = v44;
  outlined init with copy of AccessibilityTextAttributeResolver?(v48, v29, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v29, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v29);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v31 = v42;
    v30(v42, v29, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v46, v31, v2);
    swift_beginAccess();
    v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    v35 = *((_QWORD *)v32 + 2);
    v34 = *((_QWORD *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((_QWORD *)v32 + 2) = v35 + 1;
    v30(&v32[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v35], (uint64_t)v46, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v31, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v48);
  v36 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v38 = *(_QWORD *)(v3 + 72);
    v39 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v39(v5, v37, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v37 += v38;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)v47;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t StatusReg;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[8];

  v46[7] = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for ObservationTracking._AccessList();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v38 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v38 - v8;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v43 = (uint64_t)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v38 - v14;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v46[4] = *(_QWORD *)(v0 + 8);
    v46[5] = *(_QWORD *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (_QWORD *)AGGraphGetValue();
  v18 = v17;
  v46[0] = *Value;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v39 = v9;
  v40 = v18;
  v19 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v19 != -1)
LABEL_23:
    swift_once();
  v20 = 1;
  swift_beginAccess();
  v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = (uint64_t)v15;
  v23 = *(_QWORD *)(StatusReg + 848);
  v44 = v22;
  *(_QWORD *)(StatusReg + 848) = v22;
  v46[1] = *(_QWORD *)(v0 + 8);
  v46[2] = *(_QWORD *)(v0 + 16);
  v45 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v46, &v45) & 1) == 0 && (v40 & 1) == 0)
  {
    type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v20 = AGGraphCurrentAttributeWasModified();
    else
      v20 = 1;
  }
  v24 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v24, v20);
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v23;
  v26 = v43;
  v25 = v44;
  outlined init with copy of AccessibilityTextAttributeResolver?(v44, v43, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v26, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v26);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    v28 = v39;
    v27(v39, v26, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v42, v28, v1);
    swift_beginAccess();
    v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    v32 = *((_QWORD *)v29 + 2);
    v31 = *((_QWORD *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((_QWORD *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v32], (uint64_t)v42, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v28, v1);
    v25 = v44;
  }
  outlined destroy of ObservationTracking._AccessList?(v25);
  v33 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    v34 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v35 = *(_QWORD *)(v2 + 72);
    v36 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v36(v4, v34, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v34 += v35;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v41;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 *Value;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t StatusReg;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  v49 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v37 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v41 = (uint64_t)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v37 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v47 = *(_QWORD *)(v0 + 8);
    v48 = *(_QWORD *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (unsigned __int8 *)AGGraphGetValue();
  v19 = v18;
  v44 = *Value;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v37 = v10;
  v38 = v19;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v20 = 1;
  swift_beginAccess();
  v39 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = (uint64_t)v16;
  v23 = *(_QWORD *)(StatusReg + 848);
  v42 = v22;
  *(_QWORD *)(StatusReg + 848) = v22;
  v45 = *(_QWORD *)(v1 + 8);
  v46 = *(_QWORD *)(v1 + 16);
  v43 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v44, &v43) & 1) == 0 && (v38 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v20 = AGGraphCurrentAttributeWasModified();
    else
      v20 = 1;
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v44, v20);
  *(_QWORD *)(StatusReg + 848) = v23;
  v25 = v41;
  v24 = v42;
  outlined init with copy of AccessibilityTextAttributeResolver?(v42, v41, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v25, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v25);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v27 = v37;
    v26(v37, v25, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v40, v27, v2);
    swift_beginAccess();
    v28 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    v31 = *((_QWORD *)v28 + 2);
    v30 = *((_QWORD *)v28 + 3);
    if (v31 >= v30 >> 1)
    {
      v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    *((_QWORD *)v28 + 2) = v31 + 1;
    v26(&v28[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v31], (uint64_t)v40, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v27, v2);
    v24 = v42;
  }
  outlined destroy of ObservationTracking._AccessList?(v24);
  v32 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v32)
  {
    v33 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v34 = *(_QWORD *)(v3 + 72);
    v35 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v35(v5, v33, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v33 += v34;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v39;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  unint64_t StatusReg;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53[6];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;

  v1 = v0;
  v64 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v43 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v44 = (char *)&v43 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v51 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v52 = (uint64_t)&v43 - v14;
  v15 = *(_DWORD *)(v0 + 4);
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v59 = *(_QWORD *)(v0 + 8);
    v60 = *(_QWORD *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v50 = v15;
  Value = AGGraphGetValue();
  v45 = v17;
  v18 = *(_QWORD *)Value;
  v19 = *(_QWORD *)(Value + 8);
  v20 = *(_QWORD *)(Value + 16);
  v21 = *(_QWORD *)(Value + 24);
  v22 = *(_BYTE *)(Value + 32);
  v54 = *(_QWORD *)Value;
  v55 = v19;
  v56 = v20;
  v57 = v21;
  v58 = v22;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  outlined copy of Path.Storage(v18, v19, v20, v21, v22);
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v23 = 1;
  swift_beginAccess();
  v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v24 = v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v52, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v47 = *(_QWORD *)(StatusReg + 848);
  v46 = StatusReg;
  *(_QWORD *)(StatusReg + 848) = v24;
  v59 = *(_QWORD *)(v1 + 8);
  v60 = *(_QWORD *)(v1 + 16);
  v53[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v54, v53) & 1) == 0 && (v45 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Path, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v23 = AGGraphCurrentAttributeWasModified();
    else
      v23 = 1;
  }
  v26 = v54;
  v27 = v55;
  v28 = v56;
  v29 = v57;
  v59 = v54;
  v60 = v55;
  v61 = v56;
  v62 = v57;
  v30 = v58;
  v63 = v58;
  outlined copy of Path.Storage(v54, v55, v56, v57, v58);
  specialized ViewBodyAccessor.updateBody(of:changed:)((uint64_t)&v59, v23);
  outlined consume of Path.Storage(v26, v27, v28, v29, v30);
  *(_QWORD *)(v46 + 848) = v47;
  v31 = v51;
  outlined init with copy of AccessibilityTextAttributeResolver?(v52, v51, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v31, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v31);
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v33 = v44;
    v32(v44, v31, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v49, v33, v2);
    swift_beginAccess();
    v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((_QWORD *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v37], (uint64_t)v49, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v33, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v52);
  v38 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v40 = *(_QWORD *)(v3 + 72);
    v41 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v41(v5, v39, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v39 += v40;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  swift_bridgeObjectRelease();
  return outlined consume of Path.Storage(v54, v55, v56, v57, v58);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  char v22;
  unint64_t StatusReg;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;
  int v48[6];
  __int128 v49[2];
  char v50;
  uint64_t v51;

  v1 = v0;
  v51 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v39 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v43 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v39 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v49[0] = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v19 = v18;
  v20 = *(_BYTE *)(Value + 32);
  v21 = *(_OWORD *)(Value + 16);
  v45 = *(_OWORD *)Value;
  v46 = v21;
  v47 = v20;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v40 = v19;
  v39 = v10;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v22 = 1;
  swift_beginAccess();
  v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24 = (uint64_t)v16;
  v25 = *(_QWORD *)(StatusReg + 848);
  v44 = v24;
  *(_QWORD *)(StatusReg + 848) = v24;
  v49[0] = *(_OWORD *)(v1 + 8);
  v48[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v45, v48) & 1) == 0 && (v40 & 1) == 0)
  {
    type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v22 = AGGraphCurrentAttributeWasModified();
    else
      v22 = 1;
  }
  v49[0] = v45;
  v49[1] = v46;
  v50 = v47;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v49, v22);
  *(_QWORD *)(StatusReg + 848) = v25;
  v27 = v43;
  v26 = v44;
  outlined init with copy of AccessibilityTextAttributeResolver?(v44, v43, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v27, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v27);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v29 = v39;
    v28(v39, v27, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v42, v29, v2);
    swift_beginAccess();
    v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    v33 = *((_QWORD *)v30 + 2);
    v32 = *((_QWORD *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((_QWORD *)v30 + 2) = v33 + 1;
    v28(&v30[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v33], (uint64_t)v42, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v29, v2);
    v26 = v44;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  v34 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v34)
  {
    v35 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(_QWORD *)(v3 + 72);
    v37 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v37(v5, v35, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v35 += v36;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v41;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  unint64_t StatusReg;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49[6];
  _OWORD v50[3];
  uint64_t v51;

  v1 = v0;
  v51 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v40 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v44 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v40 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v50[0] = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v19 = v18;
  v20 = *(_BYTE *)(Value + 32);
  v21 = *(_QWORD *)(Value + 40);
  v22 = *(_OWORD *)(Value + 16);
  v46 = *(_OWORD *)Value;
  v47 = v22;
  LOBYTE(v48) = v20;
  *((_QWORD *)&v48 + 1) = v21;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v41 = v19;
  v40 = v10;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v23 = 1;
  swift_beginAccess();
  v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  v24 = (uint64_t)v16;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v26 = *(_QWORD *)(StatusReg + 848);
  v45 = v24;
  *(_QWORD *)(StatusReg + 848) = v24;
  v50[0] = *(_OWORD *)(v1 + 8);
  v49[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v46, v49) & 1) == 0 && (v41 & 1) == 0)
  {
    type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v23 = AGGraphCurrentAttributeWasModified();
    else
      v23 = 1;
  }
  v50[0] = v46;
  v50[1] = v47;
  v50[2] = v48;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v50, v23);
  *(_QWORD *)(StatusReg + 848) = v26;
  v28 = v44;
  v27 = v45;
  outlined init with copy of AccessibilityTextAttributeResolver?(v45, v44, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v28, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v30 = v40;
    v29(v40, v28, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v43, v30, v2);
    swift_beginAccess();
    v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    v34 = *((_QWORD *)v31 + 2);
    v33 = *((_QWORD *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((_QWORD *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v34], (uint64_t)v43, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v2);
    v27 = v45;
  }
  outlined destroy of ObservationTracking._AccessList?(v27);
  v35 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    v36 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v37 = *(_QWORD *)(v3 + 72);
    v38 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v38(v5, v36, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v36 += v37;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t StatusReg;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;

  v1 = v0;
  v56 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v42 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v42 = (char *)&v42 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v47 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v48 = (uint64_t)&v42 - v14;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v52 = *(_QWORD *)(v0 + 8);
    v53 = *(_QWORD *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v43 = v16;
  v18 = *(_QWORD *)Value;
  v17 = *(_QWORD *)(Value + 8);
  v19 = *(_BYTE *)(Value + 16);
  v20 = *(_QWORD *)(Value + 24);
  v52 = *(_QWORD *)Value;
  v53 = v17;
  v54 = v19;
  v55 = v20;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  outlined copy of Text.Storage(v18, v17, v19);
  v21 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  if (v21 != -1)
LABEL_23:
    swift_once();
  v22 = 1;
  swift_beginAccess();
  v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v23 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v48, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v44 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v23;
  v50 = *(_QWORD *)(v1 + 8);
  v51 = *(_QWORD *)(v1 + 16);
  v49 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, &v49) & 1) == 0 && (v43 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, (uint64_t)&type metadata for Text);
    if (AGGraphGetOutputValue())
      v22 = AGGraphCurrentAttributeWasModified();
    else
      v22 = 1;
  }
  v25 = v22;
  v26 = v52;
  v27 = v53;
  v28 = v54;
  v29 = v55;
  outlined copy of Text.Storage(v52, v53, v54);
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v26, v27, v28, v29, v25);
  outlined consume of Text.Storage(v26, v27, v28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v44;
  v30 = v47;
  outlined init with copy of AccessibilityTextAttributeResolver?(v48, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v30, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v30);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v32 = v42;
    v31(v42, v30, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v46, v32, v2);
    swift_beginAccess();
    v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    v36 = *((_QWORD *)v33 + 2);
    v35 = *((_QWORD *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((_QWORD *)v33 + 2) = v36 + 1;
    v31(&v33[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v36], (uint64_t)v46, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v48);
  v37 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v37)
  {
    v38 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v39 = *(_QWORD *)(v3 + 72);
    v40 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v40(v5, v38, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v38 += v39;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v52, v53, v54);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  char v21;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = v0;
  v52 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v38 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v43 = (uint64_t)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v38 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v50 = *(_QWORD *)(v0 + 8);
    v51 = *(_QWORD *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v19 = v18;
  v20 = *(_BYTE *)(Value + 16);
  v46 = *(_OWORD *)Value;
  v47 = v20;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v39 = v10;
  v40 = v19;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v21 = 1;
  swift_beginAccess();
  v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23 = (uint64_t)v16;
  v24 = *(_QWORD *)(StatusReg + 848);
  v44 = v23;
  *(_QWORD *)(StatusReg + 848) = v23;
  v48 = *(_QWORD *)(v1 + 8);
  v49 = *(_QWORD *)(v1 + 16);
  v45 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v46, &v45) & 1) == 0 && (v40 & 1) == 0)
  {
    type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v21 = AGGraphCurrentAttributeWasModified();
    else
      v21 = 1;
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v47, v21, *(double *)&v46, *((double *)&v46 + 1));
  *(_QWORD *)(StatusReg + 848) = v24;
  v26 = v43;
  v25 = v44;
  outlined init with copy of AccessibilityTextAttributeResolver?(v44, v43, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v26, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v26);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v28 = v39;
    v27(v39, v26, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v42, v28, v2);
    swift_beginAccess();
    v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    v32 = *((_QWORD *)v29 + 2);
    v31 = *((_QWORD *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((_QWORD *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v32], (uint64_t)v42, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v28, v2);
    v25 = v44;
  }
  outlined destroy of ObservationTracking._AccessList?(v25);
  v33 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    v34 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v35 = *(_QWORD *)(v3 + 72);
    v36 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v36(v5, v34, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v34 += v35;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v41;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  double v21;
  char v22;
  unint64_t StatusReg;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  unsigned __int8 v50;
  double v51;
  uint64_t v52;

  v1 = v0;
  v52 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v39 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v44 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v39 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v49 = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v19 = v18;
  v20 = *(_BYTE *)(Value + 16);
  v21 = *(double *)(Value + 24);
  v49 = *(_OWORD *)Value;
  v50 = v20;
  v51 = v21;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v40 = v10;
  v41 = v19;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v22 = 1;
  swift_beginAccess();
  v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24 = (uint64_t)v16;
  v25 = *(_QWORD *)(StatusReg + 848);
  v45 = v24;
  *(_QWORD *)(StatusReg + 848) = v24;
  v47 = *(_QWORD *)(v1 + 8);
  v48 = *(_QWORD *)(v1 + 16);
  v46 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v49, &v46) & 1) == 0 && (v41 & 1) == 0)
  {
    type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
    if (AGGraphGetOutputValue())
      v22 = AGGraphCurrentAttributeWasModified();
    else
      v22 = 1;
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v50, v22, *(double *)&v49, *((double *)&v49 + 1), v51);
  *(_QWORD *)(StatusReg + 848) = v25;
  v27 = v44;
  v26 = v45;
  outlined init with copy of AccessibilityTextAttributeResolver?(v45, v44, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v27, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v27);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v29 = v40;
    v28(v40, v27, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v43, v29, v2);
    swift_beginAccess();
    v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    v33 = *((_QWORD *)v30 + 2);
    v32 = *((_QWORD *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((_QWORD *)v30 + 2) = v33 + 1;
    v28(&v30[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v33], (uint64_t)v43, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v29, v2);
    v26 = v45;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  v34 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v34)
  {
    v35 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(_QWORD *)(v3 + 72);
    v37 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v37(v5, v35, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v35 += v36;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t StatusReg;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44[6];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v1 = v0;
  v48 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v39 = (char *)&v35 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v35 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v40 = (uint64_t)&v35 - v16;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v45 = *(_QWORD *)(v0 + 8);
    *(_QWORD *)&v46 = *(_QWORD *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v19 = v18;
  v41 = *(_QWORD *)Value;
  v42 = *(_OWORD *)(Value + 8);
  v43 = *(_OWORD *)(Value + 24);
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v36 = v19;
  v35 = v10;
  v20 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  if (v20 != -1)
LABEL_23:
    swift_once();
  v21 = 1;
  swift_beginAccess();
  v38 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v22 = v40;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v40, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v37 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v22;
  v45 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)&v46 = *(_QWORD *)(v1 + 16);
  v44[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v41, v44) & 1) == 0 && (v36 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
    if (AGGraphGetOutputValue())
      v21 = AGGraphCurrentAttributeWasModified();
    else
      v21 = 1;
  }
  v45 = v41;
  v46 = v42;
  v47 = v43;
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)((__int128 *)&v45, v21);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v37;
  outlined init with copy of AccessibilityTextAttributeResolver?(v40, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v14);
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v25 = v35;
    v24(v35, v14, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v39, v25, v2);
    swift_beginAccess();
    v26 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    v29 = *((_QWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    *((_QWORD *)v26 + 2) = v29 + 1;
    v24(&v26[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v29], v39, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v25, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v40);
  v30 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v30)
  {
    v31 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v32 = *(_QWORD *)(v3 + 72);
    v33 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v33(v5, v31, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v31 += v32;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v38;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  char v17;
  char v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t StatusReg;
  uint64_t v24;
  unint64_t v25;
  char v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  double v54;
  uint64_t v55;

  v1 = v0;
  v55 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v42 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v47 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v48 = (uint64_t)&v42 - v15;
  if (v0[12] != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v52 = *((_QWORD *)v0 + 4);
    *(_QWORD *)&v53 = *((_QWORD *)v0 + 5);
    _DynamicPropertyBuffer.reset()();
    v0[12] = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v18 = v17;
  v19 = *(double *)(Value + 24);
  v52 = *(_QWORD *)Value;
  v53 = *(_OWORD *)(Value + 8);
  v54 = v19;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v43 = v10;
  v20 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v20 != -1)
LABEL_23:
    swift_once();
  v21 = 1;
  swift_beginAccess();
  v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v22 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v48, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v44 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v22;
  v50 = *((_QWORD *)v1 + 4);
  v51 = *((_QWORD *)v1 + 5);
  v49 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, &v49) & 1) == 0 && (v18 & 1) == 0)
  {
    if (AGGraphGetOutputValue())
      v21 = AGGraphCurrentAttributeWasModified();
    else
      v21 = 1;
  }
  v24 = *v1;
  v25 = *((_QWORD *)v1 + 1);
  v26 = *((_BYTE *)v1 + 16);
  v27 = v53;
  v28 = v54;
  swift_retain();
  v29 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v29, v21, *(double *)&v27, *((double *)&v27 + 1), v28, v24, v25, v26);
  swift_release();
  swift_release();
  *(_QWORD *)(StatusReg + 848) = v44;
  v30 = v47;
  outlined init with copy of AccessibilityTextAttributeResolver?(v48, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v30, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v30);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v32 = v43;
    v31(v43, v30, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v46, v32, v2);
    swift_beginAccess();
    v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    v36 = *((_QWORD *)v33 + 2);
    v35 = *((_QWORD *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((_QWORD *)v33 + 2) = v36 + 1;
    v31(&v33[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v36], (uint64_t)v46, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v48);
  v37 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v37)
  {
    v38 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v39 = *(_QWORD *)(v3 + 72);
    v40 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v40(v5, v38, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v38 += v39;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t StatusReg;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  void *v45;
  char *v46;
  uint64_t v47;
  int v48[6];
  __int128 v49;
  __int128 v50;
  _BYTE v51[26];
  _OWORD v52[2];
  _OWORD v53[2];
  uint64_t v54;

  v1 = v0;
  v54 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v42 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v42 = (char *)&v42 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v47 = (uint64_t)&v42 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v52[0] = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v43 = v17;
  v18 = *(_QWORD *)(Value + 16);
  v19 = *(_BYTE *)(Value + 24);
  v20 = *(_QWORD *)(Value + 32);
  v21 = *(_BYTE *)(Value + 40);
  v22 = *(_QWORD *)(Value + 48);
  v23 = *(_BYTE *)(Value + 56);
  v24 = *(_BYTE *)(Value + 57);
  v49 = *(_OWORD *)Value;
  *(_QWORD *)&v50 = v18;
  BYTE8(v50) = v19;
  *(_QWORD *)v51 = v20;
  v51[8] = v21;
  *(_QWORD *)&v51[16] = v22;
  v51[24] = v23;
  v51[25] = v24;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v44 = v13;
  v25 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v25 != -1)
LABEL_23:
    swift_once();
  v26 = 1;
  swift_beginAccess();
  v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v27 = v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v47, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v29 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v27;
  v52[0] = *(_OWORD *)(v1 + 8);
  v48[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v49, v48) & 1) == 0 && (v43 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
    if (AGGraphGetOutputValue())
      v26 = AGGraphCurrentAttributeWasModified();
    else
      v26 = 1;
  }
  v52[0] = v49;
  v52[1] = v50;
  v53[0] = *(_OWORD *)v51;
  *(_OWORD *)((char *)v53 + 10) = *(_OWORD *)&v51[10];
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v52);
  specialized ViewBodyAccessor.updateBody(of:changed:)(v52, v26);
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v52);
  *(_QWORD *)(StatusReg + 848) = v29;
  v30 = (uint64_t)v44;
  outlined init with copy of AccessibilityTextAttributeResolver?(v47, (uint64_t)v44, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v30, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v30);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v32 = v42;
    v31(v42, v30, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v46, v32, v2);
    swift_beginAccess();
    v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    v36 = *((_QWORD *)v33 + 2);
    v35 = *((_QWORD *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((_QWORD *)v33 + 2) = v36 + 1;
    v31(&v33[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v36], (uint64_t)v46, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v47);
  v37 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v37)
  {
    v38 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v39 = *(_QWORD *)(v3 + 72);
    v40 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v40(v5, v38, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v38 += v39;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DynamicBody.updateValue()(uint64_t a1, void (*a2)(_QWORD), void (*a3)(uint64_t), void (*a4)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t CurrentAttribute;
  uint64_t v25;
  uint64_t v26;
  unint64_t StatusReg;
  int *Value;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v49 = a3;
  v43 = a2;
  v7 = v4;
  v56 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for ObservationTracking._AccessList();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v41 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v41 - v15;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v48 = (uint64_t)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v50 = (uint64_t)&v41 - v21;
  if (*(_DWORD *)(v4 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v54 = *(_QWORD *)(v4 + 8);
    v55 = *(_QWORD *)(v4 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v4 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  AGGraphGetValue();
  v23 = v22;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v5 = CurrentAttribute;
  v44 = v23;
  v42 = v16;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v25 = 1;
  swift_beginAccess();
  v46 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v26 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v50, 1, 1, v8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v45 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v26;
  v52 = *(_QWORD *)(v7 + 8);
  v53 = *(_QWORD *)(v7 + 16);
  Value = (int *)AGGraphGetValue();
  v51 = *Value;
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)Value, &v51) & 1) == 0 && (v44 & 1) == 0)
  {
    v43(0);
    if (AGGraphGetOutputValue())
      v25 = AGGraphCurrentAttributeWasModified();
    else
      v25 = 1;
  }
  v49(v25);
  *(_QWORD *)(StatusReg + 848) = v45;
  v29 = v48;
  outlined init with copy of AccessibilityTextAttributeResolver?(v50, v48, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v29, 1, v8) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v29);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    v31 = v42;
    v30(v42, v29, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v47, v31, v8);
    swift_beginAccess();
    v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    v35 = *((_QWORD *)v32 + 2);
    v34 = *((_QWORD *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((_QWORD *)v32 + 2) = v35 + 1;
    v30(&v32[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v35], (uint64_t)v47, v8);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v31, v8);
  }
  outlined destroy of ObservationTracking._AccessList?(v50);
  v36 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v38 = *(_QWORD *)(v9 + 72);
    v39 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v39(v11, v37, v8);
      a4(v11, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v37 += v38;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v46;
  return swift_bridgeObjectRelease();
}

uint64_t specialized DynamicBody.updateValue()(uint64_t a1, void (*a2)(_QWORD), void (*a3)(uint64_t, double), void (*a4)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *Value;
  uint64_t v23;
  uint64_t v24;
  uint64_t CurrentAttribute;
  uint64_t v26;
  uint64_t v27;
  unint64_t StatusReg;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v41;
  void (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, double);
  uint64_t v49;
  int v50;
  double v51[8];

  v48 = a3;
  v42 = a2;
  v7 = v4;
  v51[7] = *(double *)MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for ObservationTracking._AccessList();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v46 = (char *)&v41 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v41 - v15;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v47 = (uint64_t)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v49 = (uint64_t)&v41 - v21;
  if (*(_DWORD *)(v4 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v51[4] = *(double *)(v4 + 8);
    v51[5] = *(double *)(v4 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v4 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = (double *)AGGraphGetValue();
  v24 = v23;
  v51[0] = *Value;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v5 = CurrentAttribute;
  v43 = v24;
  v41 = v16;
  if (one-time initialization token for lastestAccessLists != -1)
LABEL_23:
    swift_once();
  v26 = 1;
  swift_beginAccess();
  v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v27 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v49, 1, 1, v8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v44 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v27;
  v51[1] = *(double *)(v7 + 8);
  v51[2] = *(double *)(v7 + 16);
  v50 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v51, &v50) & 1) == 0 && (v43 & 1) == 0)
  {
    v42(0);
    if (AGGraphGetOutputValue())
      v26 = AGGraphCurrentAttributeWasModified();
    else
      v26 = 1;
  }
  v48(v26, v51[0]);
  *(_QWORD *)(StatusReg + 848) = v44;
  v29 = v47;
  outlined init with copy of AccessibilityTextAttributeResolver?(v49, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v29, 1, v8) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v29);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    v31 = v41;
    v30(v41, v29, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v46, v31, v8);
    swift_beginAccess();
    v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    v35 = *((_QWORD *)v32 + 2);
    v34 = *((_QWORD *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((_QWORD *)v32 + 2) = v35 + 1;
    v30(&v32[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v35], (uint64_t)v46, v8);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v31, v8);
  }
  outlined destroy of ObservationTracking._AccessList?(v49);
  v36 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v38 = *(_QWORD *)(v9 + 72);
    v39 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v39(v11, v37, v8);
      a4(v11, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v37 += v38;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  return swift_bridgeObjectRelease();
}

void specialized DynamicBody.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  char v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  unint64_t StatusReg;
  int v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;

  v1 = v0;
  v56 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v43 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v43 - v9;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v48 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v49 = (uint64_t)&v43 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v53 = *(_QWORD *)(v0 + 8);
    v54 = *(id *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v18 = v17;
  v20 = *(void **)(Value + 8);
  v19 = *(void **)(Value + 16);
  LOBYTE(v53) = *(_BYTE *)Value;
  v54 = v20;
  v55 = v19;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v44 = v10;
  v21 = one-time initialization token for lastestAccessLists;
  v22 = v20;
  v23 = v19;
  if (v21 != -1)
LABEL_23:
    swift_once();
  v24 = 1;
  swift_beginAccess();
  v46 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v25 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v49, 1, 1, v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v45 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v25;
  v51 = *(_QWORD *)(v1 + 8);
  v52 = *(_QWORD *)(v1 + 16);
  v50 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v53, &v50) & 1) == 0 && (v18 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>(0);
    if (AGGraphGetOutputValue())
      v24 = AGGraphCurrentAttributeWasModified();
    else
      v24 = 1;
  }
  v27 = v53;
  v28 = v55;
  v29 = v54;
  v30 = v28;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v27, v29, v30, v24);

  *(_QWORD *)(StatusReg + 848) = v45;
  v31 = v48;
  outlined init with copy of AccessibilityTextAttributeResolver?(v49, v48, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v31, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v31);
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v33 = v44;
    v32(v44, v31, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v47, v33, v2);
    swift_beginAccess();
    v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((_QWORD *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v37], (uint64_t)v47, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v33, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v49);
  v38 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v40 = *(_QWORD *)(v3 + 72);
    v41 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v41(v5, v39, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v39 += v40;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v46;
  swift_bridgeObjectRelease();
  v42 = v54;

}

uint64_t specialized DynamicBody.updateValue()(uint64_t a1, void (*a2)(_QWORD), void (*a3)(uint64_t *, uint64_t), void (*a4)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  uint64_t v23;
  uint64_t v24;
  uint64_t CurrentAttribute;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t StatusReg;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  void (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(uint64_t *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55[6];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v50 = a3;
  v44 = a2;
  v7 = v4;
  v59 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for ObservationTracking._AccessList();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v42 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v42 - v15;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v49 = (uint64_t)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v51 = (uint64_t)&v42 - v21;
  if (*(_DWORD *)(v4 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v56 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)&v57 = *(_QWORD *)(v4 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v4 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  Value = AGGraphGetValue();
  v24 = v23;
  v52 = *(_QWORD *)Value;
  v53 = *(_OWORD *)(Value + 8);
  v54 = *(_OWORD *)(Value + 24);
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
    goto LABEL_23;
  }
  v5 = CurrentAttribute;
  v45 = v24;
  v43 = v16;
  v26 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  if (v26 != -1)
LABEL_23:
    swift_once();
  v27 = 1;
  swift_beginAccess();
  v47 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v28 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v51, 1, 1, v8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v46 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v28;
  v56 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)&v57 = *(_QWORD *)(v7 + 16);
  v55[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, v55) & 1) == 0 && (v45 & 1) == 0)
  {
    v44(0);
    if (AGGraphGetOutputValue())
      v27 = AGGraphCurrentAttributeWasModified();
    else
      v27 = 1;
  }
  v56 = v52;
  v57 = v53;
  v58 = v54;
  swift_bridgeObjectRetain();
  v50(&v56, v27);
  swift_bridgeObjectRelease();
  *(_QWORD *)(StatusReg + 848) = v46;
  v30 = v49;
  outlined init with copy of AccessibilityTextAttributeResolver?(v51, v49, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t)MEMORY[0x24BEE5C08], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v30, 1, v8) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v30);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    v32 = v43;
    v31(v43, v30, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v48, v32, v8);
    swift_beginAccess();
    v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    v36 = *((_QWORD *)v33 + 2);
    v35 = *((_QWORD *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((_QWORD *)v33 + 2) = v36 + 1;
    v31(&v33[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v36], (uint64_t)v48, v8);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v8);
  }
  outlined destroy of ObservationTracking._AccessList?(v51);
  v37 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v37)
  {
    v38 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v39 = *(_QWORD *)(v9 + 72);
    v40 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v40(v11, v38, v8);
      a4(v11, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v38 += v39;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v47;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DynamicContainerInfo.updateValue()()
{
  unint64_t v0;
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  Swift::Int v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  char *v79;
  int64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  int v110;
  uint64_t v111;

  v4 = v1;
  v111 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)AGGraphGetValue() >> 1;
  v105 = v1;
  if (v5 == *(_DWORD *)(v1 + 200))
  {
    v6 = *(_DWORD *)(v1 + 68) & 1;
    *(_DWORD *)(v1 + 200) = v5;
    if ((*(_BYTE *)(v1 + 204) & 1) != 0)
      goto LABEL_3;
LABEL_26:
    LOBYTE(v3) = 0;
    goto LABEL_29;
  }
  *(_DWORD *)(v1 + 200) = v5;
  v6 = 1;
  if (*(_BYTE *)(v1 + 204) != 1)
    goto LABEL_26;
LABEL_3:
  v7 = *(_QWORD *)(v1 + 144);
  if ((unint64_t)v7 >> 62)
    goto LABEL_235;
  isUniquelyReferenced_nonNull_native = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  if (!isUniquelyReferenced_nonNull_native)
  {
    v103 = 0;
    goto LABEL_28;
  }
  v0 = 0;
  v3 = v7 & 0xC000000000000001;
  v4 = v7 + 32;
  v103 = 0;
LABEL_7:
  if ((uint64_t)v0 <= isUniquelyReferenced_nonNull_native)
    v9 = isUniquelyReferenced_nonNull_native;
  else
    v9 = v0;
  v10 = v0;
  while (1)
  {
    if (v9 == v10)
      goto LABEL_217;
    if (v3)
    {
      v11 = MEMORY[0x23B7C6D9C](v10, v7);
      goto LABEL_16;
    }
    if (v10 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
      break;
    v11 = *(_QWORD *)(v4 + 8 * v10);
    swift_retain();
LABEL_16:
    swift_beginAccess();
    v0 = *(unsigned __int8 *)(v11 + 84);
    swift_release();
    if (!(_DWORD)v0)
    {
      if (v3)
      {
        v12 = MEMORY[0x23B7C6D9C](v10, v7);
      }
      else
      {
        if (v10 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_251;
        v12 = *(_QWORD *)(v4 + 8 * v10);
        swift_retain();
      }
      v0 = v10 + 1;
      swift_beginAccess();
      v103 = 1;
      *(_BYTE *)(v12 + 84) = 1;
      swift_release();
      if (isUniquelyReferenced_nonNull_native - 1 == v10)
      {
LABEL_28:
        LOBYTE(v3) = v103;
        v4 = v105;
        *(_BYTE *)(v105 + 204) = 0;
LABEL_29:
        LOWORD(v2) = specialized DynamicContainerInfo.updateItems(disableTransitions:)(v6);
        if ((v2 & 1) == 0)
        {
          v14 = *(_QWORD *)(v4 + 144);
          if (!(v14 >> 62))
          {
            isUniquelyReferenced_nonNull_native = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_32;
          }
          goto LABEL_237;
        }
        goto LABEL_47;
      }
      goto LABEL_7;
    }
    if (isUniquelyReferenced_nonNull_native == ++v10)
      goto LABEL_28;
  }
  while (2)
  {
    __break(1u);
LABEL_224:
    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      if (isUniquelyReferenced_nonNull_native < 0)
        v7 = isUniquelyReferenced_nonNull_native;
      else
        v7 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v0 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v96 = *(_QWORD *)(v4 + 176);
      v97 = v0;
      v102 = *(_QWORD *)(v4 + 168);
      v104 = v0 - v96;
      v2 = v0 - v96 - v102;
      if (v2 < (uint64_t)(v0 - v96))
      {
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7 >= v2)
        {
LABEL_50:
          if (v2 < 0)
            goto LABEL_239;
          if (v6)
          {
            swift_bridgeObjectRetain();
            v20 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v20 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          if (v20 < v104)
            goto LABEL_240;
          if (v104 < 0)
            goto LABEL_241;
          if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0 && v102)
          {
            type metadata accessor for DynamicContainer.ItemInfo();
            v23 = v2;
            do
            {
              v24 = v23 + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(v23);
              v23 = v24;
            }
            while (v104 != v24);
          }
          v99 = v2;
          if (v6)
          {
            swift_bridgeObjectRetain();
            v0 = v104;
            v25 = _CocoaArrayWrapper.subscript.getter();
            v26 = v27;
            v4 = v28;
            v3 = v29;
            swift_bridgeObjectRelease();
          }
          else
          {
            v25 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
            v26 = (isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 32;
            v0 = v104;
            v3 = (2 * v104) | 1;
            swift_bridgeObjectRetain();
            v4 = v2;
          }
          if (v4 == v3 >> 1)
            goto LABEL_96;
          v6 = v4 + 1;
          if (__OFADD__(v4, 1))
            goto LABEL_250;
          if (v6 == v3 >> 1)
          {
LABEL_96:
            v44 = v26;
            v2 = v99;
            v7 = (uint64_t)v101;
            specialized Array.subscript.setter(v25, v44, v4, v3, v99, v0);
            v4 = v105;
            goto LABEL_97;
          }
          while (v6 >= v4 && v6 < (uint64_t)(v3 >> 1))
          {
            isUniquelyReferenced_nonNull_native = *(_QWORD *)(v26 + 8 * v6);
            swift_retain();
            v98 = v6;
            while (1)
            {
              v30 = v6 - 1;
              if (__OFSUB__(v6, 1))
                goto LABEL_205;
              if (v30 < v4)
                goto LABEL_206;
              v31 = v3 >> 1;
              if (v30 >= (uint64_t)(v3 >> 1))
                goto LABEL_206;
              v32 = *(_QWORD *)(v26 + 8 * v30);
              if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 72) >= *(_DWORD *)(v32 + 72))
                break;
              swift_retain_n();
              if ((v3 & 1) == 0 || (swift_isUniquelyReferenced_nonNull() & 1) == 0)
              {
                specialized _ArrayBufferProtocol.init(copying:)(v26, v4, v3);
                v34 = v33;
                v26 = v35;
                v4 = v36;
                v3 = v37;
                swift_unknownObjectRelease();
                v31 = v3 >> 1;
                v25 = v34;
              }
              if (v6 < v4 || v6 >= v31)
                goto LABEL_207;
              *(_QWORD *)(v26 + 8 * v6) = v32;
              swift_release();
              swift_release();
              --v6;
              v38 = v30;
              if (v30 == v4)
                goto LABEL_85;
            }
            v30 = v6;
            v38 = v4;
LABEL_85:
            v6 = v98;
            if (v30 == v98)
            {
              swift_release();
              v4 = v38;
              v0 = v104;
            }
            else
            {
              swift_retain();
              v0 = v104;
              if ((v3 & 1) != 0 && (swift_isUniquelyReferenced_nonNull() & 1) != 0)
              {
                v4 = v38;
              }
              else
              {
                specialized _ArrayBufferProtocol.init(copying:)(v26, v38, v3);
                v40 = v39;
                v26 = v41;
                v4 = v42;
                v3 = v43;
                swift_unknownObjectRelease();
                v25 = v40;
              }
              if (v30 < v4 || v30 >= (uint64_t)(v3 >> 1))
                goto LABEL_227;
              *(_QWORD *)(v26 + 8 * v30) = isUniquelyReferenced_nonNull_native;
              swift_release();
              swift_release();
            }
            if (__OFADD__(v98, 1))
              goto LABEL_226;
            v6 = v98 + 1;
            if (v98 + 1 == v3 >> 1)
              goto LABEL_96;
          }
          continue;
        }
        goto LABEL_233;
      }
      break;
    }
    while (1)
    {
LABEL_97:
      if (*(_QWORD *)(*(_QWORD *)(v4 + 152) + 16))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v106 = *(_QWORD *)(v4 + 152);
        *(_QWORD *)(v4 + 152) = 0x8000000000000000;
        type metadata accessor for _NativeDictionary<UInt32, Int>();
        v7 = (uint64_t)&v106;
        _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v4 + 152) = v106;
        swift_bridgeObjectRelease();
      }
      *(_BYTE *)(v4 + 184) = 1;
      v6 = v104;
      if ((v104 & 0x8000000000000000) == 0)
        break;
      while (2)
      {
        __break(1u);
LABEL_235:
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((isUniquelyReferenced_nonNull_native & 0x8000000000000000) == 0)
          goto LABEL_5;
        __break(1u);
LABEL_237:
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (isUniquelyReferenced_nonNull_native < 0)
        {
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          swift_bridgeObjectRetain();
          v94 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v94)
            goto LABEL_55;
          goto LABEL_175;
        }
LABEL_32:
        if (isUniquelyReferenced_nonNull_native)
        {
          v15 = isUniquelyReferenced_nonNull_native;
          while (1)
          {
            if (isUniquelyReferenced_nonNull_native < v15)
            {
              __break(1u);
LABEL_204:
              __break(1u);
LABEL_205:
              __break(1u);
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
LABEL_208:
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
              goto LABEL_214;
            }
            v17 = v15 - 1;
            v18 = *(_QWORD *)(v4 + 144);
            if ((v18 & 0xC000000000000001) != 0)
            {
              v19 = MEMORY[0x23B7C6D9C](v15 - 1);
            }
            else
            {
              if (v17 >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_204;
              v19 = *(_QWORD *)(v18 + 8 * v15 + 24);
              swift_retain();
            }
            swift_beginAccess();
            v0 = *(unsigned __int8 *)(v19 + 84);
            swift_release();
            if ((_DWORD)v0 == 2)
            {
              specialized DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v15 - 1);
              if ((v16 & 1) == 0)
                goto LABEL_35;
              LOBYTE(v3) = 1;
              if (!--v15)
                goto LABEL_47;
            }
            else
            {
              if ((_DWORD)v0 != 3)
                break;
LABEL_35:
              --v15;
              if (!v17)
                break;
            }
          }
        }
        if ((v3 & 1) == 0)
        {
          v21 = *(_QWORD *)(v4 + 144);
          if (v21 >> 62)
            goto LABEL_243;
          if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_55:
            result = AGGraphGetOutputValue();
            if (result)
              return result;
          }
LABEL_175:
          v82 = *(_DWORD *)(v4 + 188) + 1;
          *(_DWORD *)(v4 + 188) = v82;
          v83 = *(_QWORD *)(v4 + 176);
          v84 = *(_BYTE *)(v4 + 184);
          v85 = *(_OWORD *)(v4 + 160);
          v106 = *(_OWORD *)(v4 + 144);
          v107 = v85;
          v108 = v83;
          v109 = v84;
          v110 = v82;
          return AGGraphSetOutputValue();
        }
LABEL_47:
        v95 = v2;
        isUniquelyReferenced_nonNull_native = *(_QWORD *)(v4 + 144);
        v101 = (_QWORD *)(v4 + 144);
        v6 = (unint64_t)isUniquelyReferenced_nonNull_native >> 62;
        if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
          goto LABEL_228;
        v7 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
        v96 = *(_QWORD *)(v4 + 176);
        v97 = v7;
        v102 = *(_QWORD *)(v4 + 168);
        v104 = v7 - v96;
        v2 = v7 - v96 - v102;
        if (v2 < v7 - v96)
        {
          if (v7 >= v2)
            goto LABEL_50;
LABEL_233:
          __break(1u);
          continue;
        }
        break;
      }
    }
    v100 = v2;
    if (v97 == v96)
    {
LABEL_101:
      if (*(_QWORD *)(*(_QWORD *)(v4 + 152) + 16) != v104)
        goto LABEL_254;
      v3 = v100;
      if ((v95 & 0x100) == 0)
      {
        swift_bridgeObjectRelease();
        *(_QWORD *)(v4 + 160) = 0;
LABEL_174:
        if (v97 == v96)
          goto LABEL_175;
        v86 = 0;
        v3 = v6 & ~(v6 >> 63);
        while (v3 != v86)
        {
          isUniquelyReferenced_nonNull_native = *(_QWORD *)(v4 + 144);
          v87 = *(_QWORD *)(v4 + 160);
          v6 = *(_QWORD *)(v4 + 168);
          v88 = *(_QWORD *)(v4 + 176);
          if (v87)
          {
            if (v102)
            {
              if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
              {
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v89 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v89 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              v90 = v86 + v89 - v6 - v88;
              if (v90 < 0)
                goto LABEL_221;
              if ((unint64_t)v90 >= *(_QWORD *)(v87 + 16))
                goto LABEL_222;
              v91 = *(unsigned int *)(v87 + 4 * v90 + 32);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              if (v86 >= *(_QWORD *)(v87 + 16))
                goto LABEL_224;
              v91 = *(unsigned int *)(v87 + 4 * v86 + 32);
            }
          }
          else
          {
            v91 = v86;
            if (v102)
            {
              if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
              {
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                v92 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
              }
              else
              {
                v92 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              if ((uint64_t)v86 < v6)
                v91 = v86 + v92 - v6 - v88;
              else
                v91 = v86 - v6;
            }
          }
          if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0)
          {
            isUniquelyReferenced_nonNull_native = MEMORY[0x23B7C6D9C](v91, isUniquelyReferenced_nonNull_native);
            v6 = v104;
          }
          else
          {
            v6 = v104;
            if ((v91 & 0x8000000000000000) != 0)
              goto LABEL_215;
            if (v91 >= *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_216;
            isUniquelyReferenced_nonNull_native = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v91 + 32);
            swift_retain();
          }
          v93 = *(id *)(isUniquelyReferenced_nonNull_native + 16);
          swift_release();
          AGSubgraphSetIndex();

          if (v6 == ++v86)
            goto LABEL_175;
        }
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
        continue;
      }
      v64 = v100;
      if (v102 && (v64 = v100 + v104, __OFADD__(v100, v104)))
      {
        __break(1u);
      }
      else
      {
        v65 = v64 & ~(v64 >> 63);
        v2 = swift_allocObject();
        v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65, 0, MEMORY[0x24BEE4AF8]);
        *(_QWORD *)(v2 + 16) = v66;
        v7 = v2 + 16;
        if (v100 < 0)
          goto LABEL_242;
        if (!v100)
        {
LABEL_143:
          if (v97 > 31)
          {
            isUniquelyReferenced_nonNull_native = 0;
            specialized MutableCollection<>.sort(by:)((char **)v7, v4);
            if (!v102)
            {
LABEL_173:
              swift_beginAccess();
              v81 = *(_QWORD *)(v2 + 16);
              isUniquelyReferenced_nonNull_native = *(_QWORD *)(v4 + 160);
              swift_bridgeObjectRetain();
              swift_release();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v4 + 160) = v81;
              goto LABEL_174;
            }
          }
          else
          {
            isUniquelyReferenced_nonNull_native = 0;
            specialized BidirectionalCollection<>.insertionSort(by:)(v7, v4);
            if (!v102)
              goto LABEL_173;
          }
          if (one-time initialization token for v5 != -1)
            swift_once();
          v71 = static Semantics.v5;
          if (one-time initialization token for forced != -1)
            swift_once();
          swift_beginAccess();
          if ((byte_25426FAB4 & 1) != 0)
          {
            if ((dyld_program_sdk_at_least() & 1) == 0)
            {
LABEL_153:
              if (!v3)
              {
LABEL_167:
                addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v3, v104, v2);
                goto LABEL_168;
              }
              v6 = 0;
LABEL_158:
              swift_beginAccess();
              v72 = 0;
              v73 = v3 & ~((uint64_t)v3 >> 63);
              do
              {
                if (v73 == v72)
                  goto LABEL_219;
                if (v72 >= *(_QWORD *)(*(_QWORD *)v7 + 16))
                  goto LABEL_220;
                v74 = *(_DWORD *)(*(_QWORD *)v7 + 4 * v72 + 32);
                swift_beginAccess();
                v75 = *(char **)v7;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v75 + 2) + 1, 1, v75);
                v77 = *((_QWORD *)v75 + 2);
                v76 = *((_QWORD *)v75 + 3);
                if (v77 >= v76 >> 1)
                  v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v75);
                ++v72;
                *((_QWORD *)v75 + 2) = v77 + 1;
                *(_DWORD *)&v75[4 * v77 + 32] = v74;
                *(_QWORD *)v7 = v75;
                swift_endAccess();
                v3 = v100;
                v4 = v105;
              }
              while (v100 != v72);
              if ((v6 & 1) != 0)
                goto LABEL_168;
              goto LABEL_167;
            }
          }
          else if (static Semantics.forced < v71)
          {
            goto LABEL_153;
          }
          addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v3, v6, v2);
          if (!v3)
          {
LABEL_168:
            v6 = v104;
            v78 = v3 + v104;
            if (__OFADD__(v3, v104))
            {
              __break(1u);
LABEL_248:
              __break(1u);
LABEL_249:
              __break(1u);
LABEL_250:
              __break(1u);
LABEL_251:
              __break(1u);
            }
            if (v78 < (uint64_t)v3)
              goto LABEL_248;
            swift_beginAccess();
            v79 = *(char **)v7;
            v80 = *(_QWORD *)(*(_QWORD *)v7 + 16);
            if (v80 < (uint64_t)v3 || v80 < v78)
              goto LABEL_249;
            *(_QWORD *)&v106 = *(_QWORD *)v7;
            *((_QWORD *)&v106 + 1) = v79 + 32;
            *(_QWORD *)&v107 = v3;
            *((_QWORD *)&v107 + 1) = (2 * v78) | 1;
            swift_bridgeObjectRetain();
            specialized BidirectionalCollection<>.insertionSort(by:)((unint64_t)&v106, v4);
            specialized Array.subscript.setter((char *)v106, *((uint64_t *)&v106 + 1), v107, *((unint64_t *)&v107 + 1), v3, v78);
            swift_endAccess();
            swift_unknownObjectRelease();
            goto LABEL_173;
          }
          v6 = 1;
          goto LABEL_158;
        }
        v13 = v66;
        v0 = *((_QWORD *)v66 + 2);
        v64 = *((_QWORD *)v66 + 3);
        isUniquelyReferenced_nonNull_native = v0 + 1;
        if (v0 < (unint64_t)v64 >> 1)
        {
LABEL_135:
          *((_QWORD *)v13 + 2) = isUniquelyReferenced_nonNull_native;
          *(_DWORD *)&v13[4 * v0 + 32] = 0;
          *(_QWORD *)v7 = v13;
          if (v100 != 1)
          {
            v67 = *((_QWORD *)v13 + 2);
            v68 = 1;
            v69 = 2;
            while (1)
            {
              v70 = *((_QWORD *)v13 + 3);
              if (v67 >= v70 >> 1)
                v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v67 + 1, 1, v13);
              *((_QWORD *)v13 + 2) = v67 + 1;
              *(_DWORD *)&v13[4 * v67 + 32] = v68;
              if (v69 == v100)
                break;
              ++v69;
              ++v68;
              ++v67;
              if (v69 == 0x100000001)
                goto LABEL_253;
            }
            *(_QWORD *)v7 = v13;
            v6 = v104;
            v3 = v100;
          }
          goto LABEL_143;
        }
      }
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)((unint64_t)v64 > 1), isUniquelyReferenced_nonNull_native, 1, v13);
      goto LABEL_135;
    }
    break;
  }
  v45 = 0;
  v3 = 0;
  v2 = 0x8000000000000000;
  while (1)
  {
    if ((*v101 & 0xC000000000000001) != 0)
    {
      v47 = MEMORY[0x23B7C6D9C](v3);
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_208;
      if (v3 >= *(_QWORD *)((*v101 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_210;
      v47 = swift_retain();
    }
    isUniquelyReferenced_nonNull_native = *(unsigned int *)(v47 + 24);
    swift_release();
    v48 = swift_isUniquelyReferenced_nonNull_native();
    v49 = v4;
    v4 = v48;
    *(_QWORD *)&v106 = *(_QWORD *)(v49 + 152);
    v50 = v106;
    *(_QWORD *)(v49 + 152) = 0x8000000000000000;
    v52 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
    v53 = *(_QWORD *)(v50 + 16);
    v54 = (v51 & 1) == 0;
    v55 = v53 + v54;
    if (__OFADD__(v53, v54))
      goto LABEL_209;
    v56 = v51;
    if (*(_QWORD *)(v50 + 24) < v55)
      break;
    if ((v4 & 1) == 0)
      specialized _NativeDictionary.copy()();
LABEL_117:
    v4 = v105;
    v59 = (_QWORD *)v106;
    if ((v56 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v106 + 56) + 8 * v52) = v3;
    }
    else
    {
      *(_QWORD *)(v106 + 8 * (v52 >> 6) + 64) |= 1 << v52;
      *(_DWORD *)(v59[6] + 4 * v52) = isUniquelyReferenced_nonNull_native;
      *(_QWORD *)(v59[7] + 8 * v52) = v3;
      v60 = v59[2];
      v61 = __OFADD__(v60, 1);
      v62 = v60 + 1;
      if (v61)
        goto LABEL_218;
      v59[2] = v62;
    }
    *(_QWORD *)(v105 + 152) = v59;
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v105 + 144);
    if ((v7 & 0xC000000000000001) != 0)
    {
      *(_DWORD *)(MEMORY[0x23B7C6D9C](v3, *(_QWORD *)(v105 + 144)) + 76) = v45;
      swift_release();
      v0 = *(unsigned int *)(MEMORY[0x23B7C6D9C](v3, v7) + 28);
      swift_unknownObjectRelease();
      if ((*(_BYTE *)(v105 + 184) & 1) == 0)
        goto LABEL_126;
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_211;
      if (v3 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_212;
      v63 = v7 + 8 * v3;
      *(_DWORD *)(*(_QWORD *)(v63 + 32) + 76) = v45;
      if (v3 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_213;
      v0 = *(unsigned int *)(*(_QWORD *)(v63 + 32) + 28);
      if ((*(_BYTE *)(v105 + 184) & 1) == 0)
      {
LABEL_126:
        v46 = 0;
        goto LABEL_106;
      }
    }
    v46 = (_DWORD)v0 == 1;
LABEL_106:
    ++v3;
    *(_BYTE *)(v105 + 184) = v46;
    v45 += v0;
    if (v104 == v3)
      goto LABEL_101;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v4);
  v57 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
  if ((v56 & 1) == (v58 & 1))
  {
    v52 = v57;
    goto LABEL_117;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_253:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_254:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized DynamicContainerInfo.updateItems(disableTransitions:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unsigned __int8 v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  int v29;
  _QWORD v31[4];
  _QWORD v32[7];
  char v33;
  unsigned __int8 *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44[10];

  v2 = v1;
  *(_WORD *)v44 = 0;
  DynamicLayoutViewAdaptor.updatedItems()((uint64_t)&v39);
  if (v40)
  {
    v4 = outlined init with take of ScrollStateRequest(&v39, (uint64_t)v41);
    v38 = 0;
    v5 = *(_QWORD *)(v1 + 144);
    if (v5 >> 62)
      goto LABEL_48;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    v35 = (uint64_t)&v35;
    v37 = v6;
    v7 = *(unsigned int *)(v2 + 8);
    MEMORY[0x24BDAC7A8](v4);
    v32[2] = &v38;
    v32[3] = &v37;
    v32[4] = v2;
    v32[5] = &v44[1];
    v32[6] = v41;
    v33 = a1 & 1;
    v34 = v44;
    *(_QWORD *)&v39 = 0;
    v8 = v42;
    v9 = v43;
    v10 = __swift_project_boxed_opaque_existential_1(v41, v42);
    MEMORY[0x24BDAC7A8](v10);
    v31[2] = partial apply for specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:);
    v31[3] = v32;
    swift_retain();
    v36 = 0;
    ViewList.applySublists(from:list:to:)((uint64_t)&v39, v7, (uint64_t)partial apply for closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:), (uint64_t)v31, v8, v9);
    swift_release();
    v11 = v37;
    v35 = v38;
    if (v38 >= v37)
    {
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      v12 = v44[0];
      goto LABEL_35;
    }
    while (1)
    {
      if (v35 >= v11)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        v4 = swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      v13 = v11 - 1;
      v14 = *(_QWORD *)(v2 + 144);
      if ((v14 & 0xC000000000000001) != 0)
      {
        v15 = MEMORY[0x23B7C6D9C](v11 - 1);
      }
      else
      {
        if (v11 < 1)
          goto LABEL_40;
        if (v13 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_41;
        v15 = *(_QWORD *)(v14 + 8 * v11 + 24);
        swift_retain();
      }
      swift_beginAccess();
      v16 = *(unsigned __int8 *)(v15 + 84);
      swift_release();
      specialized DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v11 - 1);
      if ((v17 & 1) == 0)
      {
        v18 = *(_QWORD *)(v2 + 144);
        if ((v18 & 0xC000000000000001) != 0)
        {
          v27 = *(double *)(MEMORY[0x23B7C6D9C](v11 - 1, *(_QWORD *)(v2 + 144)) + 64);
          v44[0] = v44[0] & 1 | (v27 != 0.0);
          v28 = *(double *)(MEMORY[0x23B7C6D9C](v35, v18) + 64);
          swift_release();
          if (v27 != v28)
          {
            *(double *)(MEMORY[0x23B7C6D9C](v11 - 1, v18) + 64) = v27;
            swift_release();
            v44[1] = 1;
          }
          v25 = MEMORY[0x23B7C6D9C](v11 - 1, v18);
        }
        else
        {
          if (v11 < 1)
            goto LABEL_42;
          v19 = v18 & 0xFFFFFFFFFFFFFF8;
          v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v13 >= v20)
            goto LABEL_43;
          v21 = *(_QWORD *)(v2 + 144);
          v22 = v18 + 8 * v11;
          v23 = *(double *)(*(_QWORD *)(v22 + 24) + 64);
          v24 = v44[0];
          swift_retain();
          v44[0] = v24 & 1 | (v23 != 0.0);
          if (v35 < 0)
            goto LABEL_44;
          if (v35 >= v20)
            goto LABEL_45;
          if (v23 != *(double *)(*(_QWORD *)(v21 + 32 + 8 * v35) + 64))
          {
            if (v13 >= *(_QWORD *)(v19 + 16))
              goto LABEL_47;
            *(double *)(*(_QWORD *)(v22 + 24) + 64) = v23;
            v44[1] = 1;
          }
          if (v13 >= *(_QWORD *)(v19 + 16))
            goto LABEL_46;
          v25 = *(_QWORD *)(v22 + 24);
          swift_retain();
        }
        swift_release();
        swift_beginAccess();
        v26 = *(unsigned __int8 *)(v25 + 84);
        swift_release();
        if (v26 == 3)
        {
          if (v16 == 3)
            goto LABEL_7;
        }
        else if (v16 != 3 && v26 == v16)
        {
          goto LABEL_7;
        }
      }
      v44[1] = 1;
LABEL_7:
      v11 = v13;
      if (v35 == v13)
        goto LABEL_5;
    }
  }
  outlined destroy of ScrollStateRequest?((uint64_t)&v39, &lazy cache variable for type metadata for ViewList?, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList);
  v12 = *(_QWORD *)(v1 + 160) != 0;
LABEL_35:
  if (v12)
    v29 = 256;
  else
    v29 = 0;
  return v29 | v44[1];
}

void specialized DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 144);
  if ((v2 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v3 = *(_QWORD *)(v2 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    JUMPOUT(0x234AE5D88);
  }
  v3 = MEMORY[0x23B7C6D9C](a1, *(_QWORD *)(v1 + 144));
LABEL_5:
  swift_beginAccess();
  v4 = *(unsigned __int8 *)(v3 + 84);
  swift_release();
  __asm { BR              X9 }
}

void sub_234AE5E20()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234AE5E5CLL);
}

unint64_t specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, _BYTE *a5, uint64_t a6, char a7, _BYTE *a8)
{
  unint64_t *v8;
  _BYTE *v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  int64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  int CurrentAttribute;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v50;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  _DWORD v60[2];
  uint64_t v61;
  _DWORD v62[2];
  uint64_t v63;
  _BYTE v64[64];
  int v65;
  char v66;

  v12 = *a2;
  v13 = *a3;
  if ((uint64_t)*a3 < (uint64_t)*a2)
    goto LABEL_58;
  v14 = a8;
  v9 = a5;
  v10 = a4;
  v8 = a2;
  v15 = a1;
  if (v12 == v13)
  {
LABEL_3:
    v16 = *(_DWORD *)(v10 + 192) + 1;
    *(_DWORD *)(v10 + 192) = v16;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute == *MEMORY[0x24BE096C0])
      goto LABEL_62;
    specialized DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)((_QWORD *)v15, v16, CurrentAttribute, a7 & 1);
    MEMORY[0x23B7C61A8]();
    if (*(_QWORD *)((*(_QWORD *)(v10 + 144) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v10 + 144) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
      goto LABEL_63;
    while (1)
    {
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v18 = *a3;
      if ((uint64_t)*v8 < (uint64_t)*a3)
      {
        specialized MutableCollection.swapAt(_:_:)(*v8, v18);
        v18 = *a3;
      }
      *a3 = v18 + 1;
LABEL_8:
      *v9 = 1;
LABEL_9:
      v19 = swift_bridgeObjectRetain();
      v11 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v19, 0.0);
      swift_bridgeObjectRelease();
      *v14 = *v14 & 1 | (v11 != 0.0);
      v20 = *v8;
      v21 = *(_QWORD *)(v10 + 144);
      if ((v21 & 0xC000000000000001) != 0)
        goto LABEL_59;
      if ((v20 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v20 < *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v22 = swift_retain();
        goto LABEL_13;
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  v58 = *a3;
  v59 = (uint64_t *)(a4 + 144);
  while ((uint64_t)v12 < v13)
  {
    v27 = *v59;
    if ((*v59 & 0xC000000000000001) != 0)
    {
      v28 = MEMORY[0x23B7C6D9C](v12);
    }
    else
    {
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_56;
      if (v12 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_57;
      v28 = *(_QWORD *)(v27 + 8 * v12 + 32);
      swift_retain();
    }
    swift_beginAccess();
    outlined init with copy of DynamicViewListItem(v28 + 88, (uint64_t)v64);
    if ((v66 & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 68) & 1) == 0)
        goto LABEL_21;
      v53 = v28 + 88;
      outlined init with copy of DynamicViewListItem((uint64_t)v64, (uint64_t)v62);
      outlined init with copy of DynamicViewListItem(v15, (uint64_t)v60);
LABEL_34:
      if (v62[0] == v60[0] && v62[1] == v60[1])
      {
        v32 = *(_QWORD *)(v63 + 16);
        v57 = v61;
        if (v32 == *(_QWORD *)(v61 + 16))
        {
          v33 = v61;
          if (!v32 || v63 == v61)
            goto LABEL_50;
          v50 = v28;
          v54 = v63;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v34 = v54;
          v35 = 0;
          while (1)
          {
            v36 = *(_QWORD *)(v34 + v35 + 32);
            v37 = *(_QWORD *)(v34 + v35 + 40);
            v38 = *(_DWORD *)(v34 + v35 + 48);
            v39 = *(unsigned __int8 *)(v34 + v35 + 52);
            v40 = *(_QWORD *)(v33 + v35 + 40);
            v41 = *(_DWORD *)(v33 + v35 + 48);
            v42 = *(unsigned __int8 *)(v33 + v35 + 52);
            if (v36 != *(_QWORD *)(v33 + v35 + 32))
            {
              v55 = *(unsigned __int8 *)(v33 + v35 + 52);
              v56 = *(_DWORD *)(v34 + v35 + 48);
              v43 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 104);
              swift_retain();
              v44 = swift_retain();
              LOBYTE(v43) = v43(v44);
              swift_release();
              swift_release();
              v42 = v55;
              v38 = v56;
              v34 = v54;
              if ((v43 & 1) == 0)
                break;
            }
            if (v37 != v40)
              break;
            v13 = v58;
            if (v38 != v41 || v39 != v42)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v9 = a5;
              v8 = a2;
              v14 = a8;
              v10 = a4;
              v15 = a1;
              goto LABEL_22;
            }
            v35 += 24;
            --v32;
            v33 = v57;
            if (!v32)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v9 = a5;
              v8 = a2;
              v14 = a8;
              v10 = a4;
              v15 = a1;
              v28 = v50;
LABEL_50:
              outlined destroy of DynamicViewListItem((uint64_t)v60);
              outlined destroy of DynamicViewListItem((uint64_t)v62);
              outlined destroy of DynamicViewListItem((uint64_t)v64);
              if (v12 != *v8)
              {
                specialized MutableCollection.swapAt(_:_:)(*v8, v12);
                *v9 = 1;
              }
              swift_beginAccess();
              outlined assign with copy of DynamicViewListItem(v15, v53);
              swift_endAccess();
              swift_beginAccess();
              if (*(_BYTE *)(v28 + 84) == 1)
              {
                swift_release();
                goto LABEL_9;
              }
              specialized DynamicContainerInfo.unremoveItem(at:)(*v8);
              swift_release();
              goto LABEL_8;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = a5;
          v8 = a2;
          v14 = a8;
          v10 = a4;
          v15 = a1;
          v13 = v58;
        }
      }
      goto LABEL_22;
    }
    if ((*(_BYTE *)(v15 + 68) & 1) != 0)
    {
LABEL_21:
      outlined init with copy of DynamicViewListItem((uint64_t)v64, (uint64_t)v62);
      outlined init with copy of DynamicViewListItem(v15, (uint64_t)v60);
      goto LABEL_22;
    }
    v53 = v28 + 88;
    v29 = v65;
    v30 = *(_DWORD *)(v15 + 64);
    outlined init with copy of DynamicViewListItem((uint64_t)v64, (uint64_t)v62);
    outlined init with copy of DynamicViewListItem(v15, (uint64_t)v60);
    v31 = v29 == v30;
    v13 = v58;
    if (v31)
      goto LABEL_34;
LABEL_22:
    ++v12;
    outlined destroy of DynamicViewListItem((uint64_t)v60);
    outlined destroy of DynamicViewListItem((uint64_t)v62);
    outlined destroy of DynamicViewListItem((uint64_t)v64);
    swift_beginAccess();
    swift_release();
    if (v12 == v13)
      goto LABEL_3;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  v22 = MEMORY[0x23B7C6D9C]();
LABEL_13:
  v23 = *(double *)(v22 + 64);
  result = swift_release();
  if (v11 == v23)
  {
LABEL_19:
    ++*v8;
    return result;
  }
  result = *v8;
  v25 = *(_QWORD *)(v10 + 144);
  if ((v25 & 0xC000000000000001) != 0)
  {
    v26 = MEMORY[0x23B7C6D9C](result);
LABEL_18:
    *(double *)(v26 + 64) = v11;
    result = swift_release();
    *v9 = 1;
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v26 = swift_retain();
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized DynamicContainerInfo.unremoveItem(at:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;

  v3 = *(_QWORD *)(v1 + 144);
  v4 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v5 = *(_QWORD *)(v3 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_43;
  }
  v5 = MEMORY[0x23B7C6D9C](a1, *(_QWORD *)(v1 + 144));
LABEL_5:
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 84);
  swift_release();
  if (v6 >= 2)
  {
    if (v6 == 2)
    {
      --*(_QWORD *)(v1 + 168);
      if (v4)
      {
        v9 = MEMORY[0x23B7C6D9C](a1, v3);
      }
      else
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        v9 = swift_retain();
      }
      *(_DWORD *)(v9 + 72) = 0;
      swift_release();
      v12 = 1;
      if (!v4)
        goto LABEL_27;
    }
    else
    {
      --*(_QWORD *)(v1 + 176);
      if (v4)
      {
        v10 = MEMORY[0x23B7C6D9C](a1, v3);
      }
      else
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v10 = *(_QWORD *)(v3 + 8 * a1 + 32);
        swift_retain();
      }
      v15 = *(id *)(v10 + 16);
      swift_release();
      AGSubgraphAddChild();
      AGSubgraphApply();

      v12 = 0;
      if (!v4)
        goto LABEL_27;
    }
LABEL_22:
    v13 = *(unsigned __int8 *)(MEMORY[0x23B7C6D9C](a1, v3) + 48);
    swift_unknownObjectRelease();
    v14 = MEMORY[0x23B7C6D9C](a1, v3);
    goto LABEL_30;
  }
  if (v4)
  {
    v7 = MEMORY[0x23B7C6D9C](a1, v3);
    v8 = MEMORY[0x23B7C6D9C](a1, v3);
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v8 = swift_retain_n();
    v7 = v8;
  }
  v11 = *(_DWORD *)(v8 + 80);
  swift_release();
  *(_DWORD *)(v7 + 80) = v11 + 1;
  swift_release();
  v12 = 0;
  if (v4)
    goto LABEL_22;
LABEL_27:
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v14 = *(_QWORD *)(v3 + 8 * a1 + 32);
  v13 = *(unsigned __int8 *)(v14 + 48);
  swift_retain();
LABEL_30:
  if (!v13)
    v12 = 1;
  swift_beginAccess();
  *(_BYTE *)(v14 + 84) = v12;
  result = swift_release();
  if (!v12)
  {
    *(_BYTE *)(v1 + 204) = 1;
    v17 = AGCreateWeakAttribute();
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
    {
      v18 = (id)AGSubgraphGetCurrent();
      if (!v18)
      {
LABEL_52:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v19 = v18;
      v20 = (id)AGSubgraphGetGraph();

    }
    else
    {
      v20 = (id)AGGraphGetAttributeGraph();
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v17;
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), v21);
      swift_release();
      return swift_release();
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  return result;
}

uint64_t specialized DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(_QWORD *a1, int a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  char v10;
  char v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t result;

  v5 = v4;
  v10 = DynamicViewListItem.needsTransitions.getter();
  v11 = v10;
  if ((a4 & 1) != 0 || (v10 & 1) == 0)
  {
    v16 = 1;
LABEL_10:
    v18 = (id)AGSubgraphGetGraph();
    v19 = (void *)AGSubgraphCreate2();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v20 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v21 = specialized closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(v5, a1, a2, a3, v19, v16, v11 & 1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return v21;
  }
  v12 = AGCreateWeakAttribute();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v13 = (id)AGSubgraphGetCurrent();
    if (!v13)
      goto LABEL_12;
    v14 = v13;
    v15 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v15 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v12;
    GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), v17);
    swift_release();
    swift_release();
    v16 = 0;
    *(_BYTE *)(v5 + 204) = 1;
    goto LABEL_10;
  }
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(uint64_t a1, _QWORD *a2, int a3, int a4, void *a5, char a6, char a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  id v29;
  uint64_t result;
  int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  __int128 v42;
  int v43;
  int v44;
  uint64_t v46;
  _BYTE v49[16];
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  uint64_t v56;
  int v57;
  uint64_t v58[4];

  v40 = *(_QWORD *)(a1 + 32);
  v43 = *(_DWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v44 = *(_DWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v42 = *(_OWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 104);
  swift_beginAccess();
  v39 = *(_DWORD *)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v37 = *(_OWORD *)(v8 + 48);
  v38 = *(_OWORD *)(v8 + 32);
  v16 = *(_QWORD *)(v8 + 64);
  v15 = *(_QWORD *)(v8 + 72);
  v17 = *(_BYTE *)(v8 + 80);
  v18 = *(_BYTE *)(v8 + 81);
  v19 = *(_QWORD *)(v8 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v39;
  *(_QWORD *)(v20 + 24) = v14;
  *(_OWORD *)(v20 + 32) = v38;
  *(_OWORD *)(v20 + 48) = v37;
  *(_QWORD *)(v20 + 64) = v16;
  *(_QWORD *)(v20 + 72) = v15;
  *(_BYTE *)(v20 + 80) = v17;
  *(_BYTE *)(v20 + 81) = v18;
  *(_QWORD *)(v20 + 88) = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v52 = v40;
  DWORD2(v52) = v43;
  *(_QWORD *)&v53 = v20;
  *((_QWORD *)&v53 + 1) = v11;
  *(_QWORD *)&v54 = v12;
  *((_QWORD *)&v54 + 1) = v10;
  *(_QWORD *)v55 = v9;
  *(_OWORD *)&v55[8] = v42;
  v56 = v13;
  v57 = v44;
  v50 = a4;
  v51 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(v58, a2, a3, (uint64_t)&v52, a4, (uint64_t)partial apply for closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), (uint64_t)v49, v21, v22, v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v24 = v58[0];
  v25 = v58[1];
  outlined init with copy of DynamicViewListItem((uint64_t)a2, (uint64_t)&v52);
  v26 = a2[5];
  v27 = a2[6];
  __swift_project_boxed_opaque_existential_1(a2 + 2, v26);
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
  v29 = a5;
  result = v28(v26, v27);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    v31 = result;
    if (result <= 0x7FFFFFFF)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for DynamicContainer._ItemInfo<DynamicLayoutViewAdaptor>, (uint64_t)&type metadata for DynamicLayoutViewAdaptor, (uint64_t)&protocol witness table for DynamicLayoutViewAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DynamicContainer._ItemInfo);
      v32 = swift_allocObject();
      v33 = v52;
      *(_OWORD *)(v32 + 104) = v53;
      v34 = *(_OWORD *)v55;
      *(_OWORD *)(v32 + 120) = v54;
      *(_OWORD *)(v32 + 136) = v34;
      *(_QWORD *)(v32 + 160) = v46;
      *(_QWORD *)(v32 + 149) = *(_QWORD *)&v55[13];
      *(_OWORD *)(v32 + 88) = v33;
      *(_QWORD *)(v32 + 64) = 0;
      *(_QWORD *)(v32 + 72) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 80) = 0;
      *(_BYTE *)(v32 + 84) = 3;
      *(_QWORD *)(v32 + 16) = v29;
      *(_DWORD *)(v32 + 24) = a3;
      *(_DWORD *)(v32 + 28) = v31;
      *(_QWORD *)(v32 + 32) = v24;
      *(_QWORD *)(v32 + 40) = v25;
      *(_BYTE *)(v32 + 48) = a7 & 1;
      swift_beginAccess();
      *(_BYTE *)(v32 + 84) = a6;
      return v32;
    }
  }
  __break(1u);
  return result;
}

void specialized DynamicContainerInfo.eraseItem(at:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 144);
  if ((v2 & 0xC000000000000001) != 0)
  {
    v3 = MEMORY[0x23B7C6D9C](a1);
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
      JUMPOUT(0x234AE6EF0);
    }
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
    {
      __break(1u);
      JUMPOUT(0x234AE7040);
    }
    v3 = *(_QWORD *)(v2 + 8 * a1 + 32);
    swift_retain();
  }
  swift_beginAccess();
  v4 = *(unsigned __int8 *)(v3 + 84);
  swift_release();
  __asm { BR              X9 }
}

void sub_234AE709C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234AE70E0);
}

uint64_t specialized UnaryPositionAwareLayoutComputer.updateValue()()
{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

uint64_t specialized UnaryLayoutComputer.updateValue()()
{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t *Value;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;

  result = AGGraphGetCurrentAttribute();
  v2 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    v4 = *(_DWORD *)(v0 + 8);
    v12 = *(_DWORD *)(v0 + 4);
    v5 = v12;
    v13 = v4;
    Value = (uint64_t *)AGGraphGetValue();
    v14 = &v10;
    v7 = *Value;
    v20 = 1;
    v19 = 1;
    v18 = 1;
    v17 = 1;
    v16 = 1;
    v15 = 1;
    v23 = 1;
    v22 = 1;
    v21 = 1;
    v24 = v7;
    v25 = v3;
    v26 = v3;
    v27 = v5;
    v28 = v3;
    v29 = v4;
    v30 = v2;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 1;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 1;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 1;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v49 = 1;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v56 = 1;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v63 = 1;
    MEMORY[0x24BDAC7A8](Value);
    v11 = v2;
    v9[2] = &v24;
    MEMORY[0x24BDAC7A8](v8);
    swift_bridgeObjectRetain();
    specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
    v24 = v7;
    v25 = v3;
    v26 = v3;
    v27 = v12;
    v28 = v3;
    v29 = v13;
    v30 = v11;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 1;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 1;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 1;
    v47 = 0u;
    v48 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v49 = v17;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = v16;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = v15;
    return outlined release of LinearGradient((uint64_t)&v24);
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    AGGraphGetValue();
    MEMORY[0x24BDAC7A8](1);
    MEMORY[0x24BDAC7A8](v1);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v2, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    MEMORY[0x24BDAC7A8](Value);
    MEMORY[0x24BDAC7A8](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_QWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

uint64_t specialized StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *__return_ptr))
{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 220) = v13;
      *(_BYTE *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t IsOwner;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[10];
  _BYTE v21[19];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<ResolvedImageLayoutEngine>, (uint64_t)&unk_25063B6D0, (uint64_t)&protocol witness table for ResolvedImageLayoutEngine, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LayoutEngineBox<ResolvedImageLayoutEngine>, (uint64_t)&unk_25063B6D0, (uint64_t)&protocol witness table for ResolvedImageLayoutEngine, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = *(_OWORD *)v21;
    *(_DWORD *)(v10 + 191) = *(_DWORD *)&v21[15];
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  IsOwner = swift_retain();
  if (v7 != -1)
    IsOwner = swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  IsOwner = _MovableLockIsOwner(static Update._lock);
  if ((IsOwner & 1) != 0)
  {
LABEL_8:
    v9 = MEMORY[0x24BDAC7A8](IsOwner);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(_BYTE *)(v10 + 192) = v21;
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t IsOwner;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[12];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<InsetLayoutComputer.Engine>, (uint64_t)&type metadata for InsetLayoutComputer.Engine, (uint64_t)&protocol witness table for InsetLayoutComputer.Engine, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 212) = v13;
      *(_BYTE *)(v10 + 216) = v12;
    }
    else
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LayoutEngineBox<InsetLayoutComputer.Engine>, (uint64_t)&type metadata for InsetLayoutComputer.Engine, (uint64_t)&protocol witness table for InsetLayoutComputer.Engine, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_BYTE *)(v10 + 208) = v22;
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  IsOwner = swift_retain();
  if (v7 != -1)
    IsOwner = swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  IsOwner = _MovableLockIsOwner(static Update._lock);
  if ((IsOwner & 1) != 0)
  {
LABEL_8:
    v9 = MEMORY[0x24BDAC7A8](IsOwner);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[12];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 212) = v13;
      *(_BYTE *)(v10 + 216) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>(0);
      v10 = swift_allocObject();
    }
    v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_BYTE *)(v10 + 208) = v22;
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 220) = v13;
      *(_BYTE *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>(0);
      v10 = swift_allocObject();
    }
    v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 188) = v13;
      *(_BYTE *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(_BYTE *)(v10 + 192) = v21;
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<AnyShape>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<AnyShape>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(_BYTE *)(v10 + 192) = v21;
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 188) = v13;
      *(_BYTE *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(_BYTE *)(v10 + 192) = v21;
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 188) = v13;
      *(_BYTE *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Capsule._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Capsule._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(_BYTE *)(v10 + 192) = v21;
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 188) = v13;
      *(_BYTE *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Circle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Circle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(_BYTE *)(v10 + 192) = v21;
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 220) = v13;
      *(_BYTE *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 220) = v13;
      *(_BYTE *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[12];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 236) = v13;
      *(_BYTE *)(v10 + 240) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v22[0];
    *(_OWORD *)(v10 + 217) = *(_OWORD *)((char *)v22 + 9);
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 188) = v13;
      *(_BYTE *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 196) = v13;
      *(_BYTE *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(_BYTE *)(v10 + 192) = v21;
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 228) = v13;
      *(_BYTE *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(_BYTE *)(v10 + 224) = v22;
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[10];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 204) = v13;
      *(_BYTE *)(v10 + 208) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v21[0];
    *(_OWORD *)(v10 + 185) = *(_OWORD *)((char *)v21 + 9);
    v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v20[0] = v5;
    *((_QWORD *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 220) = v13;
      *(_BYTE *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 228) = v13;
      *(_BYTE *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(_BYTE *)(v10 + 224) = v22;
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 228) = v13;
      *(_BYTE *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(_BYTE *)(v10 + 224) = v22;
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 228) = v13;
      *(_BYTE *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(_BYTE *)(v10 + 224) = v22;
    v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v21[0] = v5;
    *((_QWORD *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  _OWORD v22[14];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v22);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 244) = v13;
      *(_BYTE *)(v10 + 248) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v10 = swift_allocObject();
    }
    v14 = v22[13];
    *(_OWORD *)(v10 + 208) = v22[12];
    *(_OWORD *)(v10 + 224) = v14;
    *(_BYTE *)(v10 + 240) = v23;
    v15 = v22[9];
    *(_OWORD *)(v10 + 144) = v22[8];
    *(_OWORD *)(v10 + 160) = v15;
    v16 = v22[11];
    *(_OWORD *)(v10 + 176) = v22[10];
    *(_OWORD *)(v10 + 192) = v16;
    v17 = v22[5];
    *(_OWORD *)(v10 + 80) = v22[4];
    *(_OWORD *)(v10 + 96) = v17;
    v18 = v22[7];
    *(_OWORD *)(v10 + 112) = v22[6];
    *(_OWORD *)(v10 + 128) = v18;
    v19 = v22[1];
    *(_OWORD *)(v10 + 16) = v22[0];
    *(_OWORD *)(v10 + 32) = v19;
    v20 = v22[3];
    *(_OWORD *)(v10 + 48) = v22[2];
    *(_OWORD *)(v10 + 64) = v20;
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(0);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    *(_QWORD *)&v22[0] = v5;
    *((_QWORD *)&v22[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    v10 = v18;
    v11 = v19;
    v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>(0);
      v13 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v15 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v16 = 0;
      else
        v16 = CurrentAttribute;
      *(_DWORD *)(v13 + 28) = v16;
      *(_BYTE *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>(0);
      v13 = swift_allocObject();
    }
    *(_QWORD *)(v13 + 16) = v10;
    *(_BYTE *)(v13 + 24) = v11;
    *(_BYTE *)(v13 + 25) = v12;
    v18 = v13;
    v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>.Engine, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v20 = v5;
    v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    v10 = v18;
    v11 = v19;
    v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>(0);
      v13 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v15 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v16 = 0;
      else
        v16 = CurrentAttribute;
      *(_DWORD *)(v13 + 28) = v16;
      *(_BYTE *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>(0);
      v13 = swift_allocObject();
    }
    *(_QWORD *)(v13 + 16) = v10;
    *(_BYTE *)(v13 + 24) = v11;
    *(_BYTE *)(v13 + 25) = v12;
    v18 = v13;
    v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>.Engine, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v20 = v5;
    v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    v10 = v18;
    v11 = v19;
    v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>(0);
      v13 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v15 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v16 = 0;
      else
        v16 = CurrentAttribute;
      *(_DWORD *)(v13 + 28) = v16;
      *(_BYTE *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>(0);
      v13 = swift_allocObject();
    }
    *(_QWORD *)(v13 + 16) = v10;
    *(_BYTE *)(v13 + 24) = v11;
    *(_BYTE *)(v13 + 25) = v12;
    v18 = v13;
    v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>.Engine, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v20 = v5;
    v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    v10 = v18;
    v11 = v19;
    v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>(0);
      v13 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v15 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v16 = 0;
      else
        v16 = CurrentAttribute;
      *(_DWORD *)(v13 + 28) = v16;
      *(_BYTE *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>(0);
      v13 = swift_allocObject();
    }
    *(_QWORD *)(v13 + 16) = v10;
    *(_BYTE *)(v13 + 24) = v11;
    *(_BYTE *)(v13 + 25) = v12;
    v18 = v13;
    v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v20 = v5;
    v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t IsOwner;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v13);
    v10 = v13;
    v9 = v14;
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<StyledTextLayoutEngine>, (uint64_t)&type metadata for StyledTextLayoutEngine, (uint64_t)&protocol witness table for StyledTextLayoutEngine, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      swift_allocObject();
      v11 = specialized TracingLayoutEngineBox.init(_:)(v10, v9);
    }
    else
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LayoutEngineBox<StyledTextLayoutEngine>, (uint64_t)&type metadata for StyledTextLayoutEngine, (uint64_t)&protocol witness table for StyledTextLayoutEngine, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = v9;
    }
    v13 = v11;
    v14 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  MEMORY[0x24BDAC7A8](OutputValue);
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  IsOwner = swift_retain();
  if (v6 != -1)
    IsOwner = swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  IsOwner = _MovableLockIsOwner(static Update._lock);
  if ((IsOwner & 1) != 0)
  {
LABEL_8:
    v8 = MEMORY[0x24BDAC7A8](IsOwner);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v8);
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v14);
    v10 = v14;
    v11 = v15;
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for TracingLayoutEngineBox);
      swift_allocObject();
      v12 = specialized TracingLayoutEngineBox.init(_:)(v10, v11);
    }
    else
    {
      type metadata accessor for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>(0, &lazy cache variable for type metadata for LayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for LayoutEngineBox);
      v12 = swift_allocObject();
      *(_DWORD *)(v12 + 16) = v10;
      *(_QWORD *)(v12 + 24) = v11;
    }
    v14 = v12;
    v15 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(0, &lazy cache variable for type metadata for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextLayoutComputer.Engine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v16 = v5;
    v17 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[45];

  v15[44] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 364) = v13;
      *(_BYTE *)(v10 + 368) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x159uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LeafLayoutEngine<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[65];

  v15[64] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 524) = v13;
      *(_BYTE *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[70];

  v15[69] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 564) = v13;
      *(_BYTE *)(v10 + 568) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x221uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[65];

  v15[64] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 524) = v13;
      *(_BYTE *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[65];

  v15[64] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 524) = v13;
      *(_BYTE *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[65];

  v15[64] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 524) = v13;
      *(_BYTE *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[70];

  v15[69] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 564) = v13;
      *(_BYTE *)(v10 + 568) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x221uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[70];

  v15[69] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 564) = v13;
      *(_BYTE *)(v10 + 568) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x221uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[65];

  v15[64] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 524) = v13;
      *(_BYTE *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[65];

  v15[64] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 524) = v13;
      *(_BYTE *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[78];

  v15[77] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 628) = v13;
      *(_BYTE *)(v10 + 632) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x261uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  _QWORD v15[66];

  v15[65] = *MEMORY[0x24BDAC8D0];
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>(0);
      v10 = swift_allocObject();
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v12 = CurrentAttribute == *MEMORY[0x24BE096C0];
      if (CurrentAttribute == *MEMORY[0x24BE096C0])
        v13 = 0;
      else
        v13 = CurrentAttribute;
      *(_DWORD *)(v10 + 532) = v13;
      *(_BYTE *)(v10 + 536) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>(0);
      v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x201uLL);
    goto LABEL_16;
  }
  v5 = *OutputValue;
  v6 = OutputValue[1];
  MEMORY[0x24BDAC7A8](OutputValue);
  v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v9 = MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(double))(*(_QWORD *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v8);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  if (swift_dynamicCast())
  {
    v5 = v10;
    if (v10 != 1)
    {
      v7 = v9;
      a2 = a3(&v9);
      outlined consume of Text.LineStyle?(v7, v5);
    }
  }
  return a2 & 1;
}

uint64_t specialized RepeatPhase.updateValue()()
{
  uint64_t v0;
  uint64_t result;
  double v2;
  char *v3;

  result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 32) & 1) != 0 || (v2 = *(double *)(v0 + 24), v2 >= *(double *)AGGraphGetValue()))
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
      v3 = (char *)&loc_234AF0E84 + *((int *)qword_234AF11B8 + *(unsigned __int8 *)(AGGraphGetValue() + 24));
      __asm { BR              X10 }
    }
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    return AGGraphSetOutputValue();
  }
  return result;
}

void specialized AnyGestureInfo.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  _QWORD *Value;
  uint64_t v7;
  int v8;
  void *v9;
  unsigned int v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  unsigned int CurrentAttribute;
  unsigned int v16;
  void *v17;
  id v18;
  void *v19;
  int v20;

  v1 = v0;
  v2 = *(void **)(v0 + 168);
  v3 = *(void **)(v0 + 176);
  v4 = *(_DWORD *)(v0 + 184);
  v5 = MEMORY[0x24BEE4AE0];
  if (v2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
    Value = (_QWORD *)AGGraphGetValue();
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 88))(*Value) & 1) != 0)
    {
      v7 = *(_QWORD *)AGGraphGetValue();
      outlined copy of AnyGestureInfo<()>.Value?(v2, v3);
      swift_retain();
      swift_release();
      v8 = v4;
      v9 = v3;
      goto LABEL_8;
    }
    swift_retain();
    v11 = v3;
    specialized AnyGestureInfo.eraseItem(info:)();

    swift_release();
    v10 = v4 + 1;
  }
  else
  {
    v10 = 0;
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, v5 + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
  v12 = *(_QWORD *)AGGraphGetValue();
  v13 = (id)AGSubgraphGetGraph();
  swift_retain();
  v14 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
    __break(1u);
  v16 = CurrentAttribute;
  AGGraphClearUpdate();
  v17 = v3;
  v18 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v7 = specialized closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)(v1, v16, v12, v10, v14);
  v9 = v19;
  v8 = v20;
  AGSubgraphSetCurrent();

  v3 = v17;
  v5 = MEMORY[0x24BEE4AE0];
  AGGraphSetUpdate();
  swift_release();

LABEL_8:
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGestureInfo<()>.Value, v5 + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGestureInfo.Value);
  AGGraphSetOutputValue();
  outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v2, v3);
  *(_QWORD *)(v1 + 168) = v7;
  *(_QWORD *)(v1 + 176) = v9;
  *(_DWORD *)(v1 + 184) = v8;
}

uint64_t specialized closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(uint64_t *__return_ptr, _QWORD, _QWORD, _OWORD *);
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  id v28;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _OWORD v46[6];
  _BYTE v47[28];
  __int128 v48;
  __int128 v49;
  _BYTE v50[48];
  _BYTE v51[44];
  __int128 v52;
  __int128 v53;
  _BYTE v54[48];
  _BYTE v55[44];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a1 + 24);
  v48 = *(_OWORD *)(a1 + 8);
  v49 = v6;
  v7 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v50[32] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)v51 = v7;
  *(_OWORD *)&v51[16] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v51[28] = *(_OWORD *)(a1 + 116);
  v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)v50 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v50[16] = v8;
  v37 = v48;
  v36 = DWORD2(v48);
  v39 = v7;
  v38 = *(_OWORD *)&v51[8];
  v9 = *((_QWORD *)&v49 + 1);
  v10 = *(_QWORD *)v50;
  v34 = *(_OWORD *)&v50[24];
  v35 = *(_OWORD *)&v50[8];
  v11 = *(_QWORD *)&v50[40];
  v12 = *(_QWORD *)&v51[24];
  v13 = *(_QWORD *)&v51[36];
  swift_beginAccess();
  v14 = *(_DWORD *)(v49 + 16);
  v15 = *(_QWORD *)(v49 + 24);
  v31 = *(_OWORD *)(v49 + 48);
  v32 = *(_OWORD *)(v49 + 32);
  v16 = *(_QWORD *)(v49 + 64);
  v17 = *(_QWORD *)(v49 + 72);
  v18 = *(_BYTE *)(v49 + 80);
  v30 = *(_BYTE *)(v49 + 81);
  v19 = *(_QWORD *)(v49 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v14;
  *(_QWORD *)(v20 + 24) = v15;
  *(_OWORD *)(v20 + 32) = v32;
  *(_OWORD *)(v20 + 48) = v31;
  *(_QWORD *)(v20 + 64) = v16;
  *(_QWORD *)(v20 + 72) = v17;
  *(_BYTE *)(v20 + 80) = v18;
  *(_BYTE *)(v20 + 81) = v30;
  *(_QWORD *)(v20 + 88) = v19;
  outlined retain of _GestureInputs((uint64_t)&v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  LODWORD(v52) = *(_DWORD *)(a1 + 120);
  DWORD1(v52) = a2;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyResetSeed<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyResetSeed);
  lazy protocol witness table accessor for type AnyResetSeed<()> and conformance AnyResetSeed<A>();
  v21 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v52 = v37;
  DWORD2(v52) = v36;
  *(_QWORD *)&v53 = v20;
  *((_QWORD *)&v53 + 1) = v9;
  *(_QWORD *)v54 = v10;
  *(_OWORD *)&v54[8] = v35;
  *(_OWORD *)&v54[24] = v34;
  *(_QWORD *)&v54[40] = v11;
  *(_DWORD *)v55 = v39;
  *(_OWORD *)&v55[8] = v38;
  *(_QWORD *)&v55[24] = v12;
  *(_DWORD *)&v55[32] = v21;
  *(_QWORD *)&v55[36] = v13;
  v46[4] = *(_OWORD *)&v54[32];
  v46[5] = *(_OWORD *)v55;
  *(_OWORD *)v47 = *(_OWORD *)&v55[16];
  *(_OWORD *)&v47[12] = *(_OWORD *)&v55[28];
  v46[0] = v52;
  v46[1] = v53;
  v46[2] = *(_OWORD *)v54;
  v46[3] = *(_OWORD *)&v54[16];
  v22 = *(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)a3 + 96);
  outlined retain of _GestureInputs((uint64_t)&v52);
  v22(&v43, a4, a2, v46);
  outlined release of _GestureInputs((uint64_t)&v52);
  v23 = HIDWORD(v43);
  v24 = v44;
  v25 = v45;
  LODWORD(v15) = *(_DWORD *)(a1 + 140);
  v26 = *(_QWORD *)(a1 + 144);
  v27 = *(_DWORD *)(a1 + 152);
  swift_bridgeObjectRetain();
  AGGraphSetIndirectAttribute();
  if ((_DWORD)v15 != *MEMORY[0x24BE096C0] && v23 != *MEMORY[0x24BE096C0])
    AGGraphSetIndirectAttribute();
  *(_QWORD *)&v46[0] = v26;
  DWORD2(v46[0]) = v27;
  v43 = v24;
  LODWORD(v44) = v25;
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v43);
  swift_bridgeObjectRelease();
  outlined release of _GestureInputs((uint64_t)&v52);
  swift_bridgeObjectRelease();
  swift_retain();
  v28 = a5;
  return a3;
}

uint64_t specialized Map2Phase.updateValue()(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t Value;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    type metadata accessor for (_:_:)(0, a1, a2, a3);
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))AGGraphGetValue();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    Value = AGGraphGetValue();
    v9 = *(_QWORD *)(Value + 8);
    v10 = *(_QWORD *)(Value + 16);
    v21 = *(_QWORD *)Value;
    v8 = v21;
    v22 = v9;
    v23 = v10;
    v24 = *(_BYTE *)(Value + 24);
    v11 = v24;
    type metadata accessor for MutableBox<CachedEnvironment>(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    v12 = AGGraphGetValue();
    v13 = *(_WORD *)(v12 + 8);
    v19 = *(_QWORD *)v12;
    v20 = v13;
    swift_retain();
    outlined copy of GesturePhase<TappableEvent>(v21, v9, v10, v24);
    v18(&v25, &v21, &v19);
    swift_release();
    outlined consume of GesturePhase<TappableEvent>(v8, v9, v10, v11);
    v14 = v25;
    v15 = v26;
    v16 = v27;
    v17 = v28;
    v21 = v25;
    v22 = v26;
    v23 = v27;
    v24 = v28;
    AGGraphSetOutputValue();
    return outlined consume of GesturePhase<TappableEvent>(v14, v15, v16, v17);
  }
  return result;
}

BOOL specialized DurationPhase.updateValue()()
{
  uint64_t v0;
  _BOOL8 result;
  char *v2;

  result = specialized ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
      if (*(unsigned __int8 *)(AGGraphGetValue() + 24) - 1 < 2
        || (type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DurationGesture), (*(_BYTE *)(AGGraphGetValue() + 16) & 1) != 0))
      {
        *(_QWORD *)(v0 + 24) = *(_QWORD *)AGGraphGetValue();
        *(_BYTE *)(v0 + 32) = 0;
      }
    }
    else
    {
      AGGraphGetValue();
    }
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    v2 = (char *)&loc_234AF1B30 + *((int *)qword_234AF1D38 + *(unsigned __int8 *)(AGGraphGetValue() + 24));
    __asm { BR              X10 }
  }
  return result;
}

uint64_t specialized EnvironmentalViewChild.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t *Value;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v61 = type metadata accessor for OSSignpostID();
  v59 = *(_QWORD **)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v2 = (char *)&v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v52 - v4;
  v6 = *(_QWORD *)(v0 + 8);
  Value = (uint64_t *)AGGraphGetValue();
  v9 = v8;
  v10 = *Value;
  v11 = (uint64_t *)AGGraphGetValue();
  v13 = *v11;
  v14 = v11[1];
  if ((v9 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_8;
  }
  v15 = v12;
  swift_retain();
  if ((v15 & 1) != 0)
  {
    swift_retain_n();
    swift_retain();
    v16 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v13);
    swift_release();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  if (AGGraphGetOutputValue())
  {
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_8:
  PropertyList.Tracker.reset()();
  if (v13)
    v18 = *(_QWORD *)(v13 + 64);
  else
    v18 = 0;
  v19 = *(_QWORD *)(v6 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v19 + 16));
  *(_QWORD *)(v19 + 24) = v18;
  os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 16));
  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v57 = v6;
    v58 = v14;
    v55 = v10;
    v56 = v13;
    static OSSignpostID.exclusive.getter();
    v53 = static os_signpost_type_t.begin.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v21 = AGTypeID.description.getter();
    v23 = v22;
    v24 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v25 = v5;
    v26 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v21;
    *(_QWORD *)(inited + 64) = v26;
    *(_QWORD *)(inited + 40) = v23;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v24;
    *(_QWORD *)(inited + 104) = v26;
    *(_QWORD *)(inited + 80) = v27;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v28 = (void (*)(char *, char *, uint64_t))v59[2];
    v54 = v25;
    v28(v2, v25, v61);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v29 = swift_initStackObject();
    v60 = xmmword_235283260;
    *(_OWORD *)(v29 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v30 = v29;
      outlined init with copy of AnyTrackedValue(inited + 32, v29 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v52 = inited;
        LODWORD(v25) = v53 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v30 + 72);
        *(_OWORD *)(v30 + 128) = 0u;
        *(_QWORD *)(v30 + 144) = 0;
        *(_OWORD *)(v30 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v25, v30, v25, (uint64_t)v2);
        outlined init with copy of CVarArg?(v30 + 112, (uint64_t)&v62, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v64)
        {
LABEL_24:
          outlined destroy of ScrollStateRequest?((uint64_t)&v62, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v46 = (void (*)(char *, uint64_t))v59[1];
          v47 = v61;
          v46(v2, v61);
          v62 = v56;
          v63 = v57;
          v39 = (*(float (**)(unint64_t *))(*(_QWORD *)v55 + 104))(&v62);
          v41 = v48;
          v43 = v49;
          v45 = v50;
          static os_signpost_type_t.end.getter();
          v51 = v54;
          OSSignpostID.rawValue.getter();
          kdebug_trace();
          v46(v51, v47);
          swift_release();
          goto LABEL_25;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v62, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_18:
          v31 = v61;
          v32 = __swift_project_value_buffer(v61, (uint64_t)static OSSignpostID.continuation);
          v33 = (void (*)(char *, uint64_t, uint64_t))v59[3];
          v33(v2, v32, v31);
          v34 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v35 = swift_initStackObject();
            *(_OWORD *)(v35 + 16) = v60;
            *(_OWORD *)(v35 + 32) = 0u;
            *(_OWORD *)(v35 + 48) = 0u;
            *(_OWORD *)(v35 + 64) = 0u;
            *(_OWORD *)(v35 + 80) = 0u;
            *(_OWORD *)(v35 + 96) = 0u;
            *(_OWORD *)(v35 + 128) = 0u;
            *(_QWORD *)(v35 + 144) = 0;
            *(_OWORD *)(v35 + 112) = 0u;
            v36 = v35 + 112;
            specialized withKDebugValues(_:_:closure:)(v25, v35, v25, (uint64_t)v2);
            outlined init with copy of CVarArg?(v36, (uint64_t)&v62, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v34);
            swift_bridgeObjectRelease();
            if (!v64)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v62, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v34);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v37 = v61;
            v38 = __swift_project_value_buffer(v61, (uint64_t)static OSSignpostID.continuation);
            v33(v2, v38, v37);
          }
          goto LABEL_24;
        }
LABEL_28:
        swift_once();
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  v62 = v13;
  v63 = v6;
  v39 = (*(float (**)(unint64_t *))(*(_QWORD *)v10 + 104))(&v62);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  swift_release();
LABEL_25:
  v62 = __PAIR64__(v41, LODWORD(v39));
  v63 = __PAIR64__(v45, v43);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release_n();
  return swift_release();
}

uint64_t specialized AnimatableAttribute.updateValue()()
{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v3 = Value[1];
  v7[0] = v2;
  v7[1] = v3;
  v8 = v4 & 1;
  v5 = *(unsigned int *)(v0 + 4);
  swift_retain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v7, 0, v5, v0 + 8);
  if ((v8 & 1) == 0 && AGGraphGetOutputValue())
    return swift_release();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  _OWORD *Value;
  __int128 v2;
  __int128 v3;
  char v4;
  uint64_t result;
  _OWORD v6[4];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  Value = (_OWORD *)AGGraphGetValue();
  v2 = Value[1];
  v6[0] = *Value;
  v6[1] = v2;
  v3 = Value[3];
  v6[2] = Value[2];
  v6[3] = v3;
  v7 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v6, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v7 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  char v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 16);
  v5 = *(_OWORD *)Value;
  v6 = v2;
  v7 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v7 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  _OWORD *Value;
  __int128 v2;
  char v3;
  uint64_t result;
  _OWORD v5[2];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  Value = (_OWORD *)AGGraphGetValue();
  v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v6 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  _QWORD *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD v9[5];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  v2 = Value[2];
  v4 = Value[3];
  v5 = Value[4];
  v9[0] = *Value;
  v9[1] = v3;
  v9[2] = v2;
  v9[3] = v4;
  v9[4] = v5;
  v10 = v6 & 1;
  v7 = *(unsigned int *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v9, 0, v7, v0 + 8);
  if ((v10 & 1) == 0 && AGGraphGetOutputValue())
    return swift_bridgeObjectRelease();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 8);
  v5 = *(_QWORD *)Value;
  v6 = v2;
  v7 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v7 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_DWORD *)(Value + 56);
  v10 = *(_QWORD *)Value;
  v11 = v2;
  v12 = v3;
  v5 = *(_OWORD *)(Value + 40);
  v13 = *(_OWORD *)(Value + 24);
  v14 = v5;
  v15 = v4;
  v16 = v6 & 1;
  v7 = v0 + 8;
  v8 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v10, 0, v8, v7);
  if ((v16 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  __int128 v5;
  char v6;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 32);
  v3 = *(_DWORD *)(Value + 40);
  v4 = *(_BYTE *)(Value + 44);
  v5 = *(_OWORD *)(Value + 16);
  v8[0] = *(_OWORD *)Value;
  v8[1] = v5;
  v9 = v2;
  v10 = v3;
  v11 = v4;
  v12 = v6 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v8, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v12 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  __int128 v3;
  char v4;
  int v5;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 8);
  v7 = *(_QWORD *)Value;
  v8 = v2;
  v3 = *(_OWORD *)(Value + 32);
  v9 = *(_OWORD *)(Value + 16);
  v10 = v3;
  v11 = v4 & 1;
  v5 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v7, 0, v5, v0 + 8);
  if ((v11 & 1) == 0 && AGGraphGetOutputValue())
    return swift_bridgeObjectRelease();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  int v4;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 8);
  v6 = *(_QWORD *)Value;
  v7 = v2;
  v8 = v3 & 1;
  v4 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v6, 0, v4, v0 + 8);
  if ((v8 & 1) == 0 && AGGraphGetOutputValue())
    return swift_bridgeObjectRelease();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  __int128 v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 16);
  v3 = *(_QWORD *)(Value + 24);
  v6 = *(_OWORD *)Value;
  v7 = v2;
  v8 = v3;
  v9 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v6, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v9 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t result;
  __int128 v5;
  char v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 16);
  v5 = *(_OWORD *)Value;
  v6 = v2;
  v7 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v7 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(void **)(Value + 16);
  v4 = *(void **)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_QWORD *)(Value + 40);
  v7 = *(_QWORD *)(Value + 48);
  v8 = *(_QWORD *)(Value + 56);
  v9 = *(_QWORD *)(Value + 64);
  v10 = *(_QWORD *)(Value + 72);
  v11 = *(_BYTE *)(Value + 80);
  v12 = *(_DWORD *)(Value + 84);
  v13 = *(_QWORD *)(Value + 88);
  v14 = *(_QWORD *)(Value + 104);
  v34 = *(id *)Value;
  v35 = v2;
  v36 = (unint64_t)v3;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  v40 = v7;
  v41 = v8;
  v42 = v9;
  v43 = v10;
  v44 = v11;
  v45 = v12;
  v46 = v13;
  v47 = *(_BYTE *)(Value + 96);
  v48 = v14;
  v49 = v15 & 1;
  v16 = (_QWORD *)(v0 + 8);
  v17 = *(_DWORD *)(v0 + 4);
  outlined copy of _ShapeStyle_Pack.Fill(v34, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  outlined copy of GraphicsBlendMode?(v13, v47);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t *)&v34, 0, v17, v16);
  if ((v49 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v32 = v35;
    v33 = (unint64_t)v34;
    v21 = v37;
    v31 = v36;
    v22 = v38;
    v23 = v39;
    v24 = v40;
    v25 = v41;
    v26 = v42;
    v27 = v43;
    v28 = v44;
    v29 = v46;
    v30 = v47;
    AGGraphSetOutputValue();
    outlined consume of _ShapeStyle_Pack.Fill(v33, v32, v31, v21, v22, v23, v24, v25, v26, v27, v28);
    outlined consume of GraphicsBlendMode?(v29, v30);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v46;
    v19 = v47;
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    outlined consume of GraphicsBlendMode?(v18, v19);
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t result;
  _OWORD v9[2];
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 32);
  v3 = *(_DWORD *)(Value + 40);
  v4 = *(_BYTE *)(Value + 44);
  v5 = *(_BYTE *)(Value + 45);
  v6 = *(_OWORD *)(Value + 16);
  v9[0] = *(_OWORD *)Value;
  v9[1] = v6;
  v10 = v2;
  v12 = v4;
  v11 = v3;
  v13 = v5;
  v14 = v7 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v9, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if ((v14 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  unsigned __int8 v14;
  _OWORD v15[2];
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 32);
  v3 = *(_DWORD *)(Value + 40);
  v4 = *(_BYTE *)(Value + 44);
  v5 = *(_BYTE *)(Value + 45);
  v6 = *(_DWORD *)(Value + 48);
  v7 = *(_QWORD *)(Value + 56);
  v8 = *(_OWORD *)(Value + 16);
  v15[0] = *(_OWORD *)Value;
  v15[1] = v8;
  v16 = v2;
  v18 = v4;
  v17 = v3;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = *(_BYTE *)(Value + 64);
  v23 = v9 & 1;
  v10 = v0 + 8;
  v11 = *(_DWORD *)(v0 + 4);
  outlined copy of GraphicsBlendMode?(v7, v22);
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v15, 0, v11, v10);
  if ((v23 & 1) == 0 && AGGraphGetOutputValue())
    return outlined consume of GraphicsBlendMode?(v21, v22);
  v13 = v21;
  v14 = v22;
  AGGraphSetOutputValue();
  return outlined consume of GraphicsBlendMode?(v13, v14);
}

{
  uint64_t v0;
  char v1;
  int v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)AGGraphGetValue();
  v5 = v1 & 1;
  v2 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v4, 0, v2, v0 + 8);
  if ((v5 & 1) == 0 && AGGraphGetOutputValue())
    return swift_bridgeObjectRelease();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  __int128 v5;
  char v6;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 32);
  v3 = *(_DWORD *)(Value + 40);
  v4 = *(_BYTE *)(Value + 44);
  v5 = *(_OWORD *)(Value + 16);
  v8[0] = *(_OWORD *)Value;
  v8[1] = v5;
  v9 = v2;
  v10 = v3;
  v11 = v4;
  v12 = v6 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v8, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v12 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  uint64_t result;
  _OWORD v7[2];
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 32);
  v3 = *(_QWORD *)(Value + 40);
  v4 = *(_OWORD *)(Value + 16);
  v7[0] = *(_OWORD *)Value;
  v7[1] = v4;
  v8 = v2;
  v9 = v3;
  v10 = v5 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v7, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v10 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  __int128 v3;
  char v4;
  uint64_t result;
  _OWORD v6[2];
  char v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 32);
  v3 = *(_OWORD *)(Value + 16);
  v6[0] = *(_OWORD *)Value;
  v6[1] = v3;
  v7 = v2;
  v8 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v6, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v8 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v4 = *(_OWORD *)Value;
  v5 = *(_QWORD *)(Value + 16);
  v6 = v2 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v4, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v6 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  float32x4_t v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = *(float32x4_t *)AGGraphGetValue();
  v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v3, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v4 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  __int128 v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)AGGraphGetValue();
  v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v3, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v4 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  _OWORD *Value;
  __int128 v2;
  char v3;
  uint64_t result;
  _OWORD v5[2];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  Value = (_OWORD *)AGGraphGetValue();
  v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v6 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 8);
  v3 = *(_BYTE *)(Value + 9);
  v6 = *(_QWORD *)Value;
  v7 = v2;
  v8 = v3;
  v9 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v6, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v9 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  __int128 v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)AGGraphGetValue();
  v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v3, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v4 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  _OWORD *Value;
  __int128 v2;
  char v3;
  uint64_t result;
  _OWORD v5[3];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  Value = (_OWORD *)AGGraphGetValue();
  v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  v5[2] = Value[2];
  v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v6 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)AGGraphGetValue();
  v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v3, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v4 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

{
  uint64_t v0;
  _OWORD *Value;
  __int128 v2;
  char v3;
  uint64_t result;
  _OWORD v5[2];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for CGRect(0);
  Value = (_OWORD *)AGGraphGetValue();
  v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if ((v6 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

void specialized AnimatableAttribute.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  int v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  __int128 v8;
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_DWORD *)(Value + 24);
  v7 = *(id *)Value;
  v8 = *(_OWORD *)(Value + 8);
  v9 = v2;
  v10 = v3 & 1;
  v4 = *(unsigned int *)(v0 + 4);
  v5 = v7;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v7, 0, v4, v0 + 8);
  if ((v10 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v6 = v7;
    AGGraphSetOutputValue();

  }
  else
  {

  }
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(void **)(Value + 16);
  v4 = *(void **)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_QWORD *)(Value + 40);
  v7 = *(_QWORD *)(Value + 48);
  v8 = *(_QWORD *)(Value + 56);
  v9 = *(_QWORD *)(Value + 64);
  v10 = *(_QWORD *)(Value + 72);
  v11 = *(_BYTE *)(Value + 80);
  v26 = *(id *)Value;
  v27 = v2;
  v28 = (unint64_t)v3;
  v29 = v4;
  v30 = v5;
  v31 = v6;
  v32 = v7;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = v11;
  v37 = v12 & 1;
  v13 = v0 + 8;
  v14 = *(_DWORD *)(v0 + 4);
  outlined copy of _ShapeStyle_Pack.Fill(v26, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v26, 0, v14, v13);
  if ((v37 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v15 = v27;
    v25 = (unint64_t)v26;
    v16 = v28;
    v17 = v29;
    v18 = v30;
    v19 = v31;
    v20 = v32;
    v21 = v33;
    v22 = v34;
    v23 = v35;
    v24 = v36;
    AGGraphSetOutputValue();
    outlined consume of _ShapeStyle_Pack.Fill(v25, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  char v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_BYTE *)(Value + 8);
  v3 = *(_BYTE *)(Value + 9);
  v4 = *(void **)(Value + 16);
  v5 = *(_QWORD *)(Value + 24);
  v6 = *(_QWORD *)(Value + 32);
  v7 = *(_QWORD *)(Value + 40);
  v8 = *(_QWORD *)(Value + 48);
  v9 = *(_QWORD *)(Value + 56);
  v10 = *(_QWORD *)(Value + 64);
  v11 = *(_QWORD *)(Value + 72);
  v12 = *(_QWORD *)(Value + 80);
  v13 = *(_QWORD *)(Value + 88);
  v14 = *(_QWORD *)(Value + 96);
  v15 = *(_QWORD *)(Value + 104);
  v16 = *(_DWORD *)(Value + 112);
  v33 = *(_QWORD *)Value;
  v34 = v2;
  v35 = v3;
  v36 = v4;
  v37 = v5;
  v38 = v6;
  v39 = v7;
  v40 = v8;
  v41 = v9;
  v42 = v10;
  v43 = v11;
  v44 = v12;
  v45 = v13;
  v46 = v14;
  v47 = v15;
  v48 = v16;
  v49 = v17 & 1;
  v18 = v0 + 8;
  v19 = *(unsigned int *)(v0 + 4);
  outlined copy of VariableBlurStyle.Mask(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, BYTE1(v16));
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v33, 0, v19, v18);
  if ((v49 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v31 = v37;
    v32 = v36;
    v20 = v39;
    v30 = v38;
    v21 = v40;
    v22 = v41;
    v23 = v42;
    v24 = v43;
    v25 = v44;
    v26 = v45;
    v27 = v46;
    v28 = v47;
    v29 = v48;
    AGGraphSetOutputValue();
    outlined consume of VariableBlurStyle.Mask(v32, v31, v30, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, HIBYTE(v29));
  }
  else
  {
    outlined consume of VariableBlurStyle.Mask(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, BYTE1(v48));
  }
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(__int128 *, _QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  char v4;
  uint64_t result;
  __int128 v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)AGGraphGetValue();
  v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if ((v7 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(uint64_t *, _QWORD, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t Value;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v5 = *(_BYTE *)(Value + 8);
  v10 = *(_QWORD *)Value;
  v11 = v5;
  v6 = *(_OWORD *)(Value + 32);
  v12 = *(_OWORD *)(Value + 16);
  v13 = v6;
  v14 = v7 & 1;
  v8 = *(unsigned int *)(v2 + 4);
  swift_bridgeObjectRetain();
  a2(&v10, 0, v8, v2 + 8);
  if ((v14 & 1) == 0 && AGGraphGetOutputValue())
    return swift_bridgeObjectRelease();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)AGGraphGetValue();
  v8 = v4 & 1;
  v5 = *(unsigned int *)(v2 + 4);
  swift_retain();
  a2(&v7, 0, v5, v2 + 8);
  if ((v8 & 1) == 0 && AGGraphGetOutputValue())
    return swift_release();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(uint64_t *, _QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  char v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)AGGraphGetValue();
  v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if ((v7 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(_OWORD *, _QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  _OWORD *Value;
  __int128 v5;
  char v6;
  uint64_t result;
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  Value = (_OWORD *)AGGraphGetValue();
  v5 = Value[1];
  v8[0] = *Value;
  v8[1] = v5;
  v9 = v6 & 1;
  a2(v8, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if ((v9 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()(void (*a1)(_QWORD), void (*a2)(__int128 *, _QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  char v4;
  uint64_t result;
  __int128 v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  a1(0);
  v6 = *(_OWORD *)AGGraphGetValue();
  v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if ((v7 & 1) != 0)
    return AGGraphSetOutputValue();
  result = AGGraphGetOutputValue();
  if (!result)
    return AGGraphSetOutputValue();
  return result;
}

unsigned __int8 *specialized ValueTransactionSeed.updateValue()()
{
  uint64_t v0;
  unsigned __int8 *result;
  int v2;
  int v3;

  result = (unsigned __int8 *)AGGraphGetValue();
  v2 = *result;
  v3 = *(unsigned __int8 *)(v0 + 8);
  if (v3 != 2)
  {
    if (((v2 ^ ((v3 & 1) == 0)) & 1) != 0)
      return result;
    AGGraphClearUpdate();
    AGGraphGetValue();
    AGGraphSetUpdate();
  }
  result = (unsigned __int8 *)AGGraphSetOutputValue();
  *(_BYTE *)(v0 + 8) = v2;
  return result;
}

uint64_t specialized TracingLayoutEngineBox.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int CurrentAttribute;
  BOOL v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = v2;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 36) = 1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v7 = CurrentAttribute == *MEMORY[0x24BE096C0];
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
    v8 = 0;
  else
    v8 = CurrentAttribute;
  *(_DWORD *)(v3 + 32) = v8;
  *(_BYTE *)(v3 + 36) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v9 = *(void **)(a1 + 192);
  if (v9)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v10 = objc_msgSend(v9, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release();
    swift_release();

    v11 = *(unsigned int *)(v3 + 32);
    v12 = *(_BYTE *)(v3 + 36);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      swift_retain();
      LayoutTrace.Recorder.traceContentDescription(_:_:)(v11 | ((unint64_t)v12 << 32));
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  return v3;
}

uint64_t specialized TracingLayoutEngineBox.init(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int CurrentAttribute;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v3 = v2;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 36) = 1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v7 = CurrentAttribute == *MEMORY[0x24BE096C0];
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
    v8 = 0;
  else
    v8 = CurrentAttribute;
  *(_DWORD *)(v3 + 32) = v8;
  *(_BYTE *)(v3 + 36) = v7;
  *(_DWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  swift_retain();
  swift_retain();
  specialized SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(a1, a2);
  if (v9)
  {
    v10 = *(unsigned int *)(v3 + 32);
    v11 = *(_BYTE *)(v3 + 36);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      swift_retain();
      LayoutTrace.Recorder.traceContentDescription(_:_:)(v10 | ((unint64_t)v11 << 32));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  return v3;
}

void specialized DynamicViewContainer.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  uint64_t v3;
  uint64_t OutputValue;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  id v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];

  v1 = v0;
  v29[4] = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)Value + 80))();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>.Value, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewContainer.Value);
  OutputValue = AGGraphGetOutputValue();
  if (OutputValue)
  {
    if (*(_QWORD *)OutputValue == v3)
      return;
    v27 = v3;
    v28 = *(_QWORD *)OutputValue;
    v25 = *(_QWORD *)(OutputValue + 8);
    v5 = *(unsigned __int8 *)(OutputValue + 16);
    v6 = *(void **)(OutputValue + 24);
    v7 = *(_QWORD *)(v1 + 96);
    v8 = *(_DWORD *)(v1 + 108);
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v10 = *(void **)(OutputValue + 24);
      v11 = v6;
      swift_bridgeObjectRetain();
      v12 = (_DWORD *)(v7 + 48);
      do
      {
        v13 = *((_QWORD *)v12 - 1);
        v14 = *v12;
        v12 += 6;
        LODWORD(v29[0]) = v14;
        (*(void (**)(_QWORD *, ValueMetadata *, _UNKNOWN **))(v13 + 16))(v29, &type metadata for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs(), &protocol witness table for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs());
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = *(void **)(OutputValue + 24);
      v15 = v6;
      swift_bridgeObjectRetain();
    }
    if (v8 != *MEMORY[0x24BE096C0])
      AGGraphSetIndirectAttribute();
    v16 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v16);
    v26 = v10;
    v17 = v10;
    AGSubgraphApply();

    AGSubgraphInvalidate();
    v24 = v5;
  }
  else
  {
    v27 = v3;
    v28 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
  }
  v18 = *(void **)(v1 + 112);
  v19 = (id)AGSubgraphGetGraph();
  v20 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v18;
  AGGraphClearUpdate();
  v22 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  specialized closure #2 in DynamicViewContainer.updateValue()((unsigned int *)v1, v27, 0, 1, v20, (uint64_t)v29);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v23 = (void *)v29[3];
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of DynamicViewContainer<AnyView>.Value?(v28, v25, v24, v26);
}

id specialized closure #2 in DynamicViewContainer.updateValue()@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  int v23;
  uint64_t v24;
  unsigned int v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;

  v6 = a1;
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 7);
  v29 = *((_QWORD *)a1 + 6);
  v30 = *((_QWORD *)a1 + 1);
  v32 = a1[4];
  v33 = a1[22];
  v9 = *((_QWORD *)a1 + 4);
  v10 = *((_QWORD *)a1 + 5);
  v31 = *((_OWORD *)a1 + 4);
  v11 = *((_QWORD *)a1 + 10);
  swift_beginAccess();
  v12 = *(_DWORD *)(v7 + 16);
  v13 = *(_QWORD *)(v7 + 24);
  v27 = *(_OWORD *)(v7 + 48);
  v28 = *(_OWORD *)(v7 + 32);
  v14 = *(_QWORD *)(v7 + 64);
  v15 = *(_QWORD *)(v7 + 72);
  v16 = *(_BYTE *)(v7 + 80);
  v17 = *(_BYTE *)(v7 + 81);
  v18 = *(_QWORD *)(v7 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = v12;
  *(_QWORD *)(v19 + 24) = v13;
  *(_OWORD *)(v19 + 32) = v28;
  *(_OWORD *)(v19 + 48) = v27;
  *(_QWORD *)(v19 + 64) = v14;
  *(_QWORD *)(v19 + 72) = v15;
  *(_BYTE *)(v19 + 80) = v16;
  *(_BYTE *)(v19 + 81) = v17;
  *(_QWORD *)(v19 + 88) = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = *v6;
  v21 = *(_QWORD *)AGGraphGetValue();
  v39 = v30;
  v40 = v32;
  v41 = v19;
  v42 = v9;
  v43 = v10;
  v44 = v29;
  v45 = v8;
  v46 = v31;
  v47 = v11;
  v48 = v33;
  v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v21 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(&v49, v20, &v39);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v23 = v50;
  v24 = *((_QWORD *)v6 + 12);
  v25 = v6[26];
  LODWORD(v6) = v6[27];
  v39 = v24;
  v40 = v25;
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v49);
  if ((_DWORD)v6 != *MEMORY[0x24BE096C0] && v23 != *MEMORY[0x24BE096C0])
    AGGraphSetIndirectAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_BYTE *)(a6 + 16) = a4 & 1;
  *(_QWORD *)a6 = a2;
  *(_QWORD *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 24) = a5;
  return a5;
}

uint64_t specialized DynamicViewList.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  char IsValid;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  int CurrentAttribute;
  int v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  ValueMetadata *v36;
  uint64_t v37;
  id v38;
  uint64_t Counter;
  id v41;
  uint64_t v42;
  uint64_t v43[3];
  ValueMetadata *v44;
  _UNKNOWN **v45;
  uint64_t v46;

  v1 = v0;
  v46 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)Value + 80))();
  v4 = v3;
  v5 = *(_QWORD *)(v0 + 112);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 40);
    if (*(_QWORD *)(v5 + 32) == v3)
    {
      swift_beginAccess();
      if (*(_DWORD *)(v5 + 24))
      {
        if ((AGSubgraphIsValid() & 1) != 0)
        {
          v42 = v6;
          v16 = v5;
          goto LABEL_37;
        }
      }
    }
    swift_beginAccess();
    v7 = *(_DWORD *)(v5 + 24);
    if (v7)
    {
      v8 = *(void **)(v5 + 16);
      IsValid = AGSubgraphIsValid();
      swift_retain();
      if ((IsValid & 1) != 0)
      {
        v10 = v8;
        AGSubgraphApply();

        AGSubgraphRemoveChild();
        v7 = *(_DWORD *)(v5 + 24);
      }
      *(_DWORD *)(v5 + 24) = v7 - 1;
      if (v7 == 1)
      {
        v11 = *(_QWORD *)(v5 + 64);
        swift_beginAccess();
        v12 = *(_QWORD *)(v11 + 16);
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          v14 = 0;
          v15 = v12 + 32;
          while (*(_QWORD *)(v15 + 8 * v14) != v5)
          {
            if (v13 == ++v14)
              goto LABEL_18;
          }
          swift_beginAccess();
          specialized Array.remove(at:)(v14);
          swift_endAccess();
        }
LABEL_18:
        v17 = AGSubgraphIsValid();
        if ((_DWORD)v17)
        {
          MEMORY[0x24BDAC7A8](v17);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) = -1;
      swift_retain();
    }
    swift_release_n();
    *(_QWORD *)(v0 + 112) = 0;
  }
  else
  {
    v6 = 0;
  }
  v18 = *(_QWORD *)(v0 + 104);
  swift_beginAccess();
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v16 = *(_QWORD *)(v19 + 32);
    v21 = *(_QWORD *)(v16 + 32);
    swift_retain();
    if (v21 == v4)
    {
      v42 = v6;
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    swift_release();
    v22 = v20 - 1;
    if (v22)
    {
      v23 = 0;
      while (1)
      {
        if ((unint64_t)(v23 + 1) >= *(_QWORD *)(v19 + 16))
        {
          __break(1u);
          goto LABEL_41;
        }
        v16 = *(_QWORD *)(v19 + 8 * v23 + 40);
        v24 = *(_QWORD *)(v16 + 32);
        swift_retain();
        if (v24 == v4)
          break;
        swift_release();
        if (v22 == ++v23)
          goto LABEL_28;
      }
      v42 = v6;
      swift_bridgeObjectRelease();
LABEL_35:
      swift_beginAccess();
      ++*(_DWORD *)(v16 + 24);
      v32 = *(void **)(v16 + 16);
      AGSubgraphAddChild();
      v33 = v32;
      AGSubgraphApply();

LABEL_36:
      *(_QWORD *)(v1 + 112) = v16;
LABEL_37:
      v34 = *(void **)(v1 + 96);
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      v35 = AGGraphGetValue();
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for DynamicViewList<AnyView>.WrappedList, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList.WrappedList);
      v44 = v36;
      v45 = &protocol witness table for DynamicViewList<A>.WrappedList;
      v37 = swift_allocObject();
      v43[0] = v37;
      outlined init with copy of AnyTrackedValue(v35, v37 + 16);
      if (AGGraphGetCurrentAttribute() != *MEMORY[0x24BE096C0])
      {
        v38 = (id)AGGraphGetAttributeGraph();
        swift_bridgeObjectRetain();
        v41 = v34;
        swift_retain();
        swift_retain_n();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        Counter = AGGraphGetCounter();

        *(_BYTE *)(v37 + 72) = v5 == 0;
        *(_QWORD *)(v37 + 56) = v16;
        *(_QWORD *)(v37 + 64) = v42;
        *(_QWORD *)(v37 + 80) = Counter;
        AGGraphSetOutputValue();
        swift_release_n();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
    }
LABEL_28:
    swift_bridgeObjectRelease();
  }
  if (AGSubgraphIsValid())
  {
    v25 = (id)AGSubgraphGetGraph();
    v26 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v27 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v28 = specialized closure #1 in DynamicViewList.updateValue()((unsigned int *)v1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v30 = CurrentAttribute;
      v42 = v6;
      v31 = AGMakeUniqueID();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for DynamicViewList<AnyView>.Item, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList.Item);
      swift_allocObject();
      swift_retain();
      v16 = specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(v4, v30, v28, v31, BYTE4(v28) & 1, v26, v18);
      goto LABEL_36;
    }
    goto LABEL_42;
  }
  v44 = &type metadata for EmptyViewList;
  v45 = &protocol witness table for EmptyViewList;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

uint64_t specialized closure #1 in DynamicViewList.updateValue()(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t *);
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  _QWORD v45[8];
  char v46;

  v2 = *((_QWORD *)a1 + 3);
  v31 = a1[9];
  v30 = a1[10];
  v28 = a1[4];
  v29 = a1[11];
  v22 = *((_QWORD *)a1 + 6);
  v23 = *((_QWORD *)a1 + 1);
  v27 = *((_QWORD *)a1 + 8);
  v26 = a1[18];
  v3 = *((_QWORD *)a1 + 10);
  v24 = a1[8];
  v25 = *((_BYTE *)a1 + 88);
  swift_beginAccess();
  v4 = *(_DWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v20 = *(_OWORD *)(v2 + 48);
  v21 = *(_OWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 64);
  v7 = *(_QWORD *)(v2 + 72);
  v8 = *(_BYTE *)(v2 + 80);
  v9 = *(_BYTE *)(v2 + 81);
  v10 = *(_QWORD *)(v2 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v5;
  *(_OWORD *)(v11 + 32) = v21;
  *(_OWORD *)(v11 + 48) = v20;
  *(_QWORD *)(v11 + 64) = v6;
  *(_QWORD *)(v11 + 72) = v7;
  *(_BYTE *)(v11 + 80) = v8;
  *(_BYTE *)(v11 + 81) = v9;
  *(_QWORD *)(v11 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = *a1;
  v13 = *(_QWORD *)AGGraphGetValue();
  v32 = v23;
  v33 = v28;
  v34 = v11;
  v35 = v24;
  v36 = v31;
  v37 = v30;
  v38 = v29;
  v39 = v22;
  v40 = 0;
  v41 = v27;
  v42 = v26;
  v43 = v3;
  v44 = v25;
  v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v13 + 96);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v45, v12, &v32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v32 = v23;
  v33 = v28;
  v34 = v11;
  v35 = v24;
  v36 = v31;
  v37 = v30;
  v38 = v29;
  v39 = v22;
  v40 = 0;
  v41 = v27;
  v42 = v26;
  v43 = v3;
  v44 = v25;
  v15 = _ViewListOutputs.makeAttribute(inputs:)(&v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v16 = v45[7];
  v17 = v46;
  outlined destroy of _ViewListOutputs((uint64_t)v45);
  v18 = 0x100000000;
  if (v17 & 1 | (v16 != 1))
    v18 = 0;
  return v18 | v15;
}

uint64_t specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(uint64_t a1, int a2, int a3, uint64_t a4, char a5, void *a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;

  *(_DWORD *)(v7 + 48) = a2;
  *(_DWORD *)(v7 + 52) = a3;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a4;
  *(_BYTE *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a7;
  *(_DWORD *)(v7 + 24) = 1;
  v10 = (_QWORD *)(a7 + 16);
  *(_QWORD *)(v7 + 16) = a6;
  swift_beginAccess();
  v11 = *(_QWORD **)(a7 + 16);
  swift_retain();
  v12 = a6;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a7 + 16) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    *v10 = v11;
  }
  v15 = v11[2];
  v14 = v11[3];
  if (v15 >= v14 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v11);
    *v10 = v11;
  }
  v11[2] = v15 + 1;
  v11[v15 + 4] = v7;
  swift_endAccess();
  swift_release();
  swift_release();

  return v7;
}

uint64_t specialized SingleTapGesture.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[10];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  if (one-time initialization token for tapMovementThreshold != -1)
    swift_once();
  v2 = tapMovementThreshold;
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  LOBYTE(v11) = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v8, (uint64_t)v7);
  v3 = MEMORY[0x24BEE50B0];
  outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v7, (uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t)type metadata accessor for CoordinateSpaceGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
  v16[0] = 0;
  v16[1] = v2;
  outlined destroy of UpdateScrollStateRequest?((uint64_t)v7, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, v3, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  outlined destroy of CoordinateSpace((uint64_t)&v8);
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 1;
  outlined init with copy of TypesettingLanguage((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  v7[8] = specialized closure #1 in Gesture.gated<A>(by:);
  v7[9] = 0;
  outlined init with copy of TypesettingLanguage((uint64_t)v7, (uint64_t)&v15, type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  LOBYTE(v8) = 0;
  *((_QWORD *)&v8 + 1) = partial apply for specialized closure #1 in Gesture.discrete(_:);
  *(_QWORD *)&v9 = v4;
  BYTE8(v9) = 3;
  LOBYTE(v10) = 0;
  v11 = xmmword_235283270;
  v12 = 0;
  v13 = specialized closure #1 in Gesture.gated<A>(by:);
  v14 = 0;
  outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 24) = closure #1 in SingleTapGesture.body.getter;
  *(_QWORD *)(v5 + 32) = 0;
  outlined init with copy of TypesettingLanguage((uint64_t)&v8, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>);
  *(_QWORD *)(a1 + 160) = partial apply for specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:);
  *(_QWORD *)(a1 + 168) = v5;
  outlined destroy of TypesettingConfiguration((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>);
  return outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ViewListOptionsInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.SavedTransactionKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _ViewInputs.ScrapeableParentID)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ImplicitRootType)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for StyleContextInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for InterfaceIdiomInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ContentScrollPositionAnchorKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ContentScrollPositionKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollPositionAnchorKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollPositionKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for VariantThatFitsFlag)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollStateRequestKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.GestureAccessibilityProviderKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ReferenceDateInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for PreferTextLayoutManagerInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.HasWidgetMetadataKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollPhaseStateKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextAlwaysOnProviderKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.SpacerRepresentationKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextRepresentationKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextSelectionRepresentationKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextAccessibilityProviderKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ImageAccessibilityProviderKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.NamedImageRepresentationKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ImageRepresentationKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _DisplayList_StableIdentityScope)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for DisplayList.Options)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for DynamicStackOrientation)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ForEachEvictionInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ArchivedViewInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for UsingGraphicsRenderer)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for Image.Style)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for TextRendererInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for TextSelectionForbidden)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for TextAllowsSelection)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ReusableInputs)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollableKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollTargetRoleKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.RemovePreferenceInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.LayoutAccessibilityProviderKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.OpacityAccessibilityProviderKey)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for EventBindingBridgeFactoryInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for GestureContainerFactoryInput)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for WithinAccessibilityRotor)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      while ((a2 & ~*(_QWORD *)(v3 + 56)) != 0)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ViewListShouldParentToPlaceholderSubgraph)
        break;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
        return 0;
    }
    return v3;
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        v3 = (_QWORD *)v3[5];
        if (!v3)
          return 0;
      }
      v4 = v3[3];
      if (v4)
      {
        result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result)
          return result;
      }
      v5 = v3[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
        return 0;
    }
    return (uint64_t)v3;
  }
  return result;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (result)
  {
    v5 = (_QWORD *)result;
    while (1)
    {
      while ((a3 & ~v5[7]) != 0)
      {
        v5 = (_QWORD *)v5[5];
        if (!v5)
          return 0;
      }
      v6 = v5[3];
      if (v6)
      {
        result = specialized find1<A>(_:key:filter:)(v6, a2, a3);
        if (result)
          return result;
      }
      if (v5[2] == a2)
        break;
      v5 = (_QWORD *)v5[4];
      if (!v5)
        return 0;
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t a1, uint64_t a2)
{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (uint64_t (*)(_QWORD))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (uint64_t (*)(_QWORD))type metadata accessor for MatchedGeometryScope);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey);
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t (*a4)(_QWORD))
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v7 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v7[7]) != 0)
      {
        v7 = (_QWORD *)v7[5];
        if (!v7)
          return 0;
      }
      v8 = v7[3];
      if (v8)
      {
        result = a3(v8, a2);
        if (result)
          return result;
      }
      v9 = v7[2];
      if (v9 == a4(0))
        break;
      v7 = (_QWORD *)v7[4];
      if (!v7)
        return 0;
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), unint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result)
  {
    v11 = (_QWORD *)result;
    while (1)
    {
      while ((a2 & ~v11[7]) != 0)
      {
        v11 = (_QWORD *)v11[5];
        if (!v11)
          return 0;
      }
      v12 = v11[3];
      if (v12)
      {
        result = a3(v12, a2);
        if (result)
          return result;
      }
      v13 = v11[2];
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v13 == v14)
        break;
      v11 = (_QWORD *)v11[4];
      if (!v11)
        return 0;
    }
    return (uint64_t)v11;
  }
  return result;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized find1<A>(_:key:filter:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized find1<A>(_:key:filter:));
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v7;
  uint64_t v8;

  if (result)
  {
    v7 = (_QWORD *)result;
    while (1)
    {
      while ((a3 & ~v7[7]) != 0)
      {
        v7 = (_QWORD *)v7[5];
        if (!v7)
          return 0;
      }
      v8 = v7[3];
      if (v8)
      {
        result = a4(v8, a2, a3);
        if (result)
          return result;
      }
      if (v7[2] == a2)
        break;
      v7 = (_QWORD *)v7[4];
      if (!v7)
        return 0;
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t specialized InterpolatedDisplayList.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t Value;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  void (*v52)(double *, _OWORD *, uint64_t, uint64_t, __int128 *, uint64_t, float);
  uint64_t v53;
  double *v54;
  double v55;
  double v56;
  double *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  double *v73;
  _QWORD *v74;
  __int16 v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int16 v81;
  char v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v88;
  unint64_t v89;
  uint64_t OutputValue;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  BOOL v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  double v132;
  double v133;
  _OWORD v134[10];
  _OWORD v135[2];
  _OWORD v136[10];
  _OWORD v137[2];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[2];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _OWORD v159[2];
  _BYTE v160[184];
  _BYTE v161[184];
  unint64_t v162;
  unsigned int v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  char v166;
  unsigned __int8 v167;
  uint64_t v168;
  int v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _OWORD v180[2];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _BYTE v191[19];
  uint64_t v192;

  v1 = v0;
  v192 = *MEMORY[0x24BDAC8D0];
  v127 = type metadata accessor for FloatingPointRoundingRule();
  v123 = *(_QWORD *)(v127 - 8);
  MEMORY[0x24BDAC7A8](v127);
  v126 = (char *)&v120 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(v0 + 256);
  if (v3 != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    *(_DWORD *)(v0 + 256) = *(_DWORD *)AGGraphGetValue() >> 1;
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v0 + 56, (uint64_t)&v170, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
    outlined release of Image.Resolved?((uint64_t)&v170, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v181);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v181, v0 + 56, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
    *(_QWORD *)(v0 + 264) = 0;
    v4 = *(void (**)(uint64_t))(**(_QWORD **)v0 + 88);
    v5 = swift_retain();
    v4(v5);
    swift_release();
  }
  Value = AGGraphGetValue();
  v8 = v7;
  v9 = *(_OWORD *)(Value + 48);
  v11 = *(_OWORD *)Value;
  v10 = *(_OWORD *)(Value + 16);
  v183 = *(_OWORD *)(Value + 32);
  v184 = v9;
  v181 = v11;
  v182 = v10;
  v12 = *(_OWORD *)(Value + 112);
  v14 = *(_OWORD *)(Value + 64);
  v13 = *(_OWORD *)(Value + 80);
  v187 = *(_OWORD *)(Value + 96);
  v188 = v12;
  v185 = v14;
  v186 = v13;
  v16 = *(_OWORD *)(Value + 144);
  v15 = *(_OWORD *)(Value + 160);
  v17 = *(_DWORD *)(Value + 175);
  v189 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v191[15] = v17;
  v190 = v16;
  *(_OWORD *)v191 = v15;
  v178 = *(_OWORD *)(Value + 128);
  v179 = *(_OWORD *)(Value + 144);
  v180[0] = *(_OWORD *)(Value + 160);
  *(_DWORD *)((char *)v180 + 15) = *(_DWORD *)(Value + 175);
  v174 = *(_OWORD *)(Value + 64);
  v175 = *(_OWORD *)(Value + 80);
  v176 = *(_OWORD *)(Value + 96);
  v177 = *(_OWORD *)(Value + 112);
  v170 = *(_OWORD *)Value;
  v171 = *(_OWORD *)(Value + 16);
  v172 = *(_OWORD *)(Value + 32);
  v173 = *(_OWORD *)(Value + 48);
  type metadata accessor for CGSize(0);
  v18 = (uint64_t *)AGGraphGetValue();
  v19 = *v18;
  v20 = v18[1];
  v21 = (uint64_t *)AGGraphGetValue();
  v22 = *v21;
  v124 = v21[1];
  v125 = v22;
  if (v124)
  {
    swift_retain_n();
    swift_retain_n();
    outlined retain of Image.Resolved((uint64_t)&v181);
    swift_retain();
    v23 = swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v23, (uint64_t)&v162);
    swift_release_n();
  }
  else
  {
    v130 = v8;
    swift_retain_n();
    outlined retain of Image.Resolved((uint64_t)&v181);
    v24 = swift_retain();
    v25 = specialized find<A>(_:key:)(v24);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 72);
      v27 = *(unsigned int *)(v25 + 80) | ((unint64_t)*(unsigned __int8 *)(v25 + 84) << 32);
      v28 = *(_BYTE *)(v25 + 85);
      v29 = *(_BYTE *)(v25 + 86);
      v30 = *(_BYTE *)(v25 + 87);
      v31 = *(_QWORD *)(v25 + 88);
      v32 = *(_DWORD *)(v25 + 96);
      outlined copy of ContentTransition.Storage(v26, v27, v28);
      swift_retain();
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v27 = 0x302000000;
      v26 = 0x8000000000;
    }
    v162 = v26;
    v163 = v27;
    v164 = BYTE4(v27);
    v165 = v28;
    v166 = v29;
    v167 = v30;
    v168 = v31;
    v169 = v32;
    swift_release();
    LOBYTE(v8) = v130;
  }
  swift_release_n();
  v33 = ++static DisplayList.Version.lastValue;
  v34 = v1 + 56;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 56, (uint64_t)v160, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v160, (uint64_t)v161, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
  v35 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v161);
  v130 = v33;
  v128 = v1;
  if (v35 == 1)
  {
    *(_QWORD *)(v1 + 264) = v33;
LABEL_16:
    swift_release();
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    v129 = 0;
    v41 = 0;
    v168 = 0;
    v42 = v162;
    v43 = v163 | ((unint64_t)v164 << 32);
    LOBYTE(v44) = v165;
    goto LABEL_17;
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v160, (uint64_t)&v138, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
  v157 = v146;
  v158 = v147;
  v159[0] = v148[0];
  *(_DWORD *)((char *)v159 + 15) = *(_DWORD *)((char *)v148 + 15);
  v153 = v142;
  v154 = v143;
  v155 = v144;
  v156 = v145;
  v149 = v138;
  v150 = v139;
  v151 = v140;
  v152 = v141;
  if ((v8 & 1) == 0)
    goto LABEL_16;
  v136[8] = v189;
  v136[9] = v190;
  v137[0] = *(_OWORD *)v191;
  v136[4] = v185;
  v136[5] = v186;
  v136[6] = v187;
  v136[7] = v188;
  v136[0] = v181;
  v136[1] = v182;
  v136[2] = v183;
  v136[3] = v184;
  v134[9] = v147;
  v135[0] = v148[0];
  v134[4] = v142;
  v134[5] = v143;
  v134[6] = v144;
  *(_DWORD *)((char *)v137 + 15) = *(_DWORD *)&v191[15];
  *(_DWORD *)((char *)v135 + 15) = *(_DWORD *)((char *)v148 + 15);
  v134[7] = v145;
  v134[8] = v146;
  v134[0] = v138;
  v134[1] = v139;
  v134[2] = v140;
  v134[3] = v141;
  outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
  if (specialized static Image.Resolved.== infix(_:_:)((uint64_t)v134, (uint64_t)v136))
  {
LABEL_15:
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    goto LABEL_16;
  }
  v36 = *(_DWORD *)(v1 + 36);
  AGGraphGetValue();
  v37 = swift_retain();
  v38 = specialized find<A>(_:key:)(v37);
  if (v38)
  {
    v39 = *(_BYTE *)(v38 + 72);
    swift_release();
    if ((v39 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    swift_release();
  }
  LODWORD(v129) = v36;
  *(_QWORD *)(v1 + 264) = v130;
  if (!v165)
  {
    v88 = v162;
    v89 = v163 | ((unint64_t)v164 << 32);
    if (((v162 >> 38) & 3) > 1)
      __asm { BR              X10 }
    outlined copy of ContentTransition.Storage(v162, v163 | ((unint64_t)v164 << 32), 0);
    outlined copy of ContentTransition.Storage(v88, v89, 0);
    if ((v88 & 0x8000000000) != 0 && !(v88 ^ 0x8000000001 | v89 & 0xFFFFFF))
      goto LABEL_101;
  }
  Image.Resolved.modifyTransition(state:to:)((uint64_t)&v162, (uint64_t)&v170);
  v88 = v162;
  v89 = v163 | ((unint64_t)v164 << 32);
  v44 = v165;
  if (!v165)
  {
LABEL_101:
    if ((v88 & 0x8000000000) != 0 && !(v88 ^ 0x8000000001 | v89 & 0xFFFFFF))
    {
      v121 = v89;
      outlined copy of ContentTransition.Storage(v88, v89, 0);
      v44 = 0;
LABEL_59:
      swift_release();
      v129 = 0;
      v41 = 0;
      v168 = 0;
      goto LABEL_72;
    }
    outlined copy of ContentTransition.Storage(v88, v89, 0);
    v44 = 0;
  }
  OutputValue = AGGraphGetOutputValue();
  v121 = v89;
  if (!OutputValue)
    goto LABEL_59;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v41 = v168;
  if (!v168)
  {
    v99 = swift_retain();
    v100 = specialized find<A>(_:key:)(v99);
    if (v100)
    {
      v41 = *(_QWORD *)(v100 + 72);
      swift_retain();
      swift_release();
      if (v41)
      {
        v168 = v41;
        goto LABEL_54;
      }
      swift_release();
      v129 = 0;
    }
    else
    {
      swift_release_n();
      v129 = 0;
      v41 = 0;
    }
    v168 = 0;
    goto LABEL_72;
  }
LABEL_54:
  v91 = swift_retain();
  v92 = specialized find<A>(_:key:)(v91);
  if (!v92)
  {
    swift_release();
LABEL_64:
    v101 = swift_retain();
    v102 = specialized find<A>(_:key:)(v101);
    if (v102)
    {
      v129 = *(_QWORD *)(v102 + 72);
      swift_retain();
    }
    else
    {
      v129 = 0;
    }
    goto LABEL_67;
  }
  v93 = *(_QWORD *)(v92 + 72);
  swift_retain();
  swift_release();
  v129 = v93;
  if (!v93)
    goto LABEL_64;
  v94 = swift_retain();
  v95 = specialized find<A>(_:key:)(v94);
  if (!v95)
  {
LABEL_67:
    swift_release_n();
    goto LABEL_72;
  }
  v96 = *(_QWORD *)(v95 + 72);
  swift_retain();
  swift_release();
  if (v96)
  {
    type metadata accessor for ListenerPair();
    v97 = v88;
    v98 = swift_allocObject();
    *(_QWORD *)(v98 + 16) = v129;
    *(_QWORD *)(v98 + 24) = v96;
    swift_release();
    v129 = v98;
    v88 = v97;
  }
  else
  {
    swift_release();
  }
LABEL_72:
  v103 = v167;
  v122 = v34;
  if (!v124)
  {
    v109 = swift_retain_n();
    v110 = specialized find<A>(_:key:)(v109);
    v42 = v88;
    if (v110)
      v111 = *(unsigned __int8 *)(v110 + 72);
    else
      v111 = 0;
    LOBYTE(v134[0]) = v111;
    swift_release_n();
    v105 = v111 != 0;
    if (v44)
      goto LABEL_74;
LABEL_87:
    v112 = v103;
    v113 = v121;
    v114 = BYTE4(v121);
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    if (v114 == 3)
      v115 = v112;
    else
      v115 = v114;
    if ((v113 & 0xFF000000) == 0x2000000)
      v116 = v105;
    else
      v116 = (v113 >> 24) & 1;
    v117 = v116 == 0;
    v118 = 0x1000000;
    if (v117)
      v118 = 0;
    v119 = v118 & 0xFFFFFFFFFF000000 | v113 & 0xFFFFFF;
    v162 = v42;
    v164 = v115;
    v43 = v119 | (v115 << 32);
    v163 = v119;
    v165 = 0;
    goto LABEL_97;
  }
  v42 = v88;
  v104 = v125;
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v104, v134);
  swift_release_n();
  swift_release_n();
  v105 = LOBYTE(v134[0]);
  if (!v44)
    goto LABEL_87;
LABEL_74:
  if (v44 == 1)
  {
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    if (BYTE4(v121) == 2)
      v106 = v105;
    else
      v106 = BYTE4(v121) & 1;
    if (v106)
      v107 = 0x100000000;
    else
      v107 = 0;
    v108 = HIDWORD(v107);
    v43 = v107 & 0xFFFFFFFF00000000 | v121;
    v162 = v42;
    v163 = v121;
    v164 = v108;
    v165 = 1;
  }
  else
  {
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined release of Image.Resolved?((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    v43 = v121;
  }
LABEL_97:
  v34 = v122;
LABEL_17:
  v157 = v189;
  v158 = v190;
  v159[0] = *(_OWORD *)v191;
  *(_DWORD *)((char *)v159 + 15) = *(_DWORD *)&v191[15];
  v153 = v185;
  v154 = v186;
  v155 = v187;
  v156 = v188;
  v149 = v181;
  v150 = v182;
  v151 = v183;
  v152 = v184;
  _ViewInputs.base.modify(&v149, v40);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v149, v34, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
  v45 = (uint64_t *)v128;
  *(_QWORD *)(v128 + 240) = v19;
  v45[31] = v20;
  v46 = v169 & 1 | 0x20;
  v47 = *v45;
  v48 = v45[33];
  if (v48)
    LODWORD(v48) = (2 * ((33 * (v48 >> 16)) ^ v48)) | 1;
  LOWORD(v133) = v48;
  *(_QWORD *)&v134[0] = v42;
  BYTE12(v134[0]) = BYTE4(v43);
  DWORD2(v134[0]) = v43;
  BYTE13(v134[0]) = v44;
  BYTE14(v134[0]) = v166;
  v49 = v128;
  LODWORD(v122) = *(_DWORD *)(v128 + 44);
  v50 = 1.0 / *(double *)AGGraphGetValue();
  LOBYTE(v138) = 0;
  DWORD1(v138) = 0;
  BYTE8(v138) = 1;
  HIDWORD(v138) = v46;
  LOBYTE(v139) = 3;
  v51 = *(unsigned __int8 *)(v49 + 54);
  v52 = *(void (**)(double *, _OWORD *, uint64_t, uint64_t, __int128 *, uint64_t, float))(*(_QWORD *)v47 + 128);
  outlined retain of Image.Resolved((uint64_t)&v181);
  swift_retain();
  outlined copy of ContentTransition.Storage(v42, v43, v44);
  swift_retain();
  v52(&v133, v134, v41, v129, &v138, v51, v50);
  swift_release();
  v53 = v49;
  swift_release();
  outlined consume of ContentTransition.Storage(v42, v43, v44);
  v54 = (double *)AGGraphGetValue();
  v55 = *v54;
  v56 = v54[1];
  v57 = (double *)AGGraphGetValue();
  v58 = v55 - *v57;
  v59 = v56 - v57[1];
  v60 = 0.0;
  v61 = 0.0;
  v62 = v59;
  v63 = v58;
  if ((*(_BYTE *)(v49 + 52) & 1) == 0)
  {
    v64 = (double *)AGGraphGetValue();
    v65 = *v64;
    v132 = v64[1];
    v66 = *(double *)AGGraphGetValue();
    v133 = v65 + v66 * 0.5;
    v67 = *MEMORY[0x24BEE38E8];
    v68 = v123;
    v69 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 104);
    v71 = v126;
    v70 = v127;
    v69(v126, v67, v127);
    specialized FloatingPoint.round(_:toMultipleOf:)(v71, v66);
    v72 = *(void (**)(char *, uint64_t))(v68 + 8);
    v72(v71, v70);
    v132 = v66 * 0.5 + v132;
    v69(v71, v67, v70);
    specialized FloatingPoint.round(_:toMultipleOf:)(v71, v66);
    v72(v71, v70);
    v73 = (double *)AGGraphGetValue();
    v63 = v133 - *v73;
    v62 = v132 - v73[1];
    v61 = v63 - v58;
    v60 = v62 - v59;
  }
  if (*(_DWORD *)(v53 + 48) == *MEMORY[0x24BE096C0])
  {
    v74 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v134[0] = MEMORY[0x24BEE4AF8];
    WORD4(v134[0]) = 0;
    BYTE10(v134[0]) = 0;
    if ((*(_BYTE *)(v53 + 53) & 1) != 0)
    {
      v75 = 0;
      v76 = 0;
LABEL_26:
      v78 = swift_allocObject();
      *(_QWORD *)(v78 + 16) = *(_QWORD *)v53;
      *(double *)(v78 + 24) = v63;
      *(double *)(v78 + 32) = v62;
      *(double *)(v78 + 40) = v61;
      *(double *)(v78 + 48) = v60;
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v79 = swift_allocObject();
      *(_OWORD *)(v79 + 16) = xmmword_23527E860;
      *(_OWORD *)(v79 + 32) = 0u;
      *(_OWORD *)(v79 + 48) = 0u;
      v80 = v130;
      *(_QWORD *)(v79 + 64) = v130;
      *(_QWORD *)(v79 + 72) = v78;
      *(_QWORD *)(v79 + 80) = 0x4000001000000000;
      *(_QWORD *)(v79 + 88) = v74;
      *(_BYTE *)(v79 + 98) = v76;
      *(_WORD *)(v79 + 96) = v75;
      *(_DWORD *)(v79 + 100) = 0;
      outlined copy of DisplayList.Effect(v78, 0, 16);
      swift_bridgeObjectRetain();
      outlined copy of DisplayList.Effect(v78, 0, 16);
      swift_retain();
      swift_release();
      v138 = 0u;
      v139 = 0u;
      *(_QWORD *)&v140 = v80;
      *((_QWORD *)&v140 + 1) = v78;
      *(_QWORD *)&v141 = 0x4000001000000000;
      *((_QWORD *)&v141 + 1) = v74;
      BYTE2(v142) = v76;
      LOWORD(v142) = v75;
      DWORD1(v142) = 0;
      DisplayList.Item.properties.getter();
      outlined consume of DisplayList.Effect(v78, 0, 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v134[0] = v79;
      WORD4(v134[0]) = v75 | 0x20;
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v77 = AGGraphGetValue();
  v74 = *(_QWORD **)v77;
  v75 = *(_WORD *)(v77 + 8);
  v76 = *(_BYTE *)(v77 + 10);
  *(_QWORD *)&v134[0] = *(_QWORD *)v77;
  WORD4(v134[0]) = v75;
  BYTE10(v134[0]) = v76;
  if ((*(_BYTE *)(v53 + 53) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_26;
  }
  v127 = *(_QWORD *)v53;
  LODWORD(v128) = *(_DWORD *)(v53 + 32);
  swift_bridgeObjectRetain();
  if ((v75 & 0x10) != 0)
  {
    v131 = 0;
    WORD4(v134[0]) = 0;
    BYTE10(v134[0]) = 0;
    v126 = (char *)v74[2];
    if (v126)
    {
      swift_retain();
      v122 = 100;
      LODWORD(v123) = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v74 = specialized _ArrayBuffer._consumeAndCreateNew()(v74);
      if (v74[2])
      {
        closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((unint64_t)(v74 + 4), v127, v128, v130, &v131, v63, v62, v61, v60);
        if (v74[2])
        {
          v81 = *((_WORD *)v74 + 48);
          v82 = *((_BYTE *)v74 + 98);
          v83 = *((_DWORD *)v74 + 25);
          v84 = *((_OWORD *)v74 + 4);
          v85 = *((_OWORD *)v74 + 5);
          v86 = *((_OWORD *)v74 + 3);
          v138 = *((_OWORD *)v74 + 2);
          v139 = v86;
          v140 = v84;
          v141 = v85;
          BYTE2(v142) = v82;
          LOWORD(v142) = v81;
          DWORD1(v142) = v83;
          DisplayList.Item.features.getter();
          if (v74[2])
            __asm { BR              X9 }
LABEL_46:
          __break(1u);
          JUMPOUT(0x234AFECC8);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_46;
    }
  }
LABEL_35:
  *(_QWORD *)&v138 = v130;
  DisplayList.translate(by:version:)((CGSize)__PAIR128__(*(unint64_t *)&v59, *(unint64_t *)&v58), (SwiftUI::DisplayList::Version)&v138);
  *(_QWORD *)&v138 = *(_QWORD *)&v134[0];
  WORD4(v138) = WORD4(v134[0]);
  BYTE10(v138) = BYTE10(v134[0]);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v146 = v178;
  v147 = v179;
  v148[0] = v180[0];
  *(_DWORD *)((char *)v148 + 15) = *(_DWORD *)((char *)v180 + 15);
  v142 = v174;
  v143 = v175;
  v144 = v176;
  v145 = v177;
  v138 = v170;
  v139 = v171;
  v140 = v172;
  v141 = v173;
  outlined release of Image.Resolved((uint64_t)&v138);
  outlined consume of ContentTransition.Storage(v162, v163 | ((unint64_t)v164 << 32), v165);
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t *Value;
  char v8;
  char v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  float v76;
  uint64_t v77;
  void (*v78)(double *, _QWORD **, uint64_t, id, __int128 *, uint64_t, float);
  double *v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double *v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  double *v98;
  _QWORD *v99;
  __int16 v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  __int16 v107;
  char v108;
  int v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  double v123;
  double v124;
  void *v125;
  __int128 aBlock;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int16 v130;
  char v131;
  int v132;
  _QWORD *v133;
  int v134;
  char v135;
  char v136;
  char v137;
  unint64_t v138;
  unsigned int v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  char v142;
  unsigned __int8 v143;
  uint64_t v144;
  int v145;
  uint64_t v146;

  v1 = v0;
  v146 = *MEMORY[0x24BDAC8D0];
  v117 = type metadata accessor for FloatingPointRoundingRule();
  v114 = *(_QWORD *)(v117 - 8);
  MEMORY[0x24BDAC7A8](v117);
  v115 = (char *)&v114 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(v0 + 80);
  v4 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v3 != v4)
  {
    *(_DWORD *)(v0 + 80) = v4;
    swift_release();
    *(_QWORD *)(v0 + 56) = 0;
    *(_QWORD *)(v0 + 88) = 0;
    v5 = *(void (**)(uint64_t))(**(_QWORD **)v0 + 88);
    v6 = swift_retain();
    v5(v6);
    swift_release();
  }
  type metadata accessor for ResolvedStyledText();
  Value = (uint64_t *)AGGraphGetValue();
  v9 = v8;
  v10 = *Value;
  type metadata accessor for CGSize(0);
  v11 = (double *)AGGraphGetValue();
  v12 = *v11;
  v13 = v11[1];
  v14 = (uint64_t *)AGGraphGetValue();
  v15 = *v14;
  v16 = v14[1];
  v120 = v10;
  v118 = v15;
  v116 = v16;
  if (v16)
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v15, (uint64_t)&v138);
    swift_release_n();
  }
  else
  {
    swift_retain_n();
    swift_retain();
    v17 = specialized find<A>(_:key:)(v15);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 72);
      v19 = *(unsigned int *)(v17 + 80) | ((unint64_t)*(unsigned __int8 *)(v17 + 84) << 32);
      v20 = *(_BYTE *)(v17 + 85);
      v21 = *(_BYTE *)(v17 + 86);
      v22 = *(_BYTE *)(v17 + 87);
      v23 = *(_QWORD *)(v17 + 88);
      v24 = *(_DWORD *)(v17 + 96);
      outlined copy of ContentTransition.Storage(v18, v19, v20);
      swift_retain();
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v19 = 0x302000000;
      v18 = 0x8000000000;
    }
    v138 = v18;
    v139 = v19;
    v140 = BYTE4(v19);
    v141 = v20;
    v142 = v21;
    v143 = v22;
    v144 = v23;
    v145 = v24;
    swift_release();
    v10 = v120;
  }
  swift_release_n();
  v25 = ++static DisplayList.Version.lastValue;
  v26 = *(_QWORD *)(v1 + 56);
  v121 = static DisplayList.Version.lastValue;
  if (!v26)
  {
    *(_QWORD *)(v1 + 88) = static DisplayList.Version.lastValue;
    goto LABEL_27;
  }
  if ((v9 & 1) == 0 || v10 == v26)
  {
    swift_retain();
LABEL_19:
    if (*(double *)(v1 + 64) != v12 || *(double *)(v1 + 72) != v13)
      goto LABEL_24;
    swift_release();
LABEL_27:
    swift_release();
    swift_release();
    v119 = 0;
    v43 = 0;
    v144 = 0;
    v44 = v138;
    v45 = v139 | ((unint64_t)v140 << 32);
    LOBYTE(v46) = v141;
    goto LABEL_85;
  }
  if ((*(_WORD *)(v26 + 236) & 0x80) == 0
    || (v27 = *(void **)(v26 + 192)) == 0
    || (v28 = *(void **)(v120 + 192)) == 0)
  {
    swift_retain();
    goto LABEL_24;
  }
  v125 = 0;
  v10 = v120;
  swift_retain();
  swift_retain();
  v29 = v27;
  v30 = v28;
  v119 = objc_msgSend(v29, sel_length);
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = &v125;
  v31[3] = v30;
  v31[4] = v29;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for closure #1 in ResolvedStyledText.requiresTransition(to:);
  *(_QWORD *)(v32 + 24) = v31;
  *(_QWORD *)&v128 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v128 + 1) = v32;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v127 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v127 + 1) = &block_descriptor_1;
  v33 = _Block_copy(&aBlock);
  v34 = v29;
  v35 = v30;
  swift_retain();
  v36 = v34;
  swift_release();
  objc_msgSend(v34, sel_enumerateAttributesInRange_options_usingBlock_, 0, v119, 0, v33);
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v33 & 1) != 0)
  {
LABEL_111:
    __break(1u);
    JUMPOUT(0x234B00428);
  }
  v37 = v125;
  v38 = objc_msgSend(v35, sel_length);
  swift_release();
  swift_release();

  v39 = v37 == v38;
  v25 = v121;
  if (v39)
    goto LABEL_19;
LABEL_24:
  AGGraphGetValue();
  v40 = swift_retain();
  v41 = specialized find<A>(_:key:)(v40);
  if (v41)
  {
    v42 = *(_BYTE *)(v41 + 72);
    swift_release();
    if ((v42 & 1) != 0)
    {
      swift_release();
      v10 = v120;
      goto LABEL_27;
    }
  }
  else
  {
    swift_release();
  }
  *(_QWORD *)(v1 + 88) = v25;
  if (!v141)
  {
    v44 = v138;
    v47 = v139 | ((unint64_t)v140 << 32);
    if (((v138 >> 38) & 3) > 1)
      __asm { BR              X10 }
    outlined copy of ContentTransition.Storage(v138, v139 | ((unint64_t)v140 << 32), 0);
    outlined copy of ContentTransition.Storage(v44, v47, 0);
    if ((v44 & 0x8000000000) != 0 && !(v44 ^ 0x8000000001 | v47 & 0xFFFFFF))
      goto LABEL_115;
  }
  ResolvedStyledText.modifyTransition(state:to:)((uint64_t)&v138, v120);
  v44 = v138;
  v47 = v139 | ((unint64_t)v140 << 32);
  v46 = v141;
  if (!v141)
  {
LABEL_115:
    if ((v44 & 0x8000000000) != 0 && !(v44 ^ 0x8000000001 | v47 & 0xFFFFFF))
    {
      outlined copy of ContentTransition.Storage(v44, v47, 0);
      v46 = 0;
      goto LABEL_57;
    }
    outlined copy of ContentTransition.Storage(v44, v47, 0);
    v46 = 0;
  }
  if (!AGGraphGetOutputValue())
    goto LABEL_57;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v43 = v144;
  if (!v144)
  {
    v56 = swift_retain();
    v57 = specialized find<A>(_:key:)(v56);
    if (!v57)
    {
      swift_release();
      goto LABEL_57;
    }
    v43 = *(_QWORD *)(v57 + 72);
    swift_retain();
    swift_release();
    if (!v43)
    {
LABEL_57:
      swift_release();
      v119 = 0;
      v43 = 0;
      v144 = 0;
      goto LABEL_58;
    }
    v144 = v43;
  }
  v48 = swift_retain();
  v49 = specialized find<A>(_:key:)(v48);
  if (v49)
  {
    v50 = *(void **)(v49 + 72);
    swift_retain();
    swift_release();
    v119 = v50;
    if (v50)
    {
      v51 = swift_retain();
      v52 = specialized find<A>(_:key:)(v51);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 72);
        swift_retain();
        swift_release();
        if (v53)
        {
          type metadata accessor for ListenerPair();
          v54 = v47;
          v55 = swift_allocObject();
          *(_QWORD *)(v55 + 16) = v119;
          *(_QWORD *)(v55 + 24) = v53;
          swift_release();
          v119 = (id)v55;
          v47 = v54;
        }
        else
        {
          swift_release();
        }
        goto LABEL_58;
      }
      goto LABEL_55;
    }
  }
  else
  {
    swift_release();
  }
  v58 = swift_retain();
  v59 = specialized find<A>(_:key:)(v58);
  if (v59)
  {
    v119 = *(id *)(v59 + 72);
    swift_retain();
  }
  else
  {
    v119 = 0;
  }
LABEL_55:
  swift_release_n();
LABEL_58:
  v60 = v143;
  if (v116)
  {
    v61 = v118;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v61, &aBlock);
    swift_release_n();
    swift_release_n();
    v62 = aBlock;
  }
  else
  {
    v63 = swift_retain_n();
    v64 = specialized find<A>(_:key:)(v63);
    if (v64)
      v65 = *(unsigned __int8 *)(v64 + 72);
    else
      v65 = 0;
    LOBYTE(aBlock) = v65;
    swift_release_n();
    v62 = v65 != 0;
  }
  if (v46)
  {
    if (v46 == 1)
    {
      swift_release_n();
      if (BYTE4(v47) == 2)
        v66 = v62;
      else
        v66 = BYTE4(v47) & 1;
      if (v66)
        v67 = 0x100000000;
      else
        v67 = 0;
      v68 = HIDWORD(v67);
      v45 = v67 & 0xFFFFFFFF00000000 | v47;
      v138 = v44;
      v139 = v47;
      v140 = v68;
      v141 = 1;
    }
    else
    {
      swift_release_n();
      v45 = v47;
    }
  }
  else
  {
    swift_release_n();
    if (BYTE4(v47) == 3)
      v69 = v60;
    else
      v69 = BYTE4(v47);
    if ((v47 & 0xFF000000) == 0x2000000)
      v70 = v62;
    else
      v70 = (v47 >> 24) & 1;
    v39 = v70 == 0;
    v71 = 0x1000000;
    if (v39)
      v71 = 0;
    v72 = v71 & 0xFFFFFFFFFF000000 | v47 & 0xFFFFFF;
    v138 = v44;
    v140 = v69;
    v45 = v72 | (v69 << 32);
    v139 = v72;
    v141 = 0;
  }
  v10 = v120;
LABEL_85:
  *(_QWORD *)(v1 + 56) = v10;
  *(double *)(v1 + 64) = v12;
  *(double *)(v1 + 72) = v13;
  if ((*(_WORD *)(v10 + 236) & 8) != 0)
    v73 = 33;
  else
    v73 = v145 & 1 | 0x20;
  v74 = *(_QWORD *)v1;
  v75 = *(_QWORD *)(v1 + 88);
  if (v75)
    LODWORD(v75) = (2 * ((33 * (v75 >> 16)) ^ v75)) | 1;
  LOWORD(v124) = v75;
  v133 = (_QWORD *)v44;
  v135 = BYTE4(v45);
  v134 = v45;
  v136 = v46;
  v137 = v142;
  v76 = 1.0 / *(double *)AGGraphGetValue();
  LOBYTE(aBlock) = 0;
  DWORD1(aBlock) = 0;
  BYTE8(aBlock) = 1;
  HIDWORD(aBlock) = v73;
  LOBYTE(v127) = 3;
  v77 = *(unsigned __int8 *)(v1 + 54);
  v78 = *(void (**)(double *, _QWORD **, uint64_t, id, __int128 *, uint64_t, float))(*(_QWORD *)v74 + 128);
  swift_retain();
  swift_retain();
  outlined copy of ContentTransition.Storage(v44, v45, v46);
  swift_retain();
  v78(&v124, &v133, v43, v119, &aBlock, v77, v76);
  swift_release();
  swift_release();
  outlined consume of ContentTransition.Storage(v44, v45, v46);
  v79 = (double *)AGGraphGetValue();
  v80 = *v79;
  v81 = v79[1];
  v82 = (double *)AGGraphGetValue();
  v83 = v80 - *v82;
  v84 = v81 - v82[1];
  v85 = 0.0;
  v86 = 0.0;
  v87 = v84;
  v88 = v83;
  if ((*(_BYTE *)(v1 + 52) & 1) == 0)
  {
    v89 = (double *)AGGraphGetValue();
    v90 = *v89;
    v123 = v89[1];
    v91 = *(double *)AGGraphGetValue();
    v124 = v90 + v91 * 0.5;
    v92 = *MEMORY[0x24BEE38E8];
    v93 = v114;
    v94 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 104);
    v95 = v115;
    v96 = v117;
    v94(v115, v92, v117);
    specialized FloatingPoint.round(_:toMultipleOf:)(v95, v91);
    v97 = *(void (**)(char *, uint64_t))(v93 + 8);
    v97(v95, v96);
    v123 = v91 * 0.5 + v123;
    v94(v95, v92, v96);
    specialized FloatingPoint.round(_:toMultipleOf:)(v95, v91);
    v97(v95, v96);
    v98 = (double *)AGGraphGetValue();
    v88 = v124 - *v98;
    v87 = v123 - v98[1];
    v86 = v88 - v83;
    v85 = v87 - v84;
  }
  if (*(_DWORD *)(v1 + 48) == *MEMORY[0x24BE096C0])
  {
    v99 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v133 = (_QWORD *)MEMORY[0x24BEE4AF8];
    LOWORD(v134) = 0;
    BYTE2(v134) = 0;
    if ((*(_BYTE *)(v1 + 53) & 1) != 0)
    {
      v100 = 0;
      v101 = 0;
LABEL_97:
      v103 = swift_allocObject();
      *(_QWORD *)(v103 + 16) = *(_QWORD *)v1;
      *(double *)(v103 + 24) = v88;
      *(double *)(v103 + 32) = v87;
      *(double *)(v103 + 40) = v86;
      *(double *)(v103 + 48) = v85;
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v104 = swift_allocObject();
      *(_OWORD *)(v104 + 16) = xmmword_23527E860;
      *(_OWORD *)(v104 + 32) = 0u;
      *(_OWORD *)(v104 + 48) = 0u;
      v105 = v121;
      *(_QWORD *)(v104 + 64) = v121;
      *(_QWORD *)(v104 + 72) = v103;
      *(_QWORD *)(v104 + 80) = 0x4000001000000000;
      *(_QWORD *)(v104 + 88) = v99;
      *(_BYTE *)(v104 + 98) = v101;
      *(_WORD *)(v104 + 96) = v100;
      *(_DWORD *)(v104 + 100) = 0;
      outlined copy of DisplayList.Effect(v103, 0, 16);
      swift_bridgeObjectRetain();
      outlined copy of DisplayList.Effect(v103, 0, 16);
      swift_retain();
      swift_release();
      v127 = 0u;
      aBlock = 0u;
      *(_QWORD *)&v128 = v105;
      *((_QWORD *)&v128 + 1) = v103;
      *(_QWORD *)&v129 = 0x4000001000000000;
      *((_QWORD *)&v129 + 1) = v99;
      v131 = v101;
      v130 = v100;
      v132 = 0;
      DisplayList.Item.properties.getter();
      outlined consume of DisplayList.Effect(v103, 0, 16);
      swift_bridgeObjectRelease();
      v133 = (_QWORD *)v104;
      LOWORD(v134) = v100 | 0x20;
      goto LABEL_106;
    }
    goto LABEL_106;
  }
  v102 = AGGraphGetValue();
  v99 = *(_QWORD **)v102;
  v100 = *(_WORD *)(v102 + 8);
  v101 = *(_BYTE *)(v102 + 10);
  v133 = *(_QWORD **)v102;
  LOWORD(v134) = v100;
  BYTE2(v134) = v101;
  if ((*(_BYTE *)(v1 + 53) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_97;
  }
  v106 = *(_QWORD *)v1;
  LODWORD(v117) = *(_DWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  if ((v100 & 0x10) != 0)
  {
    v122 = 0;
    LOWORD(v134) = 0;
    BYTE2(v134) = 0;
    if (v99[2])
    {
      swift_retain();
      v114 = 100;
      LODWORD(v115) = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v99 = specialized _ArrayBuffer._consumeAndCreateNew()(v99);
      if (v99[2])
      {
        closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((unint64_t)(v99 + 4), v106, v117, v121, &v122, v88, v87, v86, v85);
        if (v99[2])
        {
          v107 = *((_WORD *)v99 + 48);
          v108 = *((_BYTE *)v99 + 98);
          v109 = *((_DWORD *)v99 + 25);
          v110 = *((_OWORD *)v99 + 4);
          v111 = *((_OWORD *)v99 + 5);
          v112 = *((_OWORD *)v99 + 3);
          aBlock = *((_OWORD *)v99 + 2);
          v127 = v112;
          v128 = v110;
          v129 = v111;
          v131 = v108;
          v130 = v107;
          v132 = v109;
          DisplayList.Item.features.getter();
          if (v99[2])
            __asm { BR              X9 }
          goto LABEL_110;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
  }
LABEL_106:
  *(_QWORD *)&aBlock = v121;
  DisplayList.translate(by:version:)((CGSize)__PAIR128__(*(unint64_t *)&v84, *(unint64_t *)&v83), (SwiftUI::DisplayList::Version)&aBlock);
  *(_QWORD *)&aBlock = v133;
  WORD4(aBlock) = v134;
  BYTE10(aBlock) = BYTE2(v134);
  AGGraphSetOutputValue();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ContentTransition.Storage(v138, v139 | ((unint64_t)v140 << 32), v141);
  return swift_release();
}

uint64_t specialized ForEachState.invalidateViewCounts()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t result;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 240);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(_QWORD *)(v1 + 240);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v4 + 16));
  }
  else
  {
    *v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  result = swift_endAccess();
  *(_QWORD *)(v1 + 248) = 2;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t result;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 200);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(_QWORD *)(v1 + 200);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v4 + 16));
  }
  else
  {
    *v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  result = swift_endAccess();
  *(_QWORD *)(v1 + 208) = 2;
  return result;
}

uint64_t specialized ForEachList.Init.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _UNKNOWN **v9;
  uint64_t v10;

  v1 = v0;
  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info);
  AGGraphGetValue();
  swift_retain();
  specialized ForEachState.invalidateViewCounts()();
  swift_release();
  v2 = *(_DWORD *)(v0 + 4) + 1;
  *(_DWORD *)(v1 + 4) = v2;
  v3 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info(0, &lazy cache variable for type metadata for ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachList);
  v8 = v4;
  v9 = &protocol witness table for ForEachList<A, B, C>;
  v6 = v3;
  v7 = v2;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  swift_retain();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _UNKNOWN **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(v0 + 4);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info(0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info);
  AGGraphGetValue();
  swift_retain();
  specialized ForEachState.invalidateViewCounts()();
  swift_release();
  *(_DWORD *)(v0 + 4) = v1 + 1;
  v2 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info(0, &lazy cache variable for type metadata for ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachList);
  v7 = v3;
  v8 = &protocol witness table for ForEachList<A, B, C>;
  v5 = v2;
  v6 = v1 + 1;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  swift_retain();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
}

uint64_t specialized SizeThatFitsTransactions.updateValue()()
{
  uint64_t v0;
  uint64_t *WeakValue;
  unsigned __int8 *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t *OutputValue;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  char v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  double v45;
  char v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  double *v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  char v71;
  _QWORD *v72;
  double *v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  char v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int64_t v102;
  double v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  double v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    type metadata accessor for [_ProposedSize : Transaction]();
    result = AGGraphGetOutputValue();
    if (result && !*(_QWORD *)(*(_QWORD *)result + 16))
      return result;
    goto LABEL_11;
  }
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue
    || (v107 = *WeakValue, (v2 = (unsigned __int8 *)AGGraphGetWeakValue()) == 0)
    || (v3 = *v2, (v4 = (uint64_t *)AGGraphGetWeakValue()) == 0))
  {
    type metadata accessor for [_ProposedSize : Transaction]();
    result = AGGraphGetOutputValue();
    if (result)
      return result;
LABEL_11:
    v108 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  v6 = *v4;
  v5 = v4[1];
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of SafeAreaInsets.OptionalValue?(v5);
  AGGraphClearUpdate();
  v7 = (uint64_t *)AGGraphGetWeakValue();
  if (v7)
  {
    v99 = *v7;
    swift_retain();
  }
  else
  {
    v99 = 1;
  }
  AGGraphSetUpdate();
  v9 = *(_QWORD *)(v6 + 16);
  if (!v9)
  {
    v11 = 0uLL;
    v12 = 0uLL;
    goto LABEL_24;
  }
  if (v9 == 1)
  {
    v10 = 0;
    v11 = 0uLL;
    v12 = 0uLL;
LABEL_22:
    v19 = v9 - v10;
    v20 = (float64x2_t *)(v6 + 40 * v10 + 40);
    do
    {
      v12 = vaddq_f64(v12, v20[1]);
      v11 = vaddq_f64(v11, *v20);
      v20 = (float64x2_t *)((char *)v20 + 40);
      --v19;
    }
    while (v19);
    goto LABEL_24;
  }
  v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
  v13 = (float64x2_t *)(v6 + 80);
  v11 = 0uLL;
  v14 = v9 & 0x7FFFFFFFFFFFFFFELL;
  v12 = 0uLL;
  do
  {
    v15 = *(float64x2_t *)((char *)v13 - 24);
    v16 = *(float64x2_t *)((char *)v13 - 40);
    v17 = *v13;
    v18 = v13[1];
    v13 += 5;
    v12 = vaddq_f64(vaddq_f64(v12, v15), v18);
    v11 = vaddq_f64(vaddq_f64(v11, v16), v17);
    v14 -= 2;
  }
  while (v14);
  if (v9 != v10)
    goto LABEL_22;
LABEL_24:
  v103 = v12.f64[0];
  v105 = v11.f64[0];
  if (v3)
    v21 = v11.f64[1];
  else
    v21 = v12.f64[1];
  if (v3)
    v22 = v12.f64[1];
  else
    v22 = v11.f64[1];
  if (v11.f64[1] == v12.f64[1])
    v23 = v12.f64[1];
  else
    v23 = v21;
  if (v11.f64[1] == v12.f64[1])
    v24 = v11.f64[1];
  else
    v24 = v22;
  type metadata accessor for [_ProposedSize : Transaction]();
  OutputValue = (unint64_t *)AGGraphGetOutputValue();
  v98 = v5;
  if (OutputValue)
  {
    v100 = *OutputValue;
    swift_bridgeObjectRetain();
  }
  else
  {
    v100 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  v26 = *(_QWORD *)(v0 + 32);
  v27 = *(_QWORD *)(v26 + 64);
  v101 = v26 + 64;
  v28 = 1 << *(_BYTE *)(v26 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v31 = v24 + v23;
  v32 = v105 + v103;
  v33 = -v23 - v24;
  v34 = -v103 - v105;
  v102 = (unint64_t)(v28 + 63) >> 6;
  v104 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  v35 = 0;
  v36 = 0;
  v106 = v0;
  while (1)
  {
    if (v30)
    {
      v37 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v38 = v37 | (v36 << 6);
      goto LABEL_62;
    }
    v39 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
    }
    if (v39 >= v102)
      goto LABEL_117;
    v40 = *(_QWORD *)(v101 + 8 * v39);
    ++v36;
    if (v40)
      goto LABEL_61;
    v36 = v39 + 1;
    if (v39 + 1 >= v102)
      goto LABEL_117;
    v40 = *(_QWORD *)(v101 + 8 * v36);
    if (v40)
      goto LABEL_61;
    v36 = v39 + 2;
    if (v39 + 2 >= v102)
      goto LABEL_117;
    v40 = *(_QWORD *)(v101 + 8 * v36);
    if (v40)
      goto LABEL_61;
    v36 = v39 + 3;
    if (v39 + 3 >= v102)
      goto LABEL_117;
    v40 = *(_QWORD *)(v101 + 8 * v36);
    if (v40)
      goto LABEL_61;
    v36 = v39 + 4;
    if (v39 + 4 >= v102)
      goto LABEL_117;
    v40 = *(_QWORD *)(v101 + 8 * v36);
    if (v40)
      goto LABEL_61;
    v41 = v39 + 5;
    if (v41 >= v102)
    {
LABEL_117:
      swift_release();
      if ((v35 & 1) == 0 && AGGraphGetOutputValue())
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Transaction?(v98);
        return outlined consume of Transaction?(v99);
      }
      v108 = v100;
      AGGraphSetOutputValue();
      swift_release();
      outlined consume of Transaction?(v99);
      swift_bridgeObjectRelease();
      outlined consume of Transaction?(v98);
      return swift_bridgeObjectRelease();
    }
    v40 = *(_QWORD *)(v101 + 8 * v41);
    if (!v40)
    {
      while (1)
      {
        v36 = v41 + 1;
        if (__OFADD__(v41, 1))
          goto LABEL_124;
        if (v36 >= v102)
          goto LABEL_117;
        v40 = *(_QWORD *)(v101 + 8 * v36);
        ++v41;
        if (v40)
          goto LABEL_61;
      }
    }
    v36 = v41;
LABEL_61:
    v30 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v36 << 6);
LABEL_62:
    v42 = *(_QWORD *)(v104 + 48) + 32 * v38;
    v43 = *(_QWORD *)v42;
    v44 = *(_BYTE *)(v42 + 8);
    v45 = *(double *)(v42 + 16);
    v46 = *(_BYTE *)(v42 + 24);
    v47 = *(double *)v42 - v31;
    if (v47 < 0.0)
      v47 = 0.0;
    if ((*(_BYTE *)(v42 + 8) & 1) != 0)
      v48 = *(double *)v42;
    else
      v48 = v47;
    v49 = v45 - v32;
    if (v45 - v32 < 0.0)
      v49 = 0.0;
    if ((*(_BYTE *)(v42 + 24) & 1) != 0)
      v50 = *(double *)(v42 + 16);
    else
      v50 = v49;
    v51 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v51 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        break;
    }
    v108 = *(_QWORD *)&v48;
    v109 = v44;
    v110 = v50;
    v111 = v46;
    v52 = (*(double (**)(unint64_t *))(*(_QWORD *)v107 + 120))(&v108);
    v54 = v53;
    swift_release();
    if (v52 - v33 < 0.0)
      v55 = 0.0;
    else
      v55 = v52 - v33;
    if (v54 - v34 < 0.0)
      v56 = 0.0;
    else
      v56 = v54 - v34;
    v57 = *(_QWORD *)(v106 + 32);
    if (*(_QWORD *)(v57 + 16))
    {
      LOBYTE(v108) = v44;
      v58 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44, *(uint64_t *)&v45, v46);
      if ((v59 & 1) != 0)
      {
        v60 = (double *)(*(_QWORD *)(v57 + 56) + 16 * v58);
        if (*v60 == v55 && v60[1] == v56)
          continue;
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v108 = *(_QWORD *)(v106 + 32);
    v63 = v108;
    *(_QWORD *)(v106 + 32) = 0x8000000000000000;
    v65 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44, *(uint64_t *)&v45, v46);
    v66 = *(_QWORD *)(v63 + 16);
    v67 = (v64 & 1) == 0;
    v68 = v66 + v67;
    if (__OFADD__(v66, v67))
      goto LABEL_122;
    v69 = v64;
    if (*(_QWORD *)(v63 + 24) >= v68)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v72 = (_QWORD *)v108;
        if ((v64 & 1) == 0)
          goto LABEL_99;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v72 = (_QWORD *)v108;
        if ((v69 & 1) == 0)
          goto LABEL_99;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v68, isUniquelyReferenced_nonNull_native);
      v70 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44, *(uint64_t *)&v45, v46);
      if ((v69 & 1) != (v71 & 1))
        goto LABEL_128;
      v65 = v70;
      v72 = (_QWORD *)v108;
      if ((v69 & 1) == 0)
      {
LABEL_99:
        v72[(v65 >> 6) + 8] |= 1 << v65;
        v74 = v72[6] + 32 * v65;
        *(_QWORD *)v74 = v43;
        *(_BYTE *)(v74 + 8) = v44;
        *(double *)(v74 + 16) = v45;
        *(_BYTE *)(v74 + 24) = v46;
        v75 = (double *)(v72[7] + 16 * v65);
        *v75 = v55;
        v75[1] = v56;
        v76 = v72[2];
        v77 = __OFADD__(v76, 1);
        v78 = v76 + 1;
        if (v77)
          goto LABEL_123;
        v72[2] = v78;
        goto LABEL_101;
      }
    }
    v73 = (double *)(v72[7] + 16 * v65);
    *v73 = v55;
    v73[1] = v56;
LABEL_101:
    *(_QWORD *)(v106 + 32) = v72;
    swift_bridgeObjectRelease();
    if (v99 == 1)
    {
      LOBYTE(v108) = v44;
      v79 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44, *(uint64_t *)&v45, v46);
      v35 = 1;
      if ((v80 & 1) != 0)
      {
        v81 = v79;
        v82 = v100;
        v83 = swift_isUniquelyReferenced_nonNull_native();
        v108 = v100;
        if ((v83 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v82 = v108;
        }
        v100 = v82;
        specialized _NativeDictionary._delete(at:)(v81, v82);
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_retain();
      v84 = swift_isUniquelyReferenced_nonNull_native();
      v108 = v100;
      v86 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44, *(uint64_t *)&v45, v46);
      v87 = *(_QWORD *)(v100 + 16);
      v88 = (v85 & 1) == 0;
      v89 = v87 + v88;
      if (__OFADD__(v87, v88))
        goto LABEL_125;
      v90 = v85;
      if (*(_QWORD *)(v100 + 24) >= v89)
      {
        if ((v84 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v89, v84);
        v91 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44, *(uint64_t *)&v45, v46);
        if ((v90 & 1) != (v92 & 1))
          goto LABEL_128;
        v86 = v91;
      }
      v93 = (_QWORD *)v108;
      v100 = v108;
      if ((v90 & 1) != 0)
      {
        v94 = *(_QWORD *)(v108 + 56);
        swift_release();
        *(_QWORD *)(v94 + 8 * v86) = v99;
      }
      else
      {
        *(_QWORD *)(v108 + 8 * (v86 >> 6) + 64) |= 1 << v86;
        v95 = v93[6] + 32 * v86;
        *(_QWORD *)v95 = v43;
        *(_BYTE *)(v95 + 8) = v44;
        *(double *)(v95 + 16) = v45;
        *(_BYTE *)(v95 + 24) = v46;
        *(_QWORD *)(v93[7] + 8 * v86) = v99;
        v96 = v93[2];
        v77 = __OFADD__(v96, 1);
        v97 = v96 + 1;
        if (v77)
          goto LABEL_126;
        v93[2] = v97;
      }
      swift_bridgeObjectRelease();
      v35 = 1;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_128:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unsigned int *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

BOOL (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unsigned __int8 *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return specialized ShapeStyleResolver.updateValue()();
}

{
  return specialized DynamicViewList.updateValue()();
}

{
  uint64_t Value;
  char v1;
  char v2;
  __int128 v3;
  __int128 v4;
  _BYTE v6[16];
  _OWORD *v7;
  _OWORD v8[2];
  char v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  char v24;
  char v25;

  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  Value = AGGraphGetValue();
  v1 = *(_BYTE *)(Value + 32);
  v2 = *(_BYTE *)(Value + 33);
  v3 = *(_OWORD *)Value;
  v4 = *(_OWORD *)(Value + 16);
  v25 = 1;
  v24 = 1;
  v23 = 1;
  v8[0] = v3;
  v8[1] = v4;
  v9 = v1;
  v10 = v2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 1;
  v7 = v8;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v6, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized LeafResponderFilter.updateValue()();
}

{
  return specialized LeafDisplayList.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for ColorView, (void (*)(__int128 *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for _VSpacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for _HSpacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for Spacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized ForEachList.Init.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return _AppearanceActionModifier.MergedCallbacks.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return CanvasSymbols.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  uint64_t Value;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v17[16];
  _OWORD *v18;
  _OWORD v19[10];
  _OWORD v20[2];
  _OWORD v21[10];
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  Value = AGGraphGetValue();
  v1 = *(_OWORD *)(Value + 48);
  v3 = *(_OWORD *)Value;
  v2 = *(_OWORD *)(Value + 16);
  v21[2] = *(_OWORD *)(Value + 32);
  v21[3] = v1;
  v21[0] = v3;
  v21[1] = v2;
  v4 = *(_OWORD *)(Value + 112);
  v6 = *(_OWORD *)(Value + 64);
  v5 = *(_OWORD *)(Value + 80);
  v21[6] = *(_OWORD *)(Value + 96);
  v21[7] = v4;
  v21[4] = v6;
  v21[5] = v5;
  v8 = *(_OWORD *)(Value + 144);
  v7 = *(_OWORD *)(Value + 160);
  v9 = *(_OWORD *)(Value + 128);
  *(_DWORD *)((char *)v22 + 15) = *(_DWORD *)(Value + 175);
  v21[9] = v8;
  v22[0] = v7;
  v21[8] = v9;
  v10 = *(_OWORD *)(Value + 160);
  v32 = *(_OWORD *)(Value + 144);
  v33[0] = v10;
  *(_DWORD *)((char *)v33 + 15) = *(_DWORD *)(Value + 175);
  v11 = *(_OWORD *)(Value + 128);
  v12 = *(_OWORD *)(Value + 80);
  v27 = *(_OWORD *)(Value + 64);
  v28 = v12;
  v13 = *(_OWORD *)(Value + 112);
  v29 = *(_OWORD *)(Value + 96);
  v30 = v13;
  v31 = v11;
  v14 = *(_OWORD *)(Value + 16);
  v23 = *(_OWORD *)Value;
  v24 = v14;
  v15 = *(_OWORD *)(Value + 48);
  v25 = *(_OWORD *)(Value + 32);
  v26 = v15;
  v19[8] = v11;
  v19[9] = v32;
  v20[0] = v33[0];
  *(_DWORD *)((char *)v20 + 15) = *(_DWORD *)((char *)v33 + 15);
  v19[4] = v27;
  v19[5] = v28;
  v19[6] = v29;
  v19[7] = v30;
  v19[0] = v23;
  v19[1] = v24;
  v19[2] = v25;
  v19[3] = v15;
  v18 = v19;
  outlined retain of Image.Resolved((uint64_t)v21);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v17, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  return outlined release of Image.Resolved((uint64_t)v21);
}

{
  return specialized InterpolatedDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return ResolvedTextFilter.updateValue()();
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized LeafResponderFilter.updateValue()();
}

{
  return specialized LeafDisplayList.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  _QWORD *Value;
  uint64_t v1;
  _BYTE v3[16];
  _QWORD *v4;
  _QWORD v5[2];

  Value = (_QWORD *)AGGraphGetValue();
  v1 = Value[1];
  v5[0] = *Value;
  v5[1] = v1;
  v4 = v5;
  swift_retain();
  swift_retain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v3, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  swift_release();
  return swift_release();
}

{
  return specialized InterpolatedDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return DynamicTextView.DynamicTextEnvironment.updateValue()();
}

{
  return DynamicTextView.DynamicTextFilter.updateValue()();
}

{
  return ForegroundLayerDisplayList.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized ChildEnvironment.updateValue()();
}

{
  return specialized ChildEnvironment.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return HitTestBindingFilter.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for OpacityRendererEffect, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return DrawingGroupDisplayList.updateValue()();
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result);
    MEMORY[0x24BDAC7A8](v1);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v2, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  return FillMaskDisplayList.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _OpacityEffect, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return PlaceholderInfo.updateValue()();
}

{
  return SubviewsPhase.updateValue()();
}

{
  return specialized RepeatPhase.updateValue()();
}

{
  return specialized Map2Phase.updateValue()(&lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x24BEE50B0]);
}

{
  return specialized EventListenerPhase.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized Map2Phase.updateValue()(&lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x24BEE13C8]);
}

{
  return specialized EventListenerPhase.updateValue()();
}

{
  uint64_t result;
  void (*v1)(uint64_t *__return_ptr, uint64_t *);
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MapGesture);
    v1 = *(void (**)(uint64_t *__return_ptr, uint64_t *))AGGraphGetValue();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    Value = AGGraphGetValue();
    v4 = *(_QWORD *)(Value + 8);
    v5 = *(_QWORD *)(Value + 16);
    v10 = *(_QWORD *)Value;
    v3 = v10;
    v11 = v4;
    v12 = v5;
    v13 = *(_BYTE *)(Value + 24);
    v6 = v13;
    swift_retain();
    outlined copy of GesturePhase<TappableEvent>(v10, v4, v5, v13);
    v1(&v14, &v10);
    swift_release();
    outlined consume of GesturePhase<TappableEvent>(v3, v4, v5, v6);
    v7 = v14;
    v8 = v15;
    v9 = v16;
    LOBYTE(v4) = v17;
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v13 = v17;
    AGGraphSetOutputValue();
    return outlined consume of GesturePhase<TappableEvent>(v7, v8, v9, v4);
  }
  return result;
}

{
  return specialized StaticBody.updateValue()();
}

{
  return SharedFrame.updateValue()();
}

{
  return DynamicTransaction.updateValue()();
}

{
  return specialized DynamicContainerInfo.updateValue()();
}

{
  return DynamicLayoutViewChildGeometry.updateValue()();
}

{
  return specialized SizeThatFitsTransactions.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()(MEMORY[0x24BEE50B0], (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for EdgeInsets, (void (*)(_OWORD *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for ViewOrigin, (void (*)(__int128 *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _OffsetEffect, (void (*)(__int128 *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for RadialGradient._Paint, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for AngularGradient._Paint, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _ContrastEffect, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _GrayscaleEffect, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _BrightnessEffect, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _SaturationEffect, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for EllipticalGradient._Paint, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _HueRotationEffect, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for RectangleCornerRadii, (void (*)(_OWORD *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (void (*)(__int128 *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Angle, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Circle._Inset, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Capsule._Inset, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Ellipse._Inset, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for AnyShape, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for UnitRect, (void (*)(_OWORD *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for AnyLayout, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Rectangle._Inset, (void (*)(uint64_t *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()(type metadata accessor for CGSize, (void (*)(__int128 *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()(type metadata accessor for CGPoint, (void (*)(__int128 *, _QWORD, _QWORD, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryPositionAwareLayoutComputer.updateValue()();
}

{
  return specialized UnaryPositionAwareLayoutComputer.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Rectangle, (void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  _BYTE v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 9);
  v7 = *(_BYTE *)(Value + 8);
  v23 = 1;
  v22 = 1;
  v21 = 1;
  v6 = v1;
  v8 = v2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 1;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Rectangle._Inset, (void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(char *, char *, uint64_t))&type metadata for Rectangle._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Ellipse, (void (*)(_QWORD))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  _BYTE v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 9);
  v7 = *(_BYTE *)(Value + 8);
  v23 = 1;
  v22 = 1;
  v21 = 1;
  v6 = v1;
  v8 = v2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 1;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Ellipse._Inset, (void (*)(_QWORD))type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(char *, char *, uint64_t))&type metadata for Ellipse._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  _BYTE *Value;
  char v1;
  char v2;
  _BYTE v4[16];
  _BYTE *v5;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;

  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  Value = (_BYTE *)AGGraphGetValue();
  v1 = Value[1];
  v2 = Value[2];
  v6[0] = *Value;
  v21 = 1;
  v20 = 1;
  v19 = 1;
  v6[1] = v1;
  v6[2] = v2;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 1;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 1;
  v5 = v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  _BYTE v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 9);
  v7 = *(_BYTE *)(Value + 8);
  v23 = 1;
  v22 = 1;
  v21 = 1;
  v6 = v1;
  v8 = v2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 1;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (void (*)(_QWORD *__return_ptr, _QWORD *, double, double, double, double, double))specialized Shape.effectivePath(in:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Capsule._Inset, (void (*)(_QWORD))type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(char *, char *, uint64_t))&type metadata for Capsule._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Circle, (void (*)(_QWORD))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  _BYTE v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 9);
  v7 = *(_BYTE *)(Value + 8);
  v23 = 1;
  v22 = 1;
  v21 = 1;
  v6 = v1;
  v8 = v2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 1;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Circle._Inset, (void (*)(_QWORD))type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(char *, char *, uint64_t))&type metadata for Circle._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized EnvironmentalViewChild.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  uint64_t Value;
  char v1;
  char v2;
  char v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[16];
  _OWORD *v8;
  _OWORD v9[2];
  char v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  char v26;
  char v27;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_BYTE *)(Value + 32);
  v2 = *(_BYTE *)(Value + 33);
  v3 = *(_BYTE *)(Value + 34);
  v4 = *(_OWORD *)Value;
  v5 = *(_OWORD *)(Value + 16);
  v27 = 1;
  v26 = 1;
  v25 = 1;
  v9[0] = v4;
  v9[1] = v5;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v8 = v9;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v7, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  uint64_t Value;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[16];
  _OWORD *v9;
  _OWORD v10[2];
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_BYTE *)(Value + 32);
  v2 = *(_QWORD *)(Value + 40);
  v3 = *(_BYTE *)(Value + 48);
  v4 = *(_BYTE *)(Value + 49);
  v5 = *(_OWORD *)Value;
  v6 = *(_OWORD *)(Value + 16);
  v29 = 1;
  v28 = 1;
  v27 = 1;
  v10[0] = v5;
  v10[1] = v6;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 1;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 1;
  v9 = v10;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v8, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for ContainerRelativeShape, (void (*)(_QWORD))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  _BYTE v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 9);
  v7 = *(_BYTE *)(Value + 8);
  v23 = 1;
  v22 = 1;
  v21 = 1;
  v6 = v1;
  v8 = v2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 1;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()(&lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(_QWORD *__return_ptr, _QWORD *, double, double, double, double, double))specialized Shape.effectivePath(in:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(_QWORD))type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(char *, char *, uint64_t))&type metadata for ContainerRelativeShape._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ChildEnvironment.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ForEachList.Init.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()((uint64_t)&type metadata for EllipticalGradient, (void (*)(__int128 *))specialized Paint._apply(to:));
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>);
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for EllipticalGradient, (void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for EllipticalGradient, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  char v1;
  char v2;
  char v3;
  __int128 v4;
  _BYTE v6[16];
  __int128 *v7;
  __int128 v8;
  char v9;
  char v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_BYTE *)(Value + 16);
  v2 = *(_BYTE *)(Value + 17);
  v3 = *(_BYTE *)(Value + 18);
  v4 = *(_OWORD *)Value;
  v26 = 1;
  v25 = 1;
  v24 = 1;
  v8 = v4;
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 1;
  v7 = &v8;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v6, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  uint64_t Value;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  __int128 v5;
  _BYTE v7[16];
  __int128 *v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  char v27;
  char v28;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  Value = AGGraphGetValue();
  v1 = *(_BYTE *)(Value + 16);
  v2 = *(_QWORD *)(Value + 24);
  v3 = *(_BYTE *)(Value + 32);
  v4 = *(_BYTE *)(Value + 33);
  v5 = *(_OWORD *)Value;
  v28 = 1;
  v27 = 1;
  v26 = 1;
  v9 = v5;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 1;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 1;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 1;
  v8 = &v9;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v7, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()((uint64_t)&type metadata for AngularGradient, (void (*)(__int128 *))specialized Paint._apply(to:));
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, AngularGradient>);
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for AngularGradient, (void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for AngularGradient, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ShapeStyleResolver.updateValue()((uint64_t)&type metadata for RadialGradient, (void (*)(__int128 *))specialized Paint._apply(to:));
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, RadialGradient>);
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (void (*)(uint64_t *, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for RadialGradient, (void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for RadialGradient, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ShapeStyleResolver.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, LinearGradient>);
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  ScrollPositionBindingModifier.AdjustedAnchor.value.getter();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  _BYTE v2[56];
  _OWORD v3[6];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  outlined init with copy of _VariadicView_Children(Value, (uint64_t)v2);
  specialized ForEach<>.init(_:content:)((uint64_t)v2, (uint64_t)closure #1 in _VariadicView_Children.Child.value.getter, 0, v3);
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  AGGraphSetOutputValue();
  return outlined destroy of TypesettingConfiguration((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
}

{
  _QWORD *Value;
  uint64_t v1;
  unsigned __int8 v2;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  Value = (_QWORD *)AGGraphGetValue();
  v1 = Value[1];
  *(_QWORD *)&v4[0] = *Value;
  *((_QWORD *)&v4[0] + 1) = v1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>, (uint64_t)&type metadata for PreferredColorSchemeKey, (uint64_t)&protocol witness table for PreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _PreferenceWritingModifier);
  v2 = *(_BYTE *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB503_s7c45UI26_PreferenceWritingModifierVA2A23PreferredeF98KeyVRszrlE0gH3Env33_E52508E85535897B9A366B470195B29DLLV5valueAA17EnvironmentValuesVvgyAA0gH0OXEfU_AD17EnvironmentValuesVTf1cn_n(v2, (uint64_t *)v4);
  v4[1] = v4[0];
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  char *Value;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  _OWORD __dst[11];
  __int128 v15;
  uint64_t v16;
  _OWORD v17[10];
  _OWORD v18[2];
  _OWORD v19[12];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Value = (char *)AGGraphGetValue();
  v1 = *((_OWORD *)Value + 3);
  v3 = *(_OWORD *)Value;
  v2 = *((_OWORD *)Value + 1);
  v17[2] = *((_OWORD *)Value + 2);
  v17[3] = v1;
  v17[0] = v3;
  v17[1] = v2;
  v4 = *((_OWORD *)Value + 7);
  v6 = *((_OWORD *)Value + 4);
  v5 = *((_OWORD *)Value + 5);
  v17[6] = *((_OWORD *)Value + 6);
  v17[7] = v4;
  v17[4] = v6;
  v17[5] = v5;
  v8 = *((_OWORD *)Value + 9);
  v7 = *((_OWORD *)Value + 10);
  v9 = *((_OWORD *)Value + 8);
  *(_DWORD *)((char *)v18 + 15) = *(_DWORD *)(Value + 175);
  v17[9] = v8;
  v18[0] = v7;
  v17[8] = v9;
  v10 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))v10);
  v12 = *(_QWORD *)AGGraphGetValue();
  memmove(__dst, Value, 0xB3uLL);
  *((_QWORD *)&v15 + 1) = v11;
  v16 = v12;
  outlined retain of Image.Resolved((uint64_t)v17);
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  v19[10] = __dst[10];
  v19[11] = v15;
  v20 = v16;
  v19[6] = __dst[6];
  v19[7] = __dst[7];
  v19[8] = __dst[8];
  v19[9] = __dst[9];
  v19[2] = __dst[2];
  v19[3] = __dst[3];
  v19[4] = __dst[4];
  v19[5] = __dst[5];
  v19[0] = __dst[0];
  v19[1] = __dst[1];
  return outlined release of PlatformImageRepresentableContext((uint64_t)v19);
}

{
  uint64_t v1;
  unsigned int v2;
  unsigned __int8 v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  ContentTransitionEffect.Init.value.getter((uint64_t)&v1);
  AGGraphSetOutputValue();
  outlined consume of ContentTransition.Storage(v1, v2 | ((unint64_t)v3 << 32), v4);
  return swift_release();
}

{
  double *Value;

  AGGraphGetValue();
  AGGraphGetValue();
  Value = (double *)AGGraphGetValue();
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(*Value);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;

  Value = AGGraphGetValue();
  vsubq_f64(*(float64x2_t *)(Value + 24), vsubq_f64(*(float64x2_t *)AGGraphGetValue(), *(float64x2_t *)(Value + 8)));
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  unint64_t v1;
  unint64_t v2;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 8);
  v2 = *(_QWORD *)(Value + 16);
  swift_retain();
  ResolvedStyledText.frame(in:)((CGSize)__PAIR128__(v2, v1));
  swift_release();
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  float64x2_t *Value;

  Value = (float64x2_t *)AGGraphGetValue();
  vaddq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
  return AGGraphSetOutputValue();
}

{
  _BYTE v1[16];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  RootGeometry.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  if (!AGGraphGetWeakValue())
    AGGraphGetValue();
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  if (!AGGraphGetWeakValue())
    AGGraphGetValue();
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  if (!AGGraphGetWeakValue())
    AGGraphGetValue();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  if (!AGGraphGetWeakValue())
    AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  if (!AGGraphGetWeakValue())
    AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  if (!AGGraphGetWeakValue())
    AGGraphGetValue();
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t Value;
  __int128 v2;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, (uint64_t)&type metadata for ScrollPhaseState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23527E860;
  Value = AGGraphGetValue();
  v2 = *(_OWORD *)(Value + 8);
  *(_BYTE *)(v0 + 32) = *(_BYTE *)Value;
  *(_OWORD *)(v0 + 40) = v2;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [ScrollPhaseState], (uint64_t)&type metadata for ScrollPhaseState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  const void *Value;
  _BYTE __dst[160];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  Value = (const void *)AGGraphGetValue();
  memmove(__dst, Value, 0xA0uLL);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  return AGGraphSetOutputValue();
}

{
  swift_getKeyPath();
  if ((*(_QWORD *)AGGraphGetValue() & 2) != 0)
    AGGraphGetValue();
  swift_getKeyPath();
  AGGraphGetValue();
  type metadata accessor for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>(0);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

{
  _QWORD v1[4];

  v1[3] = *MEMORY[0x24BDAC8D0];
  _SafeAreaInsetsModifier.Insets.value.getter(v1);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x24BDAC8D0];
  _SafeAreaInsetsModifier.Transform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _BYTE v1[16];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  SecondaryLayerGeometryQuery.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v1;
  unsigned int v2;
  unsigned __int8 v3;
  char v4;

  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  outlined consume of ContentTransition.Storage(v1, v2 | ((unint64_t)v3 << 32), v4);
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v8[0] = *Value;
  v8[1] = v2;
  v3 = *(_QWORD *)AGGraphGetValue();
  if (v3)
  {
    v4 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v4 != -1)
      swift_once();
    if (static Color.foreground != v3 && ((*(uint64_t (**)(void))(*(_QWORD *)v3 + 88))() & 1) == 0)
    {
      swift_retain();
      v5 = v3;
      goto LABEL_9;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  v5 = 0;
LABEL_9:
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v8, v5);
  swift_release();
  swift_release();
  if (v2)
  {
    v6 = v8[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v6);
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v5, 8uLL, 0);
  swift_release();
  if (v2)
  {
    v3 = v5[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v3);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x24BDAC8D0];
  InsetPrimaryTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _QWORD v1[4];

  v1[3] = *MEMORY[0x24BDAC8D0];
  InsetPrimarySafeAreas.value.getter(v1);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];
  _QWORD v7[8];

  v7[7] = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v6[0] = *Value;
  v6[1] = v2;
  v3 = AGGraphGetValue();
  outlined init with take of ResolvedTextSuffix(v3, (uint64_t)v7);
  outlined retain of ResolvedTextSuffix(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ResolvedTextSuffix);
  swift_retain_n();
  outlined retain of ResolvedTextSuffix(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ResolvedTextSuffix);
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v6, (uint64_t)v7);
  swift_release();
  outlined retain of ResolvedTextSuffix(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ResolvedTextSuffix);
  if (v2)
  {
    v4 = v6[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined retain of ResolvedTextSuffix(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ResolvedTextSuffix);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  Value = (uint64_t *)AGGraphGetValue();
  v1 = Value[2];
  if (v1 < 0)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v2 = *Value;
    v3 = Value[1];
    v4 = v1 & 1;
    v5 = Value[3];
    outlined copy of Text.Suffix.Storage(*Value, v3, v1);
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  AGGraphSetOutputValue();
  return outlined consume of Text?(v2, v3, v4, v5);
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v1 = Value[1];
  v11[0] = *Value;
  v11[1] = v1;
  v3 = one-time initialization token for black;
  swift_retain();
  swift_retain();
  if (v3 != -1)
    swift_once();
  v4 = static Color.black;
  v5 = one-time initialization token for foreground;
  swift_retain();
  if (v5 != -1)
    swift_once();
  if (v4 == (void *)static Color.foreground || ((*(uint64_t (**)(void))(*(_QWORD *)v4 + 88))() & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    swift_retain();
    v6 = (uint64_t)v4;
  }
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v11, v6);
  swift_release();
  swift_release();
  if (v1)
  {
    v7 = v11[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v7);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v7 = v11[0];
  }
  v8 = static Color.black;
  swift_retain_n();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v11, (uint64_t)v8);
  swift_release();
  swift_release();
  if (v1)
  {
    v9 = v11[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v9);
    swift_release_n();
  }
  swift_release();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  _QWORD v1[3];

  v1[2] = *MEMORY[0x24BDAC8D0];
  MaskDisplayList.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  __int16 v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v1 = *(_WORD *)(Value + 8);
  v2 = *(_BYTE *)(Value + 10);
  v5 = *(_QWORD *)Value;
  v6 = v1;
  v7 = v2;
  v3 = ++static DisplayList.Version.lastValue;
  if ((v1 & 0x60) != 0)
  {
    swift_bridgeObjectRetain();
    specialized DisplayList.transform(_:)((uint64_t)&v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v8 = v3;
  type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  __int128 *WeakValue;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 __dst;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  WeakValue = (__int128 *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v8 = *WeakValue;
    v1 = WeakValue[1];
    v2 = WeakValue[2];
    v3 = WeakValue[4];
    v11 = WeakValue[3];
    v12 = v3;
    v9 = v1;
    v10 = v2;
    v4 = WeakValue[5];
    v5 = WeakValue[6];
    v6 = WeakValue[8];
    v15 = WeakValue[7];
    v16 = v6;
    v13 = v4;
    v14 = v5;
    memmove(&__dst, WeakValue, 0x90uLL);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v14 = xmmword_2561B4810;
    v15 = xmmword_2561B4820;
    v16 = xmmword_2561B4830;
    v10 = xmmword_2561B47D0;
    v11 = xmmword_2561B47E0;
    v12 = xmmword_2561B47F0;
    v13 = xmmword_2561B4800;
    v8 = static GestureDebug.Data.defaultValue;
    v9 = xmmword_2561B47C0;
    v23 = xmmword_2561B4810;
    v24 = xmmword_2561B4820;
    v25 = xmmword_2561B4830;
    v19 = xmmword_2561B47D0;
    v20 = xmmword_2561B47E0;
    v21 = xmmword_2561B47F0;
    v22 = xmmword_2561B4800;
    __dst = static GestureDebug.Data.defaultValue;
    v18 = xmmword_2561B47C0;
  }
  outlined retain of GestureDebug.Data((uint64_t)&v8);
  AGGraphSetOutputValue();
  v14 = v23;
  v15 = v24;
  v16 = v25;
  v10 = v19;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  v8 = __dst;
  v9 = v18;
  return outlined release of GestureDebug.Data((uint64_t)&v8);
}

{
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  AGGraphGetWeakValue();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  Value = AGGraphGetValue();
  if (*(unsigned __int8 *)(Value + 24) - 1 >= 2
    && !*(_BYTE *)(Value + 24)
    && *(_QWORD *)(Value + 16) == 1)
  {
    outlined consume of GesturePhase<TappableEvent>(*(_QWORD *)Value, *(_QWORD *)(Value + 8), 1, 0);
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RequiredTapCountWriter);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 8);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = _s7SwiftUI22RequiredTapCountWriter33_7C0ADFDC1D38FCDDCFDE5CE8530A0B2ELLV5ChildV5valueyySiSgzcvgyAHzcfU_TA_0;
  *(_QWORD *)(v4 + 24) = v3;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t Value;

  if ((*(_BYTE *)(AGGraphGetValue() + 8) & 1) != 0)
  {
    v0 = 0;
    v1 = 0;
    v2 = 0;
    v3 = 3;
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    Value = AGGraphGetValue();
    v0 = *(_QWORD *)Value;
    v1 = *(_QWORD *)(Value + 8);
    v2 = *(_QWORD *)(Value + 16);
    v3 = *(_BYTE *)(Value + 24);
    outlined copy of GesturePhase<TappableEvent>(*(_QWORD *)Value, v1, v2, v3);
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  AGGraphSetOutputValue();
  return outlined consume of GesturePhase<TappableEvent>(v0, v1, v2, v3);
}

{
  uint64_t Value;
  __int128 v2;
  _OWORD v3[5];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(0);
  Value = AGGraphGetValue();
  outlined init with copy of TypesettingLanguage(Value, (uint64_t)v3, type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  swift_retain();
  swift_getAtKeyPath();
  outlined destroy of TypesettingConfiguration((uint64_t)v3, type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  swift_release();
  v3[0] = v2;
  type metadata accessor for (_:_:)(0, &lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x24BEE50B0]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  specialized CoordinateSpaceEvents.value.getter();
  type metadata accessor for [EventID : EventType]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v11 = *(_QWORD *)(Value + 8);
  v12 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 16);
  v3 = *(_QWORD *)(Value + 24);
  v4 = *(_QWORD *)(Value + 32);
  v5 = *(_QWORD *)(Value + 40);
  v6 = *(_QWORD *)(Value + 48);
  v7 = *(_QWORD *)(Value + 56);
  v8 = *(_QWORD *)(Value + 64);
  v9 = *(_BYTE *)(Value + 72);
  swift_retain();
  outlined copy of GesturePhase<SpatialEvent>(v1, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_getAtKeyPath();
  outlined consume of GesturePhase<SpatialEvent>(v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_release();
  type metadata accessor for ArrayWith2Inline<(String, String)>(0);
  AGGraphSetOutputValue();
  return outlined consume of ArrayWith2Inline<(String, String)>.Storage(v13, v14, v15, v16, v17, v18, v19, v20, v21);
}

{
  _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_0(0, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, &lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>);
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for (_:_:)(0, &lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x24BEE13C8]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_BYTE *)(Value + 24);
  swift_retain();
  outlined copy of GesturePhase<TappableEvent>(v1, v2, v3, v4);
  swift_getAtKeyPath();
  outlined consume of GesturePhase<TappableEvent>(v1, v2, v3, v4);
  swift_release();
  type metadata accessor for ArrayWith2Inline<(String, String)>(0);
  AGGraphSetOutputValue();
  return outlined consume of ArrayWith2Inline<(String, String)>.Storage(v6, v7, v8, v9, v10, v11, v12, v13, v14);
}

{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  AGGraphGetValue();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DependentGesture);
  v0 = *(_BYTE *)AGGraphGetValue();
  AGGraphGetValue();
  specialized GesturePhase.applyingDependency(_:inheritedPhase:)(v0);
  AGGraphSetOutputValue();
  return outlined consume of GesturePhase<TappableEvent>(v2, v3, v4, v5);
}

{
  uint64_t result;

  if (*(uint64_t *)AGGraphGetValue() < 1)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>();
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v11[0] = *Value;
  v11[1] = v2;
  v3 = AGGraphGetValue();
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned __int8 *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  if (*(_BYTE *)(v3 + 26))
    v7 = 0x10000;
  else
    v7 = 0;
  v8 = *(unsigned __int8 *)(v3 + 24) | (*(unsigned __int8 *)(v3 + 25) << 8) | v7;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v11, v4, v5, v6, v8);
  swift_release();
  if (v2)
  {
    v9 = v11[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v9);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v5, 0, 0, 0, 2);
  swift_release();
  if (v2)
  {
    v3 = v5[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v3);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v0 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  if (MEMORY[0x23B7C9E44](v0 + 200))
  {
    v1 = *(_QWORD *)(v0 + 208);
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 48))(&v7, ObjectType, v1);
    swift_unknownObjectRelease();
    v3 = v7;
    v4 = v8;
    v5 = v9;
  }
  else
  {
    swift_release();
    v3 = 0;
    v4 = 0uLL;
    v5 = 0uLL;
  }
  v7 = v3;
  v8 = v4;
  v9 = v5;
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _BYTE v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ResolvedStyledText();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  AGGraphSetOutputValue();
  return outlined destroy of TimelineSchedule?((uint64_t)v1);
}

{
  AGGraphGetValue();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGestureInfo<()>.Value, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGestureInfo.Value);
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for ResolvedStyledText();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  __int16 v1;
  _WORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v0 = *(_QWORD *)AGGraphGetValue();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  specialized LayoutGesture.phase(box:)(v0, v3);
  swift_release();
  v1 = v3[0];
  AGGraphGetValue();
  swift_retain();
  specialized LayoutGestureBox.resetTerminalChildren<A>(gesture:)();
  swift_release();
  swift_release();
  v3[1] = v1;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  return AGGraphSetOutputValue();
}

{
  LayoutChildGeometries.value.getter();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  void (*v0)(_BYTE *__return_ptr, uint64_t);
  uint64_t v1;
  _BYTE v3[4];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v0 = *(void (**)(_BYTE *__return_ptr, uint64_t))(**(_QWORD **)AGGraphGetValue() + 80);
  v1 = swift_retain();
  v0(v3, v1);
  swift_release();
  v3[3] = v3[0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, (uint64_t)&type metadata for Axis, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetWeakValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;

  AGGraphGetValue();
  if (AGGraphGetWeakValue())
  {
    swift_retain();
    v0 = swift_retain();
    PropertyList.merge(_:)(v0);
    swift_release();
  }
  else
  {
    swift_retain();
  }
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t *WeakValue;
  uint64_t v2;

  v0 = *(_QWORD *)AGGraphGetValue();
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v2 = *WeakValue;
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    PropertyList.merge(_:)(v2);
    swift_release();
    if (v0)
      swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  _QWORD v1[2];

  v1[1] = *MEMORY[0x24BDAC8D0];
  MergePreferenceKeys.value.getter(v1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  _QWORD v1[2];

  v1[1] = *MEMORY[0x24BDAC8D0];
  HostPreferencesCombiner.value.getter(v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  Value = AGGraphGetValue();
  v2 = *(_OWORD *)(Value + 16);
  v1 = *(_OWORD *)(Value + 32);
  v3 = *(_OWORD *)Value;
  v6 = *(_QWORD *)(Value + 48);
  v5[1] = v2;
  v5[2] = v1;
  v5[0] = v3;
  swift_retain();
  outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v5);
  specialized ForEachState.update(view:)((int64_t *)v5);
  outlined release of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v5);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  ScrollPositionBindingModifier.MakeRequest.updateValue()();
}

{
  specialized DynamicViewContainer.updateValue()();
}

{
  SizeFittingTextLayoutComputer.updateValue()();
}

{
  SizeFittingTextFilter.updateValue()();
}

{
  StyledTextResponderFilter.updateValue()();
}

{
  AppearanceEffect.updateValue()();
}

{
  specialized AnimatableAttribute.updateValue()();
}

{
  _ShaderFilterEffect.ResolvedEffect.updateValue()();
}

{
  ResolvedOptionalTextFilter.updateValue()();
}

{
  AnimatableFrameAttribute.updateValue()();
}

{
  AnimatableFrameAttributeVFD.updateValue()();
}

{
  OpacityResponderFilter.updateValue()();
}

{
  specialized AnyGestureInfo.updateValue()();
}

{
  ScrollStateRequestTransform.updateValue()();
}

{
  specialized AnimatableAttribute.updateValue()();
}

{
  specialized AnimatableAttribute.updateValue()();
}

{
  specialized DynamicBody.updateValue()();
}

{
  id v0[2];

  v0[1] = *(id *)MEMORY[0x24BDAC8D0];
  Text.MakeRepresentableContext.value.getter(v0);
  AGGraphSetOutputValue();

}

unsigned int *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>();
    v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))AGGraphGetValue();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    Value = AGGraphGetValue();
    v4 = *(_QWORD *)(Value + 8);
    v5 = *(_QWORD *)(Value + 16);
    v6 = *(_QWORD *)(Value + 24);
    v7 = *(_QWORD *)(Value + 32);
    v8 = *(_QWORD *)(Value + 40);
    v11 = *(_QWORD *)(Value + 56);
    v12 = *(_QWORD *)(Value + 48);
    v9 = *(_QWORD *)(Value + 64);
    v10 = *(_BYTE *)(Value + 72);
    v15 = *(_QWORD *)Value;
    v16 = v4;
    v13 = v15;
    v17 = v5;
    v18 = v6;
    v19 = v7;
    v20 = v8;
    v21 = v12;
    v22 = v11;
    v23 = v9;
    v24 = v10;
    swift_retain();
    outlined copy of GesturePhase<SpatialEvent>(v15, v4, v5, v6, v7, v8, v12, v11, v9, v10);
    v14(&v25, a1 + 16, &v15);
    swift_release();
    outlined consume of GesturePhase<SpatialEvent>(v13, v4, v5, v6, v7, v8, v12, v11, v9, v10);
    v15 = v25;
    LOWORD(v16) = v26;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t Value;
  void (*v3)(_QWORD *);
  _QWORD v5[6];

  v5[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v5);
  v3 = *(void (**)(_QWORD *))(*(_QWORD *)v1 + 80);
  swift_retain();
  v3(v5);
  swift_release();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

{
  uint64_t v1;
  uint64_t Value;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  Value = AGGraphGetValue();
  outlined init with copy of TypesettingLanguage(Value, (uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  swift_retain();
  specialized ForEachState.update(view:)((uint64_t)&v5);
  outlined destroy of TypesettingConfiguration((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  v3 = *(_DWORD *)(v1 + 296);
  v5 = v1;
  v6 = v3;
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _BYTE v2[80];
  uint64_t v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  outlined init with copy of BaseViewList.Init(a1, (uint64_t)v2);
  BaseViewList.Init.value.getter(v3);
  outlined destroy of BaseViewList.Init((uint64_t)v2);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

{
  TextLayoutQuery.value.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Text.LayoutKey.AnchoredLayout], (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  _BYTE v3[48];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  AutomaticPaddingViewModifier.PaddingLayout.value.getter(*(_DWORD *)(a1 + 8), (uint64_t)v3);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
  AGGraphSetOutputValue();
  v1 = v4;
  swift_bridgeObjectRelease();
  return outlined consume of Transaction?(v1);
}

{
  __int128 v1;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];
  _OWORD v8[2];
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v1 = *(_OWORD *)(a1 + 24);
  v7[0] = *(_OWORD *)(a1 + 8);
  v7[1] = v1;
  v8[0] = *(_OWORD *)(a1 + 40);
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(a1 + 49);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v9[0] = *Value;
  v9[1] = v4;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v9, v7);
  swift_release();
  if (v4)
  {
    v5 = v9[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t Value;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _BYTE v17[40];
  _QWORD v18[5];
  _QWORD v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(double *)(Value + 8);
  v5 = *(double *)(Value + 16);
  v6 = *(double *)(Value + 24);
  v7 = *(double *)(Value + 32);
  v8 = AGGraphGetValue();
  v9 = *(double *)v8;
  v10 = *(double *)(v8 + 8);
  v11 = v6 - (*(double *)v8 - v4);
  v18[0] = v1;
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  swift_retain();
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable((uint64_t)v19, (uint64_t)v18);
  outlined init with copy of CoordinateSpaceElement((uint64_t)v18, (uint64_t)v17);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Element<CoordinateSpaceElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type CoordinateSpaceElement and conformance CoordinateSpaceElement, (uint64_t)&type metadata for CoordinateSpaceElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  v12 = swift_allocObject();
  *(double *)(v12 + 32) = v11;
  *(double *)(v12 + 40) = v7 - (v10 - v5);
  outlined init with copy of CoordinateSpaceElement((uint64_t)v17, v12 + 48);
  *(_QWORD *)(v12 + 16) = v3;
  if (v3)
  {
    v13 = *(_QWORD *)(v3 + 24);
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (!v14)
      goto LABEL_6;
    __break(1u);
  }
  v15 = 1;
LABEL_6:
  *(_QWORD *)(v12 + 24) = v15;
  swift_retain();
  outlined destroy of CoordinateSpaceElement((uint64_t)v17);
  swift_release();
  outlined destroy of CoordinateSpaceElement((uint64_t)v18);
  outlined destroy of AnyHashable((uint64_t)v19);
  v19[0] = v12;
  *(double *)&v19[1] = v9;
  *(double *)&v19[2] = v10;
  v19[3] = 0;
  v19[4] = 0;
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _OWORD v2[4];
  _OWORD v3[4];
  _OWORD v4[8];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  InsetViewLayout.childGeometry()((uint64_t)v2, (uint64_t)v3, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (ViewGeometry, ViewGeometry));
  AGGraphSetOutputValue();
  v4[4] = v3[0];
  v4[5] = v3[1];
  v4[6] = v3[2];
  v4[7] = v3[3];
  v4[0] = v2[0];
  v4[1] = v2[1];
  v4[2] = v2[2];
  v4[3] = v2[3];
  return outlined release of (ViewGeometry, ViewGeometry)((uint64_t)v4);
}

{
  int v1;

  v1 = *(_DWORD *)(a1 + 4);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CategoryGesture);
  if (*(_BYTE *)(AGGraphGetValue() + 8) == 1 && v1 != *MEMORY[0x24BE096C0])
    AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4[6];

  v4[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned __int8 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32);
  v2 = swift_bridgeObjectRetain();
  MakeSection.value.getter(v2, v1, v4);
  swift_bridgeObjectRelease();
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

{
  _OWORD v2[9];
  _OWORD v3[9];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  specialized LayoutDebug.value.getter(*(_QWORD *)(a1 + 8), (uint64_t)v2);
  AGGraphSetOutputValue();
  v3[6] = v2[6];
  v3[7] = v2[7];
  v3[8] = v2[8];
  v3[2] = v2[2];
  v3[3] = v2[3];
  v3[4] = v2[4];
  v3[5] = v2[5];
  v3[0] = v2[0];
  v3[1] = v2[1];
  return outlined release of GestureDebug.Data((uint64_t)v3);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  swift_retain();
  specialized UpdateLayoutGestureBox.value.getter(v1, v2, v3);
  swift_release();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  DynamicViewPhase.value.getter(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), &v2);
  return AGGraphSetOutputValue();
}

{
  unint64_t v1;
  uint64_t Value;

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  Value = AGGraphGetValue();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v1 >= *(_QWORD *)(*(_QWORD *)Value + 16))
    goto LABEL_5;
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

BOOL specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return specialized DurationPhase.updateValue()();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, _BYTE *, uint64_t, _QWORD *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, _BYTE *, uint64_t, _QWORD *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, _BYTE *, uint64_t, _QWORD *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, _BYTE *, uint64_t, _QWORD *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, specialized ForEachState.evictItems(seed:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, unint64_t))specialized GeometryEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized GeometryEffectTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, unint64_t))specialized GeometryEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized GeometryEffectTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, unint64_t))specialized GeometryEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized GeometryEffectTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x24BEE50B0]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x24BEE13C8]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr))DepthTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr))SectionHeaderTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Rectangle._Inset, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Ellipse._Inset, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Capsule._Inset, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Circle._Inset, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for ContainerRelativeShape._Inset, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, specialized ForEachState.evictItems(seed:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _BYTE *, uint64_t, _QWORD *))
{
  _BYTE *Value;
  char v10;
  _QWORD v12[4];
  _BYTE v13[16];
  _BYTE *v14;
  _BYTE v15[8];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;
  char v29;
  char v30;

  a3(0);
  Value = (_BYTE *)AGGraphGetValue();
  v10 = Value[1];
  v15[0] = *Value;
  v30 = 1;
  v29 = 1;
  v28 = 1;
  v15[1] = v10;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 1;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 1;
  v14 = v15;
  v12[2] = v15;
  return a6(a4, v13, a5, v12);
}

unsigned __int8 *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return specialized ValueTransactionSeed.updateValue()();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int result;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  char *v13;
  char *v14;
  Swift::Int v15;
  Swift::Int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  double v34;
  BOOL v35;
  Swift::Int v36;
  Swift::Int v37;
  int v38;
  Swift::Int v39;
  unsigned int *v40;
  unint64_t v41;
  Swift::Int v42;
  Swift::Int v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  unsigned int v52;
  Swift::Int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  Swift::Int v129;
  Swift::Int v130;
  Swift::Int v131;
  Swift::Int v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  v5 = *(_QWORD *)(a1 + 8);
  result = _minimumMergeRunLength(_:)(v5);
  v130 = v5;
  if (result >= v5)
  {
    if (v5 < 0)
      goto LABEL_183;
    if ((unint64_t)v5 <= 1)
      return result;
    v109 = 0;
    v14 = *(char **)a1;
    v110 = 1;
LABEL_127:
    result = *(unsigned int *)&v14[4 * v110];
    v111 = v109;
    while (1)
    {
      v56 = (unint64_t)&v14[4 * v111];
      v112 = *(unsigned int *)v56;
      v113 = *(_QWORD *)(a2 + 144);
      if ((v113 & 0xC000000000000001) != 0)
      {
        v114 = MEMORY[0x23B7C6D9C](result);
      }
      else
      {
        if (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)result)
        {
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          v11 = v128;
LABEL_141:
          v128 = v11;
          if (v56 >= 2)
          {
            v119 = *v126;
            do
            {
              v120 = v56 - 2;
              if (v56 < 2)
                goto LABEL_175;
              if (!v119)
                goto LABEL_191;
              v121 = *(_QWORD *)&v14[16 * v120 + 32];
              v122 = *(_QWORD *)&v14[16 * v56 + 24];
              specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v119 + 4 * v121), (char *)(v119 + 4 * *(_QWORD *)&v14[16 * v56 + 16]), v119 + 4 * v122, v133, a2);
              if (v134)
                break;
              if (v122 < v121)
                goto LABEL_176;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
              if (v120 >= *((_QWORD *)v14 + 2))
                goto LABEL_177;
              v123 = &v14[16 * v120 + 32];
              *(_QWORD *)v123 = v121;
              *((_QWORD *)v123 + 1) = v122;
              v124 = *((_QWORD *)v14 + 2);
              if (v56 > v124)
                goto LABEL_178;
              memmove(&v14[16 * v56 + 16], &v14[16 * v56 + 32], 16 * (v124 - v56));
              *((_QWORD *)v14 + 2) = v124 - 1;
              v56 = v124 - 1;
            }
            while (v124 > 2);
          }
LABEL_152:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v128 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        v114 = swift_retain();
      }
      v115 = *(double *)(v114 + 64);
      swift_release();
      v116 = *(_QWORD *)(a2 + 144);
      if ((v116 & 0xC000000000000001) != 0)
      {
        v117 = MEMORY[0x23B7C6D9C](v112);
      }
      else
      {
        if (*(_QWORD *)((v116 & 0xFFFFFFFFFFFFF8) + 0x10) <= v112)
          goto LABEL_154;
        v117 = swift_retain();
      }
      v118 = *(double *)(v117 + 64);
      result = swift_release();
      if (v115 < v118)
      {
        if (!v14)
          goto LABEL_187;
        result = *(unsigned int *)(v56 + 4);
        *(_DWORD *)(v56 + 4) = *(_DWORD *)&v14[4 * v111];
        *(_DWORD *)&v14[4 * v111--] = result;
        if (v111 != -1)
          continue;
      }
      ++v110;
      ++v109;
      if (v110 == v130)
        return result;
      goto LABEL_127;
    }
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_192;
  v8 = result;
  v134 = v2;
  v126 = (uint64_t *)a1;
  if (v5 < 2)
  {
    v11 = MEMORY[0x24BEE4AF8];
    v133 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v5 != 1)
    {
      v56 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v14 = (char *)MEMORY[0x24BEE4AF8];
      goto LABEL_141;
    }
    v128 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v9 = v7 >> 1;
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v10 + 16) = v9;
    v128 = v10;
    v133 = (char *)(v10 + 32);
  }
  v12 = 0;
  v13 = *(char **)a1;
  v127 = *(_QWORD *)a1 + 8;
  v125 = *(_QWORD *)a1 - 4;
  v14 = (char *)MEMORY[0x24BEE4AF8];
  v129 = v8;
  v135 = a2;
  while (1)
  {
    v15 = v12;
    v16 = v12 + 1;
    if (v12 + 1 >= v5)
      goto LABEL_46;
    v17 = *(unsigned int *)&v13[4 * v16];
    v18 = *(unsigned int *)&v13[4 * v12];
    v19 = *(_QWORD *)(a2 + 144);
    if ((v19 & 0xC000000000000001) != 0)
    {
      v20 = MEMORY[0x23B7C6D9C](v17);
    }
    else
    {
      if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) <= v17)
        goto LABEL_180;
      v20 = swift_retain();
    }
    v21 = *(double *)(v20 + 64);
    swift_release();
    v22 = *(_QWORD *)(a2 + 144);
    if ((v22 & 0xC000000000000001) != 0)
    {
      v23 = MEMORY[0x23B7C6D9C](v18);
    }
    else
    {
      if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10) <= v18)
        goto LABEL_181;
      v23 = swift_retain();
    }
    v24 = *(double *)(v23 + 64);
    swift_release();
    v16 = v15 + 2;
    if (v15 + 2 < v5)
      break;
LABEL_36:
    if (v21 < v24)
      goto LABEL_37;
LABEL_46:
    if (v16 < v5)
    {
      if (__OFSUB__(v16, v15))
        goto LABEL_182;
      if (v16 - v15 < v8)
      {
        if (__OFADD__(v15, v8))
          goto LABEL_184;
        if (v15 + v8 >= v5)
          v39 = v5;
        else
          v39 = v15 + v8;
        if (v39 < v15)
        {
LABEL_185:
          __break(1u);
          goto LABEL_186;
        }
        if (v16 != v39)
        {
          v40 = (unsigned int *)(v125 + 4 * v16);
          v131 = v39;
          do
          {
            v41 = *(unsigned int *)&v13[4 * v16];
            v42 = v15;
            v43 = v15;
            v44 = v40;
            do
            {
              v45 = *v44;
              v46 = *(_QWORD *)(a2 + 144);
              if ((v46 & 0xC000000000000001) != 0)
              {
                v47 = MEMORY[0x23B7C6D9C](v41);
              }
              else
              {
                if (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10) <= v41)
                {
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
LABEL_163:
                  __break(1u);
LABEL_164:
                  __break(1u);
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
                  goto LABEL_185;
                }
                v47 = swift_retain();
              }
              v48 = *(double *)(v47 + 64);
              swift_release();
              v49 = *(_QWORD *)(a2 + 144);
              if ((v49 & 0xC000000000000001) != 0)
              {
                v50 = MEMORY[0x23B7C6D9C](v45);
              }
              else
              {
                if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) <= v45)
                  goto LABEL_157;
                v50 = swift_retain();
              }
              v51 = *(double *)(v50 + 64);
              swift_release();
              if (v48 >= v51)
                break;
              if (!v13)
                goto LABEL_188;
              v52 = *v44;
              v41 = v44[1];
              *v44 = v41;
              v44[1] = v52;
              --v44;
              ++v43;
            }
            while (v16 != v43);
            ++v16;
            ++v40;
            v15 = v42;
          }
          while (v16 != v131);
          v16 = v131;
        }
      }
    }
    if (v16 < v15)
      goto LABEL_179;
    v53 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v55 = *((_QWORD *)v14 + 2);
    v54 = *((_QWORD *)v14 + 3);
    v56 = v55 + 1;
    if (v55 >= v54 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v56;
    v57 = v14 + 32;
    v58 = &v14[16 * v55 + 32];
    *(_QWORD *)v58 = v15;
    *((_QWORD *)v58 + 1) = v53;
    if (v55)
    {
      v12 = v53;
      a2 = v135;
      v132 = v12;
      while (1)
      {
        v59 = v56 - 1;
        if (v56 >= 4)
        {
          v64 = &v57[16 * v56];
          v65 = *((_QWORD *)v64 - 8);
          v66 = *((_QWORD *)v64 - 7);
          v70 = __OFSUB__(v66, v65);
          v67 = v66 - v65;
          if (v70)
            goto LABEL_164;
          v69 = *((_QWORD *)v64 - 6);
          v68 = *((_QWORD *)v64 - 5);
          v70 = __OFSUB__(v68, v69);
          v62 = v68 - v69;
          v63 = v70;
          if (v70)
            goto LABEL_165;
          v71 = v56 - 2;
          v72 = &v57[16 * v56 - 32];
          v74 = *(_QWORD *)v72;
          v73 = *((_QWORD *)v72 + 1);
          v70 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          if (v70)
            goto LABEL_167;
          v70 = __OFADD__(v62, v75);
          v76 = v62 + v75;
          if (v70)
            goto LABEL_170;
          if (v76 >= v67)
          {
            v94 = &v57[16 * v59];
            v96 = *(_QWORD *)v94;
            v95 = *((_QWORD *)v94 + 1);
            v70 = __OFSUB__(v95, v96);
            v97 = v95 - v96;
            if (v70)
              goto LABEL_174;
            v87 = v62 < v97;
            goto LABEL_109;
          }
        }
        else
        {
          if (v56 != 3)
          {
            v88 = *((_QWORD *)v14 + 4);
            v89 = *((_QWORD *)v14 + 5);
            v70 = __OFSUB__(v89, v88);
            v81 = v89 - v88;
            v82 = v70;
            goto LABEL_103;
          }
          v61 = *((_QWORD *)v14 + 4);
          v60 = *((_QWORD *)v14 + 5);
          v70 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          v63 = v70;
        }
        if ((v63 & 1) != 0)
          goto LABEL_166;
        v71 = v56 - 2;
        v77 = &v57[16 * v56 - 32];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v80 = __OFSUB__(v78, v79);
        v81 = v78 - v79;
        v82 = v80;
        if (v80)
          goto LABEL_169;
        v83 = &v57[16 * v59];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v70 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v70)
          goto LABEL_172;
        if (__OFADD__(v81, v86))
          goto LABEL_173;
        if (v81 + v86 >= v62)
        {
          v87 = v62 < v86;
LABEL_109:
          if (v87)
            v59 = v71;
          goto LABEL_111;
        }
LABEL_103:
        if ((v82 & 1) != 0)
          goto LABEL_168;
        v90 = &v57[16 * v59];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v70 = __OFSUB__(v91, v92);
        v93 = v91 - v92;
        if (v70)
          goto LABEL_171;
        if (v93 < v81)
          goto LABEL_120;
LABEL_111:
        v98 = v59 - 1;
        if (v59 - 1 >= v56)
          goto LABEL_158;
        if (!v13)
          goto LABEL_189;
        v99 = v14;
        v100 = v13;
        v101 = &v57[16 * v98];
        v102 = *(_QWORD *)v101;
        v103 = v57;
        v104 = v59;
        v105 = &v57[16 * v59];
        v106 = *((_QWORD *)v105 + 1);
        v107 = v100;
        specialized _merge<A>(low:mid:high:buffer:by:)(&v100[4 * *(_QWORD *)v101], &v100[4 * *(_QWORD *)v105], (unint64_t)&v100[4 * v106], v133, v135);
        if (v2)
          goto LABEL_152;
        if (v106 < v102)
          goto LABEL_159;
        if (v104 > *((_QWORD *)v99 + 2))
          goto LABEL_160;
        *(_QWORD *)v101 = v102;
        *(_QWORD *)&v103[16 * v98 + 8] = v106;
        v108 = *((_QWORD *)v99 + 2);
        if (v104 >= v108)
          goto LABEL_161;
        v14 = v99;
        v56 = v108 - 1;
        memmove(v105, v105 + 16, 16 * (v108 - 1 - v104));
        v57 = v103;
        *((_QWORD *)v99 + 2) = v108 - 1;
        v13 = v107;
        v12 = v132;
        a2 = v135;
        if (v108 <= 2)
          goto LABEL_120;
      }
    }
    v56 = 1;
    v12 = v53;
    a2 = v135;
LABEL_120:
    v8 = v129;
    v5 = v130;
    if (v12 >= v130)
      goto LABEL_155;
  }
  v25 = (unsigned int *)(v127 + 4 * v15);
  do
  {
    v27 = *(v25 - 1);
    v26 = *v25;
    v28 = *(_QWORD *)(a2 + 144);
    if ((v28 & 0xC000000000000001) != 0)
    {
      v29 = MEMORY[0x23B7C6D9C](v26);
    }
    else
    {
      if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10) <= v26)
        goto LABEL_162;
      v29 = swift_retain();
    }
    v30 = *(double *)(v29 + 64);
    swift_release();
    v31 = *(_QWORD *)(a2 + 144);
    if ((v31 & 0xC000000000000001) != 0)
    {
      v32 = v16;
      v33 = MEMORY[0x23B7C6D9C](v27);
    }
    else
    {
      if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10) <= v27)
        goto LABEL_163;
      v32 = v16;
      v33 = swift_retain();
    }
    v34 = *(double *)(v33 + 64);
    swift_release();
    if (v21 < v24 == v30 >= v34)
    {
      v16 = v32;
      a2 = v135;
      goto LABEL_36;
    }
    ++v25;
    v16 = v32 + 1;
    v35 = v5 == v32 + 1;
    a2 = v135;
  }
  while (!v35);
  v16 = v5;
  if (v21 >= v24)
    goto LABEL_46;
LABEL_37:
  if (v16 >= v15)
  {
    if (v15 < v16)
    {
      v36 = v16 - 1;
      v37 = v15;
      while (1)
      {
        if (v37 != v36)
        {
          if (!v13)
            goto LABEL_190;
          v38 = *(_DWORD *)&v13[4 * v37];
          *(_DWORD *)&v13[4 * v37] = *(_DWORD *)&v13[4 * v36];
          *(_DWORD *)&v13[4 * v36] = v38;
        }
        v87 = ++v37 < v36--;
        if (!v87)
          goto LABEL_46;
      }
    }
    goto LABEL_46;
  }
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  char *v6;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  double v38;
  uint64_t result;
  char *v40;
  char *v41;
  char *v42;

  v6 = __dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 3;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 2;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 3;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 2;
  v42 = __src;
  v41 = __dst;
  if (v12 < v14 >> 2)
  {
    if (v10 < -3)
      goto LABEL_65;
    if (__dst != __src || &__src[4 * v12] <= __dst)
      memmove(__dst, __src, 4 * v12);
    v16 = &v6[4 * v12];
    v40 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 4)
    {
      do
      {
        v17 = *(unsigned int *)v8;
        v18 = *(unsigned int *)v6;
        v19 = *(_QWORD *)(a5 + 144);
        if ((v19 & 0xC000000000000001) != 0)
        {
          v20 = MEMORY[0x23B7C6D9C](v17);
        }
        else
        {
          if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) <= v17)
            goto LABEL_63;
          v20 = swift_retain();
        }
        v21 = *(double *)(v20 + 64);
        swift_release();
        v22 = *(_QWORD *)(a5 + 144);
        if ((v22 & 0xC000000000000001) != 0)
        {
          v23 = MEMORY[0x23B7C6D9C](v18);
        }
        else
        {
          if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10) <= v18)
            goto LABEL_64;
          v23 = swift_retain();
        }
        v24 = *(double *)(v23 + 64);
        swift_release();
        if (v21 >= v24)
        {
          if (v9 != v6)
            *(_DWORD *)v9 = *(_DWORD *)v6;
          v6 += 4;
          v41 = v6;
          v25 = v8;
        }
        else
        {
          v25 = v8 + 4;
          if (v9 < v8 || v9 >= v25 || v9 != v8)
            *(_DWORD *)v9 = *(_DWORD *)v8;
        }
        v9 += 4;
        if (v6 >= v16)
          break;
        v8 = v25;
      }
      while ((unint64_t)v25 < a3);
      v42 = v9;
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v42, (const void **)&v41, &v40);
    return 1;
  }
  if (v13 < -3)
    goto LABEL_65;
  if (__dst != a2 || &a2[4 * v15] <= __dst)
    memmove(__dst, a2, 4 * v15);
  v26 = &v6[4 * v15];
  v40 = v26;
  v42 = v8;
  if (v9 >= v8 || v13 < 4)
    goto LABEL_60;
  v27 = (char *)(a3 - 4);
  v28 = v8;
  while (1)
  {
    v29 = *((unsigned int *)v26 - 1);
    v31 = *((_DWORD *)v28 - 1);
    v28 -= 4;
    v30 = v31;
    v32 = *(_QWORD *)(a5 + 144);
    if ((v32 & 0xC000000000000001) == 0)
      break;
    v33 = MEMORY[0x23B7C6D9C](v29);
LABEL_41:
    v34 = *(double *)(v33 + 64);
    swift_release();
    v35 = *(_QWORD *)(a5 + 144);
    if ((v35 & 0xC000000000000001) != 0)
    {
      v36 = MEMORY[0x23B7C6D9C](v30);
    }
    else
    {
      if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10) <= v30)
        goto LABEL_62;
      v36 = swift_retain();
    }
    v37 = v27 + 4;
    v38 = *(double *)(v36 + 64);
    swift_release();
    if (v34 >= v38)
    {
      v40 = v26 - 4;
      if (v37 < v26 || v27 >= v26 || v37 != v26)
        *(_DWORD *)v27 = *((_DWORD *)v26 - 1);
      v28 = v8;
      v26 -= 4;
      if (v8 <= v9)
        goto LABEL_60;
    }
    else
    {
      if (v37 != v8 || v27 >= v8)
        *(_DWORD *)v27 = *(_DWORD *)v28;
      v42 = v28;
      if (v28 <= v9)
        goto LABEL_60;
    }
    v27 -= 4;
    v8 = v28;
    if (v26 <= v6)
      goto LABEL_60;
  }
  if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10) > v29)
  {
    v33 = swift_retain();
    goto LABEL_41;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v6;
  unint64_t *v8;
  unint64_t *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  double v33;
  double v34;
  BOOL v35;
  uint64_t result;
  unint64_t *v37;
  unint64_t *v38;
  char *v39;

  v6 = (unint64_t *)__dst;
  v8 = (unint64_t *)a2;
  v9 = (unint64_t *)__src;
  v10 = a2 - __src;
  v11 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 3;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 3;
  v39 = __src;
  v38 = (unint64_t *)__dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst)
        memmove(__dst, a2, 8 * v15);
      v25 = &v6[v15];
      v37 = v25;
      v39 = (char *)v8;
      if (v9 < v8 && v13 >= 8)
      {
        v26 = a5 + 32;
        v27 = *(_QWORD *)(a5 + 16);
        v28 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v29 = *(v25 - 1);
          if (v29 >= v27)
            break;
          v30 = v8 - 1;
          v31 = *(v8 - 1);
          if (v31 >= v27)
            goto LABEL_60;
          v32 = v28 + 1;
          v33 = *(double *)(v26 + 32 * v29);
          v34 = *(double *)(v26 + 32 * v31);
          if (v33 >= v34 && (v33 == v34 ? (v35 = v29 >= v31) : (v35 = 1), v35))
          {
            v37 = v25 - 1;
            if (v32 < v25 || v28 >= v25 || v32 != v25)
              *v28 = *(v25 - 1);
            --v25;
            if (v8 <= v9)
              goto LABEL_58;
          }
          else
          {
            if (v32 != v8 || v28 >= v8)
              *v28 = v31;
            v39 = (char *)--v8;
            if (v30 <= v9)
              goto LABEL_58;
          }
          --v28;
          if (v25 <= v6)
            goto LABEL_58;
        }
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
LABEL_58:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
      return 1;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst)
      memmove(__dst, __src, 8 * v12);
    v16 = &v6[v12];
    v37 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      v17 = a5 + 32;
      v18 = *(_QWORD *)(a5 + 16);
      while (1)
      {
        v19 = *v8;
        if (*v8 >= v18)
          break;
        v20 = *v6;
        if (*v6 >= v18)
          goto LABEL_62;
        v21 = *(double *)(v17 + 32 * v19);
        v22 = *(double *)(v17 + 32 * v20);
        if (v21 >= v22 && (v21 == v22 ? (v23 = v19 >= v20) : (v23 = 1), v23))
        {
          if (v9 != v6)
            *v9 = v20;
          v38 = ++v6;
          v24 = v8;
        }
        else
        {
          v24 = v8 + 1;
          if (v9 < v8 || v9 >= v24 || v9 != v8)
            *v9 = v19;
        }
        ++v9;
        if (v6 < v16)
        {
          v8 = v24;
          if ((unint64_t)v24 < a3)
            continue;
        }
        v39 = (char *)v9;
        goto LABEL_58;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    goto LABEL_58;
  }
LABEL_63:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v6;
  unint64_t *v8;
  unint64_t *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  double v33;
  double v34;
  BOOL v35;
  uint64_t result;
  unint64_t *v37;
  unint64_t *v38;
  char *v39;

  v6 = (unint64_t *)__dst;
  v8 = (unint64_t *)a2;
  v9 = (unint64_t *)__src;
  v10 = a2 - __src;
  v11 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 3;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 3;
  v39 = __src;
  v38 = (unint64_t *)__dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst)
        memmove(__dst, a2, 8 * v15);
      v25 = &v6[v15];
      v37 = v25;
      v39 = (char *)v8;
      if (v9 < v8 && v13 >= 8)
      {
        v26 = a5 + 32;
        v27 = *(_QWORD *)(a5 + 16);
        v28 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v29 = *(v25 - 1);
          if (v29 >= v27)
            break;
          v30 = v8 - 1;
          v31 = *(v8 - 1);
          if (v31 >= v27)
            goto LABEL_60;
          v32 = v28 + 1;
          v33 = *(double *)(v26 + 8 * v29);
          v34 = *(double *)(v26 + 8 * v31);
          if (v33 >= v34 && (v33 == v34 ? (v35 = v29 >= v31) : (v35 = 1), v35))
          {
            v37 = v25 - 1;
            if (v32 < v25 || v28 >= v25 || v32 != v25)
              *v28 = *(v25 - 1);
            --v25;
            if (v8 <= v9)
              goto LABEL_58;
          }
          else
          {
            if (v32 != v8 || v28 >= v8)
              *v28 = v31;
            v39 = (char *)--v8;
            if (v30 <= v9)
              goto LABEL_58;
          }
          --v28;
          if (v25 <= v6)
            goto LABEL_58;
        }
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
LABEL_58:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
      return 1;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst)
      memmove(__dst, __src, 8 * v12);
    v16 = &v6[v12];
    v37 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      v17 = a5 + 32;
      v18 = *(_QWORD *)(a5 + 16);
      while (1)
      {
        v19 = *v8;
        if (*v8 >= v18)
          break;
        v20 = *v6;
        if (*v6 >= v18)
          goto LABEL_62;
        v21 = *(double *)(v17 + 8 * v19);
        v22 = *(double *)(v17 + 8 * v20);
        if (v21 >= v22 && (v21 == v22 ? (v23 = v19 >= v20) : (v23 = 1), v23))
        {
          if (v9 != v6)
            *v9 = v20;
          v38 = ++v6;
          v24 = v8;
        }
        else
        {
          v24 = v8 + 1;
          if (v9 < v8 || v9 >= v24 || v9 != v8)
            *v9 = v19;
        }
        ++v9;
        if (v6 < v16)
        {
          v8 = v24;
          if ((unint64_t)v24 < a3)
            continue;
        }
        v39 = (char *)v9;
        goto LABEL_58;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    goto LABEL_58;
  }
LABEL_63:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  BOOL v11;

  result = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  if (*((_BYTE *)a2 + 9) == 3
    && ((v9 = *((unsigned __int8 *)a2 + 8), v10 = *a2, !v9) ? (v11 = v10 == 0) : (v11 = 0), v11))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 3;
  }
  else
  {
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v7;
    *(_BYTE *)(a3 + 24) = v8;
    return outlined copy of GesturePhase<TappableEvent>(result, v6, v7, v8);
  }
  return result;
}

uint64_t specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()();
  if (!v1)
    *a1 = result & 1;
  return result;
}

BOOL specialized static Image.LayoutMetrics.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  _BOOL8 result;
  double v4;
  _BOOL4 v5;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0]&& a1[2].f64[1] == a2[2].f64[1])
  {
    v4 = a1[3].f64[1];
    v5 = a1[3].f64[0] == a2[3].f64[0];
    return v4 == a2[3].f64[1] && v5;
  }
  return result;
}

uint64_t outlined copy of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined copy of AccessibilityImageLabel(a1, a2, a3);
  return a1;
}

uint64_t outlined copy of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined consume of AccessibilityImageLabel(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_234B06A0C()
{
  return swift_deallocObject();
}

id outlined copy of Image.Location(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

void outlined consume of Image.Location(id a1)
{
  if ((unint64_t)a1 >= 2)

}

BOOL specialized static Image.Resolved.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  BOOL v36;
  BOOL v38;
  char v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  uint64_t v45;
  int v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  char v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  char v72;
  __int128 v73;
  __int128 v74;
  char v75;
  char v76;
  __int16 v77;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 60);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_BYTE *)(a1 + 97);
  v8 = *(_WORD *)(a1 + 98);
  v10 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 128);
  v52 = *(_QWORD *)(a1 + 144);
  v53 = *(_QWORD *)(a1 + 136);
  v51 = *(unsigned __int8 *)(a1 + 152);
  v49 = *(unsigned __int8 *)(a1 + 153);
  v13 = *(float *)(a1 + 156);
  v47 = *(_BYTE *)(a1 + 160);
  v45 = *(_QWORD *)(a1 + 168);
  v43 = *(_BYTE *)(a1 + 178);
  v44 = *(_WORD *)(a1 + 176);
  v14 = *(_QWORD *)a2;
  v15 = *(_BYTE *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 32);
  v66 = *(_QWORD *)a1;
  v17 = *(_BYTE *)(a2 + 40);
  LOBYTE(v67) = v2;
  v18 = *(_BYTE *)(a2 + 60);
  v70 = v4;
  v19 = *(_BYTE *)(a2 + 96);
  v72 = v5;
  v20 = *(_BYTE *)(a2 + 97);
  v21 = *(_OWORD *)(a1 + 16);
  v71 = *(_OWORD *)(a1 + 44);
  v22 = *(_OWORD *)(a1 + 64);
  v23 = *(_OWORD *)(a1 + 80);
  v24 = *(_WORD *)(a2 + 98);
  v73 = v22;
  v74 = v23;
  v75 = v6;
  v26 = *(_QWORD *)(a2 + 104);
  v25 = *(_QWORD *)(a2 + 112);
  v76 = v7;
  v77 = v8;
  v28 = *(_QWORD *)(a2 + 120);
  v27 = *(_QWORD *)(a2 + 128);
  v54 = v14;
  LOBYTE(v55) = v15;
  v29 = *(_QWORD *)(a2 + 136);
  v30 = *(_QWORD *)(a2 + 144);
  v58 = v17;
  v50 = *(unsigned __int8 *)(a2 + 152);
  v60 = v18;
  v48 = *(unsigned __int8 *)(a2 + 153);
  v31 = *(float *)(a2 + 156);
  v63 = v19;
  v46 = *(unsigned __int8 *)(a2 + 160);
  v64 = v20;
  v42 = *(_QWORD *)(a2 + 168);
  v65 = v24;
  v32 = *(_WORD *)(a2 + 176);
  v68 = v21;
  v69 = v3;
  v56 = *(_OWORD *)(a2 + 16);
  v57 = v16;
  v33 = *(_OWORD *)(a2 + 64);
  v34 = *(_OWORD *)(a2 + 80);
  v40 = *(_BYTE *)(a2 + 178);
  v41 = v32;
  v59 = *(_OWORD *)(a2 + 44);
  v61 = v33;
  v62 = v34;
  if ((specialized static GraphicsImage.== infix(_:_:)((uint64_t)&v66, (uint64_t)&v54) & 1) == 0)
    return 0;
  if (v12 >> 1 == 0xFFFFFFFF)
  {
    if (v28 >> 1 == 0xFFFFFFFF)
      goto LABEL_9;
LABEL_7:
    outlined copy of AccessibilityImageLabel?(v26, v25, v28);
    outlined consume of AccessibilityImageLabel?(v10, v9, v12);
    outlined consume of AccessibilityImageLabel?(v26, v25, v28);
    return 0;
  }
  v66 = v10;
  v67 = v9;
  *(_QWORD *)&v68 = v12;
  *((_QWORD *)&v68 + 1) = v11;
  if (v28 >> 1 == 0xFFFFFFFF)
  {
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined consume of AccessibilityImageLabel(v10, v9, v12);
    goto LABEL_7;
  }
  v54 = v26;
  v55 = v25;
  *(_QWORD *)&v56 = v28;
  *((_QWORD *)&v56 + 1) = v27;
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  v35 = static AccessibilityImageLabel.== infix(_:_:)(&v66, &v54);
  outlined consume of AccessibilityImageLabel(v66, v67, v68);
  outlined consume of AccessibilityImageLabel?(v10, v9, v12);
  if ((v35 & 1) == 0)
    return 0;
LABEL_9:
  if (!v53)
  {
    if (v29)
      return 0;
    goto LABEL_16;
  }
  v36 = 0;
  if (v29 && v53 == v29)
  {
LABEL_16:
    v38 = specialized static IndirectOptional<A>.== infix(_:_:)(v52, v30);
    v36 = 0;
    if (!v38 || ((v51 ^ v50) & 1) != 0)
      return v36;
    if (v49 == 3)
    {
      if (v48 != 3)
        return 0;
    }
    else
    {
      v36 = 0;
      if (v48 == 3 || v49 != v48)
        return v36;
    }
    if ((v47 & 1) == 0)
    {
      v39 = v46;
      if (v13 != v31)
        v39 = 1;
      if ((v39 & 1) != 0)
        return 0;
LABEL_29:
      v66 = v45;
      LOWORD(v67) = v44;
      BYTE2(v67) = v43;
      v54 = v42;
      LOWORD(v55) = v41;
      BYTE2(v55) = v40;
      return specialized static _ShapeStyle_ResolverMode.== infix(_:_:)((uint64_t)&v66, (uint64_t)&v54);
    }
    if (v46)
      goto LABEL_29;
    return 0;
  }
  return v36;
}

uint64_t sub_234B06DC0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  if ((unint64_t)v1 >= 2)

  return swift_deallocObject();
}

uint64_t outlined retain of _ViewInputs(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of _GraphInputs(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _GraphInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined release of _ViewInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_234B06F24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234B06F5C()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t sub_234B06F8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234B06FC4()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext;
  if (!lazy protocol witness table cache variable for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Resolved.MakeRepresentableContext, &unk_25064C6D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LeafLayoutComputer<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer;
  if (!lazy protocol witness table cache variable for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedImageLayoutComputer, &unk_25063DEA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init;
  if (!lazy protocol witness table cache variable for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init)
  {
    result = MEMORY[0x23B7C9C04]("\tJ:\x1BЅ\t", &type metadata for ContentTransitionEffect.Init);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.Resolved(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.Resolved and conformance Image.Resolved();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Resolved and conformance Image.Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Resolved and conformance Image.Resolved;
  if (!lazy protocol witness table cache variable for type Image.Resolved and conformance Image.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Resolved, &type metadata for Image.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Resolved and conformance Image.Resolved);
  }
  return result;
}

uint64_t sub_234B0719C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 136);
  return swift_unknownObjectRetain();
}

uint64_t sub_234B071A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(a2 + 136) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Image.LayoutMetrics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Image.LayoutMetrics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Image.LayoutMetrics()
{
  return &type metadata for Image.LayoutMetrics;
}

uint64_t outlined destroy of GraphicsImage.Contents(uint64_t a1)
{
  destroy for GraphicsImage.Contents(a1);
  return a1;
}

uint64_t *outlined destroy of AccessibilityImageLabel(uint64_t *a1)
{
  destroy for AccessibilityImageLabel(a1);
  return a1;
}

__n128 __swift_memcpy179_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)a2 + 175);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

ValueMetadata *type metadata accessor for Image.Resolved()
{
  return &type metadata for Image.Resolved;
}

uint64_t destroy for Image.NamedResolved(uint64_t a1)
{
  void *v2;

  swift_bridgeObjectRelease();
  v2 = *(void **)(a1 + 16);
  if ((unint64_t)v2 >= 2)

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Image.NamedResolved(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  swift_bridgeObjectRetain();
  if ((unint64_t)v5 >= 2)
    v6 = v5;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Image.NamedResolved(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  int v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a2 + 16);
  if ((unint64_t)v4 >= 2)
  {
    if ((unint64_t)v5 >= 2)
    {
      *(_QWORD *)(a1 + 16) = v5;
      v7 = v5;

      goto LABEL_8;
    }

    v5 = *(void **)(a2 + 16);
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 2)
  {
LABEL_6:
    *(_QWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v5;
LABEL_8:
  v8 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Image.NamedResolved(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v5 >= 2)
  {
    if (v6 >= 2)
    {
      *(_QWORD *)(a1 + 16) = v6;

      goto LABEL_6;
    }

  }
  *(_QWORD *)(a1 + 16) = v6;
LABEL_6:
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.NamedResolved(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.NamedResolved(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.NamedResolved()
{
  return &type metadata for Image.NamedResolved;
}

ValueMetadata *type metadata accessor for Image.Resolved.UpdateData()
{
  return &type metadata for Image.Resolved.UpdateData;
}

void *type metadata accessor for ResolvedImageLayoutComputer()
{
  return &unk_25063DEA0;
}

void *type metadata accessor for Image.Resolved.MakeRepresentableContext()
{
  return &unk_25064C6D8;
}

unint64_t instantiation function for generic protocol witness table for Image.Resolved.MakeRepresentableContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedImageLayoutComputer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void *partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x1F9uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x221uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x261uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x201uLL);
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>);
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>);
  }
}

uint64_t partial apply for specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>);
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>);
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout;
  if (!lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MoveTransition.MoveLayout, &type metadata for MoveTransition.MoveLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout;
  if (!lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MoveTransition.MoveLayout, &type metadata for MoveTransition.MoveLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>);
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(char a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  _OWORD *v74;
  _QWORD *v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[3];
  double v80;
  __int16 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for OSSignpostID();
  v69 = *(_QWORD *)(v10 - 8);
  v70 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v72 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v63 - v13;
  if ((a1 & 1) == 0)
    return;
  LODWORD(v15) = 336658452;
  LOBYTE(v16) = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled())
    goto LABEL_45;
  static OSSignpostID.exclusive.getter();
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  v18 = AGTypeID.description.getter();
  v20 = v19;
  v21 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
  v22 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(inited + 32) = v18;
  v65 = inited + 32;
  *(_QWORD *)(inited + 64) = v22;
  *(_QWORD *)(inited + 40) = v20;
  *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
  v64 = inited + 72;
  *(_QWORD *)(inited + 96) = v21;
  *(_QWORD *)(inited + 104) = v22;
  v66 = inited;
  *(_QWORD *)(inited + 80) = v23;
  if (one-time initialization token for _signpostLog != -1)
    goto LABEL_53;
  while (1)
  {
    v73 = v16 | v15;
    v24 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
    v63 = v14;
    v24(v72, v14, v70);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v68 = v25;
    v26 = 0;
    v16 = 0;
    v67 = xmmword_235283260;
    v15 = MEMORY[0x24BEE45D0];
LABEL_5:
    v27 = (_OWORD *)swift_initStackObject();
    v28 = v27;
    v27[1] = v67;
    v29 = v27 + 2;
    if ((v26 & 1) != 0)
    {
      v30 = 0uLL;
      v27[5] = 0u;
      v27[6] = 0u;
      v27[3] = 0u;
      v27[4] = 0u;
      *v29 = 0u;
      goto LABEL_10;
    }
    v31 = v66;
    if (v16 >= *(_QWORD *)(v66 + 16))
      goto LABEL_51;
    outlined init with copy of AnyTrackedValue(v65 + 40 * v16, (uint64_t)v29);
    if (*(_QWORD *)(v31 + 16) >= 2uLL)
      break;
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
  }
  outlined init with copy of AnyTrackedValue(v64, (uint64_t)v28 + 72);
  v30 = 0uLL;
LABEL_10:
  v74 = v28;
  v28[7] = v30;
  v32 = (uint64_t)(v28 + 7);
  *(_QWORD *)(v32 + 32) = 0;
  v71 = v32;
  *(_OWORD *)(v32 + 16) = v30;
  v75 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
  for (i = 32; i != 152; i += 40)
  {
    outlined init with copy of CVarArg?((uint64_t)v74 + i, (uint64_t)v79, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v15);
    outlined init with copy of CVarArg?((uint64_t)v79, (uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v15);
    v34 = v77;
    if (v77)
    {
      v35 = v78;
      __swift_project_boxed_opaque_existential_1(v76, v77);
      v36 = CVarArg.kdebugValue(_:)(v73, v34, v35);
      v38 = v37;
      v40 = v39;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
      if (v38)
      {
        v41 = swift_allocObject();
        *(_QWORD *)(v41 + 16) = v38;
        *(_QWORD *)(v41 + 24) = v40;
        v42 = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
      }
      else
      {
        v42 = 0;
        v41 = 0;
      }
    }
    else
    {
      outlined destroy of ScrollStateRequest?((uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v15);
      v36 = 0;
      v41 = 0;
      v42 = 1;
    }
    outlined destroy of ScrollStateRequest?((uint64_t)v79, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v15);
    v43 = v75;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1);
      v43 = v75;
    }
    v45 = v43[2];
    v44 = v43[3];
    if (v45 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v43 = v75;
    }
    v43[2] = v45 + 1;
    v46 = &v43[3 * v45];
    v46[4] = v36;
    v46[5] = v42;
    v46[6] = v41;
  }
  v79[0] = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 + 1, 0);
  v14 = (char *)v79[0];
  v47 = v45 + 1;
  v48 = v43 + 5;
  do
  {
    if (*v48 == 1)
      v49 = 0;
    else
      v49 = *(v48 - 1);
    v79[0] = v14;
    v51 = *((_QWORD *)v14 + 2);
    v50 = *((_QWORD *)v14 + 3);
    if (v51 >= v50 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
      v14 = (char *)v79[0];
    }
    *((_QWORD *)v14 + 2) = v51 + 1;
    *(_QWORD *)&v14[8 * v51 + 32] = v49;
    v48 += 3;
    --v47;
  }
  while (v47);
  LOBYTE(v16) = (_BYTE)v72;
  OSSignpostID.rawValue.getter();
  v52 = *((_QWORD *)v14 + 2);
  if (!v52)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v52 == 1)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v52 < 3)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  kdebug_trace();
  swift_bridgeObjectRelease();
  v53 = v43[2];
  if (!v53)
    goto LABEL_39;
  swift_retain();
  v54 = v43 + 6;
  do
  {
    v55 = *(v54 - 2);
    v56 = (void (*)(uint64_t))*(v54 - 1);
    if (!v56)
      goto LABEL_33;
    if (v56 != (void (*)(uint64_t))1)
    {
      v57 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(v54 - 1));
      v56(v57);
LABEL_33:
      _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v55, (uint64_t)v56);
    }
    v54 += 3;
    --v53;
  }
  while (v53);
  swift_release();
LABEL_39:
  swift_release();
  LOBYTE(v16) = (_BYTE)v74;
  if (*((_QWORD *)v74 + 2) < 3uLL)
    goto LABEL_50;
  outlined init with copy of CVarArg?(v71, (uint64_t)v79, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v15);
  swift_bridgeObjectRelease();
  v58 = v80;
  outlined destroy of ScrollStateRequest?((uint64_t)v79, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v15);
  if (v58 != 0.0)
  {
    if (one-time initialization token for continuation != -1)
      swift_once();
    v59 = v70;
    v60 = __swift_project_value_buffer(v70, (uint64_t)static OSSignpostID.continuation);
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 24))(v72, v60, v59);
    v26 = 1;
    v16 = 2;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  v61 = v70;
  v62 = *(void (**)(char *, uint64_t))(v69 + 8);
  v62(v63, v70);
  v62(v72, v61);
LABEL_45:
  AGGraphClearUpdate();
  *(double *)v79 = a2;
  *(double *)&v79[1] = a3;
  *(double *)&v79[2] = a4;
  v80 = a5;
  v81 = 256;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  AGGraphSetOutputValue();
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, unint64_t, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(unint64_t, uint64_t);
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  _OWORD *v70;
  _QWORD *v71;
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (unint64_t)&v57 - v7;
  if ((a2 & 1) == 0)
    return;
  v65 = v6;
  LODWORD(v9) = 336658452;
  LOBYTE(v10) = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled())
    goto LABEL_45;
  v59 = a1;
  static OSSignpostID.exclusive.getter();
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  v12 = AGTypeID.description.getter();
  v14 = v13;
  v15 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
  v16 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(inited + 32) = v12;
  v61 = inited + 32;
  *(_QWORD *)(inited + 64) = v16;
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
  v60 = inited + 72;
  *(_QWORD *)(inited + 96) = v15;
  *(_QWORD *)(inited + 104) = v16;
  v62 = inited;
  *(_QWORD *)(inited + 80) = v17;
  if (one-time initialization token for _signpostLog != -1)
    goto LABEL_53;
  while (1)
  {
    v69 = v10 | v9;
    v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v66 + 16);
    v58 = v8;
    v18(v65, v8, v67);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v64 = v19;
    v20 = 0;
    v10 = 0;
    v63 = xmmword_235283260;
    v21 = MEMORY[0x24BEE45D0];
LABEL_5:
    v22 = (_OWORD *)swift_initStackObject();
    v23 = v22;
    v22[1] = v63;
    v24 = v22 + 2;
    if ((v20 & 1) != 0)
    {
      v25 = 0uLL;
      v22[5] = 0u;
      v22[6] = 0u;
      v22[3] = 0u;
      v22[4] = 0u;
      *v24 = 0u;
      goto LABEL_10;
    }
    v26 = v62;
    if (v10 >= *(_QWORD *)(v62 + 16))
      goto LABEL_51;
    outlined init with copy of AnyTrackedValue(v61 + 40 * v10, (uint64_t)v24);
    if (*(_QWORD *)(v26 + 16) >= 2uLL)
      break;
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
  }
  outlined init with copy of AnyTrackedValue(v60, (uint64_t)v23 + 72);
  v25 = 0uLL;
LABEL_10:
  v70 = v23;
  v23[7] = v25;
  v27 = (uint64_t)(v23 + 7);
  *(_QWORD *)(v27 + 32) = 0;
  v68 = v27;
  *(_OWORD *)(v27 + 16) = v25;
  v71 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
  for (i = 32; i != 152; i += 40)
  {
    outlined init with copy of CVarArg?((uint64_t)v70 + i, (uint64_t)&v75, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v21);
    outlined init with copy of CVarArg?((uint64_t)&v75, (uint64_t)v72, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v21);
    v29 = v73;
    if (v73)
    {
      v30 = v74;
      __swift_project_boxed_opaque_existential_1(v72, v73);
      v31 = CVarArg.kdebugValue(_:)(v69, v29, v30);
      v33 = v32;
      v35 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
      if (v33)
      {
        v36 = swift_allocObject();
        *(_QWORD *)(v36 + 16) = v33;
        *(_QWORD *)(v36 + 24) = v35;
        v37 = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
      }
      else
      {
        v37 = 0;
        v36 = 0;
      }
    }
    else
    {
      outlined destroy of ScrollStateRequest?((uint64_t)v72, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v21);
      v31 = 0;
      v36 = 0;
      v37 = 1;
    }
    outlined destroy of ScrollStateRequest?((uint64_t)&v75, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v21);
    v38 = v71;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1);
      v38 = v71;
    }
    v40 = v38[2];
    v39 = v38[3];
    if (v40 >= v39 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
      v38 = v71;
    }
    v38[2] = v40 + 1;
    v41 = &v38[3 * v40];
    v41[4] = v31;
    v41[5] = v37;
    v41[6] = v36;
  }
  v75 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 + 1, 0);
  v42 = v75;
  v43 = v40 + 1;
  v44 = v38 + 5;
  do
  {
    if (*v44 == 1)
      v45 = 0;
    else
      v45 = *(v44 - 1);
    v75 = v42;
    v8 = *(_QWORD *)(v42 + 16);
    v46 = *(_QWORD *)(v42 + 24);
    if (v8 >= v46 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v8 + 1, 1);
      v42 = v75;
    }
    *(_QWORD *)(v42 + 16) = v8 + 1;
    *(_QWORD *)(v42 + 32 + 8 * v8) = v45;
    v44 += 3;
    --v43;
  }
  while (v43);
  v9 = v65;
  LOBYTE(v10) = v65;
  OSSignpostID.rawValue.getter();
  v47 = *(_QWORD *)(v42 + 16);
  if (!v47)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v47 == 1)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v47 < 3)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  kdebug_trace();
  swift_bridgeObjectRelease();
  v48 = v38[2];
  if (!v48)
    goto LABEL_39;
  swift_retain();
  v49 = v38 + 6;
  do
  {
    v50 = *(v49 - 2);
    v8 = *(v49 - 1);
    if (!v8)
      goto LABEL_33;
    if (v8 != 1)
    {
      v51 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(v49 - 1));
      ((void (*)(uint64_t))v8)(v51);
LABEL_33:
      _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v50, v8);
    }
    v49 += 3;
    --v48;
  }
  while (v48);
  swift_release();
LABEL_39:
  swift_release();
  LOBYTE(v10) = (_BYTE)v70;
  if (*((_QWORD *)v70 + 2) < 3uLL)
    goto LABEL_50;
  outlined init with copy of CVarArg?(v68, (uint64_t)&v75, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v21);
  swift_bridgeObjectRelease();
  v52 = v77;
  outlined destroy of ScrollStateRequest?((uint64_t)&v75, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v21);
  if (v52)
  {
    if (one-time initialization token for continuation != -1)
      swift_once();
    v53 = v67;
    v54 = __swift_project_value_buffer(v67, (uint64_t)static OSSignpostID.continuation);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 24))(v9, v54, v53);
    v20 = 1;
    v10 = 2;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  v55 = v67;
  v56 = *(void (**)(unint64_t, uint64_t))(v66 + 8);
  v56(v58, v67);
  v56(v9, v55);
  a1 = v59;
LABEL_45:
  AGGraphClearUpdate();
  swift_bridgeObjectRetain();
  AGGraphSetUpdate();
  v75 = a1;
  v76 = 256;
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v30 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v37 = a1;
      v38 = 256;
      swift_retain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
      AGGraphSetOutputValue();
      swift_release();
      return;
    }
    v31 = v11;
    v34 = v5;
    v32 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v33 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v7, v33, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v36 = v20;
    v21 = swift_initStackObject();
    v35 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v30[1] = inited;
        LODWORD(v17) = v31 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v39)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v34 + 8);
          v29(v33, v4);
          v29(v7, v4);
          a1 = v32;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v35;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v39)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  unsigned __int8 v40;
  __int16 v41;
  _BYTE v42[40];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = *(_OWORD *)(a1 + 16);
      v38 = *(_OWORD *)a1;
      v39 = v30;
      v40 = *(_BYTE *)(a1 + 32);
      v41 = 256;
      outlined init with take of Path.Storage(a1, (uint64_t)v42);
      outlined retain of Path.Storage((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Path, ForegroundStyle>();
      AGGraphSetOutputValue();
      outlined consume of Path.Storage(v38, *((uint64_t *)&v38 + 1), v39, *((uint64_t *)&v39 + 1), v40);
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _OWORD *v74;
  uint64_t v75;
  _QWORD v76[2];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for OSSignpostID();
  v70 = *(_QWORD *)(v6 - 8);
  v71 = v6;
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v61 - v9;
  if ((a2 & 1) != 0)
  {
    v69 = v8;
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
      goto LABEL_46;
    v63 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    a1 = v14;
    v15 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v16 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v13;
    v65 = inited + 32;
    *(_QWORD *)(inited + 64) = v16;
    *(_QWORD *)(inited + 40) = a1;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v64 = inited + 72;
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 104) = v16;
    v66 = inited;
    *(_QWORD *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v73 = v11 | 0x14110014;
    v18 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 16);
    v62 = v10;
    v18((uint64_t)v69, v10, v71);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v68 = v19;
    v20 = 0;
    v21 = 0;
    v67 = xmmword_235283260;
    v22 = MEMORY[0x24BEE45D0];
LABEL_6:
    v23 = (_OWORD *)swift_initStackObject();
    v24 = v23;
    v23[1] = v67;
    v25 = v23 + 2;
    if ((v20 & 1) != 0)
    {
      v26 = 0uLL;
      v23[5] = 0u;
      v23[6] = 0u;
      v23[3] = 0u;
      v23[4] = 0u;
      *v25 = 0u;
    }
    else
    {
      v27 = v66;
      if (v21 >= *(_QWORD *)(v66 + 16))
        goto LABEL_53;
      outlined init with copy of AnyTrackedValue(v65 + 40 * v21, (uint64_t)v25);
      if (*(_QWORD *)(v27 + 16) < 2uLL)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      outlined init with copy of AnyTrackedValue(v64, (uint64_t)v24 + 72);
      v26 = 0uLL;
    }
    v74 = v24;
    v24[7] = v26;
    v28 = (uint64_t)(v24 + 7);
    *(_QWORD *)(v28 + 32) = 0;
    v72 = v28;
    *(_OWORD *)(v28 + 16) = v26;
    v75 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
    for (i = 32; i != 152; i += 40)
    {
      outlined init with copy of CVarArg?((uint64_t)v74 + i, (uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
      outlined init with copy of CVarArg?((uint64_t)v76, (uint64_t)v80, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
      v30 = v81;
      if (v81)
      {
        v31 = v82;
        __swift_project_boxed_opaque_existential_1(v80, v81);
        v32 = CVarArg.kdebugValue(_:)(v73, v30, v31);
        v34 = v33;
        v36 = v35;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
        if (v34)
        {
          v37 = swift_allocObject();
          *(_QWORD *)(v37 + 16) = v34;
          *(_QWORD *)(v37 + 24) = v36;
          v38 = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ();
        }
        else
        {
          v38 = 0;
          v37 = 0;
        }
      }
      else
      {
        outlined destroy of ScrollStateRequest?((uint64_t)v80, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
        v32 = 0;
        v37 = 0;
        v38 = 1;
      }
      outlined destroy of ScrollStateRequest?((uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
      a1 = v75;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16) + 1, 1);
        a1 = v75;
      }
      v40 = *(_QWORD *)(a1 + 16);
      v39 = *(_QWORD *)(a1 + 24);
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        a1 = v75;
      }
      *(_QWORD *)(a1 + 16) = v40 + 1;
      v41 = (_QWORD *)(a1 + 24 * v40);
      v41[4] = v32;
      v41[5] = v38;
      v41[6] = v37;
    }
    v76[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 + 1, 0);
    v42 = v76[0];
    v43 = v40 + 1;
    v44 = (_QWORD *)(a1 + 40);
    do
    {
      if (*v44 == 1)
        v45 = 0;
      else
        v45 = *(v44 - 1);
      v76[0] = v42;
      v47 = *(_QWORD *)(v42 + 16);
      v46 = *(_QWORD *)(v42 + 24);
      if (v47 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
        v42 = v76[0];
      }
      *(_QWORD *)(v42 + 16) = v47 + 1;
      v24 = (_OWORD *)(v42 + 32);
      *(_QWORD *)(v42 + 32 + 8 * v47) = v45;
      v44 += 3;
      --v43;
    }
    while (v43);
    v48 = v69;
    OSSignpostID.rawValue.getter();
    v49 = *(_QWORD *)(v42 + 16);
    if (v49)
    {
      if (v49 != 1)
      {
        if (v49 >= 3)
        {
          kdebug_trace();
          swift_bridgeObjectRelease();
          v50 = *(_QWORD *)(a1 + 16);
          if (!v50)
            goto LABEL_40;
          swift_retain();
          v51 = a1 + 48;
          while (1)
          {
            v24 = *(_OWORD **)(v51 - 16);
            v52 = *(void (**)(uint64_t))(v51 - 8);
            if (v52)
            {
              if (v52 == (void (*)(uint64_t))1)
                goto LABEL_35;
              v53 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v51 - 8));
              v52(v53);
            }
            _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe((uint64_t)v24, (uint64_t)v52);
LABEL_35:
            v51 += 24;
            if (!--v50)
            {
              swift_release();
LABEL_40:
              swift_release();
              if (*((_QWORD *)v74 + 2) >= 3uLL)
              {
                outlined init with copy of CVarArg?(v72, (uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
                swift_bridgeObjectRelease();
                v54 = *((_QWORD *)&v77 + 1);
                outlined destroy of ScrollStateRequest?((uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
                if (v54)
                {
                  if (one-time initialization token for continuation != -1)
                    swift_once();
                  v55 = v71;
                  v56 = __swift_project_value_buffer(v71, (uint64_t)static OSSignpostID.continuation);
                  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 24))(v48, v56, v55);
                  v20 = 1;
                  v21 = 2;
                  goto LABEL_6;
                }
                swift_bridgeObjectRelease();
                v57 = v71;
                v58 = *(void (**)(char *, uint64_t))(v70 + 8);
                v58(v62, v71);
                v58(v48, v57);
                a1 = v63;
LABEL_46:
                v24 = v80;
                AGGraphClearUpdate();
                if (one-time initialization token for symbolImage == -1)
                {
LABEL_47:
                  v59 = static SummarySymbol.symbolImage;
                  swift_retain();
                  SummarySymbol.gradient.getter(a1, (uint64_t)v80, a3);
                  v76[0] = v59;
                  v76[1] = v80[0];
                  v60 = *(_OWORD *)((char *)v24 + 24);
                  v77 = *(_OWORD *)((char *)v24 + 8);
                  v78 = v60;
                  v79 = a1;
                  swift_retain();
                  AGGraphSetUpdate();
                  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
                  type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>, (uint64_t (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t)&type metadata for Image);
                  AGGraphSetOutputValue();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  return;
                }
LABEL_55:
                swift_once();
                goto LABEL_47;
              }
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
              goto LABEL_54;
            }
          }
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_51;
  }
}

uint64_t outlined destroy of ObservationTracking._AccessList?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>;
  if (!lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>)
    type metadata accessor for _ForegroundStyleModifier2();
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>)
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(255, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>);
  }
}

uint64_t _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a2);
  return result;
}

uint64_t sub_234B09268()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(void *a1)
{
  uint64_t v1;
  _BYTE __dst[512];
  _BYTE v5[520];

  memcpy(__dst, *(const void **)(v1 + 16), 0x1F9uLL);
  memcpy(v5, a1, 0x1F9uLL);
  outlined release of LinearGradient((uint64_t)v5);
  memcpy(a1, __dst, 0x1F9uLL);
  return outlined retain of LinearGradient((uint64_t)__dst);
}

{
  uint64_t v1;
  _BYTE __dst[352];
  _BYTE v5[360];

  memcpy(__dst, *(const void **)(v1 + 16), 0x159uLL);
  memcpy(v5, a1, 0x159uLL);
  outlined release of Image.Resolved((uint64_t)v5);
  memcpy(a1, __dst, 0x159uLL);
  return outlined retain of Image.Resolved((uint64_t)__dst);
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[512];

  v3 = *(const void **)(v1 + 16);
  memcpy(v5, v3, 0x1F9uLL);
  memcpy(a1, v3, 0x1F9uLL);
  return outlined retain of LinearGradient((uint64_t)v5);
}

{
  uint64_t v1;
  const void *v3;
  _BYTE v5[352];

  v3 = *(const void **)(v1 + 16);
  memcpy(v5, v3, 0x159uLL);
  memcpy(a1, v3, 0x159uLL);
  return outlined retain of Image.Resolved((uint64_t)v5);
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout;
  if (!lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpacingLayout, &type metadata for SpacingLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout;
  if (!lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpacingLayout, &type metadata for SpacingLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>);
  }
}

uint64_t type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset;
  if (!lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Rectangle.AsymmetricalInset, &type metadata for Rectangle.AsymmetricalInset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset;
  if (!lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset)
  {
    result = MEMORY[0x23B7C9C04]("͊;\x1BXs\n", &type metadata for Rectangle.AsymmetricalInset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset);
  }
  return result;
}

__n128 partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(v2 + 185);
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  v6 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  result = *(__n128 *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 176) = v3;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(v2 + 192);
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  v6 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  result = *(__n128 *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(v2 + 176);
  v4 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v6;
  result = *(__n128 *)(v2 + 32);
  v8 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v8;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 153) = *(_OWORD *)(v2 + 153);
  v4 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v6;
  result = *(__n128 *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 169) = *(_OWORD *)(v2 + 169);
  v4 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v6;
  result = *(__n128 *)(v2 + 32);
  v8 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v8;
  return result;
}

void type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t outlined consume of _ShapeStyle_RenderedLayers.Layers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t result;

  if (a9 >> 30 == 1)
    return swift_bridgeObjectRelease();
  if (!(a9 >> 30))
    return outlined consume of DisplayList.Item.Value(a6, a7);
  return result;
}

uint64_t outlined release of _ShapeStyle_RenderedShape(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 232);
  v5 = *(_BYTE *)(a1 + 240);
  outlined consume of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96));
  swift_release();
  outlined consume of DisplayList.Item.Value(v2, v3);
  outlined consume of GraphicsBlendMode(v4, v5);
  return a1;
}

void outlined consume of _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  if (((a13 >> 21) & 7) <= 3)
    __asm { BR              X10 }
}

uint64_t sub_234B09834()
{
  swift_release();
  return swift_release();
}

void sub_234B09848(void *a1)
{
  char v1;

  outlined consume of GraphicsImage.Contents?(a1, v1);
}

uint64_t sub_234B09858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  return outlined consume of DisplayList.Item.Value(a6, a7);
}

void *outlined copy of _ShapeStyle_Pack.Style?(void *result, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  if (a14)
  {
    outlined copy of _ShapeStyle_Pack.Fill(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    outlined copy of GraphicsBlendMode?(a12, a13);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

id outlined copy of _ShapeStyle_Pack.Fill(id result, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      result = (id)swift_retain();
      break;
    case 2:
      result = a3;
      goto LABEL_4;
    case 3:
LABEL_4:
      result = (id)outlined copy of Material.ID((unint64_t)result);
      break;
    case 6:
      result = a4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined copy of GraphicsBlendMode(result, a2 & 1);
  return result;
}

uint64_t outlined copy of _ShapeStyle_RenderedLayers.Layers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t result;

  if (a9 >> 30 == 1)
    return swift_bridgeObjectRetain();
  if (!(a9 >> 30))
    return outlined copy of DisplayList.Item.Value(a6, a7);
  return result;
}

unint64_t outlined consume of _ShapeStyle_Pack.Style?(unint64_t result, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  if (a14)
  {
    outlined consume of _ShapeStyle_Pack.Fill(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    outlined consume of GraphicsBlendMode?(a12, a13);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void outlined consume of _ShapeStyle_Pack.Fill(unint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      swift_release();
      break;
    case 2:
      a1 = a3;
      goto LABEL_4;
    case 3:
LABEL_4:
      outlined consume of Material.ID(a1);
      break;
    case 6:

      break;
    default:
      return;
  }
}

uint64_t outlined consume of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined consume of GraphicsBlendMode(result, a2 & 1);
  return result;
}

uint64_t sub_234B09A20()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<CombinedContentShape, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<CombinedContentShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type CombinedContentShape and conformance CombinedContentShape();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CombinedContentShape and conformance CombinedContentShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape;
  if (!lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedContentShape, &type metadata for CombinedContentShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape;
  if (!lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape)
  {
    result = MEMORY[0x23B7C9C04]("ٲ<\x1B@b\v", &type metadata for CombinedContentShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  _OWORD v37[11];
  char v38;

  v3 = *(__int128 **)(v1 + 16);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[3];
  v27 = v3[2];
  v28 = v6;
  v25 = v4;
  v26 = v5;
  v7 = v3[4];
  v8 = v3[5];
  v9 = v3[7];
  v31 = v3[6];
  v32 = v9;
  v29 = v7;
  v30 = v8;
  v10 = v3[8];
  v11 = v3[9];
  v12 = v3[10];
  v36 = *((_BYTE *)v3 + 176);
  v34 = v11;
  v35 = v12;
  v33 = v10;
  v13 = *(_OWORD *)(a1 + 48);
  v37[2] = *(_OWORD *)(a1 + 32);
  v37[3] = v13;
  v14 = *(_OWORD *)(a1 + 16);
  v37[0] = *(_OWORD *)a1;
  v37[1] = v14;
  v15 = *(_OWORD *)(a1 + 112);
  v37[6] = *(_OWORD *)(a1 + 96);
  v37[7] = v15;
  v16 = *(_OWORD *)(a1 + 80);
  v37[4] = *(_OWORD *)(a1 + 64);
  v37[5] = v16;
  v38 = *(_BYTE *)(a1 + 176);
  v17 = *(_OWORD *)(a1 + 160);
  v18 = *(_OWORD *)(a1 + 128);
  v37[9] = *(_OWORD *)(a1 + 144);
  v37[10] = v17;
  v37[8] = v18;
  outlined release of LinearGradient((uint64_t)v37);
  v19 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = v35;
  *(_BYTE *)(a1 + 176) = v36;
  v20 = v30;
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 80) = v20;
  v21 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v21;
  v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  v23 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v23;
  return outlined retain of LinearGradient((uint64_t)&v25);
}

{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  _OWORD v45[14];
  char v46;

  v3 = *(__int128 **)(v1 + 16);
  v4 = *v3;
  v5 = v3[2];
  v31 = v3[1];
  v32 = v5;
  v30 = v4;
  v6 = v3[3];
  v7 = v3[4];
  v8 = v3[6];
  v35 = v3[5];
  v36 = v8;
  v33 = v6;
  v34 = v7;
  v9 = v3[7];
  v10 = v3[8];
  v11 = v3[10];
  v39 = v3[9];
  v40 = v11;
  v37 = v9;
  v38 = v10;
  v12 = v3[11];
  v13 = v3[12];
  v14 = v3[13];
  v44 = *((_BYTE *)v3 + 224);
  v42 = v13;
  v43 = v14;
  v41 = v12;
  v15 = *(_OWORD *)(a1 + 208);
  v45[12] = *(_OWORD *)(a1 + 192);
  v45[13] = v15;
  v46 = *(_BYTE *)(a1 + 224);
  v16 = *(_OWORD *)(a1 + 144);
  v45[8] = *(_OWORD *)(a1 + 128);
  v45[9] = v16;
  v17 = *(_OWORD *)(a1 + 176);
  v45[10] = *(_OWORD *)(a1 + 160);
  v45[11] = v17;
  v18 = *(_OWORD *)(a1 + 80);
  v45[4] = *(_OWORD *)(a1 + 64);
  v45[5] = v18;
  v19 = *(_OWORD *)(a1 + 112);
  v45[6] = *(_OWORD *)(a1 + 96);
  v45[7] = v19;
  v20 = *(_OWORD *)(a1 + 16);
  v45[0] = *(_OWORD *)a1;
  v45[1] = v20;
  v21 = *(_OWORD *)(a1 + 48);
  v45[2] = *(_OWORD *)(a1 + 32);
  v45[3] = v21;
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v45);
  v22 = v43;
  *(_OWORD *)(a1 + 192) = v42;
  *(_OWORD *)(a1 + 208) = v22;
  *(_BYTE *)(a1 + 224) = v44;
  v23 = v39;
  *(_OWORD *)(a1 + 128) = v38;
  *(_OWORD *)(a1 + 144) = v23;
  v24 = v41;
  *(_OWORD *)(a1 + 160) = v40;
  *(_OWORD *)(a1 + 176) = v24;
  v25 = v35;
  *(_OWORD *)(a1 + 64) = v34;
  *(_OWORD *)(a1 + 80) = v25;
  v26 = v37;
  *(_OWORD *)(a1 + 96) = v36;
  *(_OWORD *)(a1 + 112) = v26;
  v27 = v31;
  *(_OWORD *)a1 = v30;
  *(_OWORD *)(a1 + 16) = v27;
  v28 = v33;
  *(_OWORD *)(a1 + 32) = v32;
  *(_OWORD *)(a1 + 48) = v28;
  return outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)&v30);
}

{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  _OWORD v37[11];
  char v38;

  v3 = *(__int128 **)(v1 + 16);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[3];
  v27 = v3[2];
  v28 = v6;
  v25 = v4;
  v26 = v5;
  v7 = v3[4];
  v8 = v3[5];
  v9 = v3[7];
  v31 = v3[6];
  v32 = v9;
  v29 = v7;
  v30 = v8;
  v10 = v3[8];
  v11 = v3[9];
  v12 = v3[10];
  v36 = *((_BYTE *)v3 + 176);
  v34 = v11;
  v35 = v12;
  v33 = v10;
  v13 = *(_OWORD *)(a1 + 48);
  v37[2] = *(_OWORD *)(a1 + 32);
  v37[3] = v13;
  v14 = *(_OWORD *)(a1 + 16);
  v37[0] = *(_OWORD *)a1;
  v37[1] = v14;
  v15 = *(_OWORD *)(a1 + 112);
  v37[6] = *(_OWORD *)(a1 + 96);
  v37[7] = v15;
  v16 = *(_OWORD *)(a1 + 80);
  v37[4] = *(_OWORD *)(a1 + 64);
  v37[5] = v16;
  v38 = *(_BYTE *)(a1 + 176);
  v17 = *(_OWORD *)(a1 + 160);
  v18 = *(_OWORD *)(a1 + 128);
  v37[9] = *(_OWORD *)(a1 + 144);
  v37[10] = v17;
  v37[8] = v18;
  outlined release of ViewTransform((uint64_t)v37);
  v19 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = v35;
  *(_BYTE *)(a1 + 176) = v36;
  v20 = v30;
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 80) = v20;
  v21 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v21;
  v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  v23 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v23;
  return outlined retain of ViewTransform((uint64_t)&v25);
}

{
  return partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(a1, (void (*)(_OWORD *))outlined release of RadialGradient, (uint64_t (*)(__int128 *))outlined retain of RadialGradient);
}

{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  _OWORD v42[13];
  char v43;

  v3 = *(__int128 **)(v1 + 16);
  v4 = v3[1];
  v28 = *v3;
  v29 = v4;
  v5 = v3[2];
  v6 = v3[3];
  v7 = v3[5];
  v32 = v3[4];
  v33 = v7;
  v30 = v5;
  v31 = v6;
  v8 = v3[6];
  v9 = v3[7];
  v10 = v3[9];
  v36 = v3[8];
  v37 = v10;
  v34 = v8;
  v35 = v9;
  v11 = v3[10];
  v12 = v3[11];
  v13 = v3[12];
  v41 = *((_BYTE *)v3 + 208);
  v39 = v12;
  v40 = v13;
  v38 = v11;
  v14 = *(_OWORD *)(a1 + 16);
  v42[0] = *(_OWORD *)a1;
  v42[1] = v14;
  v15 = *(_OWORD *)(a1 + 80);
  v42[4] = *(_OWORD *)(a1 + 64);
  v42[5] = v15;
  v16 = *(_OWORD *)(a1 + 48);
  v42[2] = *(_OWORD *)(a1 + 32);
  v42[3] = v16;
  v17 = *(_OWORD *)(a1 + 144);
  v42[8] = *(_OWORD *)(a1 + 128);
  v42[9] = v17;
  v18 = *(_OWORD *)(a1 + 112);
  v42[6] = *(_OWORD *)(a1 + 96);
  v42[7] = v18;
  v43 = *(_BYTE *)(a1 + 208);
  v19 = *(_OWORD *)(a1 + 192);
  v20 = *(_OWORD *)(a1 + 160);
  v42[11] = *(_OWORD *)(a1 + 176);
  v42[12] = v19;
  v42[10] = v20;
  outlined release of LinearGradient((uint64_t)v42);
  v21 = v39;
  *(_OWORD *)(a1 + 160) = v38;
  *(_OWORD *)(a1 + 176) = v21;
  *(_OWORD *)(a1 + 192) = v40;
  *(_BYTE *)(a1 + 208) = v41;
  v22 = v35;
  *(_OWORD *)(a1 + 96) = v34;
  *(_OWORD *)(a1 + 112) = v22;
  v23 = v37;
  *(_OWORD *)(a1 + 128) = v36;
  *(_OWORD *)(a1 + 144) = v23;
  v24 = v31;
  *(_OWORD *)(a1 + 32) = v30;
  *(_OWORD *)(a1 + 48) = v24;
  v25 = v33;
  *(_OWORD *)(a1 + 64) = v32;
  *(_OWORD *)(a1 + 80) = v25;
  v26 = v29;
  *(_OWORD *)a1 = v28;
  *(_OWORD *)(a1 + 16) = v26;
  return outlined retain of LinearGradient((uint64_t)&v28);
}

{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[19];
  _OWORD v36[10];
  _OWORD v37[2];

  v3 = *(__int128 **)(v1 + 16);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[3];
  v27 = v3[2];
  v28 = v6;
  v25 = v4;
  v26 = v5;
  v7 = v3[4];
  v8 = v3[5];
  v9 = v3[7];
  v31 = v3[6];
  v32 = v9;
  v29 = v7;
  v30 = v8;
  v10 = v3[8];
  v11 = v3[9];
  v12 = v3[10];
  *(_DWORD *)&v35[15] = *(_DWORD *)((char *)v3 + 175);
  v34 = v11;
  *(_OWORD *)v35 = v12;
  v33 = v10;
  v13 = *(_OWORD *)(a1 + 48);
  v36[2] = *(_OWORD *)(a1 + 32);
  v36[3] = v13;
  v14 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v14;
  v15 = *(_OWORD *)(a1 + 112);
  v36[6] = *(_OWORD *)(a1 + 96);
  v36[7] = v15;
  v16 = *(_OWORD *)(a1 + 80);
  v36[4] = *(_OWORD *)(a1 + 64);
  v36[5] = v16;
  *(_DWORD *)((char *)v37 + 15) = *(_DWORD *)(a1 + 175);
  v17 = *(_OWORD *)(a1 + 160);
  v18 = *(_OWORD *)(a1 + 128);
  v36[9] = *(_OWORD *)(a1 + 144);
  v37[0] = v17;
  v36[8] = v18;
  outlined release of Image.Resolved((uint64_t)v36);
  v19 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)v35;
  *(_DWORD *)(a1 + 175) = *(_DWORD *)&v35[15];
  v20 = v30;
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 80) = v20;
  v21 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v21;
  v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  v23 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v23;
  return outlined retain of Image.Resolved((uint64_t)&v25);
}

{
  uint64_t v1;
  int *v3;
  int v4;
  uint64_t v5;

  v3 = *(int **)(v1 + 16);
  v4 = *v3;
  v5 = *((_QWORD *)v3 + 1);
  swift_release();
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  return swift_retain();
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[11];
  char v19;

  v2 = *(__int128 **)(v1 + 16);
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[3];
  v18[2] = v2[2];
  v18[3] = v5;
  v18[0] = v3;
  v18[1] = v4;
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[7];
  v18[6] = v2[6];
  v18[7] = v8;
  v18[4] = v6;
  v18[5] = v7;
  v9 = v2[8];
  v10 = v2[9];
  v11 = v2[10];
  v19 = *((_BYTE *)v2 + 176);
  v18[9] = v10;
  v18[10] = v11;
  v18[8] = v9;
  v12 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)v2 + 176);
  v13 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v13;
  v14 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v14;
  v15 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v16;
  return outlined retain of LinearGradient((uint64_t)v18);
}

{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v22[14];
  char v23;

  v2 = *(__int128 **)(v1 + 16);
  v3 = *v2;
  v4 = v2[2];
  v22[1] = v2[1];
  v22[2] = v4;
  v22[0] = v3;
  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[6];
  v22[5] = v2[5];
  v22[6] = v7;
  v22[3] = v5;
  v22[4] = v6;
  v8 = v2[7];
  v9 = v2[8];
  v10 = v2[10];
  v22[9] = v2[9];
  v22[10] = v10;
  v22[7] = v8;
  v22[8] = v9;
  v11 = v2[11];
  v12 = v2[12];
  v13 = v2[13];
  v23 = *((_BYTE *)v2 + 224);
  v22[12] = v12;
  v22[13] = v13;
  v22[11] = v11;
  v14 = v2[13];
  *(_OWORD *)(a1 + 192) = v2[12];
  *(_OWORD *)(a1 + 208) = v14;
  *(_BYTE *)(a1 + 224) = *((_BYTE *)v2 + 224);
  v15 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v15;
  v16 = v2[11];
  *(_OWORD *)(a1 + 160) = v2[10];
  *(_OWORD *)(a1 + 176) = v16;
  v17 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v17;
  v18 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v18;
  v19 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v19;
  v20 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v20;
  return outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v22);
}

{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[11];
  char v19;

  v2 = *(__int128 **)(v1 + 16);
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[3];
  v18[2] = v2[2];
  v18[3] = v5;
  v18[0] = v3;
  v18[1] = v4;
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[7];
  v18[6] = v2[6];
  v18[7] = v8;
  v18[4] = v6;
  v18[5] = v7;
  v9 = v2[8];
  v10 = v2[9];
  v11 = v2[10];
  v19 = *((_BYTE *)v2 + 176);
  v18[9] = v10;
  v18[10] = v11;
  v18[8] = v9;
  v12 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)v2 + 176);
  v13 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v13;
  v14 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v14;
  v15 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v16;
  return outlined retain of ViewTransform((uint64_t)v18);
}

{
  return partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)((uint64_t (*)(_OWORD *))outlined retain of RadialGradient, a1);
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[13];
  char v21;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 16);
  v20[0] = *(_OWORD *)v2;
  v20[1] = v3;
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 80);
  v20[4] = *(_OWORD *)(v2 + 64);
  v20[5] = v6;
  v20[2] = v4;
  v20[3] = v5;
  v7 = *(_OWORD *)(v2 + 96);
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 144);
  v20[8] = *(_OWORD *)(v2 + 128);
  v20[9] = v9;
  v20[6] = v7;
  v20[7] = v8;
  v10 = *(_OWORD *)(v2 + 160);
  v11 = *(_OWORD *)(v2 + 176);
  v12 = *(_OWORD *)(v2 + 192);
  v21 = *(_BYTE *)(v2 + 208);
  v20[11] = v11;
  v20[12] = v12;
  v20[10] = v10;
  v13 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(v2 + 208);
  v14 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v14;
  v15 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v15;
  v16 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  v17 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  v18 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v18;
  return outlined retain of LinearGradient((uint64_t)v20);
}

{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[10];
  _BYTE v19[19];

  v2 = *(__int128 **)(v1 + 16);
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[3];
  v18[2] = v2[2];
  v18[3] = v5;
  v18[0] = v3;
  v18[1] = v4;
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[7];
  v18[6] = v2[6];
  v18[7] = v8;
  v18[4] = v6;
  v18[5] = v7;
  v9 = v2[8];
  v10 = v2[9];
  v11 = v2[10];
  *(_DWORD *)&v19[15] = *(_DWORD *)((char *)v2 + 175);
  v18[9] = v10;
  *(_OWORD *)v19 = v11;
  v18[8] = v9;
  v12 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v2[10];
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v2 + 175);
  v13 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v13;
  v14 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v14;
  v15 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v16;
  return outlined retain of Image.Resolved((uint64_t)v18);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v2;
  *(_QWORD *)(a1 + 8) = v3;
  return swift_retain();
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

double _s7SwiftUI33PlatformImageRepresentableContextVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  return result;
}

void outlined consume of AnyGestureInfo<()>.Value?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();

  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _WORD v34[12];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  if ((a1 & 1) != 0)
  {
    v9 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v34[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v29 = v9;
    v31 = v3;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v11 = AGTypeID.description.getter();
    v30 = v8;
    v12 = v11;
    v14 = v13;
    v15 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v16 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 64) = v16;
    *(_QWORD *)(inited + 40) = v14;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 104) = v16;
    *(_QWORD *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v5, v30, v2);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v33 = v18;
    v19 = swift_initStackObject();
    v32 = xmmword_235283260;
    *(_OWORD *)(v19 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v28 = inited;
        LODWORD(v15) = v29 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(_QWORD *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v5);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v35)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v27 = *(void (**)(char *, uint64_t))(v31 + 8);
          v27(v30, v2);
          v27(v5, v2);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v21 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
          v22 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 24);
          v22(v5, v21, v2);
          v23 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v24 = swift_initStackObject();
            *(_OWORD *)(v24 + 16) = v32;
            *(_OWORD *)(v24 + 32) = 0u;
            *(_OWORD *)(v24 + 48) = 0u;
            *(_OWORD *)(v24 + 64) = 0u;
            *(_OWORD *)(v24 + 80) = 0u;
            *(_OWORD *)(v24 + 96) = 0u;
            *(_OWORD *)(v24 + 128) = 0u;
            *(_QWORD *)(v24 + 144) = 0;
            *(_OWORD *)(v24 + 112) = 0u;
            v25 = v24 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v24, v15, (uint64_t)v5);
            outlined init with copy of CVarArg?(v25, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            swift_bridgeObjectRelease();
            if (!v35)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v26 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
            v22(v5, v26, v2);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _WORD v34[12];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  if ((a1 & 1) != 0)
  {
    v9 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v34[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v29 = v9;
    v31 = v3;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v11 = AGTypeID.description.getter();
    v30 = v8;
    v12 = v11;
    v14 = v13;
    v15 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v16 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 64) = v16;
    *(_QWORD *)(inited + 40) = v14;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 104) = v16;
    *(_QWORD *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v5, v30, v2);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v33 = v18;
    v19 = swift_initStackObject();
    v32 = xmmword_235283260;
    *(_OWORD *)(v19 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v28 = inited;
        LODWORD(v15) = v29 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(_QWORD *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v5);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v35)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v27 = *(void (**)(char *, uint64_t))(v31 + 8);
          v27(v30, v2);
          v27(v5, v2);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v21 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
          v22 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 24);
          v22(v5, v21, v2);
          v23 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v24 = swift_initStackObject();
            *(_OWORD *)(v24 + 16) = v32;
            *(_OWORD *)(v24 + 32) = 0u;
            *(_OWORD *)(v24 + 48) = 0u;
            *(_OWORD *)(v24 + 64) = 0u;
            *(_OWORD *)(v24 + 80) = 0u;
            *(_OWORD *)(v24 + 96) = 0u;
            *(_OWORD *)(v24 + 128) = 0u;
            *(_QWORD *)(v24 + 144) = 0;
            *(_OWORD *)(v24 + 112) = 0u;
            v25 = v24 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v24, v15, (uint64_t)v5);
            outlined init with copy of CVarArg?(v25, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            swift_bridgeObjectRelease();
            if (!v35)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v26 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
            v22(v5, v26, v2);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _WORD v34[12];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  if ((a1 & 1) != 0)
  {
    v9 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v34[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v29 = v9;
    v31 = v3;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v11 = AGTypeID.description.getter();
    v30 = v8;
    v12 = v11;
    v14 = v13;
    v15 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v16 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 64) = v16;
    *(_QWORD *)(inited + 40) = v14;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 104) = v16;
    *(_QWORD *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v5, v30, v2);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v33 = v18;
    v19 = swift_initStackObject();
    v32 = xmmword_235283260;
    *(_OWORD *)(v19 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v28 = inited;
        LODWORD(v15) = v29 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(_QWORD *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v5);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v35)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v27 = *(void (**)(char *, uint64_t))(v31 + 8);
          v27(v30, v2);
          v27(v5, v2);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v21 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
          v22 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 24);
          v22(v5, v21, v2);
          v23 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v24 = swift_initStackObject();
            *(_OWORD *)(v24 + 16) = v32;
            *(_OWORD *)(v24 + 32) = 0u;
            *(_OWORD *)(v24 + 48) = 0u;
            *(_OWORD *)(v24 + 64) = 0u;
            *(_OWORD *)(v24 + 80) = 0u;
            *(_OWORD *)(v24 + 96) = 0u;
            *(_OWORD *)(v24 + 128) = 0u;
            *(_QWORD *)(v24 + 144) = 0;
            *(_OWORD *)(v24 + 112) = 0u;
            v25 = v24 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v24, v15, (uint64_t)v5);
            outlined init with copy of CVarArg?(v25, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            swift_bridgeObjectRelease();
            if (!v35)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v26 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
            v22(v5, v26, v2);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _WORD v34[12];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  if ((a1 & 1) != 0)
  {
    v9 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v34[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v29 = v9;
    v31 = v3;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v11 = AGTypeID.description.getter();
    v30 = v8;
    v12 = v11;
    v14 = v13;
    v15 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v16 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 64) = v16;
    *(_QWORD *)(inited + 40) = v14;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 104) = v16;
    *(_QWORD *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v5, v30, v2);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v33 = v18;
    v19 = swift_initStackObject();
    v32 = xmmword_235283260;
    *(_OWORD *)(v19 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v28 = inited;
        LODWORD(v15) = v29 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(_QWORD *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v5);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v35)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v27 = *(void (**)(char *, uint64_t))(v31 + 8);
          v27(v30, v2);
          v27(v5, v2);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v21 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
          v22 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 24);
          v22(v5, v21, v2);
          v23 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v24 = swift_initStackObject();
            *(_OWORD *)(v24 + 16) = v32;
            *(_OWORD *)(v24 + 32) = 0u;
            *(_OWORD *)(v24 + 48) = 0u;
            *(_OWORD *)(v24 + 64) = 0u;
            *(_OWORD *)(v24 + 80) = 0u;
            *(_OWORD *)(v24 + 96) = 0u;
            *(_OWORD *)(v24 + 128) = 0u;
            *(_QWORD *)(v24 + 144) = 0;
            *(_OWORD *)(v24 + 112) = 0u;
            v25 = v24 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v24, v15, (uint64_t)v5);
            outlined init with copy of CVarArg?(v25, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            swift_bridgeObjectRelease();
            if (!v35)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v26 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
            v22(v5, v26, v2);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(char a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  if ((a1 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v36 = a2;
      v37 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v31 = v11;
    v33 = v5;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v32 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v32, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v35 = v20;
    v21 = swift_initStackObject();
    v34 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v30 = inited;
        LODWORD(v17) = v31 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v38)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v33 + 8);
          v29(v32, v4);
          v29(v7, v4);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v34;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v38)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  if ((a1 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v36 = a2;
      v37 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v31 = v11;
    v33 = v5;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v32 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v32, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v35 = v20;
    v21 = swift_initStackObject();
    v34 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v30 = inited;
        LODWORD(v17) = v31 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v38)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v33 + 8);
          v29(v32, v4);
          v29(v7, v4);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v34;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v38)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  if ((a1 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v36 = a2;
      v37 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v31 = v11;
    v33 = v5;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v32 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v32, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v35 = v20;
    v21 = swift_initStackObject();
    v34 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v30 = inited;
        LODWORD(v17) = v31 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v38)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v33 + 8);
          v29(v32, v4);
          v29(v7, v4);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v34;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v38)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  if ((a1 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v36 = a2;
      v37 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v31 = v11;
    v33 = v5;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v32 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v32, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v35 = v20;
    v21 = swift_initStackObject();
    v34 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v30 = inited;
        LODWORD(v17) = v31 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v38)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v33 + 8);
          v29(v32, v4);
          v29(v7, v4);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v34;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v38)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  if ((a1 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v36 = a2;
      v37 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v31 = v11;
    v33 = v5;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v32 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v32, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v35 = v20;
    v21 = swift_initStackObject();
    v34 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v30 = inited;
        LODWORD(v17) = v31 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v38)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v33 + 8);
          v29(v32, v4);
          v29(v7, v4);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v34;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v38)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v34 - v15;
  if ((a5 & 1) != 0)
  {
    v40 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v45[0] = a1;
      v45[1] = a2;
      v45[2] = a3;
      v46 = a4;
      _TestApp.RootView.body.getter(&v44);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      AGGraphSetOutputValue();
      swift_release();
      return;
    }
    v41 = v11;
    v36 = a1;
    v37 = a2;
    v38 = a3;
    v39 = a4;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v18 = AGTypeID.description.getter();
    v20 = v19;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v21 = v16;
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v18;
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v20;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v23;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v13, v21, v10);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v43 = v24;
    v25 = swift_initStackObject();
    v42 = xmmword_235283260;
    *(_OWORD *)(v25 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v26 = v25;
      outlined init with copy of AnyTrackedValue(inited + 32, v25 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v34 = inited;
        v35 = v21;
        LODWORD(v21) = v40 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v26 + 72);
        *(_OWORD *)(v26 + 128) = 0u;
        *(_QWORD *)(v26 + 144) = 0;
        *(_OWORD *)(v26 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v21, v26, v21, (uint64_t)v13);
        outlined init with copy of CVarArg?(v26 + 112, (uint64_t)v45, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v45, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v33 = *(void (**)(char *, uint64_t))(v41 + 8);
          v33(v35, v10);
          v33(v13, v10);
          a3 = v38;
          a4 = v39;
          a1 = v36;
          a2 = v37;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v45, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v27 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
          v28 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 24);
          v28(v13, v27, v10);
          v29 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v42;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(v21, v30, v21, (uint64_t)v13);
            outlined init with copy of CVarArg?(v31, (uint64_t)v45, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v29);
            swift_bridgeObjectRelease();
            if (!v46)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v45, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v29);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v32 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
            v28(v13, v32, v10);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v37 = a1 & 1;
      v38 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v31 = v11;
    v32 = a1;
    v34 = v5;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v33 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v7, v33, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v36 = v20;
    v21 = swift_initStackObject();
    v35 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v30 = inited;
        LODWORD(v17) = v31 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v39)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v34 + 8);
          v29(v33, v4);
          v29(v7, v4);
          LOBYTE(a1) = v32;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v35;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v39)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(__int128 *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  __int128 *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = a1[1];
      v38 = *a1;
      v39 = v30;
      v40 = *((_BYTE *)a1 + 32);
      v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  __int128 *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = a1[1];
      v38 = *a1;
      v39 = v30;
      v40 = *((_QWORD *)a1 + 4);
      v41 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  __int128 *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = a1[1];
      v38 = *a1;
      v39 = v30;
      v40 = *((_QWORD *)a1 + 4);
      v41 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  __int128 *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = a1[1];
      v38 = *a1;
      v39 = v30;
      v40 = *((_QWORD *)a1 + 4);
      v41 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  __int128 *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = a1[1];
      v38 = *a1;
      v39 = v30;
      v40 = *((_QWORD *)a1 + 4);
      v41 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(_OWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = a1[1];
      v38 = *a1;
      v39 = v30;
      v40 = a1[2];
      v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  _QWORD v31[2];
  int v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[26];
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  if ((a2 & 1) != 0)
  {
    v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v30 = a1[1];
      v38 = *a1;
      v39 = v30;
      *(_OWORD *)v40 = a1[2];
      *(_OWORD *)&v40[10] = *(_OWORD *)((char *)a1 + 42);
      v41 = 256;
      outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)a1);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
      AGGraphSetOutputValue();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v32 = v11;
    v35 = v5;
    v33 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v13 = AGTypeID.description.getter();
    v34 = v10;
    v14 = v13;
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v18;
    *(_QWORD *)(inited + 80) = v19;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v7, v34, v4);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v37 = v20;
    v21 = swift_initStackObject();
    v36 = xmmword_235283260;
    *(_OWORD *)(v21 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v31[1] = inited;
        LODWORD(v17) = v32 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(_QWORD *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v7);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v39 + 1))
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v35 + 8);
          v29(v34, v4);
          v29(v7, v4);
          a1 = v33;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v23 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
          v24(v7, v23, v4);
          v25 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(_QWORD *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v26, v17, (uint64_t)v7);
            outlined init with copy of CVarArg?(v27, (uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v39 + 1))
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
            v24(v7, v28, v4);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, void *a2, void *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  void *v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[2];
  char v50;
  uint64_t (*v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v40 - v13;
  if ((a4 & 1) == 0)
    return;
  v15 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v42 = v15;
    v43 = a1;
    v45 = a2;
    v46 = v9;
    v44 = a3;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v17 = AGTypeID.description.getter();
    v19 = v18;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v20 = v14;
    v21 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v17;
    *(_QWORD *)(inited + 64) = v21;
    *(_QWORD *)(inited + 40) = v19;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v21;
    *(_QWORD *)(inited + 80) = v22;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v11, v20, v8);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v48 = v23;
    v24 = swift_initStackObject();
    v47 = xmmword_235283260;
    *(_OWORD *)(v24 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v25 = v24;
      outlined init with copy of AnyTrackedValue(inited + 32, v24 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v40 = inited;
        v41 = v20;
        LODWORD(v20) = v42 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v25 + 72);
        *(_OWORD *)(v25 + 128) = 0u;
        *(_QWORD *)(v25 + 144) = 0;
        *(_OWORD *)(v25 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v20, v25, v20, (uint64_t)v11);
        outlined init with copy of CVarArg?(v25 + 112, (uint64_t)v49, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v51)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v49, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v32 = *(void (**)(char *, uint64_t))(v46 + 8);
          v32(v41, v8);
          v32(v11, v8);
          a3 = v44;
          a2 = v45;
          LOBYTE(a1) = v43;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v49, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v26 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v27 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 24);
          v27(v11, v26, v8);
          v28 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v29 = swift_initStackObject();
            *(_OWORD *)(v29 + 16) = v47;
            *(_OWORD *)(v29 + 32) = 0u;
            *(_OWORD *)(v29 + 48) = 0u;
            *(_OWORD *)(v29 + 64) = 0u;
            *(_OWORD *)(v29 + 80) = 0u;
            *(_OWORD *)(v29 + 96) = 0u;
            *(_OWORD *)(v29 + 128) = 0u;
            *(_QWORD *)(v29 + 144) = 0;
            *(_OWORD *)(v29 + 112) = 0u;
            v30 = v29 + 112;
            specialized withKDebugValues(_:_:closure:)(v20, v29, v20, (uint64_t)v11);
            outlined init with copy of CVarArg?(v30, (uint64_t)v49, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
            swift_bridgeObjectRelease();
            if (!v51)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v49, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v31 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
            v27(v11, v31, v8);
          }
          goto LABEL_14;
        }
LABEL_22:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_15:
  AGGraphClearUpdate();
  v33 = a1 & 1;
  if ((a1 & 1) != 0)
    v34 = 1.0;
  else
    v34 = 0.0;
  type metadata accessor for ColorBox<CGColorRef>(0);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = a3;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PlatformFontProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider, (uint64_t)&type metadata for Font.PlatformFontProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = a2;
  KeyPath = swift_getKeyPath();
  *(double *)v49 = v34;
  v49[1] = v35;
  v50 = v33;
  v51 = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
  v52 = 0;
  v53 = KeyPath;
  v54 = v36;
  v38 = a3;
  v39 = a2;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>(0);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char v35;
  uint64_t v36;
  _QWORD v37[2];
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t (*v51)@<X0>(uint64_t *@<X0>, _QWORD *@<X8>);
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  if ((a5 & 1) == 0)
    return;
  v44 = (char *)v37 - v15;
  v16 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v38 = v16;
    v39 = a3;
    v42 = a4;
    v43 = v11;
    v40 = a1;
    v41 = a2;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v18 = AGTypeID.description.getter();
    v20 = v19;
    v21 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v18;
    v23 = inited + 32;
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v20;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v21;
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v13, v44, v10);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v46 = v25;
    v26 = swift_initStackObject();
    v45 = xmmword_235283260;
    *(_OWORD *)(v26 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v37[1] = inited;
        v23 = v38 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(_QWORD *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v23, v27, v23, (uint64_t)v13);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)&v47, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v50)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)&v47, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v34 = *(void (**)(char *, uint64_t))(v43 + 8);
          v34(v44, v10);
          v34(v13, v10);
          a2 = v41;
          a4 = v42;
          a1 = v40;
          LOBYTE(a3) = v39;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)&v47, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v28 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 24);
          v29(v13, v28, v10);
          v30 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v31 = swift_initStackObject();
            *(_OWORD *)(v31 + 16) = v45;
            *(_OWORD *)(v31 + 32) = 0u;
            *(_OWORD *)(v31 + 48) = 0u;
            *(_OWORD *)(v31 + 64) = 0u;
            *(_OWORD *)(v31 + 80) = 0u;
            *(_OWORD *)(v31 + 96) = 0u;
            *(_OWORD *)(v31 + 128) = 0u;
            *(_QWORD *)(v31 + 144) = 0;
            *(_OWORD *)(v31 + 112) = 0u;
            v32 = v31 + 112;
            specialized withKDebugValues(_:_:closure:)(v23, v31, v23, (uint64_t)v13);
            outlined init with copy of CVarArg?(v32, (uint64_t)&v47, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v30);
            swift_bridgeObjectRelease();
            if (!v50)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)&v47, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v30);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v33 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
            v29(v13, v33, v10);
          }
          goto LABEL_14;
        }
LABEL_21:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  AGGraphClearUpdate();
  v35 = a3 & 1;
  outlined copy of Text.Storage(a1, a2, v35);
  v36 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v36 != -1)
    swift_once();
  v47 = a1;
  v48 = a2;
  v49 = v35;
  v50 = a4;
  v51 = closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  v52 = 0;
  v53 = static Alignment.topLeading;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, (uint64_t)&type metadata for Text);
  AGGraphSetOutputValue();
  outlined consume of Text.Storage(v47, v48, v49);
  swift_bridgeObjectRelease();
  swift_release();
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, char a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[2];
  char v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v34 - v13;
  if ((a2 & 1) != 0)
  {
    v15 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      *(double *)v41 = a3;
      *(double *)&v41[1] = a4;
      v42 = a1 & 1;
      v43 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v35 = v15;
    v36 = a1;
    v38 = v9;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v17 = AGTypeID.description.getter();
    v37 = v14;
    v18 = v17;
    v20 = v19;
    v21 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v18;
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v20;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v21;
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v23;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v11, v37, v8);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v40 = v24;
    v25 = swift_initStackObject();
    v39 = xmmword_235283260;
    *(_OWORD *)(v25 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v26 = v25;
      outlined init with copy of AnyTrackedValue(inited + 32, v25 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v34 = inited;
        LODWORD(v21) = v35 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v26 + 72);
        *(_OWORD *)(v26 + 128) = 0u;
        *(_QWORD *)(v26 + 144) = 0;
        *(_OWORD *)(v26 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v21, v26, v21, (uint64_t)v11);
        outlined init with copy of CVarArg?(v26 + 112, (uint64_t)v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v33 = *(void (**)(char *, uint64_t))(v38 + 8);
          v33(v37, v8);
          v33(v11, v8);
          LOBYTE(a1) = v36;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v27 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v28 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 24);
          v28(v11, v27, v8);
          v29 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v39;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(v21, v30, v21, (uint64_t)v11);
            outlined init with copy of CVarArg?(v31, (uint64_t)v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v29);
            swift_bridgeObjectRelease();
            if (!v44)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v29);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v32 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
            v28(v11, v32, v8);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, char a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  double v45;
  __int16 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - v15;
  if ((a2 & 1) != 0)
  {
    v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      *(double *)v43 = a3;
      *(double *)&v43[1] = a4;
      v44 = a1 & 1;
      v45 = a5;
      v46 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    v37 = v17;
    v38 = a1;
    v40 = v11;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v19 = AGTypeID.description.getter();
    v39 = v16;
    v20 = v19;
    v22 = v21;
    v23 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v24 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v20;
    *(_QWORD *)(inited + 64) = v24;
    *(_QWORD *)(inited + 40) = v22;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v23;
    *(_QWORD *)(inited + 104) = v24;
    *(_QWORD *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v13, v39, v10);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v42 = v26;
    v27 = swift_initStackObject();
    v41 = xmmword_235283260;
    *(_OWORD *)(v27 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v28 = v27;
      outlined init with copy of AnyTrackedValue(inited + 32, v27 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v36 = inited;
        LODWORD(v23) = v37 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v28 + 72);
        *(_OWORD *)(v28 + 128) = 0u;
        *(_QWORD *)(v28 + 144) = 0;
        *(_OWORD *)(v28 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v23, v28, v23, (uint64_t)v13);
        outlined init with copy of CVarArg?(v28 + 112, (uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (v45 == 0.0)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v35 = *(void (**)(char *, uint64_t))(v40 + 8);
          v35(v39, v10);
          v35(v13, v10);
          LOBYTE(a1) = v38;
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v29 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
          v30 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 24);
          v30(v13, v29, v10);
          v31 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v32 = swift_initStackObject();
            *(_OWORD *)(v32 + 16) = v41;
            *(_OWORD *)(v32 + 32) = 0u;
            *(_OWORD *)(v32 + 48) = 0u;
            *(_OWORD *)(v32 + 64) = 0u;
            *(_OWORD *)(v32 + 80) = 0u;
            *(_OWORD *)(v32 + 96) = 0u;
            *(_OWORD *)(v32 + 128) = 0u;
            *(_QWORD *)(v32 + 144) = 0;
            *(_OWORD *)(v32 + 112) = 0u;
            v33 = v32 + 112;
            specialized withKDebugValues(_:_:closure:)(v23, v32, v23, (uint64_t)v13);
            outlined init with copy of CVarArg?(v33, (uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v31);
            swift_bridgeObjectRelease();
            if (v45 == 0.0)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v31);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v34 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
            v30(v13, v34, v10);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized GestureBodyAccessor.updateBody(of:changed:)(char a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39[8];
  uint64_t (*v40)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v33 - v11;
  if ((a1 & 1) != 0)
  {
    v13 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v32 = swift_allocObject();
      *(double *)(v32 + 16) = a3;
      *(double *)(v32 + 24) = a2;
      v39[0] = 0;
      v40 = partial apply for closure #1 in DistanceGesture.body.getter;
      v41 = v32;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
      AGGraphSetOutputValue();
      swift_release();
      return;
    }
    v34 = v13;
    v36 = v7;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v15 = AGTypeID.description.getter();
    v35 = v12;
    v16 = v15;
    v18 = v17;
    v19 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v20 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v16;
    *(_QWORD *)(inited + 64) = v20;
    *(_QWORD *)(inited + 40) = v18;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v19;
    *(_QWORD *)(inited + 104) = v20;
    *(_QWORD *)(inited + 80) = v21;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v9, v35, v6);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v38 = v22;
    v23 = swift_initStackObject();
    v37 = xmmword_235283260;
    *(_OWORD *)(v23 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v24 = v23;
      outlined init with copy of AnyTrackedValue(inited + 32, v23 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v33 = inited;
        LODWORD(v19) = v34 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v24 + 72);
        *(_OWORD *)(v24 + 128) = 0u;
        *(_QWORD *)(v24 + 144) = 0;
        *(_OWORD *)(v24 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v19, v24, v19, (uint64_t)v9);
        outlined init with copy of CVarArg?(v24 + 112, (uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v42)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v31 = *(void (**)(char *, uint64_t))(v36 + 8);
          v31(v35, v6);
          v31(v9, v6);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v25 = __swift_project_value_buffer(v6, (uint64_t)static OSSignpostID.continuation);
          v26 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 24);
          v26(v9, v25, v6);
          v27 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v28 = swift_initStackObject();
            *(_OWORD *)(v28 + 16) = v37;
            *(_OWORD *)(v28 + 32) = 0u;
            *(_OWORD *)(v28 + 48) = 0u;
            *(_OWORD *)(v28 + 64) = 0u;
            *(_OWORD *)(v28 + 80) = 0u;
            *(_OWORD *)(v28 + 96) = 0u;
            *(_OWORD *)(v28 + 128) = 0u;
            *(_QWORD *)(v28 + 144) = 0;
            *(_OWORD *)(v28 + 112) = 0u;
            v29 = v28 + 112;
            specialized withKDebugValues(_:_:closure:)(v19, v28, v19, (uint64_t)v9);
            outlined init with copy of CVarArg?(v29, (uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v27);
            swift_bridgeObjectRelease();
            if (!v42)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v27);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v30 = __swift_project_value_buffer(v6, (uint64_t)static OSSignpostID.continuation);
            v26(v9, v30, v6);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized GestureBodyAccessor.updateBody(of:changed:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  if ((a1 & 1) != 0)
  {
    v9 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      specialized SingleTapGesture.body.getter((uint64_t)v34);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
      AGGraphSetOutputValue();
      outlined destroy of TypesettingConfiguration((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>);
      return;
    }
    v29 = v9;
    v31 = v3;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v11 = AGTypeID.description.getter();
    v30 = v8;
    v12 = v11;
    v14 = v13;
    v15 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v16 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 64) = v16;
    *(_QWORD *)(inited + 40) = v14;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 104) = v16;
    *(_QWORD *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v5, v30, v2);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v33 = v18;
    v19 = swift_initStackObject();
    v32 = xmmword_235283260;
    *(_OWORD *)(v19 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v28 = inited;
        LODWORD(v15) = v29 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(_QWORD *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v5);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        swift_bridgeObjectRelease();
        if (!v35)
        {
LABEL_14:
          outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
          swift_bridgeObjectRelease();
          v27 = *(void (**)(char *, uint64_t))(v31 + 8);
          v27(v30, v2);
          v27(v5, v2);
          goto LABEL_15;
        }
        outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v21 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
          v22 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 24);
          v22(v5, v21, v2);
          v23 = MEMORY[0x24BEE45D0];
          while (1)
          {
            v24 = swift_initStackObject();
            *(_OWORD *)(v24 + 16) = v32;
            *(_OWORD *)(v24 + 32) = 0u;
            *(_OWORD *)(v24 + 48) = 0u;
            *(_OWORD *)(v24 + 64) = 0u;
            *(_OWORD *)(v24 + 80) = 0u;
            *(_OWORD *)(v24 + 96) = 0u;
            *(_OWORD *)(v24 + 128) = 0u;
            *(_QWORD *)(v24 + 144) = 0;
            *(_OWORD *)(v24 + 112) = 0u;
            v25 = v24 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v24, v15, (uint64_t)v5);
            outlined init with copy of CVarArg?(v25, (uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            swift_bridgeObjectRelease();
            if (!v35)
              break;
            outlined destroy of ScrollStateRequest?((uint64_t)v34, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
            if (one-time initialization token for continuation != -1)
              swift_once();
            v26 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
            v22(v5, v26, v2);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t specialized AnyGestureInfo.eraseItem(info:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v10;

  v1 = *(_DWORD *)(v0 + 140);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *MEMORY[0x24BE096C0];
  swift_bridgeObjectRetain();
  AGGraphSetIndirectAttribute();
  if (v1 != v3)
    AGGraphSetIndirectAttribute();
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (_DWORD *)(v2 + 48);
    do
    {
      v6 = *((_QWORD *)v5 - 1);
      v7 = *v5;
      v5 += 6;
      v10 = v7;
      (*(void (**)(int *, ValueMetadata *, _UNKNOWN **))(v6 + 16))(&v10, &type metadata for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs(), &protocol witness table for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs());
      --v4;
    }
    while (v4);
    v8 = swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = swift_bridgeObjectRelease();
  }
  MEMORY[0x24BDAC7A8](v8);
  AGSubgraphApply();
  return AGSubgraphInvalidate();
}

id outlined copy of AnyGestureInfo<()>.Value?(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }
  return result;
}

uint64_t partial apply for closure #1 in AGSubgraphRef.willInvalidate(isInserted:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AGSubgraphRef.willInvalidate(isInserted:)(a1, *(_BYTE *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type AnyResetSeed<()> and conformance AnyResetSeed<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyResetSeed<()> and conformance AnyResetSeed<A>;
  if (!lazy protocol witness table cache variable for type AnyResetSeed<()> and conformance AnyResetSeed<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for AnyResetSeed<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyResetSeed);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyResetSeed<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyResetSeed<()> and conformance AnyResetSeed<A>);
  }
  return result;
}

__n128 partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  v6 = *(_OWORD *)(v2 + 80);
  v7 = *(_OWORD *)(v2 + 96);
  v8 = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  result = *(__n128 *)(v2 + 144);
  v10 = *(_OWORD *)(v2 + 160);
  v11 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(v2 + 185);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  v6 = *(_OWORD *)(v2 + 80);
  v7 = *(_OWORD *)(v2 + 96);
  v8 = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  result = *(__n128 *)(v2 + 144);
  v10 = *(_OWORD *)(v2 + 160);
  v11 = *(_OWORD *)(v2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(v2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(__int128 **)(v1 + 16);
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  result = (__n128)v2[8];
  v10 = v2[9];
  v11 = v2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)v2 + 176);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *(__int128 **)(v1 + 16);
  v3 = *v2;
  v4 = v2[2];
  *(_OWORD *)(a1 + 16) = v2[1];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v3;
  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[6];
  *(_OWORD *)(a1 + 80) = v2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  result = (__n128)v2[7];
  v9 = v2[8];
  v10 = v2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)v2 + 153);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v10;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  v7 = *(_OWORD *)(v2 + 96);
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  result = *(__n128 *)(v2 + 160);
  v11 = *(_OWORD *)(v2 + 176);
  v12 = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(v2 + 201);
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v12;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(__int128 **)(v1 + 16);
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  result = (__n128)v2[8];
  v10 = v2[9];
  v11 = v2[10];
  *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)v2 + 169);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

void type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryPositionAwareLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _SafeAreaRegionsIgnoringLayout, &type metadata for _SafeAreaRegionsIgnoringLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _SafeAreaRegionsIgnoringLayout, &type metadata for _SafeAreaRegionsIgnoringLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryPositionAwareLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>);
  }
}

void type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryPositionAwareLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout)
  {
    result = MEMORY[0x23B7C9C04]("q5:\x1B s\t", &type metadata for _SafeAreaIgnoringLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _SafeAreaIgnoringLayout, &type metadata for _SafeAreaIgnoringLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryPositionAwareLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>);
  }
}

uint64_t sub_234B11A94()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of _ViewListOutputs(uint64_t a1)
{
  destroy for _ViewListOutputs(a1);
  return a1;
}

uint64_t type metadata accessor for _ShapeView<Rectangle, MeshGradient>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle, MeshGradient>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, MeshGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t outlined consume of MeshGradient?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      result = swift_release();
      break;
    case 1:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout;
  if (!lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutPriorityLayout, &type metadata for LayoutPriorityLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout;
  if (!lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutPriorityLayout, &type metadata for LayoutPriorityLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>);
  }
}

uint64_t type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerRelativeShape._Inset, &type metadata for ContainerRelativeShape._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerRelativeShape._Inset, &type metadata for ContainerRelativeShape._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerRelativeShape._Inset, &type metadata for ContainerRelativeShape._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>);
  }
}

uint64_t type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerRelativeShape, &type metadata for ContainerRelativeShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerRelativeShape, &type metadata for ContainerRelativeShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void *partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(void *a1)
{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x261uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x221uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x1F9uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x201uLL);
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout;
  if (!lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout)
  {
    result = MEMORY[0x23B7C9C04]("A\";\x1Bx$\n", &type metadata for _FlexFrameLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout;
  if (!lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout)
  {
    result = MEMORY[0x23B7C9C04]("\r\";\x1B,$\n", &type metadata for _FlexFrameLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>);
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout;
  if (!lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _FrameLayout, &type metadata for _FrameLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout;
  if (!lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _FrameLayout, &type metadata for _FrameLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>);
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout;
  if (!lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AlignmentLayout, &type metadata for _AlignmentLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout;
  if (!lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AlignmentLayout, &type metadata for _AlignmentLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>);
  }
}

uint64_t type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Circle._Inset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Circle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Circle._Inset, &type metadata for Circle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Circle._Inset, &type metadata for Circle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Circle._Inset, &type metadata for Circle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Circle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>);
  }
}

uint64_t type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Ellipse._Inset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Ellipse._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset;
  if (!lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Ellipse._Inset, &type metadata for Ellipse._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset;
  if (!lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Ellipse._Inset, &type metadata for Ellipse._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset;
  if (!lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Ellipse._Inset, &type metadata for Ellipse._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>);
  }
}

uint64_t type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Capsule._Inset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Capsule._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Capsule._Inset, &type metadata for Capsule._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Capsule._Inset, &type metadata for Capsule._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Capsule._Inset, &type metadata for Capsule._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>);
  }
}

uint64_t type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnevenRoundedRectangle._Inset, &type metadata for UnevenRoundedRectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnevenRoundedRectangle._Inset, &type metadata for UnevenRoundedRectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnevenRoundedRectangle._Inset, &type metadata for UnevenRoundedRectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset);
  }
  return result;
}

__n128 partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v2 + 176);
  a1[10] = *(_OWORD *)(v2 + 160);
  a1[11] = v3;
  a1[12] = *(_OWORD *)(v2 + 192);
  *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)(v2 + 201);
  v4 = *(_OWORD *)(v2 + 112);
  a1[6] = *(_OWORD *)(v2 + 96);
  a1[7] = v4;
  v5 = *(_OWORD *)(v2 + 144);
  a1[8] = *(_OWORD *)(v2 + 128);
  a1[9] = v5;
  v6 = *(_OWORD *)(v2 + 48);
  a1[2] = *(_OWORD *)(v2 + 32);
  a1[3] = v6;
  v7 = *(_OWORD *)(v2 + 80);
  a1[4] = *(_OWORD *)(v2 + 64);
  a1[5] = v7;
  result = *(__n128 *)v2;
  v9 = *(_OWORD *)(v2 + 16);
  *a1 = *(_OWORD *)v2;
  a1[1] = v9;
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>);
  }
}

uint64_t type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RoundedRectangle._Inset, &type metadata for RoundedRectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RoundedRectangle._Inset, &type metadata for RoundedRectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RoundedRectangle._Inset, &type metadata for RoundedRectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>);
  }
}

uint64_t type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle._Inset, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Rectangle._Inset, &type metadata for Rectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Rectangle._Inset, &type metadata for Rectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Rectangle._Inset, &type metadata for Rectangle._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>);
  }
}

uint64_t type metadata accessor for _ShapeView<Circle, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Circle, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Circle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Circle and conformance Circle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Circle and conformance Circle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Circle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Ellipse, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Ellipse, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ellipse and conformance Ellipse()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Ellipse, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<Capsule, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Capsule, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Capsule, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Capsule and conformance Capsule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Capsule, &type metadata for Capsule);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Capsule, &type metadata for Capsule);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Capsule, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnevenRoundedRectangle, &type metadata for UnevenRoundedRectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnevenRoundedRectangle, &type metadata for UnevenRoundedRectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>);
  }
}

uint64_t type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<RoundedRectangle, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<RoundedRectangle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RoundedRectangle, &type metadata for RoundedRectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RoundedRectangle, &type metadata for RoundedRectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>);
  }
}

uint64_t sub_234B14604()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<Path, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Path, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<Path, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Path and conformance Path();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Path and conformance Path()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Path and conformance Path;
  if (!lazy protocol witness table cache variable for type Path and conformance Path)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Path, &type metadata for Path);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path and conformance Path);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Path and conformance Path;
  if (!lazy protocol witness table cache variable for type Path and conformance Path)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Path, &type metadata for Path);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path and conformance Path);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Path and conformance Path;
  if (!lazy protocol witness table cache variable for type Path and conformance Path)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Path, &type metadata for Path);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path and conformance Path);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(_OWORD *a1)
{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[25];
  _OWORD v38[11];
  _OWORD v39[2];

  v3 = *(__int128 **)(v1 + 16);
  v26 = *v3;
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[4];
  v29 = v3[3];
  v30 = v6;
  v27 = v4;
  v28 = v5;
  v7 = v3[5];
  v8 = v3[6];
  v9 = v3[8];
  v33 = v3[7];
  v34 = v9;
  v31 = v7;
  v32 = v8;
  v10 = v3[9];
  v11 = v3[10];
  v12 = v3[11];
  *(_OWORD *)&v37[9] = *(__int128 *)((char *)v3 + 185);
  v36 = v11;
  *(_OWORD *)v37 = v12;
  v35 = v10;
  v13 = a1[3];
  v38[2] = a1[2];
  v38[3] = v13;
  v14 = a1[1];
  v38[0] = *a1;
  v38[1] = v14;
  v15 = a1[7];
  v38[6] = a1[6];
  v38[7] = v15;
  v16 = a1[5];
  v38[4] = a1[4];
  v38[5] = v16;
  *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)a1 + 185);
  v17 = a1[11];
  v38[10] = a1[10];
  v39[0] = v17;
  v18 = a1[9];
  v38[8] = a1[8];
  v38[9] = v18;
  outlined retain of Path.Storage((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  v19 = *(_OWORD *)v37;
  a1[10] = v36;
  a1[11] = v19;
  *(_OWORD *)((char *)a1 + 185) = *(_OWORD *)&v37[9];
  v20 = v33;
  a1[6] = v32;
  a1[7] = v20;
  v21 = v35;
  a1[8] = v34;
  a1[9] = v21;
  v22 = v29;
  a1[2] = v28;
  a1[3] = v22;
  v23 = v31;
  a1[4] = v30;
  a1[5] = v23;
  v24 = v27;
  *a1 = v26;
  a1[1] = v24;
  return outlined retain of Path.Storage((uint64_t)&v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v19[11];
  _BYTE v20[25];

  v2 = *(_OWORD **)(v1 + 16);
  v19[0] = *v2;
  v3 = v2[1];
  v4 = v2[2];
  v5 = v2[4];
  v19[3] = v2[3];
  v19[4] = v5;
  v19[1] = v3;
  v19[2] = v4;
  v6 = v2[5];
  v7 = v2[6];
  v8 = v2[8];
  v19[7] = v2[7];
  v19[8] = v8;
  v19[5] = v6;
  v19[6] = v7;
  v9 = v2[9];
  v10 = v2[10];
  v11 = v2[11];
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v2 + 185);
  v19[10] = v10;
  *(_OWORD *)v20 = v11;
  v19[9] = v9;
  v12 = v2[11];
  a1[10] = v2[10];
  a1[11] = v12;
  *(_OWORD *)((char *)a1 + 185) = *(_OWORD *)((char *)v2 + 185);
  v13 = v2[7];
  a1[6] = v2[6];
  a1[7] = v13;
  v14 = v2[9];
  a1[8] = v2[8];
  a1[9] = v14;
  v15 = v2[3];
  a1[2] = v2[2];
  a1[3] = v15;
  v16 = v2[5];
  a1[4] = v2[4];
  a1[5] = v16;
  v17 = v2[1];
  *a1 = *v2;
  a1[1] = v17;
  return outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<AnyShape, ForegroundStyle>;
  if (!lazy cache variable for type metadata for _ShapeView<AnyShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type AnyShape and conformance AnyShape();
    type metadata accessor for _ShapeView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyShape and conformance AnyShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyShape and conformance AnyShape;
  if (!lazy protocol witness table cache variable for type AnyShape and conformance AnyShape)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyShape, &type metadata for AnyShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyShape and conformance AnyShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyShape and conformance AnyShape;
  if (!lazy protocol witness table cache variable for type AnyShape and conformance AnyShape)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyShape, &type metadata for AnyShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyShape and conformance AnyShape);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for LeafLayoutEngine(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<AnyShape>>);
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<AnyShape>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderData(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<AnyShape>>);
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledResponderFilter(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>);
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<AnyShape>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v4 = type metadata accessor for ShapeStyledDisplayList(a1, v2, (uint64_t)&protocol witness table for AnimatedShape<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<AnyShape>>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  }
}

uint64_t outlined consume of _EnvironmentKeyWritingModifier<Font?>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(_BYTE *a1@<X8>)
{
  return specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()(a1);
}

uint64_t outlined copy of _EnvironmentKeyWritingModifier<Font?>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for WritableKeyPath<EnvironmentValues, Font?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Font?>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = type metadata accessor for WritableKeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Font?>);
  }
}

void type metadata accessor for ColorBox<CGColorRef>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ColorBox<CGColorRef>)
  {
    type metadata accessor for CGColorRef(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v6 = type metadata accessor for ColorBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ColorBox<CGColorRef>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider;
  if (!lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.PlatformFontProvider, &type metadata for Font.PlatformFontProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider;
  if (!lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.PlatformFontProvider, &type metadata for Font.PlatformFontProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider;
  if (!lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.PlatformFontProvider, &type metadata for Font.PlatformFontProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>(255, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340]);
    v3 = v2;
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255);
    v6 = type metadata accessor for ModifiedContent(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    v9 = type metadata accessor for ModifiedContent(a1, (uint64_t)&type metadata for SummarySymbol, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v9 = type metadata accessor for ModifiedContent(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>;
  if (!lazy cache variable for type metadata for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
    lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>();
    type metadata accessor for _OverlayPreferenceModifier();
  }
  return result;
}

uint64_t type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>;
  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(255);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    type metadata accessor for ForEach();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>)
  {
    v1 = type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
    v2 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x23B7C9C04]("q&:\x1BHj\t", v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for _OffsetEffect;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[6];

  if (!*a2)
  {
    v6 = MEMORY[0x24BEE1768];
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v8 = v7;
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(255);
    v10 = v9;
    v11 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    v12 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    v15[0] = v8;
    v15[1] = v6;
    v15[2] = v10;
    v15[3] = v11;
    v15[4] = MEMORY[0x24BEE1778];
    v15[5] = v12;
    v13 = a3(a1, v15);
    if (!v14)
      atomic_store(v13, a2);
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout;
  if (!lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AspectRatioLayout, &type metadata for _AspectRatioLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout;
  if (!lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AspectRatioLayout, &type metadata for _AspectRatioLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>);
  }
}

uint64_t sub_234B156BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DistanceGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in DistanceGesture.body.getter(a1, a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 24));
}

uint64_t type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>;
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>)
  {
    type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, (uint64_t)&protocol conformance descriptor for StateContainerGesture<A, B, C>);
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>;
  if (!lazy cache variable for type metadata for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>)
    type metadata accessor for StateContainerGesture();
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListener<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>);
  }
  return result;
}

uint64_t outlined copy of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
    return swift_retain();
  if (!a10)
    return outlined copy of SpatialEvent?(result, a2, a3);
  return result;
}

uint64_t outlined copy of SpatialEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_retain();
  return result;
}

uint64_t outlined consume of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
    return swift_release();
  if (!a10)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined init with take of (key: EventID, value: EventType)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: EventID, value: EventType), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: EventID, value: EventType)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: EventID, value: EventType))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType));
  }
}

uint64_t outlined init with copy of CVarArg?(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v7;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined consume of GesturePhase<SpatialEvent>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255)
    return outlined consume of GesturePhase<SpatialEvent>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

void type metadata accessor for (EventID, EventType)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (EventID, EventType))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (EventID, EventType));
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout;
  if (!lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _PaddingLayout, &type metadata for _PaddingLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout;
  if (!lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _PaddingLayout, &type metadata for _PaddingLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>);
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout;
  if (!lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _FixedSizeLayout, &type metadata for _FixedSizeLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout;
  if (!lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _FixedSizeLayout, &type metadata for _FixedSizeLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>);
  }
}

uint64_t type metadata accessor for _ShapeView<Rectangle, AngularGradient>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle, AngularGradient>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, AngularGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle, EllipticalGradient>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, EllipticalGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<Rectangle, RadialGradient>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle, RadialGradient>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, RadialGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1, void (*a2)(_OWORD *), uint64_t (*a3)(__int128 *))
{
  uint64_t v3;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  _OWORD v45[13];
  char v46;

  v6 = *(__int128 **)(v3 + 16);
  v7 = v6[1];
  v31 = *v6;
  v32 = v7;
  v8 = v6[2];
  v9 = v6[3];
  v10 = v6[5];
  v35 = v6[4];
  v36 = v10;
  v33 = v8;
  v34 = v9;
  v11 = v6[6];
  v12 = v6[7];
  v13 = v6[9];
  v39 = v6[8];
  v40 = v13;
  v37 = v11;
  v38 = v12;
  v14 = v6[10];
  v15 = v6[11];
  v16 = v6[12];
  v44 = *((_BYTE *)v6 + 208);
  v42 = v15;
  v43 = v16;
  v41 = v14;
  v17 = *(_OWORD *)(a1 + 16);
  v45[0] = *(_OWORD *)a1;
  v45[1] = v17;
  v18 = *(_OWORD *)(a1 + 80);
  v45[4] = *(_OWORD *)(a1 + 64);
  v45[5] = v18;
  v19 = *(_OWORD *)(a1 + 48);
  v45[2] = *(_OWORD *)(a1 + 32);
  v45[3] = v19;
  v20 = *(_OWORD *)(a1 + 144);
  v45[8] = *(_OWORD *)(a1 + 128);
  v45[9] = v20;
  v21 = *(_OWORD *)(a1 + 112);
  v45[6] = *(_OWORD *)(a1 + 96);
  v45[7] = v21;
  v46 = *(_BYTE *)(a1 + 208);
  v22 = *(_OWORD *)(a1 + 192);
  v23 = *(_OWORD *)(a1 + 160);
  v45[11] = *(_OWORD *)(a1 + 176);
  v45[12] = v22;
  v45[10] = v23;
  a2(v45);
  v24 = v42;
  *(_OWORD *)(a1 + 160) = v41;
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = v43;
  *(_BYTE *)(a1 + 208) = v44;
  v25 = v38;
  *(_OWORD *)(a1 + 96) = v37;
  *(_OWORD *)(a1 + 112) = v25;
  v26 = v40;
  *(_OWORD *)(a1 + 128) = v39;
  *(_OWORD *)(a1 + 144) = v26;
  v27 = v34;
  *(_OWORD *)(a1 + 32) = v33;
  *(_OWORD *)(a1 + 48) = v27;
  v28 = v36;
  *(_OWORD *)(a1 + 64) = v35;
  *(_OWORD *)(a1 + 80) = v28;
  v29 = v32;
  *(_OWORD *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v29;
  return a3(&v31);
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t (*a1)(_OWORD *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[13];
  char v22;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v3 + 16);
  v21[0] = *(_OWORD *)v3;
  v21[1] = v4;
  v5 = *(_OWORD *)(v3 + 32);
  v6 = *(_OWORD *)(v3 + 48);
  v7 = *(_OWORD *)(v3 + 80);
  v21[4] = *(_OWORD *)(v3 + 64);
  v21[5] = v7;
  v21[2] = v5;
  v21[3] = v6;
  v8 = *(_OWORD *)(v3 + 96);
  v9 = *(_OWORD *)(v3 + 112);
  v10 = *(_OWORD *)(v3 + 144);
  v21[8] = *(_OWORD *)(v3 + 128);
  v21[9] = v10;
  v21[6] = v8;
  v21[7] = v9;
  v11 = *(_OWORD *)(v3 + 160);
  v12 = *(_OWORD *)(v3 + 176);
  v13 = *(_OWORD *)(v3 + 192);
  v22 = *(_BYTE *)(v3 + 208);
  v21[11] = v12;
  v21[12] = v13;
  v21[10] = v11;
  v14 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(a2 + 176) = v14;
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(v3 + 192);
  *(_BYTE *)(a2 + 208) = *(_BYTE *)(v3 + 208);
  v15 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(a2 + 112) = v15;
  v16 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(a2 + 144) = v16;
  v17 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a2 + 48) = v17;
  v18 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(a2 + 80) = v18;
  v19 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v19;
  return a1(v21);
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, RadialGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeView<Rectangle, LinearGradient>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for _ShapeView<Rectangle, LinearGradient>;
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, LinearGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    type metadata accessor for _ShapeView();
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

double partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = specialized closure #1 in StatefulRule<>.update<A>(to:)(a1, *(_QWORD *)(v1 + 16)).n128_u64[0];
  return result;
}

double partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = specialized closure #2 in StatefulRule<>.update<A>(to:)(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t outlined copy of SafeAreaInsets.OptionalValue?(uint64_t result)
{
  if (result != 1)
    return swift_retain();
  return result;
}

uint64_t outlined consume of Transaction?(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t sub_234B1675C()
{
  return swift_deallocObject();
}

uint64_t sub_234B1676C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void outlined consume of DynamicViewContainer<AnyView>.Value?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)

}

uint64_t sub_234B1679C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in RepeatPhase.updateValue()()
{
  return closure #2 in RepeatPhase.updateValue()();
}

uint64_t outlined consume of GesturePhase<TappableEvent>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1)
    return swift_release();
  if (!a4)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>;
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilter);
    type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>();
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<TappableEvent> and conformance EventFilter<A>, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilter, (uint64_t)&protocol conformance descriptor for EventFilter<A>);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>;
  if (!lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>)
  {
    type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(255);
    type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent> and conformance Map2Gesture<A, B, C>, type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (uint64_t)&protocol conformance descriptor for Map2Gesture<A, B, C>);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(uint64_t a1)
{
  return type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(a1, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, (void (*)(void))lazy protocol witness table accessor for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>);
}

uint64_t type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>;
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
    lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture();
    type metadata accessor for ModifierGesture();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CoordinateSpaceGesture<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture;
  if (!lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DistanceGesture, &type metadata for DistanceGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
}

uint64_t type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>;
  if (!lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>)
  {
    type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, (void (*)(void))lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>);
    type metadata accessor for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>();
    lazy protocol witness table accessor for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    a4();
    type metadata accessor for Map2Gesture();
  }
  return result;
}

uint64_t type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>;
  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DurationGesture);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DurationGesture, (uint64_t)&protocol conformance descriptor for DurationGesture<A>);
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, (uint64_t)&type metadata for TappableEvent, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListener<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
}

uint64_t type metadata accessor for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>;
  if (!lazy cache variable for type metadata for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DependentGesture);
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>();
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type DependentGesture<TappableEvent> and conformance DependentGesture<A>, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DependentGesture, (uint64_t)&protocol conformance descriptor for DependentGesture<A>);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>;
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MapGesture);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
    lazy protocol witness table accessor for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    type metadata accessor for ModifierGesture();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MapGesture);
    result = MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>;
  if (!lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>)
  {
    v1 = type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, (void (*)(void))lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Gesture<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CoordinateSpace(a2, a1);
  return a2;
}

uint64_t sub_234B1709C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Gesture.discrete(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  char v11;

  v3 = *(unsigned __int8 *)(v2 + 16);
  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a1 + 24);
  v8 = v7 == 1;
  v9 = (v3 & v8) == 0;
  if ((v3 & v8) != 0)
    v10 = *(_QWORD *)a1;
  else
    v10 = *(_QWORD *)a1;
  if (v9)
    v11 = *(_BYTE *)(a1 + 24);
  else
    v11 = 0;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v11;
  return outlined copy of GesturePhase<TappableEvent>(v5, v4, v6, v7);
}

uint64_t sub_234B170E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(a1, *(_BYTE *)(v1 + 16), *(uint64_t (**)(uint64_t *))(v1 + 24));
}

uint64_t outlined copy of GesturePhase<TappableEvent>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1)
    return swift_retain();
  if (!a4)
    return outlined copy of SpatialEvent?(result, a2, a3);
  return result;
}

uint64_t type metadata accessor for (_:_:)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    type metadata accessor for MutableBox<CachedEnvironment>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    result = swift_getFunctionTypeMetadata2();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<TappableEvent>?(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return outlined consume of GesturePhase<TappableEvent>(result, a2, a3, a4);
  return result;
}

void type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v9[0] = &type metadata for _VariadicView_Children;
    v9[1] = MEMORY[0x24BEE23D0];
    v9[2] = &type metadata for _VariadicView_Children.Element;
    v9[3] = v6;
    v9[4] = MEMORY[0x24BEE23D8];
    v9[5] = &protocol witness table for _VariadicView_Children.Element;
    v7 = a3(a1, v9);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_234B1727C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata accessor for _NativeDictionary<UInt32, Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NativeDictionary<UInt32, Int>)
  {
    v0 = type metadata accessor for _NativeDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<UInt32, Int>);
  }
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)()
{
  uint64_t v0;

  return closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v0);
}

void partial apply for closure #1 in DynamicLayoutViewAdaptor.removeItemLayout(uniqueId:itemLayout:)(int a1)
{
  uint64_t v1;

  closure #1 in DynamicLayoutViewAdaptor.removeItemLayout(uniqueId:itemLayout:)(a1, *(_DWORD *)(v1 + 16));
}

unint64_t partial apply for specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(a1, *(unint64_t **)(v1 + 16), *(unint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_BYTE **)(v1 + 64));
}

uint64_t partial apply for closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:)(a1, *(void (**)(_QWORD *))(v1 + 16));
}

uint64_t outlined init with copy of DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DynamicViewListItem(a2, a1);
  return a2;
}

uint64_t outlined destroy of DynamicViewListItem(uint64_t a1)
{
  destroy for DynamicViewListItem(a1);
  return a1;
}

uint64_t outlined assign with copy of DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  assignWithCopy for DynamicViewListItem(a2, a1);
  return a2;
}

uint64_t sub_234B173E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)()
{
  uint64_t v0;

  return closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(_DWORD *a1)
{
  return closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(a1);
}

uint64_t sub_234B17400()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>;
  if (!lazy protocol witness table cache variable for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for InterpolatedDisplayList<ResolvedStyledText>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedStyledText, (uint64_t)&protocol witness table for ResolvedStyledText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for InterpolatedDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>);
  }
  return result;
}

uint64_t sub_234B17478()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234B1749C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ResolvedStyledText.requiresTransition(to:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  return closure #1 in ResolvedStyledText.requiresTransition(to:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void **)(v4 + 24), *(void **)(v4 + 32));
}

uint64_t sub_234B174D4()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(_QWORD *a1)
{
  uint64_t v1;

  return specialized closure #1 in StatefulRule<>.update<A>(to:)(a1, *(uint64_t **)(v1 + 16));
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #2 in StatefulRule<>.update<A>(to:)(*(uint64_t **)(v1 + 16), a1);
}

void type metadata accessor for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyledResponderData<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
    v4 = type metadata accessor for LeafViewResponder(a1, v2, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>);
  }
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void outlined copy of _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  if (((a13 >> 21) & 7) <= 3)
    __asm { BR              X10 }
}

uint64_t sub_234B176B8()
{
  swift_retain();
  return swift_retain();
}

id sub_234B176D0(uint64_t a1, char a2)
{
  void *v2;

  return outlined copy of GraphicsImage.Contents?(v2, a2);
}

uint64_t sub_234B176E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  return outlined copy of DisplayList.Item.Value(a6, a7);
}

void type metadata accessor for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _UNKNOWN **))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(255, &lazy cache variable for type metadata for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextLayoutComputer.Engine);
    v7 = a3(a1, v6, &protocol witness table for SizeFittingTextLayoutComputer.Engine<A, B>);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = type metadata accessor for ResolvedTextHelper(255);
    v8[1] = &type metadata for StickyTextSizeFittingLogic;
    v8[2] = &protocol witness table for ResolvedTextHelper;
    v8[3] = &protocol witness table for StickyTextSizeFittingLogic;
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_234B17884()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:)()
{
  uint64_t v0;

  return specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:)(*(_BYTE **)(v0 + 16));
}

BOOL partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:)@<W0>(_BYTE *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  return partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:)(a1, a2, a3);
}

{
  uint64_t v3;
  _BOOL8 result;

  result = specialized SizeFittingTextCacheValue.fits(_:)(*(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_BYTE *)(v3 + 40), a2, a3);
  *a1 = result;
  return result;
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>.Engine, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>);
  }
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>.Engine, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>);
  }
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>.Engine, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>);
  }
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>.Engine, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>);
  }
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>);
  }
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>);
  }
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;

  v2 = *(uint64_t **)(v1 + 16);
  v3 = *v2;
  v4 = *((_BYTE *)v2 + 8);
  LOBYTE(v2) = *((_BYTE *)v2 + 9);
  *(_QWORD *)result = v3;
  *(_BYTE *)(result + 8) = v4;
  *(_BYTE *)(result + 9) = (_BYTE)v2;
  return result;
}

void partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;

  v2 = *(uint64_t **)(v1 + 16);
  v3 = *v2;
  v4 = *((_BYTE *)v2 + 8);
  LOBYTE(v2) = *((_BYTE *)v2 + 9);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = (_BYTE)v2;
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>.Engine, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>);
  }
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>.Engine, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>);
  }
}

double _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 175) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>;
  if (!lazy protocol witness table cache variable for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for InterpolatedDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for InterpolatedDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>);
  }
  return result;
}

uint64_t outlined release of InterpolatedDisplayList<Image.Resolved>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(void **)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 136);
  v16 = *(_OWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 152);
  v12 = *(_OWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 168);
  v11 = *(_OWORD *)(a1 + 200);
  v8 = *(_QWORD *)(a1 + 216);
  v9 = *(void **)(a1 + 224);
  swift_release();
  outlined consume of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

void outlined consume of Image.Resolved?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a16 >> 1 != 4294967294)
  {
    outlined consume of GraphicsImage.Contents?(a1, a2);
    outlined consume of AccessibilityImageLabel?(a14, a15, a16);
    swift_unknownObjectRelease();
    swift_release();

  }
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWOg(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 120) >> 1;
  v2 = -2 - v1;
  if (-2 - (int)v1 < 0)
    v2 = -1;
  if (v1 > 0x80000000)
    return (v2 + 1);
  else
    return 0;
}

uint64_t outlined release of Image.Resolved?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16));
  return a1;
}

void *outlined copy of Image.Resolved?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  id v22;

  if (a16 >> 1 != 4294967294)
  {
    outlined copy of GraphicsImage.Contents?(result, a2);
    outlined copy of AccessibilityImageLabel?(a14, a15, a16);
    v22 = a22;
    swift_unknownObjectRetain();
    return (void *)swift_retain();
  }
  return result;
}

void type metadata accessor for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
    v4 = type metadata accessor for LeafViewResponder(a1, v2, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>);
  }
}

double _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined init with take of ShapeStyledResponderData<Image.Resolved>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ShapeStyledResponderData<Image.Resolved>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ShapeStyledResponderData<Image.Resolved>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>?)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>?);
  }
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t outlined retain of ShapeStyledResponderData<Image.Resolved>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  v6 = v5;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ShapeStyledResponderData<Image.Resolved>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(_BYTE *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return a1;
}

uint64_t outlined release of Image.Resolved(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(_BYTE *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_release();

  return a1;
}

void type metadata accessor for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LeafLayoutEngine<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
    v4 = type metadata accessor for LayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>);
  }
}

void type metadata accessor for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LeafLayoutEngine<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
    v4 = type metadata accessor for TracingLayoutEngineBox(a1, v2, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>);
  }
}

uint64_t outlined retain of Image.Resolved(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  v6 = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

void type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    v0 = type metadata accessor for _NativeDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>);
  }
}

void destroy for Image.Resolved(uint64_t a1)
{
  int v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 255)
    outlined consume of GraphicsImage.Contents(*(void **)a1, v2);
  v3 = *(_QWORD *)(a1 + 120);
  if (v3 >> 1 != 0xFFFFFFFF)
    outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v3);
  swift_unknownObjectRelease();
  swift_release();

}

uint64_t initializeWithCopy for Image.Resolved(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }
  else
  {
    v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((_BYTE *)a2 + 8));
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  v7 = a2[15];
  *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
  if (v7 >> 1 == 0xFFFFFFFF)
  {
    v8 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v8;
  }
  else
  {
    v9 = a2[13];
    v10 = a2[14];
    v11 = a2[16];
    outlined copy of AccessibilityImageLabel(v9, v10, v7);
    *(_QWORD *)(a1 + 104) = v9;
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v7;
    *(_QWORD *)(a1 + 128) = v11;
  }
  v12 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v12;
  *(_WORD *)(a1 + 152) = *((_WORD *)a2 + 76);
  *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 39);
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  v13 = (void *)a2[21];
  *(_QWORD *)(a1 + 168) = v13;
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_BYTE *)(a1 + 178) = *((_BYTE *)a2 + 178);
  swift_unknownObjectRetain();
  swift_retain();
  v14 = v13;
  return a1;
}

uint64_t assignWithCopy for Image.Resolved(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  char v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  void *v31;
  id v32;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      v10 = *(id *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)a1 = v10;
    }
    else
    {
      v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    v9 = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = v9;
  }
  else
  {
    v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
    v6 = *(void **)a1;
    *(_QWORD *)a1 = v5;
    v7 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  v14 = (_OWORD *)(a1 + 104);
  v15 = (_OWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 120) >> 1 == 0xFFFFFFFFLL)
  {
    if (v17 == 0x1FFFFFFFELL)
    {
      v18 = *(_OWORD *)(a2 + 120);
      *v14 = *v15;
      *(_OWORD *)(a1 + 120) = v18;
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 104);
      v21 = *(_QWORD *)(a2 + 112);
      v22 = *(_QWORD *)(a2 + 128);
      outlined copy of AccessibilityImageLabel(v20, v21, *(_QWORD *)(a2 + 120));
      *(_QWORD *)(a1 + 104) = v20;
      *(_QWORD *)(a1 + 112) = v21;
      *(_QWORD *)(a1 + 120) = v16;
      *(_QWORD *)(a1 + 128) = v22;
    }
  }
  else if (v17 == 0x1FFFFFFFELL)
  {
    outlined destroy of AccessibilityImageLabel((uint64_t *)(a1 + 104));
    v19 = *(_OWORD *)(a2 + 120);
    *v14 = *v15;
    *(_OWORD *)(a1 + 120) = v19;
  }
  else
  {
    v23 = *(_QWORD *)(a2 + 104);
    v24 = *(_QWORD *)(a2 + 112);
    v25 = *(_QWORD *)(a2 + 128);
    outlined copy of AccessibilityImageLabel(v23, v24, *(_QWORD *)(a2 + 120));
    v26 = *(_QWORD *)(a1 + 104);
    v27 = *(_QWORD *)(a1 + 112);
    v28 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = v23;
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 128) = v25;
    outlined consume of AccessibilityImageLabel(v26, v27, v28);
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v29 = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = v29;
  v30 = *(void **)(a1 + 168);
  v31 = *(void **)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v31;
  v32 = v31;

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  return a1;
}

uint64_t assignWithTake for Image.Resolved(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  void *v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 != 255)
  {
    v5 = *(unsigned __int8 *)(a2 + 8);
    if (v5 != 255)
    {
      v6 = *(void **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = v5;
      outlined consume of GraphicsImage.Contents(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of GraphicsImage.Contents(a1);
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v8 = *(_QWORD *)(a1 + 120);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  if (v8 >> 1 != 0xFFFFFFFF)
  {
    v9 = *(_QWORD *)(a2 + 120);
    if (v9 >> 1 != 0xFFFFFFFF)
    {
      v11 = *(_QWORD *)(a2 + 128);
      v12 = *(_QWORD *)(a1 + 104);
      v13 = *(_QWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = v9;
      *(_QWORD *)(a1 + 128) = v11;
      outlined consume of AccessibilityImageLabel(v12, v13, v8);
      goto LABEL_11;
    }
    outlined destroy of AccessibilityImageLabel((uint64_t *)(a1 + 104));
  }
  v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v10;
LABEL_11:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v14 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.Resolved(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 179))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 120) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.Resolved(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 178) = 0;
    *(_WORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 179) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 179) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 104) = 0;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 2 * ~a2;
      *(_QWORD *)(result + 128) = 0;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedImageLayoutEngine()
{
  return &unk_25063B6D0;
}

uint64_t sub_234B18E68()
{
  return swift_deallocObject();
}

void type metadata accessor for (Spacing.Key, Spacing.Value)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Spacing.Key, Spacing.Value))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacing.Key, Spacing.Value));
  }
}

uint64_t _ViewInputs.requestedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t PlatformImageRepresentableContext.image.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];

  v2 = v1[9];
  v3 = v1[7];
  v24 = v1[8];
  v25 = v2;
  v4 = v1[9];
  v26[0] = v1[10];
  v5 = v1[5];
  v7 = v1[3];
  v20 = v1[4];
  v6 = v20;
  v21 = v5;
  v8 = v1[5];
  v9 = v1[7];
  v22 = v1[6];
  v10 = v22;
  v23 = v9;
  v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  v12 = v1[3];
  v14 = *v1;
  v13 = v1[1];
  v18 = v1[2];
  v15 = v18;
  v19 = v12;
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v1[10];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v1 + 175);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v1 + 175);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

__n128 PlatformImageRepresentableContext.image.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  _OWORD v14[10];
  _OWORD v15[2];

  v3 = *(_OWORD *)(v1 + 144);
  v14[8] = *(_OWORD *)(v1 + 128);
  v14[9] = v3;
  v15[0] = *(_OWORD *)(v1 + 160);
  *(_DWORD *)((char *)v15 + 15) = *(_DWORD *)(v1 + 175);
  v4 = *(_OWORD *)(v1 + 80);
  v14[4] = *(_OWORD *)(v1 + 64);
  v14[5] = v4;
  v5 = *(_OWORD *)(v1 + 112);
  v14[6] = *(_OWORD *)(v1 + 96);
  v14[7] = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v14[1] = v6;
  v7 = *(_OWORD *)(v1 + 48);
  v14[2] = *(_OWORD *)(v1 + 32);
  v14[3] = v7;
  outlined release of Image.Resolved((uint64_t)v14);
  v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v1 + 144) = v8;
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(a1 + 160);
  *(_DWORD *)(v1 + 175) = *(_DWORD *)(a1 + 175);
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80) = v9;
  v10 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 112) = v10;
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v11;
  result = *(__n128 *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v13;
  return result;
}

uint64_t (*PlatformImageRepresentableContext.image.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformImageRepresentableContext.tintColor.getter()
{
  return swift_retain();
}

uint64_t PlatformImageRepresentableContext.tintColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 184) = a1;
  return result;
}

uint64_t (*PlatformImageRepresentableContext.tintColor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformImageRepresentableContext.foregroundStyle.getter()
{
  return swift_retain();
}

uint64_t PlatformImageRepresentableContext.foregroundStyle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 192) = a1;
  return result;
}

uint64_t (*PlatformImageRepresentableContext.foregroundStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.requestedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t _GraphInputs.requestedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t _GraphInputs.requestedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*_ViewInputs.requestedImageRepresentation.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedImageRepresentation.modify;
}

void _ViewInputs.requestedImageRepresentation.modify(char **a1, char a2)
{
  _ViewInputs.requestedImageRepresentation.modify(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*_GraphInputs.requestedImageRepresentation.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedImageRepresentation.modify;
}

uint64_t PlatformNamedImageRepresentableContext.image.getter()
{
  return swift_retain();
}

uint64_t PlatformNamedImageRepresentableContext.image.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*PlatformNamedImageRepresentableContext.image.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformNamedImageRepresentableContext.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t PlatformNamedImageRepresentableContext.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  swift_release();
  result = swift_release();
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*PlatformNamedImageRepresentableContext.environment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.requestedNamedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t _ViewInputs.requestedImageRepresentation.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = a1(v3);
  if (v4)
    v5 = *(_QWORD *)(v4 + 72);
  else
    v5 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v5;
}

uint64_t key path getter for _ViewInputs.requestedImageRepresentation : _ViewInputs@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *a1;
  v8 = a1[1];
  swift_retain();
  a5(a2, v7, v8, &v10);
  return swift_release();
}

uint64_t _ViewInputs.requestedNamedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t _ViewInputs.requestedImageRepresentation.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v3;
  uint64_t v8;

  swift_retain();
  a3(v3, a1, a2, &v8);
  return swift_release();
}

uint64_t _GraphInputs.requestedNamedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t _GraphInputs.requestedNamedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*_ViewInputs.requestedNamedImageRepresentation.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedNamedImageRepresentation.modify;
}

void _ViewInputs.requestedNamedImageRepresentation.modify(char **a1, char a2)
{
  _ViewInputs.requestedImageRepresentation.modify(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

void _ViewInputs.requestedImageRepresentation.modify(char **a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t, char *))
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v5 = *a1;
  v6 = *((_QWORD *)*a1 + 4);
  v7 = *(_QWORD *)*a1;
  v8 = *((_QWORD *)*a1 + 1);
  swift_retain();
  if ((a2 & 1) != 0)
    v9 = v5 + 16;
  else
    v9 = v5 + 24;
  a3(v6, v7, v8, v9);
  swift_release();
  free(v5);
}

uint64_t key path getter for _GraphInputs.requestedImageRepresentation : _GraphInputs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = a4(a1, a2, a3, a4, a5, a6);
  *a7 = result;
  a7[1] = v9;
  return result;
}

void (*_GraphInputs.requestedNamedImageRepresentation.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedNamedImageRepresentation.modify;
}

uint64_t sub_234B197C4@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedImageRepresentation : _ViewInputs(_ViewInputs.requestedImageRepresentation.getter, a1);
}

uint64_t sub_234B197E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234B197FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return key path getter for _GraphInputs.requestedImageRepresentation : _GraphInputs(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))_GraphInputs.requestedImageRepresentation.getter, a4, a5, a6);
}

uint64_t sub_234B19818(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234B19834@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedImageRepresentation : _ViewInputs(_ViewInputs.requestedNamedImageRepresentation.getter, a1);
}

uint64_t sub_234B19850(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234B1986C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return key path getter for _GraphInputs.requestedImageRepresentation : _GraphInputs(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))_GraphInputs.requestedNamedImageRepresentation.getter, a4, a5, a6);
}

uint64_t sub_234B19888(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t dispatch thunk of static PlatformImageRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformImageRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t destroy for PlatformImageRepresentableContext(uint64_t a1)
{
  int v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 255)
    outlined consume of GraphicsImage.Contents(*(void **)a1, v2);
  v3 = *(_QWORD *)(a1 + 120);
  if (v3 >> 1 != 0xFFFFFFFF)
    outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v3);
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PlatformImageRepresentableContext(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }
  else
  {
    v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((_BYTE *)a2 + 8));
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  v7 = a2[15];
  *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
  if (v7 >> 1 == 0xFFFFFFFF)
  {
    v8 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v8;
  }
  else
  {
    v9 = a2[13];
    v10 = a2[14];
    v11 = a2[16];
    outlined copy of AccessibilityImageLabel(v9, v10, v7);
    *(_QWORD *)(a1 + 104) = v9;
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v7;
    *(_QWORD *)(a1 + 128) = v11;
  }
  v12 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v12;
  *(_WORD *)(a1 + 152) = *((_WORD *)a2 + 76);
  *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 39);
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  v13 = (void *)a2[21];
  *(_QWORD *)(a1 + 168) = v13;
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_BYTE *)(a1 + 178) = *((_BYTE *)a2 + 178);
  v15 = a2[23];
  v14 = a2[24];
  *(_QWORD *)(a1 + 184) = v15;
  *(_QWORD *)(a1 + 192) = v14;
  swift_unknownObjectRetain();
  swift_retain();
  v16 = v13;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatformImageRepresentableContext(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  char v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  void *v31;
  id v32;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      v10 = *(id *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)a1 = v10;
    }
    else
    {
      v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    v9 = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = v9;
  }
  else
  {
    v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
    v6 = *(void **)a1;
    *(_QWORD *)a1 = v5;
    v7 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  v14 = (_OWORD *)(a1 + 104);
  v15 = (_OWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 120) >> 1 == 0xFFFFFFFFLL)
  {
    if (v17 == 0x1FFFFFFFELL)
    {
      v18 = *(_OWORD *)(a2 + 120);
      *v14 = *v15;
      *(_OWORD *)(a1 + 120) = v18;
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 104);
      v21 = *(_QWORD *)(a2 + 112);
      v22 = *(_QWORD *)(a2 + 128);
      outlined copy of AccessibilityImageLabel(v20, v21, *(_QWORD *)(a2 + 120));
      *(_QWORD *)(a1 + 104) = v20;
      *(_QWORD *)(a1 + 112) = v21;
      *(_QWORD *)(a1 + 120) = v16;
      *(_QWORD *)(a1 + 128) = v22;
    }
  }
  else if (v17 == 0x1FFFFFFFELL)
  {
    outlined destroy of AccessibilityImageLabel((uint64_t *)(a1 + 104));
    v19 = *(_OWORD *)(a2 + 120);
    *v14 = *v15;
    *(_OWORD *)(a1 + 120) = v19;
  }
  else
  {
    v23 = *(_QWORD *)(a2 + 104);
    v24 = *(_QWORD *)(a2 + 112);
    v25 = *(_QWORD *)(a2 + 128);
    outlined copy of AccessibilityImageLabel(v23, v24, *(_QWORD *)(a2 + 120));
    v26 = *(_QWORD *)(a1 + 104);
    v27 = *(_QWORD *)(a1 + 112);
    v28 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = v23;
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 128) = v25;
    outlined consume of AccessibilityImageLabel(v26, v27, v28);
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v29 = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = v29;
  v30 = *(void **)(a1 + 168);
  v31 = *(void **)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v31;
  v32 = v31;

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for PlatformImageRepresentableContext(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  void *v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 != 255)
  {
    v5 = *(unsigned __int8 *)(a2 + 8);
    if (v5 != 255)
    {
      v6 = *(void **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = v5;
      outlined consume of GraphicsImage.Contents(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of GraphicsImage.Contents(a1);
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v8 = *(_QWORD *)(a1 + 120);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  if (v8 >> 1 != 0xFFFFFFFF)
  {
    v9 = *(_QWORD *)(a2 + 120);
    if (v9 >> 1 != 0xFFFFFFFF)
    {
      v11 = *(_QWORD *)(a2 + 128);
      v12 = *(_QWORD *)(a1 + 104);
      v13 = *(_QWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = v9;
      *(_QWORD *)(a1 + 128) = v11;
      outlined consume of AccessibilityImageLabel(v12, v13, v8);
      goto LABEL_11;
    }
    outlined destroy of AccessibilityImageLabel((uint64_t *)(a1 + 104));
  }
  v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v10;
LABEL_11:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v14 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformImageRepresentableContext(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 200))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 120) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformImageRepresentableContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 200) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 104) = 0;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 2 * ~a2;
      *(_QWORD *)(result + 128) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformImageRepresentableContext()
{
  return &type metadata for PlatformImageRepresentableContext;
}

uint64_t destroy for PlatformNamedImageRepresentableContext()
{
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for PlatformNamedImageRepresentableContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PlatformNamedImageRepresentableContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PlatformNamedImageRepresentableContext(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformNamedImageRepresentableContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformNamedImageRepresentableContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformNamedImageRepresentableContext()
{
  return &type metadata for PlatformNamedImageRepresentableContext;
}

ValueMetadata *type metadata accessor for _GraphInputs.ImageRepresentationKey()
{
  return &type metadata for _GraphInputs.ImageRepresentationKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.NamedImageRepresentationKey()
{
  return &type metadata for _GraphInputs.NamedImageRepresentationKey;
}

uint64_t ScrollTarget.init(rect:anchor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(double *)(a4 + 16) = a7;
  *(double *)(a4 + 24) = a8;
  *(_QWORD *)(a4 + 32) = result;
  *(_QWORD *)(a4 + 40) = a2;
  *(_BYTE *)(a4 + 48) = a3 & 1;
  return result;
}

double ScrollTarget.rect.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ScrollTarget.rect.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ScrollTarget.rect.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTarget.anchor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ScrollTarget.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 32) = result;
  *(_QWORD *)(v3 + 40) = a2;
  *(_BYTE *)(v3 + 48) = a3 & 1;
  return result;
}

uint64_t (*ScrollTarget.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ScrollTarget.hash(into:)()
{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  double v5;
  double v6;
  int v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  double Width;
  Swift::UInt64 v11;
  double Height;
  Swift::UInt64 v13;
  CGRect v14;
  CGRect v15;

  v1 = *(double *)v0;
  v2 = *(double *)(v0 + 8);
  v3 = *(double *)(v0 + 16);
  v4 = *(double *)(v0 + 24);
  v5 = *(double *)(v0 + 32);
  v6 = *(double *)(v0 + 40);
  v7 = *(unsigned __int8 *)(v0 + 48);
  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)v0;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)&v2;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  v14.origin.x = v1;
  v14.origin.y = v2;
  v14.size.width = v3;
  v14.size.height = v4;
  Width = CGRectGetWidth(v14);
  if ((*(_QWORD *)&Width & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = *(_QWORD *)&Width;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  v15.origin.x = v1;
  v15.origin.y = v2;
  v15.size.width = v3;
  v15.size.height = v4;
  Height = CGRectGetHeight(v15);
  if ((*(_QWORD *)&Height & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v13 = *(_QWORD *)&Height;
  else
    v13 = 0;
  Hasher._combine(_:)(v13);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    UnitPoint.hash(into:)(v5, v6);
  }
}

BOOL static ScrollTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  char v7;
  _BOOL8 result;

  v2 = *(double *)(a1 + 32);
  v3 = *(double *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(double *)(a2 + 32);
  v6 = *(double *)(a2 + 40);
  v7 = *(_BYTE *)(a2 + 48);
  result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if (result)
  {
    if ((v4 & 1) != 0)
    {
      if ((v7 & 1) != 0)
        return 1;
    }
    else if ((v7 & 1) == 0 && v2 == v5 && v3 == v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

Swift::Int ScrollTarget.hashValue.getter()
{
  Hasher.init(_seed:)();
  ScrollTarget.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ScrollTarget()
{
  Hasher.init(_seed:)();
  ScrollTarget.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollTarget()
{
  Hasher.init(_seed:)();
  ScrollTarget.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollTarget(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  int v7;
  _BOOL8 result;

  v2 = *(double *)(a1 + 32);
  v3 = *(double *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(double *)(a2 + 32);
  v6 = *(double *)(a2 + 40);
  v7 = *(unsigned __int8 *)(a2 + 48);
  result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if (result)
  {
    if ((v4 & 1) != 0)
    {
      if (v7)
        return 1;
    }
    else if ((v7 & 1) == 0 && v2 == v5 && v3 == v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t ScrollTargetConfiguration.animated.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ScrollTargetConfiguration.animated.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ScrollTargetConfiguration.animated.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTargetConfiguration.requiresVisibility.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ScrollTargetConfiguration.requiresVisibility.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*ScrollTargetConfiguration.requiresVisibility.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTargetConfiguration.preservesVelocity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t ScrollTargetConfiguration.preservesVelocity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*ScrollTargetConfiguration.preservesVelocity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTargetConfiguration.init(transaction:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (!v3)
  {
    swift_release();
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(v3 + 72);
  swift_release();
  if (!v4)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v5 = swift_retain();
  v6 = specialized closure #1 in PropertyList.subscript.getter(v5);
  swift_release();
  v7 = v6 ^ 1;
LABEL_6:
  v8 = swift_retain();
  v9 = specialized closure #1 in PropertyList.subscript.getter(v8);
  swift_release();
  v10 = swift_retain();
  v11 = specialized closure #1 in PropertyList.subscript.getter(v10);
  result = swift_release_n();
  *a1 = v7 & 1;
  a1[1] = v9 & 1;
  a1[2] = v11 & 1;
  return result;
}

uint64_t Transaction._scrollToRequiresCompleteVisibility.getter()
{
  uint64_t v0;
  char v1;

  v0 = swift_retain();
  v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1 & 1;
}

BOOL static ScrollTargetRole.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ScrollTargetRole.Role.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ScrollTargetRole.Role.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ScrollTargetRole.role.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ScrollTargetRole.role.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ScrollTargetRole.role.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static ScrollTargetRole.container.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollTargetRole.target.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

unint64_t one-time initialization function for defaultValue()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static ScrollTargetRole.Key.defaultValue = result;
  return result;
}

{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static ScrollTargetRole.ContentKey.defaultValue = result;
  return result;
}

{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  qword_2561AC2E0 = 0;
  qword_2561AC2E8 = 0;
  static EnvironmentValues.ScrollAnchorsKey.defaultValue = result;
  byte_2561AC2F0 = 1;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider();
  *(_QWORD *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue = &type metadata for EmptyImageAccessibilityProvider;
  *((_QWORD *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue + 1) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider();
  *(_QWORD *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue = &type metadata for EmptyTextAccessibilityProvider;
  *((_QWORD *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1) = result;
  return result;
}

{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static PlacementTintKey.defaultValue = result;
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t result;

  v0 = MEMORY[0x24BEE4AF8];
  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  v3 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  result = specialized Dictionary.init(dictionaryLiteral:)(v0);
  static AttributeCountInfoKey.defaultValue = v1;
  *(_QWORD *)algn_2561BE5D8 = v2;
  qword_2561BE5E0 = v3;
  unk_2561BE5E8 = result;
  return result;
}

uint64_t static ScrollTargetRole.Key.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollTargetRole.Key@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static ScrollTargetRole.Key.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollTargetRole.Key(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  return specialized static ScrollTargetRole.ContentKey.reduce(value:nextValue:)(a1, a2);
}

uint64_t static ScrollTargetRole.ContentKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t static ScrollTargetRole.Key.reduce(value:nextValue:)(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  v3 = a2();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollTargetRole.ContentKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static ScrollTargetRole.ContentKey.defaultValue, a1);
}

uint64_t ScrollTargetRole.SetLayout.init(role:collection:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

unsigned __int8 *(*ScrollTargetRole.SetLayout.value.getter())(_QWORD *a1)
{
  _QWORD *v0;

  *(_QWORD *)(swift_allocObject() + 16) = *v0;
  return partial apply for closure #1 in ScrollTargetRole.SetLayout.value.getter;
}

unsigned __int8 *closure #1 in ScrollTargetRole.SetLayout.value.getter(_QWORD *a1)
{
  unsigned __int8 *result;
  int v3;
  uint64_t v4;
  uint64_t Value;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21[2];

  type metadata accessor for ScrollTargetRole.Role?();
  result = (unsigned __int8 *)AGGraphGetValue();
  v3 = *result;
  if (v3 == 2)
    return result;
  v4 = v3 & 1;
  type metadata accessor for ScrollableCollection();
  Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v21);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = (_QWORD *)*a1;
  v20 = (_QWORD *)*a1;
  *a1 = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    if (v7[3] >= v12)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v7 = v20;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      v7 = v20;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
      if ((v13 & 1) != (v15 & 1))
      {
        result = (unsigned __int8 *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v9 = v14;
    }
    *a1 = v7;
    swift_bridgeObjectRelease();
    v16 = (_QWORD *)*a1;
    swift_bridgeObjectRetain();
    if ((v13 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v9, v4, MEMORY[0x24BEE4AF8], v16);
    v4 = v16[7];
    swift_bridgeObjectRelease();
    a1 = *(_QWORD **)(v4 + 8 * v9);
    v17 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v4 + 8 * v9) = a1;
    if ((v17 & 1) != 0)
      goto LABEL_11;
  }
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *(_QWORD *)(v4 + 8 * v9) = a1;
LABEL_11:
  v19 = a1[2];
  v18 = a1[3];
  if (v19 >= v18 >> 1)
  {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, a1);
    *(_QWORD *)(v4 + 8 * v9) = a1;
  }
  a1[2] = v19 + 1;
  return (unsigned __int8 *)outlined init with take of ScrollStateRequest(v21, (uint64_t)&a1[5 * v19 + 4]);
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollTargetRole.SetLayout@<X0>(uint64_t (**a1)()@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = *v1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = closure #1 in ScrollTargetRole.SetLayout.value.getterpartial apply;
  *(_QWORD *)(result + 24) = v3;
  *a1 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t _GraphInputs.scrollTargetRole.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _GraphInputs.scrollTargetRole : _GraphInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollTargetRole : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t _GraphInputs.scrollTargetRole.setter(int a1)
{
  uint64_t *v1;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*_GraphInputs.scrollTargetRole.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *((_DWORD *)v3 + 10) = v5;
  return _GraphInputs.scrollTargetRole.modify;
}

void _GraphInputs.scrollTargetRole.modify(uint64_t a1)
{
  void *v1;
  int v2;
  uint64_t *v3;

  v1 = *(void **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  free(v1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollTargetRoleKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static _GraphInputs.ScrollTargetRoleKey.defaultValue;
  return result;
}

uint64_t _GraphInputs.scrollTargetRemovePreference.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2 & 1;
}

uint64_t key path getter for _GraphInputs.scrollTargetRemovePreference : _GraphInputs@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollTargetRemovePreference : _GraphInputs(char *a1, uint64_t *a2)
{
  char v3;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t _GraphInputs.scrollTargetRemovePreference.setter(char a1)
{
  uint64_t *v1;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*_GraphInputs.scrollTargetRemovePreference.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *((_BYTE *)v3 + 40) = v5 & 1;
  return _GraphInputs.scrollTargetRemovePreference.modify;
}

void _GraphInputs.scrollTargetRemovePreference.modify(char **a1, char a2)
{
  _GraphInputs.scrollTargetRemovePreference.modify(a1, a2, (void (*)(uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t _ViewInputs.scrollTargetRole.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t _ViewInputs.scrollTargetRemovePreference.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2 & 1;
}

uint64_t key path getter for Transaction._scrollToRequiresCompleteVisibility : Transaction@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  result = swift_release();
  *a1 = v3 & 1;
  return result;
}

uint64_t key path setter for Transaction._scrollToRequiresCompleteVisibility : Transaction(char *a1, uint64_t *a2)
{
  char v3;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t Transaction._scrollToRequiresCompleteVisibility.setter(char a1)
{
  uint64_t *v1;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*Transaction._scrollToRequiresCompleteVisibility.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((_BYTE *)v3 + 40) = v5 & 1;
  return Transaction._scrollToRequiresCompleteVisibility.modify;
}

void Transaction._scrollToRequiresCompleteVisibility.modify(char **a1, char a2)
{
  _GraphInputs.scrollTargetRemovePreference.modify(a1, a2, (void (*)(uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

void _GraphInputs.scrollTargetRemovePreference.modify(char **a1, char a2, void (*a3)(uint64_t, uint64_t, char *))
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v5 = *a1;
  v6 = *((_QWORD *)*a1 + 3);
  v7 = (*a1)[40];
  swift_retain();
  if ((a2 & 1) != 0)
    v8 = v5 + 8;
  else
    v8 = v5 + 16;
  a3(v6, v7, v8);
  swift_release();
  free(v5);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t i;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v46 = a1;
  v47 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v48 = v8;
  v49 = 0;
  v50 = v11 & v9;
  v51 = a2;
  v52 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v44);
  v12 = v45;
  if (!v45)
    goto LABEL_26;
  v13 = v44;
  v14 = (_QWORD *)*a5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v20 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v24 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(_BYTE *)(v24[6] + v16) = v13;
    *(_QWORD *)(v24[7] + 8 * v16) = v12;
    v25 = v24[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v24[2] = v27;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v44);
    for (i = v45; v45; i = v45)
    {
      v31 = v44;
      v32 = (_QWORD *)*a5;
      v33 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v26 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v26)
        goto LABEL_27;
      v38 = v34;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_29;
      }
      if ((v38 & 1) != 0)
      {
        v29 = (_QWORD *)*a5;
        v30 = 8 * v33;
        v53 = *(_QWORD *)(*(_QWORD *)(*a5 + 56) + 8 * v33);
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(i);
        *(_QWORD *)(v29[7] + v30) = v53;
        swift_bridgeObjectRelease();
      }
      else
      {
        v40 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v33 >> 6) + 64) |= 1 << v33;
        *(_BYTE *)(v40[6] + v33) = v31;
        *(_QWORD *)(v40[7] + 8 * v33) = i;
        v41 = v40[2];
        v26 = __OFADD__(v41, 1);
        v42 = v41 + 1;
        if (v26)
          goto LABEL_28;
        v40[2] = v42;
      }
      specialized LazyMapSequence.Iterator.next()(&v44);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    v23 = *a5;
    v53 = *(_QWORD *)(*(_QWORD *)(*a5 + 56) + 8 * v16);
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v12);
    *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v16) = v53;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_29:
  swift_release();
  swift_bridgeObjectRelease();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[40];
  __int128 v29[2];
  __int128 v30[2];
  __int128 v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v33 = a1;
  v34 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v35 = v8;
  v36 = 0;
  v37 = v11 & v9;
  v38 = a2;
  v39 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(v31);
  if (!v32)
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v13 = *(_QWORD *)&v31[0];
    outlined init with take of ScrollStateRequest((__int128 *)((char *)v31 + 8), (uint64_t)v30);
    v14 = *a5;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    v17 = *(_QWORD *)(v14 + 16);
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      break;
    v20 = v15;
    if (*(_QWORD *)(v14 + 24) >= v19)
    {
      if ((a4 & 1) != 0)
      {
        if ((v15 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v20 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_22;
      v16 = v21;
      if ((v20 & 1) != 0)
      {
LABEL_6:
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(*a5 + 56) + 40 * v16, (uint64_t)v28);
        outlined init with copy of AnyTrackedValue((uint64_t)v28, (uint64_t)v29);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        v12 = *(_QWORD *)(*a5 + 56) + 40 * v16;
        __swift_destroy_boxed_opaque_existential_1(v12);
        outlined init with take of ScrollStateRequest(v29, v12);
        goto LABEL_7;
      }
    }
    v23 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(_QWORD *)(v23[6] + 8 * v16) = v13;
    outlined init with take of ScrollStateRequest(v30, v23[7] + 40 * v16);
    v24 = v23[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_21;
    v23[2] = v26;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()(v31);
    a4 = 1;
    if (!v32)
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  *(_BYTE *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_234B1B78C()
{
  return swift_deallocObject();
}

unsigned __int8 *partial apply for closure #1 in ScrollTargetRole.SetLayout.value.getter(_QWORD *a1)
{
  return closure #1 in ScrollTargetRole.SetLayout.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type ScrollTarget and conformance ScrollTarget()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollTarget and conformance ScrollTarget;
  if (!lazy protocol witness table cache variable for type ScrollTarget and conformance ScrollTarget)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollTarget, &type metadata for ScrollTarget);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTarget and conformance ScrollTarget);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollTargetRole.SetLayout, &type metadata for ScrollTargetRole.SetLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout);
  }
  return result;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollTarget(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollTarget(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 49) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScrollTarget()
{
  return &type metadata for ScrollTarget;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollTargetConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTargetConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTargetConfiguration()
{
  return &type metadata for ScrollTargetConfiguration;
}

ValueMetadata *type metadata accessor for ScrollTargetRole()
{
  return &type metadata for ScrollTargetRole;
}

uint64_t storeEnumTagSinglePayload for ScrollTargetRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234B1BAAC + 4 * byte_2352833C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234B1BAE0 + 4 * byte_2352833C0[v4]))();
}

uint64_t sub_234B1BAE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B1BAE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234B1BAF0);
  return result;
}

uint64_t sub_234B1BAFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234B1BB04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234B1BB08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234B1BB10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.Role()
{
  return &type metadata for ScrollTargetRole.Role;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.Key()
{
  return &type metadata for ScrollTargetRole.Key;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.ContentKey()
{
  return &type metadata for ScrollTargetRole.ContentKey;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.SetLayout()
{
  return &type metadata for ScrollTargetRole.SetLayout;
}

uint64_t sub_234B1BB5C()
{
  return swift_deallocObject();
}

uint64_t sub_234B1BB6C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized static ScrollTargetRole.ContentKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

void type metadata accessor for ScrollTargetRole.Role?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScrollTargetRole.Role?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollTargetRole.Role?);
  }
}

unint64_t type metadata accessor for ScrollableCollection()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ScrollableCollection;
  if (!lazy cache variable for type metadata for ScrollableCollection)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  }
  return result;
}

ValueMetadata *type metadata accessor for Transaction.IsScrollStateValueUpdateKey()
{
  return &type metadata for Transaction.IsScrollStateValueUpdateKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollTargetRoleKey()
{
  return &type metadata for _GraphInputs.ScrollTargetRoleKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.RemovePreferenceInput()
{
  return &type metadata for _GraphInputs.RemovePreferenceInput;
}

ValueMetadata *type metadata accessor for Transaction.ScrollToRequiresCompleteVisibility()
{
  return &type metadata for Transaction.ScrollToRequiresCompleteVisibility;
}

double DerivedUnaryLayout.sizeThatFits(in:context:child:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t AssociatedConformanceWitness;
  double v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  v14 = *a1;
  v15 = *((_BYTE *)a1 + 8);
  v19 = a1[2];
  LOBYTE(a1) = *((_BYTE *)a1 + 24);
  LODWORD(v12) = *((_DWORD *)a3 + 2);
  v20 = *((_DWORD *)a2 + 2);
  v21 = v12;
  (*(void (**)(uint64_t, uint64_t, double))(a5 + 32))(a4, a5, v11);
  v27 = v14;
  v28 = v15;
  v29 = v19;
  v30 = (char)a1;
  v25 = *a2;
  v26 = v20;
  v23 = *a3;
  v24 = v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = (*(double (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(&v27, &v25, &v23, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, AssociatedTypeWitness);
  return v17;
}

uint64_t DerivedUnaryLayout.spacing(in:child:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  uint64_t AssociatedConformanceWitness;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  v18[1] = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)v18 - v12;
  v14 = *((_DWORD *)a1 + 2);
  v15 = *((_DWORD *)a2 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v11);
  v21 = *a1;
  v22 = v14;
  v19 = *a2;
  v20 = v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v21, &v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t DerivedUnaryLayout.placement(of:in:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v16 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v15 - v10;
  v12 = *((_DWORD *)a1 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v9);
  v17 = *a1;
  v18 = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v17, v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

double DerivedUnaryLayout.layoutPriority(child:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t AssociatedConformanceWitness;
  double v13;
  uint64_t v15;
  int v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  v11 = *((_DWORD *)a1 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v8);
  v15 = *a1;
  v16 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(&v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return v13;
}

uint64_t DerivedUnaryLayout.ignoresAutomaticPadding(child:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  int v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v14 - v9;
  v11 = *((_DWORD *)a1 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v8);
  v14 = *a1;
  v15 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a3) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return a3 & 1;
}

uint64_t dispatch thunk of DerivedUnaryLayout.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void _OffsetEffect.offset.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*_OffsetEffect.offset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

CGFloat _OffsetEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, CGFloat a2@<D2>, CGFloat a3@<D3>)
{
  CGFloat result;
  __int128 v5;
  __int128 v6;
  CGAffineTransform v7;

  CGAffineTransformMakeTranslation(&v7, a2, a3);
  result = v7.a;
  v5 = *(_OWORD *)&v7.c;
  v6 = *(_OWORD *)&v7.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v7.a;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

void _OffsetEffect.animatableData.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

__n128 (*_OffsetEffect.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

uint64_t static _OffsetEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  int v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 8);
  v13 = *((_DWORD *)a2 + 2);
  v14 = *((_DWORD *)a2 + 9);
  v7 = a2[5];
  v8 = a2[6];
  KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type OffsetPosition and conformance OffsetPosition();
  v10 = Attribute.init<A>(body:value:flags:update:)();
  v16 = v4;
  v17 = v13;
  v18 = v5;
  v19 = a2[3];
  v20 = v6 | 8;
  v21 = v14;
  v22 = v7;
  v23 = v8;
  v24 = a2[7];
  v25 = v10;
  v26 = *(uint64_t *)((char *)a2 + 68);
  v27 = *(uint64_t *)((char *)a2 + 76);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  a3(v11, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

BOOL static _OffsetEffect.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

CGFloat protocol witness for GeometryEffect.effectValue(size:) in conformance _OffsetEffect@<D0>(uint64_t a1@<X8>)
{
  CGFloat *v1;
  CGFloat result;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;

  CGAffineTransformMakeTranslation(&v6, *v1, v1[1]);
  result = v6.a;
  v4 = *(_OWORD *)&v6.c;
  v5 = *(_OWORD *)&v6.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v6.a;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _OffsetEffect(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _OffsetEffect(uint64_t a1))()
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return CGPoint.animatableData.modify;
}

uint64_t View.offset(_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD v5[2];

  *(double *)v5 = a3;
  *(double *)&v5[1] = a4;
  return View.modifier<A>(_:)(v5, a1, &type metadata for _OffsetEffect, a2);
}

uint64_t View.offset(x:y:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD v5[2];

  *(double *)v5 = a3;
  *(double *)&v5[1] = a4;
  return View.modifier<A>(_:)(v5, a1, &type metadata for _OffsetEffect, a2);
}

void View.repeatingOffset(from:to:animation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v7)(uint64_t *, ValueMetadata *, unint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  __int16 v15;

  v14 = 0;
  v15 = 257;
  v7 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t))(*(_QWORD *)a1 + 144);
  v8 = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  v9 = v7(&v14, &type metadata for RepeatAnimation, v8);
  v11 = type metadata accessor for ModifiedContent(0, a2, (uint64_t)&type metadata for _OffsetEffect, v10);
  v13[0] = a3;
  v13[1] = &protocol witness table for _OffsetEffect;
  v12 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v11, v13);
  View.appearanceAnimation<A>(animation:modifier:)(v9, (void (*)(_QWORD, uint64_t))partial apply for closure #1 in View.repeatingOffset(from:to:animation:), a2, a3, v12, a4);
}

uint64_t sub_234B1C744()
{
  return swift_release();
}

uint64_t static AnyTransition.offset(_:)(double a1, double a2)
{
  uint64_t result;

  type metadata accessor for TransitionBox<OffsetTransition>(0);
  result = swift_allocObject();
  *(double *)(result + 16) = a1;
  *(double *)(result + 24) = a2;
  return result;
}

SwiftUI::OffsetTransition __swiftcall OffsetTransition.init(_:)(SwiftUI::OffsetTransition result)
{
  CGFloat *v1;

  *v1 = result.offset.width;
  v1[1] = result.offset.height;
  return result;
}

uint64_t static AnyTransition.offset(x:y:)(double a1, double a2)
{
  uint64_t result;

  type metadata accessor for TransitionBox<OffsetTransition>(0);
  result = swift_allocObject();
  *(double *)(result + 16) = a1;
  *(double *)(result + 24) = a2;
  return result;
}

double OffsetTransition.offset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void OffsetTransition.offset.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*OffsetTransition.offset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

int8x16_t OffsetTransition.body(content:phase:)@<Q0>(char a1@<W1>, int8x16_t *a2@<X8>)
{
  int8x16_t *v2;
  int32x2_t v3;
  int64x2_t v4;
  int8x16_t result;

  v3 = vdup_n_s32(a1 == 1);
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  result = vandq_s8(*v2, (int8x16_t)vcgezq_s64(vshlq_n_s64(v4, 0x3FuLL)));
  *a2 = result;
  return result;
}

uint64_t OffsetTransition._makeContentTransition(transition:)(uint64_t a1)
{
  double *v1;
  uint64_t result;
  double v4;
  double v5;
  uint64_t v6;
  float v7;
  float v8;

  if (*(_BYTE *)a1 == 3)
  {
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v5 = *v1;
    v4 = v1[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_23527E860;
    v7 = v5;
    v8 = v4;
    *(_DWORD *)(v6 + 32) = 3;
    *(float *)(v6 + 36) = v7;
    *(_BYTE *)(v6 + 40) = 0;
    *(float *)(v6 + 44) = v8;
    *(_BYTE *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 52) = 0x3F80000000000000;
    *(_QWORD *)(v6 + 60) = 3;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

int8x16_t protocol witness for Transition.body(content:phase:) in conformance OffsetTransition@<Q0>(char a1@<W1>, int8x16_t *a2@<X8>)
{
  int8x16_t *v2;
  int32x2_t v3;
  int64x2_t v4;
  int8x16_t result;

  v3 = vdup_n_s32(a1 == 1);
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  result = vandq_s8(*v2, (int8x16_t)vcgezq_s64(vshlq_n_s64(v4, 0x3FuLL)));
  *a2 = result;
  return result;
}

uint64_t _OffsetEffect.encode(to:)(uint64_t result, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v5 = result;
  if (a2 != 0.0 || a3 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD **)(v5 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v9 = v7[2];
    v8 = v7[3];
    if (v9 >= v8 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v7[2] = v9 + 1;
    v7[v9 + 4] = v6;
    *(_QWORD *)(v5 + 24) = v7;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v5 + 8) = v6 + 1;
      CGSize.encode(to:)((double *)v5, a2, a3);
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

double _OffsetEffect.init(from:)(_QWORD *a1)
{
  return specialized _OffsetEffect.init(from:)(a1);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _OffsetEffect(uint64_t a1)
{
  double *v1;

  return _OffsetEffect.encode(to:)(a1, *v1, v1[1]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance _OffsetEffect(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = specialized _OffsetEffect.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

double OffsetPosition.value.getter@<D0>(double *a1@<X8>)
{
  double *Value;
  double v3;
  double v4;
  double *v5;
  double result;
  double v7;

  Value = (double *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  if (*(_BYTE *)AGGraphGetValue())
    v3 = -v3;
  v5 = (double *)AGGraphGetValue();
  result = v3 + *v5;
  v7 = v4 + v5[1];
  *a1 = result;
  a1[1] = v7;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance OffsetPosition(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

double protocol witness for Rule.value.getter in conformance OffsetPosition@<D0>(double *a1@<X8>)
{
  return OffsetPosition.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type OffsetPosition and conformance OffsetPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OffsetPosition and conformance OffsetPosition;
  if (!lazy protocol witness table cache variable for type OffsetPosition and conformance OffsetPosition)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for OffsetPosition, &unk_25061B3A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OffsetPosition and conformance OffsetPosition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation;
  if (!lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatAnimation, &type metadata for RepeatAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation;
  if (!lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatAnimation, &type metadata for RepeatAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation;
  if (!lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatAnimation, &type metadata for RepeatAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation);
  }
  return result;
}

uint64_t partial apply for closure #1 in View.repeatingOffset(from:to:animation:)(uint64_t a1, unsigned int a2)
{
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  int32x2_t v5;
  int64x2_t v6;
  int8x16_t v8;

  v4 = v2[1].i64[0];
  v3 = v2[1].i64[1];
  v5 = vdup_n_s32(a2);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  v8 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), v2[2], v2[3]);
  return View.modifier<A>(_:)(&v8, v4, &type metadata for _OffsetEffect, v3);
}

void type metadata accessor for TransitionBox<OffsetTransition>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TransitionBox<OffsetTransition>)
  {
    v2 = lazy protocol witness table accessor for type OffsetTransition and conformance OffsetTransition();
    v4 = type metadata accessor for TransitionBox(a1, (uint64_t)&type metadata for OffsetTransition, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<OffsetTransition>);
  }
}

unint64_t lazy protocol witness table accessor for type OffsetTransition and conformance OffsetTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OffsetTransition and conformance OffsetTransition;
  if (!lazy protocol witness table cache variable for type OffsetTransition and conformance OffsetTransition)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for OffsetTransition, &type metadata for OffsetTransition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OffsetTransition and conformance OffsetTransition);
  }
  return result;
}

uint64_t outlined consume of _Transition_ContentTransition.Result(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

double specialized _OffsetEffect.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 0.0;
  if (v4 >= v5)
  {
LABEL_2:
    a1[3] = 0;
    return v6;
  }
  while (1)
  {
    v7 = a1[3];
    if (v7)
    {
      v8 = a1[4];
      if (v4 < v8)
        goto LABEL_11;
      if (v8 < v4)
        goto LABEL_34;
      a1[3] = 0;
    }
    v7 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return v6;
    if (v7 <= 7)
      goto LABEL_34;
LABEL_11:
    if ((v7 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(v7 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v1)
            goto LABEL_4;
          return v6;
        case 1uLL:
          v17 = a1[1] + 8;
          goto LABEL_30;
        case 2uLL:
          v18 = ProtobufDecoder.decodeVarint()();
          if (v1)
            return v6;
          if (v18 < 0)
            goto LABEL_39;
          v17 = a1[1] + v18;
LABEL_30:
          if (v5 < v17)
            goto LABEL_34;
          a1[1] = v17;
          break;
        case 5uLL:
          v17 = a1[1] + 4;
          goto LABEL_30;
        default:
          goto LABEL_34;
      }
      goto LABEL_4;
    }
    if ((v7 & 7) != 2)
      goto LABEL_34;
    v2 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v2[v10 + 4] = v5;
    a1[5] = v2;
    v11 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return v6;
    if (v11 < 0)
      break;
    v12 = a1[1] + v11;
    if (v5 < v12)
      goto LABEL_34;
    a1[2] = v12;
    v13 = specialized CGPoint.init(from:)(a1);
    v2 = (_QWORD *)a1[5];
    if (!v2[2])
      goto LABEL_38;
    v6 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v14 = v2[2];
      if (!v14)
        goto LABEL_33;
    }
    else
    {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v14 = v2[2];
      if (!v14)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return v6;
      }
    }
    v15 = v14 - 1;
    v16 = v2[v15 + 4];
    v2[2] = v15;
    a1[5] = v2;
    a1[2] = v16;
LABEL_4:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
      goto LABEL_2;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  __break(1u);
  v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v23 = v22[2];
  if (!v23)
  {
    __break(1u);
    JUMPOUT(0x234B1CFA0);
  }
  v20 = v23 - 1;
  v21 = v22[v20 + 4];
  v22[2] = v20;
  a1[5] = v22;
  a1[2] = v21;
  return v6;
}

unint64_t instantiation function for generic protocol witness table for _OffsetEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect;
  if (!lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _OffsetEffect, &type metadata for _OffsetEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in OffsetTransition()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 sub_234B1D030@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_234B1D03C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for _OffsetEffect()
{
  return &type metadata for _OffsetEffect;
}

ValueMetadata *type metadata accessor for OffsetTransition()
{
  return &type metadata for OffsetTransition;
}

uint64_t sub_234B1D068(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _OffsetEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _OffsetEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void sub_234B1D0BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _OffsetEffect, a4);
  v6[0] = v4;
  v6[1] = &protocol witness table for _OffsetEffect;
  MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v6);
  type metadata accessor for AppearanceAnimationView();
}

uint64_t sub_234B1D120(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>, a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>(255);
    v2[0] = &protocol witness table for PlaceholderContentView<A>;
    v2[1] = &protocol witness table for _OffsetEffect;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for PlaceholderContentView<OffsetTransition>, (uint64_t)&type metadata for OffsetTransition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for PlaceholderContentView);
    v4 = type metadata accessor for ModifiedContent(a1, v2, (uint64_t)&type metadata for _OffsetEffect, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>);
  }
}

void *type metadata accessor for OffsetPosition()
{
  return &unk_25061B3A8;
}

unint64_t instantiation function for generic protocol witness table for OffsetPosition(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type OffsetPosition and conformance OffsetPosition();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t _AnyAnimatableData.vtable.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _AnyAnimatableData.vtable.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_AnyAnimatableData.vtable.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnyAnimatableData.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any(v1 + 8, a1);
}

_OWORD *_AnyAnimatableData.value.setter(_OWORD *a1)
{
  uint64_t v1;
  _OWORD *v3;

  v3 = (_OWORD *)(v1 + 8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return outlined init with take of Any(a1, v3);
}

uint64_t (*_AnyAnimatableData.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_OWORD *_AnyAnimatableData.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  __int128 v12;
  uint64_t AssociatedTypeWitness;

  v9 = type metadata accessor for VTable(0, a2, a3, a4);
  v10 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  v10(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *(_QWORD *)a5 = v9;
  return outlined init with take of Any(&v12, (_OWORD *)(a5 + 8));
}

uint64_t type metadata accessor for VTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VTable);
}

uint64_t _AnyAnimatableData.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = &v12[-v7];
  v9 = *v3;
  result = type metadata accessor for VTable(0, a2, a3, v10);
  if (v9 == result)
  {
    outlined init with copy of Any((uint64_t)(v3 + 1), (uint64_t)v12);
    swift_dynamicCast();
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a3 + 32))(v8, a2, a3);
  }
  return result;
}

uint64_t static _AnyAnimatableData.zero.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = type metadata accessor for ZeroVTable();
  a1[4] = MEMORY[0x24BEE4AE0] + 8;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ZeroVTable()
{
  return objc_opt_self();
}

uint64_t static _AnyAnimatableData.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1 + 8, a2 + 1) & 1;
  else
    return 0;
}

_QWORD *static _AnyAnimatableData.+= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *a1;
  if (*a1 == *a2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD *))(v4 + 96))(a1 + 1, a2 + 1);
  result = (_QWORD *)type metadata accessor for ZeroVTable();
  if ((_QWORD *)v4 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    return outlined init with copy of _AnyAnimatableData(a2, a1);
  }
  return result;
}

uint64_t outlined destroy of _AnyAnimatableData(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return a1;
}

_QWORD *outlined init with copy of _AnyAnimatableData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a2 = *a1;
  v3 = a1[4];
  a2[4] = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 1), (uint64_t)(a1 + 1));
  return a2;
}

_QWORD *static _AnyAnimatableData.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;

  outlined init with copy of _AnyAnimatableData(a1, a3);
  v5 = *a3;
  if (*a3 == *a2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD *))(v5 + 96))(a3 + 1, a2 + 1);
  result = (_QWORD *)type metadata accessor for ZeroVTable();
  if ((_QWORD *)v5 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a3);
    return outlined init with copy of _AnyAnimatableData(a2, a3);
  }
  return result;
}

uint64_t static _AnyAnimatableData.- infix(_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  outlined init with copy of _AnyAnimatableData(a1, a3);
  v5 = *a3;
  if (*a3 == *a2)
    return (*(uint64_t (**)(_QWORD *, _QWORD *))(v5 + 104))(a3 + 1, a2 + 1);
  result = type metadata accessor for ZeroVTable();
  if (v5 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a3);
    outlined init with copy of _AnyAnimatableData(a2, a3);
    return (*(uint64_t (**)(_QWORD *))(*a3 + 112))(a3 + 1);
  }
  return result;
}

Swift::Void __swiftcall _AnyAnimatableData.scale(by:)(Swift::Double by)
{
  uint64_t v1;

  (*(void (**)(uint64_t, Swift::Double))(*(_QWORD *)v1 + 120))(v1 + 8, by);
}

uint64_t _AnyAnimatableData.magnitudeSquared.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 128))(v0 + 8);
}

uint64_t protocol witness for VectorArithmetic.scale(by:) in conformance _AnyAnimatableData()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 120))(v0 + 8);
}

uint64_t protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance _AnyAnimatableData()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 128))(v0 + 8);
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance _AnyAnimatableData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = type metadata accessor for ZeroVTable();
  a1[4] = MEMORY[0x24BEE4AE0] + 8;
  *a1 = result;
  return result;
}

_QWORD *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _AnyAnimatableData@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;

  outlined init with copy of _AnyAnimatableData(a1, a3);
  v5 = *a3;
  if (*a3 == *a2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD *))(v5 + 96))(a3 + 1, a2 + 1);
  result = (_QWORD *)type metadata accessor for ZeroVTable();
  if ((_QWORD *)v5 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a3);
    return outlined init with copy of _AnyAnimatableData(a2, a3);
  }
  return result;
}

_QWORD *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _AnyAnimatableData(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *a1;
  if (*a1 == *a2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD *))(v4 + 96))(a1 + 1, a2 + 1);
  result = (_QWORD *)type metadata accessor for ZeroVTable();
  if ((_QWORD *)v4 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    return outlined init with copy of _AnyAnimatableData(a2, a1);
  }
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _AnyAnimatableData@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  outlined init with copy of _AnyAnimatableData(a1, a3);
  return static _AnyAnimatableData.-= infix(_:_:)(a3, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _AnyAnimatableData(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1 + 8, a2 + 1) & 1;
  else
    return 0;
}

void static _AnyAnimatableDataVTable.zero.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static _AnyAnimatableDataVTable.isEqual(_:_:)()
{
  return 0;
}

double static _AnyAnimatableDataVTable.magnitudeSquared(_:)()
{
  return 0.0;
}

uint64_t _AnyAnimatableDataVTable.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t _AnyAnimatableDataVTable.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static VTable.zero.getter@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(a1);
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t static VTable.isEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  void (*v12)(_BYTE *, uint64_t);
  _BYTE v14[32];
  _BYTE v15[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v14[-v9];
  outlined init with copy of Any(a1, (uint64_t)v15);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v14);
  swift_dynamicCast();
  swift_getAssociatedConformanceWitness();
  v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  v12 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v12(v7, AssociatedTypeWitness);
  v12(v10, AssociatedTypeWitness);
  return v11 & 1;
}

uint64_t static VTable.add(_:_:)(uint64_t a1, uint64_t a2)
{
  return static VTable.add(_:_:)(a1, a2, (void (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x24BEE2F78]);
}

uint64_t static VTable.subtract(_:_:)(uint64_t a1, uint64_t a2)
{
  return static VTable.add(_:_:)(a1, a2, (void (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x24BEE2F80]);
}

uint64_t static VTable.add(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *, char *, uint64_t, _QWORD))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t *boxed_opaque_existential_1;
  _OWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v16 - v11;
  outlined init with take of Any((_OWORD *)a1, v16);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v16);
  swift_dynamicCast();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a3(v12, v9, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  *(_QWORD *)(a1 + 24) = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, v12, AssociatedTypeWitness);
}

uint64_t static VTable.negate(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *boxed_opaque_existential_1;
  _OWORD v11[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v11 - v7;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  outlined init with take of Any((_OWORD *)a1, v11);
  swift_dynamicCast();
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *(_QWORD *)(a1 + 24) = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v8, AssociatedTypeWitness);
}

uint64_t static VTable.scale(_:by:)(uint64_t a1, double a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t *boxed_opaque_existential_1;
  _OWORD v11[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)v11 - v6;
  outlined init with take of Any((_OWORD *)a1, v11);
  swift_dynamicCast();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, a2);
  *(_QWORD *)(a1 + 24) = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v7, AssociatedTypeWitness);
}

double static VTable.magnitudeSquared(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t AssociatedConformanceWitness;
  double v7;
  _BYTE v9[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = &v9[-v4];
  outlined init with copy of Any(a1, (uint64_t)v9);
  swift_dynamicCast();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  return v7;
}

void static ZeroVTable.zero.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE4AE0] + 8;
}

uint64_t specialized static _AnyAnimatableData.-= infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  if (*a1 == *a2)
    return (*(uint64_t (**)(_QWORD *, _QWORD *))(v4 + 104))(a1 + 1, a2 + 1);
  result = type metadata accessor for ZeroVTable();
  if (v4 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    outlined init with copy of _AnyAnimatableData(a2, a1);
    return (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1 + 1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _AnyAnimatableData(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for _AnyAnimatableData(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
}

_QWORD *initializeWithCopy for _AnyAnimatableData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[4];
  a1[4] = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

_QWORD *assignWithCopy for _AnyAnimatableData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_0(a1 + 1, a2 + 1);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for _AnyAnimatableData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for _AnyAnimatableData()
{
  return &type metadata for _AnyAnimatableData;
}

uint64_t type metadata accessor for _AnyAnimatableDataVTable()
{
  return objc_opt_self();
}

uint64_t method lookup function for _AnyAnimatableDataVTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.zero.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.isEqual(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.add(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.subtract(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.negate(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.scale(_:by:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.magnitudeSquared(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata completion function for VTable()
{
  return swift_initClassMetadata2();
}

uint64_t _ColorMonochromeEffect.color.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_ColorMonochromeEffect.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ColorMonochromeEffect.amount.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*_ColorMonochromeEffect.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _ColorMonochromeEffect.bias.getter(double a1, double a2)
{
  return a2;
}

void _ColorMonochromeEffect.bias.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*_ColorMonochromeEffect.bias.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _ColorMonochromeEffect.resolve(in:)@<S0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  float v8;
  float v9;
  int v10;
  float result;
  int v12;
  int v13;
  __int128 v14;

  v14 = *a1;
  v8 = (*(float (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v14);
  v9 = a5;
  *(float *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v10;
  result = a4;
  *(_DWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 12) = v13;
  *(float *)(a3 + 16) = v9;
  *(float *)(a3 + 20) = result;
  return result;
}

uint64_t static _ColorMonochromeEffect._requiresMainThread.getter()
{
  return 0;
}

uint64_t _ColorMonochromeEffect._requiresMainThread.getter()
{
  return 0;
}

float32x4_t _ColorMonochromeEffect._Resolved.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  int8x16_t *v1;
  uint64_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t result;
  int8x16_t v8;
  float32x4_t v9;

  v8 = *v1;
  v3 = v1[1].i64[0];
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = (float32x4_t)v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, v8, *(float *)&v8.i32[1], v8.u32[2], *(float *)&v8.i32[3], v4);
    v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  result = vmulq_f32(v5, v6);
  *(_QWORD *)a1 = v3;
  *(float32x4_t *)(a1 + 8) = result;
  return result;
}

void _ColorMonochromeEffect._Resolved.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  __int32 v5;
  __int32 v6;
  __int32 v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  char v11;

  v2 = *(float32x4_t *)(a1 + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)a1;
  v3.i64[0] = 0x3C0000003C000000;
  v3.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    v9 = v2;
    swift_once();
    v3.i64[0] = 0x3C0000003C000000;
    v3.i64[1] = 0x3C0000003C000000;
    v2 = v9;
  }
  v8 = vmulq_f32(v2, v3);
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v4 = v8.f32[0];
    v6 = v8.i32[2];
    v5 = v8.i32[1];
    v7 = v8.i32[3];
  }
  else
  {
    v11 = 2;
    v10 = v8;
    v4 = ResolvedGradient.ColorSpace.convertOut(_:)(v10.f32);
  }
  *(float *)v1 = v4;
  *(_DWORD *)(v1 + 4) = v5;
  *(_DWORD *)(v1 + 8) = v6;
  *(_DWORD *)(v1 + 12) = v7;
}

void (*_ColorMonochromeEffect._Resolved.animatableData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  int8x16_t *v1;
  char *v3;
  uint64_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v9;
  float32x4_t v10;

  v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 3) = v1;
  v9 = *(float32x4_t *)v1;
  v4 = v1[1].i64[0];
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v6 = v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v10.f32, (int8x16_t)v9, v9.f32[1], v9.u32[2], v9.f32[3], v5);
    v6 = v10;
  }
  v7.i64[0] = 0x4300000043000000;
  v7.i64[1] = 0x4300000043000000;
  *((_QWORD *)v3 + 4) = v4;
  *(float32x4_t *)(v3 + 40) = vmulq_f32(v6, v7);
  return _ColorMonochromeEffect._Resolved.animatableData.modify;
}

void _ColorMonochromeEffect._Resolved.animatableData.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  __int32 v6;
  __int32 v7;
  __int32 v8;
  __int32 v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  float32x4_t v13;

  v2 = *(_QWORD **)a1;
  v3 = *(float32x4_t *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4.i64[0] = 0x3C0000003C000000;
  v4.i64[1] = 0x3C0000003C000000;
  v5 = vmulq_f32(v3, v4);
  if ((a2 & 1) != 0)
  {
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v6 = v5.i32[1];
      v8 = v5.i32[3];
      v7 = v5.i32[2];
    }
    else
    {
      v13 = v5;
      v5.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v13.f32);
    }
    v12 = (_DWORD *)v2[3];
    *v12 = v5.i32[0];
    v12[1] = v6;
    v12[2] = v7;
    v12[3] = v8;
  }
  else
  {
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v13 = v5;
      v5.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v13.f32);
      v5.i32[1] = v9;
      v5.i64[1] = __PAIR64__(v11, v10);
    }
    *(float32x4_t *)v2[3] = v5;
  }
  free(v2);
}

double _ColorMonochromeEffect._Resolved.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  double result;

  v3 = *v1;
  v4 = v1[1];
  v7 = v1 + 2;
  v5 = *((unsigned int *)v1 + 4);
  v6 = *((unsigned int *)v7 + 1);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v4;
  *(_QWORD *)(v8 + 32) = v6 | (v5 << 32);
  result = 0.0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 116) = 0u;
  *(_BYTE *)(v8 + 132) = 11;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMonochromeEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  double result;

  v3 = *v1;
  v4 = v1[1];
  v7 = v1 + 2;
  v5 = *((unsigned int *)v1 + 4);
  v6 = *((unsigned int *)v7 + 1);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v4;
  *(_QWORD *)(v8 + 32) = v6 | (v5 << 32);
  result = 0.0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 116) = 0u;
  *(_BYTE *)(v8 + 132) = 11;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance _ColorMonochromeEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;

  _ColorMonochromeEffect._Resolved.animatableData.getter((uint64_t)&v3);
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ColorMonochromeEffect._Resolved(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ColorMonochromeEffect._Resolved.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

float protocol witness for EnvironmentalModifier.resolve(in:) in conformance _ColorMonochromeEffect@<S0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  int v9;
  float result;
  int v11;
  int v12;
  __int128 v13;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v13 = *a1;
  v7 = (*(float (**)(__int128 *))(**(_QWORD **)&v4 + 104))(&v13);
  v8 = v6;
  *(float *)a2 = v7;
  *(_DWORD *)(a2 + 4) = v9;
  result = v5;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v12;
  *(float *)(a2 + 16) = v8;
  *(float *)(a2 + 20) = result;
  return result;
}

uint64_t View._colorMonochrome(_:amount:bias:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  _QWORD v6[3];

  v6[0] = a1;
  *(double *)&v6[1] = a4;
  *(double *)&v6[2] = a5;
  return View.modifier<A>(_:)(v6, a2, &type metadata for _ColorMonochromeEffect, a3);
}

uint64_t sub_234B1EB2C()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for _ColorMonochromeEffect._Resolved(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved;
  if (!lazy protocol witness table cache variable for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ColorMonochromeEffect._Resolved, &type metadata for _ColorMonochromeEffect._Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in _ColorMonochromeEffect()
{
  return &protocol witness table for _ColorMonochromeEffect._Resolved;
}

double sub_234B1EBFC@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;

  _ColorMonochromeEffect._Resolved.animatableData.getter((uint64_t)&v3);
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

void sub_234B1EC4C(uint64_t a1)
{
  _ColorMonochromeEffect._Resolved.animatableData.setter(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for _ColorMonochromeEffect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _ColorMonochromeEffect(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for _ColorMonochromeEffect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for _ColorMonochromeEffect()
{
  return &type metadata for _ColorMonochromeEffect;
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _ColorMonochromeEffect._Resolved(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ColorMonochromeEffect._Resolved(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ColorMonochromeEffect._Resolved()
{
  return &type metadata for _ColorMonochromeEffect._Resolved;
}

uint64_t sub_234B1EDB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _ColorMonochromeEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _ColorMonochromeEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void Gesture.simultaneously<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for SimultaneousGesture();
}

uint64_t sub_234B1EEEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void SimultaneousGesture.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for SimultaneousGesture();
}

uint64_t sub_234B1EF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for SimultaneousGesture()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t SimultaneousGesture.Value.first.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SimultaneousGesture.Value.first.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*SimultaneousGesture.Value.first.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SimultaneousGesture.Value.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t SimultaneousGesture.Value.second.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 52);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*SimultaneousGesture.Value.second.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void SimultaneousGesture.Value.init(first:second:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for SimultaneousGesture.Value();
}

uint64_t sub_234B1F200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

uint64_t SimultaneousGesture.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t SimultaneousGesture.first.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*SimultaneousGesture.first.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SimultaneousGesture.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t SimultaneousGesture.second.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*SimultaneousGesture.second.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static SimultaneousGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for SimultaneousGesture();
}

void sub_234B1F3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int32x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int32x2_t v57;
  _QWORD v58[6];

  *(_QWORD *)(v9 + 16) = a1;
  type metadata accessor for _GraphValue(0, a1, a3, a4);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:), v14, (_DWORD *)(v9 + 128));
  v18 = *(_OWORD *)(v17 - 192);
  *(_OWORD *)(v9 + 288) = *(_OWORD *)(v17 - 208);
  *(_OWORD *)(v9 + 304) = v18;
  v19 = *(_OWORD *)(v17 - 160);
  *(_OWORD *)(v9 + 320) = *(_OWORD *)(v17 - 176);
  *(_OWORD *)(v9 + 336) = v19;
  v20 = *(_OWORD *)(v17 - 224);
  *(_OWORD *)(v9 + 256) = *(_OWORD *)(v17 - 240);
  *(_OWORD *)(v9 + 272) = v20;
  *(_QWORD *)(v9 + 352) = v11;
  v21 = *(_DWORD *)(v9 + 168);
  *(_DWORD *)(v9 + 360) = v15;
  *(_DWORD *)(v9 + 372) = v21;
  *(_QWORD *)(v9 + 364) = *(_QWORD *)(v9 + 160);
  *(_DWORD *)(v9 + 376) = v16;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 32))(v9 + 128, v9 + 256, v14, v12);
  *(_QWORD *)(v9 + 104) = v11;
  if ((v16 & 8) != 0)
  {
    v22 = swift_conformsToProtocol2();
    if (!(v22 ? v14 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol())
        v24 = 2;
      else
        v24 = 1;
      *(_BYTE *)(v9 + 127) = v24;
      v25 = *(_OWORD *)(v17 - 192);
      *(_OWORD *)(v9 + 288) = *(_OWORD *)(v17 - 208);
      *(_OWORD *)(v9 + 304) = v25;
      v26 = *(_OWORD *)(v17 - 160);
      *(_OWORD *)(v9 + 320) = *(_OWORD *)(v17 - 176);
      *(_OWORD *)(v9 + 336) = v26;
      v27 = *(_OWORD *)(v17 - 224);
      *(_OWORD *)(v9 + 256) = *(_OWORD *)(v17 - 240);
      *(_OWORD *)(v9 + 272) = v27;
      *(_QWORD *)(v9 + 352) = v11;
      *(_QWORD *)(v9 + 364) = *(_QWORD *)(v9 + 160);
      v28 = *(_DWORD *)(v9 + 168);
      *(_DWORD *)(v9 + 360) = v15;
      *(_DWORD *)(v9 + 372) = v28;
      *(_DWORD *)(v9 + 376) = v16;
      v29 = *(_QWORD *)(v9 + 232);
      v30 = *(_DWORD *)(v9 + 240);
      *(_QWORD *)(v9 + 128) = *(_QWORD *)(v9 + 224);
      *(_QWORD *)(v9 + 136) = v29;
      *(_DWORD *)(v9 + 144) = v30;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v34 = v10;
      v35 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v32, v33);
      v36 = _GestureOutputs.debugData.getter();
      *(_BYTE *)(v9 + 128) = 1;
      *(_BYTE *)(v9 + 128) = 1;
      v37 = v35;
      v10 = v34;
      v11 = *(_QWORD *)(v9 + 104);
      v22 = _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v14, (char *)(v9 + 127), 0x100000000, (_OWORD *)(v9 + 256), v36 | ((HIDWORD(v36) & 1) << 32), 0x100000000, v37);
    }
  }
  *(_QWORD *)(v9 + 64) = &a9;
  v38 = *(int32x2_t *)(v9 + 224);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v9 + 232);
  *(_DWORD *)(v9 + 92) = *(_DWORD *)(v9 + 240);
  MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(v9 + 32) = v14;
  v58[2] = v14;
  v58[3] = v13;
  *(_QWORD *)(v9 + 48) = v12;
  v58[4] = v12;
  v58[5] = v10;
  *(_DWORD *)(v9 + 256) = *(_DWORD *)(v9 + 80);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:), v13, (_DWORD *)(v9 + 128));
  v39 = *(_OWORD *)(v17 - 192);
  *(_OWORD *)(v9 + 288) = *(_OWORD *)(v17 - 208);
  *(_OWORD *)(v9 + 304) = v39;
  v40 = *(_OWORD *)(v17 - 160);
  *(_OWORD *)(v9 + 320) = *(_OWORD *)(v17 - 176);
  *(_OWORD *)(v9 + 336) = v40;
  v41 = *(_OWORD *)(v17 - 224);
  *(_OWORD *)(v9 + 256) = *(_OWORD *)(v17 - 240);
  *(_OWORD *)(v9 + 272) = v41;
  *(_QWORD *)(v9 + 352) = v11;
  v42 = *(_DWORD *)(v9 + 168);
  *(_DWORD *)(v9 + 360) = v15;
  *(_DWORD *)(v9 + 372) = v42;
  *(_QWORD *)(v9 + 364) = *(_QWORD *)(v9 + 160);
  *(_DWORD *)(v9 + 376) = v16;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32))(v9 + 128, v9 + 256, v13, v10);
  if ((v16 & 8) != 0)
  {
    v43 = swift_conformsToProtocol2();
    if (!(v43 ? v13 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol())
        v45 = 2;
      else
        v45 = 1;
      *(_BYTE *)(v9 + 127) = v45;
      v46 = *(_OWORD *)(v17 - 192);
      *(_OWORD *)(v9 + 288) = *(_OWORD *)(v17 - 208);
      *(_OWORD *)(v9 + 304) = v46;
      v47 = *(_OWORD *)(v17 - 160);
      *(_OWORD *)(v9 + 320) = *(_OWORD *)(v17 - 176);
      *(_OWORD *)(v9 + 336) = v47;
      v48 = *(_OWORD *)(v17 - 224);
      *(_OWORD *)(v9 + 256) = *(_OWORD *)(v17 - 240);
      *(_OWORD *)(v9 + 272) = v48;
      *(_QWORD *)(v9 + 352) = *(_QWORD *)(v9 + 104);
      *(_QWORD *)(v9 + 364) = *(_QWORD *)(v9 + 160);
      v49 = *(_DWORD *)(v9 + 168);
      *(_DWORD *)(v9 + 360) = v15;
      *(_DWORD *)(v9 + 372) = v49;
      *(_DWORD *)(v9 + 376) = v16;
      v50 = *(_QWORD *)(v9 + 232);
      v51 = *(_DWORD *)(v9 + 240);
      *(_QWORD *)(v9 + 128) = *(_QWORD *)(v9 + 224);
      *(_QWORD *)(v9 + 136) = v50;
      *(_DWORD *)(v9 + 144) = v51;
      v52 = swift_getAssociatedTypeWitness();
      v55 = type metadata accessor for _GestureOutputs(0, v52, v53, v54);
      v56 = _GestureOutputs.debugData.getter();
      *(_BYTE *)(v9 + 128) = 1;
      *(_BYTE *)(v9 + 128) = 1;
      v43 = _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v13, (char *)(v9 + 127), 0x100000000, (_OWORD *)(v9 + 256), v56 | ((HIDWORD(v56) & 1) << 32), 0x100000000, v55);
    }
  }
  *(_DWORD *)(v9 + 12) = v15;
  v57 = *(int32x2_t *)(v9 + 224);
  *(_QWORD *)(v9 + 80) = *(_QWORD *)(v9 + 232);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v9 + 240);
  *(_QWORD *)(v9 + 24) = v58;
  *(int32x2_t *)(v9 + 224) = vzip1_s32(v38, v57);
  MEMORY[0x24BDAC7A8](v43);
  *(_QWORD *)(v9 + 256) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 264) = v13;
  *(_QWORD *)(v9 + 272) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v9 + 280) = v10;
  type metadata accessor for SimultaneousGesture.Value();
}

void sub_234B1F788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 - 32) = type metadata accessor for GesturePhase(0, a1, a3, a4);
  v4[32] = v7;
  v4[33] = v6;
  v4[7] = v6;
  v4[8] = v5;
  v4[34] = v9;
  v4[35] = v5;
  type metadata accessor for SimultaneousPhase();
}

uint64_t sub_234B1F7BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;

  *(_QWORD *)(v7 - 24) = a1;
  *(_QWORD *)(v7 - 16) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SimultaneousPhase<A, B>, a1);
  v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 224, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), v2, a1, MEMORY[0x24BEE4078], v13, MEMORY[0x24BEE40A8], v14);
  v15 = v5;
  v16 = v4;
  _GestureOutputs.init(phase:)(*(unsigned int *)(v1 + 256), v1 + 128);
  v17 = *(_QWORD *)(v1 + 104);
  v18 = *(_QWORD *)(v1 + 40);
  if ((v3 & 8) != 0)
  {
    *(_BYTE *)(v1 + 127) = 4;
    v19 = *(_OWORD *)(v8 - 192);
    *(_OWORD *)(v1 + 288) = *(_OWORD *)(v8 - 208);
    *(_OWORD *)(v1 + 304) = v19;
    v20 = *(_OWORD *)(v8 - 160);
    *(_OWORD *)(v1 + 320) = *(_OWORD *)(v8 - 176);
    *(_OWORD *)(v1 + 336) = v20;
    v21 = *(_OWORD *)(v8 - 224);
    *(_OWORD *)(v1 + 256) = *(_OWORD *)(v8 - 240);
    *(_OWORD *)(v1 + 272) = v21;
    *(_QWORD *)(v1 + 352) = v17;
    *(_QWORD *)(v1 + 364) = *(_QWORD *)(v1 + 160);
    v22 = *(_DWORD *)(v1 + 168);
    *(_DWORD *)(v1 + 360) = *(_DWORD *)(v1 + 12);
    *(_DWORD *)(v1 + 372) = v22;
    *(_DWORD *)(v1 + 376) = v3;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v1 + 224) = v9;
    *(_QWORD *)(v1 + 232) = v18;
    *(_DWORD *)(v1 + 240) = *(_DWORD *)(v1 + 92);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v24, v25);
    v26 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v1 + 224) = v11;
    *(_QWORD *)(v1 + 232) = v27;
    *(_DWORD *)(v1 + 240) = *(_DWORD *)(v1 + 76);
    v28 = swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs(0, v28, v29, v30);
    v31 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    v34 = type metadata accessor for _GestureOutputs(0, v15, v32, v33);
    *(_BYTE *)(v1 + 224) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(*(_QWORD *)(v1 + 16), (char *)(v1 + 127), 0x100000000, (_OWORD *)(v1 + 256), v26 | ((HIDWORD(v26) & 1) << 32), v31 | ((HIDWORD(v31) & 1) << 32), v34);
  }
  *(_QWORD *)(v1 + 256) = v10;
  *(_QWORD *)(v1 + 264) = v18;
  *(_DWORD *)(v1 + 272) = *(_DWORD *)(v1 + 92);
  *(_QWORD *)(v1 + 280) = *(_QWORD *)(v1 + 80);
  *(_DWORD *)(v1 + 288) = *(_DWORD *)(v1 + 76);
  v35 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 296) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v1 + 304) = 0;
  v36 = *(_QWORD *)(v1 + 96);
  if (*(_QWORD *)(v17 + 16))
  {
    swift_bridgeObjectRetain();
    v37 = v16;
    v39 = *(_QWORD *)(v1 + 56);
    v38 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 224) = v6;
    *(_QWORD *)(v1 + 232) = v39;
    *(_QWORD *)(v1 + 240) = v37;
    *(_QWORD *)(v1 + 248) = v38;
    type metadata accessor for SimultaneousPreferenceCombinerVisitor();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v36 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v36 + 8) = v35;
  *(_DWORD *)(v36 + 16) = 0;
  return result;
}

void closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for SimultaneousGesture();
}

uint64_t sub_234B1FAE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v8;
}

void closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for SimultaneousGesture();
}

uint64_t sub_234B1FB70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 52);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, v1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v9;
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SimultaneousGesture<A, B>()
{
  static SimultaneousGesture._makeGesture(gesture:inputs:)();
}

uint64_t static SimultaneousGesture.Value<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t, double);
  char *v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  _QWORD v50[4];
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t TupleTypeMetadata2;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v50[1] = a8;
  v52 = a7;
  v68 = a1;
  v69 = a2;
  v56 = a6;
  v54 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v50[0] = (char *)v50 - v11;
  v61 = v12;
  v13 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v50[3] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v59 = (char *)v50 - v14;
  v60 = v13;
  v57 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v50[2] = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v65 = (char *)v50 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v66 = (char *)v50 - v20;
  v55 = a5;
  v53 = a3;
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v51 = (char *)v50 - v23;
  v24 = type metadata accessor for Optional();
  v25 = swift_getTupleTypeMetadata2();
  v63 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v50 - v26;
  v28 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)v50 - v33;
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v50 - v37;
  v39 = *(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16);
  v39((char *)v50 - v37, v68, v24, v36);
  ((void (*)(char *, uint64_t, uint64_t))v39)(v34, v69, v24);
  v64 = v25;
  v40 = &v27[*(int *)(v25 + 48)];
  ((void (*)(char *, char *, uint64_t))v39)(v27, v38, v24);
  ((void (*)(char *, char *, uint64_t))v39)(v40, v34, v24);
  v62 = v22;
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v41(v27, 1, v21) == 1)
  {
    v42 = *(void (**)(char *, uint64_t))(v28 + 8);
    v42(v34, v24);
    v42(v38, v24);
    if (v41(v40, 1, v21) == 1)
    {
      v42(v27, v24);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  ((void (*)(char *, char *, uint64_t))v39)(v31, v27, v24);
  if (v41(v40, 1, v21) == 1)
  {
    v43 = *(void (**)(char *, uint64_t))(v28 + 8);
    v43(v34, v24);
    v43(v38, v24);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v31, v21);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v63 + 8))(v27, v64);
    return 0;
  }
  v44 = v62;
  v45 = v51;
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v51, v40, v21);
  v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  v47 = *(void (**)(char *, uint64_t))(v44 + 8);
  v47(v45, v21);
  v48 = *(void (**)(char *, uint64_t))(v28 + 8);
  v48(v34, v24);
  v48(v38, v24);
  v47(v31, v21);
  v48(v27, v24);
  if ((v46 & 1) != 0)
  {
LABEL_8:
    v70 = v53;
    v71 = v54;
    v72 = v55;
    v73 = v56;
    type metadata accessor for SimultaneousGesture.Value();
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> SimultaneousGesture<A, B>.Value(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static SimultaneousGesture.Value<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t SimultaneousGesture.Value<>.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  Optional<A>.hash(into:)();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  return Optional<A>.hash(into:)();
}

Swift::Int SimultaneousGesture.Value<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  SimultaneousGesture.Value<>.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SimultaneousPhase.phase1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v3, v4);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, Value, v5);
}

uint64_t SimultaneousPhase.phase2.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v3, v4);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, Value, v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> SimultaneousGesture<A, B>.Value()
{
  return SimultaneousGesture.Value<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> SimultaneousGesture<A, B>.Value()
{
  return SimultaneousGesture.Value<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> SimultaneousGesture<A, B>.Value()
{
  Hasher.init(_seed:)();
  SimultaneousGesture.Value<>.hash(into:)();
  return Hasher._finalize()();
}

void SimultaneousPhase.value.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _QWORD v43[14];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t TupleTypeMetadata2;
  uint64_t v51;
  uint64_t v52;

  v51 = a4;
  v52 = a5;
  v48 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v43[1] = (char *)v43 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v12);
  v43[13] = (char *)v43 - v13;
  v14 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v14);
  v43[12] = (char *)v43 - v15;
  v43[5] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v43[2] = (char *)v43 - v17;
  v43[8] = AssociatedTypeWitness;
  v20 = type metadata accessor for GesturePhase(255, AssociatedTypeWitness, v18, v19);
  v43[6] = v11;
  v23 = type metadata accessor for GesturePhase(255, v11, v21, v22);
  v45 = v23;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v43[3] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v25 = (char *)v43 - v24;
  v44 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v43[10] = (char *)v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)v43 - v29;
  v31 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v43[9] = (char *)v43 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v43[4] = (char *)v43 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)v43 - v37;
  SimultaneousPhase.phase1.getter((uint64_t)v43 - v37);
  v43[11] = a1;
  v46 = a2;
  v47 = a3;
  v39 = v44;
  v40 = v45;
  SimultaneousPhase.phase2.getter((uint64_t)v30);
  v41 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v25, v38, v20);
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v41, v30, v40);
  v49 = v20;
  v42 = (char *)sub_234B2080C + 4 * aNs[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_234B2080C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)(v5 - 272);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v6, v2, *(_QWORD *)(v5 - 152));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v22 = *(_QWORD *)(v5 - 248);
    v21 = *(_QWORD *)(v5 - 240);
    v23 = *(_QWORD *)(v5 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v23, v6, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v23, 0, 1, v21);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 264) + 56))(*(_QWORD *)(v5 - 200), 1, 1, *(_QWORD *)(v5 - 256));
    v19 = *(_QWORD *)(v5 - 160);
    v20 = v23;
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 248) + 8))(v6, *(_QWORD *)(v5 - 240));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v24 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
        *(_QWORD *)(v5 - 144) = v24;
        v24(v1, v4);
        v25 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
        v26 = *(_QWORD *)(v5 - 152);
        v25(v2, v26);
        v27 = *(_QWORD *)(v5 - 232);
        SimultaneousPhase.phase1.getter(v27);
        v28 = *(_QWORD *)(v5 - 208);
        GesturePhase.unwrapped.getter(v26);
        v25(v27, v26);
        v29 = *(_QWORD *)(v5 - 224);
        SimultaneousPhase.phase2.getter(v29);
        GesturePhase.unwrapped.getter(v4);
        (*(void (**)(uint64_t, uint64_t))(v5 - 144))(v29, v4);
        SimultaneousGesture.Value.init(first:second:)(v28, *(_QWORD *)(v5 - 160));
      }
      v30 = *(_QWORD *)(v5 - 168);
      *(_QWORD *)(v5 - 120) = *(_QWORD *)(v5 - 176);
      *(_QWORD *)(v5 - 112) = v30;
      v31 = *(_QWORD *)(v5 - 128);
      *(_QWORD *)(v5 - 104) = *(_QWORD *)(v5 - 136);
      *(_QWORD *)(v5 - 96) = v31;
      type metadata accessor for SimultaneousGesture.Value();
    }
    v9 = *(_QWORD *)(v5 - 248);
    v8 = *(_QWORD *)(v5 - 240);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v11 = *(_QWORD *)(v5 - 296);
    v10(v11, v6, v8);
    v12 = *(_QWORD *)(v5 - 264);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    *(_QWORD *)(v5 - 144) = v13;
    v14 = *(_QWORD *)(v5 - 288);
    v15 = v1;
    v16 = *(_QWORD *)(v5 - 256);
    v13(v14, v15, v16);
    v17 = *(_QWORD *)(v5 - 208);
    v10(v17, v11, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
    v18 = *(_QWORD *)(v5 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 144))(v18, v14, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v16);
    v19 = *(_QWORD *)(v5 - 160);
    v20 = v17;
  }
  SimultaneousGesture.Value.init(first:second:)(v20, v19);
}

void sub_234B20BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = v1;
  *(_QWORD *)(v4 - 96) = v0;
  type metadata accessor for SimultaneousGesture.Value();
}

void sub_234B20C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for GesturePhase(0, a1, a3, a4);
  JUMPOUT(0x234B20C24);
}

void protocol witness for static Rule.initialValue.getter in conformance SimultaneousPhase<A, B>()
{
  type metadata accessor for SimultaneousGesture.Value();
}

uint64_t sub_234B20C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for GesturePhase(0, a1, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

void protocol witness for Rule.value.getter in conformance SimultaneousPhase<A, B>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  SimultaneousPhase.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

void SimultaneousPreferenceCombinerVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  PreferencesOutputs.subscript.getter(a3, a3, a4, a4);
  PreferencesOutputs.subscript.getter(a3, a3, a4, v6);
  swift_getAssociatedTypeWitness();
  type metadata accessor for SimultaneousPreference();
}

void sub_234B20DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];
  unsigned int v9;

  v8[3] = a1;
  v8[4] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SimultaneousPreference<A, B, C>, a1);
  v4 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v8, a1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  v6 = v9;
  LOBYTE(v9) = 0;
  PreferencesOutputs.subscript.setter(v6, v2, v2, v1);
}

uint64_t SimultaneousPreference.value1.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v4 = *MEMORY[0x24BE096C0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = AssociatedTypeWitness;
  if (v4 == a1)
  {
    v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

uint64_t SimultaneousPreference.value2.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  int v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v3 = HIDWORD(a1);
  v4 = *MEMORY[0x24BE096C0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = AssociatedTypeWitness;
  if (v4 == (_DWORD)v3)
  {
    v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

uint64_t SimultaneousPreference.phase1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v3, v4);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, Value, v5);
}

uint64_t SimultaneousPreference.phase2.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v3, v4);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, Value, v5);
}

void protocol witness for PreferenceKeyVisitor.visit<A>(key:) in conformance SimultaneousPreferenceCombinerVisitor<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  SimultaneousPreferenceCombinerVisitor.visit<A>(key:)(a1, a4, a2, a3);
}

uint64_t SimultaneousPreference.mergedValue()@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v97 = a4;
  v98 = a7;
  v94 = a6;
  v99 = a3;
  v96 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v12, v13);
  v88 = *(_QWORD *)(v14 - 8);
  v89 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v87 = (uint64_t)&v77 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v90 = *(_QWORD *)(v17 - 8);
  v91 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v81 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v84 = (uint64_t)&v77 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v83 = (uint64_t)&v77 - v22;
  v23 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v79 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v78 = (char *)&v77 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v82 = (char *)&v77 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v80 = (char *)&v77 - v31;
  v32 = a5;
  v95 = a2;
  v33 = swift_getAssociatedTypeWitness();
  v36 = type metadata accessor for GesturePhase(0, v33, v34, v35);
  v86 = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v77 - v38;
  v92 = v16;
  v93 = v23;
  v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v23 + 56);
  v85((uint64_t)v96, 1, 1, v16, v37);
  SimultaneousPreference.phase1.getter((uint64_t)v39);
  LOBYTE(a2) = GesturePhase.isFailed.getter(v36);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v39, v36);
  if ((a2 & 1) == 0)
  {
    v40 = v83;
    v86 = a1;
    SimultaneousPreference.value1.getter(a1, v83);
    v42 = v92;
    v41 = v93;
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v40, 1, v92);
    v44 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    if (v43 == 1)
    {
      v44(v40, v91);
    }
    else
    {
      v45 = v32;
      v46 = v96;
      v44((uint64_t)v96, v91);
      v47 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
      v48 = v80;
      v47(v80, v40, v42);
      v47(v46, (uint64_t)v48, v42);
      v49 = v46;
      v32 = v45;
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v85)(v49, 0, 1, v42);
    }
    a1 = v86;
  }
  v50 = v87;
  SimultaneousPreference.phase2.getter(v87);
  v51 = v89;
  v52 = GesturePhase.isFailed.getter(v89);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 8))(v50, v51);
  if (!v52)
  {
    v54 = v84;
    SimultaneousPreference.value2.getter(a1, v84);
    v56 = v92;
    v55 = v93;
    v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
    if (v57((char *)v54, 1, v92) == 1)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v54, v91);
    }
    else
    {
      v58 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 32);
      v59 = v82;
      v58(v82, v54, v56);
      v60 = v90;
      v61 = v91;
      v62 = v81;
      v63 = v55;
      v64 = v96;
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v81, v96, v91);
      if (v57(v62, 1, v56) == 1)
      {
        v65 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
        v65((uint64_t)v64, v61);
        v66 = v62;
        v67 = v61;
      }
      else
      {
        v68 = v63;
        v69 = v78;
        v58(v78, (uint64_t)v62, v56);
        v70 = *(uint64_t (**)(char *, char *, uint64_t))(v68 + 16);
        v71 = v59;
        v59 = v79;
        v72 = v70(v79, v69, v56);
        v73 = MEMORY[0x24BDAC7A8](v72);
        v74 = v98;
        v75 = v99;
        *(&v77 - 8) = v95;
        *(&v77 - 7) = v75;
        *(&v77 - 6) = v97;
        *(&v77 - 5) = v32;
        *(&v77 - 4) = v94;
        *(&v77 - 3) = v74;
        *(&v77 - 2) = (uint64_t)v71;
        v76 = v71;
        (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v74 + 24))(v59, partial apply for closure #1 in SimultaneousPreference.mergedValue(), v73);
        v65 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
        v65((uint64_t)v69, v56);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v61);
        v66 = v76;
        v67 = v56;
      }
      v65((uint64_t)v66, v67);
      v58(v64, (uint64_t)v59, v56);
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v85)(v64, 0, 1, v56);
    }
  }
  return result;
}

uint64_t static SimultaneousPreference.initialValue.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
}

void SimultaneousPreference.value.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _QWORD v45[16];
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t TupleTypeMetadata2;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a8;
  v52 = a2;
  v53 = a5;
  v45[15] = a9;
  v45[13] = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v45[5] = *(_QWORD *)(v14 - 8);
  v45[6] = v14;
  MEMORY[0x24BDAC7A8](v14);
  v45[7] = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v45[4] = (char *)v45 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v45[3] = (char *)v45 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v45[2] = (char *)v45 - v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = type metadata accessor for GesturePhase(255, AssociatedTypeWitness, v23, v24);
  v26 = swift_getAssociatedTypeWitness();
  v29 = type metadata accessor for GesturePhase(255, v26, v27, v28);
  v46 = v25;
  v47 = v29;
  v30 = v29;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45[1] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v48 = (char *)v45 - v31;
  v51 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v54 = (uint64_t)v45 - v33;
  v34 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)v45 - v36;
  SimultaneousPreference.phase1.getter((uint64_t)v45 - v36);
  v45[8] = a1;
  v45[9] = a3;
  v45[10] = a4;
  v45[11] = a6;
  v38 = v51;
  v40 = v48;
  v39 = TupleTypeMetadata2;
  v42 = v46;
  v41 = v47;
  v45[12] = a7;
  SimultaneousPreference.phase2.getter(v54);
  v43 = &v40[*(int *)(v39 + 48)];
  v45[14] = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v40, v37, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v43, v54, v41);
  v44 = (char *)sub_234B21A54 + 4 * asc_235283AE3[swift_getEnumCaseMultiPayload() + 1];
  __asm { BR              X10 }
}

uint64_t sub_234B21A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = v1;
  v9 = *(_QWORD *)(v6 - 104);
  v10 = *(_QWORD *)(v6 - 168);
  v11 = *(_QWORD *)(v6 - 184);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 8))(v4, v5);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 8))(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  }
  v12 = *(char **)(v6 - 232);
  SimultaneousPreference.mergedValue()(*(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216), *(_QWORD *)(v6 - 208), v9, *(_QWORD *)(v6 - 200), *(_QWORD *)(v6 - 192), v8, v12);
  v13 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v10, v12, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v9, v8);
  return (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)(v6 - 248) + 8))(v12, *(_QWORD *)(v6 - 240));
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SimultaneousPreference<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static SimultaneousPreference.initialValue.getter(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), a2);
}

void protocol witness for Rule.value.getter in conformance SimultaneousPreference<A, B, C>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  SimultaneousPreference.value.getter(*v2, v2[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance SimultaneousPreference<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v18 - v12;
  static SimultaneousPreference.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18[-2] = a2;
  v18[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SimultaneousPreference<A, B, C>, a2, v16);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v18[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v17);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

void partial apply for closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:)()
{
  closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:)();
}

void partial apply for closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:)()
{
  closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:)();
}

void type metadata accessor for SimultaneousGesture.Value()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for SimultaneousPhase()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

void type metadata accessor for SimultaneousPreferenceCombinerVisitor()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t instantiation function for generic protocol witness table for SimultaneousGesture<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SimultaneousGesture<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for Gesture.Body : Gesture in SimultaneousGesture<A, B>()
{
  return &protocol witness table for Never;
}

uint64_t base witness table accessor for Equatable in <> SimultaneousGesture<A, B>.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v5[1] = v3;
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> SimultaneousGesture<A, B>.Value, a1, v5);
}

uint64_t type metadata instantiation function for SimultaneousGesture()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for SimultaneousGesture()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SimultaneousGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t destroy for SimultaneousGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SimultaneousGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234B22548 + 4 * byte_235283AE8[v17 - 1]))();
}

void storeEnumTagSinglePayload for SimultaneousGesture(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for SimultaneousGesture.Value()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SimultaneousGesture.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v11 = v6 + v9;
  if (*(_DWORD *)(v8 + 84))
    v12 = *(_QWORD *)(v8 + 64);
  else
    v12 = *(_QWORD *)(v8 + 64) + 1;
  v13 = *(_DWORD *)(v5 + 80) | v9;
  v14 = (*(_BYTE *)(v5 + 80) | v9);
  v15 = v13 & 0x100000;
  if (v14 > 7 || v15 != 0 || ((v6 + v10) & ~v10) + v12 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    v19 = v7;
    v20 = ~v10;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    v21 = (const void *)(((unint64_t)a2 + v11) & v20);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v21, 1, v19))
    {
      memcpy((void *)(((unint64_t)a1 + v11) & v20), v21, v12);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v8 + 16))(((unint64_t)a1 + v11) & v20, v21, v19);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(((unint64_t)a1 + v11) & v20, 0, 1, v19);
    }
  }
  return a1;
}

uint64_t destroy for SimultaneousGesture.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = v4 == 0;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = v5 + a1;
  if (v7)
    ++v9;
  v10 = (v9 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v10, v6);
  return result;
}

void *initializeWithCopy for SimultaneousGesture.Value(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
    if (v6)
      v8 = v7;
    else
      v8 = v7 + 1;
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
  }
  if (v6)
    v9 = v7;
  else
    v9 = v7 + 1;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (void *)(((unint64_t)a1 + v9 + v12) & ~v12);
  v15 = (const void *)(((unint64_t)a2 + v13) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84))
      v16 = *(_QWORD *)(v11 + 64);
    else
      v16 = *(_QWORD *)(v11 + 64) + 1;
    memcpy(v14, v15, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for SimultaneousGesture.Value(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, AssociatedTypeWitness);
  v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(a1, a2, v9);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)(((unint64_t)a1 + v10 + v13) & ~v13);
  v15 = (void *)(((unint64_t)a2 + v10 + v13) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v17 = v16(v14, 1, v11);
  v18 = v16(v15, 1, v11);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v14, v15, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      return a1;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v14, v15, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v19);
  return a1;
}

void *initializeWithTake for SimultaneousGesture.Value(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
    if (v6)
      v8 = v7;
    else
      v8 = v7 + 1;
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
  }
  if (v6)
    v9 = v7;
  else
    v9 = v7 + 1;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (void *)(((unint64_t)a1 + v9 + v12) & ~v12);
  v15 = (const void *)(((unint64_t)a2 + v13) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84))
      v16 = *(_QWORD *)(v11 + 64);
    else
      v16 = *(_QWORD *)(v11 + 64) + 1;
    memcpy(v14, v15, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

void *assignWithTake for SimultaneousGesture.Value(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, AssociatedTypeWitness);
  v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(a1, a2, v9);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)(((unint64_t)a1 + v10 + v13) & ~v13);
  v15 = (void *)(((unint64_t)a2 + v10 + v13) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v17 = v16(v14, 1, v11);
  v18 = v16(v15, 1, v11);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v14, v15, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      return a1;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v14, v15, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimultaneousGesture.Value(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if ((_DWORD)v6)
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  if ((_DWORD)v10)
    v14 = *(_QWORD *)(v9 + 64);
  else
    v14 = *(_QWORD *)(v9 + 64) + 1;
  if (!a2)
    return 0;
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = v13 + v15;
  if (a2 <= v12)
    goto LABEL_35;
  v17 = v14 + (v16 & ~v15);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v20 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_35;
      goto LABEL_26;
    }
    if (v20 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_35;
      goto LABEL_26;
    }
    if (v20 < 2)
    {
LABEL_35:
      if (v12)
      {
        if (v7 >= v11)
          v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
        else
          v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v16 + a1) & ~v15, v10, v8);
        if (v23 >= 2)
          return v23 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_35;
LABEL_26:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v12 + v21 + 1;
}

void storeEnumTagSinglePayload for SimultaneousGesture.Value(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  if (v7)
    v14 = *(_QWORD *)(v6 + 64);
  else
    v14 = *(_QWORD *)(v6 + 64) + 1;
  v15 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v15;
  v16 = ((v14 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)) + v15;
  if (a3 > v13)
  {
    if (v16 > 3)
    {
      v9 = 1u;
      if (v13 >= a2)
        goto LABEL_18;
LABEL_24:
      v18 = ~v13 + a2;
      if (v16 < 4)
      {
        if ((_DWORD)v16)
        {
          v19 = v18 & ~(-1 << (8 * v16));
          bzero(a1, v16);
          if ((_DWORD)v16 == 3)
          {
            *(_WORD *)a1 = v19;
            a1[2] = BYTE2(v19);
          }
          else if ((_DWORD)v16 == 2)
          {
            *(_WORD *)a1 = v19;
          }
          else
          {
            *a1 = v19;
          }
        }
      }
      else
      {
        bzero(a1, v16);
        *(_DWORD *)a1 = v18;
      }
      __asm { BR              X10 }
    }
    v17 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v17))
    {
      v9 = 4u;
      if (v13 < a2)
        goto LABEL_24;
LABEL_18:
      __asm { BR              X15 }
    }
    if (v17 >= 0x100)
      v9 = 2;
    else
      v9 = v17 > 1;
  }
  if (v13 < a2)
    goto LABEL_24;
  goto LABEL_18;
}

void sub_234B237A0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x234B23784);
}

void sub_234B237A8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x234B23784);
}

void sub_234B237B8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x234B23784);
}

uint64_t type metadata instantiation function for SimultaneousPreferenceCombinerVisitor()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for SimultaneousPreferenceCombinerVisitor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SimultaneousPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SimultaneousPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy52_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SimultaneousPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimultaneousPreferenceCombinerVisitor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 52))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimultaneousPreferenceCombinerVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 52) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 52) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in SimultaneousPhase<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for SimultaneousPreference()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata instantiation function for SimultaneousPreference()
{
  return swift_allocateGenericValueMetadata();
}

void base witness table accessor for _AttributeBody in SimultaneousPreference<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in SimultaneousPreference.mergedValue()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(v1 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v3, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in static Rule._updateDefault(_:)()
{
  return closure #1 in static Rule._updateDefault(_:)();
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply@<X0>(_DWORD *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for [ViewResponder](0);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8(a1);
}

{
  type metadata accessor for ViewList();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t closure #1 in static PointerOffset.of(_:)partial apply@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return partial apply for closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4(a1, a2);
}

{
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t RangeSet.overlaps(_:)(uint64_t a1, uint64_t a2)
{
  return RangeSet.overlaps(_:)(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = type metadata accessor for RangeSet.Ranges();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-v7];
  RangeSet.ranges.getter();
  v12 = v3;
  v13 = v4;
  v14 = a1;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE4928], v5);
  v9 = Sequence.contains(where:)();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  return v9 & 1;
}

uint64_t partial apply for closure #1 in RangeSet.overlaps(_:)(uint64_t a1)
{
  return partial apply for closure #1 in RangeSet.overlaps(_:)(a1, MEMORY[0x24BEE1B58]) & 1;
}

uint64_t RangeSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  return RangeSet.overlaps(_:)(a1, a2);
}

uint64_t partial apply for closure #1 in RangeSet.contains(_:)(uint64_t a1)
{
  return partial apply for closure #1 in RangeSet.overlaps(_:)(a1, (uint64_t (*)(uint64_t, uint64_t))Range.contains(_:)) & 1;
}

uint64_t partial apply for closure #1 in RangeSet.overlaps(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 32);
  v5 = type metadata accessor for Range();
  return a2(v4, v5) & 1;
}

uint64_t RangeSet.insert(contentsOf:)(void (*a1)(char *, char *, uint64_t), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(_QWORD *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  _QWORD v26[4];

  v24 = a1;
  v3 = type metadata accessor for Range();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - v5;
  v7 = type metadata accessor for RangeSet.Ranges();
  v23 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - v9;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE4930], v7, v8);
  v11 = type metadata accessor for IndexingIterator();
  v22 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v21 - v15;
  v25 = a2;
  RangeSet.ranges.getter();
  v24 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v24(v13, v10, v7);
  dispatch thunk of Collection.startIndex.getter();
  v23 = *(_QWORD *)(v23 + 8);
  ((void (*)(char *, uint64_t))v23)(v10, v7);
  *(_QWORD *)&v13[*(int *)(v11 + 36)] = v26[0];
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v16, v13, v11);
  v21 = v11;
  v17 = &v16[*(int *)(v11 + 36)];
  while (1)
  {
    v18 = *(_QWORD *)v17;
    dispatch thunk of Collection.endIndex.getter();
    if (v18 == v26[0])
      break;
    v19 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v4 + 16))(v6);
    v19(v26, 0);
    v24(v10, v16, v7);
    dispatch thunk of Collection.formIndex(after:)();
    ((void (*)(char *, uint64_t))v23)(v10, v7);
    RangeSet.insert(contentsOf:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v16, v21);
}

uint64_t RangeSet.lowerBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for RangeSet.Ranges();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v18 - v5;
  v7 = type metadata accessor for Range();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - v10;
  RangeSet.ranges.getter();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE4930], v3);
  Collection.first.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v13 = *(_QWORD *)(v2 - 8);
    v14 = 1;
    v15 = v19;
  }
  else
  {
    v13 = *(_QWORD *)(v2 - 8);
    v16 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v19, v11, v2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
    v14 = 0;
    v15 = v16;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, v14, 1, v2);
}

uint64_t RangeSet.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for RangeSet.Ranges();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v18 - v5;
  v7 = type metadata accessor for Range();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - v10;
  RangeSet.ranges.getter();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE4920], v3);
  BidirectionalCollection.last.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v13 = *(_QWORD *)(v2 - 8);
    v14 = 1;
    v15 = v19;
  }
  else
  {
    v13 = *(_QWORD *)(v2 - 8);
    v16 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v19, &v11[*(int *)(v7 + 36)], v2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
    v14 = 0;
    v15 = v16;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, v14, 1, v2);
}

uint64_t RangeSet<>.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t TupleTypeMetadata2;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v47 = a2;
  v50 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v40 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v40 - v10;
  v48 = a3;
  v12 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 16);
  v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - v14;
  v16 = *(_QWORD **)(v4 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Range();
  v43 = *(_QWORD *)(v20 - 8);
  v44 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v41 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v42 = (char *)&v40 - v23;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x23B7C7558](&qword_235283E58, 512, v13, AssociatedConformanceWitness);
  v25 = v12;
  v26 = v50;
  MEMORY[0x23B7C742C](v15, AssociatedTypeWitness, v25);
  dispatch thunk of Strideable.advanced(by:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v11, AssociatedTypeWitness);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v29 = v45;
    v28 = TupleTypeMetadata2;
    v30 = &v45[*(int *)(TupleTypeMetadata2 + 48)];
    v31 = (void (*)(char *, uint64_t, uint64_t))v16[2];
    v31(v45, v26, v4);
    v32 = (void (*)(char *, char *, uint64_t))v16[4];
    v32(v30, v19, v4);
    v33 = &v6[*(int *)(v28 + 48)];
    v31(v6, (uint64_t)v29, v4);
    v31(v33, (uint64_t)v30, v4);
    v34 = v41;
    v32(v41, v6, v4);
    v35 = (void (*)(char *, uint64_t))v16[1];
    v35(v33, v4);
    v36 = &v6[*(int *)(v28 + 48)];
    v32(v6, v29, v4);
    v32(v36, v30, v4);
    v37 = v44;
    v32(&v34[*(int *)(v44 + 36)], v36, v4);
    v35(v6, v4);
    v39 = v42;
    v38 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v34, v37);
    RangeSet.insert(contentsOf:)();
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v37);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RangeSet<>.reduce<A>(_:_:)@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD, _QWORD)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  char *v29;
  void (*v30)(_QWORD, _QWORD);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *, _QWORD);
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD, _QWORD);
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD v63[3];
  uint64_t v64[5];

  v55 = a6;
  v60 = a5;
  v48 = a4;
  v58 = a2;
  v59 = a3;
  v49 = a1;
  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v50 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v10;
  v11 = type metadata accessor for Range();
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v45 - v12;
  v13 = type metadata accessor for RangeSet.Ranges();
  v47 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v45 - v15;
  v17 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4930], v13, v14);
  v18 = type metadata accessor for IndexingIterator();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v45 - v24;
  v51 = v8;
  v26 = a7;
  (*(void (**)(uint64_t, void (*)(char *, char *, uint64_t), uint64_t, double))(v8 + 16))(a7, v49, v60, v23);
  RangeSet.ranges.getter();
  v27 = v47;
  v49 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v49(v21, v16, v13);
  dispatch thunk of Collection.startIndex.getter();
  v28 = *(void (**)(_QWORD, _QWORD))(v27 + 8);
  v52 = v16;
  v29 = v25;
  v30 = v28;
  v28(v16, v13);
  *(_QWORD *)&v21[*(int *)(v18 + 36)] = v64[0];
  v46 = v19;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v29, v21, v18);
  v47 = v18;
  v31 = &v29[*(int *)(v18 + 36)];
  v32 = *(_QWORD *)v31;
  dispatch thunk of Collection.endIndex.getter();
  if (v32 != v64[0])
  {
    v62 = v29;
    v48 = v30;
    v61 = v17;
    v33 = v57;
    do
    {
      v34 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v35 = v56;
      v36 = v53;
      (*(void (**)(char *))(v56 + 16))(v53);
      v34(v64, 0);
      v37 = v52;
      v49(v52, v62, v13);
      dispatch thunk of Collection.formIndex(after:)();
      v30(v37, v13);
      v63[0] = v54;
      v63[1] = v55;
      MEMORY[0x23B7C9C04](MEMORY[0x24BEE1BB8], v33, v63);
      v38 = v50;
      v39 = v26;
      v40 = v60;
      Sequence.reduce<A>(_:_:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v33);
      v41 = v51;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v39, v40);
      v42 = v38;
      v30 = v48;
      (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v39, v42, v40);
      v43 = *(_QWORD *)v31;
      dispatch thunk of Collection.endIndex.getter();
      v29 = v62;
      v26 = v39;
    }
    while (v43 != v64[0]);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v29, v47);
}

uint64_t RangeSet<>.indexSequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v7, v2, a1, v5);
  return RangeSet<>.IndexSequence.init(_:)((uint64_t)v7, a2);
}

uint64_t RangeSet<>.IndexSequence.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for RangeSet.Ranges();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - v6;
  v8 = type metadata accessor for RangeSet();
  RangeSet.ranges.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t RangeSet<>.IndexSequence.Iterator.init(ranges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  *a5 = 0;
  v12 = type metadata accessor for RangeSet<>.IndexSequence.Iterator(0, a2, a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x23B7C7558](&unk_235260F38, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_checkMetadataState();
  MEMORY[0x23B7C742C](v11);
  v14 = (char *)a5 + *(int *)(v12 + 48);
  v15 = type metadata accessor for RangeSet.Ranges();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, v18, v15);
}

uint64_t RangeSet<>.IndexSequence.Iterator.next()@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  char *v54;
  uint64_t v55;
  char v56;
  uint64_t (*v57)(char *, uint64_t);
  char *v58;
  char v59;
  uint64_t (*v60)(char *, uint64_t);
  uint64_t v61;
  BOOL v62;
  char *v63;
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t (*v72)(char *, uint64_t);
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  _QWORD v95[3];

  v88 = a2;
  v5 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v84 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v78 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v79 = (char *)&v74 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v83 = (char *)&v74 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v91 = (char *)&v74 - v13;
  v81 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v92 = *(_QWORD *)(v81 + 16);
  v85 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v85);
  v86 = v4;
  v87 = (char *)&v74 - v14;
  v89 = type metadata accessor for Range();
  v80 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v82 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v74 - v17;
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v74 - v24;
  v26 = *v2;
  v90 = a1;
  v27 = *((int *)a1 + 12);
  v93 = v2;
  v28 = (char *)v2 + v27;
  type metadata accessor for RangeSet.Ranges();
  if (v26 >= RangeSet.Ranges.count.getter())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v88, 1, 1, v5);
  RangeSet.Ranges.subscript.getter();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v18, v5);
  v80 = *(_QWORD *)(v80 + 8);
  ((void (*)(char *, uint64_t))v80)(v18, v89);
  v29 = (char *)v93 + *((int *)v90 + 11);
  v75 = v25;
  v30 = v86;
  dispatch thunk of Strideable.advanced(by:)();
  v76 = v19;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v5);
  v31 = v92;
  v32 = v85;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v34 = v87;
  v74 = AssociatedConformanceWitness;
  MEMORY[0x23B7C7558](&qword_235283E58, 512, v32);
  v77 = v28;
  v35 = v91;
  MEMORY[0x23B7C742C](v34, AssociatedTypeWitness, v31);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v36 = v84;
  v81 = *(_QWORD *)(v84 + 8);
  ((void (*)(char *, uint64_t))v81)(v35, AssociatedTypeWitness);
  v37 = v82;
  RangeSet.Ranges.subscript.getter();
  v38 = v89;
  v39 = *((_QWORD *)v90 + 4);
  v95[0] = v30;
  v95[1] = v39;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE1BD8], v89, v95);
  v40 = Collection.count.getter();
  ((void (*)(char *, uint64_t))v80)(v37, v38);
  v41 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v42 = v83;
  v41(v83, v29, AssociatedTypeWitness);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v90 = v29;
    v52 = v42;
    v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v54 = v52;
    v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v53 & 1) != 0)
    {
      if (v55 > 64)
      {
        v94 = v40;
        lazy protocol witness table accessor for type Int and conformance Int();
        v48 = v91;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        swift_getAssociatedConformanceWitness();
        v56 = dispatch thunk of static Comparable.< infix(_:_:)();
        v57 = (uint64_t (*)(char *, uint64_t))v81;
        ((void (*)(char *, uint64_t))v81)(v48, AssociatedTypeWitness);
        result = v57(v54, AssociatedTypeWitness);
        v47 = v88;
        v49 = v92;
LABEL_20:
        v50 = v76;
        v51 = v75;
        v29 = v90;
        if ((v56 & 1) != 0)
          goto LABEL_29;
        goto LABEL_27;
      }
      v63 = v87;
      MEMORY[0x23B7C7558](&unk_235260F38, 256, v32, v74);
      v64 = v91;
      MEMORY[0x23B7C742C](v63, AssociatedTypeWitness, v92);
      swift_getAssociatedConformanceWitness();
      v65 = dispatch thunk of static Comparable.< infix(_:_:)();
      v66 = (void (*)(char *, uint64_t))v81;
      ((void (*)(char *, uint64_t))v81)(v64, AssociatedTypeWitness);
      v67 = v79;
      v41(v79, v54, AssociatedTypeWitness);
      if ((v65 & 1) != 0)
      {
        v66(v67, AssociatedTypeWitness);
        v66(v54, AssociatedTypeWitness);
        v47 = v88;
        v50 = v76;
        v51 = v75;
LABEL_29:
        (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v47, v51, v5);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v5);
      }
      v70 = dispatch thunk of BinaryInteger._lowWord.getter();
      v66(v67, AssociatedTypeWitness);
      result = ((uint64_t (*)(char *, uint64_t))v66)(v54, AssociatedTypeWitness);
      v62 = v70 < v40;
      v47 = v88;
      v48 = v91;
      v49 = v92;
    }
    else
    {
      v49 = v92;
      if (v55 >= 64)
      {
        v68 = v78;
        v41(v78, v54, AssociatedTypeWitness);
        v94 = v40;
        if (v40 <= 0)
        {
          v71 = v68;
          v72 = (uint64_t (*)(char *, uint64_t))v81;
          ((void (*)(char *, uint64_t))v81)(v71, AssociatedTypeWitness);
          result = v72(v54, AssociatedTypeWitness);
          v47 = v88;
          v29 = v90;
          v48 = v91;
          v50 = v76;
          v51 = v75;
          goto LABEL_27;
        }
        lazy protocol witness table accessor for type Int and conformance Int();
        v48 = v91;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        swift_getAssociatedConformanceWitness();
        v56 = dispatch thunk of static Comparable.< infix(_:_:)();
        v69 = (void (*)(char *, uint64_t))v81;
        ((void (*)(char *, uint64_t))v81)(v48, AssociatedTypeWitness);
        v69(v68, AssociatedTypeWitness);
        result = ((uint64_t (*)(char *, uint64_t))v69)(v54, AssociatedTypeWitness);
        v47 = v88;
        goto LABEL_20;
      }
      v61 = dispatch thunk of BinaryInteger._lowWord.getter();
      result = ((uint64_t (*)(char *, uint64_t))v81)(v52, AssociatedTypeWitness);
      v62 = v61 < v40;
      v47 = v88;
      v48 = v91;
    }
    v50 = v76;
    v51 = v75;
    v29 = v90;
    if (v62)
      goto LABEL_29;
    goto LABEL_27;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    v94 = v40;
    lazy protocol witness table accessor for type Int and conformance Int();
    v48 = v91;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    swift_getAssociatedConformanceWitness();
    v58 = v42;
    v59 = dispatch thunk of static Comparable.< infix(_:_:)();
    v60 = (uint64_t (*)(char *, uint64_t))v81;
    ((void (*)(char *, uint64_t))v81)(v48, AssociatedTypeWitness);
    result = v60(v58, AssociatedTypeWitness);
    v47 = v88;
    v49 = v92;
    v50 = v76;
    v51 = v75;
    if ((v59 & 1) != 0)
      goto LABEL_29;
  }
  else
  {
    v43 = dispatch thunk of BinaryInteger._lowWord.getter();
    v44 = v42;
    v45 = v43;
    result = ((uint64_t (*)(char *, uint64_t))v81)(v44, AssociatedTypeWitness);
    v62 = v45 < v40;
    v47 = v88;
    v48 = v91;
    v49 = v92;
    v50 = v76;
    v51 = v75;
    if (v62)
      goto LABEL_29;
  }
LABEL_27:
  if (!__OFADD__(*v93, 1))
  {
    ++*v93;
    v73 = v87;
    MEMORY[0x23B7C7558](&unk_235260F38, 256);
    MEMORY[0x23B7C742C](v73, AssociatedTypeWitness, v49);
    (*(void (**)(char *, char *, uint64_t))(v84 + 40))(v29, v48, AssociatedTypeWitness);
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t RangeSet<>.IndexSequence.makeIterator()@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v5 = a1[2];
  v6 = a1[3];
  v7 = type metadata accessor for RangeSet.Ranges();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&v13 - v9, v2, v8);
  return RangeSet<>.IndexSequence.Iterator.init(ranges:)((uint64_t)v10, v5, v6, a1[4], a2);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RangeSet<A><>.IndexSequence()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RangeSet<A><>.IndexSequence@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  RangeSet<>.IndexSequence.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(a1 - 1) + 8))(v2, a1);
}

uint64_t type metadata instantiation function for RangeSet<>.IndexSequence()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for RangeSet<>.IndexSequence()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RangeSet.Ranges();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangeSet.Ranges();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for RangeSet<>.IndexSequence(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RangeSet.Ranges();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangeSet<>.IndexSequence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234B25948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangeSet.Ranges();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RangeSet<>.IndexSequence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234B25998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangeSet.Ranges();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RangeSet<>.IndexSequence);
}

uint64_t type metadata completion function for RangeSet<>.IndexSequence.Iterator()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for RangeSet.Ranges();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RangeSet<>.IndexSequence.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 44);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v8, v9, AssociatedTypeWitness);
    v11 = *(int *)(a3 + 48);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for RangeSet.Ranges();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t destroy for RangeSet<>.IndexSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 44);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v4, AssociatedTypeWitness);
  v6 = a1 + *(int *)(a2 + 48);
  v7 = type metadata accessor for RangeSet.Ranges();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for RangeSet<>.IndexSequence.Iterator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v7, v8, AssociatedTypeWitness);
  v10 = *(int *)(a3 + 48);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

_QWORD *assignWithCopy for RangeSet<>.IndexSequence.Iterator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(v7, v8, AssociatedTypeWitness);
  v10 = *(int *)(a3 + 48);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_QWORD *initializeWithTake for RangeSet<>.IndexSequence.Iterator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v7, v8, AssociatedTypeWitness);
  v10 = *(int *)(a3 + 48);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

_QWORD *assignWithTake for RangeSet<>.IndexSequence.Iterator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v7, v8, AssociatedTypeWitness);
  v10 = *(int *)(a3 + 48);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangeSet<>.IndexSequence.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234B25F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = AssociatedTypeWitness;
    v9 = *(int *)(a3 + 44);
  }
  else
  {
    v8 = type metadata accessor for RangeSet.Ranges();
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 48);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RangeSet<>.IndexSequence.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234B25FF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = AssociatedTypeWitness;
    v11 = *(int *)(a4 + 44);
  }
  else
  {
    v10 = type metadata accessor for RangeSet.Ranges();
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 48);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for RangeSet<>.IndexSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RangeSet<>.IndexSequence.Iterator);
}

CGFloat specialized RangeSet<>.reduce<A>(_:_:)(CGFloat x, CGFloat y, CGFloat width, CGFloat height, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v28;
  void (*v29)(CGPoint *, _QWORD);
  CFIndex *v30;
  CFIndex v31;
  CFIndex v32;
  char *v33;
  void *v34;
  char v35;
  const __CTLine *v36;
  CFIndex v37;
  double v38;
  double v39;
  void *v40;
  CGFloat v41;
  CGFloat v42;
  double TypographicBounds;
  const __CTLine *v44;
  _QWORD v45[2];
  char *v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  CGFloat v50;
  CGPoint originsBuffer;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint buffer;
  uint64_t v56;
  CFRange v57;
  CFRange v58;
  CFRange v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v56 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v45 - v14;
  type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>();
  v17 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v45 - v21;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  RangeSet.ranges.getter();
  v48 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v48(v19, v15, v12);
  v23 = lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
  dispatch thunk of Collection.startIndex.getter();
  v24 = *(void (**)(char *, uint64_t))(v13 + 8);
  v49 = v15;
  v47 = v24;
  v24(v15, v12);
  *(CGFloat *)&v19[*(int *)(v17 + 36)] = buffer.x;
  outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v19, (uint64_t)v22);
  v25 = &v22[*(int *)(v17 + 36)];
  v26 = *(_QWORD *)v25;
  dispatch thunk of Collection.endIndex.getter();
  if (v26 != *(_QWORD *)&buffer.x)
  {
    v46 = v22;
    v45[1] = v23;
    v45[0] = v25;
    do
    {
      v29 = (void (*)(CGPoint *, _QWORD))dispatch thunk of Collection.subscript.read();
      v32 = *v30;
      v31 = v30[1];
      v29(&buffer, 0);
      v33 = v49;
      v48(v49, v22, v12);
      dispatch thunk of Collection.formIndex(after:)();
      v47(v33, v12);
      if (v32 != v31)
      {
        if (v31 < v32)
        {
          __break(1u);
        }
        else if (v32 < v31)
        {
          v34 = *(void **)a6;
          v35 = *(_BYTE *)(a6 + 16);
          while (1)
          {
            outlined retain of Text.Layout.Line(a6);
            v50 = height;
            if ((v35 & 1) != 0)
            {
              v44 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v34);
              if (!v44)
                goto LABEL_16;
              v36 = v44;
              outlined release of Text.Layout.Line(a6);
            }
            else
            {
              outlined retain of Text.Layout.Line(a6);

              swift_release();
              v36 = (const __CTLine *)v34;
            }
            v37 = v32 + 1;
            v38 = *(double *)(a6 + 24);
            v39 = *(double *)(a6 + 32);
            v40 = (id)_CTLineGetRunAtIndex(v36, v32);
            buffer.x = 0.0;
            buffer.y = 0.0;
            descent = 0.0;
            ascent = 0.0;
            originsBuffer.y = 0.0;
            leading = 0.0;
            originsBuffer.x = 0.0;
            v57.location = 0;
            v57.length = 1;
            CTRunGetPositions((CTRunRef)v40, v57, &buffer);
            v58.location = 0;
            v58.length = 1;
            CTRunGetBaseAdvancesAndOrigins((CTRunRef)v40, v58, 0, &originsBuffer);
            v41 = buffer.x - originsBuffer.x;
            v42 = buffer.y - originsBuffer.y;
            v59.location = 0;
            v59.length = 0;
            TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v40, v59, &ascent, &descent, &leading);

            swift_release();
            v62.origin.x = v38 + v41;
            v62.origin.y = v39 - v42 - ascent;
            v62.size.height = fabs(descent) + ascent;
            v60.origin.x = x;
            v60.origin.y = y;
            v60.size.width = width;
            v60.size.height = v50;
            v62.size.width = TypographicBounds;
            v61 = CGRectUnion(v60, v62);
            x = v61.origin.x;
            y = v61.origin.y;
            width = v61.size.width;
            height = v61.size.height;
            v32 = v37;
            if (v31 == v37)
              goto LABEL_4;
          }
        }
        __break(1u);
LABEL_16:
        __break(1u);
      }
LABEL_4:
      v28 = *(_QWORD *)v45[0];
      v22 = v46;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v28 != *(_QWORD *)&buffer.x);
  }
  outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v22);
  return x;
}

void type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
    lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  }
}

unint64_t lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4930], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4928], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

void type metadata accessor for RangeSet<Int>.Ranges(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Text.Layout.Line(uint64_t a1)
{
  outlined copy of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined release of Text.Layout.Line(uint64_t a1)
{
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _GraphInputs.hasWidgetMetadata.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _GraphInputs.hasWidgetMetadata : _GraphInputs@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _GraphInputs.hasWidgetMetadata.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for _GraphInputs.hasWidgetMetadata : _GraphInputs(char *a1, uint64_t *a2)
{
  char v3;
  uint64_t v5;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t _GraphInputs.hasWidgetMetadata.setter(char a1)
{
  uint64_t *v1;
  uint64_t v4;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t (*_GraphInputs.hasWidgetMetadata.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = (_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
    v5 = *(_BYTE *)(v4 + 72);
  else
    v5 = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v2 = v5;
  return _GraphInputs.hasWidgetMetadata.modify;
}

uint64_t _GraphInputs.hasWidgetMetadata.modify(uint64_t a1, char a2)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;

  v4 = *(uint64_t **)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  swift_retain();
  if ((a2 & 1) != 0)
  {
    v6 = v4;
    v7 = v5;
    v8 = a1;
  }
  else
  {
    v8 = a1 + 8;
    v6 = v4;
    v7 = v5;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);
  return swift_release();
}

uint64_t _ViewInputs.hasWidgetMetadata.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.hasWidgetMetadata : _ViewInputs@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _ViewInputs.hasWidgetMetadata.getter();
  *a1 = result & 1;
  return result;
}

uint64_t _ViewInputs.hasWidgetMetadata.setter(char a1)
{
  uint64_t *v1;
  uint64_t v4;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t (*_ViewInputs.hasWidgetMetadata.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = (_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
    v5 = *(_BYTE *)(v4 + 72);
  else
    v5 = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v2 = v5;
  return _GraphInputs.hasWidgetMetadata.modify;
}

ValueMetadata *type metadata accessor for _GraphInputs.HasWidgetMetadataKey()
{
  return &type metadata for _GraphInputs.HasWidgetMetadataKey;
}

uint64_t specialized ProtobufDecoder.messageField<A>(_:)(char a1)
{
  if ((a1 & 7) == 2)
    return specialized ProtobufDecoder.decodeMessage<A>()();
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t specialized ProtobufDecoder.messageField<A>(_:)@<X0>(char a1@<W0>, unint64_t a2@<X8>)
{
  if ((a1 & 7) == 2)
    return specialized ProtobufDecoder.decodeMessage<A>()(a2);
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t CodableAttributedString.Range.extent.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CodableAttributedString.Range.extent.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*CodableAttributedString.Range.extent.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableAttributedString.Range.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CodableAttributedString.Range.attributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*CodableAttributedString.Range.attributes.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id CodableAttributedString.base.getter()
{
  id *v0;

  return *v0;
}

void CodableAttributedString.base.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*CodableAttributedString.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::CodableAttributedString __swiftcall CodableAttributedString.init(_:)(SwiftUI::CodableAttributedString result)
{
  SwiftUI::CodableAttributedString *v1;

  v1->base.super.isa = result.base.super.isa;
  return result;
}

uint64_t CodableAttributedString.encode(to:)(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t result;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t aBlock;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  v4 = *v1;
  v5 = objc_msgSend(*v1, sel_string);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  if (v6)
    v9 = 0;
  else
    v9 = v8 == 0xE000000000000000;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (ProtobufEncoder.stringFieldAlways(_:_:)(1), !v2))
  {
    swift_bridgeObjectRelease();
    v10 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, v4);
    if (one-time initialization token for resolvableTextSegment != -1)
      goto LABEL_25;
    while (1)
    {
      v11 = static NSAttributedStringKey.resolvableTextSegment;
      v12 = objc_msgSend(v10, sel_length, v31);
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = v10;
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:);
      *(_QWORD *)(v14 + 24) = v13;
      v38 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      v39 = v14;
      aBlock = MEMORY[0x24BDAC760];
      v35 = 1107296256;
      v36 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      v37 = &block_descriptor_2;
      v15 = _Block_copy(&aBlock);
      v16 = v10;
      swift_retain();
      swift_release();
      objc_msgSend(v16, sel_enumerateAttribute_inRange_options_usingBlock_, v11, 0, v12, 0, v15);
      _Block_release(v15);
      LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      result = swift_release();
      if ((v11 & 1) != 0)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      v33 = MEMORY[0x24BEE4AF8];
      v18 = v16;
      v19 = objc_msgSend(v18, sel_length);

      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = &v33;
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = partial apply for closure #1 in CodableAttributedString.encode(to:);
      *(_QWORD *)(v21 + 24) = v20;
      v38 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      v39 = v21;
      aBlock = MEMORY[0x24BDAC760];
      v35 = 1107296256;
      v36 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      v37 = &block_descriptor_12_0;
      v22 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v18, sel_enumerateAttributesInRange_options_usingBlock_, 0, v19, 0, v22);
      _Block_release(v22);
      LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((v19 & 1) != 0)
        goto LABEL_27;
      v23 = *(_QWORD *)(v33 + 16);
      if (!v23)
        break;
      v32 = v18;
      v31 = swift_bridgeObjectRetain();
      v24 = (void **)(v31 + 48);
      while (1)
      {
        v25 = (uint64_t)*(v24 - 1);
        v26 = *v24;
        v27 = (uint64_t)*(v24 - 2);
        swift_bridgeObjectRetain();
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        aBlock = v27;
        v35 = v25;
        v36 = v26;
        v10 = *(char **)(a1 + 8);
        v28 = *(_QWORD **)(a1 + 24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
        v28[2] = v30 + 1;
        v28[v30 + 4] = v10;
        *(_QWORD *)(a1 + 24) = v28;
        if (__OFADD__(v10, 1))
          break;
        *(_QWORD *)(a1 + 8) = v10 + 1;
        CodableAttributedString.Range.encode(to:)(a1);
        if (v2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_22;
        }
        ProtobufEncoder.endLengthDelimited()();
        swift_bridgeObjectRelease();
        v24 += 3;
        if (!--v23)
        {

          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_25:
      swift_once();
    }

LABEL_22:
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CodableAttributedString.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v9 = (_QWORD *)*a5;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v9;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    v9 = (_QWORD *)result;
    *a5 = result;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    v9 = (_QWORD *)result;
    *a5 = result;
  }
  v9[2] = v12 + 1;
  v13 = &v9[3 * v12];
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a1;
  return result;
}

uint64_t CodableAttributedString.init(from:)@<X0>(id *a1@<X0>, id **a2@<X8>)
{
  void *v2;
  id v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  NSUInteger v17;
  NSUInteger v18;
  Class isa;
  NSRange v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t aBlock;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v66;
  uint64_t (*v67)();
  _QWORD *v68;
  unint64_t v69;
  NSRange v70;
  NSRange v71;

  v3 = v2;
  v5 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v5);
  v6 = (unint64_t)a1[1];
  v7 = a1[2];
  if (v6 >= (unint64_t)v7)
  {
    v8 = 0;
    v62 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v9 = 0xE000000000000000;
LABEL_4:
    a1[3] = 0;
    v10 = objc_allocWithZone(MEMORY[0x24BDD1688]);
    v11 = (void *)MEMORY[0x23B7C5DAC](v8, v9);
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v10, sel_initWithString_, v11);

    v3 = v12;
    v13 = objc_msgSend(v3, sel_length);

    v14 = v62[2];
    if (v14)
    {
      type metadata accessor for NSAttributedStringKey(0);
      v69 = v15;
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      v16 = v62 + 6;
      do
      {
        v17 = *(v16 - 2);
        v18 = *(v16 - 1);
        v16 += 3;
        swift_bridgeObjectRetain();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v70.location = v17;
        v70.length = v18;
        v71.location = 0;
        v71.length = (NSUInteger)v13;
        v20 = NSIntersectionRange(v70, v71);
        swift_bridgeObjectRelease();
        objc_msgSend(v3, sel_addAttributes_range_, isa, v20.location, v20.length);

        --v14;
      }
      while (v14);
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for resolvableTextSegment != -1)
      goto LABEL_63;
    goto LABEL_8;
  }
  v8 = 0;
  v62 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v9 = 0xE000000000000000;
  while (1)
  {
    v29 = (unint64_t)a1[3];
    if (v29)
    {
      v30 = (unint64_t)a1[4];
      if (v6 < v30)
        goto LABEL_19;
      if (v30 < v6)
        goto LABEL_53;
      a1[3] = 0;
    }
    v31 = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_54;
    v29 = v31;
    if (v31 < 8)
    {
LABEL_53:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_54:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_19:
    if (v29 >> 3 != 2)
      break;
    if ((v29 & 7) != 2)
      goto LABEL_53;
    ProtobufDecoder.beginMessage()();
    v42 = v62;
    if (v3)
      goto LABEL_54;
    CodableAttributedString.Range.init(from:)((uint64_t)a1, &aBlock);
    v3 = 0;
    v43 = a1[5];
    if (!v43[2])
      goto LABEL_61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v44 = v43[2];
      if (!v44)
        goto LABEL_62;
    }
    else
    {
      v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
      v44 = v43[2];
      if (!v44)
        goto LABEL_62;
    }
    v69 = v9;
    v45 = v8;
    v46 = v44 - 1;
    v47 = (void *)v43[v46 + 4];
    v43[2] = v46;
    a1[5] = v43;
    a1[2] = v47;
    v48 = aBlock;
    v49 = v64;
    v50 = v65;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
    v52 = v42[2];
    v51 = v42[3];
    v62 = v42;
    if (v52 >= v51 >> 1)
      v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v42);
    v62[2] = v52 + 1;
    v53 = &v62[3 * v52];
    v53[4] = v48;
    v53[5] = v49;
    v53[6] = v50;
    v3 = 0;
    v8 = v45;
    v9 = v69;
LABEL_12:
    v6 = (unint64_t)a1[1];
    v7 = a1[2];
    if (v6 >= (unint64_t)v7)
      goto LABEL_4;
  }
  if (v29 >> 3 != 1)
  {
    switch(v29 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_54;
        goto LABEL_12;
      case 1uLL:
        v28 = (unint64_t)a1[1] + 8;
        if ((unint64_t)v7 < v28)
          goto LABEL_53;
        goto LABEL_11;
      case 2uLL:
        v56 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_54;
        if (v56 < 0)
          goto LABEL_67;
        v28 = (unint64_t)a1[1] + v56;
        if ((unint64_t)v7 < v28)
          goto LABEL_53;
LABEL_11:
        a1[1] = (id)v28;
        break;
      case 5uLL:
        v28 = (unint64_t)a1[1] + 4;
        if ((unint64_t)v7 < v28)
          goto LABEL_53;
        goto LABEL_11;
      default:
        goto LABEL_53;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if ((v29 & 7) != 2)
    goto LABEL_55;
  v32 = ProtobufDecoder.decodeVarint()();
  if (v3)
    return swift_bridgeObjectRelease();
  v33 = v32;
  if ((v32 & 0x8000000000000000) == 0)
  {
    v34 = a1[1];
    if (v7 < (_QWORD *)&v34[v32])
    {
LABEL_55:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      a1[1] = &v34[v32];
      if (v32)
      {
        v35 = v34 - (_BYTE *)objc_msgSend(objc_retainAutorelease(*a1), sel_bytes);
        v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v7 = v37;
        if (__OFADD__(v35, v33))
          goto LABEL_65;
        if (v35 + v33 < v35)
          goto LABEL_66;
        v38 = v36;
        v39 = Data._Representation.subscript.getter();
        v41 = v40;
        outlined consume of Data._Representation(v38, (unint64_t)v7);
      }
      else
      {
        v39 = 0;
        v41 = 0xC000000000000000;
      }
      static String.Encoding.utf8.getter();
      v54 = String.init(data:encoding:)();
      if (v55)
      {
        v8 = v54;
        v9 = v55;
        outlined consume of Data._Representation(v39, v41);
        goto LABEL_12;
      }
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      outlined consume of Data._Representation(v39, v41);
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  swift_once();
LABEL_8:
  v21 = static NSAttributedStringKey.resolvableTextSegment;
  v22 = objc_msgSend(v3, sel_length);
  v23 = v3;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)partial apply;
  *(_QWORD *)(v25 + 24) = v24;
  v67 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v68 = (_QWORD *)v25;
  aBlock = MEMORY[0x24BDAC760];
  v64 = 1107296256;
  v65 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v66 = &block_descriptor_23_0;
  v26 = _Block_copy(&aBlock);
  v7 = v68;
  a1 = v23;
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateAttribute_inRange_options_usingBlock_, v21, 0, v22, 0, v26);
  _Block_release(v26);
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v26 & 1) != 0)
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    __break(1u);
    v59 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v60 = v59[2];
    if (!v60)
    {
      __break(1u);
      JUMPOUT(0x234B279F4);
    }
    v57 = v60 - 1;
    v58 = (void *)v59[v57 + 4];
    v59[2] = v57;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    a1[5] = v59;
    a1[2] = v58;
  }
  else
  {
    NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)&aBlock);
    result = outlined destroy of AnyTrackedValue?((uint64_t)&aBlock, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    *a2 = a1;
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAttributedString(uint64_t a1)
{
  return CodableAttributedString.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAttributedString@<X0>(id *a1@<X0>, id **a2@<X8>)
{
  return CodableAttributedString.init(from:)(a1, a2);
}

uint64_t CodableAttributedString.Range.encode(to:)(uint64_t a1)
{
  Swift::UInt *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  double v38;
  int64_t v39;
  _WORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  double Offset;
  double v52;
  double v53;
  double BlurRadius;
  id v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  int64_t v60;
  _WORD *v61;
  __int16 v62;
  void *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  char v77;
  Swift::UInt v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  double v87;
  double v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  Swift::Float v102;
  int64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  _QWORD *v110;
  uint64_t v111;
  int64_t v112;
  _QWORD *v113;
  uint64_t v114;
  int64_t v115;
  double v116;
  _WORD *v117;
  uint64_t v118;
  int64_t v119;
  const void *v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  int64_t v131;
  uint64_t v132;
  int64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  int64_t v147;
  Swift::UInt v148;
  Swift::Float v149;
  int64_t v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int64_t v155;
  _WORD *v156;
  _QWORD *v157;
  uint64_t v158;
  int64_t v159;
  int64_t v160;
  char v161;
  int64_t v162;
  _BYTE *v163;
  uint64_t v164;
  char v165;
  BOOL v166;
  char v167;
  uint64_t v168;
  int64_t v169;
  char v170;
  char v171;
  uint64_t v172;
  id v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  char v178;
  uint64_t v179;
  int64_t v180;
  _BYTE *v181;
  int64_t v182;
  _BYTE *v183;
  int64_t v184;
  _BYTE *v185;
  Swift::UInt v186;
  int64_t v187;
  _BYTE *v188;
  id v189;
  int64_t v190;
  _BYTE *v191;
  id v192;
  int64_t v193;
  _QWORD *v194;
  _BYTE *v195;
  int64_t v196;
  _BYTE *v197;
  int64_t v198;
  _QWORD *v199;
  _BYTE *v200;
  id v201;
  uint64_t result;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  int64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char *v215;
  Swift::UInt v216;
  char *v217;
  int64_t v218;
  __int128 *v219;
  _OWORD *v220;
  int64_t v221;
  _QWORD v222[6];
  int v223;
  char v224;
  __int128 v225;
  __int128 v226;
  double v227;
  unint64_t v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;

  v4 = v2;
  v219 = (__int128 *)a1;
  v237 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x24BDAC7A8](v5);
  v215 = (char *)&v209 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if ((*v1 & 0x8000000000000000) != 0)
    goto LABEL_340;
  v8 = v1[1];
  v9 = v1[2];
  if (v7)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v7);
  }
  v10 = (uint64_t)v219;
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_340;
  v11 = (uint64_t)v215;
  if (v8)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v8);
    v10 = (uint64_t)v219;
  }
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(_OWORD *)(v10 + 24);
  v214 = v10 + 24;
  v234 = *(_OWORD *)v10;
  v235 = v12;
  v236 = v13;
  v14 = (unint64_t)&v234;
  v212 = ProtobufEncoder.preferredBundleLanguage.getter();
  v213 = v15;
  v16 = *(_QWORD *)(v9 + 64);
  v216 = v9 + 64;
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v20 = (char *)&v231 + 8;
  v220 = (__int128 *)((char *)&v234 + 8);
  v218 = (unint64_t)(v17 + 63) >> 6;
  v210 = v218 - 1;
  swift_bridgeObjectRetain();
  v21 = 0;
  v217 = (char *)&v231 + 8;
  if (!v19)
    goto LABEL_12;
  while (2)
  {
    v22 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    v221 = v21;
    v23 = v22 | (v21 << 6);
LABEL_11:
    v24 = *(_QWORD *)(v9 + 56);
    *(_QWORD *)&v231 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v23);
    v25 = (void *)v231;
    outlined init with copy of Any(v24 + 32 * v23, (uint64_t)v20);
    v26 = v25;
LABEL_24:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v231, (uint64_t)&v234, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any)?);
    v3 = (void *)v234;
    if (!(_QWORD)v234)
    {
      result = swift_release();
      v203 = v213;
      if (!v213)
        return result;
      v204 = *((_QWORD *)v219 + 2);
      v234 = *v219;
      v235 = v204;
      v236 = *(__int128 *)((char *)v219 + 24);
      swift_bridgeObjectRetain();
      v205 = ProtobufEncoder.preferredBundleLanguage.getter();
      if (v206)
      {
        v207 = v212;
        if (v212 == v205 && v203 == v206)
        {
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        v208 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v208 & 1) != 0)
          return swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v207 = v212;
      }
      if ((v207 || v203 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        ProtobufEncoder.stringFieldAlways(_:_:)(15);
      return swift_bridgeObjectRelease();
    }
    outlined init with take of Any(v220, &v229);
    LODWORD(v29) = GetAttributedStringKey(v3);
    type metadata accessor for _AttributedStringKey(0);
    switch((int)v29)
    {
      case 0:
      case 19:
      case 20:
        goto LABEL_227;
      case 1:
        __swift_project_boxed_opaque_existential_1(&v229, v230);
        v92 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
        *(_QWORD *)&v231 = 0;
        v227 = 0.0;
        *(_QWORD *)&v225 = 0;
        v222[0] = 0;
        if ((CoreColorPlatformColorGetComponents(0, v92, (uint64_t)&v231, (uint64_t)&v227, (uint64_t)&v225, (uint64_t)v222) & 1) == 0)
          goto LABEL_130;
        v93 = *(double *)&v231;
        v94 = v227;
        v95 = *(double *)&v225;
        v96 = specialized Color.Resolved.init(red:green:blue:opacity:)(v93, v94, v95);
        v98 = v97;
        v100 = v99;
        v102 = v101;
        swift_unknownObjectRelease();
        v29 = v219;
        v103 = *((_QWORD *)v219 + 1);
        v104 = *((_QWORD *)v219 + 2);
        if (v103 >= v104)
        {
          v184 = v103 + 1;
          if (__OFADD__(v103, 1))
            goto LABEL_332;
          if (v104 < v184)
          {
            v185 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v184);
            v29 = v219;
          }
          else
          {
            *((_QWORD *)v219 + 1) = v184;
            v185 = (_BYTE *)(*v29 + v103);
          }
          *v185 = 34;
          v14 = v29[1];
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v219 + v103) = 34;
          v14 = v103 + 1;
          v29[1] = v103 + 1;
        }
        v105 = v214;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v106 = *(_QWORD *)(*(_QWORD *)v105 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v106);
        v107 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v106, v14);
        _ViewInputs.base.modify(v107, v108);
        v109 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_320;
        v29 = v219;
        *((_QWORD *)v219 + 1) = v109;
        v20 = v217;
        if (v96 == 0.0)
        {
          if (v98 == 0.0)
            goto LABEL_85;
        }
        else
        {
          v160 = v29[2];
          if (v109 >= v160)
          {
            v198 = v14 + 2;
            if (__OFADD__(v109, 1))
              goto LABEL_338;
            if (v160 < v198)
            {
              v200 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v198);
            }
            else
            {
              v199 = v219;
              *((_QWORD *)v219 + 1) = v198;
              v200 = (_BYTE *)(*v199 + v109);
            }
            *v200 = 13;
            v11 = (uint64_t)v215;
            v20 = v217;
          }
          else
          {
            *(_BYTE *)(*v29 + v109) = 13;
            v29[1] = v14 + 2;
          }
          ProtobufEncoder.encodeFloat(_:)(v96);
          if (v98 == 0.0)
          {
LABEL_85:
            if (v100 == 0.0)
              goto LABEL_86;
            goto LABEL_192;
          }
        }
        ProtobufEncoder.encodeVarint(_:)(0x15uLL);
        ProtobufEncoder.encodeFloat(_:)(v98);
        if (v100 == 0.0)
          goto LABEL_86;
LABEL_192:
        ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
        ProtobufEncoder.encodeFloat(_:)(v100);
LABEL_86:
        if (v102 != 1.0)
        {
          ProtobufEncoder.encodeVarint(_:)(0x25uLL);
          ProtobufEncoder.encodeFloat(_:)(v102);
        }
        ProtobufEncoder.endLengthDelimited()();
        goto LABEL_227;
      case 2:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v78 = v9;
        v79 = v4;
        v14 = (unint64_t)*(id *)&v227;
        v80 = v219;
        ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
        v81 = v80[1];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v82 = *(_QWORD *)(v80[3] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v82);
        v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v81);
        _ViewInputs.base.modify(v83, v84);
        if (__OFADD__(v81, 1))
          goto LABEL_319;
        v80[1] = v81 + 1;
        CodableNSParagraphStyle.encode(to:)(v80, (id)v14);
        v4 = v79;
        v20 = v217;
        if (v79)
          goto LABEL_308;
        ProtobufEncoder.endLengthDelimited()();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
        v11 = (uint64_t)v215;
        goto LABEL_110;
      case 3:
        type metadata accessor for CTFontRef(0);
        __swift_project_boxed_opaque_existential_1(&v229, v230);
        v120 = (const void *)_bridgeAnythingToObjectiveC<A>(_:)();
        v14 = static CTFontRef.make(platformFont:)(v120);
        swift_unknownObjectRelease();
        if (!v14)
          goto LABEL_176;
        v29 = v219;
        v121 = *((_QWORD *)v219 + 1);
        v122 = *((_QWORD *)v219 + 2);
        v211 = v4;
        if (v121 >= v122)
        {
          v180 = v121 + 1;
          if (__OFADD__(v121, 1))
          {
            __break(1u);
LABEL_332:
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            swift_bridgeObjectRelease();
            LODWORD(v231) = (_DWORD)v29;
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            __break(1u);
LABEL_340:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x234B29B24);
          }
          if (v122 < v180)
          {
            v181 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v180);
            v29 = v219;
          }
          else
          {
            *((_QWORD *)v219 + 1) = v180;
            v181 = (_BYTE *)(*v29 + v121);
          }
          *v181 = 26;
          v123 = v29[1];
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v219 + v121) = 26;
          v123 = v121 + 1;
          v29[1] = v121 + 1;
        }
        v124 = v214;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v125 = *(_QWORD *)(*(_QWORD *)v124 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v125);
        v126 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v125, v123);
        v128 = _ViewInputs.base.modify(v126, v127);
        if (__OFADD__(v123, 1))
        {
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
LABEL_323:
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
        }
        v78 = v9;
        *((_QWORD *)v219 + 1) = v123 + 1;
        *(_QWORD *)&v231 = v14;
        MEMORY[0x24BDAC7A8](v128);
        v14 = (unint64_t)(id)v14;
        swift_bridgeObjectRetain();
        v129 = v211;
        specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)((void *)v14, partial apply for specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:));
        if (v129)
        {

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
        }

        swift_bridgeObjectRelease();
        ProtobufEncoder.endLengthDelimited()();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
        v4 = 0;
        v11 = (uint64_t)v215;
        v20 = v217;
LABEL_110:
        v21 = v221;
        v9 = v78;
        if (v19)
          continue;
LABEL_12:
        v27 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
          __break(1u);
LABEL_315:

          goto LABEL_306;
        }
        if (v27 >= v218)
          goto LABEL_22;
        v28 = *(_QWORD *)(v216 + 8 * v27);
        if (v28)
          goto LABEL_15;
        v21 += 2;
        if (v27 + 1 >= v218)
          goto LABEL_232;
        v28 = *(_QWORD *)(v216 + 8 * v21);
        if (v28)
          goto LABEL_18;
        if (v27 + 2 >= v218)
        {
LABEL_22:
          v221 = v21;
          goto LABEL_23;
        }
        v28 = *(_QWORD *)(v216 + 8 * (v27 + 2));
        if (v28)
        {
          v27 += 2;
LABEL_15:
          v19 = (v28 - 1) & v28;
          v23 = __clz(__rbit64(v28)) + (v27 << 6);
          v221 = v27;
          goto LABEL_11;
        }
        v21 = v27 + 3;
        if (v27 + 3 >= v218)
        {
          v221 = v27 + 2;
          goto LABEL_23;
        }
        v28 = *(_QWORD *)(v216 + 8 * v21);
        if (v28)
        {
LABEL_18:
          v27 = v21;
          goto LABEL_15;
        }
        while (1)
        {
          v27 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_328;
          if (v27 >= v218)
            break;
          v28 = *(_QWORD *)(v216 + 8 * v27);
          ++v21;
          if (v28)
            goto LABEL_15;
        }
        v27 = v210;
LABEL_232:
        v221 = v27;
LABEL_23:
        v19 = 0;
        v233 = 0;
        v231 = 0u;
        v232 = 0u;
        goto LABEL_24;
      case 4:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = *(_QWORD *)&v227;
        v29 = v219;
        v130 = *((_QWORD *)v219 + 1);
        v131 = *((_QWORD *)v219 + 2);
        if (v130 >= v131)
        {
          v186 = v9;
          v187 = v130 + 1;
          if (__OFADD__(v130, 1))
            goto LABEL_333;
          if (v131 < v187)
          {
            v201 = *(id *)&v227;
            v188 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v187);
          }
          else
          {
            *((_QWORD *)v219 + 1) = v187;
            v188 = (_BYTE *)(*v29 + v130);
            v189 = (id)v14;
          }
          v132 = v4;
          *v188 = 50;
          v133 = v29[1];
          v9 = v186;
        }
        else
        {
          v132 = v4;
          *(_BYTE *)(*(_QWORD *)v219 + v130) = 50;
          v133 = v130 + 1;
          v29[1] = v130 + 1;
          v134 = (id)v14;
        }
        v135 = v214;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v136 = *(_QWORD *)(*(_QWORD *)v135 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v136);
        v137 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v136, v133);
        _ViewInputs.base.modify(v137, v138);
        if (__OFADD__(v133, 1))
          goto LABEL_323;
        v139 = (uint64_t)v219;
        *((_QWORD *)v219 + 1) = v133 + 1;
        CodableTextAttachment.encode(to:)(v139, v14);
        v4 = v132;
        if (!v132)
        {
          ProtobufEncoder.endLengthDelimited()();

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
LABEL_123:
          v11 = (uint64_t)v215;
          goto LABEL_187;
        }
LABEL_308:
        swift_release();

LABEL_309:
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
      case 5:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v87 = v227;
        if (v227 == 0.0)
          goto LABEL_227;
        v88 = fabs(v227);
        v89 = v88 < 65536.0;
        v90 = 57;
        v91 = 61;
        goto LABEL_134;
      case 6:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v87 = v227;
        if (v227 == 0.0)
          goto LABEL_227;
        v88 = fabs(v227);
        v89 = v88 < 65536.0;
        v90 = 65;
        v91 = 69;
        goto LABEL_134;
      case 7:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v87 = v227;
        if (v227 == 0.0)
          goto LABEL_227;
        v88 = fabs(v227);
        v89 = v88 < 65536.0;
        v90 = 73;
        v91 = 77;
LABEL_134:
        if (v89)
          v148 = v91;
        else
          v148 = v90;
        ProtobufEncoder.encodeVarint(_:)(v148);
        if (v88 >= 65536.0)
        {
          ProtobufEncoder.encodeDouble(_:)(v87);
        }
        else
        {
          v149 = v87;
          ProtobufEncoder.encodeFloat(_:)(v149);
        }
        goto LABEL_227;
      case 8:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = *(_QWORD *)&v227;
        if (v227 == 0.0)
          goto LABEL_227;
        v29 = v219;
        v150 = *((_QWORD *)v219 + 1);
        v151 = *((_QWORD *)v219 + 2);
        if (v150 >= v151)
        {
          v196 = v150 + 1;
          if (__OFADD__(v150, 1))
            goto LABEL_336;
          v29 = v219;
          if (v151 < v196)
          {
            v197 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v196);
          }
          else
          {
            *((_QWORD *)v219 + 1) = v196;
            v197 = (_BYTE *)(*v29 + v150);
          }
          *v197 = 80;
          v11 = (uint64_t)v215;
          v20 = v217;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v219 + v150) = 80;
          v29[1] = v150 + 1;
        }
        v14 = (2 * v14) ^ ((uint64_t)v14 >> 63);
        if (v14 > 0x7F)
        {
          v161 = __clz(v14);
          v153 = (((37 * (70 - v161)) >> 8)
                + (((70 - v161 - ((unsigned __int16)(37 * (70 - v161)) >> 8)) & 0xFE) >> 1)) >> 2;
          v152 = v29[1];
        }
        else
        {
          v152 = v29[1];
          if (v152 < v29[2])
            goto LABEL_153;
          v153 = 1;
        }
        v162 = v152 + v153;
        if (__OFADD__(v152, v153))
          goto LABEL_329;
        if (v29[2] < v162)
        {
          v163 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v162);
        }
        else
        {
          v29[1] = v162;
          v163 = (_BYTE *)(*v29 + v152);
        }
        LOBYTE(v164) = v14 & 0x7F;
        if (v14 >= 0x80)
        {
          do
          {
            v165 = v164 | 0x80;
            v164 = (v14 >> 7) & 0x7F;
            *v163++ = v165;
            v166 = v14 >= 0x4000;
            v14 >>= 7;
          }
          while (v166);
        }
        goto LABEL_209;
      case 9:
        __swift_project_boxed_opaque_existential_1(&v229, v230);
        v63 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
        *(_QWORD *)&v231 = 0;
        v227 = 0.0;
        *(_QWORD *)&v225 = 0;
        v222[0] = 0;
        if ((CoreColorPlatformColorGetComponents(0, v63, (uint64_t)&v231, (uint64_t)&v227, (uint64_t)&v225, (uint64_t)v222) & 1) == 0)
          goto LABEL_130;
        v64 = *(double *)&v231;
        v65 = v227;
        v66 = *(double *)&v225;
        v67 = specialized Color.Resolved.init(red:green:blue:opacity:)(v64, v65, v66);
        v69 = v68;
        v71 = v70;
        v73 = v72;
        swift_unknownObjectRelease();
        v29 = v219;
        v74 = *((_QWORD *)v219 + 1);
        v75 = *((_QWORD *)v219 + 2);
        if (v74 < v75)
        {
          v76 = *(_QWORD *)v219;
          v77 = 90;
          goto LABEL_127;
        }
        v182 = v74 + 1;
        if (__OFADD__(v74, 1))
          goto LABEL_334;
        if (v75 < v182)
        {
          v183 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v182);
        }
        else
        {
          *((_QWORD *)v219 + 1) = v182;
          v183 = (_BYTE *)(*v29 + v74);
        }
        *v183 = 90;
        goto LABEL_128;
      case 10:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = *(_QWORD *)&v227;
        if (v227 == 0.0)
          goto LABEL_227;
        v29 = v219;
        v85 = *((_QWORD *)v219 + 1);
        v86 = *((_QWORD *)v219 + 2);
        if (v85 >= v86)
        {
          v193 = v85 + 1;
          if (__OFADD__(v85, 1))
            goto LABEL_337;
          if (v86 < v193)
          {
            v195 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v193);
          }
          else
          {
            v194 = v219;
            *((_QWORD *)v219 + 1) = v193;
            v195 = (_BYTE *)(*v194 + v85);
          }
          *v195 = 96;
          v11 = (uint64_t)v215;
          v20 = v217;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v219 + v85) = 96;
          v29[1] = v85 + 1;
        }
        ProtobufEncoder.encodeVarint(_:)((2 * v14) ^ ((uint64_t)v14 >> 63));
        goto LABEL_227;
      case 11:
        __swift_project_boxed_opaque_existential_1(&v229, v230);
        v140 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
        *(_QWORD *)&v231 = 0;
        v227 = 0.0;
        *(_QWORD *)&v225 = 0;
        v222[0] = 0;
        if ((CoreColorPlatformColorGetComponents(0, v140, (uint64_t)&v231, (uint64_t)&v227, (uint64_t)&v225, (uint64_t)v222) & 1) == 0)
        {
LABEL_130:

          swift_unknownObjectRelease();
          goto LABEL_228;
        }
        v141 = *(double *)&v231;
        v142 = v227;
        v143 = *(double *)&v225;
        v67 = specialized Color.Resolved.init(red:green:blue:opacity:)(v141, v142, v143);
        v69 = v144;
        v71 = v145;
        v73 = v146;
        swift_unknownObjectRelease();
        v29 = v219;
        v74 = *((_QWORD *)v219 + 1);
        v147 = *((_QWORD *)v219 + 2);
        if (v74 >= v147)
        {
          v190 = v74 + 1;
          if (__OFADD__(v74, 1))
            goto LABEL_335;
          if (v147 < v190)
          {
            v191 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v190);
          }
          else
          {
            *((_QWORD *)v219 + 1) = v190;
            v191 = (_BYTE *)(*v29 + v74);
          }
          *v191 = 106;
        }
        else
        {
          v76 = *(_QWORD *)v219;
          v77 = 106;
LABEL_127:
          *(_BYTE *)(v76 + v74) = v77;
          v29[1] = v74 + 1;
        }
LABEL_128:
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v67, v69, v71, v73);
        if (v4)
          goto LABEL_305;
        goto LABEL_227;
      case 12:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = (unint64_t)*(id *)&v227;
        Offset = CoreShadowGetOffset();
        v53 = v52;
        BlurRadius = CoreShadowGetBlurRadius(v14);
        v55 = (id)CoreShadowGetPlatformColor(v14, 0);
        v56 = v55;
        if (Offset < 0.0 || v53 < 0.0)
        {
          v57 = v55;
          v56 = (void *)v14;
          goto LABEL_183;
        }
        if (BlurRadius < 0.0)
        {
          v57 = v3;
          v3 = (void *)v14;
LABEL_183:

LABEL_184:
          goto LABEL_185;
        }
        if (!v55)
        {
          v56 = v3;
          v3 = (void *)v14;
          goto LABEL_184;
        }
        v172 = v4;
        v173 = v55;
        v174 = specialized Color.Resolved.init(platformColor:)(v173);
        v176 = v175;
        v178 = v177;

        v4 = v172;
        v11 = (uint64_t)v215;
        if ((v178 & 1) == 0)
        {
          v222[1] = v174;
          v222[2] = v176;
          *(double *)&v222[3] = BlurRadius;
          *(double *)&v222[4] = Offset;
          *(double *)&v222[5] = v53;
          v223 = 1056964608;
          v224 = 0;
          specialized ProtobufEncoder.messageField<A>(_:_:)(14);
          if (v4)
            goto LABEL_315;
        }
LABEL_185:

        goto LABEL_186;
      case 13:

        outlined init with take of Any(&v229, &v231);
        if (swift_dynamicCast())
        {
          swift_bridgeObjectRelease();
          v212 = *(_QWORD *)&v227;
          v213 = v228;
        }
        goto LABEL_238;
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 21:
      case 33:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v227);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
        v30 = MEMORY[0x24BEE4AD8];
        if ((swift_dynamicCast() & 1) == 0)
        {
          v233 = 0;
          v231 = 0u;
          v232 = 0u;
        }
        if (one-time initialization token for resolvableTextSegment == -1)
        {
          if (!*(_QWORD *)(v9 + 16))
            goto LABEL_234;
        }
        else
        {
          swift_once();
          if (!*(_QWORD *)(v9 + 16))
          {
LABEL_234:
            v226 = 0u;
            v225 = 0u;
            goto LABEL_235;
          }
        }
        v14 = (unint64_t)(id)static NSAttributedStringKey.resolvableTextSegment;
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if ((v32 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v31, (uint64_t)&v225);
        }
        else
        {
          v226 = 0u;
          v225 = 0u;
        }

        if (*((_QWORD *)&v226 + 1))
        {
          v33 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
          v34 = swift_dynamicCast();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v11, v34 ^ 1u, 1, v33);
          goto LABEL_236;
        }
LABEL_235:
        outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v225, (uint64_t)&lazy cache variable for type metadata for Any?, v30 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
        v179 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56))(v11, 1, 1, v179);
LABEL_236:
        specialized static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)((uint64_t)&v231, v11, (uint64_t)v219);
        v20 = v217;
        if (v4)
        {

          swift_release();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
          outlined destroy of TypesettingConfiguration(v11, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
          return outlined destroy of AnyTrackedValue?((uint64_t)&v231, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
        outlined destroy of TypesettingConfiguration(v11, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
        outlined destroy of AnyTrackedValue?((uint64_t)&v231, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
        goto LABEL_238;
      case 22:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v157 = v219;
        v158 = *((_QWORD *)v219 + 1);
        v159 = v158 + 2;
        if (__OFADD__(v158, 2))
          goto LABEL_324;
        v14 = LOBYTE(v227);
        if (*((_QWORD *)v219 + 2) < v159)
        {
          v61 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v159);
        }
        else
        {
          *((_QWORD *)v219 + 1) = v159;
          v61 = (_WORD *)(*v157 + v158);
        }
        v62 = 424;
        goto LABEL_175;
      case 23:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v110 = v219;
        v111 = *((_QWORD *)v219 + 1);
        v112 = v111 + 2;
        if (__OFADD__(v111, 2))
          goto LABEL_317;
        v14 = LOBYTE(v227);
        if (*((_QWORD *)v219 + 2) < v112)
        {
          v61 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v112);
        }
        else
        {
          *((_QWORD *)v219 + 1) = v112;
          v61 = (_WORD *)(*v110 + v111);
        }
        v62 = 432;
        goto LABEL_175;
      case 24:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v113 = v219;
        v114 = *((_QWORD *)v219 + 1);
        v115 = v114 + 2;
        if (__OFADD__(v114, 2))
          goto LABEL_321;
        v116 = v227;
        if (*((_QWORD *)v219 + 2) < v115)
        {
          v117 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v115);
          v113 = v219;
        }
        else
        {
          *((_QWORD *)v219 + 1) = v115;
          v117 = (_WORD *)(*v113 + v114);
        }
        *v117 = 441;
        v118 = v113[1];
        v119 = v118 + 8;
        if (__OFADD__(v118, 8))
          goto LABEL_325;
        if (v113[2] < v119)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v119) = v116;
        }
        else
        {
          v113[1] = v119;
          *(double *)(*v113 + v118) = v116;
        }
        goto LABEL_227;
      case 25:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = v228;
        if (v227 == 0.0 && v228 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_226;
        v35 = 25;
        goto LABEL_218;
      case 26:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = v228;
        if (v227 == 0.0 && v228 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_226;
        v35 = 26;
        goto LABEL_218;
      case 27:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if (swift_dynamicCast())
        {
          if (LOBYTE(v227))
          {
            if (LOBYTE(v227) == 1)
              v14 = 0x80000002352DF4C0;
            else
              v14 = 0x80000002352DF4A0;
          }
          else
          {
            v14 = 0x80000002352DF4E0;
          }
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
            || (ProtobufEncoder.stringFieldAlways(_:_:)(24), !v4))
          {

            swift_bridgeObjectRelease();
LABEL_228:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
LABEL_238:
            v21 = v221;
            if (v19)
              continue;
            goto LABEL_12;
          }

          swift_bridgeObjectRelease();
LABEL_306:
          swift_release();
          goto LABEL_309;
        }
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = v228;
        if (v227 == 0.0 && v228 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_226;
        v35 = 24;
        goto LABEL_218;
      case 28:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) != 0)
          __asm { BR              X11 }
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_176:

LABEL_186:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
LABEL_187:
          v20 = v217;
          goto LABEL_238;
        }
        v14 = v228;
        if (v227 == 0.0 && v228 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          v20 = v217;
        }
        else
        {
          v171 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v20 = v217;
          if ((v171 & 1) == 0)
          {
            v35 = 28;
LABEL_218:
            ProtobufEncoder.stringFieldAlways(_:_:)(v35);
            if (v4)
            {
              swift_bridgeObjectRelease();
LABEL_305:

              goto LABEL_306;
            }
          }
LABEL_226:
          swift_bridgeObjectRelease();
        }
LABEL_227:

        goto LABEL_228;
      case 29:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = *(_QWORD *)&v227;
        if (v227 == 0.0)
          goto LABEL_227;
        v29 = v219;
        v154 = *((_QWORD *)v219 + 1);
        v155 = v154 + 2;
        if (__OFADD__(v154, 2))
          goto LABEL_327;
        if (*((_QWORD *)v219 + 2) < v155)
        {
          v156 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v155);
          v29 = v219;
        }
        else
        {
          *((_QWORD *)v219 + 1) = v155;
          v156 = (_WORD *)(*v29 + v154);
        }
        *v156 = 472;
        if (v14 > 0x7F)
        {
          v167 = __clz(v14);
          v168 = (((37 * (70 - v167)) >> 8)
                + (((70 - v167 - ((unsigned __int16)(37 * (70 - v167)) >> 8)) & 0xFE) >> 1)) >> 2;
          v152 = v29[1];
          v169 = v152 + v168;
          if (__OFADD__(v152, v168))
            goto LABEL_330;
        }
        else
        {
          v152 = v29[1];
          if (v152 < v29[2])
          {
LABEL_153:
            *(_BYTE *)(*v29 + v152) = v14;
            v29[1] = v152 + 1;
            goto LABEL_227;
          }
          v169 = v152 + 1;
          if (__OFADD__(v152, 1))
            goto LABEL_330;
        }
        if (v29[2] < v169)
        {
          v163 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v169);
        }
        else
        {
          v29[1] = v169;
          v163 = (_BYTE *)(*v29 + v152);
        }
        LOBYTE(v164) = v14 & 0x7F;
        if (v14 >= 0x80)
        {
          do
          {
            v170 = v164 | 0x80;
            v164 = (v14 >> 7) & 0x7F;
            *v163++ = v170;
            v166 = v14 >= 0x4000;
            v14 >>= 7;
          }
          while (v166);
        }
LABEL_209:
        *v163 = v164;
        goto LABEL_227;
      case 30:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = v228;
        if (v227 == 0.0 && v228 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_226;
        v35 = 29;
        goto LABEL_218;
      case 31:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = v228;
        if (v227 == 0.0 && v228 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_226;
        v35 = 30;
        goto LABEL_218;
      case 32:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v58 = v219;
        v59 = *((_QWORD *)v219 + 1);
        v60 = v59 + 2;
        if (__OFADD__(v59, 2))
          goto LABEL_322;
        v14 = LOBYTE(v227);
        if (*((_QWORD *)v219 + 2) < v60)
        {
          v61 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v60);
        }
        else
        {
          *((_QWORD *)v219 + 1) = v60;
          v61 = (_WORD *)(*v58 + v59);
        }
        v62 = 640;
LABEL_175:
        *v61 = v62;
        ProtobufEncoder.encodeVarint(_:)(v14);
        goto LABEL_227;
      case 34:
        outlined init with copy of Any((uint64_t)&v229, (uint64_t)&v231);
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSAdaptiveImageGlyph);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_227;
        v14 = (unint64_t)v219;
        v36 = *((_QWORD *)v219 + 1);
        v37 = v36 + 2;
        if (__OFADD__(v36, 2))
          goto LABEL_318;
        v38 = v227;
        v39 = *((_QWORD *)v219 + 2);
        v211 = v4;
        if (v39 < v37)
        {
          v192 = *(id *)&v227;
          v40 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v37);
        }
        else
        {
          *((_QWORD *)v219 + 1) = v37;
          v40 = (_WORD *)(*(_QWORD *)v14 + v36);
          v41 = *(id *)&v38;
        }
        *v40 = 674;
        v42 = *(_QWORD *)(v14 + 8);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v43 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v43);
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v42);
        _ViewInputs.base.modify(v44, v45);
        if (__OFADD__(v42, 1))
          goto LABEL_326;
        *(_QWORD *)(v14 + 8) = v42 + 1;
        v46 = objc_msgSend(*(id *)&v38, sel_imageContent);
        v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v49 = v48;

        ProtobufEncoder.encodeVarint(_:)(0xAuLL);
        v50 = v211;
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v47, v49);
        if (v50)
        {
          outlined consume of Data._Representation(v47, v49);
          swift_release();

          swift_bridgeObjectRelease();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
        }
        outlined consume of Data._Representation(v47, v49);
        ProtobufEncoder.endLengthDelimited()();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v229);
        v4 = 0;
        goto LABEL_123;
      default:
        goto LABEL_339;
    }
  }
}

uint64_t ProtobufEncoder.preferredBundleLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v1 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 32);
  if (one-time initialization token for preferredBundleLanguageKey != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredBundleLanguageKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(_QWORD *)(v5 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((_QWORD *)&v12 + 1))
  {
    if (swift_dynamicCast())
      return v10;
    else
      return 0;
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    return 0;
  }
}

uint64_t CodableAttributedString.Range.EncodingWrapper.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 24))(v2, a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAttributedString.Range.EncodingWrapper<A>(uint64_t a1, uint64_t a2)
{
  return CodableAttributedString.Range.EncodingWrapper.encode(to:)(a1, a2);
}

uint64_t implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  v0._object = (void *)0x80000002352DF5A0;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  type metadata accessor for NSAttributedStringKey(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t encode #1 <A>(_:) in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CodableAttributedString.Range.EncodingWrapper(0, v10, v11, v10);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a4, v14);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v9, a4);
  v17 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAttributedString.Range.EncodingWrapper<A>, v12);
  ProtobufEncoder.codableField<A>(_:_:)(a3, (uint64_t)v16, v12, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

void CodableAttributedString.Range.init(from:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *object;
  unint64_t v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)@<X0>(uint64_t@<X8>);
  unint64_t *v27;
  uint64_t (*v28)();
  _UNKNOWN **v29;
  double v30;
  uint64_t v31;
  double v32;
  __CFString *v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  const char *v39;
  Swift::UInt v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::Bool v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  __CFString *v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  __CFString *v72;
  uint64_t v73;
  Swift::Bool v74;
  uint64_t v75;
  Swift::Bool v76;
  unint64_t v77;
  const char *v78;
  Swift::String v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  id v92;
  _QWORD *v93;
  _QWORD *v94;
  char v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  _QWORD *v101;
  id v102;
  _QWORD *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  _QWORD *v111;
  char v112;
  char v113;
  unint64_t v114;
  uint64_t v115;
  _BOOL8 v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  objc_class *ObjCClassFromMetadata;
  __CFString *v128;
  id v129;
  Swift::String v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  id v136;
  double v137;
  uint64_t v138;
  _QWORD *v139;
  char v140;
  char v141;
  unint64_t v142;
  uint64_t v143;
  _BOOL8 v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  double v149;
  uint64_t v150;
  _QWORD *v151;
  char v152;
  char v153;
  uint64_t v154;
  _BOOL8 v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char v171;
  Swift::String v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  id v180;
  void *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  _BOOL8 v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  id v191;
  id v192;
  id v193;
  _QWORD *v194;
  char v195;
  double v196;
  uint64_t v197;
  _QWORD *v198;
  char v199;
  char v200;
  unint64_t v201;
  uint64_t v202;
  _BOOL8 v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  Swift::Bool v209;
  uint64_t v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  _BOOL8 v216;
  char v217;
  uint64_t v218;
  char v219;
  _QWORD *v220;
  _OWORD *v221;
  Swift::String v222;
  uint64_t v223;
  Swift::String v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  void *v228;
  uint64_t *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _OWORD *v233;
  uint64_t v234;
  id v235;
  _QWORD *v236;
  _OWORD *v237;
  id v238;
  _QWORD *v239;
  _OWORD *v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  void *v244;
  id v245;
  _QWORD *v246;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  void *v251;
  _QWORD *v252;
  id v253;
  uint64_t v254;
  char v255;
  _QWORD *v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t *boxed_opaque_existential_1;
  id v263;
  _QWORD *v264;
  char v265;
  void *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  id v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  char v275;
  void *v276;
  uint64_t v277;
  id v278;
  __CFString *v279;
  void *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  id countAndFlagsBits;
  uint64_t *v288;
  _QWORD *v289;
  _QWORD *v290;
  _OWORD v291[2];
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  void *v299;

  v3 = v2;
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x24BDAC7A8](v6);
  v285 = (char *)&v277 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v284 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v282 = (uint64_t)&v277 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v283 = (uint64_t)&v277 - v11;
  v296 = 0;
  v297 = 0;
  v298 = (_QWORD *)MEMORY[0x24BEE4B00];
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 48);
  v292 = *(_OWORD *)a1;
  *(_QWORD *)&v293 = v12;
  *((_QWORD *)&v293 + 1) = v13;
  v294 = *(_OWORD *)(a1 + 32);
  v295 = v14;
  countAndFlagsBits = (id)ProtobufDecoder.preferredBundleLanguage.getter();
  object = v15;
  v299 = 0;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  if (v17 >= v18)
  {
LABEL_215:
    *(_QWORD *)(a1 + 24) = 0;
    if (object)
    {
      v244 = (void *)*MEMORY[0x24BDD0E98];
      *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v292 = countAndFlagsBits;
      *((_QWORD *)&v292 + 1) = object;
      outlined init with take of Any(&v292, v291);
      v245 = v244;
      v246 = v298;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v290 = v246;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v291, v245, isUniquelyReferenced_nonNull_native);
      v298 = v290;

      swift_bridgeObjectRelease();
    }
    v248 = v297;
    if (__OFADD__(v296, v297))
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
LABEL_220:
      swift_allocError();
      swift_willThrow();
      goto LABEL_229;
    }
    swift_beginAccess();
    v249 = v299;
    if (!v299)
    {
      v256 = v298;
LABEL_239:

      *a2 = v296;
      a2[1] = v248;
      a2[2] = (uint64_t)v256;
      return;
    }
    v288 = a2;
    v250 = one-time initialization token for resolvableTextSegment;
    v251 = v299;
    if (v250 != -1)
      swift_once();
    v252 = v298;
    if (v298[2])
    {
      v253 = (id)static NSAttributedStringKey.resolvableTextSegment;
      v254 = specialized __RawDictionaryStorage.find<A>(_:)(v253);
      if ((v255 & 1) != 0)
      {
        outlined init with copy of Any(v252[7] + 32 * v254, (uint64_t)&v292);
      }
      else
      {
        v292 = 0u;
        v293 = 0u;
      }
      v257 = (uint64_t)v285;

      if (*((_QWORD *)&v293 + 1))
      {
        v258 = swift_dynamicCast();
        v259 = v284;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v284 + 56))(v257, v258 ^ 1u, 1, v8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v259 + 48))(v257, 1, v8) != 1)
        {
          v260 = v282;
          outlined init with take of LocalizedStringKey.FormatArgument(v257, v282, type metadata accessor for ResolvableTextSegmentAttribute.Value);
          objc_storeStrong((id *)(v260 + *(int *)(v8 + 20)), v249);
          v261 = (void *)static NSAttributedStringKey.resolvableTextSegment;
          *((_QWORD *)&v293 + 1) = v8;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v292);
          outlined init with copy of TypesettingLanguage(v260, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ResolvableTextSegmentAttribute.Value);
          outlined init with take of Any(&v292, v291);
          v263 = v261;
          v264 = v298;
          v265 = swift_isUniquelyReferenced_nonNull_native();
          v289 = v264;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v291, v263, v265);
          v256 = v289;

          swift_bridgeObjectRelease();
          outlined destroy of TypesettingConfiguration(v260, type metadata accessor for ResolvableTextSegmentAttribute.Value);
          v248 = v297;
LABEL_238:
          a2 = v288;
          goto LABEL_239;
        }
LABEL_237:
        outlined destroy of TypesettingConfiguration(v257, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
        v266 = (void *)static NSAttributedStringKey.resolvableTextSegment;
        v248 = v297;
        *((_QWORD *)&v293 + 1) = v8;
        v267 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v292);
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v268 = v8;
        v269 = swift_allocObject();
        *(_OWORD *)(v269 + 16) = xmmword_23527E860;
        v270 = v251;
        countAndFlagsBits = v266;
        v271 = MEMORY[0x24BEE4AF8];
        v272 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v273 = specialized Dictionary.init(dictionaryLiteral:)(v271);
        ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(0, v248, v272, v273, (int64_t *)(v269 + 32));
        UUID.init()();
        *(uint64_t *)((char *)v267 + *(int *)(v268 + 20)) = (uint64_t)v270;
        *(uint64_t *)((char *)v267 + *(int *)(v268 + 24)) = v269;
        outlined init with take of Any(&v292, v291);
        v274 = v298;
        v275 = swift_isUniquelyReferenced_nonNull_native();
        v289 = v274;
        v276 = countAndFlagsBits;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v291, countAndFlagsBits, v275);
        v256 = v289;

        swift_bridgeObjectRelease();
        goto LABEL_238;
      }
    }
    else
    {
      v292 = 0u;
      v293 = 0u;
      v257 = (uint64_t)v285;
    }
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v292, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v284 + 56))(v257, 1, 1, v8);
    goto LABEL_237;
  }
  v281 = (_QWORD *)(a1 + 40);
  v279 = CFSTR("UIAccessibilityTokenDurationTimeMMSS");
  v278 = (id)*MEMORY[0x24BEBB310];
  v286 = v8;
  v288 = (uint64_t *)&v298;
  while (2)
  {
    v20 = *(_QWORD *)(a1 + 24);
    if (v20)
    {
      v21 = *(_QWORD *)(a1 + 32);
      if (v17 < v21)
        goto LABEL_12;
      if (v21 < v17)
        goto LABEL_227;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v22 = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_228;
    v20 = v22;
    if (v22 < 8)
    {
LABEL_227:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      goto LABEL_228;
    }
LABEL_12:
    switch(v20 >> 3)
    {
      case 1uLL:
        if ((v20 & 7) == 0)
          goto LABEL_19;
        if ((v20 & 7) != 2)
          goto LABEL_227;
        v23 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v23 < 0)
          goto LABEL_261;
        v24 = *(_QWORD *)(a1 + 8) + v23;
        if (v18 < v24)
          goto LABEL_227;
        *(_QWORD *)(a1 + 24) = 8;
        *(_QWORD *)(a1 + 32) = v24;
LABEL_19:
        v25 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v25 < 0)
          goto LABEL_247;
        v296 = v25;
        goto LABEL_5;
      case 2uLL:
        if ((v20 & 7) == 0)
          goto LABEL_93;
        if ((v20 & 7) != 2)
          goto LABEL_227;
        v133 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v133 < 0)
          goto LABEL_262;
        v134 = *(_QWORD *)(a1 + 8) + v133;
        if (v18 < v134)
          goto LABEL_227;
        *(_QWORD *)(a1 + 24) = 16;
        *(_QWORD *)(a1 + 32) = v134;
LABEL_93:
        v135 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v135 < 0)
          goto LABEL_248;
        v297 = v135;
        goto LABEL_5;
      case 3uLL:
        if ((v20 & 7) != 2)
          goto LABEL_227;
        v81 = v281;
        v82 = (_QWORD *)*v281;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82[2] + 1, 1, v82);
        v84 = v82[2];
        v83 = v82[3];
        if (v84 >= v83 >> 1)
          v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v83 > 1), v84 + 1, 1, v82);
        v82[2] = v84 + 1;
        v82[v84 + 4] = v18;
        *(_QWORD *)(a1 + 40) = v82;
        v85 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v85 < 0)
          goto LABEL_245;
        v86 = *(_QWORD *)(a1 + 8) + v85;
        if (v18 < v86)
          goto LABEL_227;
        v280 = object;
        *(_QWORD *)(a1 + 16) = v86;
        v87 = *(_QWORD *)(a1 + 48);
        swift_bridgeObjectRetain_n();
        v88 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((id *)a1, v87);
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(*v81 + 16))
          goto LABEL_255;
        v89 = specialized Array._customRemoveLast()();
        if (!v89)
          v89 = specialized Array.remove(at:)(*(_QWORD *)(*v81 + 16) - 1);
        *(_QWORD *)(a1 + 16) = v89;
        if (one-time initialization token for kitFont != -1)
          swift_once();
        v90 = (void *)static NSAttributedStringKey.kitFont;
        type metadata accessor for CTFontRef(0);
        *((_QWORD *)&v293 + 1) = v91;
        *(_QWORD *)&v292 = v88;
        outlined init with take of Any(&v292, v291);
        v92 = v90;
        v93 = v88;
        v94 = v298;
        v95 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v94;
        v298 = (_QWORD *)0x8000000000000000;
        v97 = specialized __RawDictionaryStorage.find<A>(_:)(v92);
        v98 = v94[2];
        v99 = (v96 & 1) == 0;
        v100 = v98 + v99;
        if (!__OFADD__(v98, v99))
          goto LABEL_167;
        goto LABEL_257;
      case 4uLL:
        if ((v20 & 7) != 2)
          goto LABEL_227;
        specialized ProtobufDecoder.decodeMessage<A>()();
        if (v3)
          goto LABEL_228;
        v164 = v160;
        v165 = v161;
        v166 = v162;
        v167 = v163;
        if (one-time initialization token for kitForegroundColor != -1)
          swift_once();
        v168 = one-time initialization token for cache;
        v136 = (id)static NSAttributedStringKey.kitForegroundColor;
        if (v168 != -1)
          swift_once();
        v169 = specialized ObjectCache.subscript.getter((uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), v164, v165, v166, v167);
        *((_QWORD *)&v293 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        *(_QWORD *)&v292 = v169;
        outlined init with take of Any(&v292, v291);
        v170 = v298;
        v171 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v170;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v291, v136, v171);
        v298 = v290;
        goto LABEL_204;
      case 5uLL:
        if ((v20 & 7) != 2)
          goto LABEL_227;
        v174 = v281;
        v175 = (_QWORD *)*v281;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v175 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v175[2] + 1, 1, v175);
        v177 = v175[2];
        v176 = v175[3];
        if (v177 >= v176 >> 1)
          v175 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v176 > 1), v177 + 1, 1, v175);
        v175[2] = v177 + 1;
        v175[v177 + 4] = v18;
        *(_QWORD *)(a1 + 40) = v175;
        v178 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v178 < 0)
          goto LABEL_246;
        v179 = *(_QWORD *)(a1 + 8) + v178;
        if (v18 < v179)
          goto LABEL_227;
        v280 = object;
        *(_QWORD *)(a1 + 16) = v179;
        v180 = specialized CodableNSParagraphStyle.init(from:)((_QWORD *)a1);
        if (!*(_QWORD *)(*v174 + 16))
          goto LABEL_256;
        v181 = v180;
        v182 = specialized Array._customRemoveLast()();
        if (!v182)
          v182 = specialized Array.remove(at:)(*(_QWORD *)(*v174 + 16) - 1);
        *(_QWORD *)(a1 + 16) = v182;
        if (one-time initialization token for kitParagraphStyle != -1)
          swift_once();
        v183 = (void *)static NSAttributedStringKey.kitParagraphStyle;
        *((_QWORD *)&v293 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
        *(_QWORD *)&v292 = v181;
        outlined init with take of Any(&v292, v291);
        v92 = v183;
        v93 = v181;
        v94 = v298;
        v95 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v94;
        v298 = (_QWORD *)0x8000000000000000;
        v97 = specialized __RawDictionaryStorage.find<A>(_:)(v92);
        v184 = v94[2];
        v185 = (v96 & 1) == 0;
        v100 = v184 + v185;
        if (!__OFADD__(v184, v185))
          goto LABEL_167;
        goto LABEL_258;
      case 6uLL:
        if ((v20 & 7) != 2)
          goto LABEL_227;
        ProtobufDecoder.beginMessage()();
        v101 = v281;
        if (v3)
          goto LABEL_228;
        v102 = specialized CodableTextAttachment.init(from:)((_QWORD *)a1);
        v3 = 0;
        v103 = (_QWORD *)*v101;
        if (!*(_QWORD *)(*v101 + 16))
          goto LABEL_249;
        v104 = v102;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v105 = v103[2];
          if (!v105)
            goto LABEL_252;
        }
        else
        {
          v103 = specialized _ArrayBuffer._consumeAndCreateNew()(v103);
          v105 = v103[2];
          if (!v105)
            goto LABEL_252;
        }
        v280 = object;
        v106 = v105 - 1;
        v107 = v103[v106 + 4];
        v103[2] = v106;
        *(_QWORD *)(a1 + 40) = v103;
        *(_QWORD *)(a1 + 16) = v107;
        if (one-time initialization token for kitAttachment != -1)
          swift_once();
        v108 = (void *)static NSAttributedStringKey.kitAttachment;
        *((_QWORD *)&v293 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
        *(_QWORD *)&v292 = v104;
        outlined init with take of Any(&v292, v291);
        v109 = v108;
        v110 = v104;
        v111 = v298;
        v112 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v111;
        v298 = (_QWORD *)0x8000000000000000;
        v114 = specialized __RawDictionaryStorage.find<A>(_:)(v109);
        v115 = v111[2];
        v116 = (v113 & 1) == 0;
        v117 = v115 + v116;
        if (__OFADD__(v115, v116))
          goto LABEL_254;
        v118 = v113;
        if (v111[3] >= v117)
        {
          if ((v112 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, v112);
          v119 = specialized __RawDictionaryStorage.find<A>(_:)(v109);
          if ((v118 & 1) != (v120 & 1))
            goto LABEL_267;
          v114 = v119;
        }
        v239 = v290;
        if ((v118 & 1) != 0)
        {
          v240 = (_OWORD *)(v290[7] + 32 * v114);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v240);
          outlined init with take of Any(v291, v240);
        }
        else
        {
          v290[(v114 >> 6) + 8] |= 1 << v114;
          *(_QWORD *)(v239[6] + 8 * v114) = v109;
          outlined init with take of Any(v291, (_OWORD *)(v239[7] + 32 * v114));
          v241 = v239[2];
          v55 = __OFADD__(v241, 1);
          v242 = v241 + 1;
          if (v55)
            goto LABEL_265;
          v239[2] = v242;
          v243 = v109;
        }
        v298 = v239;

        swift_bridgeObjectRelease();
        object = v280;
        goto LABEL_212;
      case 7uLL:
        if (one-time initialization token for kitBaselineOffset != -1)
          swift_once();
        *(_QWORD *)&v291[0] = v20;
        v136 = (id)static NSAttributedStringKey.kitBaselineOffset;
        v137 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)v291);
        v3 = v138;
        if (v138)
          goto LABEL_240;
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE50B0];
        *(double *)&v292 = v137;
        outlined init with take of Any(&v292, v291);
        v139 = v298;
        v140 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v139;
        v298 = (_QWORD *)0x8000000000000000;
        v142 = specialized __RawDictionaryStorage.find<A>(_:)(v136);
        v143 = v139[2];
        v144 = (v141 & 1) == 0;
        v145 = v143 + v144;
        if (__OFADD__(v143, v144))
          goto LABEL_243;
        v146 = v141;
        if (v139[3] >= v145)
        {
          if ((v140 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v145, v140);
          v147 = specialized __RawDictionaryStorage.find<A>(_:)(v136);
          if ((v146 & 1) != (v148 & 1))
            goto LABEL_267;
          v142 = v147;
        }
        v230 = v290;
        if ((v146 & 1) != 0)
          goto LABEL_194;
        v290[(v142 >> 6) + 8] |= 1 << v142;
        *(_QWORD *)(v230[6] + 8 * v142) = v136;
        outlined init with take of Any(v291, (_OWORD *)(v230[7] + 32 * v142));
        v231 = v230[2];
        v55 = __OFADD__(v231, 1);
        v232 = v231 + 1;
        if (!v55)
          goto LABEL_196;
        goto LABEL_259;
      case 8uLL:
        if (one-time initialization token for kitKern != -1)
          swift_once();
        *(_QWORD *)&v291[0] = v20;
        v136 = (id)static NSAttributedStringKey.kitKern;
        v149 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)v291);
        v3 = v150;
        if (v150)
          goto LABEL_240;
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE50B0];
        *(double *)&v292 = v149;
        outlined init with take of Any(&v292, v291);
        v151 = v298;
        v152 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v151;
        v298 = (_QWORD *)0x8000000000000000;
        v142 = specialized __RawDictionaryStorage.find<A>(_:)(v136);
        v154 = v151[2];
        v155 = (v153 & 1) == 0;
        v156 = v154 + v155;
        if (__OFADD__(v154, v155))
        {
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
LABEL_267:
          type metadata accessor for NSAttributedStringKey(0);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x234B2BD9CLL);
        }
        v157 = v153;
        if (v151[3] >= v156)
        {
          if ((v152 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v156, v152);
          v158 = specialized __RawDictionaryStorage.find<A>(_:)(v136);
          if ((v157 & 1) != (v159 & 1))
            goto LABEL_267;
          v142 = v158;
        }
        v230 = v290;
        if ((v157 & 1) != 0)
        {
LABEL_194:
          v233 = (_OWORD *)(v230[7] + 32 * v142);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v233);
          outlined init with take of Any(v291, v233);
        }
        else
        {
          v290[(v142 >> 6) + 8] |= 1 << v142;
          *(_QWORD *)(v230[6] + 8 * v142) = v136;
          outlined init with take of Any(v291, (_OWORD *)(v230[7] + 32 * v142));
          v234 = v230[2];
          v55 = __OFADD__(v234, 1);
          v232 = v234 + 1;
          if (v55)
            goto LABEL_260;
LABEL_196:
          v230[2] = v232;
          v235 = v136;
        }
        v298 = v230;

        swift_bridgeObjectRelease();
LABEL_212:
        v8 = v286;
        goto LABEL_5;
      case 9uLL:
        if (one-time initialization token for kitTracking != -1)
          swift_once();
        *(_QWORD *)&v291[0] = v20;
        v136 = (id)static NSAttributedStringKey.kitTracking;
        v196 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)v291);
        v3 = v197;
        if (!v197)
        {
          *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE50B0];
          *(double *)&v292 = v196;
          outlined init with take of Any(&v292, v291);
          v198 = v298;
          v199 = swift_isUniquelyReferenced_nonNull_native();
          v290 = v198;
          v298 = (_QWORD *)0x8000000000000000;
          v201 = specialized __RawDictionaryStorage.find<A>(_:)(v136);
          v202 = v198[2];
          v203 = (v200 & 1) == 0;
          v204 = v202 + v203;
          if (__OFADD__(v202, v203))
            goto LABEL_244;
          v205 = v200;
          if (v198[3] >= v204)
          {
            if ((v199 & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v204, v199);
            v206 = specialized __RawDictionaryStorage.find<A>(_:)(v136);
            if ((v205 & 1) != (v207 & 1))
              goto LABEL_267;
            v201 = v206;
          }
          v8 = v286;
          v236 = v290;
          if ((v205 & 1) != 0)
          {
            v237 = (_OWORD *)(v290[7] + 32 * v201);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v237);
            outlined init with take of Any(v291, v237);
          }
          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v201, (uint64_t)v136, v291, v290);
            v238 = v136;
          }
          v298 = v236;
LABEL_204:

          swift_bridgeObjectRelease();
LABEL_5:
          v17 = *(_QWORD *)(a1 + 8);
          v18 = *(_QWORD *)(a1 + 16);
          if (v17 >= v18)
            goto LABEL_215;
          continue;
        }
LABEL_240:

LABEL_228:
        swift_bridgeObjectRelease();
LABEL_229:

        swift_bridgeObjectRelease();
        return;
      case 0xAuLL:
        if ((v20 & 7) == 0)
          goto LABEL_142;
        if ((v20 & 7) != 2)
          goto LABEL_227;
        v186 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v186 < 0)
          goto LABEL_263;
        v187 = *(_QWORD *)(a1 + 8) + v186;
        if (v18 < v187)
          goto LABEL_227;
        *(_QWORD *)(a1 + 24) = 80;
        *(_QWORD *)(a1 + 32) = v187;
LABEL_142:
        v188 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        v189 = v188;
        if (one-time initialization token for kitStrikethroughStyle != -1)
          swift_once();
        v190 = (void *)static NSAttributedStringKey.kitStrikethroughStyle;
        v191 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
        v192 = v190;
        v193 = objc_msgSend(v191, sel_initWithInteger_, -(v189 & 1) ^ (v189 >> 1));
        *((_QWORD *)&v293 + 1) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
        *(_QWORD *)&v292 = v193;
        outlined init with take of Any(&v292, v291);
        v194 = v298;
        v195 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v194;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v291, v192, v195);
        v298 = v290;

        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 0xBuLL:
        if ((v20 & 7) != 2)
          goto LABEL_227;
        ProtobufDecoder.beginMessage()();
        if (v3)
          goto LABEL_228;
        v3 = 0;
        v45 = specialized Color.Resolved.init(from:)((_QWORD *)a1);
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v52 = v281;
        if (!specialized Array._getCount()(*v281))
          goto LABEL_250;
        v53 = specialized Array._customRemoveLast()();
        if (v53)
          goto LABEL_40;
        v54 = specialized Array._getCount()(*v52);
        v55 = __OFSUB__(v54, 1);
        v56 = v54 - 1;
        if (v55)
          goto LABEL_266;
        v53 = specialized Array.remove(at:)(v56);
LABEL_40:
        *(_QWORD *)(a1 + 16) = v53;
        v57 = (__CFString *)(id)*NSAttributedStringKey.kitStrikethroughStyle.unsafeMutableAddressor();
        v58 = Color.Resolved.kitColor.getter(v45, v47, v49, v51);
        *((_QWORD *)&v293 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        *(_QWORD *)&v292 = v58;
        v33 = v57;
        goto LABEL_180;
      case 0xCuLL:
        if ((v20 & 7) == 0)
          goto LABEL_82;
        if ((v20 & 7) != 2)
          goto LABEL_227;
        v121 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        if (v121 < 0)
          goto LABEL_264;
        v122 = *(_QWORD *)(a1 + 8) + v121;
        if (v18 < v122)
          goto LABEL_227;
        *(_QWORD *)(a1 + 24) = 96;
        *(_QWORD *)(a1 + 32) = v122;
LABEL_82:
        v123 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_228;
        v124 = -(v123 & 1) ^ (v123 >> 1);
        v125 = (void *)*NSAttributedStringKey.kitUnderlineStyle.unsafeMutableAddressor();
        v126 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
        ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
        v128 = v125;
        v129 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithInteger_, v124);
        *((_QWORD *)&v293 + 1) = v126;
        *(_QWORD *)&v292 = v129;
        v33 = v128;
LABEL_180:
        specialized Dictionary.subscript.setter((uint64_t)&v292, v33);
        goto LABEL_5;
      case 0xDuLL:
        specialized ProtobufDecoder.messageField<A>(_:)(v20);
        if (v3)
          goto LABEL_228;
        v68 = v64;
        v69 = v65;
        v70 = v66;
        v71 = v67;
        v72 = (__CFString *)(id)*NSAttributedStringKey.kitUnderlineColor.unsafeMutableAddressor();
        v73 = Color.Resolved.kitColor.getter(v68, v69, v70, v71);
        *((_QWORD *)&v293 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        *(_QWORD *)&v292 = v73;
        v33 = v72;
        goto LABEL_180;
      case 0xEuLL:
        specialized ProtobufDecoder.messageField<A>(_:)(v20, (unint64_t)&v292);
        if (v3)
          goto LABEL_228;
        Dictionary<>.setShadow(shadowStyle:)((uint64_t)&v292);
        goto LABEL_5;
      case 0xFuLL:
        swift_bridgeObjectRelease();
        *(_QWORD *)&v292 = v20;
        v172 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v173;
        if (v173)
          goto LABEL_229;
        object = v172._object;
        countAndFlagsBits = (id)v172._countAndFlagsBits;
        goto LABEL_5;
      case 0x10uLL:
        v26 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>;
        v28 = type metadata accessor for ResolvableDateInterval;
        v29 = &protocol witness table for ResolvableDateInterval;
        goto LABEL_155;
      case 0x11uLL:
        v26 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>;
        v28 = type metadata accessor for ResolvableAbsoluteDate;
        v29 = &protocol witness table for ResolvableAbsoluteDate;
        goto LABEL_155;
      case 0x12uLL:
        v26 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>;
        v28 = type metadata accessor for ResolvableCurrentDate;
        v29 = &protocol witness table for ResolvableCurrentDate;
        goto LABEL_155;
      case 0x13uLL:
        v26 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>;
        v28 = type metadata accessor for ResolvableTimer;
        v29 = &protocol witness table for ResolvableTimer;
        goto LABEL_155;
      case 0x15uLL:
        *(_QWORD *)&v292 = v20;
        v74 = ProtobufDecoder.BOOLField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v75;
        if (v75)
          goto LABEL_228;
        v76 = v74;
        v77 = 0xD000000000000029;
        v78 = "UIAccessibilitySpeechAttributePunctuation";
        goto LABEL_160;
      case 0x16uLL:
        *(_QWORD *)&v292 = v20;
        v209 = ProtobufDecoder.BOOLField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v210;
        if (v210)
          goto LABEL_228;
        v76 = v209;
        v77 = 0xD000000000000026;
        v78 = "UIAccessibilitySpeechAttributeSpellOut";
LABEL_160:
        v33 = (__CFString *)MEMORY[0x23B7C5DAC](v77, (unint64_t)(v78 - 32) | 0x8000000000000000);
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE1328];
        LOBYTE(v292) = v76;
        goto LABEL_180;
      case 0x17uLL:
        *(_QWORD *)&v292 = v20;
        v30 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v31;
        if (v31)
          goto LABEL_228;
        v32 = v30;
        v33 = (__CFString *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352DE920);
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE13C8];
        *(double *)&v292 = v32;
        goto LABEL_180;
      case 0x18uLL:
        *(_QWORD *)&v292 = v20;
        v79 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v80;
        if (v80)
          goto LABEL_228;
        v36 = v79._countAndFlagsBits;
        v37 = v79._object;
        v38 = 0xD000000000000032;
        v39 = "UIAccessibilitySpeechAttributeAnnouncementPriority";
        goto LABEL_86;
      case 0x19uLL:
        *(_QWORD *)&v292 = v20;
        v34 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v35;
        if (v35)
          goto LABEL_228;
        v36 = v34._countAndFlagsBits;
        v37 = v34._object;
        v38 = 0xD000000000000026;
        v39 = "UIAccessibilitySpeechAttributeLanguage";
        goto LABEL_86;
      case 0x1AuLL:
        *(_QWORD *)&v292 = v20;
        v130 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v131;
        if (v131)
          goto LABEL_228;
        v36 = v130._countAndFlagsBits;
        v37 = v130._object;
        v38 = 0xD000000000000029;
        v39 = "UIAccessibilitySpeechAttributeIPANotation";
LABEL_86:
        v132 = (unint64_t)(v39 - 32) | 0x8000000000000000;
        goto LABEL_176;
      case 0x1BuLL:
        *(_QWORD *)&v292 = v20;
        v40 = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v41;
        if (v41)
          goto LABEL_228;
        v42 = v40;
        v33 = (__CFString *)MEMORY[0x23B7C5DAC](0xD000000000000028, 0x80000002352DE8F0);
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE1E88];
        *(_QWORD *)&v292 = v42;
        goto LABEL_180;
      case 0x1CuLL:
        *(_QWORD *)&v292 = v20;
        v222 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v223;
        if (v223)
          goto LABEL_228;
        v36 = v222._countAndFlagsBits;
        v37 = v222._object;
        v132 = 0x80000002352DE9E0;
        v38 = 0xD000000000000023;
LABEL_176:
        v33 = (__CFString *)MEMORY[0x23B7C5DAC](v38, v132);
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v292 = v36;
        *((_QWORD *)&v292 + 1) = v37;
        goto LABEL_180;
      case 0x1DuLL:
        *(_QWORD *)&v292 = v20;
        v224 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v225;
        if (v225)
          goto LABEL_228;
        v61 = v224._countAndFlagsBits;
        v62 = v224._object;
        v63 = NSAttributedStringKey.coreAXLabel.unsafeMutableAddressor();
        goto LABEL_179;
      case 0x1EuLL:
        *(_QWORD *)&v292 = v20;
        v59 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v60;
        if (v60)
          goto LABEL_228;
        v61 = v59._countAndFlagsBits;
        v62 = v59._object;
        v63 = NSAttributedStringKey._textScale.unsafeMutableAddressor();
LABEL_179:
        v226 = (void *)*v63;
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v292 = v61;
        *((_QWORD *)&v292 + 1) = v62;
        v33 = v226;
        goto LABEL_180;
      case 0x1FuLL:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error();
        goto LABEL_220;
      case 0x20uLL:
        *(_QWORD *)&v292 = v20;
        v43 = ProtobufDecoder.BOOLField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
        v3 = v44;
        if (v44)
          goto LABEL_228;
        *((_QWORD *)&v293 + 1) = MEMORY[0x24BEE1328];
        LOBYTE(v292) = v43;
        v33 = v279;
        goto LABEL_180;
      case 0x21uLL:
        v26 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>;
        v28 = type metadata accessor for ResolvableProgress;
        v29 = &protocol witness table for ResolvableProgress;
LABEL_155:
        v208 = v3;
        specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(a1, v20, (uint64_t)&v296, &v299, (void (*)(_QWORD *__return_ptr))v26, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
        goto LABEL_156;
      case 0x22uLL:
        v227 = v283;
        specialized ProtobufDecoder.codableField<A>(_:)(v20, v283);
        if (v3)
          goto LABEL_228;
        v228 = (void *)*NSAttributedStringKey.resolvableTextSegment.unsafeMutableAddressor();
        *((_QWORD *)&v293 + 1) = v8;
        v229 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v292);
        outlined init with copy of TypesettingLanguage(v227, (uint64_t)v229, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        specialized Dictionary.subscript.setter((uint64_t)&v292, v228);
        outlined destroy of TypesettingConfiguration(v227, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        goto LABEL_5;
      case 0x23uLL:
        v208 = v3;
        specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(a1, v20, (uint64_t)&v296, &v299);
        goto LABEL_156;
      case 0x24uLL:
        if ((v20 & 7) != 2)
          goto LABEL_227;
        ProtobufDecoder.beginMessage()();
        v211 = v281;
        if (v3)
          goto LABEL_228;
        v280 = object;
        v212 = specialized CodableAdaptiveImageGlyph.init(from:)((_QWORD *)a1);
        v3 = 0;
        if (!*(_QWORD *)(*v211 + 16))
          goto LABEL_251;
        v213 = v212;
        v214 = specialized Array._customRemoveLast()();
        if (!v214)
          v214 = specialized Array.remove(at:)(*(_QWORD *)(*v211 + 16) - 1);
        *(_QWORD *)(a1 + 16) = v214;
        *((_QWORD *)&v293 + 1) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSAdaptiveImageGlyph);
        *(_QWORD *)&v292 = v213;
        outlined init with take of Any(&v292, v291);
        v92 = v278;
        v93 = v213;
        v94 = v298;
        v95 = swift_isUniquelyReferenced_nonNull_native();
        v290 = v94;
        v298 = (_QWORD *)0x8000000000000000;
        v97 = specialized __RawDictionaryStorage.find<A>(_:)(v92);
        v215 = v94[2];
        v216 = (v96 & 1) == 0;
        v100 = v215 + v216;
        if (__OFADD__(v215, v216))
          goto LABEL_253;
LABEL_167:
        v217 = v96;
        if (v94[3] >= v100)
        {
          if ((v95 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v100, v95);
          v218 = specialized __RawDictionaryStorage.find<A>(_:)(v92);
          if ((v217 & 1) != (v219 & 1))
            goto LABEL_267;
          v97 = v218;
        }
        v8 = v286;
        v220 = v290;
        if ((v217 & 1) != 0)
        {
          v221 = (_OWORD *)(v290[7] + 32 * v97);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v221);
          outlined init with take of Any(v291, v221);
        }
        else
        {
          specialized _NativeDictionary._insert(at:key:value:)(v97, (uint64_t)v92, v291, v290);
          v19 = v92;
        }
        v298 = v220;

        swift_bridgeObjectRelease();
        object = v280;
        goto LABEL_5;
      default:
        *(_QWORD *)&v292 = v20;
        ProtobufDecoder.skipField(_:)((SwiftUI::ProtobufFormat::Field)&v292);
LABEL_156:
        v3 = v208;
        if (v208)
          goto LABEL_228;
        goto LABEL_5;
    }
  }
}

uint64_t ProtobufDecoder.preferredBundleLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v1 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 48);
  if (one-time initialization token for preferredBundleLanguageKey != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredBundleLanguageKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(_QWORD *)(v5 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((_QWORD *)&v12 + 1))
  {
    if (swift_dynamicCast())
      return v10;
    else
      return 0;
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    return 0;
  }
}

void specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, void (*a5)(_QWORD *__return_ptr), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *boxed_opaque_existential_1;
  id v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[4];
  _QWORD v29[5];
  _OWORD v30[3];
  uint64_t v31;
  void (*v32)(_QWORD *__return_ptr);

  v32 = a5;
  v13 = *(_OWORD *)(a1 + 16);
  v30[0] = *(_OWORD *)a1;
  v30[1] = v13;
  v30[2] = *(_OWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 48);
  v28[0] = a2;
  outlined retain of ProtobufDecoder((id *)v30);
  v14 = ProtobufDecoder.dataField(_:)(v28);
  if (v8)
  {
    outlined release of ProtobufDecoder((void **)v30);
  }
  else
  {
    v16 = v14;
    v17 = v15;
    v32(v29);
    outlined release of ProtobufDecoder((void **)v30);
    outlined consume of Data._Representation(v16, v17);
    outlined init with copy of ResolvableStringAttribute?((uint64_t)v29, (uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    if (v27)
    {
      outlined init with take of ScrollStateRequest(&v26, (uint64_t)v28);
      __swift_project_boxed_opaque_existential_1(v28, v28[3]);
      swift_getDynamicType();
      v18 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
      outlined init with copy of ResolvableStringAttribute?((uint64_t)v29, (uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
      v19 = v27;
      if (v27)
      {
        v20 = __swift_project_boxed_opaque_existential_1(&v26, v27);
        *((_QWORD *)&v25 + 1) = v19;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(boxed_opaque_existential_1, v20, v19);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      }
      else
      {
        outlined destroy of AnyTrackedValue?((uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
        v24 = 0u;
        v25 = 0u;
      }
      v22 = v18;
      specialized Dictionary.subscript.setter((uint64_t)&v24, v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v29, a6, a7, a8, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>);
      swift_beginAccess();
      v23 = *a4;
      *a4 = v22;

    }
    else
    {
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v29, a6, a7, a8, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>);
      outlined destroy of AnyTrackedValue?((uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    }
  }
}

void specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *boxed_opaque_existential_1;
  id v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[4];
  _BYTE v22[40];
  _OWORD v23[3];
  uint64_t v24;

  v6 = *(_OWORD *)(a1 + 16);
  v23[0] = *(_OWORD *)a1;
  v23[1] = v6;
  v23[2] = *(_OWORD *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 48);
  v21[0] = a2;
  outlined retain of ProtobufDecoder((id *)v23);
  v7 = ProtobufDecoder.dataField(_:)(v21);
  if (v4)
  {
    outlined release of ProtobufDecoder((void **)v23);
  }
  else
  {
    v9 = v7;
    v10 = v8;
    specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)((uint64_t)v22);
    outlined release of ProtobufDecoder((void **)v23);
    outlined consume of Data._Representation(v9, v10);
    outlined init with copy of ResolvableStringAttribute?((uint64_t)v22, (uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    if (v20)
    {
      outlined init with take of ScrollStateRequest(&v19, (uint64_t)v21);
      __swift_project_boxed_opaque_existential_1(v21, v21[3]);
      swift_getDynamicType();
      v11 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
      outlined init with copy of ResolvableStringAttribute?((uint64_t)v22, (uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
      v12 = v20;
      if (v20)
      {
        v13 = __swift_project_boxed_opaque_existential_1(&v19, v20);
        *((_QWORD *)&v18 + 1) = v12;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(boxed_opaque_existential_1, v13, v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
      }
      else
      {
        outlined destroy of AnyTrackedValue?((uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
        v17 = 0u;
        v18 = 0u;
      }
      v15 = v11;
      specialized Dictionary.subscript.setter((uint64_t)&v17, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      outlined destroy of TypesettingConfiguration((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
      swift_beginAccess();
      v16 = *a4;
      *a4 = v15;

    }
    else
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
      outlined destroy of AnyTrackedValue?((uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    }
  }
}

void **specialized ProtobufDecoder.codableField<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = *(_OWORD *)(v2 + 16);
  v11[0] = *(_OWORD *)v2;
  v11[1] = v5;
  v11[2] = *(_OWORD *)(v2 + 32);
  v12 = *(_QWORD *)(v2 + 48);
  v13 = a1;
  outlined retain of ProtobufDecoder((id *)v11);
  v6 = ProtobufDecoder.dataField(_:)(&v13);
  if (v3)
    return outlined release of ProtobufDecoder((void **)v11);
  v9 = v6;
  v10 = v7;
  specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)(a2);
  outlined release of ProtobufDecoder((void **)v11);
  return (void **)outlined consume of Data._Representation(v9, v10);
}

uint64_t CodableAttributedString.Range.DecodingWrapper.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v7[5];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 16))(v7);
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v3)
    return outlined init with take of Any?((uint64_t)v7, a3, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute?, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute, (uint64_t)&protocol descriptor for ResolvableStringAttribute, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAttributedString.Range.DecodingWrapper<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CodableAttributedString.Range.DecodingWrapper.init(from:)(a1, *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAttributedString.Range(uint64_t a1)
{
  return CodableAttributedString.Range.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAttributedString.Range(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CodableAttributedString.Range.init(from:)(a1, a2);
}

void CodableNSParagraphStyle.encode(to:)(_QWORD *a1, id a2)
{
  id v4;
  unsigned int v5;
  unsigned int v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  id v10;
  Swift::UInt v11;
  double v12;
  double v13;
  double v14;
  Swift::UInt v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  Swift::UInt v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  double v30;
  double v31;
  Swift::UInt v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  int64_t v39;
  id v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;

  v4 = objc_msgSend(a2, sel_horizontalAlignment);
  v5 = objc_msgSend(a2, sel_isFullyJustified);
  v6 = v4 == (id)3;
  if (v4 == (id)4)
    v6 = 2;
  if (v5)
    v7 = 3;
  else
    v7 = v6;
  if ((_DWORD)v7)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v7);
  }
  v8 = (Swift::UInt)objc_msgSend(a2, sel_lineBreakMode);
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_93;
  v9 = v8;
  if (v8 != 4)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v9);
  }
  v10 = objc_msgSend(a2, sel_lineBreakStrategy);
  if (v10 != (id)0xFFFF)
  {
    v11 = (Swift::UInt)v10;
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v11);
  }
  objc_msgSend(a2, sel_lineSpacing);
  if (v12 == 0.0)
    goto LABEL_24;
  v13 = v12;
  v14 = fabs(v12);
  if (v14 >= 65536.0)
    v15 = 33;
  else
    v15 = 37;
  ProtobufEncoder.encodeVarint(_:)(v15);
  if (v14 >= 65536.0)
  {
    v18 = a1[1];
    v17 = v18 + 8;
    if (!__OFADD__(v18, 8))
    {
      if (a1[2] < v17)
      {
        *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
      }
      else
      {
        a1[1] = v17;
        *(double *)(*a1 + v18) = v13;
      }
      goto LABEL_24;
    }
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v16 = a1[1];
  v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
    goto LABEL_78;
  }
  *(float *)&v13 = v13;
  if (a1[2] < v17)
    goto LABEL_83;
  a1[1] = v17;
  *(_DWORD *)(*a1 + v16) = LODWORD(v13);
  while (1)
  {
LABEL_24:
    objc_msgSend(a2, sel_lineHeightMultiple);
    if (v19 == 0.0)
      goto LABEL_35;
    v13 = v19;
    v20 = fabs(v19);
    v21 = v20 >= 65536.0 ? 41 : 45;
    ProtobufEncoder.encodeVarint(_:)(v21);
    if (v20 >= 65536.0)
      break;
    v22 = a1[1];
    v17 = v22 + 4;
    if (!__OFADD__(v22, 4))
    {
      *(float *)&v13 = v13;
      if (a1[2] >= v17)
      {
        a1[1] = v17;
        *(_DWORD *)(*a1 + v22) = LODWORD(v13);
        goto LABEL_35;
      }
      goto LABEL_87;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17) = LODWORD(v13);
  }
  v23 = a1[1];
  v17 = v23 + 8;
  if (__OFADD__(v23, 8))
    goto LABEL_80;
  if (a1[2] < v17)
  {
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
  }
  else
  {
    a1[1] = v17;
    *(double *)(*a1 + v23) = v13;
  }
  while (1)
  {
LABEL_35:
    objc_msgSend(a2, sel_maximumLineHeight);
    v13 = v24;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    if (v13 != *(double *)&static MaximumLineHeightKey.defaultValue)
    {
      v25 = fabs(v13);
      if (v25 >= 65536.0)
        v26 = 49;
      else
        v26 = 53;
      ProtobufEncoder.encodeVarint(_:)(v26);
      if (v25 >= 65536.0)
      {
        v29 = a1[1];
        v17 = v29 + 8;
        if (__OFADD__(v29, 8))
          goto LABEL_82;
        if (a1[2] < v17)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
        }
        else
        {
          a1[1] = v17;
          *(double *)(*a1 + v29) = v13;
        }
      }
      else
      {
        v27 = a1[1];
        v17 = v27 + 4;
        if (__OFADD__(v27, 4))
          goto LABEL_81;
        v28 = v13;
        if (a1[2] < v17)
        {
          *(float *)ProtobufEncoder.growBufferSlow(to:)(v17) = v28;
        }
        else
        {
          a1[1] = v17;
          *(float *)(*a1 + v27) = v28;
        }
      }
    }
    objc_msgSend(a2, sel_minimumLineHeight);
    v13 = v30;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    if (v13 == *(double *)&static MinimumLineHeightKey.defaultValue)
      break;
    v31 = fabs(v13);
    if (v31 >= 65536.0)
      v32 = 57;
    else
      v32 = 61;
    ProtobufEncoder.encodeVarint(_:)(v32);
    if (v31 >= 65536.0)
    {
      v35 = a1[1];
      v17 = v35 + 8;
      if (!__OFADD__(v35, 8))
      {
        if (a1[2] < v17)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
        }
        else
        {
          a1[1] = v17;
          *(double *)(*a1 + v35) = v13;
        }
        break;
      }
    }
    else
    {
      v33 = a1[1];
      v17 = v33 + 4;
      if (!__OFADD__(v33, 4))
      {
        v34 = v13;
        if (a1[2] < v17)
        {
          *(float *)ProtobufEncoder.growBufferSlow(to:)(v17) = v34;
        }
        else
        {
          a1[1] = v17;
          *(float *)(*a1 + v33) = v34;
        }
        break;
      }
      __break(1u);
    }
    __break(1u);
LABEL_87:
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17) = LODWORD(v13);
  }
  objc_msgSend(a2, sel_hyphenationFactor);
  if (v36 != 0.0)
  {
    v37 = v36;
    ProtobufEncoder.encodeVarint(_:)(0x45uLL);
    v38 = a1[1];
    v39 = v38 + 4;
    if (__OFADD__(v38, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v39)
    {
      a1[1] = v39;
      *(float *)(*a1 + v38) = v37;
      goto LABEL_65;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v39) = v37;
  }
LABEL_65:
  if ((objc_msgSend(a2, sel_allowsDefaultTighteningForTruncation) & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x48uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  v40 = objc_msgSend(a2, sel_baseWritingDirection);
  if (v40 != (id)-1)
  {
    v41 = (uint64_t)v40;
    ProtobufEncoder.encodeVarint(_:)(0x50uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v41) ^ (v41 >> 63));
  }
  if ((objc_msgSend(a2, sel_spansAllLines) & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x58uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  v42 = (Swift::UInt)objc_msgSend(a2, sel_compositionLanguage);
  if ((v42 & 0x8000000000000000) != 0)
  {
LABEL_93:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v43 = v42;
  if (v42)
  {
    ProtobufEncoder.encodeVarint(_:)(0x60uLL);
    ProtobufEncoder.encodeVarint(_:)(v43);
  }
}

uint64_t ProtobufDecoder.preferredCompositionLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  _BYTE v10[16];
  __int128 v11;
  __int128 v12;

  v1 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(_QWORD *)(v0 + 48);
  if (one-time initialization token for preferredCompositionLanguage != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredCompositionLanguage);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(_QWORD *)(v5 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  if (*((_QWORD *)&v12 + 1))
  {
    type metadata accessor for CTCompositionLanguage(0);
    result = swift_dynamicCast();
    if ((_DWORD)result)
      return v10[15];
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    return 0;
  }
  return result;
}

void CodableTextAttachment.encode(to:)(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  objc_class *v5;
  _BYTE *v6;
  id v7;
  _BYTE *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  objc_super v15;

  v3 = (id)_NSTextAttachmentGetImage(a2);
  if (v3)
  {
    v4 = v3;
    v5 = (objc_class *)type metadata accessor for CorePlatformImage();
    v6 = objc_allocWithZone(v5);
    v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = 0;
    *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = v4;
    v7 = v4;
    v8 = v6;
    v8[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(0, v7);

    v15.receiver = v8;
    v15.super_class = v5;
    v9 = objc_msgSendSuper2(&v15, sel_init);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1, (uint64_t)v9);

  }
  else
  {
    v10 = (id)_NSTextAttachmentGetContents(a2);
    if (v10)
    {
      v11 = v10;
      v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v12, v14);
      outlined consume of Data._Representation(v12, v14);
    }
    else
    {
      lazy protocol witness table accessor for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error();
      swift_allocError();
      swift_willThrow();
    }
  }
}

void CodablePlatformFont.encode(to:)(__CFString **a1, void *a2)
{
  __CFString *v2;
  __CFString *v3;
  unint64_t info;
  double v5;
  __CFString *v6;
  uint64_t v8;
  unint64_t data;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  CTFontDescriptorRef v13;
  id v14;
  uint64_t v15;
  __CFString *v16;
  __CFString *v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  id *v21;
  __CFString *v22;
  const __CFURL *v23;
  __CFString *v24;
  const __CFURL *v25;
  char v26;
  double *v27;
  uint64_t v28;
  double v29;
  char v30;
  double *v31;
  unint64_t v32;
  id v33;
  const __CFURL *v34;
  unsigned int Options;
  Swift::UInt v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  void *v40;
  id v41;
  Swift::UInt v42;
  void *v43;
  unsigned int DefaultTextStylePlatform;
  Swift::UInt v45;
  __CFString *v46;
  int64_t v47;
  unint64_t length;
  __CFString **v49;
  double Size;
  double v51;
  Swift::UInt v52;
  uint64_t v53;
  uint64_t v54;
  CFTypeRef v55;
  uint64_t v56;
  __CFString *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  _BOOL8 v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t *v77;
  char *v78;
  char *v79;
  double *v80;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __CFString *v85;
  __CFString *v86;
  __CFString *v87;
  __CFString *v88;
  __CFString **v89;
  __CFString *v90;
  double *v91;
  __CFString *v92;
  uint64_t v93;
  double v94;
  __CFString *v95;
  double v96;
  __CFString **v97;
  __CFString *v98;
  int64_t v99;
  double *v100;
  __CFString *v101;
  double v102;
  double v103;
  Swift::UInt v104;
  __CFString **v105;
  __CFString *v106;
  int64_t p_info;
  __CFString *v108;
  double *v109;
  _QWORD *v110;
  __CFString *v111;
  __CFString *v112;
  __CFString *v113;
  const __CFURL *v114;
  CTFontDescriptorRef v115;
  uint64_t v116;
  int64_t v117;
  id v118;
  __CFString **v119;
  int64_t v120;
  double v121;
  __CFString *v122;
  __CFString *v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;

  v6 = v3;
  v119 = a1;
  v8 = type metadata accessor for URL();
  data = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2;
  v13 = CTFontCopyFontDescriptor((CTFontRef)v12);
  if (!CTFontIsSystemUIFont())
  {
    if ((CTFontDescriptorIsAppleFont() & 1) != 0)
    {
      data = (unint64_t)v13;
      goto LABEL_23;
    }
    v118 = (id)v12;
    v17 = *v119;
    v16 = v119[1];
    v18 = (int64_t)v119[2];
    v19 = (int64_t)v119[3];
    v20 = (uint64_t)v119[4];
    v122 = *v119;
    v123 = v16;
    v120 = v18;
    v124 = v18;
    v125 = v19;
    v116 = v20;
    v117 = v19;
    v126 = v20;
    ProtobufEncoder.archiveOptions.getter(&v121);
    v21 = (id *)MEMORY[0x24BDC4E30];
    if ((LOBYTE(v121) & 4) != 0)
      v21 = (id *)MEMORY[0x24BDC4DA0];
    v22 = (__CFString *)*v21;
    v115 = v13;
    if (CTFontDescriptorCopyAttribute(v13, v22))
    {
      v112 = v16;
      type metadata accessor for CFURLRef(0);
      v23 = (const __CFURL *)swift_dynamicCastUnknownClassUnconditional();
      v24 = (__CFString *)CFURLCopyScheme(v23);
      v25 = (const __CFURL *)MEMORY[0x23B7C5DAC](1701603686, 0xE400000000000000);
      if (v24)
      {
        v113 = v3;
        v114 = v23;
        v111 = v22;
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
        v6 = v24;
        v26 = static _CFObject.== infix(_:_:)();

        if ((v26 & 1) != 0)
        {
          v122 = v17;
          v123 = v112;
          v124 = v120;
          v125 = v117;
          v126 = v116;
          ProtobufEncoder.archiveOptions.getter(&v121);
          if ((LOBYTE(v121) & 4) != 0)
          {
            static URL._unconditionallyBridgeFromObjectiveC(_:)();
            v80 = (double *)v119;
            ProtobufEncoder.encodeVarint(_:)(0x12uLL);
            v28 = *((_QWORD *)v80 + 1);
            v29 = v80[3];
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v12 = (unint64_t)v113;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
LABEL_119:
              v83 = *(_QWORD *)(*(_QWORD *)&v29 + 16);
              v82 = *(_QWORD *)(*(_QWORD *)&v29 + 24);
              v84 = (uint64_t)v119;
              if (v83 >= v82 >> 1)
              {
                isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v82 > 1), v83 + 1, 1, *(_QWORD **)&v29);
                v84 = (uint64_t)v119;
                v29 = *(double *)&isUniquelyReferenced_nonNull_native;
              }
              *(_QWORD *)(*(_QWORD *)&v29 + 16) = v83 + 1;
              *(_QWORD *)(*(_QWORD *)&v29 + 8 * v83 + 32) = v28;
              *(double *)(v84 + 24) = v29;
              if (__OFADD__(v28, 1))
              {
                __break(1u);
                goto LABEL_188;
              }
              *(_QWORD *)(v84 + 8) = v28 + 1;
              v85 = (__CFString *)v84;
              URL.encode(to:)(v84);
              v6 = (__CFString *)v12;
              v86 = v111;
              info = (unint64_t)v114;
              if (v12)
              {
                (*(void (**)(uint64_t, uint64_t))(data + 8))(v11, v8);

                return;
              }
              v2 = v85;
              ProtobufEncoder.endLengthDelimited()();
              (*(void (**)(uint64_t, uint64_t))(data + 8))(v11, v8);

              data = (unint64_t)v115;
              goto LABEL_22;
            }
          }
          else
          {
            v27 = (double *)v119;
            ProtobufEncoder.encodeVarint(_:)(0xAuLL);
            v28 = *((_QWORD *)v27 + 1);
            v29 = v27[3];
            v30 = swift_isUniquelyReferenced_nonNull_native();
            data = (unint64_t)v113;
            if ((v30 & 1) == 0)
LABEL_184:
              v29 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v29 + 16) + 1, 1, *(_QWORD **)&v29));
            v12 = (unint64_t)v118;
            v31 = (double *)v119;
            info = *(_QWORD *)(*(_QWORD *)&v29 + 16);
            v32 = *(_QWORD *)(*(_QWORD *)&v29 + 24);
            if (info >= v32 >> 1)
            {
              v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), info + 1, 1, *(_QWORD **)&v29);
              v31 = (double *)v119;
              v29 = *(double *)&v110;
            }
            *(_QWORD *)(*(_QWORD *)&v29 + 16) = info + 1;
            *(_QWORD *)(*(_QWORD *)&v29 + 8 * info + 32) = v28;
            v31[3] = v29;
            if (!__OFADD__(v28, 1))
            {
              *((_QWORD *)v31 + 1) = v28 + 1;
              v2 = (__CFString *)v31;
              v33 = (id)v12;
              v34 = v114;
              specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v33, (uint64_t)v2, v34);
              v6 = (__CFString *)data;
              if (data)
              {

                return;
              }

              ProtobufEncoder.endLengthDelimited()();
              data = (unint64_t)v115;
LABEL_23:
              if (CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4D70]))
              {
                objc_opt_self();
                if (swift_dynamicCastObjCClass())
                {
                  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  if (v37)
                    v39 = 0;
                  else
                    v39 = v38 == 0xE000000000000000;
                  if (!v39)
                  {
                    v2 = (__CFString *)v37;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      v2 = (__CFString *)v119;
                      ProtobufEncoder.stringFieldAlways(_:_:)(3);
                      if (v6)
                      {
                        swift_bridgeObjectRelease();
                        swift_unknownObjectRelease();
                        goto LABEL_170;
                      }
                    }
                  }
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease();
                  goto LABEL_59;
                }
                swift_unknownObjectRelease();
              }
              lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
              swift_allocError();
              swift_willThrow();
              goto LABEL_170;
            }
            __break(1u);
          }
          isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v29 + 16) + 1, 1, *(_QWORD **)&v29);
          v29 = *(double *)&isUniquelyReferenced_nonNull_native;
          goto LABEL_119;
        }
        v25 = v114;
        v22 = v111;
      }
      else
      {

      }
    }
    lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
    swift_allocError();
    swift_willThrow();

    return;
  }
  v11 = (uint64_t)v13;
  v118 = (id)v12;
  v14 = (id)CTFontGetTextStyle();
  if (!v14)
  {
    data = (unint64_t)v13;
    Options = CTFontDescriptorGetOptions();
    if (Options)
    {
      v36 = Options;
      v2 = (__CFString *)v119;
      ProtobufEncoder.encodeVarint(_:)(0x20uLL);
      ProtobufEncoder.encodeVarint(_:)(v36);
    }
LABEL_22:
    v12 = (unint64_t)v118;
    goto LABEL_23;
  }
  v12 = (unint64_t)v14;
  data = (unint64_t)v13;
  if ((static String._unconditionallyBridgeFromObjectiveC(_:)() || v15 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(5);
    if (v3)
    {
      swift_bridgeObjectRelease();

      return;
    }
  }
  swift_bridgeObjectRelease();
  info = 0x24BDD1000uLL;
  if (CTFontDescriptorCopyAttribute(v13, (CFStringRef)*MEMORY[0x24BDC4DB0]))
  {
    objc_opt_self();
    v40 = (void *)swift_dynamicCastObjCClass();
    if (v40)
    {
      v41 = objc_msgSend(v40, sel_unsignedIntegerValue);
      if (v41)
      {
        v42 = (Swift::UInt)v41;
        ProtobufEncoder.encodeVarint(_:)(0x30uLL);
        ProtobufEncoder.encodeVarint(_:)(v42);
      }
    }
    swift_unknownObjectRelease();
  }
  if (!CTFontDescriptorCopyAttribute(v13, (CFStringRef)*MEMORY[0x24BDC4DD0]))
    goto LABEL_47;
  objc_opt_self();
  v43 = (void *)swift_dynamicCastObjCClass();
  if (!v43)
  {
    swift_unknownObjectRelease();
LABEL_47:
    v8 = (uint64_t)v3;
    DefaultTextStylePlatform = CTFontDescriptorGetDefaultTextStylePlatform();
    goto LABEL_48;
  }
  v8 = (uint64_t)v3;
  DefaultTextStylePlatform = objc_msgSend(v43, sel_unsignedIntValue);
  swift_unknownObjectRelease();
LABEL_48:
  v45 = DefaultTextStylePlatform;
  v2 = (__CFString *)v119;
  ProtobufEncoder.encodeVarint(_:)(0x80uLL);
  ProtobufEncoder.encodeVarint(_:)(v45);
  v46 = (__CFString *)CTFontDescriptorCopyAttribute((CTFontDescriptorRef)v11, (CFStringRef)*MEMORY[0x24BDC4DD8]);
  if (v46)
  {
    v6 = v46;
    swift_unknownObjectRetain();
    objc_opt_self();
    v29 = COERCE_DOUBLE(swift_dynamicCastObjCClassUnconditional());
    ProtobufEncoder.encodeVarint(_:)(0x42uLL);
    info = v2->info;
    v2 = (__CFString *)v2->length;
    v47 = swift_isUniquelyReferenced_nonNull_native();
    if ((v47 & 1) == 0)
    {
LABEL_177:
      v47 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)(v2->data + 1), 1, v2);
      v2 = (__CFString *)v47;
    }
    data = (unint64_t)v2->data;
    length = v2->length;
    v49 = v119;
    if (data >= length >> 1)
    {
      v47 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(length > 1), data + 1, 1, v2);
      v49 = v119;
      v2 = (__CFString *)v47;
    }
    v2->data = (char *)(data + 1);
    *((_QWORD *)&v2[1].isa + data) = info;
    v49[3] = v2;
    if (__OFADD__(info, 1))
    {
      __break(1u);
      goto LABEL_179;
    }
    v49[1] = (__CFString *)(info + 1);
    v2 = (__CFString *)v49;
    CodableFontTraits.encode(to:)(v49, *(id *)&v29);
    data = v11;
    if (v8)
    {

      swift_unknownObjectRelease();
      return;
    }
    ProtobufEncoder.endLengthDelimited()();

    swift_unknownObjectRelease();
    v6 = 0;
  }
  else
  {

    v6 = (__CFString *)v8;
  }
  v12 = (unint64_t)v118;
LABEL_59:
  Size = CTFontGetSize((CTFontRef)v12);
  if (Size != 0.0)
  {
    v5 = Size;
    v51 = fabs(Size);
    if (v51 >= 65536.0)
      v52 = 57;
    else
      v52 = 61;
    v2 = (__CFString *)v119;
    ProtobufEncoder.encodeVarint(_:)(v52);
    if (v51 >= 65536.0)
    {
      v54 = v2->info;
      v47 = v54 + 8;
      if (!__OFADD__(v54, 8))
      {
        if ((uint64_t)v2->data < v47)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v47) = v5;
        }
        else
        {
          v2->info = v47;
          *(double *)((char *)v2->isa + v54) = v5;
        }
        goto LABEL_71;
      }
      goto LABEL_180;
    }
    v53 = v2->info;
    v47 = v53 + 4;
    if (!__OFADD__(v53, 4))
    {
      *(float *)&v5 = v5;
      if ((uint64_t)v2->data >= v47)
      {
        v2->info = v47;
        *(_DWORD *)((char *)v2->isa + v53) = LODWORD(v5);
        goto LABEL_71;
      }
LABEL_181:
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v47) = LODWORD(v5);
      goto LABEL_71;
    }
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
LABEL_71:
  v55 = CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4D20]);
  if (v55)
  {
    v56 = (uint64_t)v55;
    swift_unknownObjectRetain();
    v2 = (__CFString *)v119;
    specialized ProtobufEncoder.codableField<A>(_:_:)(9, v56);
    if (v6)
    {
      swift_unknownObjectRelease_n();
      goto LABEL_170;
    }
    swift_unknownObjectRelease_n();
  }
  v57 = (__CFString *)CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4C38]);
  v28 = MEMORY[0x24BEE4AD0];
  if (!v57)
    goto LABEL_130;
  v122 = v57;
  type metadata accessor for [Int : CGFloat](0, &lazy cache variable for type metadata for [Int : CGFloat]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_130;
  v29 = v121;
  if (!*(_QWORD *)(*(_QWORD *)&v121 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_130;
  }
  v118 = (id)v12;
  v113 = v6;
  v58 = *(_QWORD *)(*(_QWORD *)&v121 + 64);
  v115 = (CTFontDescriptorRef)data;
  v116 = *(_QWORD *)&v121 + 64;
  v59 = 1 << *(_BYTE *)(*(_QWORD *)&v121 + 32);
  v60 = -1;
  if (v59 < 64)
    v60 = ~(-1 << v59);
  v12 = v60 & v58;
  v117 = (unint64_t)(v59 + 63) >> 6;
  swift_bridgeObjectRetain();
  v61 = 0;
  v6 = (__CFString *)MEMORY[0x24BEE4B00];
  while (1)
  {
    if (v12)
    {
      v62 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v120 = v61;
      v63 = v62 | (v61 << 6);
    }
    else
    {
      v64 = __OFADD__(v61, 1);
      v65 = v61 + 1;
      if (v64)
        goto LABEL_176;
      if (v65 >= v117)
      {
        data = (unint64_t)v115;
        v12 = (unint64_t)v118;
        goto LABEL_127;
      }
      v66 = *(_QWORD *)(v116 + 8 * v65);
      v12 = (unint64_t)v118;
      if (!v66)
      {
        v67 = v65 + 1;
        if (v65 + 1 >= v117)
          goto LABEL_126;
        v66 = *(_QWORD *)(v116 + 8 * v67);
        if (!v66)
        {
          v67 = v65 + 2;
          if (v65 + 2 >= v117)
            goto LABEL_126;
          v66 = *(_QWORD *)(v116 + 8 * v67);
          if (!v66)
          {
            v67 = v65 + 3;
            if (v65 + 3 >= v117)
              goto LABEL_126;
            v66 = *(_QWORD *)(v116 + 8 * v67);
            if (!v66)
            {
              v67 = v65 + 4;
              if (v65 + 4 >= v117)
                goto LABEL_126;
              v66 = *(_QWORD *)(v116 + 8 * v67);
              if (!v66)
              {
                v67 = v65 + 5;
                if (v65 + 5 >= v117)
                {
LABEL_126:
                  data = (unint64_t)v115;
                  goto LABEL_127;
                }
                v66 = *(_QWORD *)(v116 + 8 * v67);
                if (!v66)
                {
                  while (1)
                  {
                    v65 = v67 + 1;
                    if (__OFADD__(v67, 1))
                      break;
                    if (v65 >= v117)
                      goto LABEL_174;
                    v66 = *(_QWORD *)(v116 + 8 * v65);
                    ++v67;
                    if (v66)
                      goto LABEL_99;
                  }
                  __break(1u);
                  goto LABEL_184;
                }
              }
            }
          }
        }
        v65 = v67;
      }
LABEL_99:
      v12 = (v66 - 1) & v66;
      v120 = v65;
      v63 = __clz(__rbit64(v66)) + (v65 << 6);
    }
    v68 = 8 * v63;
    data = *(_QWORD *)&v29;
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)&v29 + 56) + v68);
    v122 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)&v29 + 48) + v68);
    info = dispatch thunk of CustomStringConvertible.description.getter();
    v29 = *(double *)&v69;
    v11 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v6;
    v2 = v6;
    v71 = specialized __RawDictionaryStorage.find<A>(_:)(info, *(uint64_t *)&v29);
    v72 = v6->data;
    v73 = (v70 & 1) == 0;
    v74 = (uint64_t)&v72[v73];
    if (__OFADD__(v72, v73))
      break;
    v8 = v70;
    if (v6->length >= v74)
    {
      if ((v11 & 1) != 0)
      {
        v6 = v122;
        if ((v70 & 1) != 0)
          goto LABEL_81;
      }
      else
      {
        v2 = (__CFString *)&v122;
        specialized _NativeDictionary.copy()();
        v6 = v122;
        if ((v8 & 1) != 0)
          goto LABEL_81;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v74, v11);
      v2 = v122;
      v75 = specialized __RawDictionaryStorage.find<A>(_:)(info, *(uint64_t *)&v29);
      if ((v8 & 1) != (v76 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      v71 = v75;
      v6 = v122;
      if ((v8 & 1) != 0)
      {
LABEL_81:
        *(double *)(v6[1].length + 8 * v71) = v5;
        goto LABEL_82;
      }
    }
    *((_QWORD *)&v6[2].isa + (v71 >> 6)) |= 1 << v71;
    v77 = (unint64_t *)&v6[1].data[16 * v71];
    *v77 = info;
    *((double *)v77 + 1) = v29;
    *(double *)(v6[1].length + 8 * v71) = v5;
    v78 = v6->data;
    v64 = __OFADD__(v78, 1);
    v79 = v78 + 1;
    if (v64)
    {
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    v6->data = v79;
    swift_bridgeObjectRetain();
LABEL_82:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = MEMORY[0x24BEE4AD0];
    v29 = *(double *)&data;
    v61 = v120;
  }
  __break(1u);
LABEL_174:
  data = (unint64_t)v115;
LABEL_127:
  swift_release();
  swift_bridgeObjectRelease();
  v87 = v113;
  specialized ProtobufEncoder.codableField<A>(_:_:)(10, (uint64_t)v6);
  if (v87)
  {
    swift_bridgeObjectRelease();

    return;
  }
  swift_bridgeObjectRelease();
  v6 = 0;
LABEL_130:
  v88 = (__CFString *)CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4E38]);
  if (!v88)
    goto LABEL_137;
  v122 = v88;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_137;
  v5 = v121;
  if (v121 == 0.0)
    goto LABEL_137;
  v89 = v119;
  ProtobufEncoder.encodeVarint(_:)(0x59uLL);
  v90 = v89[1];
  isUniquelyReferenced_nonNull_native = (int64_t)&v90->info;
  if (__OFADD__(v90, 8))
  {
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  if ((uint64_t)v89[2] >= isUniquelyReferenced_nonNull_native)
  {
    v89[1] = (__CFString *)isUniquelyReferenced_nonNull_native;
    v91 = (double *)((char *)v90 + (_QWORD)*v89);
    goto LABEL_136;
  }
LABEL_189:
  v91 = (double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_136:
  *v91 = v5;
LABEL_137:
  v92 = (__CFString *)CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4D00]);
  if (v92)
  {
    v122 = v92;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v93 = *(_QWORD *)&v121;
      if (v121 != 0.0)
      {
        ProtobufEncoder.encodeVarint(_:)(0x60uLL);
        ProtobufEncoder.encodeVarint(_:)((2 * v93) ^ (v93 >> 63));
      }
    }
  }
  v94 = COERCE_DOUBLE(CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4CA8]));
  if (v94 == 0.0 || (v121 = v94, (swift_dynamicCast() & 1) == 0))
  {
LABEL_147:
    v95 = (__CFString *)CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4D50]);
    if (!v95 || (v122 = v95, (swift_dynamicCast() & 1) == 0) || (v96 = v121, v121 == 0.0))
    {
LABEL_154:
      v101 = (__CFString *)CTFontDescriptorCopyAttribute((CTFontDescriptorRef)data, (CFStringRef)*MEMORY[0x24BDC4D60]);
      if (!v101)
        goto LABEL_170;
      v122 = v101;
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_170;
      v102 = v121;
      if (v121 == 0.0)
        goto LABEL_170;
      v103 = fabs(v121);
      if (v103 >= 65536.0)
        v104 = 121;
      else
        v104 = 125;
      v105 = v119;
      ProtobufEncoder.encodeVarint(_:)(v104);
      if (v103 >= 65536.0)
      {
        v108 = v105[1];
        p_info = (int64_t)&v108->info;
        if (!__OFADD__(v108, 8))
        {
          if ((uint64_t)v105[2] < p_info)
          {
            v109 = (double *)ProtobufEncoder.growBufferSlow(to:)(p_info);
          }
          else
          {
            v105[1] = (__CFString *)p_info;
            v109 = (double *)((char *)v108 + (_QWORD)*v105);
          }
          *v109 = v102;
          goto LABEL_170;
        }
      }
      else
      {
        v106 = v105[1];
        p_info = (int64_t)&v106->isa + 4;
        if (!__OFADD__(v106, 4))
        {
          *(float *)&v102 = v102;
          if ((uint64_t)v105[2] >= p_info)
          {
            v105[1] = (__CFString *)p_info;
            *(_DWORD *)((char *)&v106->isa + (_QWORD)*v105) = LODWORD(v102);
            goto LABEL_170;
          }
          goto LABEL_194;
        }
        __break(1u);
      }
      __break(1u);
LABEL_194:
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(p_info) = LODWORD(v102);
      goto LABEL_170;
    }
    v97 = v119;
    ProtobufEncoder.encodeVarint(_:)(0x71uLL);
    v98 = v97[1];
    v99 = (int64_t)&v98->info;
    if (__OFADD__(v98, 8))
    {
      __break(1u);
    }
    else if ((uint64_t)v97[2] >= v99)
    {
      v97[1] = (__CFString *)v99;
      v100 = (double *)((char *)v98 + (_QWORD)*v97);
LABEL_153:
      *v100 = v96;
      goto LABEL_154;
    }
    v100 = (double *)ProtobufEncoder.growBufferSlow(to:)(v99);
    goto LABEL_153;
  }
  if (!v122 && v123 == (__CFString *)0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_147;
  }
  ProtobufEncoder.stringFieldAlways(_:_:)(13);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_147;
LABEL_170:

}

uint64_t specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(void *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_signpost_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  os_signpost_id_t v24;
  uint8_t *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  CC_LONG h4;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t *v43;
  char isUniquelyReferenced_nonNull_native;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for OSSignpostID();
  v47 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v45 - v10;
  v12 = *(_QWORD *)(v2 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)v2;
  *(_QWORD *)&into.state.h4 = v12;
  v48 = v2;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(v2 + 24);
  v13 = ProtobufEncoder.archiveWriter.getter();
  if (v13)
  {
    v14 = v13;
    v46 = v3;
    *(_QWORD *)&c.h0 = a1;
    lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont();
    v45 = a1;
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    v15 = *(_QWORD *)(v14 + 152);
    if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into), (v17 & 1) != 0))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&into);
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v19);
      static OSSignpostID.exclusive.getter();
      v20 = OSSignposter.logHandle.getter();
      v21 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v8, v11, v6);
        v22 = v18;
        v23 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v23 = 134217984;
        *(_QWORD *)&into.state.h0 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v24 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v20, v21, v24, "addAttachment.cacheHit", "index=%{name=index}ld", v23, 0xCu);
        v25 = v23;
        v18 = v22;
        MEMORY[0x23B7C9D54](v25, -1, -1);

        v26 = *(void (**)(char *, uint64_t))(v47 + 8);
        v26(v11, v6);
        v26(v8, v6);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v6);
      }
      if ((v18 & 0x8000000000000000) == 0)
        goto LABEL_13;
    }
    else
    {
      swift_endAccess();
      v27 = outlined destroy of AnyHashable((uint64_t)&into);
      v28 = v46;
      v29 = ((uint64_t (*)(uint64_t))a2)(v27);
      if (v28)
        return swift_release();
      v31 = v29;
      v32 = v30;
      v47 = v14 + 152;
      memset(&c, 0, sizeof(c));
      outlined copy of Data._Representation(v29, v30);
      CC_SHA1_Init(&c);
      into.state = c;
      Data.hash(into:)(&into);
      memset(&c, 0, 20);
      CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
      outlined consume of Data._Representation(v31, v32);
      h4 = c.h4;
      v34 = *(_QWORD *)&c.h0;
      v35 = *(_QWORD *)&c.h2;
      swift_beginAccess();
      v36 = specialized Collection<>.firstIndex(of:)(v34, v35, h4, *(_QWORD *)(v14 + 32));
      if ((v37 & 1) != 0)
      {
        *(_QWORD *)&into.state.h0 = v34;
        *(_QWORD *)&into.state.h2 = v35;
        into.state.h4 = h4;
        LOBYTE(into.state.Nl) = 0;
        outlined copy of Data._Representation(v31, v32);
        v18 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&into, v14, v31, v32);
        outlined consume of Data._Representation(v31, v32);
      }
      else
      {
        v18 = v36;
      }
      outlined consume of Data._Representation(v31, v32);
      v50 = v45;
      v42 = v45;
      AnyHashable.init<A>(_:)();
      v43 = (uint64_t *)v47;
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49 = *v43;
      *v43 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
      *v43 = v49;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&into);
      swift_endAccess();
      if ((v18 & 0x8000000000000000) == 0)
      {
LABEL_13:
        ProtobufEncoder.encodeVarint(_:)(8uLL);
        ProtobufEncoder.encodeVarint(_:)(v18);
        return swift_release();
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = a2();
  if (!v3)
  {
    v40 = result;
    v41 = v39;
    ProtobufEncoder.dataField(_:_:)(2, result, v39);
    return outlined consume of Data._Representation(v40, v41);
  }
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodablePlatformFont(__CFString **a1)
{
  void **v1;

  CodablePlatformFont.encode(to:)(a1, *v1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodablePlatformFont@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized CodablePlatformFont.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t protocol witness for Decodable.init(from:) in conformance CodablePlatformFont@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized CodableByProtobuf.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodablePlatformFont(_QWORD *a1)
{
  uint64_t *v1;

  return specialized CodableByProtobuf.encode(to:)(a1, *v1);
}

void CodableCGFont.encode(to:)(uint64_t a1, CGFontRef graphicsFont)
{
  uint64_t v2;
  CTFontRef v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  const __CTFont *v10;

  v4 = CTFontCreateWithGraphicsFont(graphicsFont, 1.0, 0, 0);
  ProtobufEncoder.encodeVarint(_:)(0x22uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  *(_QWORD *)(a1 + 24) = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v5 + 1;
    MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
    v10 = v4;
    swift_bridgeObjectRetain();
    specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v10, closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)specialized partial apply);

    if (v2)
    {

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      ProtobufEncoder.endLengthDelimited()();

    }
  }
}

void CodableFontTraits.encode(to:)(_QWORD *a1, id a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  int v8;
  int v9;
  uint64_t v10;
  int64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  int64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  int64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  int64_t v26;
  _DWORD *v27;
  id v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[24];
  uint64_t v33;

  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x24BDC4DC8]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  v5 = MEMORY[0x24BEE4AD8];
  v6 = MEMORY[0x24BEE4AD8] + 8;
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7 = objc_msgSend(v28, sel_unsignedIntegerValue);
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)((Swift::UInt)v7);

    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v6, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x24BDC4E80]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_18;
    objc_msgSend(v28, sel_floatValue);
    v9 = v8;
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v10 = a1[1];
    v11 = v10 + 4;
    if (__OFADD__(v10, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v11)
    {
      a1[1] = v11;
      v12 = (_DWORD *)(*a1 + v10);
LABEL_16:
      *v12 = v9;

      goto LABEL_18;
    }
    v12 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v11);
    goto LABEL_16;
  }
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_18:
  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x24BDC4ED0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_28;
    objc_msgSend(v28, sel_floatValue);
    v14 = v13;
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v15 = a1[1];
    v16 = v15 + 4;
    if (__OFADD__(v15, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v16)
    {
      a1[1] = v16;
      v17 = (_DWORD *)(*a1 + v15);
LABEL_26:
      *v17 = v14;

      goto LABEL_28;
    }
    v17 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v16);
    goto LABEL_26;
  }
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_28:
  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x24BDC4DB8]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_38;
    objc_msgSend(v28, sel_floatValue);
    v19 = v18;
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    v20 = a1[1];
    v21 = v20 + 4;
    if (__OFADD__(v20, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v21)
    {
      a1[1] = v21;
      v22 = (_DWORD *)(*a1 + v20);
LABEL_36:
      *v22 = v19;

      goto LABEL_38;
    }
    v22 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v21);
    goto LABEL_36;
  }
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_38:
  if (!*MEMORY[0x24BDC4E28])
  {
    __break(1u);
    goto LABEL_72;
  }
  if (objc_msgSend(a2, sel_objectForKey_))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v33)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (!v28 && v29 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        ProtobufEncoder.stringFieldAlways(_:_:)(5);
        swift_bridgeObjectRelease();
        if (v2)
          return;
      }
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
  if (!*MEMORY[0x24BDC4D40])
  {
LABEL_72:
    __break(1u);
    return;
  }
  if (objc_msgSend(a2, sel_objectForKey_))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v28, sel_floatValue);
      v24 = v23;
      ProtobufEncoder.encodeVarint(_:)(0x35uLL);
      v25 = a1[1];
      v26 = v25 + 4;
      if (__OFADD__(v25, 4))
      {
        __break(1u);
      }
      else if (a1[2] >= v26)
      {
        a1[1] = v26;
        v27 = (_DWORD *)(*a1 + v25);
LABEL_57:
        *v27 = v24;

        return;
      }
      v27 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v26);
      goto LABEL_57;
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
}

uint64_t one-time initialization function for preferredBundleLanguageKey(uint64_t a1)
{
  return one-time initialization function for preferredBundleLanguageKey(a1, static ArchivedViewCore.preferredBundleLanguageKey);
}

uint64_t static ArchivedViewCore.preferredBundleLanguageKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for preferredBundleLanguageKey, (uint64_t)static ArchivedViewCore.preferredBundleLanguageKey, a1);
}

uint64_t one-time initialization function for preferredCompositionLanguage(uint64_t a1)
{
  return one-time initialization function for preferredBundleLanguageKey(a1, static ArchivedViewCore.preferredCompositionLanguage);
}

uint64_t one-time initialization function for preferredBundleLanguageKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for CodingUserInfoKey?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE2CC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  v8 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  __break(1u);
  return result;
}

uint64_t static ArchivedViewCore.preferredCompositionLanguage.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for preferredCompositionLanguage, (uint64_t)static ArchivedViewCore.preferredCompositionLanguage, a1);
}

uint64_t ProtobufEncoder.preferredCompositionLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  _BYTE v10[16];
  __int128 v11;
  __int128 v12;

  v1 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(_QWORD *)(v0 + 32);
  if (one-time initialization token for preferredCompositionLanguage != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredCompositionLanguage);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(_QWORD *)(v5 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  if (*((_QWORD *)&v12 + 1))
  {
    type metadata accessor for CTCompositionLanguage(0);
    result = swift_dynamicCast();
    if ((_DWORD)result)
      return v10[15];
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    return 0;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodablePlatformFont()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t)&protocol conformance descriptor for CTFontRef);
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CodablePlatformFont()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t)&protocol conformance descriptor for CTFontRef);
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodablePlatformFont()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t)&protocol conformance descriptor for CTFontRef);
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CodablePlatformFont()
{
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t)&protocol conformance descriptor for CTFontRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t specialized ObjectCache.subscript.getter(float a1, float a2, float a3, float a4)
{
  return specialized ObjectCache.subscript.getter((uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), a1, a2, a3, a4);
}

{
  return specialized ObjectCache.subscript.getter((uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), a1, a2, a3, a4);
}

uint64_t specialized ObjectCache.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  char v6;
  Swift::Int v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  _OWORD v32[2];

  v2 = v1;
  v4 = *(_OWORD *)(a1 + 16);
  v27 = *(unsigned __int8 *)(a1 + 16);
  v26 = *(unsigned __int8 *)(a1 + 17);
  v24 = *(_OWORD *)(a1 + 24);
  v25 = *(_OWORD *)a1;
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 41);
  v31 = *(_OWORD *)a1;
  v32[0] = v4;
  *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)(a1 + 26);
  v7 = Font.Resolved.hashValue.getter();
  v8 = 4 * (v7 & 7);
  v30 = 0;
  v29 = 0x80000000;
  v9 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain_n();
  os_unfair_lock_lock(v9 + 4);
  v10 = (id)specialized closure #1 in ObjectCache.subscript.getter((uint64_t)&v9[6], v8, v7, a1, &v29, &v30);
  os_unfair_lock_unlock(v9 + 4);
  swift_release_n();
  if (v10)
    return (uint64_t)v10;
  (*(void (**)(void **__return_ptr, __int128 *))(v2 + 16))(&v28, &v31);
  v11 = *(_QWORD *)(v2 + 32);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  v12 = v8 + v30;
  if (__OFADD__(v8, v30))
  {
    __break(1u);
  }
  else
  {
    v13 = v28;
    LODWORD(v8) = *(_DWORD *)(v11 + 32) + 1;
    *(_DWORD *)(v11 + 32) = v8;
    v2 = *(_QWORD *)(v11 + 24);
    outlined retain of Font.Resolved(a1);
    v10 = v13;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v11 + 24) = v2;
    if ((result & 1) != 0)
      goto LABEL_4;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v2);
  v2 = result;
  *(_QWORD *)(v11 + 24) = result;
LABEL_4:
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(_QWORD *)(v2 + 16))
  {
    v15 = v2 + 72 * v12;
    v16 = *(_QWORD *)(v15 + 32);
    v17 = *(_QWORD *)(v15 + 40);
    v18 = *(_QWORD *)(v15 + 48);
    v19 = *(_QWORD *)(v15 + 56);
    v20 = *(_QWORD *)(v15 + 64);
    v21 = *(_QWORD *)(v15 + 72);
    v22 = *(_QWORD *)(v15 + 80);
    v23 = *(void **)(v15 + 88);
    *(_OWORD *)(v15 + 32) = v25;
    *(_QWORD *)(v15 + 48) = v27 | (v26 << 8);
    *(_OWORD *)(v15 + 56) = v24;
    *(_QWORD *)(v15 + 72) = v5 | ((unint64_t)(v6 & 1) << 8);
    *(_QWORD *)(v15 + 80) = v7;
    *(_QWORD *)(v15 + 88) = v10;
    *(_DWORD *)(v15 + 96) = v8;
    outlined consume of (key: Font.Resolved, hash: Int, value: CTFontRef)?(v16, v17, v18, v19, v20, v21, v22, v23);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
    swift_release_n();
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized ObjectCache.subscript.getter(uint64_t (*a1)(uint64_t), float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v24;
  int v25;
  BOOL v26;
  id v27;
  char isUniquelyReferenced_nonNull_native;
  BOOL v29;
  void *v30;
  uint64_t result;
  int8x16_t v32;
  int8x16_t *v33;
  void *v34;
  uint64_t v35;
  void *v41;
  _DWORD v42[6];

  v8 = v5;
  *(float *)v42 = a2;
  *(float *)&v42[1] = a3;
  *(float *)&v42[2] = a4;
  *(float *)&v42[3] = a5;
  Hasher.init(_seed:)();
  Color.Resolved.hash(into:)(a2, a3, a4, a5);
  v9 = Hasher._finalize()();
  v10 = 4 * (v9 & 7);
  v11 = *(_QWORD *)(v5 + 32);
  v12 = v11 + 16;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(v11 + 24);
  v16 = 160 * (v9 & 7) + 64;
  v17 = 0x80000000;
  while (1)
  {
    v18 = v10 + v13;
    if ((uint64_t)(v10 + v13) < 0)
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      v7 = a1(v7);
LABEL_33:
      if (v13 < *(_QWORD *)(v7 + 16))
      {
        *(_DWORD *)(v7 + v16) = v8;
        *(_QWORD *)(v11 + 24) = v7;
        v8 = v35;
        goto LABEL_35;
      }
      __break(1u);
      goto LABEL_49;
    }
    if (v18 >= *(_QWORD *)(v15 + 16))
      goto LABEL_44;
    v19 = v15 + v16;
    v6 = *(id *)(v15 + v16 - 8);
    if (!v6)
      break;
    v20 = *(_QWORD *)(v19 - 16) == v9 && *(float *)(v19 - 32) == a2;
    if (v20 && *(float *)(v19 - 28) == a3 && *(float *)(v19 - 24) == a4 && *(float *)(v19 - 20) == a5)
    {
      v35 = v8;
      v8 = (*(_DWORD *)(v11 + 32) + 1);
      *(_DWORD *)(v11 + 32) = v8;
      v7 = *(_QWORD *)(v11 + 24);
      v27 = v6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v11 + 24) = v7;
      v13 += v10;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_33;
      goto LABEL_47;
    }
    v24 = *(_QWORD *)(v11 + 24);
    if (v18 >= *(_QWORD *)(v24 + 16))
      goto LABEL_46;
    v25 = *(_DWORD *)(v11 + 32) - *(_DWORD *)(v24 + v16);
    v26 = v17 < v25;
    if (v17 <= v25)
      v17 = *(_DWORD *)(v11 + 32) - *(_DWORD *)(v24 + v16);
    if (v26)
      v14 = v13;
    if (v13 == 3)
    {
LABEL_31:
      v6 = 0;
      goto LABEL_35;
    }
LABEL_5:
    ++v13;
    v16 += 40;
    if (__OFADD__(v10, v13))
      goto LABEL_45;
  }
  v20 = v17 == 0x7FFFFFFF;
  v17 = 0x7FFFFFFF;
  if (v20)
  {
    if (v13 == 3)
      goto LABEL_31;
    goto LABEL_5;
  }
  if (v13 != 3)
  {
    v14 = v13;
    goto LABEL_5;
  }
  v6 = 0;
  v14 = 3;
LABEL_35:
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
  swift_release_n();
  if (v6)
    return (uint64_t)v6;
  (*(void (**)(void **__return_ptr, _DWORD *))(v8 + 16))(&v41, v42);
  v11 = *(_QWORD *)(v8 + 32);
  v8 = v11 + 16;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  v29 = __OFADD__(v10, v14);
  v14 += v10;
  if (v29)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v30 = v41;
  LODWORD(v7) = *(_DWORD *)(v11 + 32) + 1;
  *(_DWORD *)(v11 + 32) = v7;
  v12 = *(_QWORD *)(v11 + 24);
  v6 = v30;
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v11 + 24) = v12;
  if ((result & 1) != 0)
  {
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_39;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_50:
  result = a1(v12);
  v12 = result;
  *(_QWORD *)(v11 + 24) = result;
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_51;
LABEL_39:
  if (v14 < *(_QWORD *)(v12 + 16))
  {
    v32.i64[0] = LODWORD(a2);
    v32.i64[1] = LODWORD(a4);
    v33 = (int8x16_t *)(v12 + 40 * v14);
    v34 = (void *)v33[3].i64[1];
    v33[2] = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(a5), LODWORD(a3)), 0x20uLL), v32);
    v33[3].i64[0] = v9;
    v33[3].i64[1] = (uint64_t)v6;
    v33[4].i32[0] = v7;

    os_unfair_lock_unlock((os_unfair_lock_t)v8);
    swift_release_n();
    return (uint64_t)v6;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [ResolvableTextSegmentAttribute.Value](0);
  lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableTextSegmentAttribute.Value] and conformance <A> [A], (uint64_t (*)(uint64_t))type metadata accessor for [ResolvableTextSegmentAttribute.Value], lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  v6 = v13;
  v7 = *(_QWORD *)(v13 + 16);
  v8 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (v7)
  {
    outlined init with copy of TypesettingLanguage(v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), (uint64_t)v5, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v10, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v5, a1, type metadata accessor for ResolvableTextSegmentAttribute.Value);
}

{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>](0);
  lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>] and conformance <A> [A], (uint64_t (*)(uint64_t))type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>], lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting> and conformance CodableAttributedString.Range.DecodingWrapper<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    outlined init with copy of TypesettingLanguage(v5 + 32, (uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
  }
  else
  {
    v5 = 0uLL;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)&v6[8] = xmmword_235260EF0;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v6[8] == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  result = swift_release();
  v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t)&protocol witness table for ResolvableProgress);
  }
  else
  {
    v5 = 0uLL;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)&v6[8] = xmmword_235260EF0;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v6[8] == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  result = swift_release();
  v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableTimer, (uint64_t)&protocol witness table for ResolvableTimer);
  }
  else
  {
    v5 = 0uLL;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)&v6[8] = xmmword_235260EF0;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v6[8] == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  result = swift_release();
  v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol witness table for ResolvableCurrentDate);
  }
  else
  {
    v5 = 0uLL;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)&v6[8] = xmmword_235260EF0;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v6[8] == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  result = swift_release();
  v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate, (uint64_t)&protocol witness table for ResolvableAbsoluteDate);
  }
  else
  {
    v5 = 0uLL;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)&v6[8] = xmmword_235260EF0;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v6[8] == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  result = swift_release();
  v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t)&protocol witness table for ResolvableDateInterval);
  }
  else
  {
    v5 = 0uLL;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)&v6[8] = xmmword_235260EF0;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v6[8] == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  result = swift_release();
  v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v6[16];
  return result;
}

uint64_t specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [JSONCodable<[String : CGFloat]>](0);
  lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [JSONCodable<[String : CGFloat]>] and conformance <A> [A], (uint64_t (*)(uint64_t))type metadata accessor for [JSONCodable<[String : CGFloat]>], lazy protocol witness table accessor for type JSONCodable<[String : CGFloat]> and conformance JSONCodable<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1)
    return swift_release();
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  v4 = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(__CFString *, _QWORD);
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for Data.Deallocator();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = MEMORY[0x24BEE4AF8];
  v20 = a1;
  swift_bridgeObjectRetain();
  CodablePlatformFont.encode(to:)(&v16, a2);
  v9 = v16;
  if (v2)
  {
    free(v16);
    v10 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v16)
    {
      v11 = v17;
      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCDB90], v5);
      Data.Deallocator._deallocator.getter();
      if (v11)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_retain();
        v12 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        v10 = specialized Data._Representation.init(_:count:)(v12, v11);
        swift_release();
      }
      else
      {
        v13 = (void (*)(__CFString *, _QWORD))Data.Deallocator._deallocator.getter();
        v13(v9, 0);
        swift_release();
        swift_release();
        v10 = 0;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      v10 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t specialized ProtobufDecoder.decodeMessage<A>()@<X0>(unint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    ResolvedShadowStyle.init(from:)(v1, a1);
    v5 = *(_QWORD **)(v1 + 40);
    if (v5[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v6 = v5[2];
        if (v6)
        {
LABEL_5:
          v7 = v6 - 1;
          v8 = v5[v7 + 4];
          v5[2] = v7;
          *(_QWORD *)(v1 + 40) = v5;
          *(_QWORD *)(v1 + 16) = v8;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (_QWORD *)result;
    v6 = *(_QWORD *)(result + 16);
    if (v6)
      goto LABEL_5;
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized ProtobufDecoder.decodeMessage<A>()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = ProtobufDecoder.beginMessage()();
  if (!v1)
  {
    specialized Color.Resolved.init(from:)(v0);
    v3 = (_QWORD *)v0[5];
    if (v3[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v4 = v3[2];
        if (v4)
        {
LABEL_7:
          v5 = v4 - 1;
          v6 = v3[v5 + 4];
          v3[2] = v5;
          v0[5] = v3;
          v0[2] = v6;
          return result;
        }
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_7;
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t specialized ProtobufDecoder.decodeMessage<A>()@<X0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[80];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    *(_DWORD *)v12 = 1065353216;
    *(_OWORD *)&v12[4] = 0uLL;
    *(_QWORD *)&v12[20] = 0x3F80000000000000;
    *(_OWORD *)&v12[28] = 0uLL;
    *(_OWORD *)&v12[44] = 0x3F80000000000000uLL;
    *(_QWORD *)&v12[60] = 0;
    *(_DWORD *)&v12[68] = 0;
    *(_QWORD *)&v12[72] = 1065353216;
    closure #1 in _ColorMatrix.init(from:)((unint64_t)v12, v1, &v11);
    v5 = *(_OWORD *)&v12[48];
    a1[2] = *(_OWORD *)&v12[32];
    a1[3] = v5;
    a1[4] = *(_OWORD *)&v12[64];
    v6 = *(_OWORD *)&v12[16];
    *a1 = *(_OWORD *)v12;
    a1[1] = v6;
    v7 = (_QWORD *)v1[5];
    if (v7[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v8 = v7[2];
        if (v8)
        {
LABEL_5:
          v9 = v8 - 1;
          v10 = v7[v9 + 4];
          v7[2] = v9;
          v1[5] = v7;
          v1[2] = v10;
          return result;
        }
LABEL_9:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v7 = (_QWORD *)result;
    v8 = *(_QWORD *)(result + 16);
    if (v8)
      goto LABEL_5;
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized ProtobufDecoder.decodeMessage<A>()@<X0>(double *a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    _Rotation3DEffect.Data.init(from:)(v1, a1);
    v5 = *(_QWORD **)(v1 + 40);
    if (v5[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v6 = v5[2];
        if (v6)
        {
LABEL_5:
          v7 = v6 - 1;
          v8 = v5[v7 + 4];
          v5[2] = v7;
          *(_QWORD *)(v1 + 40) = v5;
          *(_QWORD *)(v1 + 16) = v8;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (_QWORD *)result;
    v6 = *(_QWORD *)(result + 16);
    if (v6)
      goto LABEL_5;
    goto LABEL_9;
  }
  return result;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    _RotationEffect.Data.init(from:)(v1, a1);
    v5 = *(_QWORD **)(v1 + 40);
    if (v5[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v6 = v5[2];
        if (v6)
        {
LABEL_5:
          v7 = v6 - 1;
          v8 = v5[v7 + 4];
          v5[2] = v7;
          *(_QWORD *)(v1 + 40) = v5;
          *(_QWORD *)(v1 + 16) = v8;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (_QWORD *)result;
    v6 = *(_QWORD *)(result + 16);
    if (v6)
      goto LABEL_5;
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized closure #1 in ObjectCache.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _QWORD *a6)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t result;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  int v39;
  int *v41;
  uint64_t v42;
  _QWORD *v44;
  void *v45;

  v7 = a3;
  v8 = 0;
  v9 = *(_QWORD **)a1;
  v10 = *(_QWORD *)a1 + 72 * a2;
  v11 = -288;
  v41 = a5;
  v44 = *(_QWORD **)a1;
  v42 = a2;
  v34 = v10;
  while ((a2 & 0x8000000000000000) == 0)
  {
    v12 = a2 + v8;
    if ((unint64_t)(a2 + v8) >= v9[2])
      goto LABEL_32;
    v13 = v10 + v11;
    v14 = *(void **)(v10 + v11 + 320);
    if (!v14)
    {
      v24 = 0x7FFFFFFF;
      if (*a5 == 0x7FFFFFFF)
        goto LABEL_3;
LABEL_2:
      *a6 = v8;
      *a5 = v24;
      goto LABEL_3;
    }
    v15 = *(_QWORD *)(v13 + 328);
    v16 = *(_QWORD *)(v13 + 336);
    v17 = *(_QWORD *)(v13 + 344);
    v18 = *(_QWORD *)(v13 + 352);
    v19 = *(_QWORD *)(v13 + 360);
    v20 = *(_QWORD *)(v13 + 368);
    v6 = *(id *)(v13 + 376);
    v45 = v6;
    if (v20 != v7)
    {
      outlined copy of (key: Font.Resolved, hash: Int, value: CTFontRef)?(v14, v15, v16, v17, v18, v19, v20, v6);
LABEL_17:
      v9 = v44;
      goto LABEL_19;
    }
    v31 = *(unsigned __int8 *)(v13 + 361);
    v32 = *(unsigned __int8 *)(v13 + 360);
    v37 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96);
    v38 = *(_QWORD *)a4;
    v33 = *(_QWORD *)(v13 + 344);
    v21 = *(_QWORD *)(v13 + 328);
    outlined copy of (key: Font.Resolved, hash: Int, value: CTFontRef)?(v14, v15, v16, v17, v18, v19, v7, v6);
    swift_retain();
    swift_bridgeObjectRetain();
    v6 = v6;
    outlined retain of Font.Resolved(a4);
    if ((v37(v38) & 1) != 0 && (specialized static Array<A>.== infix(_:_:)(v21, *(_QWORD *)(a4 + 8)) & 1) != 0)
    {
      v10 = v34;
      if (*(unsigned __int8 *)(a4 + 16) != v16)
        goto LABEL_28;
      v22 = *(unsigned __int8 *)(a4 + 17);
      v23 = *(_QWORD *)(a4 + 24);
      if ((v16 & 0xFF00) == 0x200)
      {
        if (v22 != 2)
          goto LABEL_28;
LABEL_24:
        v26 = *(unsigned __int8 *)(a4 + 40);
        v39 = *(unsigned __int8 *)(a4 + 41);
        outlined release of Font.Resolved(a4);
        if (v23 == v33 && v32 == v26 && ((v31 ^ v39) & 1) == 0)
          goto LABEL_34;
      }
      else
      {
        if (v22 != 2 && ((v16 >> 8) & 1) == (v22 & 1))
          goto LABEL_24;
LABEL_28:
        outlined release of Font.Resolved(a4);
      }

      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_17;
    }
    outlined release of Font.Resolved(a4);

    swift_bridgeObjectRelease();
    swift_release();
    v9 = v44;
    v10 = v34;
LABEL_19:
    if (v12 >= v9[2])
      goto LABEL_33;
    v6 = (id)*(unsigned int *)(a1 + 8);
    v25 = *(_DWORD *)(v13 + 384);

    swift_bridgeObjectRelease();
    swift_release();
    v24 = (_DWORD)v6 - v25;
    a5 = v41;
    a2 = v42;
    v7 = a3;
    if (*v41 < (int)v6 - v25)
      goto LABEL_2;
LABEL_3:
    ++v8;
    v11 += 72;
    if (!v11)
      return 0;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:

  swift_bridgeObjectRelease();
  swift_release();
  v28 = v44;
  v29 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v29;
  result = swift_isUniquelyReferenced_nonNull_native();
  v30 = v42;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    v30 = v42;
    v28 = (_QWORD *)result;
  }
  if ((unint64_t)(v42 + v8) >= v28[2])
  {
    __break(1u);
  }
  else
  {
    LODWORD(v28[9 * v30 + 48 + (unint64_t)v11 / 8]) = v29;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)a1 = v28;
    return (uint64_t)v45;
  }
  return result;
}

uint64_t sub_234B30EF8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  uint64_t v4;
  NSMutableAttributedString v5;

  v5.super.super.isa = *(Class *)(v4 + 16);
  return closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)(a1, a2, a3, a4, v5);
}

uint64_t sub_234B30F24()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_234B30F4C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CodableAttributedString.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in CodableAttributedString.encode(to:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_234B30F64()
{
  return swift_deallocObject();
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyTrackedValue>, (void (*)(uint64_t))type metadata accessor for AnyTrackedValue);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768]);
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<StackLayout.Child>, (uint64_t)&type metadata for StackLayout.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 120);
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, type metadata accessor for CGPoint);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line);
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TextRenderLayer.SegmentLayer>, (uint64_t)&type metadata for TextRenderLayer.SegmentLayer);
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 72);
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TextSizeCache.Entry>, (uint64_t)&type metadata for TextSizeCache.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 88);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutProxyAttributes>, (uint64_t)&type metadata for LayoutProxyAttributes);
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = a1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  return v4;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = outlined init with take of NamedImage.Cache.WeakCatalog(a3, a4[7] + 8 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of LocalizedStringKey.FormatArgument(a3, a4[7] + 8 * a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<AnyLocationBase>);
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 40 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a4[7] + result) = a3 & 1;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3 & 1;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, int a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = a3;
  *(_DWORD *)(a5[7] + 4 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = a6[7] + 24 * result;
  *(_QWORD *)v6 = a3;
  *(_QWORD *)(v6 + 8) = a4;
  *(_BYTE *)(v6 + 16) = a5 & 1;
  *(_DWORD *)(v6 + 20) = HIDWORD(a5);
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 12 * result;
  *(_QWORD *)v7 = a4;
  *(_DWORD *)(v7 + 8) = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_DWORD *)(v6 + 16) = a4;
  *(_BYTE *)(v6 + 20) = BYTE4(a4);
  *(_BYTE *)(v6 + 21) = BYTE5(a4) & 1;
  *(_DWORD *)(a6[7] + 4 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 40 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 56 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = a4[7] + 120 * result;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v6;
  *(_BYTE *)(v4 + 112) = *(_BYTE *)(a3 + 112);
  v7 = *(_OWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 96) = v7;
  *(_OWORD *)(v4 + 64) = v8;
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_DWORD *)(v5 + 8) = a3;
  *(_BYTE *)(v5 + 12) = BYTE4(a3);
  *(_BYTE *)(v5 + 13) = BYTE5(a3);
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 10) = BYTE2(a3);
  *(_WORD *)(v5 + 8) = a3;
  *(_BYTE *)(v5 + 11) = BYTE3(a3);
  *(_BYTE *)(v5 + 12) = BYTE4(a3);
  *(_BYTE *)(v5 + 13) = BYTE5(a3) & 1;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a6[6] + 4 * result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_QWORD *)v6 = a2;
  *(_BYTE *)(v6 + 8) = a3 & 1;
  *(_BYTE *)(v6 + 9) = BYTE1(a3) & 1;
  *(_BYTE *)(v6 + 10) = BYTE2(a3) & 1;
  *(_QWORD *)(v6 + 16) = a4;
  v7 = a6[7] + 20 * result;
  *(_OWORD *)v7 = *(_OWORD *)a5;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(a5 + 16);
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = a7[6] + 32 * result;
  *(_BYTE *)v7 = a2 & 1;
  *(_BYTE *)(v7 + 1) = BYTE1(a2) & 1;
  *(_BYTE *)(v7 + 2) = BYTE2(a2) & 1;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = a5;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, __int16 a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_WORD *)(a3[6] + 2 * result) = a2;
  *(double *)(a3[7] + 8 * result) = a4;
  v4 = a3[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a3[2] = v6;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for NamedImage.VectorKey(0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for NamedImage.VectorKey);
  v11 = (_OWORD *)(a4[7] + 80 * a1);
  v12 = a3[4];
  v13 = a3[2];
  v11[3] = a3[3];
  v11[4] = v12;
  v14 = a3[1];
  *v11 = *a3;
  v11[1] = v14;
  v11[2] = v13;
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for NamedImage.BitmapKey(0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for NamedImage.BitmapKey);
  v11 = (_OWORD *)(a4[7] + 96 * a1);
  v12 = a3[1];
  *v11 = *a3;
  v11[1] = v12;
  *(_OWORD *)((char *)v11 + 73) = *(_OWORD *)((char *)a3 + 73);
  v13 = a3[4];
  v14 = a3[2];
  v11[3] = a3[3];
  v11[4] = v13;
  v11[2] = v14;
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v11 = (_OWORD *)(a4[7] + 48 * a1);
  *(_OWORD *)((char *)v11 + 25) = *(_OWORD *)((char *)a3 + 25);
  v12 = a3[1];
  *v11 = *a3;
  v11[1] = v12;
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2 & 1;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a3[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a3[6] + v4) = a2;
  *(double *)(a3[7] + v4) = a4;
  v5 = a3[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a3[2] = v7;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a3[(result >> 6) + 8] |= 1 << result;
  *(double *)(a3[6] + 8 * result) = a4;
  v4 = a3[7] + 56 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 48);
  v6 = a3[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a3[2] = v8;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = a5[6] + 16 * a1;
  *(_QWORD *)v6 = a2;
  *(_BYTE *)(v6 + 8) = a3;
  result = outlined init with take of Spacing.Value(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_DWORD *)(v5 + 8) = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of ScrollStateRequest(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of ScrollStateRequest(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, _QWORD *a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v7 = a6[6] + 32 * result;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_WORD *)(v7 + 16) = a4;
  *(double *)(v7 + 24) = a7;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 4 * result;
  *(_DWORD *)(a4[6] + v4) = a2;
  *(_DWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for AccessibilityCustomAttributes.Value();
  result = outlined init with take of LocalizedStringKey.FormatArgument(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = a7[6] + 32 * result;
  *(_QWORD *)v7 = a2;
  *(_BYTE *)(v7 + 8) = a3 & 1;
  *(_QWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 24) = a5 & 1;
  v8 = a7[7] + 56 * result;
  v9 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a6;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a6 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a6 + 48);
  v10 = a7[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a7[2] = v12;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = a5(a3, a4[7] + 40 * a1);
  v7 = a4[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a4[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 20 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4 & 1;
  v7 = a6[7] + 120 * result;
  v8 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a5;
  *(_OWORD *)(v7 + 16) = v8;
  v9 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v7 + 48) = v9;
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(a5 + 112);
  v10 = *(_OWORD *)(a5 + 96);
  v11 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 64) = v11;
  v12 = a6[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a6[2] = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 20 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4 & 1;
  v7 = a6[7] + 56 * result;
  v8 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a5;
  *(_OWORD *)(v7 + 16) = v8;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(a5 + 48);
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a4[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 16 * result;
  *(_QWORD *)v7 = a4;
  *(_BYTE *)(v7 + 8) = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = a6[7] + 20 * result;
  *(_QWORD *)v6 = a3;
  *(_QWORD *)(v6 + 8) = a4;
  *(_BYTE *)(v6 + 16) = a5 & 1;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  v4 = (_OWORD *)(a4[7] + 80 * result);
  v5 = a3[4];
  v6 = a3[2];
  v4[3] = a3[3];
  v4[4] = v5;
  v7 = a3[1];
  *v4 = *a3;
  v4[1] = v7;
  v4[2] = v6;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, double a5, double a6)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  v6 = a4[6] + 40 * result;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + 32);
  v8 = a4[7] + 24 * result;
  *(_QWORD *)v8 = a3;
  *(double *)(v8 + 8) = a5;
  *(double *)(v8 + 16) = a6;
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, _QWORD *a3, double a4, double a5)
{
  double *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a3[6] + result) = a2;
  v5 = (double *)(a3[7] + 16 * result);
  *v5 = a4;
  v5[1] = a5;
  v6 = a3[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a3[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = (_QWORD *)(a7[7] + 24 * result);
  *v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 48 * result);
  v7 = a4[1];
  *v6 = *a4;
  v6[1] = v7;
  v6[2] = a4[2];
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, _QWORD *a6, double a7, double a8)
{
  uint64_t v8;
  double *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a6[(result >> 6) + 8] |= 1 << result;
  v8 = a6[6] + 32 * result;
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = a3 & 1;
  *(_QWORD *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 24) = a5 & 1;
  v9 = (double *)(a6[7] + 16 * result);
  *v9 = a7;
  v9[1] = a8;
  v10 = a6[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a6[2] = v12;
  return result;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x23B7C5EC0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x23B7C5EC0);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x23B7C5EC0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_234B32C48()
{
  return swift_deallocObject();
}

void type metadata accessor for ResolvableTextSegmentAttribute.Value?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for (key: NSAttributedStringKey, value: Any)?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: NSAttributedStringKey, value: Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t specialized static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  _BYTE v79[24];
  _BYTE v80[40];
  _QWORD v81[3];
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v89 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResolvableStringAttribute?(a1, (uint64_t)v81, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  v16 = v82;
  if (!v82)
  {
    outlined destroy of AnyTrackedValue?((uint64_t)v81, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    return outlined destroy of AnyTrackedValue?((uint64_t)&v84, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  }
  v78 = a2;
  v76 = v10;
  v17 = v83;
  __swift_project_boxed_opaque_existential_1(v81, v82);
  v18 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)v80 = *(_OWORD *)a3;
  *(_QWORD *)&v80[16] = v18;
  *(_OWORD *)&v80[24] = *(_OWORD *)(a3 + 24);
  ProtobufEncoder.archiveOptions.getter(v79);
  v80[0] = v79[1];
  (*(void (**)(__int128 *__return_ptr, _BYTE *, uint64_t, uint64_t))(v17 + 32))(&v84, v80, v16, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  if (!*((_QWORD *)&v85 + 1))
    return outlined destroy of AnyTrackedValue?((uint64_t)&v84, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  outlined init with take of ScrollStateRequest(&v84, (uint64_t)v87);
  __swift_project_boxed_opaque_existential_1(v87, v88);
  swift_getDynamicType();
  v19 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
  v20 = one-time initialization token for attribute;
  v75 = v19;
  v21 = v19;
  if (v20 != -1)
    swift_once();
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v77 = v21;
  if (v22 == v25 && v24 == v26)
  {
    v27 = 16;
LABEL_8:
    v28 = v78;
LABEL_9:

    swift_bridgeObjectRelease_n();
    goto LABEL_43;
  }
  v30 = v21;
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    v27 = 16;
  }
  else
  {
    v32 = one-time initialization token for attribute;
    v74 = v30;
    if (v32 != -1)
      swift_once();
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = v34;
    if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v36)
    {
      v27 = 17;
      v28 = v78;
      v21 = v74;
      goto LABEL_9;
    }
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v38 = v74;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
    {
      v27 = 17;
    }
    else
    {
      v39 = one-time initialization token for attribute;
      v21 = v38;
      if (v39 != -1)
        swift_once();
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v42 = v41;
      if (v40 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v42 == v43)
      {
        v27 = 18;
        goto LABEL_8;
      }
      v44 = v21;
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v45 & 1) != 0)
      {
        v27 = 18;
      }
      else
      {
        v46 = one-time initialization token for attribute;
        v21 = v44;
        if (v46 != -1)
          swift_once();
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v49 = v48;
        if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50)
        {
          v27 = 19;
          goto LABEL_8;
        }
        v51 = v21;
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v52 & 1) != 0)
        {
          v27 = 19;
        }
        else
        {
          v53 = one-time initialization token for attribute;
          v21 = v51;
          if (v53 != -1)
            swift_once();
          swift_beginAccess();
          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v56 = v55;
          if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57)
          {
            v27 = 33;
            goto LABEL_8;
          }
          v58 = v21;
          v59 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v59 & 1) != 0)
          {
            v27 = 33;
          }
          else
          {
            v65 = v58;
            v21 = (id)MEMORY[0x23B7C5DAC](0xD000000000000024, 0x80000002352DF550);
            v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v68 = v67;
            if (v66 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v68 == v69)
            {

              v27 = 35;
              goto LABEL_8;
            }
            LODWORD(v74) = _stringCompareWithSmolCheck(_:_:expecting:)();
            v73 = v65;

            swift_bridgeObjectRelease();
            v70 = swift_bridgeObjectRelease();
            if ((v74 & 1) == 0)
            {
              MEMORY[0x24BDAC7A8](v70);
              v71 = v73;
              *(&v72 - 2) = (uint64_t)v73;
              specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:));

              return __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
            }
            v27 = 35;
          }
        }
      }
    }
  }
  v28 = v78;
LABEL_43:
  v60 = v88;
  v61 = __swift_project_boxed_opaque_existential_1(v87, v88);
  encode #1 <A>(_:) in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)((uint64_t)v61, a3, v27, v60);
  if (!v3)
  {
    outlined init with copy of AnyTrackedValue((uint64_t)v87, (uint64_t)v81);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest((__int128 *)v80, (uint64_t)&v84);
      v62 = *((_QWORD *)&v85 + 1);
      v63 = v86;
      __swift_project_boxed_opaque_existential_1(&v84, *((uint64_t *)&v85 + 1));
      (*(void (**)(uint64_t, uint64_t))(v63 + 40))(v62, v63);
      specialized ProtobufEncoder.codableField<A>(_:_:)(20, (uint64_t)v15);
      outlined destroy of TypesettingConfiguration((uint64_t)v15, type metadata accessor for ResolvableAttributeConfiguration);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
    }
    else
    {
      memset(v80, 0, sizeof(v80));
      outlined destroy of AnyTrackedValue?((uint64_t)v80, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation);
    }
    outlined init with copy of TypesettingLanguage(v28, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    v64 = v76;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v9, 1, v76) == 1)
    {

      outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    }
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v12, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    objc_storeStrong((id *)&v12[*(int *)(v64 + 20)], v75);
    specialized ProtobufEncoder.codableField<A>(_:_:)(34, (uint64_t)v12);
    outlined destroy of TypesettingConfiguration((uint64_t)v12, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
}

uint64_t partial apply for specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)()
{
  uint64_t v0;

  return specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)(*(_QWORD *)(v0 + 16), **(void ***)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error;
  if (!lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAttributedString.Range.Error, &unk_2506371E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error;
  if (!lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAttributedString.Range.Error, &unk_2506371E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error);
  }
  return result;
}

id specialized CodableNSParagraphStyle.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  id v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  float *v7;
  float v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  unint64_t v20;
  double *v21;
  unint64_t v22;
  double *v23;
  unint64_t v24;
  double *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float v42;
  double v43;
  uint64_t v44;
  float *v45;
  float v46;
  double v47;
  uint64_t v48;
  float *v49;
  float v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 v57;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB490]), sel_init);
  objc_msgSend(v3, sel_setHorizontalAlignment_, 2);
  objc_msgSend(v3, sel_setLineBreakMode_, 4);
  objc_msgSend(v3, sel_setLineBreakStrategy_, 0xFFFFLL);
  objc_msgSend(v3, sel_setAllowsDefaultTighteningForTruncation_, 0);
  v4 = a1[1];
  v5 = a1[2];
  objc_msgSend(v3, sel_setCompositionLanguage_, ProtobufDecoder.preferredCompositionLanguage.getter());
  if (v4 >= v5)
  {
    a1[3] = 0;
    return v3;
  }
  v61 = 0;
  v62 = 1;
  while (1)
  {
    v10 = a1[3];
    if (!v10)
      break;
    v11 = a1[4];
    if (v4 >= v11)
    {
      if (v11 < v4)
        goto LABEL_144;
      a1[3] = 0;
      break;
    }
LABEL_14:
    switch(v10 >> 3)
    {
      case 1uLL:
        if ((v10 & 7) == 0)
          goto LABEL_141;
        if ((v10 & 7) != 2)
          goto LABEL_144;
        v55 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v55 < 0)
          goto LABEL_167;
        v56 = a1[1] + v55;
        if (v5 < v56)
          goto LABEL_144;
        a1[3] = 8;
        a1[4] = v56;
LABEL_141:
        v57 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        v62 = 0;
        v61 = v57;
        v4 = a1[1];
        v5 = a1[2];
        if (v4 < v5)
          continue;
        a1[3] = 0;
        goto LABEL_148;
      case 2uLL:
        if ((v10 & 7) == 0)
          goto LABEL_21;
        if ((v10 & 7) != 2)
          goto LABEL_144;
        v12 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v12 < 0)
          goto LABEL_155;
        v13 = a1[1] + v12;
        if (v5 < v13)
          goto LABEL_144;
        a1[3] = 16;
        a1[4] = v13;
LABEL_21:
        v14 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v14 < 0)
        {
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
          JUMPOUT(0x234B33E9CLL);
        }
        objc_msgSend(v3, sel_setLineBreakMode_, v14);
        break;
      case 3uLL:
        if ((v10 & 7) == 0)
          goto LABEL_33;
        if ((v10 & 7) != 2)
          goto LABEL_144;
        v15 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v15 < 0)
          goto LABEL_156;
        v16 = a1[1] + v15;
        if (v5 < v16)
          goto LABEL_144;
        a1[3] = 24;
        a1[4] = v16;
LABEL_33:
        v17 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        objc_msgSend(v3, sel_setLineBreakStrategy_, v17);
        break;
      case 4uLL:
        v18 = v10 & 7;
        if (v18 == 5)
        {
          v7 = (float *)a1[1];
          if (v5 < (unint64_t)(v7 + 1))
            goto LABEL_144;
          v8 = *v7;
          a1[1] = v7 + 1;
          v9 = v8;
        }
        else
        {
          if (v18 == 2)
          {
            v40 = ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_145;
            if (v40 < 0)
              goto LABEL_162;
            v19 = (double *)a1[1];
            if (v5 < (unint64_t)v19 + v40)
              goto LABEL_144;
            a1[3] = 33;
            a1[4] = (char *)v19 + v40;
          }
          else
          {
            if (v18 != 1)
              goto LABEL_144;
            v19 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v19 + 1))
            goto LABEL_144;
          v9 = *v19;
          a1[1] = v19 + 1;
        }
        objc_msgSend(v3, sel_setLineSpacing_, v9);
        break;
      case 5uLL:
        v20 = v10 & 7;
        if (v20 == 5)
        {
          v41 = (float *)a1[1];
          if (v5 < (unint64_t)(v41 + 1))
            goto LABEL_144;
          v42 = *v41;
          a1[1] = v41 + 1;
          v43 = v42;
        }
        else
        {
          if (v20 == 2)
          {
            v44 = ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_145;
            if (v44 < 0)
              goto LABEL_163;
            v21 = (double *)a1[1];
            if (v5 < (unint64_t)v21 + v44)
              goto LABEL_144;
            a1[3] = 41;
            a1[4] = (char *)v21 + v44;
          }
          else
          {
            if (v20 != 1)
              goto LABEL_144;
            v21 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v21 + 1))
            goto LABEL_144;
          v43 = *v21;
          a1[1] = v21 + 1;
        }
        objc_msgSend(v3, sel_setLineHeightMultiple_, v43);
        break;
      case 6uLL:
        v22 = v10 & 7;
        if (v22 == 5)
        {
          v45 = (float *)a1[1];
          if (v5 < (unint64_t)(v45 + 1))
            goto LABEL_144;
          v46 = *v45;
          a1[1] = v45 + 1;
          v47 = v46;
        }
        else
        {
          if (v22 == 2)
          {
            v48 = ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_145;
            if (v48 < 0)
              goto LABEL_164;
            v23 = (double *)a1[1];
            if (v5 < (unint64_t)v23 + v48)
              goto LABEL_144;
            a1[3] = 49;
            a1[4] = (char *)v23 + v48;
          }
          else
          {
            if (v22 != 1)
              goto LABEL_144;
            v23 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v23 + 1))
            goto LABEL_144;
          v47 = *v23;
          a1[1] = v23 + 1;
        }
        objc_msgSend(v3, sel_setMaximumLineHeight_, v47);
        break;
      case 7uLL:
        v24 = v10 & 7;
        if (v24 == 5)
        {
          v49 = (float *)a1[1];
          if (v5 < (unint64_t)(v49 + 1))
            goto LABEL_144;
          v50 = *v49;
          a1[1] = v49 + 1;
          v51 = v50;
        }
        else
        {
          if (v24 == 2)
          {
            v52 = ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_145;
            if (v52 < 0)
              goto LABEL_165;
            v25 = (double *)a1[1];
            if (v5 < (unint64_t)v25 + v52)
              goto LABEL_144;
            a1[3] = 57;
            a1[4] = (char *)v25 + v52;
          }
          else
          {
            if (v24 != 1)
              goto LABEL_144;
            v25 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v25 + 1))
            goto LABEL_144;
          v51 = *v25;
          a1[1] = v25 + 1;
        }
        objc_msgSend(v3, sel_setMinimumLineHeight_, v51);
        break;
      case 8uLL:
        if ((v10 & 7) == 2)
        {
          v39 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_145;
          if (v39 < 0)
            goto LABEL_161;
          v26 = (_DWORD *)a1[1];
          if (v5 < (unint64_t)v26 + v39)
            goto LABEL_144;
          a1[3] = 69;
          a1[4] = (char *)v26 + v39;
        }
        else
        {
          if ((v10 & 7) != 5)
            goto LABEL_144;
          v26 = (_DWORD *)a1[1];
        }
        if (v5 < (unint64_t)(v26 + 1))
          goto LABEL_144;
        LODWORD(v6) = *v26;
        a1[1] = v26 + 1;
        objc_msgSend(v3, sel_setHyphenationFactor_, v6);
        break;
      case 9uLL:
        if ((v10 & 7) == 0)
          goto LABEL_60;
        if ((v10 & 7) != 2)
          goto LABEL_144;
        v27 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v27 < 0)
          goto LABEL_157;
        v28 = a1[1] + v27;
        if (v5 < v28)
          goto LABEL_144;
        a1[3] = 72;
        a1[4] = v28;
LABEL_60:
        v29 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        objc_msgSend(v3, (SEL)&protocolRef_NSCustomTextSurface + 6, v29 != 0);
        break;
      case 0xAuLL:
        if ((v10 & 7) == 0)
          goto LABEL_68;
        if ((v10 & 7) != 2)
          goto LABEL_144;
        v30 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v30 < 0)
          goto LABEL_158;
        v31 = a1[1] + v30;
        if (v5 < v31)
          goto LABEL_144;
        a1[3] = 80;
        a1[4] = v31;
LABEL_68:
        v32 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        objc_msgSend(v3, sel_setBaseWritingDirection_, -(v32 & 1) ^ (v32 >> 1));
        break;
      case 0xBuLL:
        if ((v10 & 7) == 0)
          goto LABEL_76;
        if ((v10 & 7) != 2)
          goto LABEL_144;
        v33 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v33 < 0)
          goto LABEL_159;
        v34 = a1[1] + v33;
        if (v5 < v34)
          goto LABEL_144;
        a1[3] = 88;
        a1[4] = v34;
LABEL_76:
        v35 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        objc_msgSend(v3, sel_setSpansAllLines_, v35 != 0);
        break;
      case 0xCuLL:
        if ((v10 & 7) == 0)
          goto LABEL_85;
        if ((v10 & 7) != 2)
          goto LABEL_144;
        v36 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        if (v36 < 0)
          goto LABEL_160;
        v37 = a1[1] + v36;
        if (v5 < v37)
          goto LABEL_144;
        a1[3] = 96;
        a1[4] = v37;
LABEL_85:
        v38 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_145;
        objc_msgSend(v3, (SEL)&selRef_seekToEndOfFile + 1, v38);
        break;
      default:
        switch(v10 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_145;
            goto LABEL_7;
          case 1uLL:
            v53 = a1[1] + 8;
            if (v5 < v53)
              goto LABEL_144;
            goto LABEL_134;
          case 2uLL:
            v54 = ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_145;
            if (v54 < 0)
              goto LABEL_166;
            v53 = a1[1] + v54;
            if (v5 < v53)
              goto LABEL_144;
LABEL_134:
            a1[1] = v53;
            break;
          case 5uLL:
            v53 = a1[1] + 4;
            if (v5 >= v53)
              goto LABEL_134;
            goto LABEL_144;
          default:
            goto LABEL_144;
        }
        break;
    }
LABEL_7:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if ((v62 & 1) == 0)
      {
LABEL_148:
        v59 = 2;
        if (v61 == 1)
          v59 = 3;
        if (v61 == 2)
          v60 = 4;
        else
          v60 = v59;
        objc_msgSend(v3, sel_setHorizontalAlignment_, v60);
        objc_msgSend(v3, sel_setFullyJustified_, v61 == 3);
      }
      return v3;
    }
  }
  v10 = ProtobufDecoder.decodeVarint()();
  if (v1)
    goto LABEL_145;
  if (v10 >= 8)
    goto LABEL_14;
LABEL_144:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_145:

  return v3;
}

id specialized CodableFontTraits.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSNumber v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v3 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCED8]), sel_init);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 >= v8)
  {
LABEL_81:
    *(_QWORD *)(a1 + 24) = 0;
    return v6;
  }
  v49 = v5;
  v9 = *MEMORY[0x24BDC4D40];
  v10 = *MEMORY[0x24BDC4E28];
  v51 = *MEMORY[0x24BDC4DB8];
  v11 = *MEMORY[0x24BDC4ED0];
  v12 = *MEMORY[0x24BDC4E80];
  v50 = *MEMORY[0x24BDC4DC8];
  while (2)
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(a1 + 32);
      if (v7 < v15)
        goto LABEL_12;
      if (v15 < v7)
        goto LABEL_82;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v14 = ProtobufDecoder.decodeVarint()();
    if (v1)
      goto LABEL_83;
    if (v14 <= 7)
    {
LABEL_82:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      goto LABEL_83;
    }
LABEL_12:
    switch(v14 >> 3)
    {
      case 1uLL:
        if ((v14 & 7) == 0)
          goto LABEL_19;
        if ((v14 & 7) != 2)
          goto LABEL_82;
        v16 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_83;
        if (v16 < 0)
          goto LABEL_91;
        v17 = *(_QWORD *)(a1 + 8) + v16;
        if (v8 < v17)
          goto LABEL_82;
        *(_QWORD *)(a1 + 24) = 8;
        *(_QWORD *)(a1 + 32) = v17;
LABEL_19:
        ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_83;
        isa = UInt._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, sel_setObject_forKey_, isa, v50, v47);
        goto LABEL_4;
      case 2uLL:
        if ((v14 & 7) == 2)
        {
          v34 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_83;
          if (v34 < 0)
            goto LABEL_92;
          v18 = *(_QWORD *)(a1 + 8);
          if (v8 < v18 + v34)
            goto LABEL_82;
          *(_QWORD *)(a1 + 24) = 21;
          *(_QWORD *)(a1 + 32) = v18 + v34;
        }
        else
        {
          if ((v14 & 7) != 5)
            goto LABEL_82;
          v18 = *(_QWORD *)(a1 + 8);
        }
        if (v8 < v18 + 4)
          goto LABEL_82;
        *(_QWORD *)(a1 + 8) = v18 + 4;
        isa = Float._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, sel_setObject_forKey_, isa, v12, v47);
        goto LABEL_4;
      case 3uLL:
        if ((v14 & 7) == 2)
        {
          v35 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_83;
          if (v35 < 0)
            goto LABEL_93;
          v19 = *(_QWORD *)(a1 + 8);
          if (v8 < v19 + v35)
            goto LABEL_82;
          *(_QWORD *)(a1 + 24) = 29;
          *(_QWORD *)(a1 + 32) = v19 + v35;
        }
        else
        {
          if ((v14 & 7) != 5)
            goto LABEL_82;
          v19 = *(_QWORD *)(a1 + 8);
        }
        if (v8 < v19 + 4)
          goto LABEL_82;
        *(_QWORD *)(a1 + 8) = v19 + 4;
        isa = Float._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, sel_setObject_forKey_, isa, v11, v47);
        goto LABEL_4;
      case 4uLL:
        if ((v14 & 7) == 2)
        {
          v36 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_83;
          if (v36 < 0)
            goto LABEL_94;
          v20 = *(_QWORD *)(a1 + 8);
          if (v8 < v20 + v36)
            goto LABEL_82;
          *(_QWORD *)(a1 + 24) = 37;
          *(_QWORD *)(a1 + 32) = v20 + v36;
        }
        else
        {
          if ((v14 & 7) != 5)
            goto LABEL_82;
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (v8 < v20 + 4)
          goto LABEL_82;
        *(_QWORD *)(a1 + 8) = v20 + 4;
        isa = Float._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, sel_setObject_forKey_, isa, v51, v47);
        goto LABEL_4;
      case 5uLL:
        if ((v14 & 7) != 2)
          goto LABEL_82;
        v21 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_83;
        v22 = v21;
        if (v21 < 0)
        {
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          JUMPOUT(0x234B34544);
        }
        v48 = v6;
        v23 = v10;
        v24 = *(_QWORD *)(a1 + 8);
        if (v8 < v24 + v21)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_87;
        }
        v47 = v9;
        *(_QWORD *)(a1 + 8) = v24 + v21;
        if (v21)
        {
          v25 = v24 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v28 = v27;
          if (__OFADD__(v25, v22))
            goto LABEL_89;
          if (v25 + v22 < v25)
            goto LABEL_90;
          v29 = v26;
          v30 = Data._Representation.subscript.getter();
          v32 = v31;
          outlined consume of Data._Representation(v29, v28);
        }
        else
        {
          v30 = 0;
          v32 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        v39 = String.init(data:encoding:)();
        if (v40)
        {
          v41 = v39;
          v42 = v40;
          outlined consume of Data._Representation(v30, v32);
          v43 = (void *)MEMORY[0x23B7C5DAC](v41, v42);
          swift_bridgeObjectRelease();
          if (!v23)
            goto LABEL_98;
          v10 = v23;
          v6 = v48;
          objc_msgSend(v48, sel_setObject_forKey_, v43, v10);

          v9 = v47;
LABEL_5:
          v7 = *(_QWORD *)(a1 + 8);
          v8 = *(_QWORD *)(a1 + 16);
          if (v7 >= v8)
            goto LABEL_81;
          continue;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data._Representation(v30, v32);
LABEL_87:
        v6 = v48;
LABEL_83:

        return v6;
      case 6uLL:
        if ((v14 & 7) == 2)
        {
          v37 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_83;
          if (v37 < 0)
            goto LABEL_95;
          v33 = *(_QWORD *)(a1 + 8);
          if (v8 < v33 + v37)
            goto LABEL_82;
          *(_QWORD *)(a1 + 24) = 53;
          *(_QWORD *)(a1 + 32) = v33 + v37;
        }
        else
        {
          if ((v14 & 7) != 5)
            goto LABEL_82;
          v33 = *(_QWORD *)(a1 + 8);
        }
        if (v8 < v33 + 4)
          goto LABEL_82;
        *(_QWORD *)(a1 + 8) = v33 + 4;
        v38.super.super.isa = Float._bridgeToObjectiveC()().super.super.isa;
        if (!v9)
          goto LABEL_97;
        isa = v38.super.super.isa;
        objc_msgSend(v6, sel_setObject_forKey_, v38.super.super.isa, v9, v47);
LABEL_4:

        goto LABEL_5;
      default:
        switch(v14 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_83;
            goto LABEL_5;
          case 1uLL:
            v44 = *(_QWORD *)(a1 + 8) + 8;
            if (v8 < v44)
              goto LABEL_82;
            goto LABEL_80;
          case 2uLL:
            v45 = ProtobufDecoder.decodeVarint()();
            if (v1)
              goto LABEL_83;
            if (v45 < 0)
              goto LABEL_96;
            v44 = *(_QWORD *)(a1 + 8) + v45;
            if (v8 < v44)
              goto LABEL_82;
LABEL_80:
            *(_QWORD *)(a1 + 8) = v44;
            break;
          case 5uLL:
            v44 = *(_QWORD *)(a1 + 8) + 4;
            if (v8 >= v44)
              goto LABEL_80;
            goto LABEL_82;
          default:
            goto LABEL_82;
        }
        goto LABEL_5;
    }
  }
}

