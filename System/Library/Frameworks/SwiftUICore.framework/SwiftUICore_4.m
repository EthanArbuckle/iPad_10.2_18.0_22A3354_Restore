void TextEffectsRenderer._convertToRenderSpace(_:textRange:)(void *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  CGFloat v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v60)(char *, uint64_t, uint64_t);
  unint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  double v115;
  double *v116;
  double v117;
  uint64_t v118;
  double v119;
  void *v120;
  void *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  BOOL v126;
  id v127;
  id v128;
  void *v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  char v136;
  int v137;
  id v138;
  uint64_t v139;
  Swift::String v140;
  id v141;
  uint64_t v142;
  void *v143;
  void *v144;
  Swift::String v145;
  Swift::String v146;
  Swift::String v147;
  Swift::String v148;
  Swift::String v149;
  Swift::String v150;
  Swift::String v151;
  __int128 v152;
  int EnumCaseMultiPayload;
  double v154;
  uint64_t v155;
  CGFloat *v156;
  CGFloat v157;
  CGFloat v158;
  CGFloat v159;
  CGFloat v160;
  double v161;
  CGFloat v162;
  CGFloat v163;
  id v164;
  uint64_t v165;
  Swift::String v166;
  id v167;
  uint64_t v168;
  void *v169;
  void *v170;
  Swift::String v171;
  Swift::String v172;
  Swift::String v173;
  Swift::String v174;
  Swift::String v175;
  Swift::String v176;
  Swift::String v177;
  __int128 v178;
  __int128 v179;
  id v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  double v189;
  char v190;
  double *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  _QWORD *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  double v221;
  double v222;
  double v223;
  double v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  double v230;
  uint64_t v231;
  uint64_t *v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  uint64_t v238;
  char *v239;
  double v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  void *v247;
  void *v248;
  uint64_t v249;
  double v250;
  double v251;
  double v252;
  __int128 v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t i;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  double *v277;
  unint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  double v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  unint64_t v288;
  char *v289;
  uint64_t v290;
  char *v291;
  unint64_t v292;
  uint64_t v293;
  void (*v294)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v295;
  uint64_t v296;
  char *v297;
  uint64_t v298[2];
  char v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  __int128 v303;
  char v304;
  __int128 v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD v310[18];
  uint64_t v311[18];
  _OWORD v312[3];
  uint64_t v313;
  CGPoint v314;
  CGRect v315;
  CGRect v316;

  v271 = a1;
  v6 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v225 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v267 = *(_QWORD *)(v9 - 8);
  v268 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v266 = (char *)&v225 - v10;
  v262 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v262);
  v261 = (uint64_t)&v225 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v13 = v12;
  v265 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v259 = (uint64_t)&v225 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v263 = (uint64_t)&v225 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v264 = (char *)&v225 - v18;
  v270 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v275 = *(_QWORD *)(v270 - 8);
  MEMORY[0x24BDAC7A8](v270);
  v257 = (uint64_t)&v225 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v272 = (uint64_t)&v225 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v269 = (uint64_t)&v225 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v283 = (uint64_t)&v225 - v25;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  v279 = *(_QWORD *)(v26 - 8);
  v280 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v274 = (char *)&v225 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, v29, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (double *)((char *)&v225 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v33);
  v278 = (unint64_t *)((char *)&v225 - v34);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], v28);
  MEMORY[0x24BDAC7A8](v35);
  v291 = (char *)&v225 - v36;
  v293 = type metadata accessor for UUID();
  v37 = *(_QWORD *)(v293 - 8);
  MEMORY[0x24BDAC7A8](v293);
  v281 = (char *)&v225 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v297 = (char *)&v225 - v40;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  v290 = v41;
  MEMORY[0x24BDAC7A8](v41);
  v289 = (char *)&v225 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v44 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs) + 16);
  v45 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  v276 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v292 = v43;
  if (!v44)
  {
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v56 = (uint64_t)v291;
    v57 = v293;
    goto LABEL_84;
  }
  v277 = v32;
  v254 = v13;
  v242 = v6;
  v46 = 0;
  v256 = 0;
  v287 = (uint64_t *)(v3 + v45);
  v47 = v43 & 0xFFFFFFFFFFFFFF8;
  v296 = v43 & 0xFFFFFFFFFFFFFF8;
  if (v43 < 0)
    v47 = v43;
  v243 = v47;
  v288 = v43 & 0xC000000000000001;
  v285 = v43 + 32;
  v48 = *MEMORY[0x24BDBF070];
  v49 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v246 = v44 - 1;
  v50 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v51 = *(double *)(MEMORY[0x24BDBF070] + 24);
  v253 = xmmword_23527E860;
  v52 = a2;
  v53 = a3;
  v245 = (unint64_t)"Animator";
  v248 = (void *)0x80000002352E0BB0;
  v249 = MEMORY[0x24BEE4AD8] + 8;
  v247 = (void *)0x80000002352E0BF0;
  v241 = v8;
  v54 = v276;
  v55 = (uint64_t)v281;
  v56 = (uint64_t)v291;
  v57 = v293;
  v286 = v37;
  v284 = v44;
  do
  {
    while (1)
    {
      if (v46 >= *(_QWORD *)(v54 + 16))
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        return;
      }
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16))(v56, v54+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v46, v57);
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
      v59(v56, 0, 1, v57);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v56, 1, v57) == 1)
        goto LABEL_85;
      v60 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
      v60(v297, v56, v57);
      v61 = v292;
      if (v292 >> 62)
      {
        swift_bridgeObjectRetain();
        v218 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v61 = v292;
        if (v46 == v218)
        {
LABEL_86:
          (*(void (**)(char *, uint64_t))(v37 + 8))(v297, v57);
          goto LABEL_87;
        }
      }
      else if (v46 == *(_QWORD *)(v296 + 16))
      {
        goto LABEL_86;
      }
      v294 = v59;
      if (v288)
      {
        v62 = (id)MEMORY[0x23B7C6D9C](v46, v61);
      }
      else
      {
        if (v46 >= *(_QWORD *)(v296 + 16))
          goto LABEL_89;
        v62 = *(id *)(v285 + 8 * v46);
      }
      v63 = v62;
      v64 = *(int *)(v290 + 48);
      v65 = v289;
      v66 = v293;
      v60(v289, (uint64_t)v297, v293);
      v295 = v63;
      *(_QWORD *)&v65[v64] = v63;
      v67 = v65;
      v57 = v66;
      v60((char *)v55, (uint64_t)v67, v66);
      v68 = v287;
      swift_beginAccess();
      v69 = *v68;
      if (*(_QWORD *)(v69 + 16))
      {
        v70 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
        if ((v71 & 1) != 0)
          break;
      }
      swift_endAccess();

      v37 = v286;
      (*(void (**)(uint64_t, uint64_t))(v286 + 8))(v55, v57);
LABEL_6:
      ++v46;
      v56 = (uint64_t)v291;
      v58 = v294;
      if (v284 == v46)
        goto LABEL_84;
    }
    v72 = v46;
    v73 = *(void **)(*(_QWORD *)(v69 + 56) + 8 * v70);
    swift_endAccess();
    v74 = v73;
    v75 = v286;
    (*(void (**)(uint64_t, uint64_t))(v286 + 8))(v55, v57);
    v76 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
    v77 = *(_QWORD *)&v74[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v77 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v310, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v310, (uint64_t)v311, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
    if (_s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v311) == 1)
    {

      v57 = v293;
      v37 = v75;
      v46 = v72;
      goto LABEL_6;
    }
    v78 = *(_QWORD *)(v77
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
    v225 = *(_QWORD *)(v77
                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap
                     + 8);
    v79 = *(_QWORD *)(v77
                    + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController);
    swift_beginAccess();
    v231 = *(_QWORD *)(v79 + 112);
    v80 = (_QWORD *)v311[4];
    v81 = (uint64_t *)(v77 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements);
    swift_beginAccess();
    v82 = *v81;
    v227 = v78;
    v83 = v80[2];
    outlined release of TextRenderLayer.Layout?(v310, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TextRenderLayer.Layout?);
    v238 = v82 + 32;
    swift_bridgeObjectRetain();
    v84 = (char *)v79;
    v85 = v83;
    v226 = v84;
    swift_retain();
    swift_retain();
    v255 = v80;
    swift_bridgeObjectRetain();
    v260 = v82;
    swift_bridgeObjectRetain();
    v282 = 0.0;
    v228 = v72;
    v229 = v72 + 1;
    v235 = v53;
    v236 = v52;
    v258 = v76;
    v239 = v74;
    v37 = v75;
    v233 = v48;
    v234 = v49;
    v237 = v50;
    v240 = v51;
    for (i = v83; ; v85 = i)
    {
      v105 = v282;
      if (*(_QWORD *)&v282 == v85)
      {
        v106 = 1;
        v107 = *(double *)&v85;
        v108 = v280;
        v109 = (uint64_t)v277;
      }
      else
      {
        v108 = v280;
        if (*(_QWORD *)&v282 >= v255[2])
          goto LABEL_90;
        v110 = (uint64_t)&v274[*(int *)(v280 + 48)];
        outlined init with copy of TypesettingLanguage((uint64_t)v255+ ((*(unsigned __int8 *)(v275 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v275 + 80))+ *(_QWORD *)(v275 + 72) * *(_QWORD *)&v282, v110, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        v109 = (uint64_t)v277;
        v111 = (uint64_t)v277 + *(int *)(v108 + 48);
        *v277 = v105;
        outlined init with take of LocalizedStringKey.FormatArgument(v110, v111, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        v106 = 0;
        *(_QWORD *)&v107 = *(_QWORD *)&v105 + 1;
      }
      v112 = v279;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 56))(v109, v106, 1, v108);
      v113 = v278;
      outlined init with take of (key: UUID, value: TextRenderSurface)?(v109, (uint64_t)v278, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v112 + 48))(v113, 1, v108) == 1)
      {
        swift_bridgeObjectRelease();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of TextRenderLayer.Layout?(v310, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);

        v54 = v276;
        v55 = (uint64_t)v281;
        v56 = (uint64_t)v291;
        v188 = v228;
        goto LABEL_68;
      }
      v282 = v107;
      v114 = *v113;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v113 + *(int *)(v108 + 48), v283, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if ((v114 & 0x8000000000000000) != 0)
        goto LABEL_22;
      v55 = (uint64_t)v281;
      if (v114 >= *(_QWORD *)(v260 + 16))
        goto LABEL_22;
      v115 = v48;
      v116 = (double *)(v238 + 16 * v114);
      v117 = *v116;
      v251 = v116[1];
      v252 = v117;
      v118 = *(_QWORD *)&v239[v258]
           + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds;
      v119 = *(double *)v118;
      v250 = *(double *)(v118 + 8);
      v120 = v271;
      if (!v271)
        goto LABEL_47;
      objc_opt_self();
      v121 = (void *)swift_dynamicCastObjCClass();
      if (v121)
      {
        v122 = (char *)objc_msgSend(v121, sel_range);
        v124 = &v122[v123];
        if (__OFADD__(v122, v123))
          goto LABEL_91;
        v125 = v122;
        v126 = __OFSUB__(v124, v122);
        v127 = v295;
        if (v123 < 0 != v126)
          goto LABEL_92;
        goto LABEL_35;
      }
      v138 = objc_msgSend(objc_msgSend(v120, sel_location), sel_compare_, objc_msgSend(v120, sel_endLocation));
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!v138)
        break;
LABEL_46:
      *(double *)&v232 = COERCE_DOUBLE(&v225);
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v249, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v139 = swift_allocObject();
      *(_OWORD *)(v139 + 16) = v253;
      *(_QWORD *)&v303 = 0;
      *((_QWORD *)&v303 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      v230 = *((double *)&v303 + 1);
      *(_QWORD *)&v303 = 0;
      *((_QWORD *)&v303 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v140._countAndFlagsBits = 0xD000000000000035;
      v140._object = v248;
      String.append(_:)(v140);
      v141 = objc_msgSend(v120, sel_description);
      v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v144 = v143;

      v145._countAndFlagsBits = v142;
      v145._object = v144;
      String.append(_:)(v145);
      swift_bridgeObjectRelease();
      v146._countAndFlagsBits = 0;
      v146._object = (void *)0xE000000000000000;
      String.append(_:)(v146);
      swift_bridgeObjectRelease();
      v147._countAndFlagsBits = 2108704;
      v147._object = (void *)0xE300000000000000;
      String.append(_:)(v147);
      v148._countAndFlagsBits = StaticString.description.getter();
      String.append(_:)(v148);
      swift_bridgeObjectRelease();
      v149._countAndFlagsBits = 58;
      v149._object = (void *)0xE100000000000000;
      String.append(_:)(v149);
      v298[0] = 84;
      v150._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v150);
      swift_bridgeObjectRelease();
      v151._countAndFlagsBits = 0xD00000000000001CLL;
      v151._object = v247;
      String.append(_:)(v151);
      v152 = v303;
      *(_QWORD *)(v139 + 56) = MEMORY[0x24BEE0D00];
      *(_OWORD *)(v139 + 32) = v152;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
LABEL_47:
      outlined init with copy of TypesettingLanguage(v283, v272, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v154 = a3;
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v155 = v261;
          outlined init with take of LocalizedStringKey.FormatArgument(v272, v261, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          v156 = (CGFloat *)(v155 + *(int *)(v262 + 32));
          v157 = *v156;
          v49 = v156[1];
          v158 = v156[2];
          v159 = v156[3];
          outlined destroy of TypesettingConfiguration(v155, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          outlined consume of Text.Layout.Line.Line(*(void **)(v272 + 24), *(_QWORD *)(v272 + 32), *(_BYTE *)(v272 + 40));
          swift_bridgeObjectRelease();
          specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
          v157 = v115;
          v158 = v50;
          v159 = v240;
        }
      }
      else
      {
        v157 = *(double *)(v272 + 24);
        v49 = *(double *)(v272 + 32);
        v158 = *(double *)(v272 + 40);
        v159 = *(double *)(v272 + 48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v160 = v252 + v119;
      v161 = a2;
      v162 = v252 + v119 + a2;
      v163 = v251 + v154;
      v315.origin.x = v157;
      v315.origin.y = v49;
      v315.size.width = v158;
      v315.size.height = v159;
      v316 = CGRectOffset(v315, v160, v251 + v250);
      v314.x = v162;
      v314.y = v163;
      if (CGRectContainsPoint(v316, v314))
      {
        v250 = 0.0;
        v189 = 0.0;
        v190 = 1;
        a2 = v161;
        a3 = v154;
        v48 = v233;
        v49 = v234;
        v52 = v236;
        v50 = v237;
        v51 = v240;
        v53 = v235;
        goto LABEL_72;
      }
      a2 = v161;
      a3 = v154;
      v104 = v283;
      v48 = v233;
      v49 = v234;
      v52 = v236;
      v50 = v237;
      v51 = v240;
      v53 = v235;
LABEL_23:
      outlined destroy of TypesettingConfiguration(v104, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    }
    v180 = objc_msgSend(v120, sel_location);
    objc_opt_self();
    v181 = (void *)swift_dynamicCastObjCClass();
    if (!v181)
    {
      swift_unknownObjectRelease();
      goto LABEL_46;
    }
    v125 = (char *)objc_msgSend(v181, sel_range);
    v183 = v182;
    swift_unknownObjectRelease();
    v124 = &v125[v183];
    if (__OFADD__(v125, v183))
      goto LABEL_99;
    v127 = v295;
    if ((uint64_t)v124 < (uint64_t)v125)
      goto LABEL_100;
LABEL_35:
    v48 = v115;
    v128 = objc_msgSend(v127, sel_rangeInElement);
    objc_opt_self();
    v129 = (void *)swift_dynamicCastObjCClass();
    if (v129)
    {
      v130 = objc_msgSend(v129, sel_range);
      v132 = v131;

      if (__OFADD__(v130, v132))
        goto LABEL_97;
      if ((uint64_t)&v130[v132] < (uint64_t)v130)
        goto LABEL_98;
      goto LABEL_38;
    }
    v164 = objc_msgSend(objc_msgSend(v128, sel_location), sel_compare_, objc_msgSend(v128, sel_endLocation));
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v164)
    {
LABEL_55:
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v165 = swift_allocObject();
      *(_OWORD *)(v165 + 16) = v253;
      *(_QWORD *)&v303 = 0;
      *((_QWORD *)&v303 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      *(_QWORD *)&v303 = 0;
      *((_QWORD *)&v303 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v166._countAndFlagsBits = 0xD000000000000035;
      v166._object = (void *)(v245 | 0x8000000000000000);
      String.append(_:)(v166);
      v167 = objc_msgSend(v128, sel_description);
      v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v170 = v169;

      v171._countAndFlagsBits = v168;
      v171._object = v170;
      String.append(_:)(v171);
      swift_bridgeObjectRelease();
      v172._countAndFlagsBits = 0;
      v172._object = (void *)0xE000000000000000;
      String.append(_:)(v172);
      swift_bridgeObjectRelease();
      v173._countAndFlagsBits = 2108704;
      v173._object = (void *)0xE300000000000000;
      String.append(_:)(v173);
      v174._countAndFlagsBits = StaticString.description.getter();
      String.append(_:)(v174);
      swift_bridgeObjectRelease();
      v175._countAndFlagsBits = 58;
      v175._object = (void *)0xE100000000000000;
      String.append(_:)(v175);
      v298[0] = 84;
      v176._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v176);
      swift_bridgeObjectRelease();
      v177._object = (void *)(v244 | 0x8000000000000000);
      v177._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v177);
      v178 = v303;
      *(_QWORD *)(v165 + 56) = MEMORY[0x24BEE0D00];
      *(_OWORD *)(v165 + 32) = v178;
      print(_:separator:terminator:)();

      swift_bridgeObjectRelease();
      v104 = v283;
      v51 = v240;
      goto LABEL_23;
    }
    v184 = objc_msgSend(v128, sel_location);
    objc_opt_self();
    v185 = (void *)swift_dynamicCastObjCClass();
    if (!v185)
    {
      swift_unknownObjectRelease();
      goto LABEL_55;
    }
    v130 = objc_msgSend(v185, sel_range);
    v187 = v186;

    swift_unknownObjectRelease();
    if (__OFADD__(v130, v187))
      goto LABEL_101;
    if ((uint64_t)&v130[v187] < (uint64_t)v130)
      goto LABEL_102;
LABEL_38:
    *(_QWORD *)&v250 = v125 - v130;
    if (__OFSUB__(v125, v130))
      goto LABEL_93;
    v133 = v124 - v125;
    if (__OFSUB__(v124, v125))
      goto LABEL_94;
    *(_QWORD *)&v96 = v133 + *(_QWORD *)&v250;
    if (__OFADD__(v133, *(_QWORD *)&v250))
      goto LABEL_95;
    if (*(uint64_t *)&v96 < *(uint64_t *)&v250)
      goto LABEL_96;
    outlined init with copy of TypesettingLanguage(v283, v269, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v134 = swift_getEnumCaseMultiPayload();
    if (v134)
    {
      *(double *)&v232 = v96;
      if (v134 == 1)
      {
        v135 = v261;
        outlined init with take of LocalizedStringKey.FormatArgument(v269, v261, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v136 = *(_BYTE *)(v135 + 16);
        v137 = *(_DWORD *)(v135 + 40);
        v303 = *(_OWORD *)v135;
        v304 = v136;
        v305 = *(_OWORD *)(v135 + 24);
        v306 = v137;
        v95 = v263;
        Text.Layout.Line.characterRanges(runIndices:)(v135 + *(int *)(v262 + 24), v263);
        outlined destroy of TypesettingConfiguration(v135, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v51 = v240;
      }
      else
      {
        v86 = *(void **)(v269 + 24);
        v87 = *(_QWORD *)(v269 + 32);
        v88 = *(_BYTE *)(v269 + 40);
        v89 = *(_QWORD *)(v269 + 48);
        v90 = *(_QWORD *)(v269 + 56);
        v230 = a3;
        v91 = *(_DWORD *)(v269 + 64);
        v92 = *(_QWORD *)(v269 + 72);
        v93 = *(_QWORD *)(v269 + 80);
        v94 = *(_QWORD *)(v269 + 88);
        outlined copy of Text.Layout.Line.Line(v86, v87, v88);
        lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
        swift_bridgeObjectRetain();
        v95 = v263;
        RangeSet.init()();
        *(_QWORD *)&v303 = v86;
        *((_QWORD *)&v303 + 1) = v87;
        v304 = v88;
        *(_QWORD *)&v305 = v89;
        *((_QWORD *)&v305 + 1) = v90;
        v306 = v91;
        v307 = v92;
        v308 = v93;
        v53 = v235;
        v52 = v236;
        v309 = v94;
        v298[0] = (uint64_t)v86;
        v298[1] = v87;
        v299 = v88;
        v300 = v89;
        v48 = v115;
        v301 = v90;
        v51 = v240;
        v50 = v237;
        a3 = v230;
        v302 = v91;
        Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v298, v95);
        outlined consume of Text.Layout.Line.Line(v86, v87, v88);
        swift_bridgeObjectRelease();
        outlined consume of Text.Layout.Line.Line(v86, v87, v88);
        swift_bridgeObjectRelease();
      }
      v96 = *(double *)&v232;
    }
    else
    {
      v179 = *(_OWORD *)(v269 + 16);
      v312[0] = *(_OWORD *)v269;
      v312[1] = v179;
      v312[2] = *(_OWORD *)(v269 + 32);
      v313 = *(_QWORD *)(v269 + 48);
      v95 = v263;
      Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
      outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v312);
      v51 = v240;
    }
    v97 = v264;
    v98 = v265;
    v99 = v254;
    (*(void (**)(char *, uint64_t, uint64_t))(v265 + 32))(v264, v95, v254);
    *(double *)&v303 = v250;
    *((double *)&v303 + 1) = v96;
    v100 = v266;
    v101 = RangeSet.ranges.getter();
    *(double *)&v232 = COERCE_DOUBLE(&v225);
    MEMORY[0x24BDAC7A8](v101);
    *(&v225 - 2) = (uint64_t)&v303;
    v102 = v256;
    v103 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in RangeSet.contains(_:)specialized partial apply, (uint64_t)(&v225 - 4));
    v256 = v102;
    (*(void (**)(char *, uint64_t))(v267 + 8))(v100, v268);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
    if ((v103 & 1) == 0)
    {
LABEL_22:
      v104 = v283;
      goto LABEL_23;
    }
    v189 = v96;
    v190 = 0;
    v55 = (uint64_t)v281;
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v191 = (double *)&v239[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement];
    swift_beginAccess();
    v52 = v52 + v252 + 0.0;
    v53 = v53 + v251 + *v191;
    if ((v190 & 1) != 0)
      goto LABEL_79;
    v192 = v259;
    v193 = v283;
    Text.Effect.RenderSegmentation.Segment.characterRanges.getter(v259);
    *(double *)&v303 = v250;
    *((double *)&v303 + 1) = v189;
    v194 = v266;
    v195 = v254;
    v196 = RangeSet.ranges.getter();
    MEMORY[0x24BDAC7A8](v196);
    *(&v225 - 2) = (uint64_t)&v303;
    v197 = v256;
    v198 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in RangeSet.contains(_:), (uint64_t)(&v225 - 4));
    v256 = v197;
    (*(void (**)(char *, uint64_t))(v267 + 8))(v194, v268);
    (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v192, v195);
    if ((v198 & 1) == 0)
    {
      v55 = (uint64_t)v281;
LABEL_79:
      v54 = v276;
      v188 = v228;
      outlined destroy of TypesettingConfiguration(v283, type metadata accessor for Text.Effect.RenderSegmentation.Segment);

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of TextRenderLayer.Layout?(v310, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);

      v56 = (uint64_t)v291;
      goto LABEL_68;
    }
    v199 = v48;
    v282 = a2;
    v200 = v257;
    v201 = *(_QWORD *)(*(_QWORD *)&v239[v258]
                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time);
    outlined init with copy of TypesettingLanguage(v193, v257, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v202 = swift_getEnumCaseMultiPayload();
    v188 = v228;
    if (v202 == 2)
    {
      v203 = *(_QWORD **)(v200 + 24);
      i = *(uint64_t *)(v200 + 32);
      v204 = i;
      v205 = *(unsigned __int8 *)(v200 + 40);
      v206 = *(_QWORD *)(v200 + 48);
      v207 = *(_QWORD *)(v200 + 56);
      LODWORD(v258) = *(_DWORD *)(v200 + 64);
      v208 = v53;
      v236 = v52;
      v209 = *(_QWORD *)(v200 + 72);
      v210 = *(_QWORD *)(v200 + 80);
      v211 = *(_QWORD *)(v200 + 88);
      v213 = v241;
      v212 = v242;
      *v241 = MEMORY[0x24BEE4AF8];
      v214 = v203;
      v255 = v203;
      LODWORD(v260) = v205;
      outlined copy of Text.Layout.Line.Line(v203, v204, v205);
      v252 = COERCE_DOUBLE(lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex());
      swift_bridgeObjectRetain();
      RangeSet.init()();
      *(_QWORD *)((char *)v213 + *(int *)(v212 + 24)) = MEMORY[0x24BEE4B08];
      v215 = (_QWORD *)((char *)v213 + *(int *)(v212 + 28));
      *v215 = 0;
      v215[1] = 0;
      *(_QWORD *)&v303 = v214;
      *((_QWORD *)&v303 + 1) = i;
      v304 = v205;
      *(_QWORD *)&v305 = v206;
      *((_QWORD *)&v305 + 1) = v207;
      v306 = v258;
      v307 = v209;
      v53 = v208;
      v308 = v210;
      v52 = v236;
      v309 = v211;
      v298[0] = v201;
      Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(v213, v298, v227, v225, v231, v226);
      v216 = v255;
      v217 = i;
      outlined consume of Text.Layout.Line.Line(v255, i, v260);
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v216, v217, v260);
      swift_bridgeObjectRelease();
    }
    else
    {
      v213 = v241;
      v219 = v242;
      *v241 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      RangeSet.init()();
      *(_QWORD *)((char *)v213 + *(int *)(v219 + 24)) = MEMORY[0x24BEE4B08];
      v220 = (_QWORD *)((char *)v213 + *(int *)(v219 + 28));
      *v220 = 0;
      v220[1] = 0;
      outlined destroy of TypesettingConfiguration(v200, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    }
    Text.Effect.InteractionMetrics.displacement(for:end:)(*(uint64_t *)&v250);
    v222 = v221;
    v224 = v223;
    outlined destroy of TypesettingConfiguration((uint64_t)v213, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    outlined release of TextRenderLayer.Layout?(v310, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TextRenderLayer.Layout?);
    outlined destroy of TypesettingConfiguration(v283, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v52 = v52 + v222;
    v53 = v53 + v224;
    a2 = v282;
    v55 = (uint64_t)v281;
    v56 = (uint64_t)v291;
    v49 = v234;
    v48 = v199;
    v51 = v240;
    v50 = v237;
    v54 = v276;
LABEL_68:
    v46 = v229;
    v58 = v294;
    v57 = v293;
  }
  while (v246 != v188);
LABEL_84:
  v58(v56, 1, 1, v57);
LABEL_85:
  outlined destroy of Any?(v56, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_87:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

double @objc TextEffectsRenderer.convertToTextAnimationsCoordinateSpace(_:textRange:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  double v11;
  double v12;

  v9 = a5;
  v10 = a1;
  TextEffectsRenderer._convertToRenderSpace(_:textRange:)(a5, a2, a3);
  v12 = v11;

  return v12;
}

void *TextEffectsAnimationController.animator(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 96);
  if (*(_QWORD *)(v3 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    v6 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v4);
    v7 = v6;
  }
  else
  {
    v6 = 0;
  }
  swift_endAccess();
  return v6;
}

id TextEffectsAnimationController.animator(for:with:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  char *v13;
  void (*v14)(char *);
  char *v15;
  objc_class *v16;
  _BYTE *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  id v21;
  id v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  objc_super v26;

  v4 = v3;
  v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 96);
  v10 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
  if (*(_QWORD *)(v9 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v12 & 1) != 0))
  {
    v13 = *(char **)(*(_QWORD *)(v9 + 56) + 8 * v11);
    swift_endAccess();
    if (*(_QWORD *)&v13[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state])
    {
      *(_QWORD *)&v13[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 0;
      v14 = *(void (**)(char *))&v13[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
      v15 = v13;
      swift_retain();
      v14(v15);
      v10 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;

      swift_release();
    }
  }
  else
  {
    swift_endAccess();
  }
  v16 = (objc_class *)type metadata accessor for TextAnimator();
  v17 = objc_allocWithZone(v16);
  swift_weakInit();
  v18 = &v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase];
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation] = a1;
  v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant] = 0;
  swift_weakAssign();
  v19 = &v17[v10[56]];
  *v19 = a2;
  v19[1] = a3;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 1;
  v26.receiver = v17;
  v26.super_class = v16;
  v20 = a1;
  swift_retain();
  v21 = objc_msgSendSuper2(&v26, sel_init);
  swift_beginAccess();
  v22 = v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(v4 + 96) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v22, v8, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 96) = v25;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v22;
}

id TextEffectsAnimationController.staticAnimator(for:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;
  void (*v9)(char *);
  char *v10;
  objc_class *v11;
  _BYTE *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  id v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  objc_super v21;

  v2 = v1;
  v4 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 96);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    v8 = *(char **)(*(_QWORD *)(v5 + 56) + 8 * v6);
    swift_endAccess();
    if (*(_QWORD *)&v8[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state])
    {
      *(_QWORD *)&v8[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 0;
      v9 = *(void (**)(char *))&v8[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
      v10 = v8;
      swift_retain();
      v9(v10);

      swift_release();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = (objc_class *)type metadata accessor for TextAnimator();
  v12 = objc_allocWithZone(v11);
  swift_weakInit();
  v13 = &v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase];
  *v13 = 0;
  v13[1] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation] = a1;
  v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant] = 1;
  swift_weakAssign();
  v14 = &v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
  *v14 = _ViewInputs.base.modify;
  v14[1] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 1;
  v21.receiver = v12;
  v21.super_class = v11;
  v15 = a1;
  v16 = objc_msgSendSuper2(&v21, sel_init);
  swift_beginAccess();
  v17 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v2 + 96) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, v4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 96) = v20;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v17;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextEffectsAnimationController.Duration(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

void TextEffectsAnimationController.clearDisplayLink()()
{
  uint64_t v0;
  void *v1;
  void *v2;

  *(_BYTE *)(v0 + 40) = 0;
  v1 = *(void **)(v0 + 32);
  if (v1)
    objc_msgSend(v1, sel_invalidate);
  *(_QWORD *)(v0 + 32) = 0;
  swift_unknownObjectRelease();
  v2 = *(void **)(v0 + 48);
  if (v2)
  {
    objc_msgSend(v2, sel_invalidate);
    v2 = *(void **)(v0 + 48);
  }
  *(_QWORD *)(v0 + 48) = 0;

}

uint64_t TextEffectsAnimationController.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  *(CFTimeInterval *)(v0 + 56) = CACurrentMediaTime();
  v1 = MEMORY[0x24BEE4B00];
  v2 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v0 + 64) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 80) = v1;
  *(_QWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v1;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  v3 = (_QWORD *)swift_allocObject();
  v3[5] = v2;
  v3[6] = v1;
  v3[2] = v1;
  v3[3] = v1;
  v3[4] = v1;
  swift_beginAccess();
  v3[5] = v2;
  swift_bridgeObjectRelease();
  v3[7] = 0;
  *(_QWORD *)(v0 + 112) = v3;
  *(_QWORD *)(v0 + 120) = v2;
  return v0;
}

uint64_t TextEffectsAnimationController.deinit()
{
  uint64_t v0;

  TextEffectsAnimationController.clearDisplayLink()();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TextEffectsAnimationController.__deallocating_deinit()
{
  TextEffectsAnimationController.deinit();
  return swift_deallocClassInstance();
}

BOOL TextEffectsAnimationController.startExternalDisplayLink()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  id v11;
  _QWORD v13[6];

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(void **)(v0 + 32);
    swift_unknownObjectRetain();
    if (v2)
      objc_msgSend(v2, sel_invalidate);
    v3 = *MEMORY[0x24BDE5430];
    v4 = *(_DWORD *)(MEMORY[0x24BDE5430] + 4);
    v5 = *(_DWORD *)(MEMORY[0x24BDE5430] + 8);
    v6 = swift_allocObject();
    swift_weakInit();
    v13[4] = partial apply for closure #1 in TextEffectsAnimationController.startExternalDisplayLink();
    v13[5] = v6;
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
    v13[3] = &block_descriptor_5;
    v7 = _Block_copy(v13);
    swift_release();
    LODWORD(v8) = v3;
    LODWORD(v9) = v4;
    LODWORD(v10) = v5;
    v11 = objc_msgSend(v1, sel_frameRateRequest_block_, v7, v8, v9, v10);
    swift_unknownObjectRelease();
    _Block_release(v7);
    *(_QWORD *)(v0 + 32) = v11;
    swift_unknownObjectRelease();
  }
  return v1 != 0;
}

uint64_t closure #1 in TextEffectsAnimationController.startExternalDisplayLink()(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  objc_msgSend(a1, sel_targetTimestamp);
  v2 = v1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = v2;
    TextEffectsAnimationController.displayLinkUpdate(at:removeFinished:)(&v4, 1);
    return swift_release();
  }
  return result;
}

void TextEffectsAnimationController.displayLinkUpdate(at:removeFinished:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  SwiftUI::Time v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  double v48[3];

  v3 = v2;
  v5 = *(double *)a1;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 72);
  v7 = v6 + 56;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v6 + 56);
  v11 = v2 + 80;
  v12 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  if (v10)
    goto LABEL_6;
LABEL_7:
  v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v16 < v12)
  {
    v17 = *(_QWORD *)(v7 + 8 * v16);
    ++v13;
    if (v17)
      goto LABEL_20;
    v13 = v16 + 1;
    if (v16 + 1 < v12)
    {
      v17 = *(_QWORD *)(v7 + 8 * v13);
      if (v17)
        goto LABEL_20;
      v13 = v16 + 2;
      if (v16 + 2 < v12)
      {
        v17 = *(_QWORD *)(v7 + 8 * v13);
        if (!v17)
        {
          v18 = v16 + 3;
          if (v18 < v12)
          {
            v17 = *(_QWORD *)(v7 + 8 * v18);
            if (v17)
            {
              v13 = v18;
              goto LABEL_20;
            }
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                break;
              if (v13 >= v12)
                goto LABEL_25;
              v17 = *(_QWORD *)(v7 + 8 * v13);
              ++v18;
              if (v17)
                goto LABEL_20;
            }
            __break(1u);
            goto LABEL_50;
          }
          goto LABEL_25;
        }
LABEL_20:
        v10 = (v17 - 1) & v17;
        for (i = __clz(__rbit64(v17)) + (v13 << 6); ; i = v14 | (v13 << 6))
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * i);
          swift_beginAccess();
          v20 = *(_QWORD *)v11;
          if (*(_QWORD *)(*(_QWORD *)v11 + 16)
            && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19), (v22 & 1) != 0))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
            swift_endAccess();
            v24 = *(void (**)(uint64_t))(*(_QWORD *)v23 + 88);
            v25 = swift_retain();
            v24(v25);
            swift_release();
            if (!v10)
              goto LABEL_7;
          }
          else
          {
            swift_endAccess();
            if (!v10)
              goto LABEL_7;
          }
LABEL_6:
          v14 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
    }
  }
LABEL_25:
  swift_release();
  *(double *)(v3 + 56) = v5;
  v26 = MEMORY[0x23B7C9E44](v3 + 16);
  if (v26)
  {
    v28 = (void *)v26;
    v48[0] = v5;
    TextEffectsRenderer.notifyDisplayLinkObservers(with:)(v27);

  }
  v29 = *(_QWORD *)(v3 + 64);
  v30 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 16);
  v48[0] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = specialized TextEffectsAnimationController.TimingMap.update(at:)(v48, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 16);
  if (v30)
  {
    if (!v32)
      TextEffectsAnimationController.clearDisplayLink()();
  }
  else if (v32)
  {
    if ((*(_BYTE *)(v3 + 40) & 1) == 0)
    {
      *(_BYTE *)(v3 + 40) = 1;
      *(CFTimeInterval *)(v3 + 56) = CACurrentMediaTime();
      if ((TextEffectsAnimationController.startExternalDisplayLink()() & 1) == 0 && !*(_QWORD *)(v3 + 48))
      {
        v33 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v3, sel_displayLink_);
        v34 = *(void **)(v3 + 48);
        *(_QWORD *)(v3 + 48) = v33;

        v35 = *(void **)(v3 + 48);
        if (!v35)
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v36 = (void *)objc_opt_self();
        v37 = v35;
        v38 = objc_msgSend(v36, sel_mainRunLoop);
        objc_msgSend(v37, sel_addToRunLoop_forMode_, v38, *MEMORY[0x24BDBCB80]);

      }
    }
  }
  swift_retain();
  v39 = specialized _NativeSet.filter(_:)(v31, v3);
  swift_release();
  if ((a2 & 1) == 0 || !*(_QWORD *)(v39 + 16))
    goto LABEL_45;
  v40 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 16);
  closure #1 in TextEffectsAnimationController.removeAnimations(_:)(v39, (uint64_t *)v3);
  v41 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 16);
  if (v40)
  {
    if (!v41)
      TextEffectsAnimationController.clearDisplayLink()();
    goto LABEL_45;
  }
  if (!v41
    || (*(_BYTE *)(v3 + 40) & 1) != 0
    || (*(_BYTE *)(v3 + 40) = 1,
        *(CFTimeInterval *)(v3 + 56) = CACurrentMediaTime(),
        (TextEffectsAnimationController.startExternalDisplayLink()() & 1) != 0)
    || *(_QWORD *)(v3 + 48))
  {
LABEL_45:
    swift_release();
    return;
  }
LABEL_47:
  v42 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v3, sel_displayLink_);
  v43 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v42;

  v44 = *(void **)(v3 + 48);
  if (v44)
  {
    v45 = (void *)objc_opt_self();
    v46 = v44;
    v47 = objc_msgSend(v45, sel_mainRunLoop);
    objc_msgSend(v46, sel_addToRunLoop_forMode_, v47, *MEMORY[0x24BDBCB80]);
    swift_release();

    return;
  }
LABEL_51:
  __break(1u);
}

void thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t type metadata accessor for TextEffectsAnimationController()
{
  return objc_opt_self();
}

uint64_t TextEffectsAnimationController.validateInfosIfNeeded()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t result;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t (*v37)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *);
  void *v38;
  uint64_t v39;

  v33 = v0 + 15;
  swift_beginAccess();
  v1 = v0[15];
  v2 = v1 + 56;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v6 = v0 + 10;
  v35 = v0;
  v7 = v0 + 14;
  swift_bridgeObjectRetain();
  result = swift_beginAccess();
  v9 = 0;
  v10 = (unint64_t)(v3 + 63) >> 6;
  v34 = v10;
  v36 = v0 + 14;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_21;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v13 >= v10)
      goto LABEL_33;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_33;
      v14 = *(_QWORD *)(v2 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_33;
        v14 = *(_QWORD *)(v2 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_21:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    swift_beginAccess();
    v17 = *v6;
    if (*(_QWORD *)(*v6 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) != 0))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_endAccess();
      v21 = *v7;
      swift_beginAccess();
      result = specialized Set.contains(_:)(v16, *(_QWORD *)(v21 + 40));
      if ((result & 1) == 0)
      {
        swift_beginAccess();
        v22 = *(_QWORD *)(v21 + 16);
        if (!*(_QWORD *)(v22 + 16))
          goto LABEL_4;
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
        if ((v24 & 1) == 0)
          goto LABEL_4;
        v25 = *(_QWORD **)(*(_QWORD *)(v22 + 56) + 8 * v23);
        swift_endAccess();
        v26 = v35[14];
        v37 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *))((*MEMORY[0x24BEE4EA0] & *v25)
                                                                                    + 0xB0);
        swift_retain();
        v27 = v25;
        swift_retain();
        swift_retain();
        LOBYTE(v25) = v37(v20, MEMORY[0x24BEE4B00], 0, v26, v35);
        swift_release();
        swift_release();
        if ((v25 & 1) != 0)
        {

          result = swift_release();
          v10 = v34;
          v2 = v1 + 56;
          v7 = v36;
        }
        else
        {
          v38 = v27;
          swift_beginAccess();
          v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
          v10 = v34;
          v2 = v1 + 56;
          v7 = v36;
          if ((v29 & 1) != 0)
          {
            v30 = v28;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v32 = *v6;
            v39 = *v6;
            *v6 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v32 = v39;
            }
            specialized _NativeDictionary._delete(at:)(v30, v32);
            *v6 = v32;
            swift_release();
            swift_bridgeObjectRelease();
            v7 = v36;
          }
          swift_endAccess();

          result = swift_release();
        }
      }
    }
    else
    {
LABEL_4:
      result = swift_endAccess();
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
  {
LABEL_33:
    swift_release();
    *v33 = MEMORY[0x24BEE4B08];
    return swift_bridgeObjectRelease();
  }
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v10)
      goto LABEL_33;
    v14 = *(_QWORD *)(v2 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t closure #1 in TextEffectsAnimationController.invalidateAnimations(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  void (*v41)(char *);
  char *v42;
  uint64_t v43;
  uint64_t v44;

  swift_beginAccess();
  TextEffectsAnimationController.TimingMap.remove(_:)(a2);
  swift_endAccess();
  v4 = a2 + 56;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 56);
  v43 = a1;
  v8 = (uint64_t *)(a1 + 80);
  v9 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_22;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v14 >= v9)
      goto LABEL_25;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_25;
      v15 = *(_QWORD *)(v4 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_25;
        v15 = *(_QWORD *)(v4 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_21:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v13);
    swift_beginAccess();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
    if ((v19 & 1) != 0)
    {
      v20 = v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v22 = *v8;
      v44 = *v8;
      *v8 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v22 = v44;
      }
      specialized _NativeDictionary._delete(at:)(v20, v22);
      *v8 = v22;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    result = swift_release();
  }
  v16 = v14 + 3;
  if (v16 >= v9)
  {
LABEL_25:
    swift_release();
    v23 = MEMORY[0x23B7C9E44](v43 + 16);
    if (v23)
    {
      v24 = (void *)v23;
      TextEffectsRenderer.notifyStateObservers(with:time:)(a2);

    }
    v25 = 1 << *(_BYTE *)(a2 + 32);
    v26 = -1;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    v27 = v26 & *(_QWORD *)(a2 + 56);
    v28 = (uint64_t *)(v43 + 96);
    v29 = (unint64_t)(v25 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v30 = 0;
    while (1)
    {
      if (v27)
      {
        v31 = __clz(__rbit64(v27));
        v27 &= v27 - 1;
        v32 = v31 | (v30 << 6);
      }
      else
      {
        v33 = v30 + 1;
        if (__OFADD__(v30, 1))
          goto LABEL_53;
        if (v33 >= v29)
          return swift_release();
        v34 = *(_QWORD *)(v4 + 8 * v33);
        ++v30;
        if (!v34)
        {
          v30 = v33 + 1;
          if (v33 + 1 >= v29)
            return swift_release();
          v34 = *(_QWORD *)(v4 + 8 * v30);
          if (!v34)
          {
            v30 = v33 + 2;
            if (v33 + 2 >= v29)
              return swift_release();
            v34 = *(_QWORD *)(v4 + 8 * v30);
            if (!v34)
            {
              v35 = v33 + 3;
              if (v35 >= v29)
                return swift_release();
              v34 = *(_QWORD *)(v4 + 8 * v35);
              if (!v34)
              {
                while (1)
                {
                  v30 = v35 + 1;
                  if (__OFADD__(v35, 1))
                    goto LABEL_55;
                  if (v30 >= v29)
                    return swift_release();
                  v34 = *(_QWORD *)(v4 + 8 * v30);
                  ++v35;
                  if (v34)
                    goto LABEL_46;
                }
              }
              v30 = v35;
            }
          }
        }
LABEL_46:
        v27 = (v34 - 1) & v34;
        v32 = __clz(__rbit64(v34)) + (v30 << 6);
      }
      v36 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v32);
      swift_beginAccess();
      v37 = *v28;
      if (*(_QWORD *)(*v28 + 16) && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(v36), (v39 & 1) != 0))
      {
        v40 = *(char **)(*(_QWORD *)(v37 + 56) + 8 * v38);
        result = swift_endAccess();
        if (*(_QWORD *)&v40[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state])
        {
          *(_QWORD *)&v40[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 0;
          v41 = *(void (**)(char *))&v40[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
          v42 = v40;
          swift_retain();
          v41(v42);

          result = swift_release();
        }
      }
      else
      {
        result = swift_endAccess();
      }
    }
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v9)
      goto LABEL_25;
    v15 = *(_QWORD *)(v4 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_21;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t TextEffectsAnimationController.TimingMap.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  void (*v24)(_QWORD *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  _BYTE *v30;
  int v31;
  const char *v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint8_t *v37;
  os_signpost_id_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  char v41;
  unint64_t v42;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[4];
  int v53;
  _BYTE *v54;
  uint64_t *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  _BYTE *v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  int64_t v69;
  _QWORD v70[5];

  v2 = v1;
  v4 = type metadata accessor for OSSignpostError();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v56 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OSSignpostID();
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v54 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v52[-v9];
  v11 = *(_QWORD *)(a1 + 56);
  v62 = a1 + 56;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v63 = (unint64_t)(v12 + 63) >> 6;
  v53 = *MEMORY[0x24BEE7810];
  v67 = v1 + 1;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v64 = v10;
  v61 = a1;
  v55 = v1;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_20;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v19 >= v63)
      return swift_release();
    v20 = *(_QWORD *)(v62 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v63)
        return swift_release();
      v20 = *(_QWORD *)(v62 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v63)
          return swift_release();
        v20 = *(_QWORD *)(v62 + 8 * v16);
        if (!v20)
          break;
      }
    }
LABEL_19:
    v14 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_20:
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v18);
    v24 = specialized Dictionary.subscript.modify(v70, v22);
    if (*(_QWORD *)(v23 + 48) >= 2uLL)
    {
      v25 = v23;
      v68 = v14;
      v69 = v16;
      v26 = one-time initialization token for textEffects;
      swift_retain();
      if (v26 != -1)
        swift_once();
      v27 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v27, (uint64_t)static Signpost.textEffects);
      v28 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v29 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        LODWORD(v66) = v29;
        swift_retain();
        v30 = v56;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v31 = (*(uint64_t (**)(_BYTE *, uint64_t))(v57 + 88))(v30, v58);
        v32 = "[Error] Interval already ended";
        if (v31 != v53)
        {
          (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v56, v58);
          v32 = "";
        }
        v33 = v59;
        v34 = v54;
        v35 = v10;
        v36 = v60;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v54, v35, v60);
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        v38 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v28, (os_signpost_type_t)v66, v38, "Animation", v32, v37, 2u);
        MEMORY[0x23B7C9D54](v37, -1, -1);

        v39 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
        v39(v64, v36);
        swift_release();
        v40 = v36;
        v10 = v64;
        v39(v34, v40);
        v2 = v55;
        a1 = v61;
      }
      else
      {

        (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v10, v60);
        swift_release();
      }
      v14 = v68;
      v16 = v69;
      swift_release();
      *(_QWORD *)(v25 + 48) = 0;
    }
    ((void (*)(_QWORD *, _QWORD))v24)(v70, 0);
    specialized Set._Variant.remove(_:)(v22);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    if ((v41 & 1) != 0)
    {
      v42 = result;
      v68 = v14;
      v69 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v44 = *v2;
      v70[0] = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v44 = v70[0];
      }
      v45 = *(_QWORD *)(v44 + 56) + 120 * v42;
      v46 = *(_QWORD *)(v45 + 56);
      v47 = *(_QWORD *)(v45 + 64);
      v48 = *(_QWORD *)(v45 + 72);
      v49 = *(_BYTE *)(v45 + 80);
      v50 = *(_QWORD *)(v45 + 96);
      v66 = *(_QWORD *)(v45 + 88);
      v51 = *(_QWORD *)(v45 + 104);
      v65 = *(unsigned __int8 *)(v45 + 112);
      specialized _NativeDictionary._delete(at:)(v42, v44);
      *v2 = v44;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v46, v47, v48, v49);
      result = outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v66, v50, v51, v65);
      a1 = v61;
      v10 = v64;
      v14 = v68;
      v16 = v69;
    }
  }
  v21 = v19 + 3;
  if (v21 >= v63)
    return swift_release();
  v20 = *(_QWORD *)(v62 + 8 * v21);
  if (v20)
  {
    v16 = v21;
    goto LABEL_19;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v63)
      return swift_release();
    v20 = *(_QWORD *)(v62 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_19;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t closure #1 in TextEffectsAnimationController.removeAnimations(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  int64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  int64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char *v85;
  void (*v86)(char *);
  char *v87;
  uint64_t result;
  uint64_t (*v90)(uint64_t);
  uint64_t v91;
  int64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v2 = a1;
  v102 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = a2 + 8;
  v94 = a2 + 11;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v7 = 0;
  v8 = (unint64_t)(v3 + 63) >> 6;
  v96 = v2;
  v92 = v8;
  v93 = v6;
  while (1)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v7 << 6);
      goto LABEL_22;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    if (v12 >= v8)
      goto LABEL_52;
    v13 = *(_QWORD *)(v102 + 8 * v12);
    ++v7;
    if (!v13)
    {
      v7 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_52;
      v13 = *(_QWORD *)(v102 + 8 * v7);
      if (!v13)
      {
        v7 = v12 + 2;
        if (v12 + 2 >= v8)
          goto LABEL_52;
        v13 = *(_QWORD *)(v102 + 8 * v7);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v5 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v7 << 6);
LABEL_22:
    v15 = *v6;
    if (*(_QWORD *)(*v6 + 16))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(v15 + 56) + 120 * v17;
        v20 = *(_QWORD *)(v19 + 56);
        v21 = *(_QWORD *)(v19 + 64);
        v105 = *(_QWORD *)(v19 + 72);
        v22 = *(_QWORD *)(v19 + 88);
        v23 = *(_QWORD *)(v19 + 104);
        v24 = *(_BYTE *)(v19 + 112);
        v104 = v23;
        v99 = v24;
        v103 = *(_BYTE *)(v19 + 80);
        if (*(_BYTE *)(v19 + 40) == 1)
        {
          v25 = *(_QWORD *)(v19 + 56);
          v26 = *(_QWORD *)(v19 + 64);
          if ((*(_BYTE *)(v19 + 80) & 1) == 0)
          {
            v101 = *(_QWORD *)(v19 + 64);
            v27 = *(_QWORD *)(v19 + 96);
            v28 = 0;
LABEL_33:
            swift_retain();
            outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v101, v105, v28);
            v30 = v22;
            outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v27, v104, v24);
            goto LABEL_34;
          }
        }
        else
        {
          v25 = *(_QWORD *)(v19 + 88);
          v26 = *(_QWORD *)(v19 + 96);
          if (!*(_BYTE *)(v19 + 112))
          {
            v101 = *(_QWORD *)(v19 + 64);
            v27 = *(_QWORD *)(v19 + 96);
            v28 = *(_BYTE *)(v19 + 80);
            goto LABEL_33;
          }
        }
        v95 = *(_QWORD *)(v19 + 96);
        v100 = v25;
        if (v25)
        {
          v90 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 104);
          swift_retain();
          v97 = v20;
          v101 = v21;
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v21, v105, v103);
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v95, v23, v24);
          swift_retain();
          v29 = swift_retain();
          if ((v90(v29) & 1) != 0 && !v26)
          {
            v27 = v95;
            v30 = v22;
            goto LABEL_34;
          }
LABEL_40:
          swift_beginAccess();
          v91 = v26;
          swift_retain();
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v37 = (_QWORD *)*v94;
          *v94 = 0x8000000000000000;
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
          v40 = v37[2];
          v41 = (v38 & 1) == 0;
          v42 = v40 + v41;
          if (__OFADD__(v40, v41))
            goto LABEL_109;
          v43 = v38;
          if (v37[3] >= v42)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
            v44 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
            if ((v43 & 1) != (v45 & 1))
              goto LABEL_111;
            v39 = v44;
          }
          v6 = v93;
          if ((v43 & 1) != 0)
          {
            v46 = (_QWORD *)(v37[7] + 16 * v39);
            swift_release();
            swift_release();
            *v46 = v100;
            v46[1] = v91;
          }
          else
          {
            v37[(v39 >> 6) + 8] |= 1 << v39;
            *(_QWORD *)(v37[6] + 8 * v39) = v16;
            v47 = (_QWORD *)(v37[7] + 16 * v39);
            *v47 = v100;
            v47[1] = v91;
            v48 = v37[2];
            v49 = __OFADD__(v48, 1);
            v50 = v48 + 1;
            if (v49)
              goto LABEL_110;
            v37[2] = v50;
          }
          *v94 = (uint64_t)v37;
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_release();
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v97, v21, v105, v103);
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v95, v104, v99);
          swift_release();
          swift_release();
          v2 = v96;
          v8 = v92;
        }
        else
        {
          swift_retain();
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v21, v105, v103);
          v27 = v95;
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v95, v23, v24);
          swift_retain();
          if (v26)
          {
            v97 = v20;
            goto LABEL_40;
          }
          v101 = v21;
          v30 = v22;
LABEL_34:
          swift_beginAccess();
          v31 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
          if ((v32 & 1) != 0)
          {
            v33 = v31;
            v98 = v20;
            v34 = swift_isUniquelyReferenced_nonNull_native();
            v35 = *v94;
            v106 = *v94;
            *v94 = 0x8000000000000000;
            if (!v34)
            {
              specialized _NativeDictionary.copy()();
              v35 = v106;
            }
            v9 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 16 * v33);
            specialized _NativeDictionary._delete(at:)(v33, v35);
            *v94 = v35;
            swift_bridgeObjectRelease();
            v8 = v92;
            v20 = v98;
          }
          else
          {
            v9 = 1;
            v8 = v92;
          }
          swift_endAccess();
          swift_release();
          swift_release();
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v101, v105, v103);
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v30, v27, v104, v24);
          outlined consume of EnvironmentValues?(v9);
          v2 = v96;
          v6 = v93;
        }
      }
    }
  }
  v14 = v12 + 3;
  if (v14 < v8)
  {
    v13 = *(_QWORD *)(v102 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v7 = v14 + 1;
        if (__OFADD__(v14, 1))
          break;
        if (v7 >= v8)
          goto LABEL_52;
        v13 = *(_QWORD *)(v102 + 8 * v7);
        ++v14;
        if (v13)
          goto LABEL_21;
      }
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    v7 = v14;
    goto LABEL_21;
  }
LABEL_52:
  swift_release();
  swift_beginAccess();
  TextEffectsAnimationController.TimingMap.remove(_:)(v2);
  swift_endAccess();
  v51 = 1 << *(_BYTE *)(v2 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & *(_QWORD *)(v2 + 56);
  v54 = a2 + 10;
  v55 = (unint64_t)(v51 + 63) >> 6;
  swift_bridgeObjectRetain();
  v56 = 0;
  while (2)
  {
    if (v53)
    {
      v57 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      v58 = v57 | (v56 << 6);
LABEL_73:
      v62 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v58);
      swift_beginAccess();
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v62);
      if ((v64 & 1) != 0)
      {
        v65 = v63;
        v66 = swift_isUniquelyReferenced_nonNull_native();
        v67 = *v54;
        v107 = *v54;
        *v54 = 0x8000000000000000;
        if (!v66)
        {
          specialized _NativeDictionary.copy()();
          v67 = v107;
        }
        specialized _NativeDictionary._delete(at:)(v65, v67);
        *v54 = v67;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_release();
      continue;
    }
    break;
  }
  v59 = v56 + 1;
  if (__OFADD__(v56, 1))
    goto LABEL_104;
  if (v59 < v55)
  {
    v60 = *(_QWORD *)(v102 + 8 * v59);
    ++v56;
    if (!v60)
    {
      v56 = v59 + 1;
      if (v59 + 1 >= v55)
        goto LABEL_76;
      v60 = *(_QWORD *)(v102 + 8 * v56);
      if (!v60)
      {
        v56 = v59 + 2;
        if (v59 + 2 >= v55)
          goto LABEL_76;
        v60 = *(_QWORD *)(v102 + 8 * v56);
        if (!v60)
        {
          v61 = v59 + 3;
          if (v61 >= v55)
            goto LABEL_76;
          v60 = *(_QWORD *)(v102 + 8 * v61);
          if (!v60)
          {
            while (1)
            {
              v56 = v61 + 1;
              if (__OFADD__(v61, 1))
                break;
              if (v56 >= v55)
                goto LABEL_76;
              v60 = *(_QWORD *)(v102 + 8 * v56);
              ++v61;
              if (v60)
                goto LABEL_72;
            }
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }
          v56 = v61;
        }
      }
    }
LABEL_72:
    v53 = (v60 - 1) & v60;
    v58 = __clz(__rbit64(v60)) + (v56 << 6);
    goto LABEL_73;
  }
LABEL_76:
  swift_release();
  v68 = MEMORY[0x23B7C9E44](a2 + 2);
  if (v68)
  {
    v69 = (void *)v68;
    TextEffectsRenderer.notifyStateObservers(with:time:)(v2);

  }
  v70 = 1 << *(_BYTE *)(v2 + 32);
  v71 = -1;
  if (v70 < 64)
    v71 = ~(-1 << v70);
  v72 = v71 & *(_QWORD *)(v2 + 56);
  v73 = a2 + 12;
  v74 = (unint64_t)(v70 + 63) >> 6;
  swift_bridgeObjectRetain();
  v75 = 0;
  while (2)
  {
    if (v72)
    {
      v76 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      v77 = v76 | (v75 << 6);
LABEL_98:
      v81 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v77);
      swift_beginAccess();
      v82 = *v73;
      if (*(_QWORD *)(*v73 + 16) && (v83 = specialized __RawDictionaryStorage.find<A>(_:)(v81), (v84 & 1) != 0))
      {
        v85 = *(char **)(*(_QWORD *)(v82 + 56) + 8 * v83);
        swift_endAccess();
        if (*(_QWORD *)&v85[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] != 1)
        {
          *(_QWORD *)&v85[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 1;
          v86 = *(void (**)(char *))&v85[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
          v87 = v85;
          swift_retain();
          v86(v87);
          v2 = v96;

          swift_release();
        }
      }
      else
      {
        swift_endAccess();
      }
      continue;
    }
    break;
  }
  v78 = v75 + 1;
  if (__OFADD__(v75, 1))
    goto LABEL_105;
  if (v78 >= v74)
    return swift_release();
  v79 = *(_QWORD *)(v102 + 8 * v78);
  ++v75;
  if (v79)
    goto LABEL_97;
  v75 = v78 + 1;
  if (v78 + 1 >= v74)
    return swift_release();
  v79 = *(_QWORD *)(v102 + 8 * v75);
  if (v79)
    goto LABEL_97;
  v75 = v78 + 2;
  if (v78 + 2 >= v74)
    return swift_release();
  v79 = *(_QWORD *)(v102 + 8 * v75);
  if (v79)
  {
LABEL_97:
    v72 = (v79 - 1) & v79;
    v77 = __clz(__rbit64(v79)) + (v75 << 6);
    goto LABEL_98;
  }
  v80 = v78 + 3;
  if (v80 >= v74)
    return swift_release();
  v79 = *(_QWORD *)(v102 + 8 * v80);
  if (v79)
  {
    v75 = v80;
    goto LABEL_97;
  }
  while (1)
  {
    v75 = v80 + 1;
    if (__OFADD__(v80, 1))
      break;
    if (v75 >= v74)
      return swift_release();
    v79 = *(_QWORD *)(v102 + 8 * v75);
    ++v80;
    if (v79)
      goto LABEL_97;
  }
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(Swift::UInt64 a1, char a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;

  v14 = *(_QWORD *)v8;
  v15 = a2 & 1;
  v16 = a8 & 1;
  v17 = *a3;
  swift_beginAccess();
  v18 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 16);
  closure #1 in TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(v8, a1, a4, a5, a6, a7, v16, v15, v17);
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 16);
  if (v18)
  {
    if (!v19)
      TextEffectsAnimationController.clearDisplayLink()();
  }
  else if (v19)
  {
    if ((*(_BYTE *)(v8 + 40) & 1) == 0)
    {
      *(_BYTE *)(v8 + 40) = 1;
      *(CFTimeInterval *)(v8 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(_QWORD *)(v8 + 48))
      {
        v20 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v8, sel_displayLink_, v14);
        v21 = *(void **)(v8 + 48);
        *(_QWORD *)(v8 + 48) = v20;

        v22 = *(void **)(v8 + 48);
        if (v22)
        {
          v23 = (void *)objc_opt_self();
          v24 = v22;
          v25 = objc_msgSend(v23, sel_mainRunLoop);
          objc_msgSend(v24, sel_addToRunLoop_forMode_, v25, *MEMORY[0x24BDBCB80]);

        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t closure #1 in TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, double a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t);
  char v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  double v53;

  v50 = a8 & 1;
  v17 = TextEffectsAnimationController.currentPhaseConfiguration(with:)(a2);
  v19 = v18;
  v49 = v20;
  v52 = v21 & 1;
  v22 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(a2, a3, a4, a5);
  v24 = v23;
  v51 = v25;
  v27 = v26 & 1;
  if ((a7 & 1) != 0)
  {
    swift_beginAccess();
    v29 = Text.Effect.Keyframes.validAnimation(_:)(a2, *(_QWORD *)(a1 + 112));
    if (v29)
    {
      v30 = v29;
      v48 = v22;
      if (v52)
      {
        swift_retain();
        swift_retain();
        v31 = v17;
        v32 = v19;
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      v44 = v27;
      v46 = v19;
      v47 = v17;
      v45 = v24;
      if (v27)
      {
        swift_retain();
        v33 = v48;
        swift_retain();
      }
      else
      {
        v33 = 0;
        v24 = 0;
      }
      v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v35 = *(_QWORD *)(a1 + 112);
      v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v30) + 0x78);
      swift_retain();
      swift_retain();
      v43 = v36(v31, v32, v33, v24, v50, v34, 0, v35, a1);
      LOBYTE(v36) = v37;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v28 = 0;
      if ((v36 & 1) != 0)
        a6 = 0x3FF0000000000000;
      else
        a6 = v43;
      v19 = v46;
      v17 = v47;
      v22 = v48;
      v24 = v45;
      LOBYTE(v27) = v44;
    }
    else
    {
      a6 = 0;
      v28 = 1;
    }
  }
  else
  {
    v28 = 0;
  }
  v53 = a9;
  swift_beginAccess();
  TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(a2, (uint64_t *)&v53, a6, v28, v50, v17, v19, v49, v52, v22, v24, v51, v27);
  swift_endAccess();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = a2;
  v39 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  v40 = MEMORY[0x23B7C9E44](a1 + 16);
  if (v40)
  {
    v41 = (void *)v40;
    TextEffectsRenderer.notifyStateObservers(with:time:)(v39);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v24, v51, v27);
  return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v19, v49, v52);
}

uint64_t TextEffectsAnimationController.currentPhaseConfiguration(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v4 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(v4 + 56) + 120 * v5;
    v8 = *(_QWORD *)(v7 + 56);
    outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, *(_QWORD *)(v7 + 64), *(_QWORD *)(v7 + 72), *(_BYTE *)(v7 + 80));
  }
  else
  {
    swift_beginAccess();
    v9 = *(_QWORD *)(v2 + 88);
    if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v11 & 1) != 0))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      swift_endAccess();
      swift_retain();
      swift_retain();
    }
    else
    {
      swift_endAccess();
      return 0;
    }
  }
  return v8;
}

uint64_t TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  swift_beginAccess();
  v9 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v4 + 112));
  if (!v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a2;
  }
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 88);
  if (*(_QWORD *)(v10 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
    swift_retain();
    swift_retain();
  }
  else
  {
    v13 = 1;
  }
  v14 = swift_endAccess();
  v15 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (a3)
  {
    a2 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v9) + 0x80))(a2, a3);
    if (a4)
    {
LABEL_8:
      (*(void (**)(uint64_t))((*v15 & *v9) + 0x90))(a4);
      outlined consume of EnvironmentValues?(v13);

      return a2;
    }
  }
  else
  {
    if (v13 == 1 || (v14 = swift_retain(), (v16 = v13) == 0))
    {
      v14 = (*(uint64_t (**)(uint64_t))((*v15 & *v9) + 0x88))(v14);
      v16 = v14;
    }
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 112))(v14);
    swift_release();
    if (a4)
      goto LABEL_8;
  }

  if (v13 != 1)
    swift_release();
  return a2;
}

uint64_t TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(Swift::UInt64 a1, uint64_t *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(_QWORD *);
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(_QWORD *);
  uint64_t v49;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  Swift::UInt64 v69[4];
  char v70;
  _QWORD v71[3];
  char v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;

  v14 = v13;
  v17 = *a2;
  v18 = *v13;
  v19 = *a2;
  if (*(_QWORD *)(v18 + 16))
  {
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    v19 = v17;
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(v18 + 56) + 120 * v20;
      v60 = *(_QWORD *)(v22 + 16);
      v61 = *(_QWORD *)(v22 + 8);
      v52 = *(unsigned __int8 *)(v22 + 25);
      v59 = *(_QWORD *)(v22 + 32);
      v55 = *(_QWORD *)v22;
      v57 = *(unsigned __int8 *)(v22 + 40);
      v63 = a5;
      v24 = *(_QWORD *)(v22 + 48);
      v23 = *(_QWORD *)(v22 + 56);
      v26 = *(_QWORD *)(v22 + 64);
      v25 = *(_QWORD *)(v22 + 72);
      v27 = *(_BYTE *)(v22 + 80);
      v28 = *(_QWORD *)(v22 + 96);
      v62 = *(_QWORD *)(v22 + 88);
      v29 = *(_QWORD *)(v22 + 104);
      v30 = *(_BYTE *)(v22 + 112);
      LOBYTE(v71[0]) = *(_BYTE *)(v22 + 24);
      LOBYTE(v69[0]) = v27;
      v70 = v30;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v23, v26, v25, v27);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v62, v28, v29, v30);
      v31 = v24;
      a5 = v63;
      v19 = v17;
      if (v31 != 1)
      {
        v32 = 256;
        if (!v52)
          v32 = 0;
        v19 = v55;
        outlined consume of TextEffectsAnimationController.Timing?(v55, v61, v60, v32 | LOBYTE(v71[0]), v59, v57, v31, v23, v26, v25, v69[0], v62, v28, v29, v70);
      }
    }
  }
  v33 = a5 & 1;
  v34 = specialized Dictionary.subscript.modify(v71, a1);
  if (*(_QWORD *)(v35 + 48) != 1)
    TextEffectsAnimationController.Timing.endAnimationInterval()();
  ((void (*)(_QWORD *, _QWORD))v34)(v71, 0);
  v36 = a13;
  v37 = a12;
  specialized Set._Variant.remove(_:)(a1);
  v38 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v39 & 1) != 0)
  {
    v40 = v38;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v42 = *v14;
    v71[0] = *v14;
    *v14 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v42 = v71[0];
    }
    v43 = *(_QWORD *)(v42 + 56) + 120 * v40;
    v44 = *(_QWORD *)(v43 + 56);
    v45 = *(_QWORD *)(v43 + 64);
    v46 = *(_QWORD *)(v43 + 72);
    v56 = *(_QWORD *)(v43 + 96);
    v58 = *(_QWORD *)(v43 + 88);
    v54 = *(_QWORD *)(v43 + 104);
    v51 = *(_BYTE *)(v43 + 80);
    v53 = *(_BYTE *)(v43 + 112);
    specialized _NativeDictionary._delete(at:)(v40, v42);
    *v14 = v42;
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v44, v45, v46, v51);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v58, v56, v54, v53);
    v33 = a5 & 1;
    v37 = a12;
    v36 = a13;
  }
  v71[0] = v19;
  v71[1] = v17;
  v71[2] = a3;
  v72 = a4 & 1;
  v73 = v33;
  v74 = 0;
  v75 = 2;
  v76 = 0;
  v77 = a6;
  v78 = a7;
  v79 = a8;
  v80 = a9 & 1;
  v81 = a10;
  v82 = a11;
  v83 = v37;
  v84 = v36 & 1;
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a6, a7, a8, a9 & 1);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a10, a11, v37, v36 & 1);
  v47 = swift_isUniquelyReferenced_nonNull_native();
  v69[0] = *v14;
  *v14 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v71, a1, v47);
  *v14 = v69[0];
  swift_bridgeObjectRelease();
  v48 = specialized Dictionary.subscript.modify(v69, a1);
  if (*(_QWORD *)(v49 + 48) != 1)
    TextEffectsAnimationController.Timing.beginAnimationInterval()();
  ((void (*)(Swift::UInt64 *, _QWORD))v48)(v69, 0);
  return specialized Set._Variant.insert(_:)(v69, a1);
}

void TextEffectsAnimationController.pauseAnimation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;
  double v37;
  char v38;
  uint64_t v39;
  Swift::UInt64 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD v46[3];
  char v47;
  char v48;
  double v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v2 = v1;
  v4 = (uint64_t *)(v1 + 64);
  swift_beginAccess();
  v5 = v1 + 72;
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 16);
  v7 = CACurrentMediaTime();
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v10 & 1) != 0)
    {
      v34 = v2;
      v40 = a1;
      v41 = v6;
      v11 = *(_QWORD *)(v8 + 56) + 120 * v9;
      v12 = *(_QWORD *)v11;
      v13 = *(double *)(v11 + 8);
      v39 = *(_QWORD *)(v11 + 16);
      v35 = *(_BYTE *)(v11 + 25);
      v36 = *(_BYTE *)(v11 + 24);
      v37 = *(double *)(v11 + 32);
      v42 = *(unsigned __int8 *)(v11 + 40);
      v14 = *(_QWORD *)(v11 + 56);
      v15 = *(_QWORD *)(v11 + 64);
      v16 = *(_QWORD *)(v11 + 72);
      v17 = *(_BYTE *)(v11 + 80);
      v18 = *(_QWORD *)(v11 + 88);
      v19 = *(_QWORD *)(v11 + 96);
      v20 = *(_QWORD *)(v11 + 104);
      v21 = *(_BYTE *)(v11 + 112);
      v44 = *(_BYTE *)(v11 + 40);
      v45 = *(_QWORD *)(v11 + 48);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v20, v21);
      TextEffectsAnimationController.Timing.endAnimationInterval()();
      if (v13 >= v7)
        v22 = v13;
      else
        v22 = v7;
      v23 = v22;
      if (v42 == 1)
      {
        v23 = v37;
        v24 = 1;
      }
      else
      {
        v24 = 0;
      }
      v38 = v24;
      v46[0] = v12;
      *(double *)&v46[1] = v13;
      v46[2] = v39;
      v47 = v36;
      v48 = v35;
      v49 = v23;
      v50 = v24;
      v51 = v45;
      v52 = v14;
      v53 = v15;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      v57 = v19;
      v58 = v20;
      v59 = v21;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v20, v21);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v43 = *v4;
      *v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v46, v40, isUniquelyReferenced_nonNull_native);
      *v4 = v43;
      swift_bridgeObjectRelease();
      v26 = v38;
      if (!v44)
        v26 = 0;
      if (v42 && (v26 & 1) == 0)
        specialized Set._Variant.remove(_:)(v40);
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v20, v21);
      v6 = v41;
      v2 = v34;
    }
  }
  swift_endAccess();
  v27 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (v6)
  {
    if (!v27)
      TextEffectsAnimationController.clearDisplayLink()();
  }
  else if (v27)
  {
    if ((*(_BYTE *)(v2 + 40) & 1) == 0)
    {
      *(_BYTE *)(v2 + 40) = 1;
      *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(_QWORD *)(v2 + 48))
      {
        v28 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
        v29 = *(void **)(v2 + 48);
        *(_QWORD *)(v2 + 48) = v28;

        v30 = *(void **)(v2 + 48);
        if (v30)
        {
          v31 = (void *)objc_opt_self();
          v32 = v30;
          v33 = objc_msgSend(v31, sel_mainRunLoop);
          objc_msgSend(v32, sel_addToRunLoop_forMode_, v33, *MEMORY[0x24BDBCB80]);

        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t TextEffectsAnimationController.TimingMap.pause(_:at:)(uint64_t result, double *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  Swift::UInt64 v5;
  double v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  char v24;
  char v25;
  double v26;
  char v27;
  uint64_t v28;
  Swift::UInt64 v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD v34[3];
  char v35;
  char v36;
  double v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = result;
    v6 = *a2;
    result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v4 + 56) + 120 * result;
      v9 = *(_QWORD *)v8;
      v10 = *(double *)(v8 + 8);
      v28 = *(_QWORD *)(v8 + 16);
      v29 = v5;
      v24 = *(_BYTE *)(v8 + 25);
      v25 = *(_BYTE *)(v8 + 24);
      v26 = *(double *)(v8 + 32);
      v30 = *(unsigned __int8 *)(v8 + 40);
      v11 = *(_QWORD *)(v8 + 56);
      v13 = *(_QWORD *)(v8 + 64);
      v12 = *(_QWORD *)(v8 + 72);
      v14 = *(_BYTE *)(v8 + 80);
      v15 = *(_QWORD *)(v8 + 88);
      v16 = *(_QWORD *)(v8 + 96);
      v17 = *(_QWORD *)(v8 + 104);
      v18 = *(_BYTE *)(v8 + 112);
      v32 = *(_BYTE *)(v8 + 40);
      v33 = *(_QWORD *)(v8 + 48);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v13, v12, v14);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v16, v17, v18);
      TextEffectsAnimationController.Timing.endAnimationInterval()();
      if (v10 >= v6)
        v19 = v10;
      else
        v19 = v6;
      v20 = v19;
      if (v30 == 1)
      {
        v20 = v26;
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      v27 = v21;
      v34[0] = v9;
      *(double *)&v34[1] = v10;
      v34[2] = v28;
      v35 = v25;
      v36 = v24;
      v37 = v20;
      v38 = v21;
      v39 = v33;
      v40 = v11;
      v41 = v13;
      v42 = v12;
      v43 = v14;
      v44 = v15;
      v45 = v16;
      v46 = v17;
      v47 = v18;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v13, v12, v14);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v16, v17, v18);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v31 = *v3;
      *v3 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v34, v29, isUniquelyReferenced_nonNull_native);
      *v3 = v31;
      swift_bridgeObjectRelease();
      v23 = v27;
      if (!v32)
        v23 = 0;
      if (v30)
      {
        if ((v23 & 1) == 0)
          specialized Set._Variant.remove(_:)(v29);
      }
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v13, v12, v14);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v16, v17, v18);
    }
  }
  return result;
}

void TextEffectsAnimationController.resumeAnimation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double v12;
  double v13;
  Swift::UInt64 v14;
  char v15;
  char v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  BOOL v47;
  char v48;
  char v49;
  Swift::UInt64 v50;
  Swift::UInt64 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::UInt64 v55[4];
  char v56;
  char v57;
  double v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD v69[3];
  char v70;
  char v71;
  double v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;

  v2 = v1;
  v4 = (Swift::UInt64 *)(v1 + 64);
  swift_beginAccess();
  v5 = v1 + 72;
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 16);
  v7 = CACurrentMediaTime();
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v10 & 1) != 0)
    {
      v51 = a1;
      v52 = v6;
      v53 = v5;
      v54 = v2;
      v11 = *(_QWORD *)(v8 + 56) + 120 * v9;
      v13 = *(double *)v11;
      v12 = *(double *)(v11 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v15 = *(_BYTE *)(v11 + 24);
      v16 = *(_BYTE *)(v11 + 25);
      v58 = *(double *)(v11 + 32);
      v17 = v58;
      v18 = *(unsigned __int8 *)(v11 + 40);
      v19 = *(_QWORD *)(v11 + 48);
      v20 = *(_QWORD *)(v11 + 56);
      v21 = *(_QWORD *)(v11 + 64);
      v22 = *(_QWORD *)(v11 + 72);
      v23 = *(_BYTE *)(v11 + 80);
      v25 = *(_QWORD *)(v11 + 88);
      v24 = *(_QWORD *)(v11 + 96);
      v26 = *(_QWORD *)(v11 + 104);
      v27 = *(_BYTE *)(v11 + 112);
      *(double *)&v55[1] = v13;
      *(double *)&v55[2] = v12;
      v50 = v14;
      v55[3] = v14;
      v48 = v16;
      v49 = v15;
      v56 = v15;
      v57 = v16;
      v59 = v18;
      v60 = v19;
      v61 = v20;
      v62 = v21;
      v63 = v22;
      v64 = v23;
      v65 = v25;
      v66 = v24;
      v67 = v26;
      v68 = v27;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v21, v22, v23);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v25, v24, v26, v27);
      TextEffectsAnimationController.Timing.beginAnimationInterval()();
      if (v18)
      {
        v47 = v59 == 0;
        v28 = v18;
      }
      else
      {
        v47 = 0;
        if (v7 >= v58)
          v29 = v7;
        else
          v29 = v58;
        v30 = v29 - v58;
        v13 = v13 + v30;
        v12 = v12 + v30;
        v28 = 2;
        v17 = 0.0;
      }
      *(double *)v69 = v13;
      *(double *)&v69[1] = v12;
      v69[2] = v50;
      v70 = v49;
      v71 = v48;
      v72 = v17;
      v73 = v28;
      v74 = v60;
      v75 = v20;
      v76 = v21;
      v77 = v22;
      v78 = v23;
      v79 = v25;
      v80 = v24;
      v81 = v26;
      v82 = v27;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v21, v22, v23);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v25, v24, v26, v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v55[0] = *v4;
      *v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v69, v51, isUniquelyReferenced_nonNull_native);
      *v4 = v55[0];
      swift_bridgeObjectRelease();
      if (v18)
      {
        v5 = v53;
        if (v47)
          specialized Set._Variant.remove(_:)(v51);
      }
      else
      {
        v5 = v53;
        if (!v47)
          specialized Set._Variant.insert(_:)(v55, v51);
      }
      v32 = v61;
      v33 = v62;
      v34 = v63;
      v35 = v64;
      v36 = v65;
      v37 = v66;
      v38 = v67;
      v39 = v68;
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v32, v33, v34, v35);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v36, v37, v38, v39);
      v2 = v54;
      v6 = v52;
    }
  }
  swift_endAccess();
  v40 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (v6)
  {
    if (!v40)
      TextEffectsAnimationController.clearDisplayLink()();
  }
  else if (v40)
  {
    if ((*(_BYTE *)(v2 + 40) & 1) == 0)
    {
      *(_BYTE *)(v2 + 40) = 1;
      *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(_QWORD *)(v2 + 48))
      {
        v41 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
        v42 = *(void **)(v2 + 48);
        *(_QWORD *)(v2 + 48) = v41;

        v43 = *(void **)(v2 + 48);
        if (v43)
        {
          v44 = (void *)objc_opt_self();
          v45 = v43;
          v46 = objc_msgSend(v44, sel_mainRunLoop);
          objc_msgSend(v45, sel_addToRunLoop_forMode_, v46, *MEMORY[0x24BDBCB80]);

        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t TextEffectsAnimationController.duration(with:phase:configuration:variant:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = v5;
  swift_beginAccess();
  v12 = *(_QWORD *)(v5 + 64);
  if (*(_QWORD *)(v12 + 16))
  {
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(v12 + 56) + 120 * v13;
      if (*(_BYTE *)(v15 + 24) != 1)
        return *(_QWORD *)(v15 + 16);
    }
  }
  swift_beginAccess();
  result = (uint64_t)Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v6 + 112));
  if (result)
  {
    v17 = (_QWORD *)result;
    v42 = a5 & 1;
    v18 = TextEffectsAnimationController.currentPhaseConfiguration(with:)(a1);
    v20 = v19;
    v44 = v21;
    v23 = v22;
    v24 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(a1, a2, a3, a4);
    v26 = v25;
    v28 = v27;
    v43 = v23;
    v41 = v29;
    if ((v23 & 1) != 0)
    {
      swift_retain();
      swift_retain();
      v30 = v18;
      v31 = v20;
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v45 = v20;
    v46 = v18;
    v40 = v28;
    v39 = v26;
    if ((v28 & 1) != 0)
    {
      swift_retain();
      swift_retain();
      v32 = v24;
      v33 = v26;
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v35 = *(_QWORD *)(v6 + 112);
    v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v17) + 0x78);
    swift_retain();
    swift_retain();
    v37 = v36(v30, v31, v32, v33, v42, v34, 0, v35, v6);
    LOBYTE(v36) = v38;
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v24, v39, v41, v40 & 1);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v46, v45, v44, v43 & 1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if ((v36 & 1) != 0)
      return 0x3FF0000000000000;
    else
      return v37;
  }
  return result;
}

uint64_t TextEffectsAnimationController.duration(with:from:to:variant:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  char v25;

  v7 = v6;
  swift_beginAccess();
  v14 = *(_QWORD *)(v6 + 64);
  if (*(_QWORD *)(v14 + 16))
  {
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(v14 + 56) + 120 * v15;
      if (*(_BYTE *)(v17 + 24) != 1)
        return *(_QWORD *)(v17 + 16);
    }
  }
  swift_beginAccess();
  result = (uint64_t)Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v7 + 112));
  if (result)
  {
    v19 = (_QWORD *)result;
    v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v21 = *(_QWORD *)(v7 + 112);
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v19) + 0x78);
    swift_retain();
    swift_retain();
    v23 = v22(a2, a3, a4, a5, a6 & 1, v20, 0, v21, v7);
    v25 = v24;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    if ((v25 & 1) != 0)
      return 0x3FF0000000000000;
    else
      return v23;
  }
  return result;
}

uint64_t TextEffectsAnimationController.TimingMap.cancel(_:at:)(uint64_t result, uint64_t *a2)
{
  Swift::UInt64 *v2;
  Swift::UInt64 *v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  int v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = result;
    v6 = *a2;
    result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v4 + 56) + 120 * result;
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_BYTE *)(v8 + 24);
      v11 = *(_BYTE *)(v8 + 25);
      v12 = *(_QWORD *)(v8 + 32);
      v24 = *(unsigned __int8 *)(v8 + 40);
      v25 = v5;
      v13 = *(_QWORD *)(v8 + 48);
      v14 = *(_QWORD *)(v8 + 56);
      v15 = *(_QWORD *)(v8 + 64);
      v16 = *(_QWORD *)(v8 + 72);
      v17 = *(_BYTE *)(v8 + 80);
      v18 = *(_QWORD *)(v8 + 88);
      v19 = *(_QWORD *)(v8 + 96);
      v20 = *(_QWORD *)(v8 + 104);
      v21 = *(_BYTE *)(v8 + 112);
      if (v24 != 1)
        v12 = v6;
      v22 = *(_QWORD *)(v8 + 88);
      v27 = *(_OWORD *)v8;
      v28 = v9;
      v29 = v10;
      v30 = v11;
      v31 = v12;
      v32 = 1;
      v33 = v13;
      v34 = v14;
      v35 = v15;
      v36 = v16;
      v37 = v17;
      v38 = v18;
      v39 = v19;
      v40 = v20;
      v41 = v21;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v26 = *v3;
      *v3 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v27, v25, isUniquelyReferenced_nonNull_native);
      *v3 = v26;
      swift_bridgeObjectRelease();
      if (v24)
      {
        swift_release();
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
        return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      }
      else
      {
        specialized Set._Variant.insert(_:)(&v26, v25);
        swift_release();
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
        return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      }
    }
  }
  return result;
}

uint64_t TextEffectsAnimationController.TimingMap.resolve(_:duration:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v4 = v3;
  v5 = *v3;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = result;
    result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v5 + 56) + 120 * result;
      v11 = *(_BYTE *)(v10 + 25);
      v12 = *(_QWORD *)(v10 + 32);
      v13 = *(_BYTE *)(v10 + 40);
      v14 = *(_QWORD *)(v10 + 48);
      v15 = *(_QWORD *)(v10 + 56);
      v17 = *(_QWORD *)(v10 + 64);
      v16 = *(_QWORD *)(v10 + 72);
      v18 = *(_BYTE *)(v10 + 80);
      v19 = *(_QWORD *)(v10 + 88);
      v20 = *(_QWORD *)(v10 + 96);
      v21 = *(_QWORD *)(v10 + 104);
      v25 = *(_BYTE *)(v10 + 112);
      v27 = *(_OWORD *)v10;
      v28 = a2;
      v29 = a3 & 1;
      v30 = v11;
      v31 = v12;
      v32 = v13;
      v33 = v14;
      v34 = v15;
      v35 = v17;
      v36 = v16;
      v37 = v18;
      v22 = v19;
      v38 = v19;
      v39 = v20;
      v23 = v20;
      v40 = v21;
      v41 = v25;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v17, v16, v18);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v23, v21, v25);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v17, v16, v18);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v23, v21, v25);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v26 = *v4;
      *v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v27, v8, isUniquelyReferenced_nonNull_native);
      *v4 = v26;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v17, v16, v18);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v23, v21, v25);
    }
  }
  return result;
}

void closure #1 in TextEffectsAnimationController.restoreState(_:for:)(uint64_t a1, uint64_t a2, Swift::UInt64 a3, double a4)
{
  uint64_t v8;
  double v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  char v26;
  char v27;
  char v28;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(double *)(a1 + 24) - *(double *)(a1 + 16);
  if (v9 < 0.0)
    v9 = 0.0;
  v10 = a4 - v9;
  v26 = *(_BYTE *)(a1 + 56);
  outlined init with take of Text.Effect.Phase.Storage(&v26, &v27);
  outlined init with take of Text.Effect.Phase.Storage(&v27, &v28);
  if (v28 == 3)
  {
    v25 = v10;
    v16 = *(_BYTE *)a1;
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    v19 = *(_QWORD *)(a1 + 80);
    v20 = *(_QWORD *)(a1 + 88);
    swift_beginAccess();
    TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(a3, (uint64_t *)&v25, v8, 0, v16, v17, v18, 0, 1, v19, v20, 0, 1);
    v25 = a4;
    TextEffectsAnimationController.TimingMap.pause(_:at:)(a3, &v25);
  }
  else
  {
    if (v28 != 2)
      goto LABEL_8;
    v25 = v10;
    v11 = *(_BYTE *)a1;
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    v15 = *(_QWORD *)(a1 + 88);
    swift_beginAccess();
    TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(a3, (uint64_t *)&v25, v8, 0, v11, v12, v13, 0, 1, v14, v15, 0, 1);
  }
  swift_endAccess();
LABEL_8:
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = a3;
  v22 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  v23 = MEMORY[0x23B7C9E44](a2 + 16);
  if (v23)
  {
    v24 = (void *)v23;
    TextEffectsRenderer.notifyStateObservers(with:time:)(v22);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t TextEffectsAnimationController.animationInfo(for:persist:default:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v7 = (uint64_t *)(v3 + 80);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 80);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    v12 = swift_endAccess();
    v11 = a3(v12);
    if ((a2 & 1) != 0)
    {
      swift_beginAccess();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15 = *v7;
      *v7 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a1, isUniquelyReferenced_nonNull_native);
      *v7 = v15;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
  }
  return v11;
}

uint64_t TextEffectsAnimationController.animationInfo(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 80);
  if (*(_QWORD *)(v3 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    v6 = 0;
  }
  swift_endAccess();
  return v6;
}

uint64_t TextEffectsAnimationController.evaluateWithTraitCollection(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[6];

  v5 = MEMORY[0x23B7C9E44](v2 + 16);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = (void *)MEMORY[0x23B7C9E44](v5 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

  }
  else
  {
    v7 = 0;
  }
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v12[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v12[5] = v8;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  v12[3] = &block_descriptor_11;
  v9 = _Block_copy(v12);
  swift_retain();
  swift_release();
  _NSTextCustomRenderingDelegateWillDraw(v7, 0, v9);
  swift_unknownObjectRelease();
  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

Swift::Void __swiftcall TextEffectsAnimationController.Timing.beginAnimationInterval()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_signpost_type_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  if (!*(_QWORD *)(v0 + 48))
  {
    if (one-time initialization token for textEffects != -1)
      swift_once();
    v9 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v9, (uint64_t)static Signpost.textEffects);
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    v10 = OSSignposter.logHandle.getter();
    v11 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v12(v5, v8, v2);
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      v14 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_2349C4000, v10, v11, v14, "Animation", "isAnimation=YES", v13, 2u);
      MEMORY[0x23B7C9D54](v13, -1, -1);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {

      v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    }
    v12(v5, v8, v2);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    v15 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_release();
    *(_QWORD *)(v1 + 48) = v15;
  }
}

Swift::Void __swiftcall TextEffectsAnimationController.Timing.endAnimationInterval()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  os_signpost_id_t v17;
  void (*v18)(_BYTE *, uint64_t);
  uint64_t v19;
  _BYTE v20[4];
  int v21;
  uint64_t v22;

  v1 = type metadata accessor for OSSignpostError();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for OSSignpostID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v20[-v10];
  if (*(_QWORD *)(v0 + 48))
  {
    v22 = v0;
    v12 = one-time initialization token for textEffects;
    swift_retain();
    if (v12 != -1)
      swift_once();
    v13 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v13, (uint64_t)static Signpost.textEffects);
    v14 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v21 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(_BYTE *, uint64_t))(v2 + 88))(v4, v1) == *MEMORY[0x24BEE7810])
      {
        v15 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
        v15 = "";
      }
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v8, v11, v5);
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      v17 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_2349C4000, v14, (os_signpost_type_t)v21, v17, "Animation", v15, v16, 2u);
      MEMORY[0x23B7C9D54](v16, -1, -1);

      v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v18(v11, v5);
      swift_release();
      v18(v8, v5);
    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
      swift_release();
    }
    v19 = v22;
    swift_release();
    *(_QWORD *)(v19 + 48) = 0;
  }
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t TextEffectsAnimationController.animatorToPhase(with:)(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 64);
  if (!*(_QWORD *)(v4 + 16) || (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) == 0))
  {
    swift_beginAccess();
    v16 = *(_QWORD *)(v2 + 88);
    if (*(_QWORD *)(v16 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v18 & 1) != 0))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v17);
      swift_endAccess();
      swift_retain();
      v20 = swift_retain_n();
      outlined consume of EnvironmentValues?(v20);
      if (v19)
      {
        v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 112);
        v22 = swift_retain();
        v23 = v21(v22);
        swift_release();
        goto LABEL_13;
      }
    }
    else
    {
      swift_endAccess();
    }
    swift_beginAccess();
    v24 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v2 + 112));
    if (!v24)
    {
      v28 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v2 + 112));
      if (!v28)
        return 0;
      v29 = v28;
      v30 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v28) + 0x88))();
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 80))(v30);

      goto LABEL_16;
    }
    v25 = v24;
    v26 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v24) + 0x88))();
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 112))(v26);

LABEL_13:
    v27 = swift_release();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 80))(v27);
LABEL_16:
    swift_release();
    return v8;
  }
  v7 = *(_QWORD *)(v4 + 56) + 120 * v5;
  v8 = *(_QWORD *)(v7 + 88);
  v9 = *(_QWORD *)(v7 + 96);
  if ((*(_BYTE *)(v7 + 112) & 1) != 0)
  {
    v10 = *(_QWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 64);
    v12 = *(_QWORD *)(v7 + 72);
    v13 = *(_BYTE *)(v7 + 80);
    v14 = *(_QWORD *)(v7 + 104);
    if (v8)
    {
      v15 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 80))();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v14, 1);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v14, 1);
    }
    else
    {
      swift_beginAccess();
      v31 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v2 + 112));
      if (!v31)
      {
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
        swift_retain();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
        v15 = 0;
        goto LABEL_22;
      }
      v32 = v31;
      v33 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v31) + 0x88);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
      v34 = outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
      v35 = v33(v34);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 80))(v35);

    }
    swift_release();
LABEL_22:
    swift_release();
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v14, 1);
    return v15;
  }
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t TextEffectsAnimationController.animatorFromPhase(with:)(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 64);
  if (!*(_QWORD *)(v4 + 16) || (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) == 0))
  {
    swift_beginAccess();
    v16 = *(_QWORD *)(v2 + 88);
    if (*(_QWORD *)(v16 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v18 & 1) != 0))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v17);
      swift_endAccess();
      swift_retain();
      v20 = swift_retain_n();
      v21 = outlined consume of EnvironmentValues?(v20);
      if (v19)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 80))(v21);
LABEL_13:
        swift_release();
        return v8;
      }
    }
    else
    {
      swift_endAccess();
    }
    swift_beginAccess();
    v22 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v2 + 112));
    if (!v22)
      return 0;
    v23 = v22;
    v24 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v22) + 0x88))();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 80))(v24);

    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v4 + 56) + 120 * v5;
  v8 = *(_QWORD *)(v7 + 56);
  v9 = *(_QWORD *)(v7 + 64);
  if ((*(_BYTE *)(v7 + 80) & 1) != 0)
  {
    v10 = *(_QWORD *)(v7 + 72);
    v11 = *(_QWORD *)(v7 + 88);
    v12 = *(_QWORD *)(v7 + 96);
    v13 = *(_QWORD *)(v7 + 104);
    v14 = *(_BYTE *)(v7 + 112);
    if (v8)
    {
      v15 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 80))();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, 1);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, 1);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
    }
    else
    {
      swift_beginAccess();
      v25 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(_QWORD *)(v2 + 112));
      if (!v25)
      {
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
        swift_retain();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
        v15 = 0;
        goto LABEL_19;
      }
      v26 = v25;
      v27 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v25) + 0x88);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
      v28 = outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
      v29 = v27(v28);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 80))(v29);

    }
    swift_release();
LABEL_19:
    swift_release();
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, 1);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
    return v15;
  }
  swift_bridgeObjectRetain();
  return v8;
}

void TextEffectsAnimationController.invalidateAnimator(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  void *v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;

  v2 = v1;
  v4 = (uint64_t *)(v1 + 96);
  swift_beginAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v4;
    v21 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v21;
    }
    v10 = *(void **)(*(_QWORD *)(v9 + 56) + 8 * v7);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v4 = v9;

    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = a1;
  v12 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_13;
  swift_beginAccess();
  v13 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 16);
  closure #1 in TextEffectsAnimationController.removeAnimations(_:)(v12, (uint64_t *)v2);
  v14 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 16);
  if (v13)
  {
    if (!v14)
      TextEffectsAnimationController.clearDisplayLink()();
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  if (!v14)
    goto LABEL_13;
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
    goto LABEL_13;
  *(_BYTE *)(v2 + 40) = 1;
  *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
  if (TextEffectsAnimationController.startExternalDisplayLink()() || *(_QWORD *)(v2 + 48))
    goto LABEL_13;
  v15 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
  v16 = *(void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = v15;

  v17 = *(void **)(v2 + 48);
  if (v17)
  {
    v18 = (void *)objc_opt_self();
    v19 = v17;
    v20 = objc_msgSend(v18, sel_mainRunLoop);
    objc_msgSend(v19, sel_addToRunLoop_forMode_, v20, *MEMORY[0x24BDBCB80]);
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for TextAnimator()
{
  return objc_opt_self();
}

void TextAnimator.start()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt64 v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  _QWORD *v8;
  void (*v9)(uint64_t);
  CFTimeInterval v10;

  v1 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      v3 = *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant);
      v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
      v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8);
      v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration);
      if (v6)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        Strong = swift_weakLoadStrong();
        swift_bridgeObjectRetain();
        if (Strong)
          swift_release();
      }
      swift_bridgeObjectRetain();
      v10 = CACurrentMediaTime();
      TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(v2, v3, &v10, v5, v4, v6, 0, 1);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v8 = (_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
    *v8 = 0;
    v8[1] = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration) = 0;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + v1) != 2)
    {
      *(_QWORD *)(v0 + v1) = 2;
      v9 = *(void (**)(uint64_t))(v0
                                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v9(v0);
      swift_release();
    }
  }
}

void TextAnimator.start(duration:)(double a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t);
  CFTimeInterval v11;

  v2 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant);
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
      v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8);
      v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = CACurrentMediaTime();
      TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(v4, v5, &v11, v6, v7, v8, *(uint64_t *)&a1, 0);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v9 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
    *v9 = 0;
    v9[1] = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration) = 0;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v1 + v2) != 2)
    {
      *(_QWORD *)(v1 + v2) = 2;
      v10 = *(void (**)(uint64_t))(v1
                                           + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v10(v1);
      swift_release();
    }
  }
}

void TextAnimator.pause()()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      TextEffectsAnimationController.pauseAnimation(with:)(*(_QWORD *)(*(_QWORD *)(v0
                                                                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
      swift_release();
    }
    if (*(_QWORD *)(v0 + v1) != 3)
    {
      *(_QWORD *)(v0 + v1) = 3;
      v2 = *(void (**)(uint64_t))(v0
                                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v2(v0);
      swift_release();
    }
  }
}

void TextAnimator.resume()()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      TextEffectsAnimationController.resumeAnimation(with:)(*(_QWORD *)(*(_QWORD *)(v0
                                                                                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                      + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
      swift_release();
    }
    if (*(_QWORD *)(v0 + v1) != 2)
    {
      *(_QWORD *)(v0 + v1) = 2;
      v2 = *(void (**)(uint64_t))(v0
                                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v2(v0);
      swift_release();
    }
  }
}

void TextAnimator.invalidate()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state) = 0;
    if (swift_weakLoadStrong())
    {
      TextEffectsAnimationController.invalidateAnimator(with:)(*(_QWORD *)(*(_QWORD *)(v0
                                                                                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                         + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
      swift_release();
    }
  }
}

double TextAnimator.duration.getter()
{
  uint64_t v0;
  double v1;
  Swift::UInt64 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v1 = 0.0;
  if (swift_weakLoadStrong())
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0
                               + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                   + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration);
    v6 = *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = TextEffectsAnimationController.duration(with:phase:configuration:variant:)(v2, v3, v4, v5, v6);
    LOBYTE(v2) = v8;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
      return *(double *)&v7;
  }
  return v1;
}

uint64_t TextAnimator.toPhase.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8))
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
  }
  else if (swift_weakLoadStrong())
  {
    v1 = TextEffectsAnimationController.animatorToPhase(with:)(*(_QWORD *)(*(_QWORD *)(v0
                                                                                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                         + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
    swift_release();
  }
  else
  {
    v1 = 0;
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextAnimator.stateSnapshot.getter()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  Swift::UInt64 v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;

  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
    return 0;
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v2 = Strong;
  v3 = *(_QWORD *)(*(_QWORD *)(v0
                             + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  swift_beginAccess();
  v4 = Text.Effect.Keyframes.validAnimation(_:)(v3, *(_QWORD *)(v2 + 112));
  if (!v4)
  {
    swift_release();
    return 0;
  }
  v5 = v4;
  v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v4) + 0xC0))(v2);
  swift_release();

  return v6;
}

uint64_t TextAnimator.stateSnapshot.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, unint64_t, _QWORD, uint64_t, _QWORD *);
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt64 v17;
  int v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  _BYTE v22[64];
  uint64_t v23;

  v2 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
    return swift_unknownObjectRelease();
  if (!result)
    return result;
  v3 = v1;
  type metadata accessor for Text.Effect.AnyStateSnapshot();
  v4 = swift_dynamicCastClass();
  if (!v4)
    return swift_unknownObjectRelease();
  v5 = v4;
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return swift_unknownObjectRelease();
  v7 = (_QWORD *)Strong;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation);
  v9 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
  v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  swift_beginAccess();
  v11 = Text.Effect.Keyframes.validAnimation(_:)(v10, v7[14]);
  if (v11)
  {
    v12 = v11;
    v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v21 = v8;
    v14 = v7[14];
    v15 = *(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, _QWORD *))((*MEMORY[0x24BEE4EA0] & *v12)
                                                                                      + 0xC8);
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v15(v5, v13, 0, v14, v7);

    swift_release();
    v8 = v21;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess();
    swift_unknownObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = v7[13];
    v7[13] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v10, isUniquelyReferenced_nonNull_native);
    v7[13] = v23;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  v17 = *(_QWORD *)(v8 + v9);
  v23 = v7[7];
  TextEffectsAnimationController.state(for:time:)(v17, (double *)&v23, (uint64_t)v22);
  v18 = v22[56];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v19 = 3;
  if (v18 != 3)
    v19 = 1;
  if (v18 == 2)
    v19 = 2;
  if (*(_QWORD *)(v3 + v2) == v19)
  {
    swift_release();
    return swift_unknownObjectRelease_n();
  }
  else
  {
    *(_QWORD *)(v3 + v2) = v19;
    v20 = *(void (**)(uint64_t))(v3
                                         + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
    swift_retain();
    v20(v3);
    swift_release();
    swift_unknownObjectRelease_n();
    return swift_release();
  }
}

double TextAnimator.nextAnimationTriggerDelay.getter()
{
  uint64_t v0;
  double v1;
  uint64_t Strong;
  uint64_t v3;
  Swift::UInt64 v4;
  double v5;
  char v6;
  _QWORD *v7;
  void *v8;
  double v9;
  char v10;
  char v11;

  v1 = 0.0;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v3 = Strong;
      v4 = *(_QWORD *)(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      v5 = COERCE_DOUBLE(TextEffectsAnimationController.duration(with:phase:configuration:variant:)(v4, 0, 0, 0, *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant)));
      if ((v6 & 1) != 0)
        v1 = 1.0;
      else
        v1 = v5;
      swift_beginAccess();
      v7 = Text.Effect.Keyframes.validAnimation(_:)(v4, *(_QWORD *)(v3 + 112));
      if (v7)
      {
        v8 = v7;
        v9 = COERCE_DOUBLE((*(uint64_t (**)(double))((*MEMORY[0x24BEE4EA0] & *v7) + 0xB8))(v1));
        v11 = v10;
        swift_release();

        if ((v11 & 1) == 0)
          return v9;
      }
      else
      {
        swift_release();
      }
    }
  }
  return v1;
}

void TextAnimator.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  CFTimeInterval v2;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      v1 = *(_QWORD *)(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      v2 = CACurrentMediaTime();
      swift_beginAccess();
      TextEffectsAnimationController.TimingMap.cancel(_:at:)(v1, (uint64_t *)&v2);
      swift_endAccess();
      swift_release();
    }
  }
}

id Text.Effect.AnyStateSnapshot.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Text.Effect.AnyStateSnapshot();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for Text.Effect.AnyStateSnapshot()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.TimingMap()
{
  return &type metadata for TextEffectsAnimationController.TimingMap;
}

ValueMetadata *type metadata accessor for TextEffectsRenderer.NotifyFlags()
{
  return &type metadata for TextEffectsRenderer.NotifyFlags;
}

_QWORD *initializeBufferWithCopyOfBuffer for TextRenderLayer.SegmentLayer(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for TextRenderLayer.SegmentLayer(_QWORD *a1)
{

}

uint64_t *assignWithCopy for TextRenderLayer.SegmentLayer(uint64_t *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = (void *)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  v4 = *a1;
  *a1 = *a2;
  v5 = (void *)(v4 & 0x3FFFFFFFFFFFFFFFLL);
  v6 = v3;

  return a1;
}

uint64_t *assignWithTake for TextRenderLayer.SegmentLayer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for TextRenderLayer.SegmentLayer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextRenderLayer.SegmentLayer(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextRenderLayer.SegmentLayer()
{
  return &type metadata for TextRenderLayer.SegmentLayer;
}

void *type metadata accessor for TextRenderLayer.UpdateFlags()
{
  return &unk_25061F920;
}

void *type metadata accessor for RawTextLayout()
{
  return &unk_2506172A0;
}

void destroy for TextRenderLayer.Layout(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for TextRenderLayer.Layout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v7 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v7;
  return a1;
}

uint64_t assignWithCopy for TextRenderLayer.Layout(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v4 = *(void **)(a2 + 136);
  v5 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for TextRenderLayer.Layout(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v4 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  return a1;
}

uint64_t getEnumTagSinglePayload for TextRenderLayer.Layout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextRenderLayer.Layout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for TextRenderLayer.Layout()
{
  return &unk_25061F948;
}

unint64_t lazy protocol witness table accessor for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextRenderLayer.UpdateFlags, &unk_25061F920);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextRenderLayer.UpdateFlags, &unk_25061F920);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextRenderLayer.UpdateFlags, &unk_25061F920);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextRenderLayer.UpdateFlags, &unk_25061F920);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextEffectsRenderer.NotifyFlags, &type metadata for TextEffectsRenderer.NotifyFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextEffectsRenderer.NotifyFlags, &type metadata for TextEffectsRenderer.NotifyFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextEffectsRenderer.NotifyFlags, &type metadata for TextEffectsRenderer.NotifyFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextEffectsRenderer.NotifyFlags, &type metadata for TextEffectsRenderer.NotifyFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

uint64_t one-time initialization function for textEffects()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v4, static Signpost.textEffects);
  __swift_project_value_buffer(v4, (uint64_t)static Signpost.textEffects);
  if (one-time initialization token for textEffects != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)static Log.textEffects);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.textEffects);
  __swift_project_value_buffer(v0, (uint64_t)static Log.textEffects);
  return Logger.init(subsystem:category:)();
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.intersection(_:)(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
}

{
  return specialized _NativeSet.intersection(_:)(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a2 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v5);
    swift_release();
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v9 = a3((char *)v10, v7, a2, v5);
    swift_release();
    MEMORY[0x23B7C9D54](v10, -1, -1);
  }
  return v9;
}

void specialized closure #1 in _NativeSet.intersection(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, unint64_t, uint64_t, __n128);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t i;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, unint64_t, uint64_t, __n128);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v66 = a2;
  v69 = a1;
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v66 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v66 - v14;
  v18.n128_f64[0] = MEMORY[0x24BDAC7A8](v16);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(a4 + 16);
  v75 = a4;
  v76 = a3;
  v77 = v7;
  if (v20 >= v19)
  {
    v71 = 0;
    v43 = 0;
    v44 = *(_QWORD *)(a3 + 56);
    v67 = a3 + 56;
    v45 = 1 << *(_BYTE *)(a3 + 32);
    if (v45 < 64)
      v46 = ~(-1 << v45);
    else
      v46 = -1;
    v47 = v46 & v44;
    v68 = (unint64_t)(v45 + 63) >> 6;
    v74 = a4 + 56;
    if (v47)
      goto LABEL_38;
LABEL_39:
    v49 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v49 < v68)
    {
      v50 = *(_QWORD *)(v67 + 8 * v49);
      v51 = v43 + 1;
      if (v50)
        goto LABEL_52;
      v51 = v43 + 2;
      if (v43 + 2 < v68)
      {
        v50 = *(_QWORD *)(v67 + 8 * v51);
        if (v50)
          goto LABEL_52;
        v51 = v43 + 3;
        if (v43 + 3 < v68)
        {
          v50 = *(_QWORD *)(v67 + 8 * v51);
          if (v50)
            goto LABEL_52;
          v52 = v43 + 4;
          if (v43 + 4 < v68)
          {
            v50 = *(_QWORD *)(v67 + 8 * v52);
            if (!v50)
            {
              while (1)
              {
                v51 = v52 + 1;
                if (__OFADD__(v52, 1))
                  goto LABEL_67;
                if (v51 >= v68)
                  goto LABEL_61;
                v50 = *(_QWORD *)(v67 + 8 * v51);
                ++v52;
                if (v50)
                  goto LABEL_52;
              }
            }
            v51 = v43 + 4;
LABEL_52:
            v72 = (v50 - 1) & v50;
            v73 = v51;
            for (i = __clz(__rbit64(v50)) + (v51 << 6); ; i = __clz(__rbit64(v47)) | (v43 << 6))
            {
              v53 = *(_QWORD *)(a3 + 48);
              v54 = *(_QWORD *)(v7 + 72);
              v70 = i;
              v55 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
              v55(v9, v53 + v54 * i, v6, v18);
              lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
              v56 = v7;
              v57 = v9;
              v58 = dispatch thunk of Hashable._rawHashValue(seed:)();
              v59 = -1 << *(_BYTE *)(a4 + 32);
              v60 = v58 & ~v59;
              if (((*(_QWORD *)(v74 + ((v60 >> 3) & 0xFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
              {
                v61 = ~v59;
                while (1)
                {
                  ((void (*)(char *, unint64_t, uint64_t))v55)(v12, *(_QWORD *)(v75 + 48) + v60 * v54, v6);
                  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
                  v62 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v63 = *(void (**)(char *, uint64_t))(v77 + 8);
                  v63(v12, v6);
                  if ((v62 & 1) != 0)
                    break;
                  v60 = (v60 + 1) & v61;
                  if (((*(_QWORD *)(v74 + ((v60 >> 3) & 0xFFFFFFFFFFFFF8)) >> v60) & 1) == 0)
                    goto LABEL_59;
                }
                v9 = v57;
                v63(v57, v6);
                *(unint64_t *)((char *)v69 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v70;
                v47 = v72;
                v26 = __OFADD__(v71++, 1);
                a4 = v75;
                a3 = v76;
                v7 = v77;
                v43 = v73;
                if (v26)
                  goto LABEL_65;
                if (!v72)
                  goto LABEL_39;
              }
              else
              {
                v63 = *(void (**)(char *, uint64_t))(v56 + 8);
LABEL_59:
                v9 = v57;
                v63(v57, v6);
                a4 = v75;
                a3 = v76;
                v7 = v77;
                v47 = v72;
                v43 = v73;
                if (!v72)
                  goto LABEL_39;
              }
LABEL_38:
              v72 = (v47 - 1) & v47;
              v73 = v43;
            }
          }
        }
      }
    }
LABEL_61:
    v64 = v66;
    v65 = v71;
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v69, v64, v65, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], &lazy cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>, &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6E0]);
    return;
  }
  v70 = (unint64_t)&v66 - v17;
  v71 = 0;
  v21 = 0;
  v22 = *(_QWORD *)(a4 + 56);
  v67 = a4 + 56;
  v23 = 1 << *(_BYTE *)(a4 + 32);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v25 = v24 & v22;
  v68 = (unint64_t)(v23 + 63) >> 6;
  v74 = a3 + 56;
  do
  {
    v27 = v70;
    if (v25)
    {
LABEL_8:
      v72 = (v25 - 1) & v25;
      v73 = v21;
      v28 = __clz(__rbit64(v25)) | (v21 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_63;
      }
      if (v29 >= v68)
        goto LABEL_61;
      v30 = *(_QWORD *)(v67 + 8 * v29);
      v31 = v21 + 1;
      if (!v30)
      {
        v31 = v21 + 2;
        if (v21 + 2 >= v68)
          goto LABEL_61;
        v30 = *(_QWORD *)(v67 + 8 * v31);
        if (!v30)
        {
          v31 = v21 + 3;
          if (v21 + 3 >= v68)
            goto LABEL_61;
          v30 = *(_QWORD *)(v67 + 8 * v31);
          if (!v30)
          {
            v32 = v21 + 4;
            if (v21 + 4 >= v68)
              goto LABEL_61;
            v30 = *(_QWORD *)(v67 + 8 * v32);
            if (!v30)
            {
              while (1)
              {
                v31 = v32 + 1;
                if (__OFADD__(v32, 1))
                  goto LABEL_66;
                if (v31 >= v68)
                  goto LABEL_61;
                v30 = *(_QWORD *)(v67 + 8 * v31);
                ++v32;
                if (v30)
                  goto LABEL_22;
              }
            }
            v31 = v21 + 4;
          }
        }
      }
LABEL_22:
      v72 = (v30 - 1) & v30;
      v73 = v31;
      v28 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_23:
      v33 = *(_QWORD *)(v7 + 72);
      v34 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v7 + 16);
      v34(v27, *(_QWORD *)(a4 + 48) + v33 * v28, v6, v18);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v15, v27, v6);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
      v35 = v7;
      v36 = v15;
      v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
      a3 = v76;
      v38 = -1 << *(_BYTE *)(v76 + 32);
      v39 = v37 & ~v38;
      if (((*(_QWORD *)(v74 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
        break;
      v42 = *(void (**)(char *, uint64_t))(v35 + 8);
LABEL_29:
      v15 = v36;
      v42(v36, v6);
      a4 = v75;
      v7 = v77;
      v27 = v70;
      v25 = v72;
      v21 = v73;
      if (v72)
        goto LABEL_8;
    }
    v40 = ~v38;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v34)(v12, *(_QWORD *)(a3 + 48) + v39 * v33, v6);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v42 = *(void (**)(char *, uint64_t))(v77 + 8);
      v42(v12, v6);
      if ((v41 & 1) != 0)
        break;
      v39 = (v39 + 1) & v40;
      a3 = v76;
      if (((*(_QWORD *)(v74 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        goto LABEL_29;
    }
    v15 = v36;
    v42(v36, v6);
    *(unint64_t *)((char *)v69 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    v25 = v72;
    v26 = __OFADD__(v71++, 1);
    a4 = v75;
    a3 = v76;
    v7 = v77;
    v21 = v73;
  }
  while (!v26);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
}

Swift::Int specialized closure #1 in _NativeSet.intersection(_:)(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  unint64_t v25;
  BOOL v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  Swift::UInt64 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;

  v43 = (unint64_t *)result;
  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = 0;
    v8 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v45 = (unint64_t)(v9 + 63) >> 6;
    v12 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v14 = v13 | (v7 << 6);
      }
      else
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v15 >= v45)
          goto LABEL_60;
        v16 = *(_QWORD *)(v8 + 8 * v15);
        ++v7;
        if (!v16)
        {
          v7 = v15 + 1;
          if (v15 + 1 >= v45)
            goto LABEL_60;
          v16 = *(_QWORD *)(v8 + 8 * v7);
          if (!v16)
          {
            v7 = v15 + 2;
            if (v15 + 2 >= v45)
              goto LABEL_60;
            v16 = *(_QWORD *)(v8 + 8 * v7);
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v45)
              {
LABEL_60:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v43, a2, v6, a3);
              }
              v16 = *(_QWORD *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v7 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    break;
                  if (v7 >= v45)
                    goto LABEL_60;
                  v16 = *(_QWORD *)(v8 + 8 * v7);
                  ++v17;
                  if (v16)
                    goto LABEL_21;
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              v7 = v17;
            }
          }
        }
LABEL_21:
        v11 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(a3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      v22 = 1 << v20;
      if (((1 << v20) & *(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        v23 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v23 + 8 * v20) != v18)
        {
          for (i = v20 + 1; ; i = v25 + 1)
          {
            v25 = i & ~v19;
            if (((*(_QWORD *)(v12 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
              goto LABEL_6;
            if (*(_QWORD *)(v23 + 8 * v25) == v18)
              break;
          }
          v21 = v25 >> 6;
          v22 = 1 << v25;
        }
        v43[v21] |= v22;
        v26 = __OFADD__(v6++, 1);
        if (v26)
          break;
      }
    }
    __break(1u);
  }
  v27 = 0;
  v44 = a3 + 56;
  v28 = 1 << *(_BYTE *)(a3 + 32);
  if (v28 < 64)
    v29 = ~(-1 << v28);
  else
    v29 = -1;
  v30 = v29 & *(_QWORD *)(a3 + 56);
  v46 = (unint64_t)(v28 + 63) >> 6;
  v31 = a4 + 56;
  while (v30)
  {
    v32 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    v33 = v32 | (v27 << 6);
LABEL_52:
    v37 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v33);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v37);
    result = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(a4 + 32);
    v39 = result & ~v38;
    if (((*(_QWORD *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
    {
      v40 = *(_QWORD *)(a4 + 48);
      if (*(_QWORD *)(v40 + 8 * v39) == v37)
      {
LABEL_57:
        *(unint64_t *)((char *)v43 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        v26 = __OFADD__(v6++, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        v41 = ~v38;
        while (1)
        {
          v39 = (v39 + 1) & v41;
          if (((*(_QWORD *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
            break;
          if (*(_QWORD *)(v40 + 8 * v39) == v37)
            goto LABEL_57;
        }
      }
    }
  }
  v34 = v27 + 1;
  if (__OFADD__(v27, 1))
    goto LABEL_62;
  if (v34 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v34);
  ++v27;
  if (v35)
    goto LABEL_51;
  v27 = v34 + 1;
  if (v34 + 1 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v27);
  if (v35)
    goto LABEL_51;
  v27 = v34 + 2;
  if (v34 + 2 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v27);
  if (v35)
  {
LABEL_51:
    v30 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v27 << 6);
    goto LABEL_52;
  }
  v36 = v34 + 3;
  if (v36 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v36);
  if (v35)
  {
    v27 = v36;
    goto LABEL_51;
  }
  while (1)
  {
    v27 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v27 >= v46)
      goto LABEL_60;
    v35 = *(_QWORD *)(v44 + 8 * v27);
    ++v36;
    if (v35)
      goto LABEL_51;
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], &lazy cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>, &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6E0]);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>, &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x24BDD0A60]);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _SetStorage<Text.Effect.Identifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier, (uint64_t)&type metadata for Text.Effect.Identifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t (*v39)(uint64_t);
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a7;
  v41 = a8;
  v38 = a1;
  v39 = a5;
  v12 = a5(0);
  v42 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v37 - v13;
  if (!a3)
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>(0, a6, v39, v40, v41);
  result = static _SetStorage.allocate(capacity:)();
  v15 = result;
  v37 = a2;
  if (a2 < 1)
    v17 = 0;
  else
    v17 = *v38;
  v18 = 0;
  v19 = result + 56;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v18 << 6);
    }
    else
    {
      v22 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_40;
      if (v22 >= v37)
      {
LABEL_37:
        swift_release();
        return v15;
      }
      v23 = v38[v22];
      ++v18;
      if (!v23)
      {
        v18 = v22 + 1;
        if (v22 + 1 >= v37)
          goto LABEL_37;
        v23 = v38[v18];
        if (!v23)
        {
          v18 = v22 + 2;
          if (v22 + 2 >= v37)
            goto LABEL_37;
          v23 = v38[v18];
          if (!v23)
          {
            v24 = v22 + 3;
            if (v24 >= v37)
              goto LABEL_37;
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v18 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v18 >= v37)
                  goto LABEL_37;
                v23 = v38[v18];
                ++v24;
                if (v23)
                  goto LABEL_24;
              }
            }
            v18 = v24;
          }
        }
      }
LABEL_24:
      v17 = (v23 - 1) & v23;
      v21 = __clz(__rbit64(v23)) + (v18 << 6);
    }
    v25 = a4;
    v26 = *(_QWORD *)(a4 + 48);
    v27 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v14, v26 + v27 * v21, v12);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(v40, v39, v41);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v15 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v19 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v19 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v19 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v19 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v42 + 32))(*(_QWORD *)(v15 + 48) + v31 * v27, v14, v12);
    ++*(_QWORD *)(v15 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v25;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v11, MEMORY[0x24BDCE6E0]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6E0]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, v11, MEMORY[0x24BDD0A60]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], MEMORY[0x24BDD0A68]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x24BDD0A60]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt64 a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v7 + 8 * v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v7 + 8 * v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v1;
  v13 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v10 = v13;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = *v1;
  Hasher.init(_seed:)();
  DefaultDescriptionAttribute.rawValue.getter();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v3 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  result = swift_bridgeObjectRelease();
  *a1 = 29;
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  Swift::Int result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v5 = a2;
  v6 = a1;
  v8 = HIDWORD(a1);
  v9 = HIDWORD(a2);
  v10 = a3 & 1;
  v11 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = result & ~v13;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    while (1)
    {
      v16 = *(_QWORD *)(v11 + 48) + 20 * v14;
      v17 = *(_DWORD *)v16 == v6 && *(_DWORD *)(v16 + 4) == (_DWORD)v8;
      v18 = v17 && *(_DWORD *)(v16 + 8) == v5;
      v19 = v18 && *(_DWORD *)(v16 + 12) == (_DWORD)v9;
      if (v19 && (((v10 != 0) ^ *(unsigned __int8 *)(v16 + 16)) & 1) == 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_19;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v4;
    v24 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v21 = v24;
    }
    v22 = *(_QWORD *)(v21 + 48) + 20 * v14;
    v23 = *(_BYTE *)(v22 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v22;
    *(_BYTE *)(a4 + 16) = v23;
    specialized _NativeSet._delete(at:)(v14);
    *v4 = v24;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_19:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 2;
  }
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  result = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = result & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_9:
    *(_QWORD *)a2 = 0;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a1)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_9;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v12 = v14;
  }
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v2 = v14;
  result = swift_bridgeObjectRelease();
  v13 = 0;
LABEL_10:
  *(_BYTE *)(a2 + 8) = v13;
  return result;
}

void specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  void (*v30)(char *, unint64_t, uint64_t);
  unint64_t v31;
  uint64_t (*v32)(uint64_t);
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a3;
  v34 = a4;
  v32 = a2;
  v6 = a2(0);
  v35 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  v9 = *v4;
  v10 = *v4 + 56;
  v11 = -1 << *(_BYTE *)(*v4 + 32);
  v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(_QWORD *)(v10 + 8 * (v12 >> 6))) != 0)
  {
    v29 = v4;
    v13 = ~v11;
    swift_retain();
    v14 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      v31 = (v14 + 1) & v13;
      v15 = *(_QWORD *)(v35 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      do
      {
        v16 = v10;
        v17 = v15;
        v18 = v15 * v12;
        v30(v8, *(_QWORD *)(v9 + 48) + v15 * v12, v6);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(v33, v32, v34);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
        v20 = v19 & v13;
        if (a1 >= (uint64_t)v31)
        {
          if (v20 >= v31 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v15 = v17;
            v23 = v17 * a1;
            if (v17 * a1 < v18
              || *(_QWORD *)(v9 + 48) + v17 * a1 >= (unint64_t)(*(_QWORD *)(v9 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
            }
            else
            {
              a1 = v12;
              if (v23 != v18)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v31 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v15 = v17;
LABEL_5:
        v12 = (v12 + 1) & v13;
        v10 = v16;
      }
      while (((*(_QWORD *)(v16 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    *(_QWORD *)(v10 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    v4 = v29;
  }
  else
  {
    *(_QWORD *)(v10 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v24 = *v4;
  v25 = *(_QWORD *)(*v4 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v24 + 16) = v27;
    ++*(_DWORD *)(v24 + 36);
  }
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt64 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(*v1 + 32));
  if (((1 << v5) & *(_QWORD *)(v4 + 8 * (v5 >> 6))) != 0)
  {
    swift_retain();
    _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v5);
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
    JUMPOUT(0x234BBA864);
  }
  *(_QWORD *)(v3 + 16) = v9;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

{
  uint64_t *v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  int64_t v14;
  Swift::UInt32 v15;
  Swift::UInt32 v16;
  Swift::UInt8 v17;
  Swift::UInt32 v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v27 = v3;
      v28 = v4;
      do
      {
        v29 = 20 * v6;
        v11 = *(_QWORD *)(v3 + 48) + 20 * v6;
        v12 = *(_DWORD *)v11;
        v13 = *(_DWORD *)(v11 + 4);
        v14 = v2;
        v15 = *(_DWORD *)(v11 + 8);
        v16 = *(_DWORD *)(v11 + 12);
        v17 = *(_BYTE *)(v11 + 16);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        v18 = v15;
        v2 = v14;
        Hasher._combine(_:)(v18);
        Hasher._combine(_:)(v16);
        Hasher._combine(_:)(v17);
        v19 = Hasher._finalize()() & v7;
        if (v14 >= (uint64_t)v9)
        {
          if (v19 < v9)
          {
            v3 = v27;
            v4 = v28;
          }
          else
          {
            v3 = v27;
            v4 = v28;
            if (v2 >= v19)
              goto LABEL_12;
          }
        }
        else
        {
          v3 = v27;
          v4 = v28;
          if (v19 >= v9 || v2 >= v19)
          {
LABEL_12:
            v20 = *(_QWORD *)(v3 + 48);
            v21 = v20 + 20 * v2;
            v22 = (__int128 *)(v20 + v29);
            if (20 * v2 < v29 || v21 >= (unint64_t)v22 + 20 || (v23 = v2 == v6, v2 = v6, !v23))
            {
              v10 = *v22;
              *(_DWORD *)(v21 + 16) = *((_DWORD *)v22 + 4);
              *(_OWORD *)v21 = v10;
              v2 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v24 = *(_QWORD *)(v3 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v26;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Set.formSymmetricDifference(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;

  v2 = result;
  i = 0;
  v4 = result + 56;
  v5 = -1 << *(_BYTE *)(result + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(63 - v5) >> 6;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v11 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v11 < v8)
    {
      v12 = *(_QWORD *)(v4 + 8 * v11);
      v13 = i + 1;
      if (v12)
        goto LABEL_21;
      v13 = i + 2;
      if (i + 2 >= v8)
        return outlined consume of Set<EventID>.Iterator._Variant();
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (v12)
        goto LABEL_21;
      v13 = i + 3;
      if (i + 3 >= v8)
        return outlined consume of Set<EventID>.Iterator._Variant();
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (v12)
      {
LABEL_21:
        v7 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v13 << 6);
        for (i = v13; ; v10 = v9 | (i << 6))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10);
          if (specialized Set.contains(_:)(v15, *v1))
          {
            result = specialized Set._Variant.remove(_:)(v15);
            if (!v7)
              goto LABEL_8;
          }
          else
          {
            result = specialized Set._Variant.insert(_:)(&v16, v15);
            if (!v7)
              goto LABEL_8;
          }
LABEL_7:
          v9 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v14 = i + 4;
      if (i + 4 < v8)
      {
        v12 = *(_QWORD *)(v4 + 8 * v14);
        if (v12)
        {
          v13 = i + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v13 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_27;
          if (v13 >= v8)
            return outlined consume of Set<EventID>.Iterator._Variant();
          v12 = *(_QWORD *)(v4 + 8 * v13);
          ++v14;
          if (v12)
            goto LABEL_21;
        }
      }
    }
    return outlined consume of Set<EventID>.Iterator._Variant();
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  Swift::UInt64 v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[6];

  v2 = a2;
  v33[5] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v32 = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if (v14 >= v10)
            goto LABEL_35;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_35;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_35;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_35;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_35:
                    swift_bridgeObjectRetain();
                    outlined consume of Set<EventID>.Iterator._Variant();
                    return v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_35;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_37:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        v19 = Hasher._finalize()();
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v33[0] = a1;
    v33[1] = v6;
    v33[2] = v32;
    v33[3] = v4;
    v33[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      v27 = (char *)&v31 - v26;
      memcpy((char *)&v31 - v26, (const void *)(v2 + 56), v24);
      v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v27, v23, v2, v21, v33);
      swift_release();
      outlined consume of Set<EventID>.Iterator._Variant();
    }
    else
    {
      v29 = (void *)swift_slowAlloc();
      memcpy(v29, (const void *)(v2 + 56), v24);
      v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v29, v23, v2, v21, v33);
      swift_release();
      outlined consume of Set<EventID>.Iterator._Variant();
      MEMORY[0x23B7C9D54](v29, -1, -1);
    }
    return v28;
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v34 - v5;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v37 = (char *)&v34 - v12;
  if (*(_QWORD *)(a2 + 16))
  {
    v38 = a1;
    v39 = 0;
    v13 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v13)
    {
      v14 = 0;
      v35 = v6;
      v36 = (char *)(a2 + 56);
      while (1)
      {
        if (v14 >= v13)
          __break(1u);
        v15 = *(_QWORD *)(v8 + 72);
        v16 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        v16(v6, a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v15 * v14, v7);
        v39 = v14 + 1;
        v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v17(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
          break;
        v34 = v17;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v6, v7);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v19 = a2;
        v20 = -1 << *(_BYTE *)(a2 + 32);
        v21 = v18 & ~v20;
        if (((*(_QWORD *)&v36[(v21 >> 3) & 0xFFFFFFFFFFFFF8] >> v21) & 1) != 0)
        {
          v22 = ~v20;
          while (1)
          {
            v16(v10, *(_QWORD *)(v19 + 48) + v21 * v15, v7);
            lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
            v23 = dispatch thunk of static Equatable.== infix(_:_:)();
            v24 = *(void (**)(char *, uint64_t))(v8 + 8);
            v24(v10, v7);
            if ((v23 & 1) != 0)
              break;
            v21 = (v21 + 1) & v22;
            if (((*(_QWORD *)&v36[(v21 >> 3) & 0xFFFFFFFFFFFFF8] >> v21) & 1) == 0)
              goto LABEL_12;
          }
          isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v24)(v37, v7);
          v26 = *(_BYTE *)(v19 + 32);
          v27 = (unint64_t)((1 << v26) + 63) >> 6;
          v28 = 8 * v27;
          if ((v26 & 0x3Fu) <= 0xD
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
          {
            MEMORY[0x24BDAC7A8](isStackAllocationSafe);
            memcpy((char *)&v34 - ((v28 + 15) & 0x3FFFFFFFFFFFFFF0), v36, v28);
            specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v34 - ((v28 + 15) & 0x3FFFFFFFFFFFFFF0)), v27, v19, v21, &v38);
            v30 = v29;
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v31 = (void *)swift_slowAlloc();
            memcpy(v31, v36, v28);
            specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v31, v27, v19, v21, &v38);
            v30 = v32;
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x23B7C9D54](v31, -1, -1);
          }
          return v30;
        }
        v24 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_12:
        v24(v37, v7);
        a1 = v38;
        v14 = v39;
        v13 = *(_QWORD *)(v38 + 16);
        a2 = v19;
        v6 = v35;
        if (v39 == v13)
        {
          v34(v35, 1, 1, v7);
          break;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  return a2;
}

Swift::Int specialized closure #1 in _NativeSet.subtracting<A>(_:)(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  Swift::UInt64 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  int64_t v31;

  v7 = (unint64_t *)result;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v9 = v8 - 1;
  v10 = a3 + 56;
  while (1)
  {
    v15 = a5[3];
    v16 = a5[4];
    if (!v16)
      break;
    v17 = (v16 - 1) & v16;
    v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_16:
    v25 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v18);
    a5[3] = v15;
    a5[4] = v17;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(a3 + 32);
    v27 = result & ~v26;
    v11 = v27 >> 6;
    v12 = 1 << v27;
    if (((1 << v27) & *(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v28 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v28 + 8 * v27) == v25)
      {
LABEL_3:
        v13 = v11;
        v14 = v7[v11];
        v7[v13] = v14 & ~v12;
        if ((v12 & v14) != 0)
        {
          if (__OFSUB__(v9--, 1))
            goto LABEL_36;
          if (!v9)
            return MEMORY[0x24BEE4B08];
        }
      }
      else
      {
        for (i = v27 + 1; ; i = v30 + 1)
        {
          v30 = i & ~v26;
          if (((*(_QWORD *)(v10 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            break;
          if (*(_QWORD *)(v28 + 8 * v30) == v25)
          {
            v11 = v30 >> 6;
            v12 = 1 << v30;
            goto LABEL_3;
          }
        }
      }
    }
  }
  v19 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    v20 = (unint64_t)(a5[2] + 64) >> 6;
    v21 = a5[3];
    if (v19 >= v20)
      goto LABEL_33;
    v22 = a5[1];
    v23 = *(_QWORD *)(v22 + 8 * v19);
    if (v23)
      goto LABEL_15;
    v24 = v15 + 2;
    v21 = v15 + 1;
    if (v15 + 2 >= v20)
      goto LABEL_33;
    v23 = *(_QWORD *)(v22 + 8 * v24);
    if (!v23)
    {
      v21 = v15 + 2;
      if (v15 + 3 >= v20)
        goto LABEL_33;
      v23 = *(_QWORD *)(v22 + 8 * (v15 + 3));
      if (v23)
      {
        v19 = v15 + 3;
        goto LABEL_15;
      }
      v24 = v15 + 4;
      v21 = v15 + 3;
      if (v15 + 4 >= v20)
        goto LABEL_33;
      v23 = *(_QWORD *)(v22 + 8 * v24);
      if (!v23)
      {
        v19 = v15 + 5;
        v21 = v15 + 4;
        if (v15 + 5 >= v20)
          goto LABEL_33;
        v23 = *(_QWORD *)(v22 + 8 * v19);
        if (!v23)
        {
          v21 = v20 - 1;
          v31 = v15 + 6;
          while (v20 != v31)
          {
            v23 = *(_QWORD *)(v22 + 8 * v31++);
            if (v23)
            {
              v19 = v31 - 1;
              goto LABEL_15;
            }
          }
LABEL_33:
          a5[3] = v21;
          a5[4] = 0;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v7, a2, v9, a3);
        }
        goto LABEL_15;
      }
    }
    v19 = v24;
LABEL_15:
    v17 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v19 << 6);
    v15 = v19;
    goto LABEL_16;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  v38 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18.n128_f64[0] = MEMORY[0x24BDAC7A8](v15);
  v19 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v39 = a1;
  v40 = v19 - 1;
  v20 = *a5;
  v21 = a5[1];
  v22 = *(_QWORD *)(*a5 + 16);
  if (v21 == v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v17 + 56))(v11, 1, 1, v12, v18);
LABEL_22:
    v36 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    outlined destroy of Any?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v39, v38, v40, a3, v36, &lazy cache variable for type metadata for _SetStorage<UUID>, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
    return;
  }
  v44 = a3 + 56;
  v45 = v17;
  v23 = v17;
  v42 = v11;
  v43 = a5;
  v46 = (char *)&v37 - v16;
  while (v21 < v22)
  {
    v25 = *(_QWORD *)(v23 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v23 + 16);
    v26(v11, v20 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)) + v25 * v21, v12, v18);
    a5[1] = v21 + 1;
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v23 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v41)(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v12) == 1)
      goto LABEL_22;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v46, v11, v12);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = a3;
    v29 = -1 << *(_BYTE *)(a3 + 32);
    v30 = v27 & ~v29;
    if (((*(_QWORD *)(v44 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
    {
      v24 = *(void (**)(char *, uint64_t))(v23 + 8);
LABEL_5:
      v24(v46, v12);
      a3 = v28;
      a5 = v43;
      goto LABEL_6;
    }
    v31 = ~v29;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v26)(v14, *(_QWORD *)(v28 + 48) + v30 * v25, v12);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      if ((v32 & 1) != 0)
        break;
      v30 = (v30 + 1) & v31;
      if (((*(_QWORD *)(v44 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
        goto LABEL_5;
    }
    v24(v46, v12);
    v33 = (v30 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v34 = *(unint64_t *)((char *)v39 + v33);
    *(unint64_t *)((char *)v39 + v33) = v34 & ~(1 << v30);
    a5 = v43;
    if ((v34 & (1 << v30)) == 0)
    {
      a3 = v28;
LABEL_6:
      v23 = v45;
      goto LABEL_7;
    }
    v35 = v40 - 1;
    v23 = v45;
    if (__OFSUB__(v40, 1))
      goto LABEL_24;
    a3 = v28;
    --v40;
    if (!v35)
      return;
LABEL_7:
    v20 = *a5;
    v21 = a5[1];
    v22 = *(_QWORD *)(*a5 + 16);
    v11 = v42;
    if (v21 == v22)
    {
      v41(v42, 1, 1, v12, v18);
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3))(char **a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void (*result)(char **, char);

  v4 = v3;
  v8 = (char *)malloc(0x180uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 45) = a2;
  *((_QWORD *)v8 + 46) = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[113] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_16;
  }
  v15 = v10;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16 >= v14 && (a3 & 1) != 0)
    goto LABEL_9;
  if (v16 < v14 || (a3 & 1) != 0)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      v11 = v17;
      goto LABEL_9;
    }
LABEL_16:
    result = (void (*)(char **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  specialized _NativeDictionary.copy()();
LABEL_9:
  *((_QWORD *)v8 + 47) = v11;
  if ((v15 & 1) != 0)
  {
    v19 = *(_QWORD *)(*v4 + 56) + 120 * v11;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v19 + 32);
    v22 = *(unsigned __int8 *)(v19 + 40);
    v24 = *(_OWORD *)(v19 + 48);
    v23 = *(_OWORD *)(v19 + 64);
    v25 = *(unsigned __int8 *)(v19 + 80);
    v26 = *(_OWORD *)(v19 + 88);
    v27 = *(_QWORD *)(v19 + 104);
    v28 = *(_BYTE *)(v19 + 112);
    v29 = 256;
    if (!*(_BYTE *)(v19 + 25))
      v29 = 0;
    v30 = v29 | *(unsigned __int8 *)(v19 + 24);
    *((_OWORD *)v8 + 15) = *(_OWORD *)v19;
    *((_QWORD *)v8 + 32) = v20;
    *((_QWORD *)v8 + 33) = v30;
    *((_QWORD *)v8 + 34) = v21;
    *((_QWORD *)v8 + 35) = v22;
  }
  else
  {
    v25 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0uLL;
    *((_OWORD *)v8 + 16) = 0u;
    *((_OWORD *)v8 + 17) = 0u;
    *((_OWORD *)v8 + 15) = 0u;
    v24 = xmmword_235260EF0;
    v26 = 0uLL;
  }
  *((_OWORD *)v8 + 18) = v24;
  *((_OWORD *)v8 + 19) = v23;
  *((_QWORD *)v8 + 40) = v25;
  *(_OWORD *)(v8 + 328) = v26;
  *((_QWORD *)v8 + 43) = v27;
  v8[352] = v28;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (char **a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 30);
  v4 = *((_QWORD *)*a1 + 31);
  v5 = *((_QWORD *)*a1 + 32);
  v7 = *((_QWORD *)*a1 + 33);
  v6 = *((_QWORD *)*a1 + 34);
  v8 = *((_QWORD *)*a1 + 35);
  v9 = *((_QWORD *)*a1 + 36);
  v10 = *((_QWORD *)*a1 + 37);
  v11 = *((_QWORD *)*a1 + 38);
  v12 = *((_QWORD *)*a1 + 39);
  v13 = *((_QWORD *)*a1 + 40);
  v14 = *((_QWORD *)*a1 + 41);
  v15 = *((_QWORD *)*a1 + 42);
  v16 = *((_QWORD *)*a1 + 43);
  v17 = v2[352];
  v18 = v2[113];
  if ((a2 & 1) != 0)
  {
    if (v9 == 1)
    {
      if ((v2[113] & 1) != 0)
      {
        v72 = v7;
        v75 = v16;
        v19 = v3;
        v69 = v4;
        v20 = v5;
        v63 = v13;
        v66 = v8;
        v21 = v6;
        v22 = v10;
        v23 = v11;
        v24 = v12;
        v25 = v14;
        v26 = v2[352];
        specialized _NativeDictionary._delete(at:)(*((_QWORD *)v2 + 47), **((_QWORD **)v2 + 46));
        v17 = v26;
        v16 = v75;
        LOBYTE(v13) = v63;
        v14 = v25;
        v12 = v24;
LABEL_8:
        v11 = v23;
        v10 = v22;
        v9 = 1;
        v6 = v21;
        v8 = v66;
        v5 = v20;
        v4 = v69;
        v3 = v19;
        v7 = v72;
        goto LABEL_18;
      }
      goto LABEL_18;
    }
    *(_QWORD *)v2 = v3;
    *((_QWORD *)v2 + 1) = v4;
    *((_QWORD *)v2 + 2) = v5;
    v2[24] = v7 & 1;
    v2[25] = BYTE1(v7) & 1;
    *((_QWORD *)v2 + 4) = v6;
    v2[40] = v8;
    *((_QWORD *)v2 + 6) = v9;
    *((_QWORD *)v2 + 7) = v10;
    *((_QWORD *)v2 + 8) = v11;
    *((_QWORD *)v2 + 9) = v12;
    v2[80] = v13 & 1;
    *((_QWORD *)v2 + 11) = v14;
    *((_QWORD *)v2 + 12) = v15;
    v77 = v16;
    *((_QWORD *)v2 + 13) = v16;
    v67 = v17;
    v2[112] = v17 & 1;
    v29 = *((_QWORD *)v2 + 47);
    v30 = (_QWORD *)**((_QWORD **)v2 + 46);
    if ((v18 & 1) != 0)
    {
      v31 = v30[7] + 120 * v29;
      v32 = *(_OWORD *)v2;
      v33 = *((_OWORD *)v2 + 1);
      v34 = *((_OWORD *)v2 + 3);
      *(_OWORD *)(v31 + 32) = *((_OWORD *)v2 + 2);
      *(_OWORD *)(v31 + 48) = v34;
      *(_OWORD *)v31 = v32;
      *(_OWORD *)(v31 + 16) = v33;
      v35 = *((_OWORD *)v2 + 4);
      v36 = *((_OWORD *)v2 + 5);
      v37 = *((_OWORD *)v2 + 6);
      v38 = v2[112];
LABEL_13:
      *(_BYTE *)(v31 + 112) = v38;
      *(_OWORD *)(v31 + 80) = v36;
      *(_OWORD *)(v31 + 96) = v37;
      *(_OWORD *)(v31 + 64) = v35;
LABEL_17:
      v16 = v77;
      v17 = v67;
      goto LABEL_18;
    }
    v43 = *((_QWORD *)v2 + 45);
    v39 = (__int128 *)v2;
    goto LABEL_16;
  }
  if (v9 != 1)
  {
    v39 = (__int128 *)(v2 + 120);
    *((_QWORD *)v2 + 15) = v3;
    *((_QWORD *)v2 + 16) = v4;
    *((_QWORD *)v2 + 17) = v5;
    v2[144] = v7 & 1;
    v2[145] = BYTE1(v7) & 1;
    *((_QWORD *)v2 + 19) = v6;
    v2[160] = v8;
    *((_QWORD *)v2 + 21) = v9;
    *((_QWORD *)v2 + 22) = v10;
    *((_QWORD *)v2 + 23) = v11;
    *((_QWORD *)v2 + 24) = v12;
    v2[200] = v13 & 1;
    *((_QWORD *)v2 + 26) = v14;
    *((_QWORD *)v2 + 27) = v15;
    v77 = v16;
    *((_QWORD *)v2 + 28) = v16;
    v67 = v17;
    v2[232] = v17 & 1;
    v29 = *((_QWORD *)v2 + 47);
    v30 = (_QWORD *)**((_QWORD **)v2 + 46);
    if ((v18 & 1) != 0)
    {
      v31 = v30[7] + 120 * v29;
      v40 = *v39;
      v41 = *(_OWORD *)(v2 + 136);
      v42 = *(_OWORD *)(v2 + 168);
      *(_OWORD *)(v31 + 32) = *(_OWORD *)(v2 + 152);
      *(_OWORD *)(v31 + 48) = v42;
      *(_OWORD *)v31 = v40;
      *(_OWORD *)(v31 + 16) = v41;
      v35 = *(_OWORD *)(v2 + 184);
      v36 = *(_OWORD *)(v2 + 200);
      v37 = *(_OWORD *)(v2 + 216);
      v38 = v2[232];
      goto LABEL_13;
    }
    v43 = *((_QWORD *)v2 + 45);
LABEL_16:
    v73 = v7;
    v44 = v3;
    v70 = v4;
    v45 = v5;
    v46 = v8;
    v47 = v6;
    v48 = v9;
    v49 = v10;
    v50 = v11;
    v51 = v12;
    v65 = v13;
    v52 = v14;
    specialized _NativeDictionary._insert(at:key:value:)(v29, v43, (uint64_t)v39, v30);
    LOBYTE(v13) = v65;
    v14 = v52;
    v12 = v51;
    v11 = v50;
    v10 = v49;
    v9 = v48;
    v6 = v47;
    v8 = v46;
    v5 = v45;
    v4 = v70;
    v3 = v44;
    v7 = v73;
    goto LABEL_17;
  }
  if ((v2[113] & 1) != 0)
  {
    v72 = v7;
    v76 = v16;
    v19 = v3;
    v69 = v4;
    v20 = v5;
    v64 = v12;
    v66 = v8;
    v21 = v6;
    v22 = v10;
    v23 = v11;
    v27 = v13;
    v62 = v14;
    v28 = v2[352];
    specialized _NativeDictionary._delete(at:)(*((_QWORD *)v2 + 47), **((_QWORD **)v2 + 46));
    v17 = v28;
    v16 = v76;
    v14 = v62;
    v12 = v64;
    LOBYTE(v13) = v27;
    goto LABEL_8;
  }
LABEL_18:
  v53 = *((_QWORD *)v2 + 30);
  v54 = *((_QWORD *)v2 + 32);
  v55 = *((_QWORD *)v2 + 33);
  v56 = *((_QWORD *)v2 + 34);
  v57 = *((_QWORD *)v2 + 35);
  v58 = *((_QWORD *)v2 + 36);
  v74 = *((_QWORD *)v2 + 37);
  v78 = *((_QWORD *)v2 + 31);
  v68 = *((_OWORD *)v2 + 20);
  v71 = *((_OWORD *)v2 + 19);
  v60 = *((_QWORD *)v2 + 42);
  v59 = *((_QWORD *)v2 + 43);
  v61 = v2[352];
  outlined copy of TextEffectsAnimationController.Timing?(v3, v4, v5, v7, v6, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  outlined consume of TextEffectsAnimationController.Timing?(v53, v78, v54, v55, v56, v57, v58, v74, v71, *((uint64_t *)&v71 + 1), v68, *((uint64_t *)&v68 + 1), v60, v59, v61);
  free(v2);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

BOOL specialized closure #1 in RangeSet.contains(_:)(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1 && a1[1] >= a2[1];
}

uint64_t sub_234BBC2C8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextEffectsAnimationController.startExternalDisplayLink()(void *a1)
{
  return closure #1 in TextEffectsAnimationController.startExternalDisplayLink()(a1);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void specialized Set.init<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v19[2];

  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v19 - v11;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v19 - v15;
  v17 = a3 >> 1;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
    v19[1] = Set.init(minimumCapacity:)();
    if (v17 == a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v16, 1, 1, v6);
      return;
    }
    while (a2 < v17)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, a1 + *(_QWORD *)(v7 + 72) * a2, v6);
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v18(v16, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) == 1)
        return;
      ++a2;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v16, v6);
      specialized Set._Variant.insert(_:)((uint64_t)v12, v9);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      if (v17 == a2)
      {
        v18(v16, 1, 1, v6);
        return;
      }
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized TextEffectsAnimationController.TimingMap.update(_:body:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v6 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    v12 = result;
    result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v6 + 56) + 120 * result;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v34 = *(_QWORD *)(v14 + 16);
      v35 = v12;
      v32 = *(_BYTE *)(v14 + 25);
      v33 = *(_BYTE *)(v14 + 24);
      v31 = *(_QWORD *)(v14 + 32);
      v30 = *(_BYTE *)(v14 + 40);
      v17 = *(_QWORD *)(v14 + 56);
      v18 = *(_QWORD *)(v14 + 64);
      v19 = *(_QWORD *)(v14 + 72);
      v20 = *(_BYTE *)(v14 + 80);
      v21 = *(_QWORD *)(v14 + 88);
      v29 = *(_QWORD *)(v14 + 48);
      v27 = a4;
      v28 = a5;
      v23 = *(_QWORD *)(v14 + 96);
      v22 = *(_QWORD *)(v14 + 104);
      v26 = a3;
      v24 = *(_BYTE *)(v14 + 112);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v18, v19, v20);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v23, v22, v24);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v26, v27, v28, a6 & 1);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v18, v19, v20);
      v37[0] = v15;
      v37[1] = v16;
      v37[2] = v34;
      v38 = v33;
      v39 = v32;
      v40 = v31;
      v41 = v30;
      v42 = v29;
      v43 = v26;
      v44 = v27;
      v45 = v28;
      v46 = a6 & 1;
      v47 = v21;
      v48 = v23;
      v49 = v22;
      v50 = v24;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v26, v27, v28, a6 & 1);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v23, v22, v24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v36 = *a2;
      *a2 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v37, v35, isUniquelyReferenced_nonNull_native);
      *a2 = v36;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v26, v27, v28, a6 & 1);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v23, v22, v24);
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v6 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    v12 = result;
    result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v6 + 56) + 120 * result;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v36 = *(_QWORD *)(v14 + 16);
      v34 = *(_BYTE *)(v14 + 25);
      v35 = *(_BYTE *)(v14 + 24);
      v33 = *(_QWORD *)(v14 + 32);
      v32 = *(_BYTE *)(v14 + 40);
      v28 = a5;
      v29 = a4;
      v17 = *(_QWORD *)(v14 + 56);
      v30 = *(_QWORD *)(v14 + 48);
      v31 = v12;
      v27 = a3;
      v19 = *(_QWORD *)(v14 + 64);
      v18 = *(_QWORD *)(v14 + 72);
      v20 = *(_BYTE *)(v14 + 80);
      v21 = *(_QWORD *)(v14 + 88);
      v22 = *(_QWORD *)(v14 + 96);
      v23 = *(_QWORD *)(v14 + 104);
      v24 = *(_BYTE *)(v14 + 112);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v19, v18, v20);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
      v25 = a6 & 1;
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v27, v29, v28, v25);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
      v38[0] = v15;
      v38[1] = v16;
      v38[2] = v36;
      v39 = v35;
      v40 = v34;
      v41 = v33;
      v42 = v32;
      v43 = v30;
      v44 = v17;
      v45 = v19;
      v46 = v18;
      v47 = v20;
      v48 = v27;
      v49 = v29;
      v50 = v28;
      v51 = v25;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v19, v18, v20);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v27, v29, v28, v25);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v37 = *a2;
      *a2 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v38, v31, isUniquelyReferenced_nonNull_native);
      *a2 = v37;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v19, v18, v20);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v27, v29, v28, v25);
    }
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE v21[64];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v20 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
  v19 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v24 = *(_QWORD *)(a2 + v20);
    v15 = TextEffectsAnimationController.state(for:time:)(v14, (double *)&v24, (uint64_t)v21);
    v16 = v23;
    if ((v21[56] & 0xFE) == 2
      || v22 && (v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 120))(v15), (v15 & 1) != 0))
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
LABEL_29:
      swift_release();
      return 1;
    }
    if (v16)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 120))(v15);
      swift_release();
      swift_release();
      swift_release();
      result = swift_release();
      if ((v17 & 1) != 0)
        goto LABEL_29;
    }
    else
    {
      swift_release();
      swift_release();
      result = swift_release();
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v19)
    goto LABEL_30;
  v12 = *(_QWORD *)(v18 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v19)
    goto LABEL_30;
  v12 = *(_QWORD *)(v18 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v19)
    goto LABEL_30;
  v12 = *(_QWORD *)(v18 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v19)
    goto LABEL_30;
  v12 = *(_QWORD *)(v18 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v13 = v11 + 4;
  if (v13 >= v19)
  {
LABEL_30:
    swift_release();
    return 0;
  }
  v12 = *(_QWORD *)(v18 + 8 * v13);
  v8 = v13;
  if (v12)
  {
LABEL_21:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v19)
      goto LABEL_30;
    v12 = *(_QWORD *)(v18 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

void specialized RawTextLayout.init(_:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double *v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;

  v4 = objc_msgSend(a1, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v28 = a1;
    v29 = a2;
    if (v6)
      goto LABEL_3;
LABEL_16:
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_17:
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_layoutFragmentFrame);
    *v29 = v8;
    v29[1] = v24;
    v29[2] = v25;
    v29[3] = v26;
    v29[4] = v27;
    return;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v28 = a1;
  v29 = a2;
  if (!v6)
    goto LABEL_16;
LABEL_3:
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x23B7C6D9C](v7, v5);
      else
        v11 = *(id *)(v5 + 8 * v7 + 32);
      v10 = v11;
      objc_msgSend(v11, sel_typographicBounds, v28);
      v13 = v12;
      v15 = v14;
      objc_msgSend(v10, sel_glyphOrigin);
      v17 = v16;
      v19 = v18;
      v20 = (id)_NSTextLineFragmentGetCTLine(v10);
      if (v20)
      {
        v21 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v23 = v8[2];
        v22 = v8[3];
        if (v23 >= v22 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
        v8[2] = v23 + 1;
        v9 = (double *)&v8[3 * v23];
        *((_QWORD *)v9 + 4) = v21;
        v9[5] = v13 + v17;
        v9[6] = v15 + v19;

        v10 = v21;
      }
      ++v7;

    }
    while (v6 != v7);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t specialized TextRenderLayer.draw(line:glyphOrigin:ranges:in:_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BYTE v43[144];
  uint64_t v44[19];

  v35 = a5;
  v36 = a3;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  v12 = *a1;
  v11 = a1[1];
  LODWORD(v13) = *((unsigned __int8 *)a1 + 16);
  v14 = a1[3];
  v15 = a1[4];
  v16 = *((_DWORD *)a1 + 10);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a4 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v43, (uint64_t)v44, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  result = _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(v44);
  if ((_DWORD)result != 1)
  {
    v34 = v16;
    v18 = TextRenderLayer.textMarkers(for:)(a2);
    if (v18)
    {
      v19 = v18;
      v33 = v12;
      v37 = v12;
      v38 = v11;
      v20 = v11;
      v32 = v13;
      v39 = v13;
      v40 = v14;
      v41 = v15;
      v21 = v34;
      v42 = v34;
      v22 = type metadata accessor for Text.Effect.InteractionMetrics();
      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
      v30(v10, 1, 1, v22);
      v23 = swift_bridgeObjectRetain();
      v24 = v36;
      TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(v23, (uint64_t)&v37, a2, (uint64_t)v10, v36);
      v31 = a2;
      v25 = v24;
      v27 = v26;
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
      closure #1 in closure #1 in closure #1 in TextRunsLayer.draw(in:)(v24, v35);
      if ((v27 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        a2 = v31;
        LOBYTE(v13) = v32;
        v12 = v33;
      }
      else
      {
        v12 = v33;
        v37 = v33;
        v38 = v20;
        v28 = v32;
        v39 = v32;
        v40 = v14;
        v41 = v15;
        v42 = v21;
        v30(v10, 1, 1, v22);
        v13 = v31;
        TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(v19, (uint64_t)&v37, v31, (uint64_t)v10, v25);
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
        a2 = v13;
        LOBYTE(v13) = v28;
      }
    }
    else
    {
      closure #1 in closure #1 in closure #1 in TextRunsLayer.draw(in:)(v36, v35);
      v20 = v11;
    }
    v37 = v12;
    v38 = v20;
    v39 = v13;
    v40 = v14;
    v41 = v15;
    v42 = v34;
    v29 = type metadata accessor for Text.Effect.InteractionMetrics();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v10, 1, 1, v29);
    TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)((uint64_t)&v37, a2, (uint64_t)v10, v36);
    return outlined destroy of Any?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  return result;
}

void specialized TextRenderLayer.drawContent(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  _QWORD v20[4];
  void *aBlock;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v3 = a3;
  isEscapingClosureAtFileLocation = a2;
  v20[2] = a2;
  v20[3] = a3;
  v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v6 + 112) + 56) == *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v7 = swift_dynamicCastClass();
      if (v7)
      {
        v8 = (void *)v7;
        v9 = MEMORY[0x23B7C9E44](v7 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v9)
        {
          v10 = (void *)v9;
          v11 = (void *)MEMORY[0x23B7C9E44](v9 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v11)
          {
            v3 = swift_allocObject();
            *(_QWORD *)(v3 + 16) = partial apply for closure #1 in StaticEffectLayer.draw(in:);
            *(_QWORD *)(v3 + 24) = v20;
            *((_QWORD *)&v24 + 1) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            v25 = v3;
            aBlock = (void *)MEMORY[0x24BDAC760];
            v22 = 1107296256;
            v23 = thunk for @escaping @callee_guaranteed () -> ();
            *(_QWORD *)&v24 = &block_descriptor_60;
            v12 = _Block_copy(&aBlock);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v11, v8, v12);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v12);
            isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0)
              return;
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    v13 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_superlayer);
    if (v13)
    {
      v14 = v13;
      type metadata accessor for TextRenderLayer();
      if (swift_dynamicCastClass())
      {
        v15 = *(void **)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                       + 24);
        v16 = *(_QWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 32);
        v17 = *(_BYTE *)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                       + 40);
        v18 = *(_DWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 64);
        v19 = *(_QWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 88);
        aBlock = v15;
        v22 = v16;
        LOBYTE(v23) = v17;
        v24 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 48);
        LODWORD(v25) = v18;
        v26 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 72);
        v27 = v19;
        outlined copy of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRetain();
        TextRenderLayer.draw(composition:in:)((uint64_t)&aBlock, v3);

        outlined consume of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
  }
}

{
  uint64_t v3;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  _QWORD v20[4];
  void *aBlock;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v3 = a3;
  isEscapingClosureAtFileLocation = a2;
  v20[2] = a2;
  v20[3] = a3;
  v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v6 + 112) + 56) == *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v7 = swift_dynamicCastClass();
      if (v7)
      {
        v8 = (void *)v7;
        v9 = MEMORY[0x23B7C9E44](v7 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v9)
        {
          v10 = (void *)v9;
          v11 = (void *)MEMORY[0x23B7C9E44](v9 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v11)
          {
            v3 = swift_allocObject();
            *(_QWORD *)(v3 + 16) = partial apply for closure #1 in DynamicEffectLayer.draw(in:);
            *(_QWORD *)(v3 + 24) = v20;
            *((_QWORD *)&v24 + 1) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            v25 = v3;
            aBlock = (void *)MEMORY[0x24BDAC760];
            v22 = 1107296256;
            v23 = thunk for @escaping @callee_guaranteed () -> ();
            *(_QWORD *)&v24 = &block_descriptor_79;
            v12 = _Block_copy(&aBlock);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v11, v8, v12);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v12);
            isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0)
              return;
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    v13 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_superlayer);
    if (v13)
    {
      v14 = v13;
      type metadata accessor for TextRenderLayer();
      if (swift_dynamicCastClass())
      {
        v15 = *(void **)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                       + 24);
        v16 = *(_QWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 32);
        v17 = *(_BYTE *)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                       + 40);
        v18 = *(_DWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 64);
        v19 = *(_QWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 88);
        aBlock = v15;
        v22 = v16;
        LOBYTE(v23) = v17;
        v24 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 48);
        LODWORD(v25) = v18;
        v26 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 72);
        v27 = v19;
        outlined copy of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRetain();
        TextRenderLayer.draw(composition:in:)((uint64_t)&aBlock, v3);

        outlined consume of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
  }
}

uint64_t specialized TextRenderLayer.drawContent(_:)(char *a1, CGContext *a2, CGContext *a3, uint64_t a4)
{
  uint64_t isEscapingClosureAtFileLocation;
  CGContext *v5;
  CGContext *v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CGContext *v19;
  id v20;
  void (*v21)(uint64_t *);
  void *v22;
  _QWORD v23[5];
  _QWORD aBlock[5];
  CGContext *v25;
  uint64_t v26[2];
  uint64_t v27;
  uint64_t v28;

  isEscapingClosureAtFileLocation = a4;
  v5 = a3;
  v6 = a2;
  v23[2] = a2;
  v23[3] = a3;
  v23[4] = a4;
  v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController];
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v8 + 112) + 56) == *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v10 = swift_dynamicCastClass();
      if (v10)
      {
        v11 = (void *)v10;
        v12 = MEMORY[0x23B7C9E44](v10 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v12)
        {
          v13 = (void *)v12;
          v14 = (void *)MEMORY[0x23B7C9E44](v12 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v14)
          {
            v6 = (CGContext *)swift_allocObject();
            *((_QWORD *)v6 + 2) = partial apply for closure #1 in TextLinesLayer.draw(in:);
            *((_QWORD *)v6 + 3) = v23;
            aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            v25 = v6;
            aBlock[0] = MEMORY[0x24BDAC760];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_93;
            v15 = _Block_copy(aBlock);
            v5 = v25;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v14, v11, v15);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v15);
            isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            result = swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0)
              return result;
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    -[CGContext contentsScale](v5, sel_contentsScale);
    v17 = v16;
    v27 = 0;
    v28 = 0;
    v18 = one-time initialization token for shared;
    v19 = v5;
    v20 = (id)isEscapingClosureAtFileLocation;
    if (v18 != -1)
      swift_once();
    swift_beginAccess();
    v21 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v22 = static CoreGlue2.shared;
    v21(&v27);

    v26[0] = v27;
    v26[1] = v28;
    specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v6, v26, v17, 0, (uint64_t)v19, (uint64_t)v20);

    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized TextRenderLayer.drawContent(_:)(char *a1, CGContext *a2, uint64_t a3, CGContext *a4)
{
  CGContext *v4;
  uint64_t isEscapingClosureAtFileLocation;
  CGContext *v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CGContext *v19;
  id v20;
  void (*v21)(uint64_t *);
  void *v22;
  _QWORD v23[5];
  _QWORD aBlock[5];
  CGContext *v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v4 = a4;
  isEscapingClosureAtFileLocation = a3;
  v6 = a2;
  v23[2] = a2;
  v23[3] = a3;
  v23[4] = a4;
  v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController];
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v8 + 112) + 56) == *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      v10 = swift_dynamicCastClass();
      if (v10)
      {
        v11 = (void *)v10;
        v12 = MEMORY[0x23B7C9E44](v10 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v12)
        {
          v13 = (void *)v12;
          v14 = (void *)MEMORY[0x23B7C9E44](v12 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v14)
          {
            v6 = (CGContext *)swift_allocObject();
            *((_QWORD *)v6 + 2) = partial apply for closure #1 in TextRunsLayer.draw(in:);
            *((_QWORD *)v6 + 3) = v23;
            aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            v25 = v6;
            aBlock[0] = MEMORY[0x24BDAC760];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_86;
            v15 = _Block_copy(aBlock);
            v4 = v25;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v14, v11, v15);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v15);
            isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            result = swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0)
              return result;
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    objc_msgSend((id)isEscapingClosureAtFileLocation, sel_contentsScale);
    v17 = v16;
    v27 = 0;
    v28 = 0;
    v18 = one-time initialization token for shared;
    v19 = v4;
    v20 = (id)isEscapingClosureAtFileLocation;
    if (v18 != -1)
      swift_once();
    swift_beginAccess();
    v21 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v22 = static CoreGlue2.shared;
    v21(&v27);

    v26[0] = v27;
    v26[1] = v28;
    specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v6, (uint64_t)v26, v17, 0, (uint64_t)v19, v20);

    swift_release();
    return swift_release();
  }
  return result;
}

void specialized Text.Effect.KeyframeSequence.gather(into:fragment:layout:attributedString:map:segmentation:)(_QWORD *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  const __CFAttributedString *v13;
  char v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  unsigned __int8 v19;
  objc_class *v20;
  char *v21;
  char *v22;
  id v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t CopyWithAttributeOverrides;
  char isEscapingClosureAtFileLocation;
  id v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  id v55;
  unint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v68;
  uint64_t v69;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  unsigned __int8 v75;
  CFIndex v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *aBlock;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  void *v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  objc_super v86;

  v69 = *(_QWORD *)(a8 + 16);
  if (!v69)
    return;
  v62 = *(_QWORD **)a3;
  v61 = *(_BYTE *)(a3 + 8);
  v68 = a8 + 32;
  v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16);
  swift_bridgeObjectRetain();
  v11 = 0;
  v64 = a6;
  v65 = a7;
  v63 = a5;
  while (1)
  {
    v16 = v68 + 24 * v11;
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    v76 = v17;
    v75 = v19;
    if (v11)
      break;
    swift_bridgeObjectRetain();
    v12 = v62;
    swift_bridgeObjectRetain();
    v13 = a4;
    v14 = v61;
    v15 = v60;
LABEL_4:
    ++v11;
    aBlock = v12;
    LOBYTE(v81) = v14;
    v82 = v15;
    specialized static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(a1, v18, (uint64_t *)&aBlock, v13, a5, a6, a7, v76, v75);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v11 == v69)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  v20 = (objc_class *)type metadata accessor for TextEffectKeyframeBox();
  v21 = (char *)objc_allocWithZone(v20);
  v22 = &v21[OBJC_IVAR____TtC7SwiftUI21TextEffectKeyframeBox_entry];
  *(_QWORD *)v22 = v18;
  *((_QWORD *)v22 + 1) = v17;
  v22[16] = v19;
  v86.receiver = v21;
  v86.super_class = v20;
  v73 = v18;
  swift_bridgeObjectRetain_n();
  v71 = objc_msgSendSuper2(&v86, sel_init);
  v23 = _NSTextLayoutFragmentLayoutFragmentWithKeyframe(a2, v71);
  type metadata accessor for TextLayoutFragmentRenderer();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v23;
  v74 = v23;
  v25 = objc_msgSend(v74, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v27 = v26;
  v77 = v26;
  if (!(v26 >> 62))
  {
    v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    v72 = v11;
    if (v28)
      goto LABEL_8;
LABEL_26:
    v54 = v74;

    swift_release();
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_27:
    swift_bridgeObjectRelease();
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12[2];
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v28);
    v55 = objc_msgSend(v54, sel_textLineFragments);
    v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = v73;
    if (v56 >> 62)
    {
      swift_bridgeObjectRetain();
      v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v11 = v72;
      if (v59)
        goto LABEL_29;
    }
    else
    {
      v11 = v72;
      if (*(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_29:
        if ((v56 & 0xC000000000000001) != 0)
        {
          v57 = (id)MEMORY[0x23B7C6D9C](0, v56);
        }
        else
        {
          if (!*(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_41;
          v57 = *(id *)(v56 + 32);
        }
        v58 = v57;
        swift_bridgeObjectRelease();
        v13 = (const __CFAttributedString *)objc_msgSend(v58, sel_attributedString);

        goto LABEL_35;
      }
    }

    swift_bridgeObjectRelease();
    v13 = a4;
LABEL_35:
    v14 = 0;
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  v27 = v26;
  v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v72 = v11;
  if (!v28)
    goto LABEL_26;
LABEL_8:
  v78 = v28;
  if (v28 < 1)
    goto LABEL_40;
  v28 = 0;
  v29 = 0;
  v79 = v27 & 0xC000000000000001;
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v30 = v78;
  while (2)
  {
    if (v79)
      v33 = (id)MEMORY[0x23B7C6D9C](v29, v27);
    else
      v33 = *(id *)(v27 + 8 * v29 + 32);
    v32 = v33;
    objc_msgSend(v33, sel_typographicBounds);
    v35 = v34;
    v37 = v36;
    objc_msgSend(v32, sel_glyphOrigin);
    v39 = v38;
    v41 = v40;
    v42 = (id)_NSTextLineFragmentGetCTLine(v32);
    if (!v42)
    {
LABEL_11:
      ++v29;

      if (v30 == v29)
      {
        v54 = v74;

        swift_release();
        a6 = v64;
        a7 = v65;
        a5 = v63;
        goto LABEL_27;
      }
      continue;
    }
    break;
  }
  v43 = v42;
  v44 = _NSTextLineFragmentGetOverridesHandler(v32);
  if (!v44)
  {

LABEL_20:
    v51 = v43;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v53 = v12[2];
    v52 = v12[3];
    if (v53 >= v52 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v12);
    v12[2] = v53 + 1;
    v31 = &v12[6 * v53];
    v31[4] = v51;
    v31[5] = v24;
    *((_BYTE *)v31 + 48) = 0;
    *((double *)v31 + 7) = v35 + v39;
    *((double *)v31 + 8) = v37 + v41;
    *((_DWORD *)v31 + 18) = 0;

    v32 = v51;
    v30 = v78;
    goto LABEL_11;
  }
  v45 = v44;
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v45;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v28);
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  *(_QWORD *)(v47 + 24) = v46;
  v84 = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  v85 = v47;
  aBlock = (_QWORD *)MEMORY[0x24BDAC760];
  v81 = 1107296256;
  v82 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  v83 = &block_descriptor_41;
  v48 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  CopyWithAttributeOverrides = CTLineCreateCopyWithAttributeOverrides();

  _Block_release(v48);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v28 = (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
    v43 = (id)CopyWithAttributeOverrides;
    v27 = v77;
    goto LABEL_20;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void specialized TextRenderLayer.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD v9[9];

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment] = 0;
  v1 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout];
  _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v9);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v9, v1, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
  v2 = &v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_rawLayout];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers] = 0;
  v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] = 0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectToSegmentsIndices] = MEMORY[0x24BEE4B00];
  v4 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectIdentifiers] = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version] = -1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements] = v3;
  v5 = &v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
  *v5 = 0u;
  v5[1] = 0u;
  v6 = &v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets];
  *v6 = 0u;
  v6[1] = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutLineFragmentPadding] = 0;
  v7 = &v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement];
  *v7 = 0u;
  v7[1] = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_activeIdentifiers] = v4;
  v8 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
  *(CFTimeInterval *)&v0[v8] = CACurrentMediaTime();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized Collection.prefix(while:)(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a4;
  v25 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v25);
  v24 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x24BDAC7A8](v30);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - v13;
  if (a1 == a2)
    return;
  v23 = v4;
  v15 = *(_QWORD *)(a3 + 32);
  v16 = v15 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v17 = *(_QWORD *)(v15 + 16);
  if (v17 <= a1)
    v17 = a1;
  v28 = v16;
  v29 = v17;
  if (a2 <= a1)
    v18 = a1;
  else
    v18 = a2;
  v27 = v18;
  v19 = a1;
  v26 = v12;
  do
  {
    if (v29 == v19)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    outlined init with copy of TypesettingLanguage(v28 + *(_QWORD *)(v12 + 72) * v19, (uint64_t)v14, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of TypesettingLanguage((uint64_t)v14, (uint64_t)v10, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v21 = v24;
        outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v24, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v22 = *(_QWORD *)(v21 + *(int *)(v25 + 28));
        outlined destroy of TypesettingConfiguration(v21, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        goto LABEL_15;
      }
      v22 = *(_QWORD *)v10;
      outlined consume of Text.Layout.Line.Line(*((void **)v10 + 3), *((_QWORD *)v10 + 4), v10[40]);
    }
    else
    {
      v22 = *((_QWORD *)v10 + 2);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_15:
    outlined destroy of TypesettingConfiguration((uint64_t)v14, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (v22 != v31)
      goto LABEL_20;
    if (a2 < a1)
      goto LABEL_23;
    if (v27 == v19)
      goto LABEL_24;
    ++v19;
    v12 = v26;
  }
  while (a2 != v19);
  v19 = a2;
LABEL_20:
  if (v19 >= a1)
    return;
LABEL_25:
  __break(1u);
}

uint64_t specialized TextEffectsAnimationController.TimingMap.update(at:)(double *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  double v17;
  Swift::UInt64 v18;
  uint64_t v19;

  v3 = *a1;
  v19 = MEMORY[0x24BEE4B08];
  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v10 << 6);
LABEL_21:
    v16 = *(_QWORD *)(a2 + 56) + 120 * v12;
    if ((*(_BYTE *)(v16 + 24) & 1) == 0)
    {
      if (*(_BYTE *)(v16 + 40))
      {
        v17 = v3;
        if (*(_BYTE *)(v16 + 40) == 1)
          goto LABEL_4;
      }
      else
      {
        v17 = *(double *)(v16 + 32);
      }
      if (*(double *)(v16 + 16) <= v17 - *(double *)(v16 + 8))
LABEL_4:
        result = specialized Set._Variant.insert(_:)(&v18, *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v12));
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v8)
    goto LABEL_28;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_20;
  v10 = v13 + 1;
  if (v13 + 1 >= v8)
    goto LABEL_28;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
    goto LABEL_20;
  v10 = v13 + 2;
  if (v13 + 2 >= v8)
    goto LABEL_28;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_21;
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_28:
    swift_release();
    return v19;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_28;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v25;
  uint64_t v26;

  v25 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = (uint64_t *)(a4 + 80);
  v12 = (unint64_t)(v8 + 63) >> 6;
  while (2)
  {
    v26 = v5;
    while (1)
    {
      if (v10)
      {
        v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v14 = v13 | (v6 << 6);
      }
      else
      {
        v15 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        if (v15 >= v12)
          goto LABEL_27;
        v16 = *(_QWORD *)(v7 + 8 * v15);
        ++v6;
        if (!v16)
        {
          v6 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_27;
          v16 = *(_QWORD *)(v7 + 8 * v6);
          if (!v16)
          {
            v6 = v15 + 2;
            if (v15 + 2 >= v12)
              goto LABEL_27;
            v16 = *(_QWORD *)(v7 + 8 * v6);
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v12)
              {
LABEL_27:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v25, a2, v26, a3);
              }
              v16 = *(_QWORD *)(v7 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v6 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_29;
                  if (v6 >= v12)
                    goto LABEL_27;
                  v16 = *(_QWORD *)(v7 + 8 * v6);
                  ++v17;
                  if (v16)
                    goto LABEL_22;
                }
              }
              v6 = v17;
            }
          }
        }
LABEL_22:
        v10 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v6 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v14);
      swift_beginAccess();
      v19 = *v11;
      if (!*(_QWORD *)(*v11 + 16))
        break;
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
      if ((v21 & 1) == 0)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      v23 = swift_endAccess();
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 96))(v23);
      if ((result & 1) != 0)
        goto LABEL_5;
    }
    result = swift_endAccess();
LABEL_5:
    *(unint64_t *)((char *)v25 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v5 = v26 + 1;
    if (!__OFADD__(v26, 1))
      continue;
    break;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v3 = v2;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v12, v8, a1, a2);
    swift_release();
    swift_release();
    MEMORY[0x23B7C9D54](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

void type metadata accessor for (key: UUID, value: TextRenderSurface)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface))
  {
    type metadata accessor for UUID();
    type metadata accessor for TextRenderSurface();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface));
  }
}

uint64_t _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOg(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined retain of TextRenderLayer.Layout(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

uint64_t outlined copy of Text.Effect.Composition.Operation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (!(a8 >> 62))
  {
    outlined copy of Text.Layout.Line.Line(a3, a4, a5 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Text.Effect.Composition.Operation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (!(a8 >> 62))
  {
    outlined consume of Text.Layout.Line.Line(a3, a4, a5 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void outlined consume of TextRenderLayer.Layout?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

id outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(id result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  id v11;

  switch(a11 >> 5)
  {
    case 0:
      result = outlined copy of Text.Layout.Line.Line(result, a2, a3 & 1);
      break;
    case 1:
      v11 = result;
      swift_retain();
      result = v11;
      goto LABEL_4;
    case 2:
      result = (id)outlined copy of Path.Storage((uint64_t)result, a2, a3, a4, a5);
      break;
    case 3:
LABEL_4:
      result = result;
      break;
    case 4:
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined retain of Text.Effect.ResolvedDrawing.Operation(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 80);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v4);
  return a1;
}

void outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  switch(a11 >> 5)
  {
    case 0:
      outlined consume of Text.Layout.Line.Line(a1, a2, a3 & 1);
      break;
    case 1:

      swift_release();
      break;
    case 2:
      outlined consume of Path.Storage((uint64_t)a1, a2, a3, a4, a5);
      break;
    case 3:

      break;
    case 4:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Text.Effect.MarkerLayoutInfo.Element(a2, a1);
  return a2;
}

uint64_t outlined destroy of Text.Effect.MarkerLayoutInfo.Element(uint64_t a1)
{
  destroy for Text.Effect.MarkerLayoutInfo.Element(a1);
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>));
  }
}

void type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
    lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  }
}

unint64_t lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4930], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4928], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

uint64_t outlined copy of Text.Effect.Markers.MarkerType(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of Text.Effect.Markers.MarkerType(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined copy of TextEffectsAnimationController.Timing?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t result;

  if (a7 != 1)
  {
    swift_retain();
    outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a8, a9, a10, a11 & 1);
    return outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a12, a13, a14, a15 & 1);
  }
  return result;
}

uint64_t outlined consume of TextEffectsAnimationController.Timing?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t result;

  if (a7 != 1)
  {
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(a8, a9, a10, a11 & 1);
    return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(a12, a13, a14, a15 & 1);
  }
  return result;
}

_BYTE *outlined init with take of Text.Effect.Phase.Storage(_BYTE *a1, _BYTE *a2)
{
  __swift_memcpy1_1(a2, a1);
  return a2;
}

uint64_t sub_234BBFA38()
{
  return swift_deallocObject();
}

uint64_t sub_234BBFA48()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned _NSTextAnimator) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment))
  {
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
  }
}

void type metadata accessor for (UUID, NSTextLayoutFragment)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UUID, NSTextLayoutFragment))
  {
    type metadata accessor for UUID();
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID, NSTextLayoutFragment));
  }
}

_QWORD *outlined release of TextRenderLayer.Layout?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  return a1;
}

id outlined copy of TextRenderLayer.Layout?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a18;
  }
  return result;
}

uint64_t outlined init with take of (key: UUID, value: TextRenderSurface)?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for [(_:)](0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

BOOL partial apply for specialized closure #1 in RangeSet.contains(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(uint64_t **)(v1 + 16);
  v4 = *v2;
  v3 = v2[1];
  return v4 >= *a1 && a1[1] >= v3;
}

uint64_t outlined release of Text.Effect.RenderSegmentation.StaticLines(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for thunk for @callee_unowned @convention(block) (@unowned NSTextRange?, @unowned CGRect, @unowned CGFloat, @unowned NSTextContainer) -> (@unowned ObjCBool)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_234BBFD2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t specialized TextEffectsRenderer.updateKeyframes(with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t *, char *, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  void *v64;
  void (*v65)(uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  BOOL v75;
  id v76;
  void *v77;
  char *v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  void *v88;
  id v89;
  id v90;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  int v102;
  id v103;
  int v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  char *v108;
  char *v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  char *v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char *v118;
  _QWORD v119[7];
  unsigned __int8 v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;

  v96 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v118 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v114 = (char *)&v92 - v6;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v97 = (uint64_t *)((char *)&v92 - v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v92 - v14);
  MEMORY[0x24BDAC7A8](v16);
  v109 = (char *)&v92 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v92 = (char *)&v92 - v19;
  type metadata accessor for (NSTextLayoutFragment, UUID)();
  v117 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v108 = (char **)((char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v22);
  v110 = (char **)((char *)&v92 - v23);
  v24 = *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion) + 1;
  v98 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion;
  *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion) = v24;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  v25 = (_QWORD *)swift_allocObject();
  v26 = MEMORY[0x24BEE4B08];
  v25[5] = MEMORY[0x24BEE4B08];
  v27 = MEMORY[0x24BEE4B00];
  v25[6] = MEMORY[0x24BEE4B00];
  v25[2] = v27;
  v25[3] = v27;
  v25[4] = v27;
  swift_beginAccess();
  v25[5] = v26;
  swift_bridgeObjectRelease();
  v25[7] = v24;
  v123 = v25;
  v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v93 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  v29 = *(uint64_t **)((char *)a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v121 = v28;
  v122 = 0;
  v95 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  v113 = a1;
  v115 = *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  if ((unint64_t)v29 >> 62)
  {
LABEL_46:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v30 = *(_QWORD *)(((unint64_t)v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v31 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
  v116 = v15;
  if (v30)
  {
    v104 = 0;
    v32 = 0;
    v33 = v115;
    v112 = *(_QWORD *)(v115 + 16);
    v105 = (char *)v113 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
    v111 = (unint64_t)v29 & 0xC000000000000001;
    v15 = v97;
    v94 = v10;
    v107 = v29;
    v106 = v30;
    while (1)
    {
      v34 = v111 ? (id)MEMORY[0x23B7C6D9C](v32, v29) : (id)v29[v32 + 4];
      v35 = v34;
      if (v112 == v32)
        break;
      if (v32 >= *(_QWORD *)(v33 + 16))
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v36 = (uint64_t)v118;
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v118, v33+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v32, v7);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v36, 0, 1, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v36, 1, v7) == 1)
        goto LABEL_18;
      v37 = *(void (**)(uint64_t *, char *, uint64_t))(v8 + 32);
      v37(v15, v118, v7);
      v38 = *(int *)(v117 + 48);
      v39 = v110;
      v40 = (char *)v110 + v38;
      *v110 = v35;
      v37((_QWORD *)((char *)v39 + v38), (char *)v15, v7);
      v37((uint64_t *)v10, v40, v7);
      v41 = (uint64_t *)v105;
      swift_beginAccess();
      v42 = *v41;
      if (*(_QWORD *)(*v41 + 16)
        && (v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v44 & 1) != 0))
      {
        v45 = *(void **)(*(_QWORD *)(v42 + 56) + 8 * v43);
        swift_endAccess();
        v46 = v45;
        v103 = v46;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        v48 = v121;
        v47 = v122;
        v49 = *(uint64_t *)((char *)v113 + v98);
        v50 = *(void **)&v46[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        swift_bridgeObjectRetain();
        v51 = v50;
        TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(v35, v48, v47, v49, (uint64_t)v119);
        v100 = v119[0];
        v101 = v35;
        v52 = v119[1];
        v53 = v119[2];
        v54 = v119[3];
        v55 = v119[4];
        v56 = v119[5];
        v99 = v119[6];
        v102 = v120;
        swift_bridgeObjectRelease();

        Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(v100, v52, v53, v54, v55, v56, v99, (uint64_t)&v121);
        swift_bridgeObjectRelease();
        v10 = v94;
        swift_bridgeObjectRelease();
        v15 = v97;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v104 |= v102;
      }
      else
      {
        swift_endAccess();

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
      ++v32;
      v29 = v107;
      v33 = v115;
      if (v106 == v32)
        goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v118, 1, 1, v7);
LABEL_18:

    outlined destroy of Any?((uint64_t)v118, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    if ((v104 & 1) == 0)
      goto LABEL_21;
    v57 = swift_retain();
    TextEffectsAnimationController.updateKeyframes(_:)(v57);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    TextEffectsAnimationController.updateKeyframes(version:)(*(uint64_t *)((char *)v113 + v98));
  }
  v58 = (uint64_t)v92;
  v59 = *(uint64_t *)((char *)v113 + v95);
  if (*(_QWORD *)(v59 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v92, v59 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    v60 = (char *)v113 + v31[18];
    swift_beginAccess();
    v61 = *(_QWORD *)v60;
    if (*(_QWORD *)(*(_QWORD *)v60 + 16)
      && (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v58), (v63 & 1) != 0))
    {
      v64 = *(void **)(*(_QWORD *)(v61 + 56) + 8 * v62);
      swift_endAccess();
      v65 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v66 = v64;
      v65(v58, v7);
      v15 = v31;
      v67 = *(uint64_t *)((char *)v113 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver);
      v68 = objc_msgSend(*(id *)&v66[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer], sel_superlayer);
      v69 = objc_msgSend(v68, sel_superlayer);

      v70 = *(void **)(v67 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
      *(_QWORD *)(v67 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor) = v69;
      v31 = v15;

    }
    else
    {
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v58, v7);
    }
  }
  v29 = *(uint64_t **)((char *)v113 + v93);
  v71 = *(uint64_t *)((char *)v113 + v95);
  if ((unint64_t)v29 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = (char *)_CocoaArrayWrapper.endIndex.getter();
    v72 = (uint64_t)v114;
    if (!v10)
      goto LABEL_43;
  }
  else
  {
    v10 = *(char **)(((unint64_t)v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72 = (uint64_t)v114;
    if (!v10)
      goto LABEL_43;
  }
  v73 = 0;
  v118 = *(char **)(v71 + 16);
  v113 = (uint64_t *)((char *)v113 + v31[18]);
  v115 = (unint64_t)v29 & 0xC000000000000001;
  v74 = v109;
  while (1)
  {
    v76 = v115 ? (id)MEMORY[0x23B7C6D9C](v73, v29) : (id)v29[(_QWORD)v73 + 4];
    v77 = v76;
    if (v118 == v73)
      break;
    if ((unint64_t)v73 >= *(_QWORD *)(v71 + 16))
      goto LABEL_45;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v72, v71+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * (_QWORD)v73, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v72, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v72, 1, v7) == 1)
      goto LABEL_42;
    v15 = v29;
    v78 = v10;
    v79 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    v79(v74, v72, v7);
    v80 = *(int *)(v117 + 48);
    v81 = (char *)v108;
    v82 = (char *)v108 + v80;
    *v108 = v77;
    v79(&v81[v80], (uint64_t)v74, v7);
    v79((char *)v116, (uint64_t)v82, v7);
    v83 = (uint64_t)v116;
    v84 = v113;
    swift_beginAccess();
    v85 = *v84;
    if (*(_QWORD *)(v85 + 16) && (v86 = specialized __RawDictionaryStorage.find<A>(_:)(v83), (v87 & 1) != 0))
    {
      v88 = *(void **)(*(_QWORD *)(v85 + 56) + 8 * v86);
      swift_endAccess();
      v89 = v88;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v83, v7);
      v90 = v89;
      (*(void (**)(uint64_t, void *, id))(v96 + 16))(v96, v77, v90);

    }
    else
    {
      swift_endAccess();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v83, v7);
    }
    ++v73;
    v10 = v78;
    v75 = v78 == v73;
    v72 = (uint64_t)v114;
    v29 = v15;
    if (v75)
      goto LABEL_43;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v72, 1, 1, v7);
LABEL_42:

  outlined destroy of Any?(v72, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x24BDCEA58], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void specialized TextEffectsRenderer.endLayout(with:)(int64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  CGFloat v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  void (*v64)(char *, unint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  void *v67;
  objc_class *v68;
  _BYTE *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  _OWORD *v76;
  uint64_t v77;
  id v78;
  char *v79;
  id v80;
  unint64_t v81;
  unint64_t *v82;
  id v83;
  CGFloat v84;
  char *v85;
  void *v86;
  id v87;
  int v88;
  _QWORD *v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  _QWORD *v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  const void *v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  double *v113;
  uint64_t v114;
  id v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  id v121;
  void *v122;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v127;
  CGFloat v128;
  double v129;
  double v130;
  double v131;
  CGFloat v132;
  double *v133;
  _BOOL4 v134;
  id v135;
  const void *v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  int64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  int64_t v155;
  CGFloat v156;
  double v157;
  CGFloat v158;
  _QWORD *v159;
  uint64_t v160;
  objc_super v161;
  objc_super v162;
  __int128 v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v147 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)&v157 = (char *)&v137 - v8;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v149 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v137 - v13;
  v141 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  v16 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  v18 = (unint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments);
  swift_beginAccess();
  v138 = v18;
  v19 = *v18;
  v140 = a2;
  _Block_copy(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = specialized updatedIdentifiers<A, B>(a:b:makeIdentifier:)(v15, v17, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v4;
  swift_bridgeObjectRelease();
  v22 = swift_bridgeObjectRetain();
  v23 = specialized Set.init<A>(_:)(v22);
  swift_bridgeObjectRelease();
  *(double *)&v24 = COERCE_DOUBLE(specialized _NativeSet.subtracting<A>(_:)(v20, v23));
  v25 = swift_bridgeObjectRetain();
  v26 = specialized Set.init<A>(_:)(v25);
  v137 = v20;
  swift_bridgeObjectRelease();
  v139 = v16;
  v27 = swift_bridgeObjectRetain();
  v28 = v26;
  v29 = v5;
  v148 = specialized _NativeSet.subtracting<A>(_:)(v27, v28);
  swift_bridgeObjectRelease();
  v30 = 0;
  v31 = *(_QWORD *)(v24 + 56);
  *(_QWORD *)&v154 = v24 + 56;
  v156 = *(double *)&v24;
  v32 = 1 << *(_BYTE *)(v24 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v146 = a1;
  v155 = (unint64_t)(v32 + 63) >> 6;
  v153 = *(double *)&v4;
  v152 = *(double *)&v29;
  *(_QWORD *)&v158 = a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  while (1)
  {
    if (v34)
    {
      v37 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v38 = v37 | (v30 << 6);
      goto LABEL_22;
    }
    v39 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    v40 = v149;
    if (v39 >= v155)
      goto LABEL_27;
    v41 = *(_QWORD *)(*(_QWORD *)&v154 + 8 * v39);
    ++v30;
    if (!v41)
    {
      v30 = v39 + 1;
      if (v39 + 1 >= v155)
        goto LABEL_27;
      v41 = *(_QWORD *)(*(_QWORD *)&v154 + 8 * v30);
      if (!v41)
      {
        v30 = v39 + 2;
        if (v39 + 2 >= v155)
          goto LABEL_27;
        v41 = *(_QWORD *)(*(_QWORD *)&v154 + 8 * v30);
        if (!v41)
          break;
      }
    }
LABEL_21:
    v34 = (v41 - 1) & v41;
    v38 = __clz(__rbit64(v41)) + (v30 << 6);
LABEL_22:
    v43 = *(_QWORD *)(v29 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v14, *(_QWORD *)(*(_QWORD *)&v156 + 48) + v43 * v38, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v14, 0, 1, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, v21) == 1)
    {
      swift_release();
      v40 = v149;
      goto LABEL_28;
    }
    v44 = *(_QWORD *)&v157;
    (*(void (**)(double, char *, uint64_t))(v29 + 32))(COERCE_DOUBLE(*(_QWORD *)&v157), v14, v21);
    swift_beginAccess();
    v16 = v29;
    swift_bridgeObjectRetain();
    v45 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
    LOBYTE(v44) = v46;
    swift_bridgeObjectRelease();
    v36 = 0;
    if ((v44 & 1) != 0)
    {
      v47 = v158;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49 = **(_QWORD **)&v47;
      v160 = **(_QWORD **)&v47;
      **(_QWORD **)&v47 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v49 = v160;
      }
      v16 = *(_QWORD *)&v152;
      v21 = *(_QWORD *)&v153;
      (*(void (**)(unint64_t, double))(*(_QWORD *)&v152 + 8))(*(_QWORD *)(v49 + 48) + v45 * v43, COERCE_DOUBLE(*(_QWORD *)&v153));
      v35 = v160;
      v36 = *(void **)(*(_QWORD *)(v160 + 56) + 8 * v45);
      specialized _NativeDictionary._delete(at:)(v45, v160);
      **(_QWORD **)&v47 = v35;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();

    (*(void (**)(double, uint64_t))(v16 + 8))(COERCE_DOUBLE(*(_QWORD *)&v157), v21);
    v29 = v16;
  }
  v42 = v39 + 3;
  if (v42 < v155)
  {
    v41 = *(_QWORD *)(*(_QWORD *)&v154 + 8 * v42);
    if (!v41)
    {
      while (1)
      {
        v30 = v42 + 1;
        if (__OFADD__(v42, 1))
          break;
        if (v30 >= v155)
          goto LABEL_27;
        v41 = *(_QWORD *)(*(_QWORD *)&v154 + 8 * v30);
        ++v42;
        if (v41)
          goto LABEL_21;
      }
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_76;
LABEL_63:
      if ((v16 & 0xC000000000000001) != 0)
      {
        v105 = (id)MEMORY[0x23B7C6D9C](0, v16);
      }
      else
      {
        if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_99:
          v136 = v140;
          _Block_release(v140);
          _Block_release(v136);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        v105 = *(id *)(v16 + 32);
      }
      v106 = v105;
      swift_bridgeObjectRelease();
      v107 = objc_msgSend(v106, sel_textLayoutManager);

      v108 = 0;
      if (v107)
      {
        v109 = objc_msgSend(v107, sel_textContainer);

        if (v109)
        {
          objc_msgSend(v109, sel_lineFragmentPadding);
          v108 = v110;

        }
      }
      goto LABEL_77;
    }
    v30 = v42;
    goto LABEL_21;
  }
LABEL_27:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v14, 1, 1, v21);
  swift_release();
LABEL_28:
  v16 = 0;
  v50 = *(_QWORD *)(v148 + 56);
  v142 = v148 + 56;
  v51 = 1 << *(_BYTE *)(v148 + 32);
  if (v51 < 64)
    v52 = ~(-1 << v51);
  else
    v52 = -1;
  v53 = v52 & v50;
  v145 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController;
  v144 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver;
  v143 = (unint64_t)(v51 + 63) >> 6;
  v30 = v146;
  v54 = (uint64_t)v147;
  while (2)
  {
    if (v53)
    {
      v57 = __clz(__rbit64(v53));
      v58 = (v53 - 1) & v53;
      v59 = v57 | (v16 << 6);
LABEL_50:
      v63 = *(_QWORD *)(v29 + 72);
      v64 = *(void (**)(char *, unint64_t, uint64_t))(v29 + 16);
      v64(v40, *(_QWORD *)(v148 + 48) + v63 * v59, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v40, 0, 1, v21);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v40, 1, v21) == 1)
        goto LABEL_61;
      v150 = v63;
      v151 = *(double *)&v64;
      v154 = *(double *)&v58;
      v155 = v16;
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v54, v40, v21);
      v157 = COERCE_DOUBLE(type metadata accessor for TextRenderSurface());
      v65 = (char *)objc_allocWithZone(*(Class *)&v157);
      *(_QWORD *)&v156 = &v65[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer];
      swift_unknownObjectWeakInit();
      *(_QWORD *)&v65[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement] = 0;
      v66 = *(_QWORD *)(v30 + v145);
      v67 = *(void **)(v30 + v144);
      v68 = (objc_class *)type metadata accessor for TextRenderLayer();
      v69 = objc_allocWithZone(v68);
      swift_unknownObjectWeakInit();
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_fragment] = 0;
      v70 = (uint64_t)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layout];
      _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(&v163);
      outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v163, v70, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_25061F948);
      v71 = &v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_rawLayout];
      *(_OWORD *)v71 = 0u;
      *((_OWORD *)v71 + 1) = 0u;
      *((_QWORD *)v71 + 4) = 0;
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_markers] = 0;
      v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_updateFlags] = 0;
      v72 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_segmentLayers] = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectToSegmentsIndices] = MEMORY[0x24BEE4B00];
      v73 = MEMORY[0x24BEE4B08];
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_effectIdentifiers] = MEMORY[0x24BEE4B08];
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_version] = -1;
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_displacements] = v72;
      v74 = &v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBounds];
      *v74 = 0u;
      v74[1] = 0u;
      v75 = &v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutBoundsNaturalOutsets];
      *v75 = 0u;
      v75[1] = 0u;
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_layoutLineFragmentPadding] = 0;
      v76 = &v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_currentDisplacement];
      *v76 = 0u;
      v76[1] = 0u;
      *(_QWORD *)&v69[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_activeIdentifiers] = v73;
      v77 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_time;
      v78 = (id)v30;
      v79 = v65;
      swift_retain();
      v80 = v67;
      v30 = v69;
      *(CFTimeInterval *)&v69[v77] = CACurrentMediaTime();
      *(_QWORD *)(v30 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_animationController) = v66;
      swift_unknownObjectWeakAssign();
      v81 = specialized Dictionary.init(dictionaryLiteral:)(v72);
      v82 = (unint64_t *)(v30
                               + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D415TextRenderLayer_baseFragmentIdentifierMap);
      *v82 = v81;
      v82[1] = 0;
      swift_retain();

      v162.receiver = (id)v30;
      v162.super_class = v68;
      v83 = objc_msgSendSuper2(&v162, sel_init);
      v84 = v158;
      swift_release();

      *(_QWORD *)&v79[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer] = v83;
      swift_unknownObjectWeakAssign();

      v161.receiver = v79;
      *(double *)&v161.super_class = v157;
      v85 = (char *)objc_msgSendSuper2(&v161, sel_init);
      v86 = *(void **)&v85[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      v16 = v85;
      v87 = v86;
      objc_msgSend(v87, sel_setDelegate_, v16);

      v54 = (uint64_t)v147;
      swift_beginAccess();
      v88 = swift_isUniquelyReferenced_nonNull_native();
      v159 = **(_QWORD ***)&v84;
      v89 = v159;
      **(_QWORD **)&v84 = 0x8000000000000000;
      v91 = specialized __RawDictionaryStorage.find<A>(_:)(v54);
      v92 = v89[2];
      v93 = (v90 & 1) == 0;
      v94 = v92 + v93;
      if (__OFADD__(v92, v93))
      {
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v95 = v90;
      if (v89[3] >= v94)
      {
        v30 = v146;
        if ((v88 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v94, v88);
        v96 = specialized __RawDictionaryStorage.find<A>(_:)(v54);
        v30 = v146;
        if ((v95 & 1) != (v97 & 1))
          goto LABEL_99;
        v91 = v96;
      }
      v40 = v149;
      v98 = v159;
      if ((v95 & 1) != 0)
      {
        v55 = v159[7];
        v56 = 8 * v91;

        *(_QWORD *)(v55 + v56) = v16;
        v21 = *(_QWORD *)&v153;
      }
      else
      {
        v159[(v91 >> 6) + 8] |= 1 << v91;
        v21 = *(_QWORD *)&v153;
        (*(void (**)(unint64_t, uint64_t, _QWORD))&v151)(v98[6] + v91 * v150, v54, *(_QWORD *)&v153);
        *(_QWORD *)(v98[7] + 8 * v91) = v16;
        v99 = v98[2];
        v100 = __OFADD__(v99, 1);
        v101 = v99 + 1;
        if (v100)
          goto LABEL_70;
        v98[2] = v101;
      }
      **(_QWORD **)&v84 = v98;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)&v152;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)&v152 + 8))(v54, v21);
      swift_endAccess();
      v16 = v155;
      v53 = *(_QWORD *)&v154;
      continue;
    }
    break;
  }
  v60 = v16 + 1;
  if (__OFADD__(v16, 1))
    goto LABEL_72;
  if (v60 < v143)
  {
    v61 = *(_QWORD *)(v142 + 8 * v60);
    ++v16;
    if (!v61)
    {
      v16 = v60 + 1;
      if (v60 + 1 >= v143)
        goto LABEL_60;
      v61 = *(_QWORD *)(v142 + 8 * v16);
      if (!v61)
      {
        v16 = v60 + 2;
        if (v60 + 2 >= v143)
          goto LABEL_60;
        v61 = *(_QWORD *)(v142 + 8 * v16);
        if (!v61)
        {
          v62 = v60 + 3;
          if (v62 >= v143)
            goto LABEL_60;
          v61 = *(_QWORD *)(v142 + 8 * v62);
          if (!v61)
          {
            while (1)
            {
              v16 = v62 + 1;
              if (__OFADD__(v62, 1))
                goto LABEL_74;
              if (v16 >= v143)
                goto LABEL_60;
              v61 = *(_QWORD *)(v142 + 8 * v16);
              ++v62;
              if (v61)
                goto LABEL_49;
            }
          }
          v16 = v62;
        }
      }
    }
LABEL_49:
    v58 = (v61 - 1) & v61;
    v59 = __clz(__rbit64(v61)) + (v16 << 6);
    goto LABEL_50;
  }
LABEL_60:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v40, 1, 1, v21);
LABEL_61:
  swift_release();
  v102 = v141;
  *(_QWORD *)(v30 + v141) = *v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v30 + v139) = v137;
  swift_bridgeObjectRelease();
  v103 = v140;
  _Block_copy(v140);
  specialized TextEffectsRenderer.updateKeyframes(with:)((uint64_t *)v30, (uint64_t)v103);
  _Block_release(v103);
  v16 = *(_QWORD *)(v30 + v102);
  if ((unint64_t)v16 >> 62)
    goto LABEL_75;
  v104 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v104)
    goto LABEL_63;
LABEL_76:
  swift_bridgeObjectRelease();
  v108 = 0;
LABEL_77:
  v111 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding;
  *(_QWORD *)(v30 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding) = v108;
  v112 = *(_QWORD *)(v30 + v141);
  v113 = (double *)MEMORY[0x24BDBF070];
  if (v112 >> 62)
    goto LABEL_96;
  v114 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  v115 = (id)v30;
  while (1)
  {
    v116 = *v113;
    v117 = v113[1];
    v118 = v113[2];
    v119 = v113[3];
    if (!v114)
      break;
    v120 = 4;
    v154 = *v113;
    v153 = v117;
    v152 = v118;
    v151 = v119;
    while (1)
    {
      v121 = (v112 & 0xC000000000000001) != 0
           ? (id)MEMORY[0x23B7C6D9C](v120 - 4, v112)
           : *(id *)(v112 + 8 * v120);
      v122 = v121;
      v113 = (double *)(v120 - 3);
      if (__OFADD__(v120 - 4, 1))
        break;
      v155 = *(_QWORD *)&v119;
      v156 = v118;
      v157 = v117;
      v158 = v116;
      objc_msgSend(v121, sel_layoutFragmentFrame);
      x = v166.origin.x;
      y = v166.origin.y;
      width = v166.size.width;
      height = v166.size.height;
      v127 = *(double *)(v30 + v111);
      if (!CGRectIsNull(v166))
      {
        v167.origin.x = x;
        v167.origin.y = y;
        v167.size.width = width;
        v167.size.height = height;
        v168 = CGRectStandardize(v167);
        v128 = v168.origin.y;
        v129 = v168.origin.x - v127;
        v130 = v168.size.width - (-v127 - v127);
        v131 = v168.size.height + 0.0;
        v168.origin.x = v129;
        v168.size.width = v130;
        v168.size.height = v168.size.height + 0.0;
        v132 = CGRectGetWidth(v168);
        x = v154;
        y = v153;
        width = v152;
        height = v151;
        if (v132 >= 0.0)
        {
          v169.origin.x = v129;
          v169.origin.y = v128;
          v169.size.width = v130;
          v169.size.height = v131;
          x = v129;
          y = v128;
          width = v130;
          height = v131;
          if (CGRectGetHeight(v169) < 0.0)
          {
            x = v154;
            y = v153;
            width = v152;
            height = v151;
          }
        }
      }
      v164.origin.x = v158;
      v164.origin.y = v157;
      v164.size.width = v156;
      *(_QWORD *)&v164.size.height = v155;
      v171.origin.x = x;
      v171.origin.y = y;
      v171.size.width = width;
      v171.size.height = height;
      v165 = CGRectUnion(v164, v171);
      v116 = v165.origin.x;
      v117 = v165.origin.y;
      v118 = v165.size.width;
      v119 = v165.size.height;

      ++v120;
      if (v113 == (double *)v114)
        goto LABEL_90;
    }
    __break(1u);
LABEL_96:
    swift_bridgeObjectRetain_n();
    v135 = (id)v30;
    v114 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_90:

  swift_bridgeObjectRelease_n();
  v170.origin.x = v116;
  v170.origin.y = v117;
  v170.size.width = v118;
  v170.size.height = v119;
  if (CGRectIsNull(v170))
  {
    v118 = 0.0;
    v119 = 0.0;
    v116 = 0.0;
    v117 = 0.0;
  }
  v133 = (double *)(v30 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds);
  v172.origin.x = v116;
  v172.origin.y = v117;
  v172.size.width = v118;
  v172.size.height = v119;
  v134 = CGRectEqualToRect(*(CGRect *)(v30 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds), v172);
  if (!v134)
  {
    *v133 = v116;
    v133[1] = v117;
    v133[2] = v118;
    v133[3] = v119;
  }
  TextEffectsRenderer.updateDisplacementAndBounds(changed:)(!v134);
  TextEffectsAnimationController.restorePendingSnapshots()();
  _Block_release(v140);
}

void specialized TextEffectsRenderer.externalDisplayLink.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController);
  *(_QWORD *)(v2 + 24) = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*(_BYTE *)(v2 + 40) == 1)
  {
    TextEffectsAnimationController.clearDisplayLink()();
    if ((*(_BYTE *)(v2 + 40) & 1) == 0)
    {
      *(_BYTE *)(v2 + 40) = 1;
      *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(_QWORD *)(v2 + 48))
      {
        v3 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
        v4 = *(void **)(v2 + 48);
        *(_QWORD *)(v2 + 48) = v3;

        v5 = *(void **)(v2 + 48);
        if (v5)
        {
          v6 = (void *)objc_opt_self();
          v7 = v5;
          v8 = objc_msgSend(v6, sel_mainRunLoop);
          objc_msgSend(v7, sel_addToRunLoop_forMode_, v8, *MEMORY[0x24BDBCB80]);

        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t sub_234BC19A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  uint64_t v8;

  closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(a1, a2, a3, *(_QWORD *)(v8 + 16), *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double, double))(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), a4, a5, a6, a7, a8);
}

uint64_t sub_234BC19DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(*(void **)(v0 + 16));
}

uint64_t implicit closure #1 in NSTextRange.textRange.getterpartial apply()
{
  uint64_t v0;

  return implicit closure #1 in NSTextRange.textRange.getter(*(void **)(v0 + 16));
}

double _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void type metadata accessor for (NSTextLayoutFragment, UUID)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NSTextLayoutFragment, UUID))
  {
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    type metadata accessor for UUID();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NSTextLayoutFragment, UUID));
  }
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_234BC1AA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_234BC1AC0()
{
  return swift_deallocObject();
}

uint64_t outlined assign with copy of Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _NativeDictionary<Text.Effect.Identifier, Set<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NativeDictionary<Text.Effect.Identifier, Set<Int>>)
  {
    type metadata accessor for Set<Int>(255, &lazy cache variable for type metadata for Set<Int>, MEMORY[0x24BEE1778], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE16D8]);
    lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
    v0 = type metadata accessor for _NativeDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<Text.Effect.Identifier, Set<Int>>);
  }
}

void partial apply for closure #1 in StaticEffectLayer.draw(in:)()
{
  uint64_t v0;

  closure #1 in DynamicEffectLayer.draw(in:)(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content);
}

uint64_t sub_234BC1BB4()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_62Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, double a2)
{
  uint64_t v2;

  closure #1 in closure #1 in TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(a2, a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void partial apply for closure #1 in DynamicEffectLayer.draw(in:)()
{
  uint64_t v0;

  closure #1 in DynamicEffectLayer.draw(in:)(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content);
}

uint64_t sub_234BC1C30()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextRunsLayer.draw(in:)()
{
  uint64_t v0;

  return closure #1 in TextRunsLayer.draw(in:)(*(CGContext **)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_234BC1C4C()
{
  return swift_deallocObject();
}

void type metadata accessor for RangeSet<Int><>.IndexSequence(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7 = a3(a1, MEMORY[0x24BEE1768], MEMORY[0x24BEE17A8], v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for Set<Int>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x24BEE1768]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined destroy of RangeSet<Int><>.IndexSequence(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of RangeSet<Int><>.IndexSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *outlined consume of Text.Layout.Run?(void *result)
{
  if (result)
  {

    return (void *)swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in TextLinesLayer.draw(in:)()
{
  uint64_t v0;

  return closure #1 in TextLinesLayer.draw(in:)(*(CGContext **)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_234BC1DE0()
{
  return swift_deallocObject();
}

void type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, a5);
    v9 = type metadata accessor for _SetStorage();
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute;
  if (!lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultDescriptionAttribute, &type metadata for DefaultDescriptionAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute;
  if (!lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultDescriptionAttribute, &type metadata for DefaultDescriptionAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute);
  }
  return result;
}

uint64_t sub_234BC1EB4()
{
  return swift_deallocObject();
}

uint64_t sub_234BC1EC4()
{
  return swift_deallocObject();
}

uint64_t sub_234BC1ED4()
{
  return swift_deallocObject();
}

uint64_t destroy for TextEffectsAnimationController.Timing(uint64_t a1)
{
  swift_release();
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
}

uint64_t initializeWithCopy for TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_BYTE *)(a2 + 80);
  swift_retain();
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v4, v5, v6, v7);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(v2 + 88);
  v9 = *(_QWORD *)(v2 + 96);
  v10 = *(_QWORD *)(v2 + 104);
  LOBYTE(v2) = *(_BYTE *)(v2 + 112);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, v2);
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  *(_BYTE *)(a1 + 112) = v2;
  return a1;
}

uint64_t assignWithCopy for TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(v2 + 72);
  v9 = *(_BYTE *)(v2 + 80);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = v9;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
  v14 = *(_QWORD *)(v2 + 88);
  v15 = *(_QWORD *)(v2 + 96);
  v16 = *(_QWORD *)(v2 + 104);
  LOBYTE(v2) = *(_BYTE *)(v2 + 112);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v2);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_BYTE *)(a1 + 112) = v2;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 80) = v5;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_BYTE *)(a2 + 112);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 104);
  v15 = *(_BYTE *)(a1 + 112);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v10;
  *(_BYTE *)(a1 + 112) = v11;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEffectsAnimationController.Timing(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEffectsAnimationController.Timing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Timing()
{
  return &type metadata for TextEffectsAnimationController.Timing;
}

uint64_t initializeBufferWithCopyOfBuffer for RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

void destroy for RawTextLayout.Fragment(id *a1)
{

}

uint64_t assignWithCopy for RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for RawTextLayout.Fragment()
{
  return &type metadata for RawTextLayout.Fragment;
}

uint64_t destroy for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1)
{
  return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Timing.PhaseConfiguration()
{
  return &type metadata for TextEffectsAnimationController.Timing.PhaseConfiguration;
}

uint64_t getEnumTagSinglePayload for TextEffectsAnimationController.Timing.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEffectsAnimationController.Timing.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TextEffectsAnimationController.Timing.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for TextEffectsAnimationController.Timing.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Timing.State()
{
  return &type metadata for TextEffectsAnimationController.Timing.State;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Duration()
{
  return &type metadata for TextEffectsAnimationController.Duration;
}

BOOL closure #1 in RangeSet.contains(_:)specialized partial apply(_QWORD *a1)
{
  return partial apply for specialized closure #1 in RangeSet.contains(_:)(a1);
}

{
  return _ss8RangeSetV7SwiftUIE8containsySbSnyxGFSbAEXEfU_AC4TextV6LayoutV14CharacterIndexV_TG5TA_0(a1);
}

void *static TextAnimationsProvider.animationNames(for:)()
{
  return &outlined read-only object #0 of static TextAnimationsProvider.animationNames(for:);
}

uint64_t static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, uint64_t a8, uint64_t a9, CGContext *a10, void *a11)
{
  return specialized static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, a2, a10, a11, a3, a4, a5, a6, a7);
}

id makeAttributedString #1 () in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSDictionary v9;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[32];

  outlined init with copy of Any(a1, (uint64_t)v13);
  type metadata accessor for NSAttributedString();
  if (swift_dynamicCast())
    return (id)v11;
  outlined init with copy of Any(a1, (uint64_t)v13);
  if (!swift_dynamicCast())
  {
    v6 = 0;
    v5 = 0xE000000000000000;
    if (a2)
      goto LABEL_5;
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v6 = v11;
  v5 = v12;
  if (!a2)
    goto LABEL_7;
LABEL_5:
  v7 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(a2);
LABEL_8:
  v8 = (void *)MEMORY[0x23B7C5DAC](v6, v5);
  swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.isa = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1458]), sel_initWithString_attributes_, v8, v9.super.isa);

  return v4;
}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  uint64_t v27;
  _OWORD v29[4];
  void *v30;
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>(0);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v27 = a1 + 64;
  v2 = -1 << *(_BYTE *)(a1 + 32);
  if (-v2 < 64)
    v3 = ~(-1 << -(char)v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v2) >> 6;
  v5 = v1 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | (v7 << 6);
      v11 = v7;
      goto LABEL_28;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v26)
      goto LABEL_39;
    v13 = *(_QWORD *)(v27 + 8 * v12);
    v11 = v7 + 1;
    if (!v13)
    {
      v11 = v7 + 2;
      if (v7 + 2 >= v26)
        goto LABEL_39;
      v13 = *(_QWORD *)(v27 + 8 * v11);
      if (!v13)
      {
        v11 = v7 + 3;
        if (v7 + 3 >= v26)
          goto LABEL_39;
        v13 = *(_QWORD *)(v27 + 8 * v11);
        if (!v13)
        {
          v11 = v7 + 4;
          if (v7 + 4 >= v26)
            goto LABEL_39;
          v13 = *(_QWORD *)(v27 + 8 * v11);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v9 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v10, (uint64_t)v37);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    outlined init with copy of AnyHashable((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for NSAttributedStringKey(0);
    if (!swift_dynamicCast())
    {
      v30 = 0;
      outlined destroy of TypesettingConfiguration((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for (key: AnyHashable, value: Any));
      v25 = v30;
      swift_release();

      outlined consume of Set<EventID>.Iterator._Variant();
      swift_release();
      return 0;
    }
    v15 = v30;
    outlined init with copy of Any((uint64_t)v35 + 8, (uint64_t)v31);
    outlined destroy of TypesettingConfiguration((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for (key: AnyHashable, value: Any));
    outlined init with take of Any(v31, (_OWORD *)((char *)v32 + 8));
    outlined init with take of Any((_OWORD *)((char *)v32 + 8), v29);
    v16 = v15;
    outlined init with take of Any(v29, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v17 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v18 = -1 << *(_BYTE *)(v1 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v5 + 8 * (v19 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v5 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v5 + 8 * v20);
      }
      while (v24 == -1);
      v8 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v8) = v16;
    result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v1 + 56) + 32 * v8));
    ++*(_QWORD *)(v1 + 16);
    v7 = v11;
    v4 = v9;
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    outlined consume of Set<EventID>.Iterator._Variant();
    return v1;
  }
  v13 = *(_QWORD *)(v27 + 8 * v14);
  if (v13)
  {
    v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v11 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v11 >= v26)
      goto LABEL_39;
    v13 = *(_QWORD *)(v27 + 8 * v11);
    ++v14;
    if (v13)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(void *a1, uint64_t a2)
{
  _QWORD *v3;
  id v4;

  v3 = (_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments);
  swift_beginAccess();
  v4 = a1;
  MEMORY[0x23B7C61A8]();
  if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return 1;
}

void closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  id v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  _BYTE v13[24];
  uint64_t v14;

  outlined init with copy of Any?(a1, (uint64_t)v13);
  if (v14)
  {
    type metadata accessor for AnyTextEffect();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7 = v12;
      v8 = swift_dynamicCastClass();
      if (v8)
      {
        v9 = (char *)v8;
        v10 = v12;
        v11 = TextEffectsAnimationController.staticAnimator(for:)(v9);

        v7 = v11;
        MEMORY[0x23B7C61A8]();
        if (*(_QWORD *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        objc_msgSend(v7, sel_start);

      }
    }
  }
  else
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  }
}

CGAffineTransform *CGRect.transformToFit(within:anchor:)@<X0>(__int128 *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>, CGFloat a10, CGFloat a11)
{
  CGAffineTransform *result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  CGFloat Height;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  double v31;
  double v32;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat x;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  double v45;
  __int128 v46;
  double Width;
  __int128 v48;
  CGFloat y;
  __int128 v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat rect;
  CGAffineTransform rect_8;
  CGAffineTransform v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;

  rect = a8;
  v67.origin.x = a8;
  v67.origin.y = a9;
  v67.size.width = a10;
  v67.size.height = a11;
  result = (CGAffineTransform *)CGRectContainsRect(*(CGRect *)&a2, v67);
  if ((result & 1) != 0)
  {
    v19 = xmmword_23528A280;
    v20 = xmmword_235281560;
    v21 = 0uLL;
  }
  else
  {
    v45 = a6;
    v57.origin.x = rect;
    v57.origin.y = a9;
    v57.size.width = a10;
    v57.size.height = a11;
    Width = CGRectGetWidth(v57);
    v58.origin.x = a2;
    v58.origin.y = a3;
    v58.size.width = a4;
    v58.size.height = a5;
    v22 = CGRectGetWidth(v58);
    v59.origin.y = a9;
    v23 = a5;
    v24 = v22;
    v59.origin.x = rect;
    y = v59.origin.y;
    v59.size.width = a10;
    v59.size.height = a11;
    Height = CGRectGetHeight(v59);
    v26 = a2;
    v27 = Height;
    v52 = v26;
    v53 = a3;
    v60.origin.x = v26;
    v60.origin.y = a3;
    v28 = a4;
    v60.size.width = a4;
    v60.size.height = v23;
    v29 = CGRectGetHeight(v60);
    if (v24 < Width || v29 < v27)
    {
      v61.origin.y = a3;
      v61.origin.x = v52;
      v61.size.width = a4;
      v61.size.height = v23;
      v31 = CGRectGetWidth(v61);
      v62.origin.x = rect;
      v62.origin.y = y;
      v62.size.width = a10;
      v62.size.height = a11;
      v32 = v31 / CGRectGetWidth(v62);
      v63.origin.x = v52;
      v63.origin.y = a3;
      v63.size.width = v28;
      v63.size.height = v23;
      v33 = CGRectGetHeight(v63);
      v64.origin.x = rect;
      v64.origin.y = y;
      v64.size.width = a10;
      v64.size.height = a11;
      v34 = v33 / CGRectGetHeight(v64);
      if (v34 >= v32)
        v35 = v32;
      else
        v35 = v34;
      CGAffineTransformMakeTranslation(&v56, v45, a7);
      v36 = v28;
      CGAffineTransformScale(&rect_8, &v56, v35, v35);
      v56 = rect_8;
      CGAffineTransformTranslate(&rect_8, &v56, -v45, -a7);
      v46 = *(_OWORD *)&rect_8.c;
      v48 = *(_OWORD *)&rect_8.a;
      v56 = rect_8;
      v51 = *(_OWORD *)&rect_8.tx;
      v65.origin.x = rect;
      v65.origin.y = y;
      v65.size.width = a10;
      v65.size.height = a11;
      v66 = CGRectApplyAffineTransform(v65, &v56);
      x = v66.origin.x;
      v38 = v66.origin.y;
      v39 = v66.size.width;
      v40 = v66.size.height;
      v66.origin.x = v52;
      v66.origin.y = v53;
      v66.size.width = v36;
      v66.size.height = v23;
      v68.origin.x = x;
      v68.origin.y = v38;
      v68.size.width = v39;
      v68.size.height = v40;
      result = (CGAffineTransform *)CGRectContainsRect(v66, v68);
      if ((result & 1) != 0)
      {
        v19 = v46;
        v20 = v48;
        v21 = v51;
      }
      else
      {
        CGRect.offsetToFit(within:)(v52, v53, v36, v23, x, v38, v39, v40);
        *(_OWORD *)&v56.a = v48;
        *(_OWORD *)&v56.c = v46;
        *(_OWORD *)&v56.tx = v51;
        result = CGAffineTransformTranslate(&rect_8, &v56, v43, v44);
        v20 = *(_OWORD *)&rect_8.a;
        v19 = *(_OWORD *)&rect_8.c;
        v21 = *(_OWORD *)&rect_8.tx;
      }
    }
    else
    {
      CGRect.offsetToFit(within:)(v52, a3, a4, v23, rect, y, a10, a11);
      result = CGAffineTransformMakeTranslation(&v56, v41, v42);
      v20 = *(_OWORD *)&v56.a;
      v19 = *(_OWORD *)&v56.c;
      v21 = *(_OWORD *)&v56.tx;
    }
  }
  *a1 = v20;
  a1[1] = v19;
  a1[2] = v21;
  return result;
}

id TextAnimationsProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TextAnimationsProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TextAnimationsProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void CGRect.offsetToFit(within:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGFloat MinX;
  double v17;
  double MaxX;
  double v19;
  CGFloat v20;
  double v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double Width;
  double v29;
  double v30;
  double MinY;
  double MaxY;
  double v33;
  double v34;
  double v35;
  double Height;
  double v37;
  double v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat rect;
  CGFloat y;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v39 = a1;
  v40 = a2;
  v45.origin.x = a1;
  v17 = MinX;
  v45.origin.y = a2;
  rect = a3;
  v45.size.width = a3;
  v41 = a4;
  v45.size.height = a4;
  MaxX = CGRectGetMaxX(v45);
  if (v17 > MaxX)
  {
    __break(1u);
    goto LABEL_24;
  }
  v19 = MaxX;
  v46.origin.x = a5;
  v46.origin.y = a6;
  v46.size.width = a7;
  v46.size.height = a8;
  v20 = CGRectGetMinX(v46);
  v47.origin.y = a6;
  v21 = v20;
  y = v47.origin.y;
  v47.origin.x = a5;
  v47.size.width = a7;
  v47.size.height = a8;
  v22 = CGRectGetMaxX(v47);
  if (v21 > v22)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v42 = a8;
  if (v17 > v21 || v22 > v19)
  {
    v48.origin.x = a5;
    v48.origin.y = y;
    v48.size.width = a7;
    v48.size.height = a8;
    Width = CGRectGetWidth(v48);
    v27 = v39;
    v25 = v40;
    v49.origin.x = v39;
    v49.origin.y = v40;
    v49.size.width = rect;
    v49.size.height = v41;
    if (Width <= CGRectGetWidth(v49))
    {
      v52.origin.x = a5;
      v52.origin.y = y;
      v52.size.width = a7;
      v52.size.height = a8;
      v29 = CGRectGetMinX(v52);
      v53.origin.x = v39;
      v53.origin.y = v40;
      v53.size.width = rect;
      v53.size.height = v41;
      if (v29 >= CGRectGetMinX(v53))
      {
        v56.origin.x = a5;
        v56.origin.y = y;
        v23 = a7;
        v56.size.width = a7;
        v56.size.height = a8;
        v30 = CGRectGetMaxX(v56);
        v57.origin.x = v39;
        v57.origin.y = v40;
        v57.size.width = rect;
        v57.size.height = v41;
        v24 = v41;
        v26 = rect;
        if (CGRectGetMaxX(v57) < v30)
        {
          v58.origin.x = a5;
          v58.origin.y = y;
          v58.size.width = v23;
          v58.size.height = v42;
          CGRectGetMaxX(v58);
          v59.origin.x = v39;
          v59.origin.y = v40;
          v59.size.width = rect;
          v59.size.height = v41;
          CGRectGetMaxX(v59);
        }
      }
      else
      {
        v54.origin.x = v39;
        v54.origin.y = v40;
        v54.size.width = rect;
        v54.size.height = v41;
        CGRectGetMinX(v54);
        v55.origin.x = a5;
        v55.origin.y = y;
        v23 = a7;
        v55.size.width = a7;
        v55.size.height = a8;
        CGRectGetMinX(v55);
        v24 = v41;
        v26 = rect;
      }
    }
    else
    {
      v50.origin.x = a5;
      v50.origin.y = y;
      v23 = a7;
      v50.size.width = a7;
      v50.size.height = a8;
      CGRectGetMidX(v50);
      v51.origin.x = v39;
      v51.origin.y = v40;
      v51.size.width = rect;
      v51.size.height = v41;
      CGRectGetMidX(v51);
      v24 = v41;
      v26 = rect;
    }
  }
  else
  {
    v23 = a7;
    v25 = a2;
    v24 = v41;
    v26 = rect;
    v27 = v39;
  }
  v60.origin.x = v27;
  v60.origin.y = v25;
  v60.size.width = v26;
  v60.size.height = v24;
  MinY = CGRectGetMinY(v60);
  v61.origin.x = v27;
  v61.origin.y = v25;
  v61.size.width = v26;
  v61.size.height = v24;
  MaxY = CGRectGetMaxY(v61);
  if (MinY > MaxY)
    goto LABEL_25;
  v33 = MaxY;
  v62.origin.x = a5;
  v62.origin.y = y;
  v62.size.width = v23;
  v62.size.height = v42;
  v34 = CGRectGetMinY(v62);
  v63.origin.x = a5;
  v63.origin.y = y;
  v63.size.width = v23;
  v63.size.height = v42;
  v35 = CGRectGetMaxY(v63);
  if (v34 > v35)
  {
LABEL_26:
    __break(1u);
    return;
  }
  if (MinY > v34 || v35 > v33)
  {
    v64.origin.x = a5;
    v64.origin.y = y;
    v64.size.width = v23;
    v64.size.height = v42;
    Height = CGRectGetHeight(v64);
    v65.origin.x = v39;
    v65.origin.y = v40;
    v65.size.width = v26;
    v65.size.height = v41;
    if (Height <= CGRectGetHeight(v65))
    {
      v68.origin.x = a5;
      v68.origin.y = y;
      v68.size.width = v23;
      v68.size.height = v42;
      v37 = CGRectGetMinY(v68);
      v69.origin.x = v39;
      v69.origin.y = v40;
      v69.size.width = v26;
      v69.size.height = v41;
      if (v37 >= CGRectGetMinY(v69))
      {
        v72.origin.x = a5;
        v72.origin.y = y;
        v72.size.width = v23;
        v72.size.height = v42;
        v38 = CGRectGetMaxY(v72);
        v73.origin.x = v39;
        v73.origin.y = v40;
        v73.size.width = v26;
        v73.size.height = v41;
        if (CGRectGetMaxX(v73) < v38)
        {
          v74.origin.x = a5;
          v74.origin.y = y;
          v74.size.width = v23;
          v74.size.height = v42;
          CGRectGetMaxY(v74);
          v75.origin.x = v39;
          v75.origin.y = v40;
          v75.size.width = v26;
          v75.size.height = v41;
          CGRectGetMaxY(v75);
        }
      }
      else
      {
        v70.origin.x = v39;
        v70.origin.y = v40;
        v70.size.width = v26;
        v70.size.height = v41;
        CGRectGetMinY(v70);
        v71.origin.x = a5;
        v71.origin.y = y;
        v71.size.width = v23;
        v71.size.height = v42;
        CGRectGetMinY(v71);
      }
    }
    else
    {
      v66.origin.x = a5;
      v66.origin.y = y;
      v66.size.width = v23;
      v66.size.height = v42;
      CGRectGetMidY(v66);
      v67.origin.x = v39;
      v67.origin.y = v40;
      v67.size.width = v26;
      v67.size.height = v41;
      CGRectGetMidY(v67);
    }
  }
}

id specialized static TextAnimationsProvider.textEffect(named:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  objc_class *v5;
  objc_class *v6;
  objc_super *v7;
  objc_class *v9;
  char *v10;
  char *v11;
  objc_class *v12;
  char *v13;
  char *v14;
  objc_class *v15;
  objc_class *v16;
  objc_class *v17;
  objc_class *v18;
  objc_class *v19;
  objc_class *v20;
  objc_class *v21;
  objc_class *v22;
  objc_class *v23;
  objc_class *v24;
  objc_class *v25;
  char *v26;
  objc_class *v27;
  id v28;
  char *v29;
  char *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  char *v41;
  id v42;

  v2 = a1 == 0x706952656C616373 && a2 == 0xEB00000000656C70;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextEffectImplementation<ScaleRippleTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect, (uint64_t)&type metadata for ScaleRippleTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v5;
    v28 = objc_allocWithZone(v5);
    v7 = (objc_super *)&v28;
  }
  else if (a1 == 0x68637465727473 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextEffectImplementation<StretchTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect, (uint64_t)&type metadata for StretchTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v9;
    v10 = (char *)objc_allocWithZone(v9);
    v11 = &v10[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v10) + 0x128)];
    *(_OWORD *)v11 = xmmword_23528A2B0;
    *((_OWORD *)v11 + 1) = xmmword_23528A2C0;
    *((_QWORD *)v11 + 4) = 0x3FC999999999999ALL;
    v29 = v10;
    v7 = (objc_super *)&v29;
  }
  else if (a1 == 0x687369757173 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextEffectImplementation<SquishTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect, (uint64_t)&type metadata for SquishTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v12;
    v13 = (char *)objc_allocWithZone(v12);
    v14 = &v13[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v13) + 0x128)];
    *(_OWORD *)v14 = xmmword_23528A290;
    *((_OWORD *)v14 + 1) = xmmword_23528A2A0;
    v30 = v13;
    v7 = (objc_super *)&v30;
  }
  else if (a1 == 0x65636E756F62 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextEffectImplementation<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v15;
    v31 = objc_allocWithZone(v15);
    v7 = (objc_super *)&v31;
  }
  else if (a1 == 6777186 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<BigTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v16;
    v32 = objc_allocWithZone(v16);
    v7 = (objc_super *)&v32;
  }
  else if (a1 == 0x6C6C616D73 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<SmallTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v17;
    v33 = objc_allocWithZone(v17);
    v7 = (objc_super *)&v33;
  }
  else if (a1 == 0x6D6F6F6C62 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<BloomTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v18;
    v34 = objc_allocWithZone(v18);
    v7 = (objc_super *)&v34;
  }
  else if (a1 == 0x75617372656D6F73 && a2 == 0xEA0000000000746CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextEffectImplementation<SomersaultTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect, (uint64_t)&type metadata for SomersaultTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v19;
    v35 = objc_allocWithZone(v19);
    v7 = (objc_super *)&v35;
  }
  else if (a1 == 0x726556656B616873 && a2 == 0xED00006C61636974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v20;
    v36 = objc_allocWithZone(v20);
    v7 = (objc_super *)&v36;
  }
  else if (a1 == 0x726F48656B616873 && a2 == 0xEF6C61746E6F7A69
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v21;
    v37 = objc_allocWithZone(v21);
    v7 = (objc_super *)&v37;
  }
  else if (a1 == 0x72657474696ALL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextEffectImplementation<JitterTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect, (uint64_t)&type metadata for JitterTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v22;
    v38 = objc_allocWithZone(v22);
    v7 = (objc_super *)&v38;
  }
  else if (a1 == 0x65646F6C707865 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextEffectImplementation<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    v6 = v23;
    v39 = objc_allocWithZone(v23);
    v7 = (objc_super *)&v39;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002352E0F80
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextFilterEffect<GradientForegroundTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect, (uint64_t)&type metadata for GradientForegroundTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFilterEffect);
    v6 = v24;
    v40 = objc_allocWithZone(v24);
    v7 = (objc_super *)&v40;
  }
  else if (a1 == 0x746E656964617267 && a2 == 0xEC00000072756C42
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextFilterEffect<GradientBlurTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type GradientBlurTextEffect and conformance GradientBlurTextEffect, (uint64_t)&type metadata for GradientBlurTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFilterEffect);
    v6 = v25;
    v26 = (char *)objc_allocWithZone(v25);
    *(_QWORD *)&v26[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v26) + 0xF8)] = 0x4014000000000000;
    v41 = v26;
    v7 = (objc_super *)&v41;
  }
  else
  {
    if ((a1 != 0x72656D6D696C67 || a2 != 0xE700000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      return 0;
    }
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextFilterEffect<GlimmerTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect, (uint64_t)&type metadata for GlimmerTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFilterEffect);
    v6 = v27;
    v42 = objc_allocWithZone(v27);
    v7 = (objc_super *)&v42;
  }
  v7->super_class = v6;
  return -[objc_super init](v7, sel_init, v28);
}

uint64_t specialized static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, CGContext *a3, void *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  double Width;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  char *v30;
  double v31;
  double v32;
  double v35;
  double v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  CGFloat v41;
  void *v42;
  char *v43;
  id v44;
  char *v45;
  id v46;
  id v47;
  uint64_t v48;
  CGContext *v49;
  void *v50;
  char *v51;
  char isEscapingClosureAtFileLocation;
  double *v53;
  double v54;
  unsigned int v55;
  double v56;
  uint64_t v57;
  uint64_t result;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  double MinX;
  uint64_t v76;
  CGFloat v77;
  uint64_t v78;
  void (*v79)(CGPoint *);
  void *v80;
  double v81;
  double v82;
  CGPoint *v83;
  double v84;
  CGSize v85;
  CGPoint v86;
  CGSize v87;
  CGFloat v88;
  CGFloat v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  CGFloat v94;
  CGFloat v95;
  double v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  double x;
  double v106;
  id v107;
  CGPoint v108;
  CGAffineTransform aBlock;
  double v110;
  double v111;
  CGPoint v112;
  CGSize v113;
  id v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;

  v104 = type metadata accessor for FloatingPointRoundingRule();
  v18 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4C8]), sel_init);
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4E8]), sel_init);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4C0]), sel_init);
  objc_msgSend(v23, sel_setLineFragmentPadding_, a9);
  v115.origin.x = a5;
  v115.origin.y = a6;
  v115.size.width = a7;
  v115.size.height = a8;
  Width = CGRectGetWidth(v115);
  objc_msgSend(v23, sel_size);
  objc_msgSend(v23, sel_setSize_, Width);
  objc_msgSend(v22, sel_setTextContainer_, v23);
  objc_msgSend(v23, sel_setLineBreakMode_, 0);
  x = *(double *)&a4;
  v25 = objc_msgSend(a4, sel_maximumNumberOfLines);
  v102 = v23;
  objc_msgSend(v23, sel_setMaximumNumberOfLines_, v25);
  _NSTextLayoutManagerRequiresCTLine(v22);
  v26 = makeAttributedString #1 () in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, a2);
  v27 = (void *)NSAttributedString.replacingLineBreakModes(_:)(0);

  v107 = v27;
  objc_msgSend(v21, sel_setAttributedString_, v27);
  v103 = v21;
  objc_msgSend(v22, sel_replaceTextContentManager_, v21);
  v28 = objc_msgSend(v22, sel_documentRange);
  objc_msgSend(v22, sel_invalidateLayoutForRange_, v28);

  v29 = objc_msgSend(v22, sel_documentRange);
  objc_msgSend(v22, sel_ensureLayoutForRange_, v29);

  v30 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextEffectsRenderer()), sel_init);
  v106 = *(double *)&a3;
  if (*(double *)&a3 == 0.0)
  {
    v35 = 1.0;
  }
  else
  {
    CGContextGetCTM(&aBlock, a3);
    v31 = fabs(aBlock.a);
    v32 = fabs(aBlock.d);
    if (aBlock.c == 0.0 && aBlock.b == 0.0 && v31 == v32)
      v35 = v31;
    else
      v35 = 1.0;
  }
  v36 = *(double *)&v30[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale];
  v100 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale;
  *(double *)&v30[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale] = v35;
  TextEffectsRenderer.contentsScale.didset(v36);
  v37 = &v30[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments];
  swift_beginAccess();
  v38 = (void *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)v37 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v30;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = partial apply for closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:);
  *(_QWORD *)(v40 + 24) = v39;
  v101 = v39;
  *(_QWORD *)&aBlock.tx = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  *(_QWORD *)&aBlock.ty = v40;
  v41 = MEMORY[0x24BDAC760];
  *(_QWORD *)&aBlock.a = MEMORY[0x24BDAC760];
  *(_QWORD *)&aBlock.b = 1107296256;
  *(_QWORD *)&aBlock.c = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  *(_QWORD *)&aBlock.d = &block_descriptor_6;
  v42 = _Block_copy(&aBlock);
  v43 = v30;
  swift_retain();
  swift_release();
  v44 = objc_msgSend(v22, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 4, v42);
  swift_unknownObjectRelease();
  _Block_release(v42);
  LOBYTE(v42) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v42 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v98 = v20;
    v99 = v18;
    specialized TextEffectsRenderer.endLayout(with:)((uint64_t)v43);
    v114 = v38;
    if (one-time initialization token for _textAnimation == -1)
      goto LABEL_14;
  }
  swift_once();
LABEL_14:
  v45 = (char *)static NSAttributedStringKey._textAnimation;
  v46 = v107;
  v47 = objc_msgSend(v107, sel_length);
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v43;
  *(_QWORD *)(v48 + 24) = &v114;
  v49 = (CGContext *)swift_allocObject();
  *((_QWORD *)v49 + 2) = partial apply for closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:);
  *((_QWORD *)v49 + 3) = v48;
  v97 = v48;
  *(_QWORD *)&aBlock.tx = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *(_QWORD *)&aBlock.ty = v49;
  aBlock.a = v41;
  *(_QWORD *)&aBlock.b = 1107296256;
  *(_QWORD *)&aBlock.c = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *(_QWORD *)&aBlock.d = &block_descriptor_13;
  v50 = _Block_copy(&aBlock);
  v51 = v43;
  swift_retain();
  swift_release();
  objc_msgSend(v46, sel_enumerateAttribute_inRange_options_usingBlock_, v45, 0, v47, 0, v50);
  _Block_release(v50);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_37:
    swift_once();
LABEL_27:
    swift_beginAccess();
    v79 = *(void (**)(CGPoint *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v80 = static CoreGlue2.shared;
    v79(&v112);

    v108 = v112;
    specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v49, &v108.x, 0, 1, &aBlock.a, x, v106);

    swift_release();
    swift_release();
    v35 = v96;
    goto LABEL_28;
  }
  specialized TextEffectsRenderer.updateForStaticRendering(with:)((unint64_t)v51);
  v53 = (double *)TextEffectsRenderer.baselineOffsets.getter();
  v54 = x;
  v55 = objc_msgSend(*(id *)&x, sel_wantsBaselineOffset);
  v56 = v106;
  v46 = (id)MEMORY[0x24BEE4AF8];
  if (v55)
  {
    v57 = *((_QWORD *)v53 + 2);
    if (v57)
    {
      result = _NSStringDrawingContextSetBaselineOffset(*(_QWORD *)&v54, v53[v57 + 3]);
      if (!*((_QWORD *)v53 + 2))
      {
        __break(1u);
        return result;
      }
      v59 = v53[4];
    }
    else
    {
      v59 = 0.0;
      _NSStringDrawingContextSetBaselineOffset(*(_QWORD *)&v54, 0.0);
    }
    _NSStringDrawingContextSetFirstBaselineOffset(*(_QWORD *)&v54, v59);
  }
  if (v56 != 0.0)
  {
    v96 = v35;
    v49 = (CGContext *)*(id *)&v56;
    NSAttributedString.maxFontMetrics.getter((uint64_t)&aBlock);
    v95 = CGRect.outset(by:)(aBlock.tx, aBlock.ty, v110, v111, a5, a6, a7, a8);
    v94 = v60;
    v62 = v61;
    v64 = v63;
    v65 = TextEffectsRenderer.drawingBounds.getter();
    v66 = a8;
    v67 = v65;
    v68 = a7;
    v70 = v69;
    v72 = v71;
    v116.origin.x = a5;
    v74 = v73;
    x = v116.origin.x;
    v106 = a6;
    v116.origin.y = a6;
    v116.size.width = v68;
    v116.size.height = v66;
    MinX = CGRectGetMinX(v116);
    v76 = *((_QWORD *)v53 + 2);
    if (v76)
      v77 = v53[v76 + 3];
    else
      v77 = 0.0;
    swift_bridgeObjectRelease();
    CGRect.transformToFit(within:anchor:)((__int128 *)&aBlock, v95, v94, v62, v64, MinX, v77, v67, v70, v72, v74);
    v112 = (CGPoint)0;
    v78 = one-time initialization token for shared;
    v45 = v51;
    if (v78 == -1)
      goto LABEL_27;
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
LABEL_28:
  v81 = 1.0;
  if (v35 == 0.0)
    v82 = 1.0;
  else
    v82 = 1.0 / v35;
  v83 = (CGPoint *)&v51[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds];
  v84 = *(double *)&v30[v100];
  if (v84 != 0.0)
    v81 = 1.0 / v84;
  v85 = (CGSize)v83[1];
  v112 = *v83;
  v113 = v85;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v81);
  v86 = v112;
  v87 = v113;
  v88 = *(double *)&v51[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds + 16];
  v89 = *(double *)&v51[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds + 24];
  v90 = v99;
  v91 = v98;
  v92 = v104;
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v98, *MEMORY[0x24BEE38E0], v104);
  v112.x = v88;
  v108.x = v89;
  specialized FloatingPoint.round(_:toMultipleOf:)(v91, v82);
  specialized FloatingPoint.round(_:toMultipleOf:)(v91, v82);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
  v117.origin = v86;
  v117.size = v87;
  CGRectGetWidth(v117);

  v114 = v46;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TextAnimationsProvider()
{
  return objc_opt_self();
}

uint64_t sub_234BC4B58()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(void *a1)
{
  uint64_t v1;

  return closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_234BC4B84()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_234BC4BB4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD **)(v4 + 24));
}

uint64_t sub_234BC4BE0()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

void type metadata accessor for (key: AnyHashable, value: Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: AnyHashable, value: Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: Any));
  }
}

unint64_t lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect;
  if (!lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GlimmerTextEffect, &type metadata for GlimmerTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect;
  if (!lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GlimmerTextEffect, &type metadata for GlimmerTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GradientBlurTextEffect and conformance GradientBlurTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect;
  if (!lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GradientBlurTextEffect, &type metadata for GradientBlurTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect;
  if (!lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect)
  {
    result = MEMORY[0x23B7C9C04]("16;\x1BX0\n", &type metadata for GradientBlurTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect;
  if (!lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GradientForegroundTextEffect, &type metadata for GradientForegroundTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect;
  if (!lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GradientForegroundTextEffect, &type metadata for GradientForegroundTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeSequence()
{
  return &type metadata for Text.Effect.KeyframeSequence;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.KeyframeSequence.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.KeyframeSequence.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for Text.Effect.KeyframeSequence.Entry(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.KeyframeSequence.Entry(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.KeyframeSequence.Entry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeSequence.Entry()
{
  return &type metadata for Text.Effect.KeyframeSequence.Entry;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.KeyframeSequence>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeSequence, &type metadata for Text.Effect.KeyframeSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeSequence, &type metadata for Text.Effect.KeyframeSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeSequence, &type metadata for Text.Effect.KeyframeSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeSequence, &type metadata for Text.Effect.KeyframeSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.KeyframeSequence@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.KeyframeSequence(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Effect.KeyframeSequence(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

_QWORD *protocol witness for Collection.subscript.read in conformance Text.Effect.KeyframeSequence(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v4 = *(_QWORD *)v2 + 24 * v3;
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    LOBYTE(v4) = *(_BYTE *)(v4 + 48);
    *result = v5;
    result[1] = v6;
    *((_BYTE *)result + 16) = v4;
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.KeyframeSequence@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Effect.KeyframeSequence(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Effect.KeyframeSequence()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Effect.KeyframeSequence@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.KeyframeSequence@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Effect.KeyframeSequence(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance Text.Effect.KeyframeSequence@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (*result >= *(_QWORD *)(*(_QWORD *)v2 + 16))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance Text.Effect.KeyframeSequence(_QWORD *result)
{
  uint64_t v1;

  if (*result >= *(_QWORD *)(*(_QWORD *)v1 + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.KeyframeSequence(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Effect.KeyframeSequence()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.KeyframeSequence()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.KeyframeSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeSequence> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeSequence>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.KeyframeSequence>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<Text.Effect.KeyframeSequence>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence();
    v7 = a3(a1, &type metadata for Text.Effect.KeyframeSequence, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.KeyframeSequence>(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeSequence>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Text.Effect.KeyframeSequence.init(order:map:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::Int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t (*v35)(void);
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t result;
  unint64_t v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;

  v5 = *(_QWORD *)(a1 + 16);
  v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 + 1, 0, MEMORY[0x24BEE4AF8]);
  v64 = (_QWORD *)MEMORY[0x24BEE4B00];
  type metadata accessor for [Text.Effect.Identifier : Text.Effect.AnyLayoutState]();
  Dictionary.reserveCapacity(_:)(v5);
  v59 = a3;
  v60 = a1;
  v61 = *(_QWORD *)(a1 + 16);
  if (!v61)
  {
    v7 = (uint64_t)v64;
LABEL_21:
    v6 = v62[2];
    v14 = v62[3];
    v17 = (_QWORD *)(v6 + 1);
    swift_bridgeObjectRetain();
    if (v6 >= v14 >> 1)
      goto LABEL_62;
LABEL_22:
    v62[2] = v17;
    v30 = &v62[3 * v6];
    v30[4] = v7;
    v30[5] = 0;
    *((_BYTE *)v30 + 48) = 1;
    v14 = v59;
    if (!v61)
    {
LABEL_55:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v62;
    }
    v6 = 0;
    v7 = v60;
    while (1)
    {
      if (v6 >= *(_QWORD *)(v7 + 16))
        goto LABEL_59;
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_25;
      v31 = *(_QWORD *)(v60 + 32 + 8 * v6);
      v17 = (_QWORD *)v14;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
      if ((v33 & 1) == 0)
        goto LABEL_25;
      v34 = *(_QWORD **)(*(_QWORD *)(v14 + 56) + 8 * v32);
      v35 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v34) + 0x98);
      v17 = v34;
      v36 = v35();
      if (v36)
        break;

      v7 = v60;
LABEL_25:
      if (++v6 == v61)
        goto LABEL_55;
    }
    v37 = v36;
    v57 = v6;
    v58 = v17;
    v7 = v60;
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = v60;
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v38 = v17;
      if (v6)
      {
LABEL_32:
        v7 = 4;
        while (1)
        {
          v17 = (_QWORD *)(v7 - 4);
          if ((v37 & 0xC000000000000001) != 0)
          {
            v14 = MEMORY[0x23B7C6D9C](v7 - 4, v37);
            v39 = v7 - 3;
            if (__OFADD__(v17, 1))
              goto LABEL_56;
          }
          else
          {
            v14 = *(_QWORD *)(v37 + 8 * v7);
            swift_retain();
            v39 = v7 - 3;
            if (__OFADD__(v17, 1))
            {
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), (int64_t)v17, 1, v62);
              goto LABEL_22;
            }
          }
          v17 = v64;
          swift_bridgeObjectRetain();
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v63 = v17;
          v42 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
          v43 = v17[2];
          v44 = (v41 & 1) == 0;
          v45 = v43 + v44;
          if (__OFADD__(v43, v44))
            goto LABEL_57;
          v46 = v41;
          if (v17[3] >= v45)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
            v47 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
            if ((v46 & 1) != (v48 & 1))
              goto LABEL_63;
            v42 = v47;
          }
          v49 = v63;
          v17 = (_QWORD *)(8 * v42);
          if ((v46 & 1) != 0)
          {
            v50 = v63[7];
            swift_release();
            *(_QWORD *)(v50 + 8 * v42) = v14;
          }
          else
          {
            v63[(v42 >> 6) + 8] |= 1 << v42;
            *(_QWORD *)(v49[6] + 8 * v42) = v31;
            *(_QWORD *)(v49[7] + 8 * v42) = v14;
            v51 = v49[2];
            v28 = __OFADD__(v51, 1);
            v52 = v51 + 1;
            if (v28)
              goto LABEL_58;
            v49[2] = v52;
          }
          swift_bridgeObjectRelease();
          v54 = v62[2];
          v53 = v62[3];
          v17 = (_QWORD *)(v54 + 1);
          if (v54 >= v53 >> 1)
            v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v62);
          v62[2] = v17;
          v55 = &v62[3 * v54];
          v55[4] = v49;
          v55[5] = v31;
          *((_BYTE *)v55 + 48) = 0;
          swift_release();
          ++v7;
          if (v39 == v6)
          {

            swift_bridgeObjectRelease();
            v14 = v59;
            v7 = v60;
            goto LABEL_54;
          }
        }
      }
    }
    else
    {
      v6 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v38 = v17;
      if (v6)
        goto LABEL_32;
    }

    swift_bridgeObjectRelease();
LABEL_54:
    v6 = v57;
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (uint64_t)v64;
  while (1)
  {
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    v9 = *(_QWORD *)(v60 + 8 * v6 + 32);
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) == 0)
      goto LABEL_5;
    v12 = *(_QWORD **)(*(_QWORD *)(a3 + 56) + 8 * v10);
    v13 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v12) + 0xA0);
    v14 = v12;
    v15 = v13();
    swift_retain();
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v63 = (_QWORD *)v7;
    v17 = (_QWORD *)v7;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    v20 = *(_QWORD *)(v7 + 16);
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_60;
    v23 = v18;
    if (*(_QWORD *)(v7 + 24) < v22)
      break;
    if ((v16 & 1) != 0)
    {
      v7 = (uint64_t)v63;
      if ((v18 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      v17 = &v63;
      specialized _NativeDictionary.copy()();
      v7 = (uint64_t)v63;
      if ((v23 & 1) == 0)
      {
LABEL_15:
        *(_QWORD *)(v7 + 8 * (v19 >> 6) + 64) |= 1 << v19;
        v26 = 8 * v19;
        *(_QWORD *)(*(_QWORD *)(v7 + 48) + v26) = v9;
        *(_QWORD *)(*(_QWORD *)(v7 + 56) + v26) = v15;
        v27 = *(_QWORD *)(v7 + 16);
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_61;
        *(_QWORD *)(v7 + 16) = v29;
        goto LABEL_4;
      }
    }
LABEL_3:
    v8 = *(_QWORD *)(v7 + 56);
    swift_release();
    *(_QWORD *)(v8 + 8 * v19) = v15;
LABEL_4:
    swift_release();

    swift_bridgeObjectRelease();
    a3 = v59;
LABEL_5:
    if (v61 == ++v6)
    {
      v64 = (_QWORD *)v7;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v16);
  v17 = v63;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v23 & 1) == (v25 & 1))
  {
    v19 = v24;
    v7 = (uint64_t)v63;
    if ((v23 & 1) == 0)
      goto LABEL_15;
    goto LABEL_3;
  }
LABEL_63:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static ConditionallyArchivableView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v50);
  v14 = v50;
  v15 = v51;
  v16 = v52;
  v17 = HIDWORD(v52);
  v50 = v8;
  v52 = v10;
  v53 = *(_OWORD *)(a2 + 24);
  v54 = v12;
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 56);
  v57 = *(_QWORD *)(a2 + 72);
  LODWORD(v51) = v9;
  v58 = v13;
  v29 = v17;
  v36 = v7;
  v32 = v14;
  v38 = v14;
  v39 = v15;
  v34 = v15;
  v33 = v16;
  LOBYTE(v40) = v16;
  HIDWORD(v40) = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ConditionallyArchivableView.makeBody(view:inputs:fields:)((uint64_t)&v37, (uint64_t)&v47, &v36, (uint64_t)&v50, &v38, a3, a4);
  v27 = v47;
  v28 = v48;
  v31 = v49;
  v38 = v50;
  LODWORD(v39) = v51;
  v40 = v52;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v45 = v57;
  v46 = v58;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for ConditionalGraphValue(0, AssociatedTypeWitness, v19, v20);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeView(inputs:)(&v38, v21, AssociatedConformanceWitness, v23, (double *)&v47);
  v24 = v47;
  v25 = v48;
  if ((v31 & 1) == 0)
  {
    v47 = v27;
    v48 = v28;
    v37 = v7;
    v38 = v32;
    v39 = v34;
    LOBYTE(v40) = v33;
    HIDWORD(v40) = v29;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v37, &v38, a3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a5 = v24;
  a5[1] = v25;
  return result;
}

uint64_t static ConditionallyArchivableView.makeBody(view:inputs:fields:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  int v40;
  __int128 v41;
  char v42;
  int v43;

  v11 = *a3;
  v13 = *a5;
  v12 = a5[1];
  v14 = *((_BYTE *)a5 + 16);
  v15 = *((_DWORD *)a5 + 5);
  if (AGTypeGetKind() - 2 < 4)
  {
    v35 = a2;
    v16 = swift_retain();
    v17 = specialized find<A>(_:key:)(v16);
    if (v17)
    {
      v18 = *(_BYTE *)(v17 + 72);
      swift_release();
      if ((v18 & 1) != 0)
      {
        v40 = v11;
        v36 = v13;
        v37 = v12;
        v38 = v14;
        v39 = v15;
        v20 = type metadata accessor for ArchivedViewBodyAccessor(0, a6, a7, v19);
        v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewBodyAccessor<A>, v20);
        result = BodyAccessor.makeBody(container:inputs:fields:)(&v43, (uint64_t)&v41, (uint64_t)&v40, a4, (uint64_t)&v36, v20, v21);
        v23 = v43;
        v24 = v41;
        v25 = 1;
LABEL_7:
        v30 = v42;
        *(_DWORD *)a1 = v23;
        *(_BYTE *)(a1 + 4) = v25;
        *(_OWORD *)v35 = v24;
        *(_BYTE *)(v35 + 16) = v30;
        return result;
      }
    }
    else
    {
      swift_release();
    }
    v26 = *(_QWORD *)(a7 + 8);
    ViewBodyAccessor.init()(a6, v26);
    v40 = v11;
    v36 = v13;
    v37 = v12;
    v38 = v14;
    v39 = v15;
    v28 = type metadata accessor for ViewBodyAccessor(0, a6, v26, v27);
    v29 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v28);
    result = BodyAccessor.makeBody(container:inputs:fields:)(&v43, (uint64_t)&v41, (uint64_t)&v40, a4, (uint64_t)&v36, v28, v29);
    v25 = 0;
    v23 = v43;
    v24 = v41;
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(70);
  v31._object = (void *)0x80000002352E0FD0;
  v31._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v31);
  v32._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x6C63206120736920;
  v33._object = (void *)0xEC0000002E737361;
  String.append(_:)(v33);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static ConditionallyArchivableView._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)a2;
  v33 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v31 = *(_QWORD *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v29 = *(_BYTE *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v50);
  v13 = v50;
  v14 = v51;
  v15 = v52;
  v16 = HIDWORD(v52);
  v50 = v7;
  v52 = v8;
  v53 = *(_OWORD *)(a2 + 24);
  v54 = v10;
  *(_QWORD *)&v55 = v9;
  *((_QWORD *)&v55 + 1) = v31;
  LODWORD(v51) = v33;
  v56 = v11;
  v57 = v12;
  v58 = v29;
  v26 = v16;
  v35 = v6;
  v32 = v13;
  v34 = v14;
  v38 = v13;
  v39 = v14;
  v30 = v15;
  LOBYTE(v40) = v15;
  HIDWORD(v40) = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ConditionallyArchivableView.makeBody(view:inputs:fields:)((uint64_t)&v36, (uint64_t)&v47, &v35, (uint64_t)&v50, &v38, a3, a4);
  v24 = v47;
  v25 = v48;
  v28 = v49;
  LODWORD(v47) = v36;
  BYTE4(v47) = v37;
  v38 = v50;
  LODWORD(v39) = v51;
  v40 = v52;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v45 = v57;
  v46 = v58;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for ConditionalGraphValue(0, AssociatedTypeWitness, v18, v19);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeViewList(inputs:)(&v38, v20, AssociatedConformanceWitness, v22);
  if ((v28 & 1) == 0)
  {
    v47 = v24;
    v48 = v25;
    v36 = v6;
    v38 = v32;
    v39 = v34;
    LOBYTE(v40) = v30;
    HIDWORD(v40) = v26;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v36, &v38, a3);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static ConditionallyArchivableView._viewListCount(inputs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized find<A>(_:key:)(v1);
  swift_bridgeObjectRelease();
  swift_release_n();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  v9 = v3;
  v10 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ArchivedViewBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  specialized ArchivedViewBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AppearanceAnimationView<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>, a3);
  return static ConditionallyArchivableView._makeView(view:inputs:)(a1, a2, a3, v8, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AppearanceAnimationView<A, B>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>, a3);
  return static ConditionallyArchivableView._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AppearanceAnimationView<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>);
  return static ConditionallyArchivableView._viewListCount(inputs:)(a1);
}

uint64_t dispatch thunk of ConditionallyArchivableView.archivedBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for ArchivedViewBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivedViewBodyAccessor);
}

void specialized ArchivedViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)&v37 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
  {
    v44 = a1;
    v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
      AGGraphSetUpdate();
      v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x24BDAC7A8](v33);
      v35 = type metadata accessor for ArchivedViewBodyAccessor(0, a3, a4, v34);
      *(&v37 - 2) = v35;
      *(&v37 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewBodyAccessor<A>, v35);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v37 - 4), AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v36);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    v39 = v17;
    v40 = v16;
    v41 = v14;
    v42 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v19 = AGTypeID.description.getter();
    v21 = v20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v19;
    v23 = (_QWORD *)(inited + 32);
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v21;
    v43 = a3;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v24 = inited + 72;
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v10, v46, v8);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_initStackObject();
    v47 = xmmword_235283260;
    *(_OWORD *)(v26 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v37 = inited;
        v38 = a4;
        LODWORD(inited) = v39 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v24, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(_QWORD *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v48);
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v48);
          swift_bridgeObjectRelease();
          v32 = *(void (**)(char *, uint64_t))(v45 + 8);
          v32(v46, v8);
          v32(v10, v8);
          a4 = v38;
          AssociatedTypeWitness = v42;
          a3 = v43;
          v16 = v40;
          v14 = v41;
          goto LABEL_15;
        }
        outlined destroy of CVarArg?((uint64_t)v48);
        v23 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 24);
          while (1)
          {
            v29(v10, v28, v8);
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v47;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v48);
            swift_bridgeObjectRelease();
            if (!v49)
              break;
            outlined destroy of CVarArg?((uint64_t)v48);
            if (v23[291] != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void __swiftcall SExpPrinter.init(tag:singleLine:)(SwiftUI::SExpPrinter *__return_ptr retstr, Swift::String tag, Swift::Bool singleLine)
{
  int v3;
  uint64_t v5;
  void *v6;

  v3 = singleLine;
  String.append(_:)(tag);
  swift_bridgeObjectRelease();
  v5 = 8224;
  if ((v3 & 1) != 0)
    v5 = 0;
  v6 = (void *)0xE200000000000000;
  if ((v3 & 1) != 0)
    v6 = (void *)0xE000000000000000;
  retstr->output._countAndFlagsBits = 40;
  retstr->output._object = (void *)0xE100000000000000;
  retstr->depth = ~v3 & 1;
  retstr->indent._countAndFlagsBits = v5;
  retstr->indent._object = v6;
}

Swift::String __swiftcall SExpPrinter.end()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  Swift::String v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String result;

  v1 = v0;
  v2 = v0[2];
  if (v2)
  {
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
      goto LABEL_6;
    }
    v0[2] = v4;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v7 = *v0;
  v6 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v8 = v7;
  v9 = v6;
LABEL_6:
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall SExpPrinter.push(_:)(Swift::String a1)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = v1[2];
  if (v4)
  {
    v5._countAndFlagsBits = 10;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6 = v1[3];
    v7 = (void *)v1[4];
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = v6;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 40;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = countAndFlagsBits;
    v10._object = object;
    String.append(_:)(v10);
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else
    {
      v1[2] = v4 + 1;
      v11._countAndFlagsBits = 8224;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
    }
  }
  else
  {
    v12._countAndFlagsBits = 40;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = countAndFlagsBits;
    v13._object = object;
    String.append(_:)(v13);
  }
}

Swift::Void __swiftcall SExpPrinter.print(_:newline:)(Swift::String _, Swift::Bool newline)
{
  _QWORD *v2;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  if (newline && v2[2])
  {
    v5._countAndFlagsBits = 10;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6 = v2[3];
    v7 = (void *)v2[4];
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = v6;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
  }
  v10._countAndFlagsBits = countAndFlagsBits;
  v10._object = object;
  String.append(_:)(v10);
}

Swift::Void __swiftcall SExpPrinter.pop()()
{
  _QWORD *v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  Swift::String v9;

  v1 = v0[2];
  if (!v1)
    goto LABEL_9;
  v2 = __OFSUB__(v1, 1);
  v3 = v1 - 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[3];
    v0[2] = v3;
    v5 = v0[4];
    if ((v5 & 0x2000000000000000) != 0)
      v6 = HIBYTE(v5) & 0xF;
    else
      v6 = v4 & 0xFFFFFFFFFFFFLL;
    v7 = String.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0)
      goto LABEL_12;
    if (4 * v6 >= v7 >> 14)
    {
      String.removeSubrange(_:)();
LABEL_9:
      v9._countAndFlagsBits = 41;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      return;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

uint64_t SExpPrinter.indent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

Swift::Void __swiftcall SExpPrinter.newline()()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;

  if (v0[2])
  {
    v1._countAndFlagsBits = 10;
    v1._object = (void *)0xE100000000000000;
    String.append(_:)(v1);
    v2 = v0[3];
    v3 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = v2;
    v4._object = v3;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t destroy for SExpPrinter()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SExpPrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SExpPrinter(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SExpPrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SExpPrinter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SExpPrinter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SExpPrinter()
{
  return &type metadata for SExpPrinter;
}

uint64_t destroy for DisplayList.OffsetAnimation()
{
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.OffsetAnimation(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DisplayList.OffsetAnimation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.OffsetAnimation(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.OffsetAnimation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.OffsetAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.OffsetAnimation()
{
  return &type metadata for DisplayList.OffsetAnimation;
}

uint64_t destroy for DisplayList.ScaleAnimation()
{
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.ScaleAnimation(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DisplayList.ScaleAnimation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.ScaleAnimation(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ScaleAnimation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ScaleAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ScaleAnimation()
{
  return &type metadata for DisplayList.ScaleAnimation;
}

uint64_t destroy for DisplayList.RotationAnimation()
{
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.RotationAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DisplayList.RotationAnimation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.RotationAnimation(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.RotationAnimation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.RotationAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.RotationAnimation()
{
  return &type metadata for DisplayList.RotationAnimation;
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList.OpacityAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DisplayList.OpacityAnimation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.OpacityAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.OpacityAnimation()
{
  return &type metadata for DisplayList.OpacityAnimation;
}

uint64_t specialized EffectAnimation.encode(to:)(int64_t a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = v1;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[2];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v9[v11 + 4] = v8;
  *(_QWORD *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_21:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 8) = v8 + 1;
  result = _RotationEffect.encode(to:)(a1, v5, v6, v7);
  if (v2)
    return result;
  ProtobufEncoder.endLengthDelimited()();
  v5 = v3[3];
  v6 = v3[4];
  v7 = v3[5];
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_21;
LABEL_8:
  v14 = v9[2];
  v13 = v9[3];
  v15 = (_QWORD *)(v14 + 1);
  if (v14 >= v13 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
  v9[2] = v15;
  v9[v14 + 4] = v8;
  *(_QWORD *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_23:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    v15 = (_QWORD *)result;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 8) = v8 + 1;
  result = _RotationEffect.encode(to:)(a1, v5, v6, v7);
  if (v2)
    return result;
  ProtobufEncoder.endLengthDelimited()();
  v9 = (_QWORD *)*((_QWORD *)v3 + 6);
  outlined retain of DisplayList.RotationAnimation((uint64_t)v3);
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  v8 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD **)(a1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_23;
LABEL_13:
  v17 = v15[2];
  v16 = v15[3];
  v18 = v17 + 1;
  if (v17 >= v16 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
    v18 = v17 + 1;
    v15 = (_QWORD *)result;
  }
  v15[2] = v18;
  v15[v17 + 4] = v8;
  *(_QWORD *)(a1 + 24) = v15;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v8 + 1;
    CodableAnimation.encode(to:)(a1, (uint64_t)v9);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
    return outlined release of DisplayList.RotationAnimation((uint64_t)v3);
  }
  return result;
}

uint64_t specialized EffectAnimation.encode(to:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  result = specialized ProtobufEncoder.messageField<A>(_:_:)(1, a3);
  if (!v4)
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(2, a4);
    swift_retain();
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD **)(a1 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      v10 = (_QWORD *)result;
    }
    v11 = v10[2];
    v12 = v10[3];
    v13 = v11 + 1;
    if (v11 >= v12 >> 1)
    {
      v16 = v11 + 1;
      v14 = v10;
      v15 = v10[2];
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v11 + 1, 1, v14);
      v11 = v15;
      v13 = v16;
      v10 = (_QWORD *)result;
    }
    v10[2] = v13;
    v10[v11 + 4] = v9;
    *(_QWORD *)(a1 + 24) = v10;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v9 + 1;
      CodableAnimation.encode(to:)(a1, a2);
      ProtobufEncoder.endLengthDelimited()();
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized EffectAnimation.encode(to:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v3 = v1;
  v5 = *v3;
  v6 = v3[1];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(_QWORD *)(a1 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_21:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 8) = v7 + 1;
  result = _OffsetEffect.encode(to:)(a1, v5, v6);
  if (v2)
    return result;
  ProtobufEncoder.endLengthDelimited()();
  v5 = v3[2];
  v6 = v3[3];
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_21;
LABEL_8:
  v13 = v8[2];
  v12 = v8[3];
  v14 = (_QWORD *)(v13 + 1);
  if (v13 >= v12 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v8);
  v8[2] = v14;
  v8[v13 + 4] = v7;
  *(_QWORD *)(a1 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_23:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v14 = (_QWORD *)result;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 8) = v7 + 1;
  result = _OffsetEffect.encode(to:)(a1, v5, v6);
  if (v2)
    return result;
  ProtobufEncoder.endLengthDelimited()();
  v8 = (_QWORD *)*((_QWORD *)v3 + 4);
  swift_retain();
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  v7 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD **)(a1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_23;
LABEL_13:
  v16 = v14[2];
  v15 = v14[3];
  v17 = v16 + 1;
  if (v16 >= v15 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v17 = v16 + 1;
    v14 = (_QWORD *)result;
  }
  v14[2] = v17;
  v14[v16 + 4] = v7;
  *(_QWORD *)(a1 + 24) = v14;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7 + 1;
    CodableAnimation.encode(to:)(a1, (uint64_t)v8);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
    return outlined release of DisplayList.OffsetAnimation((uint64_t)v3);
  }
  return result;
}

{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = v1;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[2];
  v8 = v3[3];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v10[v12 + 4] = v9;
  *(_QWORD *)(a1 + 24) = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_21:
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 8) = v9 + 1;
  result = _ScaleEffect.encode(to:)(a1, v5, v6, v7, v8);
  if (v2)
    return result;
  ProtobufEncoder.endLengthDelimited()();
  v5 = v3[4];
  v6 = v3[5];
  v7 = v3[6];
  v8 = v3[7];
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_21;
LABEL_8:
  v15 = v10[2];
  v14 = v10[3];
  v16 = (_QWORD *)(v15 + 1);
  if (v15 >= v14 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v10);
  v10[2] = v16;
  v10[v15 + 4] = v9;
  *(_QWORD *)(a1 + 24) = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_23:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v16 = (_QWORD *)result;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 8) = v9 + 1;
  result = _ScaleEffect.encode(to:)(a1, v5, v6, v7, v8);
  if (v2)
    return result;
  ProtobufEncoder.endLengthDelimited()();
  v10 = (_QWORD *)*((_QWORD *)v3 + 8);
  outlined retain of DisplayList.ScaleAnimation((uint64_t)v3);
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  v9 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD **)(a1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_23;
LABEL_13:
  v18 = v16[2];
  v17 = v16[3];
  v19 = v18 + 1;
  if (v18 >= v17 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v19 = v18 + 1;
    v16 = (_QWORD *)result;
  }
  v16[2] = v19;
  v16[v18 + 4] = v9;
  *(_QWORD *)(a1 + 24) = v16;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v9 + 1;
    CodableAnimation.encode(to:)(a1, (uint64_t)v10);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
    return outlined release of DisplayList.ScaleAnimation((uint64_t)v3);
  }
  return result;
}

uint64_t specialized static EffectAnimation<>.effect(value:size:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  CGFloat v12;
  double v14;
  double v15;
  CGFloat tx;
  CGFloat ty;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGFloat v21;
  CGFloat v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v30;
  CGFloat v31;
  uint64_t result;
  char v33;
  Swift::String v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CGAffineTransform t2;
  __int128 v40;
  uint64_t v41;
  CGAffineTransform v42;
  CGAffineTransform t1;
  __int128 v44;
  uint64_t v45;

  v12 = a2;
  if (a2 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1)
      swift_once();
    v12 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  v14 = a4 * a6;
  v15 = a5 * a7;
  if (a3 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1)
      swift_once();
    a3 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  CGAffineTransformMakeTranslation(&t1, -v14, -v15);
  v35 = *(_OWORD *)&t1.c;
  v37 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeScale(&t1, v12, a3);
  v18 = *(_OWORD *)&t1.a;
  v19 = *(_OWORD *)&t1.c;
  v20 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v37;
  *(_OWORD *)&t1.c = v35;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v18;
  *(_OWORD *)&t2.c = v19;
  *(_OWORD *)&t2.tx = v20;
  CGAffineTransformConcat(&v42, &t1, &t2);
  v36 = *(_OWORD *)&v42.c;
  v38 = *(_OWORD *)&v42.a;
  v21 = v42.tx;
  v22 = v42.ty;
  CGAffineTransformMakeTranslation(&t1, v14, v15);
  v23 = *(_OWORD *)&t1.a;
  v24 = *(_OWORD *)&t1.c;
  v25 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v38;
  *(_OWORD *)&t1.c = v36;
  t1.tx = v21;
  t1.ty = v22;
  *(_OWORD *)&t2.a = v23;
  *(_OWORD *)&t2.c = v24;
  *(_OWORD *)&t2.tx = v25;
  CGAffineTransformConcat(&v42, &t1, &t2);
  a = v42.a;
  b = v42.b;
  c = v42.c;
  d = v42.d;
  v30 = v42.tx;
  v31 = v42.ty;
  t1.a = v42.a;
  t1.b = v42.b;
  t1.c = 0.0;
  t1.d = v42.c;
  t1.tx = v42.d;
  t1.ty = 0.0;
  v44 = *(_OWORD *)&v42.tx;
  v45 = 0x3FF0000000000000;
  if (ProjectionTransform.isInvertible.getter())
  {
    result = swift_allocObject();
    *(CGFloat *)(result + 16) = a;
    *(CGFloat *)(result + 24) = b;
    *(CGFloat *)(result + 32) = c;
    *(CGFloat *)(result + 40) = d;
    *(CGFloat *)(result + 48) = v30;
    *(CGFloat *)(result + 56) = v31;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 64) = 0;
    v33 = 8;
    *(_BYTE *)(result + 88) = 0;
  }
  else
  {
    t2.a = 0.0;
    t2.b = -2.68156159e154;
    _StringGuts.grow(_:)(28);
    v42.a = t2.a;
    v42.b = t2.b;
    v34._object = (void *)0x80000002352E1010;
    v34._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v34);
    t2 = t1;
    v40 = v44;
    v41 = v45;
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(*(uint64_t *)&v42.a, *(unint64_t *)&v42.b);
    swift_bridgeObjectRelease();
    result = 0;
    v33 = 19;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = v33;
  return result;
}

uint64_t specialized static EffectAnimation<>.effect(value:size:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  uint64_t result;
  char v11;
  Swift::String v12;
  CGAffineTransform v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t v16;

  CGAffineTransformMakeTranslation(&v13, a2, a3);
  a = v13.a;
  b = v13.b;
  c = v13.c;
  d = v13.d;
  tx = v13.tx;
  ty = v13.ty;
  v13.c = 0.0;
  v13.d = c;
  v13.tx = d;
  v13.ty = 0.0;
  v14 = tx;
  v15 = ty;
  v16 = 0x3FF0000000000000;
  if (ProjectionTransform.isInvertible.getter())
  {
    result = swift_allocObject();
    *(CGFloat *)(result + 16) = a;
    *(CGFloat *)(result + 24) = b;
    *(CGFloat *)(result + 32) = c;
    *(CGFloat *)(result + 40) = d;
    *(CGFloat *)(result + 48) = tx;
    *(CGFloat *)(result + 56) = ty;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 64) = 0;
    v11 = 8;
    *(_BYTE *)(result + 88) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(28);
    v12._object = (void *)0x80000002352E1010;
    v12._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    result = 0;
    v11 = 19;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = v11;
  return result;
}

uint64_t specialized static EffectAnimation<>.effect(value:size:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;
  char v16;
  Swift::String v17;
  CGAffineTransform v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  CGAffineTransform v22;
  __int128 v23;
  uint64_t v24;

  CGAffineTransformMakeTranslation(&v22, a3 * a5, a4 * a6);
  CGAffineTransformRotate(&v18, &v22, a2);
  v22 = v18;
  CGAffineTransformTranslate(&v18, &v22, -(a3 * a5), -(a4 * a6));
  v12 = *(_OWORD *)&v18.a;
  v13 = *(_OWORD *)&v18.c;
  v14 = *(_OWORD *)&v18.tx;
  *(_OWORD *)&v22.a = *(_OWORD *)&v18.a;
  v22.c = 0.0;
  *(_OWORD *)&v22.d = *(_OWORD *)&v18.c;
  v22.ty = 0.0;
  v23 = *(_OWORD *)&v18.tx;
  v24 = 0x3FF0000000000000;
  if (ProjectionTransform.isInvertible.getter())
  {
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v12;
    *(_OWORD *)(result + 32) = v13;
    *(_OWORD *)(result + 48) = v14;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 64) = 0;
    v16 = 8;
    *(_BYTE *)(result + 88) = 0;
  }
  else
  {
    v18.a = 0.0;
    v18.b = -2.68156159e154;
    _StringGuts.grow(_:)(28);
    v21 = *(_OWORD *)&v18.a;
    v17._object = (void *)0x80000002352E1010;
    v17._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v17);
    v18 = v22;
    v19 = v23;
    v20 = v24;
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(v21, *((unint64_t *)&v21 + 1));
    swift_bridgeObjectRelease();
    result = 0;
    v16 = 19;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = v16;
  return result;
}

uint64_t EffectAnimator.evaluate(_:at:size:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  uint64_t v51;
  unint64_t *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t result;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t AssociatedConformanceWitness;
  uint64_t v69;
  char *v70;
  char *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77[6];

  v75 = a2;
  v10 = *(_QWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v71 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v63 - v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v74 = AssociatedTypeWitness;
  v69 = swift_getAssociatedTypeWitness();
  v67 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v66 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v65 = (char *)&v63 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v70 = (char *)&v63 - v21;
  v22 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v63 - v24;
  v26 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *a3;
  outlined init with copy of AnyTrackedValue(v75, (uint64_t)v77);
  type metadata accessor for _DisplayList_AnyEffectAnimation();
  v31 = swift_dynamicCast();
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (!v31)
  {
    v34 = 1;
    v32(v25, 1, 1, v10);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 12) = 19;
    return v34;
  }
  v75 = a1;
  v32(v25, 0, 1, v10);
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v25, v10);
  v33 = v72;
  v34 = *v72;
  v35 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
  v36 = v26;
  if (!*v72)
  {
    v63 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
    v35(v10, v11);
    v37 = AssociatedConformanceWitness;
    v38 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    v39 = v74;
    v38(v74, AssociatedConformanceWitness);
    v64 = v26;
    v40 = *(void (**)(char *, uint64_t))(v73 + 8);
    v40(v16, v39);
    (*(void (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
    v41 = (uint64_t)v65;
    v38(v39, v37);
    v40(v16, v39);
    v42 = v29;
    v43 = v69;
    v44 = swift_getAssociatedConformanceWitness();
    v45 = v70;
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v46 = v67;
    v47 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v47(v41, v43);
    type metadata accessor for AnimatorState(0, v43, v44, v48);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
    v50 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 16);
    v36 = v64;
    v50(v41, v45, v43);
    v77[0] = 0;
    v34 = AnimatorState.__allocating_init(animation:interval:at:in:)(v49, v41, v77);
    v51 = v43;
    v29 = v42;
    v47((uint64_t)v45, v51);
    v52 = v72;
    outlined consume of EffectAnimator<A>.State<A>(*v72);
    v35 = v63;
    v33 = v52;
    *v52 = v34;
  }
  v53 = v71;
  v35(v10, v11);
  if (v34 == 1)
    goto LABEL_10;
  v64 = v36;
  if (v34)
  {
    v54 = AssociatedConformanceWitness;
    v55 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    swift_retain();
    v56 = (uint64_t)v66;
    v55(v74, v54);
    v77[0] = v30;
    v76 = 1;
    if ((AnimatorState.update(_:at:environment:)(v56, (double *)v77) & 1) == 0)
    {
      v58 = v56;
      v59 = v67;
      v61 = v69;
      v60 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v70, v58, v69);
      v57 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v60, v74, v54);
      outlined consume of EffectAnimator<A>.State<A>(v34);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v66, v61);
      v34 = 0;
      v36 = v64;
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v56, v69);
    outlined consume of EffectAnimator<A>.State<A>(v34);
    outlined consume of EffectAnimator<A>.State<A>(*v33);
    v34 = 1;
    *v33 = 1;
    v36 = v64;
LABEL_10:
    v57 = v74;
LABEL_12:
    (*(void (**)(char *, uint64_t, uint64_t, double, double))(v11 + 96))(v53, v10, v11, a5, a6);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v53, v57);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v10);
    return v34;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.OpacityAnimation()
{
  return swift_retain();
}

float protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.OpacityAnimation@<S0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  result = *a1;
  *(_QWORD *)a2 = LODWORD(result);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 4;
  return result;
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.OpacityAnimation(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;

  type metadata accessor for EffectAnimator<DisplayList.OpacityAnimation>(0, a1, a2, a3);
  a4[3] = v5;
  a4[4] = &protocol witness table for EffectAnimator<A>;
  *a4 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.OpacityAnimation(uint64_t a1)
{
  uint64_t v1;

  return specialized EffectAnimation.encode(to:)(a1, *(_QWORD *)(v1 + 16), *(double *)v1, *(double *)(v1 + 8));
}

_QWORD *protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.OpacityAnimation@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  result = specialized EffectAnimation.init(from:)(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = result;
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : Animatable in DisplayList.OpacityAnimation()
{
  return &protocol witness table for _OpacityEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.OpacityAnimation()
{
  return &protocol witness table for _OpacityEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.OpacityAnimation()
{
  return &protocol witness table for _OpacityEffect;
}

__n128 protocol witness for EffectAnimation.to.getter in conformance DisplayList.OffsetAnimation@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.OffsetAnimation()
{
  return swift_retain();
}

uint64_t protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.OffsetAnimation@<X0>(CGFloat *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static EffectAnimation<>.effect(value:size:)(a2, *a1, a1[1]);
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.OffsetAnimation(_QWORD *a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(0, &lazy cache variable for type metadata for EffectAnimator<DisplayList.OffsetAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation, (uint64_t)&type metadata for DisplayList.OffsetAnimation);
  a1[3] = v2;
  a1[4] = &protocol witness table for EffectAnimator<A>;
  *a1 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.OffsetAnimation(uint64_t a1)
{
  return specialized EffectAnimation.encode(to:)(a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.OffsetAnimation@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  specialized EffectAnimation.init(from:)(a1, (double *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

__n128 protocol witness for EffectAnimation.to.getter in conformance DisplayList.ScaleAnimation@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.ScaleAnimation()
{
  return swift_retain();
}

uint64_t protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.ScaleAnimation@<X0>(CGFloat *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return specialized static EffectAnimation<>.effect(value:size:)(a2, *a1, a1[1], a1[2], a1[3], a3, a4);
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.ScaleAnimation(_QWORD *a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(0, &lazy cache variable for type metadata for EffectAnimator<DisplayList.ScaleAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation, (uint64_t)&type metadata for DisplayList.ScaleAnimation);
  a1[3] = v2;
  a1[4] = &protocol witness table for EffectAnimator<A>;
  *a1 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.ScaleAnimation(uint64_t a1)
{
  return specialized EffectAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.ScaleAnimation@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return specialized EffectAnimation.init(from:)(a1, a2);
}

double protocol witness for EffectAnimation.from.getter in conformance DisplayList.RotationAnimation@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

double protocol witness for EffectAnimation.to.getter in conformance DisplayList.RotationAnimation@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.RotationAnimation()
{
  return swift_retain();
}

uint64_t protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.RotationAnimation@<X0>(CGFloat *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return specialized static EffectAnimation<>.effect(value:size:)(a2, *a1, a1[1], a1[2], a3, a4);
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.RotationAnimation(_QWORD *a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(0, &lazy cache variable for type metadata for EffectAnimator<DisplayList.RotationAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation, (uint64_t)&type metadata for DisplayList.RotationAnimation);
  a1[3] = v2;
  a1[4] = &protocol witness table for EffectAnimator<A>;
  *a1 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.RotationAnimation(int64_t a1)
{
  return specialized EffectAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.RotationAnimation@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return specialized EffectAnimation.init(from:)(a1, a2);
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.RotationAnimation()
{
  return &protocol witness table for _RotationEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.RotationAnimation()
{
  return &protocol witness table for _RotationEffect;
}

unint64_t lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect;
  if (!lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ScaleEffect, &type metadata for _ScaleEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect;
  if (!lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ScaleEffect, &type metadata for _ScaleEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.ScaleAnimation()
{
  return &protocol witness table for _ScaleEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.ScaleAnimation()
{
  return &protocol witness table for _ScaleEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.OffsetAnimation()
{
  return &protocol witness table for _OffsetEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.OffsetAnimation()
{
  return &protocol witness table for _OffsetEffect;
}

void type metadata accessor for EffectAnimator<DisplayList.OpacityAnimation>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EffectAnimator<DisplayList.OpacityAnimation>)
  {
    v4 = type metadata accessor for EffectAnimator(0, (uint64_t)&type metadata for DisplayList.OpacityAnimation, (uint64_t)&protocol witness table for DisplayList.OpacityAnimation, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EffectAnimator<DisplayList.OpacityAnimation>);
  }
}

uint64_t type metadata accessor for EffectAnimator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EffectAnimator);
}

unint64_t lazy protocol witness table accessor for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation;
  if (!lazy protocol witness table cache variable for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.RotationAnimation, &type metadata for DisplayList.RotationAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation;
  if (!lazy protocol witness table cache variable for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.ScaleAnimation, &type metadata for DisplayList.ScaleAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation);
  }
  return result;
}

void type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for EffectAnimator(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation;
  if (!lazy protocol witness table cache variable for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.OffsetAnimation, &type metadata for DisplayList.OffsetAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation);
  }
  return result;
}

uint64_t sub_234BC90A8()
{
  return swift_deallocObject();
}

uint64_t outlined release of DisplayList.OffsetAnimation(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined retain of DisplayList.ScaleAnimation(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of DisplayList.ScaleAnimation(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined retain of DisplayList.RotationAnimation(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of DisplayList.RotationAnimation(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for EffectAnimator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 2)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for EffectAnimator(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 2)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for EffectAnimator(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 >= 2)
  {
    if (v4 >= 2)
    {
      *a1 = v4;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v4;
    if (v4 >= 2)
      swift_retain();
  }
  return a1;
}

unint64_t *assignWithTake for EffectAnimator(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 >= 2)
  {
    if (v3 >= 2)
    {
      *a1 = v3;
      swift_release();
      return a1;
    }
    swift_release();
  }
  *a1 = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for EffectAnimator(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EffectAnimator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

unint64_t type metadata accessor for _DisplayList_AnyEffectAnimation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation;
  if (!lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
  }
  return result;
}

unint64_t outlined consume of EffectAnimator<A>.State<A>(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EffectAnimator.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for EffectAnimator.State(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for EffectAnimator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for EffectAnimator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EffectAnimator.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EffectAnimator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for EffectAnimator.State(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

uint64_t type metadata accessor for EffectAnimator.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EffectAnimator.State);
}

uint64_t destroy for Text.Effect.RenderSegmentation.Effect(uint64_t a1)
{
  outlined consume of Text.Layout.Line.Line(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.Effect(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  outlined copy of Text.Layout.Line.Line(v4, v5, v6);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.Effect(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  outlined copy of Text.Layout.Line.Line(v4, v5, v6);
  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(void **)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of Text.Layout.Line.Line(v6, v7, v8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.Effect(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.Effect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.RenderSegmentation.Effect()
{
  return &type metadata for Text.Effect.RenderSegmentation.Effect;
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.RenderSegmentation.StaticRuns(char *a1, char **a2, int *a3)
{
  int v5;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  __int128 v21;
  char *v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v22[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = (uint64_t)a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Layout.Line.Line(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *((_QWORD *)a1 + 1) = v8;
    a1[16] = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    v10 = a3[6];
    v11 = &a1[v10];
    v12 = (uint64_t)a2 + v10;
    type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = a3[8];
    *(_QWORD *)&a1[a3[7]] = *(char **)((char *)a2 + a3[7]);
    v15 = &a1[v14];
    v16 = (_OWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *(_OWORD *)v15 = *v16;
    *((_OWORD *)v15 + 1) = v17;
    v18 = a3[9];
    v19 = &a1[v18];
    v20 = (_OWORD *)((char *)a2 + v18);
    v21 = v20[1];
    *(_OWORD *)v19 = *v20;
    *((_OWORD *)v19 + 1) = v21;
  }
  return a1;
}

uint64_t destroy for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = a3[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[9];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of Text.Layout.Line.Line(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  v17[2] = v18[2];
  v17[3] = v18[3];
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  v20[3] = v21[3];
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.RenderSegmentation.StaticRuns(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
  a1[3] = a2[3];
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[9];
  v16 = (_OWORD *)((char *)a1 + v15);
  v17 = (_OWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[9];
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BC9D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BC9E0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  else
  {
    type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.RenderSegmentation.StaticRuns);
}

void type metadata completion function for Text.Effect.RenderSegmentation.StaticRuns()
{
  unint64_t v0;

  type metadata accessor for RangeSet<Int>.Ranges(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for Text.Effect.RenderSegmentation()
{
  return &type metadata for Text.Effect.RenderSegmentation;
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.StaticLines(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.RenderSegmentation.StaticLines(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.StaticLines(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticLines(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticLines(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.RenderSegmentation.StaticLines()
{
  return &type metadata for Text.Effect.RenderSegmentation.StaticLines;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation.StaticLines, &type metadata for Text.Effect.RenderSegmentation.StaticLines);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation.StaticLines, &type metadata for Text.Effect.RenderSegmentation.StaticLines);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation.StaticLines, &type metadata for Text.Effect.RenderSegmentation.StaticLines);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation.StaticLines, &type metadata for Text.Effect.RenderSegmentation.StaticLines);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

uint64_t Text.Effect.RenderSegmentation.StaticRuns.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  _QWORD *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v38 = a1;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v35 = (char *)&v33 - v3;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v33 - v5;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v33 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - v7;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v33 - v15;
  v17 = *(void **)v1;
  v18 = *(_QWORD *)(v1 + 8);
  v19 = *(_BYTE *)(v1 + 16);
  v20 = *(_QWORD *)(v1 + 24);
  v21 = *(_QWORD *)(v1 + 32);
  v22 = *(_DWORD *)(v1 + 40);
  v23 = v1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v16, v23, v10);
  v25 = v38;
  *v38 = v17;
  v25[1] = v18;
  *((_BYTE *)v25 + 16) = v19;
  v25[3] = v20;
  v25[4] = v21;
  *((_DWORD *)v25 + 10) = v22;
  v24(v13, (uint64_t)v16, v10);
  outlined copy of Text.Layout.Line.Line(v17, v18, v19);
  v26 = v35;
  RangeSet.ranges.getter();
  v27 = *(void (**)(char *, uint64_t))(v11 + 8);
  v27(v13, v10);
  v29 = v36;
  v28 = v37;
  v30 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v34, v26, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(&v8[*(int *)(v33 + 48)], v30, v28);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v27(v16, v10);
  outlined destroy of RangeSet<Int><>.IndexSequence(v30, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  v31 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0);
  return outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v8, (uint64_t)v38 + *(int *)(v31 + 20));
}

void Text.Effect.RenderSegmentation.StaticRuns.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0) + 20));
  v5 = *v4;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  if (v5 >= RangeSet.Ranges.count.getter())
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  RangeSet.Ranges.subscript.getter();
  v6 = v4[1];
  v7 = v17 + v6;
  if (__OFADD__(v17, v6))
  {
    __break(1u);
    goto LABEL_15;
  }
  v8 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v4[1] = v8;
  RangeSet.Ranges.subscript.getter();
  if (__OFSUB__(v18, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v8 >= v18 - v17)
  {
    *v4 = v5 + 1;
    v4[1] = 0;
  }
  v10 = *(void **)v1;
  v9 = *(_QWORD *)(v1 + 8);
  v16 = *(_OWORD *)(v2 + 24);
  v11 = *(unsigned int *)(v2 + 40);
  v12 = *(void **)v2;
  v13 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v12, v13, 0);
    outlined copy of Text.Layout.Line.Line(v10, v9, 0);

    swift_release();
    goto LABEL_12;
  }
  outlined copy of Text.Layout.Line.Line(v12, v13, 1);
  v14 = (id)_NSTextLineFragmentGetCTLine(v10);
  if (!v14)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v15 = v14;
  outlined consume of Text.Layout.Line.Line(v10, v9, 1);
  v9 = 0;
  v10 = v15;
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v9;
}

uint64_t Text.Effect.RenderSegmentation.Segment.characterRanges.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int EnumCaseMultiPayload;
  char v11;
  int v12;
  __int128 v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  _BYTE v30[32];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Text.Effect.RenderSegmentation.Segment(v2, (uint64_t)v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      v11 = v6[16];
      v12 = *((_DWORD *)v6 + 10);
      v29 = *(_OWORD *)v6;
      v30[0] = v11;
      *(_OWORD *)&v30[8] = *(_OWORD *)(v6 + 24);
      *(_DWORD *)&v30[24] = v12;
      Text.Layout.Line.characterRanges(runIndices:)((uint64_t)&v6[*(int *)(v4 + 24)], a1);
      return outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    }
    else
    {
      v15 = (void *)*((_QWORD *)v9 + 3);
      v16 = *((_QWORD *)v9 + 4);
      v17 = v9[40];
      v18 = *((_QWORD *)v9 + 6);
      v19 = *((_QWORD *)v9 + 7);
      v20 = *((_DWORD *)v9 + 16);
      v21 = *((_QWORD *)v9 + 9);
      v22 = *((_QWORD *)v9 + 10);
      v23 = *((_QWORD *)v9 + 11);
      outlined copy of Text.Layout.Line.Line(v15, v16, v17);
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      swift_bridgeObjectRetain();
      RangeSet.init()();
      *(_QWORD *)&v29 = v15;
      *((_QWORD *)&v29 + 1) = v16;
      v30[0] = v17;
      *(_QWORD *)&v30[8] = v18;
      *(_QWORD *)&v30[16] = v19;
      *(_DWORD *)&v30[24] = v20;
      v31 = v21;
      v32 = v22;
      v33 = v23;
      v24[0] = v15;
      v24[1] = v16;
      v25 = v17;
      v26 = v18;
      v27 = v19;
      v28 = v20;
      Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v24, a1);
      outlined consume of Text.Layout.Line.Line(v15, v16, v17);
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v15, v16, v17);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v14 = *((_OWORD *)v9 + 1);
    v29 = *(_OWORD *)v9;
    *(_OWORD *)v30 = v14;
    *(_OWORD *)&v30[16] = *((_OWORD *)v9 + 2);
    v31 = *((_QWORD *)v9 + 6);
    Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
    return outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v29);
  }
}

void Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *i;
  uint64_t v4;
  void *v5;
  char v6;
  char *location;
  CFIndex v8;
  CFIndex length;
  const __CTLine *v10;
  CFRange StringRange;
  char *v12;
  void (*v13)(char *, _QWORD);
  uint64_t v14;
  char v15[32];
  char *v16;
  char *v17;

  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  RangeSet.init()();
  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v2)
  {
    v14 = v0;
    outlined retain of Text.Effect.RenderSegmentation.StaticLines(v0);
    for (i = (char *)(v1 + 48); ; i += 48)
    {
      v5 = (void *)*((_QWORD *)i - 2);
      v4 = *((_QWORD *)i - 1);
      v6 = *i;
      if ((*i & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(*((void **)i - 2), *((_QWORD *)i - 1), 1);
        location = (char *)objc_msgSend(v5, sel_characterRange);
        length = v8;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*((void **)i - 2), *((_QWORD *)i - 1), 0);
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        v10 = v5;
        StringRange = CTLineGetStringRange(v10);
        location = (char *)StringRange.location;
        length = StringRange.length;

        outlined consume of Text.Layout.Line.Line(v5, v4, 0);
      }
      v12 = &location[length];
      if (__OFADD__(location, length))
        break;
      if ((uint64_t)v12 < (uint64_t)location)
        goto LABEL_15;
      v16 = location;
      v17 = &location[length];
      if (__OFSUB__(v12, location))
        goto LABEL_16;
      if (v12 != location)
      {
        type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
        v13 = (void (*)(char *, _QWORD))RangeSet._ranges.modify();
        type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
        RangeSet.Ranges._insert(contentsOf:)();
        v13(v15, 0);
      }
      outlined consume of Text.Layout.Line.Line(v5, v4, v6);
      if (!--v2)
      {
        outlined release of Text.Effect.RenderSegmentation.StaticLines(v14);
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines(_QWORD *a1, unint64_t *a2))(uint64_t a1)
{
  uint64_t v2;
  void *v5;
  unint64_t v6;
  __int128 v7;

  v5 = malloc(0x60uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v7;
  *((_OWORD *)v5 + 2) = *(_OWORD *)(v2 + 32);
  *((_QWORD *)v5 + 6) = *(_QWORD *)(v2 + 48);
  *((_QWORD *)v5 + 11) = Text.Effect.RenderSegmentation.StaticLines.subscript.read((void (**)(void ***))v5 + 7, v6);
  return protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines;
}

void protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 56);
  free(v1);
}

void (*Text.Effect.RenderSegmentation.StaticLines.subscript.read(void (**a1)(void ***a1), unint64_t a2))(void ***a1)
{
  uint64_t v2;
  void (*result)(void ***);
  void (*v6)(void ***);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  int v11;
  __int128 v12;

  result = (void (*)(void ***))malloc(0x2CuLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = *(_QWORD *)v2 + 48 * a2;
    v8 = *(void **)(v7 + 32);
    v9 = *(_QWORD *)(v7 + 40);
    v10 = *(_BYTE *)(v7 + 48);
    v11 = *(_DWORD *)(v7 + 72);
    v12 = *(_OWORD *)(v7 + 56);
    *(_QWORD *)v6 = v8;
    *((_QWORD *)v6 + 1) = v9;
    *((_BYTE *)v6 + 16) = v10;
    *(_OWORD *)((char *)v6 + 24) = v12;
    *((_DWORD *)v6 + 10) = v11;
    outlined copy of Text.Layout.Line.Line(v8, v9, v10);
    return Text.Effect.RenderSegmentation.StaticLines.subscript.read;
  }
  __break(1u);
  return result;
}

void Text.Effect.RenderSegmentation.StaticLines.subscript.read(void ***a1)
{
  void **v1;

  v1 = *a1;
  outlined consume of Text.Layout.Line.Line(**a1, (uint64_t)v1[1], *((_BYTE *)v1 + 16));
  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.RenderSegmentation.StaticLines@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *(uint64_t **)v2, *(_QWORD *)(*(_QWORD *)v2 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 8);
    v5 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(a2 + 16) = result;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v5;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v2 + 40);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.RenderSegmentation.StaticLines@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Effect.RenderSegmentation.StaticLines@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.RenderSegmentation.StaticLines()
{
  uint64_t v0;
  __int128 v1;
  _QWORD *v2;
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 16);
  v4[0] = *(_OWORD *)v0;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 48);
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v4);
  outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.RenderSegmentation.StaticLines(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation.StaticLines>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines, (uint64_t)&type metadata for Text.Effect.RenderSegmentation.StaticLines, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation.StaticLines>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines, (uint64_t)&type metadata for Text.Effect.RenderSegmentation.StaticLines, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.RenderSegmentation>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation, &type metadata for Text.Effect.RenderSegmentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation, &type metadata for Text.Effect.RenderSegmentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation, &type metadata for Text.Effect.RenderSegmentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation, &type metadata for Text.Effect.RenderSegmentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

id Text.Effect.RenderSegmentation.StaticRuns.init(line:glyphOrigin:runs:lineIndex:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  int *v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  void (*v40)(char *, uint64_t);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  void *v46;
  double v47;
  double v48;
  char v49;
  void *v50;
  const __CTLine *v51;
  void *v52;
  id result;
  CFIndex v54;
  uint64_t *v56;
  double *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  int *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  CGFloat v66[3];
  double v67;
  double v68;
  double v69;
  __int128 v70;
  _OWORD v71[3];

  v61 = a3;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v12 = v11;
  v63 = *(uint64_t **)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v62 = (int *)((char *)&v58 - v13);
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v58 - v17;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v58 - v20;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v60 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (uint64_t *)((char *)&v58 - v23);
  v25 = a1[1];
  v70 = *a1;
  v71[0] = v25;
  *(_OWORD *)((char *)v71 + 12) = *(__int128 *)((char *)a1 + 28);
  v26 = *(_OWORD *)((char *)v71 + 12);
  *(_OWORD *)a4 = v70;
  *(_OWORD *)(a4 + 16) = v25;
  *(_OWORD *)(a4 + 28) = v26;
  *(double *)(a4 + 48) = a5;
  *(double *)(a4 + 56) = a6;
  v27 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v28(a4 + v27[6], a2, v15);
  *(_QWORD *)(a4 + v27[7]) = v61;
  v29 = *MEMORY[0x24BDBF070];
  v30 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v31 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v32 = *(double *)(MEMORY[0x24BDBF070] + 24);
  outlined retain of Text.Layout.Line((uint64_t)&v70);
  v33 = specialized RangeSet<>.reduce<A>(_:_:)(v29, v30, v31, v32, a2, (uint64_t)&v70);
  v34 = v27[8];
  v61 = a4;
  v35 = a4 + v34;
  *(CGFloat *)v35 = v33;
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)(v35 + 16) = v37;
  *(_QWORD *)(v35 + 24) = v38;
  v59 = a2;
  v28((uint64_t)v18, a2, v15);
  v39 = v62;
  RangeSet.ranges.getter();
  v40 = *(void (**)(char *, uint64_t))(v16 + 8);
  v58 = v15;
  v40(v18, v15);
  v41 = v63;
  ((void (*)(char *, int *, uint64_t))v63[4])(v21, v39, v12);
  ((void (*)(char *, char *, uint64_t))v41[2])((char *)v24 + v60[12], v21, v12);
  *v24 = 0;
  v24[1] = 0;
  outlined destroy of RangeSet<Int><>.IndexSequence((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  v42 = *v24;
  if (v42 >= RangeSet.Ranges.count.getter())
  {
    outlined release of Text.Layout.Line((uint64_t)&v70);
    v44 = 0.0;
    v45 = 0.0;
    v47 = 0.0;
    v48 = 0.0;
LABEL_21:
    v40((char *)v59, v58);
    result = (id)outlined destroy of RangeSet<Int><>.IndexSequence((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    v57 = (double *)(v61 + v27[9]);
    *v57 = v48;
    v57[1] = v47;
    v57[2] = v45;
    v57[3] = v44;
  }
  else
  {
    v60 = (int *)v40;
    v62 = v27;
    v63 = v24;
    v43 = v24[1];
    v44 = 0.0;
    v45 = 0.0;
    v46 = (void *)v70;
    v47 = 0.0;
    v48 = 0.0;
    v49 = v71[0];
    while (1)
    {
      result = (id)RangeSet.Ranges.subscript.getter();
      v54 = v64 + v43;
      if (__OFADD__(v64, v43))
        break;
      if (__OFADD__(v43++, 1))
        goto LABEL_23;
      result = (id)RangeSet.Ranges.subscript.getter();
      if (__OFSUB__(v65, v64))
        goto LABEL_24;
      if (v43 >= v65 - v64)
      {
        v43 = 0;
        *v63 = ++v42;
      }
      outlined retain of Text.Layout.Line((uint64_t)&v70);
      if ((v49 & 1) != 0)
      {
        result = (id)_NSTextLineFragmentGetCTLine(v46);
        if (!result)
          goto LABEL_25;
        v50 = result;
        outlined release of Text.Layout.Line((uint64_t)&v70);
      }
      else
      {
        outlined retain of Text.Layout.Line((uint64_t)&v70);

        swift_release();
        v50 = v46;
      }
      swift_retain();
      v51 = v50;
      v52 = (id)_CTLineGetRunAtIndex(v51, v54);
      specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v52, (CFRange)0, v66);
      swift_release_n();

      if (v48 <= v67)
        v48 = v67;
      if (v47 <= v68)
        v47 = v68;
      if (v45 <= v69)
        v45 = v69;
      v44 = v44 + v66[2];
      if (v42 >= RangeSet.Ranges.count.getter())
      {
        outlined release of Text.Layout.Line((uint64_t)&v70);
        v27 = v62;
        v56 = v63;
        v63[1] = v43;
        v24 = v56;
        v40 = (void (*)(char *, uint64_t))v60;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Text.Effect.RenderSegmentation.StaticRuns@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  Text.Effect.RenderSegmentation.StaticRuns.makeIterator()(a1);
  return outlined destroy of TypesettingConfiguration(v1, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.RenderSegmentation.StaticRuns()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized _copySequenceToContiguousArray<A>(_:)(v0);
  v2 = v1;
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  return v2;
}

uint64_t flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE v28[24];
  _OWORD v29[3];
  uint64_t v30;

  v8 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (uint64_t *)(a2 + 16);
  result = swift_beginAccess();
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    return result;
  v16 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  v17 = __OFSUB__(a1, v15);
  v18 = a1 - v15;
  if (v17)
  {
    __break(1u);
    goto LABEL_15;
  }
  a3 += 2;
  v19 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Text.Effect.RenderSegmentation.StaticLines.init(lines:glyphOrigins:lineIndex:)(v14, v19, v18, (CGFloat *)v29);
  swift_bridgeObjectRelease();
  v20 = v29[1];
  *(_OWORD *)v11 = v29[0];
  *((_OWORD *)v11 + 1) = v20;
  *((_OWORD *)v11 + 2) = v29[2];
  *((_QWORD *)v11 + 6) = v30;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  v8 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_15:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, v8);
    *a3 = v8;
  }
  v23 = *(_QWORD *)(v8 + 16);
  v22 = *(_QWORD *)(v8 + 24);
  if (v23 >= v22 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v8);
    *a3 = v8;
  }
  *(_QWORD *)(v8 + 16) = v23 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, v8+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v23, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  swift_endAccess();
  swift_beginAccess();
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v25 = *v12;
  if (v24)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v25 + 16));
  }
  else
  {
    *v12 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v25 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  swift_beginAccess();
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v27 = *v16;
  if (v26)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v27 + 16));
  }
  else
  {
    *v16 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v27 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  return swift_endAccess();
}

uint64_t specialized flushStaticRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, double a8, double a9)
{
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t *v26;
  __int128 v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _OWORD v38[2];

  v35 = a7;
  v33 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v36 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v33 - v22;
  v34 = a4;
  flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(a4, a1, a2, a3);
  swift_beginAccess();
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v24(v23, a5, v20);
  LOBYTE(a1) = RangeSet.isEmpty.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if ((a1 & 1) == 0)
  {
    v26 = a2 + 2;
    v27 = a6[1];
    v37 = *a6;
    v38[0] = v27;
    *(_OWORD *)((char *)v38 + 12) = *(__int128 *)((char *)a6 + 28);
    swift_beginAccess();
    v24(v23, a5, v20);
    outlined retain of Text.Layout.Line((uint64_t)a6);
    Text.Effect.RenderSegmentation.StaticRuns.init(line:glyphOrigin:runs:lineIndex:)(&v37, (uint64_t)v23, v34, (uint64_t)v18, a8, a9);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    v28 = *v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v26 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
      *v26 = v28;
    }
    v30 = (_BYTE *)(v35 + 16);
    v32 = *(_QWORD *)(v28 + 16);
    v31 = *(_QWORD *)(v28 + 24);
    if (v32 >= v31 >> 1)
    {
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v28);
      *v26 = v28;
    }
    *(_QWORD *)(v28 + 16) = v32 + 1;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v18, v28+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v32, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    swift_endAccess();
    swift_beginAccess();
    *v30 = 1;
    RangeSet.init()();
    swift_beginAccess();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 40))(a5, v23, v20);
  }
  return result;
}

uint64_t flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t i;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t *v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  void *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t result;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91[3];

  v9 = a7;
  v90 = a6;
  v81 = a5;
  v16 = *(_QWORD *)a7;
  v17 = *(_QWORD *)(a7 + 8);
  v18 = *(unsigned __int8 *)(a7 + 16);
  v19 = *(_QWORD *)(a7 + 24);
  v20 = *(_QWORD *)(a7 + 32);
  v21 = *(_DWORD *)(a7 + 40);
  v80 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v82 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v83 = (_QWORD **)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = (_QWORD *)(a2 + 16);
  v87 = a1 + 16;
  swift_beginAccess();
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
  v86 = v16;
  v85 = v17;
  v84 = v18;
  if (!v24)
  {
    v25 = 0;
    goto LABEL_42;
  }
  swift_beginAccess();
  v25 = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
  {
    v73 = v21;
    v78 = a1;
    v74 = v9;
    v26 = (uint64_t *)(a3 + 16);
    v79 = (unint64_t *)(a4 + 16);
    v77 = (_BYTE *)(v90 + 16);
    v76 = *(_QWORD *)(a2 + 16);
    v88 = a2;
    v75 = *(_QWORD *)(a2 + 24);
    swift_beginAccess();
    v91[0] = MEMORY[0x24BEE4B00];
    Text.Effect.Composition.updateNonadjacentFragmentIdentifiers(map:)((uint64_t)v91);
    a1 = FragmentIdentifierOffsetMap.countMap.getter(v91[0]);
    swift_bridgeObjectRelease();
    swift_endAccess();
    v25 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 64);
    v89 = a1 + 64;
    v29 = 1 << *(_BYTE *)(a1 + 32);
    v30 = -1;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    a2 = v30 & v28;
    v90 = (unint64_t)(v29 + 63) >> 6;
    v72 = v23;
    if ((v30 & v28) == 0)
      goto LABEL_7;
LABEL_6:
    v31 = __clz(__rbit64(a2));
    a2 &= a2 - 1;
    for (i = v31 | (v27 << 6); ; i = __clz(__rbit64(v34)) + (v27 << 6))
    {
      v36 = 8 * i;
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v36);
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v36);
      swift_beginAccess();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v25);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v91[0] = *v26;
      v25 = (_QWORD *)v91[0];
      *v26 = 0x8000000000000000;
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
      v42 = v25[2];
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v18 = v40;
      if (v25[3] >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v25 = (_QWORD *)v91[0];
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
        v25 = (_QWORD *)v91[0];
        v45 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
        if ((v18 & 1) != (v46 & 1))
        {
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        v41 = v45;
      }
      *v26 = (uint64_t)v25;
      swift_bridgeObjectRelease();
      v25 = (_QWORD *)*v26;
      if ((v18 & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v25[(v41 >> 6) + 8] |= 1 << v41;
        v47 = 8 * v41;
        *(_QWORD *)(v25[6] + v47) = v37;
        *(_QWORD *)(v25[7] + v47) = 0;
        v48 = v25[2];
        v18 = v48 + 1;
        v49 = __OFADD__(v48, 1);
        swift_bridgeObjectRetain();
        if (v49)
          goto LABEL_45;
        v25[2] = v18;
      }
      v50 = v25[7];
      v51 = *(_QWORD *)(v50 + 8 * v41);
      v52 = __OFADD__(v51, v38);
      v53 = v51 + v38;
      if (v52)
        goto LABEL_44;
      *(_QWORD *)(v50 + 8 * v41) = v53;
      swift_endAccess();
      swift_bridgeObjectRelease();
      v25 = protocol witness for SetAlgebra.init() in conformance NSCalendarUnit;
      if (a2)
        goto LABEL_6;
LABEL_7:
      v33 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_46;
      a2 = v88;
      if (v33 >= v90)
        goto LABEL_38;
      v34 = *(_QWORD *)(v89 + 8 * v33);
      ++v27;
      if (!v34)
      {
        v27 = v33 + 1;
        if (v33 + 1 >= v90)
          goto LABEL_38;
        v34 = *(_QWORD *)(v89 + 8 * v27);
        if (!v34)
        {
          v27 = v33 + 2;
          if (v33 + 2 >= v90)
            goto LABEL_38;
          v34 = *(_QWORD *)(v89 + 8 * v27);
          if (!v34)
          {
            v35 = v33 + 3;
            if (v35 >= v90)
            {
LABEL_38:
              swift_release();
              swift_beginAccess();
              a1 = v78;
              v54 = *(void **)(v78 + 16);
              v55 = *(_QWORD *)(v78 + 24);
              v56 = *(_BYTE *)(v78 + 32);
              v57 = *(_DWORD *)(v78 + 56);
              v58 = *(_QWORD *)(v78 + 80);
              v59 = v83;
              v60 = v76;
              *v83 = v81;
              v59[1] = v60;
              v59[2] = v75;
              v59[3] = v54;
              v59[4] = v55;
              *((_BYTE *)v59 + 40) = v56;
              *((_OWORD *)v59 + 3) = *(_OWORD *)(a1 + 40);
              *((_DWORD *)v59 + 16) = v57;
              *(_OWORD *)(v59 + 9) = *(_OWORD *)(a1 + 64);
              v59[11] = v58;
              swift_storeEnumTagMultiPayload();
              v61 = v79;
              swift_beginAccess();
              v18 = *v61;
              outlined copy of Text.Layout.Line.Line(v54, v55, v56);
              swift_bridgeObjectRetain();
              v62 = swift_isUniquelyReferenced_nonNull_native();
              *v61 = v18;
              if ((v62 & 1) != 0)
                goto LABEL_39;
LABEL_48:
              v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
              *v79 = v18;
LABEL_39:
              v9 = v74;
              v21 = v73;
              v23 = v72;
              v63 = v82;
              v65 = *(_QWORD *)(v18 + 16);
              v64 = *(_QWORD *)(v18 + 24);
              if (v65 >= v64 >> 1)
              {
                v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v18);
                *v79 = v18;
              }
              *(_QWORD *)(v18 + 16) = v65 + 1;
              outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v83, v18+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v65, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
              swift_endAccess();
              v66 = v77;
              swift_beginAccess();
              *v66 = 1;
              break;
            }
            v34 = *(_QWORD *)(v89 + 8 * v35);
            if (!v34)
            {
              while (1)
              {
                v27 = v35 + 1;
                if (__OFADD__(v35, 1))
                  goto LABEL_47;
                if (v27 >= v90)
                  goto LABEL_38;
                v34 = *(_QWORD *)(v89 + 8 * v27);
                ++v35;
                if (v34)
                  goto LABEL_20;
              }
            }
            v27 = v35;
          }
        }
      }
LABEL_20:
      a2 = (v34 - 1) & v34;
    }
  }
LABEL_42:
  swift_beginAccess();
  *v23 = 0;
  v23[1] = 0;
  *(_BYTE *)(a2 + 32) = 1;
  swift_beginAccess();
  v67 = *(void **)(a1 + 16);
  v68 = *(_QWORD *)(a1 + 24);
  v69 = *(_BYTE *)(a1 + 32);
  v70 = v85;
  *(_QWORD *)(a1 + 16) = v86;
  *(_QWORD *)(a1 + 24) = v70;
  *(_BYTE *)(a1 + 32) = v84 & 1;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 48) = v20;
  *(_DWORD *)(a1 + 56) = v21;
  *(double *)(a1 + 64) = a8;
  *(double *)(a1 + 72) = a9;
  *(_QWORD *)(a1 + 80) = MEMORY[0x24BEE4AF8];
  outlined retain of Text.Layout.Line(v9);
  outlined consume of Text.Layout.Line.Line(v67, v68, v69);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v25);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation(uint64_t a1, _QWORD *a2))(_QWORD, _QWORD)
{
  uint64_t v2;
  uint64_t (*result)(_QWORD, _QWORD);

  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.RenderSegmentation()
{
  uint64_t *v0;
  size_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.RenderSegmentation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation, (uint64_t)&type metadata for Text.Effect.RenderSegmentation, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation, (uint64_t)&type metadata for Text.Effect.RenderSegmentation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator)
  {
    v1 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RenderSegmentation.StaticRuns.Iterator, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator);
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
}

uint64_t type metadata accessor for Text.Effect.RenderSegmentation.Segment(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.RenderSegmentation.Segment);
}

uint64_t outlined init with copy of Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Text.Effect.RenderSegmentation.StaticLines.init(lines:glyphOrigins:lineIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CGFloat *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v12;
  double *v13;
  double v14;
  double TypographicBounds;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  char v22;
  double v23;
  double v24;
  const __CTLine *v25;
  uint64_t result;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent[2];
  CGRect v32;
  CGRect v33;
  CGRect v34;

  v4 = a3;
  v5 = a2;
  ascent[1] = *(CGFloat *)MEMORY[0x24BDAC8D0];
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain_n();
    v13 = (double *)(a1 + 64);
    do
    {
      v20 = (void *)*((_QWORD *)v13 - 4);
      v21 = *((_QWORD *)v13 - 3);
      v22 = *((_BYTE *)v13 - 16);
      v24 = *(v13 - 1);
      v23 = *v13;
      if ((v22 & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(v20, v21, 1);
        objc_msgSend(v20, sel_typographicBounds);
        TypographicBounds = v14;
        v17 = v16;
        objc_msgSend(v20, sel_glyphOrigin);
        v19 = v17 - v18;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v20, v21, 0);
        outlined copy of Text.Layout.Line.Line(v20, v21, 0);
        v25 = v20;
        descent = 0.0;
        ascent[0] = 0.0;
        leading = 0.0;
        TypographicBounds = CTLineGetTypographicBounds(v25, ascent, &descent, &leading);

        outlined consume of Text.Layout.Line.Line(v20, v21, 0);
        v19 = descent;
        v18 = ascent[0];
      }
      v34.origin.x = v24 + 0.0;
      v34.origin.y = v23 + 0.0 - v18;
      v34.size.height = v19 + v18;
      v32.origin.x = x;
      v32.origin.y = y;
      v32.size.width = width;
      v32.size.height = height;
      v34.size.width = TypographicBounds;
      v33 = CGRectUnion(v32, v34);
      x = v33.origin.x;
      y = v33.origin.y;
      width = v33.size.width;
      height = v33.size.height;
      outlined consume of Text.Layout.Line.Line(v20, v21, v22);
      v13 += 6;
      --v12;
    }
    while (v12);
    result = swift_bridgeObjectRelease();
    v5 = a2;
    v4 = a3;
  }
  else
  {
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a4 = a1;
  *((_QWORD *)a4 + 1) = v5;
  *((_QWORD *)a4 + 2) = v4;
  a4[3] = x;
  a4[4] = y;
  a4[5] = width;
  a4[6] = height;
  return result;
}

void specialized Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  CFIndex v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  const __CTLine *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  const __CFDictionary *v62;
  uint64_t v63;
  CFIndex v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  const __CTLine *v70;
  const __CTLine *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  const __CFDictionary *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(unsigned __int128 *, _QWORD);
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t (*v116)(void);
  uint64_t v117;
  uint64_t (*v118)(void);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  int v136;
  void *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unsigned __int128 v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD **v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  _OWORD *v172;
  unsigned __int128 v173;
  __int128 v174;
  id v175;
  uint64_t v176;
  id v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD **v183;
  _QWORD *v184;
  unint64_t v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  unint64_t v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _BYTE *v199;
  double v200;
  double v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  _BOOL4 v207;
  void *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  int64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int128 v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  double v239;
  double v240;
  unint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  CFIndex v250;
  void *v251;
  char *v252;
  uint64_t v253;
  unsigned __int128 v254;
  _OWORD v255[2];
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  __int128 v260;
  __int128 v261;
  unsigned __int128 v262;
  char v263[32];
  _QWORD v264[4];
  char v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned __int128 v269;
  _BYTE v270[28];

  v194 = a2;
  v3 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v196 = *(_QWORD *)(v3 - 8);
  v197 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v203 = (uint64_t)&v188 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v231 = v5;
  v211 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v222 = (char *)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v188 - v8;
  v10 = *a1;
  v11 = *((_BYTE *)a1 + 8);
  v12 = a1[2];
  v13 = (unint64_t *)swift_allocObject();
  v14 = MEMORY[0x24BEE4AF8];
  v227 = v13;
  v13[2] = MEMORY[0x24BEE4AF8];
  v204 = v13 + 2;
  v15 = swift_allocObject();
  v206 = v15;
  *(_QWORD *)(v15 + 16) = v14;
  v192 = (_QWORD *)(v15 + 16);
  v16 = swift_allocObject();
  v205 = v16;
  *(_QWORD *)(v16 + 16) = v14;
  v191 = (_QWORD *)(v16 + 16);
  v17 = swift_allocObject();
  v213 = v17;
  *(_QWORD *)(v17 + 16) = MEMORY[0x24BEE4B00];
  v210 = (uint64_t *)(v17 + 16);
  v264[3] = v10;
  v265 = v11;
  v267 = 0;
  v268 = 0;
  v266 = v12;
  v189 = v10;
  swift_bridgeObjectRetain();
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v254);
  v18 = *((_QWORD *)&v255[0] + 1);
  if (BYTE8(v255[0]) == 0xFF)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v189 + 16);
    swift_bridgeObjectRelease();
    flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(v19, v206, v227, v205);

    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return;
  }
  v190 = v264;
  v21 = (void *)*((_QWORD *)&v254 + 1);
  v20 = v254;
  v22 = *(_QWORD *)&v255[0];
  v23 = *((_QWORD *)&v255[1] + 1);
  v24 = *(_QWORD *)&v255[1];
  v25 = v256;
  v212 = xmmword_23527E860;
  v209 = MEMORY[0x24BEE4AD8] + 8;
  v230 = v9;
  while (1)
  {
    v246 = v20;
    v27 = v18 & 1;
    *(_QWORD *)&v269 = v21;
    *((_QWORD *)&v269 + 1) = v22;
    *((_QWORD *)&v235 + 1) = v22;
    v270[0] = v18 & 1;
    *(_QWORD *)&v270[8] = v24;
    *(_QWORD *)&v270[16] = v23;
    v232 = v23;
    *(_DWORD *)&v270[24] = v25;
    v28 = objc_msgSend(v194, sel_textLineFragments);
    v29 = type metadata accessor for NSTextLineFragment();
    v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v214 = v18;
    v236 = v24;
    v223 = v25;
    v193 = v29;
    if ((v30 & 0xC000000000000001) == 0)
      break;
    v31 = (id)MEMORY[0x23B7C6D9C](v246, v30);
LABEL_10:
    v32 = v31;
    v33 = v27 != 0;
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_glyphOrigin);
    v35 = v34;
    v37 = v36;

    v38 = (uint64_t)v230;
    RangeSet.init()();
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = 0;
    v40 = (_QWORD *)(v39 + 16);
    *(_QWORD *)(v39 + 24) = 0;
    v228 = v39;
    *(_BYTE *)(v39 + 32) = 1;
    v41 = v27;
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = v21;
    v44 = *((_QWORD *)&v235 + 1);
    v43 = v236;
    *(_QWORD *)(v42 + 24) = *((_QWORD *)&v235 + 1);
    *(_BYTE *)(v42 + 32) = v33;
    v45 = v232;
    *(_QWORD *)(v42 + 40) = v43;
    *(_QWORD *)(v42 + 48) = v45;
    *(_DWORD *)(v42 + 56) = v223;
    *(double *)(v42 + 64) = v35;
    *(double *)(v42 + 72) = v37;
    *(_QWORD *)(v42 + 80) = MEMORY[0x24BEE4AF8];
    v46 = swift_allocObject();
    v215 = v46;
    *(_BYTE *)(v46 + 16) = 0;
    v47 = (_BYTE *)(v46 + 16);
    v262 = v269;
    *(_OWORD *)v263 = *(_OWORD *)v270;
    *(_OWORD *)&v263[12] = *(_OWORD *)&v270[12];
    v48 = v190;
    *v190 = 0;
    v48[1] = 0;
    outlined copy of Text.Layout.Line.Line(v21, v44, v41);
    *(_QWORD *)&v235 = v21;
    v233 = v41;
    outlined copy of Text.Layout.Line.Line(v21, v44, v41);
    swift_beginAccess();
    v195 = v42 + 16;
    swift_beginAccess();
    v198 = v40;
    swift_beginAccess();
    v199 = v47;
    swift_beginAccess();
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v254);
    v49 = (void *)*((_QWORD *)&v254 + 1);
    if (*((_QWORD *)&v254 + 1))
    {
      v50 = v254;
      v51 = *((_QWORD *)&v255[0] + 1);
      v52 = *(_QWORD *)&v255[0];
      v53 = *(_QWORD *)&v255[1];
      v202 = v223;
      v200 = v37;
      v201 = v35;
      v54 = *((_QWORD *)&v255[1] + 1);
      v253 = v256;
      v247 = v42;
      do
      {
        v252 = (char *)v50;
        v249 = v51;
        v56 = one-time initialization token for _textAnimation;
        v251 = v49;
        v57 = v49;
        swift_retain();
        if (v56 != -1)
          swift_once();
        v58 = (const __CTLine *)v57;
        swift_retain();
        v250 = v52;
        v59 = (id)_CTLineGetRunAtIndex(v58, v52);
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v61 = (void *)MEMORY[0x23B7C5DAC](v60);
        swift_bridgeObjectRelease();
        v62 = _CTRunGetAttributeValueForKey((const __CTRun *)v59, v61);

        v63 = v42;
        if (v62)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v260 = 0u;
          v261 = 0u;
        }
        v64 = v250;
        outlined init with take of Any?((uint64_t)&v260, (uint64_t)&v254);
        v65 = (uint64_t)v252;
        v66 = v251;
        outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v252, v251);
        if (*((_QWORD *)&v255[0] + 1))
        {
          type metadata accessor for AnyTextEffect();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v248 = v260;
            outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v252, v251);
            goto LABEL_27;
          }
          v67 = (uint64_t)v252;
          v68 = v251;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v254);
          v67 = v65;
          v68 = v66;
        }
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v67, v68);
        v248 = 0;
LABEL_27:
        v69 = one-time initialization token for _textFilterAnimation;
        v70 = v58;
        swift_retain();
        if (v69 != -1)
          swift_once();
        v71 = v70;
        swift_retain();
        v72 = (id)_CTLineGetRunAtIndex(v71, v64);
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v74 = (void *)MEMORY[0x23B7C5DAC](v73);
        swift_bridgeObjectRelease();
        v75 = _CTRunGetAttributeValueForKey((const __CTRun *)v72, v74);

        if (v75)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v260 = 0u;
          v261 = 0u;
        }
        v76 = v246;
        outlined init with take of Any?((uint64_t)&v260, (uint64_t)&v254);
        v77 = (uint64_t)v252;
        v78 = v251;
        outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v252, v251);
        if (*((_QWORD *)&v255[0] + 1))
        {
          type metadata accessor for AnyTextFilterEffect();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v79 = v260;
            outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v252, v251);
            goto LABEL_38;
          }
          v80 = (uint64_t)v252;
          v81 = v251;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v254);
          v80 = v77;
          v81 = v78;
        }
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v80, v81);
        v79 = 0;
LABEL_38:
        v82 = v63;
        if (v248 | v79)
        {
          v238 = (char *)v79;
          v221 = v53;
          flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(v76, v206, v227, v205);
          v87 = v211;
          v88 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
          v89 = v222;
          v90 = v230;
          v91 = v231;
          v88(v222, v230, v231);
          v92 = RangeSet.isEmpty.getter();
          (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v91);
          if ((v92 & 1) == 0)
          {
            v254 = v269;
            v255[0] = *(_OWORD *)v270;
            *(_OWORD *)((char *)v255 + 12) = *(_OWORD *)&v270[12];
            v93 = (uint64_t)v222;
            v88(v222, v90, v231);
            outlined copy of Text.Layout.Line.Line((void *)v235, *((uint64_t *)&v235 + 1), v233);
            Text.Effect.RenderSegmentation.StaticRuns.init(line:glyphOrigin:runs:lineIndex:)((__int128 *)&v254, v93, v246, v203, v35, v37);
            swift_storeEnumTagMultiPayload();
            v94 = v204;
            swift_beginAccess();
            v95 = *v94;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v95 + 16) + 1, 1, v95);
            v97 = *(_QWORD *)(v95 + 16);
            v96 = *(_QWORD *)(v95 + 24);
            if (v97 >= v96 >> 1)
              v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1, v95);
            *(_QWORD *)(v95 + 16) = v97 + 1;
            outlined init with take of LocalizedStringKey.FormatArgument(v203, v95+ ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80))+ *(_QWORD *)(v196 + 72) * v97, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            *v204 = v95;
            swift_endAccess();
            *v199 = 1;
            v98 = v222;
            RangeSet.init()();
            (*(void (**)(char *, char *, uint64_t))(v211 + 40))(v90, v98, v231);
          }
          if (v248)
          {
            v99 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
            v100 = *(_QWORD *)(v248 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
            v101 = v210;
            swift_beginAccess();
            v102 = *v101;
            if (*(_QWORD *)(v102 + 16))
            {
              v103 = specialized __RawDictionaryStorage.find<A>(_:)(v100);
              if ((v104 & 1) != 0)
                v105 = *(_QWORD *)(*(_QWORD *)(v102 + 56) + 8 * v103);
              else
                v105 = 0;
            }
            else
            {
              v105 = 0;
            }
            swift_endAccess();
            v107 = (uint64_t)(v252 + 1);
            if (__OFADD__(v252, 1))
              goto LABEL_95;
            if (v107 < (uint64_t)v252)
              goto LABEL_96;
            v109 = *(_QWORD *)(v248 + v99);
            v108 = 0x8000000000000000;
            v106 = v252;
          }
          else
          {
            v105 = (uint64_t)(v252 + 1);
            if (__OFADD__(v252, 1))
              goto LABEL_97;
            if (v105 < (uint64_t)v252)
              goto LABEL_98;
            v106 = 0;
            v107 = 0;
            v108 = 0x4000000000000000;
            v109 = (uint64_t)v252;
          }
          v220 = v54;
          v225 = v108;
          v226 = v105;
          v229 = v106;
          v224 = v107;
          v237 = v109;
          if (v238)
          {
            v110 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
            v111 = *(_QWORD *)&v238[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
            v112 = v210;
            swift_beginAccess();
            v113 = *v112;
            if (*(_QWORD *)(v113 + 16)
              && (v114 = specialized __RawDictionaryStorage.find<A>(_:)(v111), (v115 & 1) != 0))
            {
              v234 = *(_QWORD *)(*(_QWORD *)(v113 + 56) + 8 * v114);
            }
            else
            {
              v234 = 0;
            }
            v116 = MEMORY[0x24BEE3598];
            swift_endAccess();
            v117 = *(_QWORD *)&v238[v110];
            type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Composition.Run>, (uint64_t)&type metadata for Text.Effect.Composition.Run, (uint64_t (*)(_QWORD, uint64_t))v116);
            v118 = v116;
            v119 = swift_allocObject();
            *(_OWORD *)(v119 + 16) = v212;
            v120 = v226;
            *(_QWORD *)(v119 + 32) = v237;
            *(_QWORD *)(v119 + 40) = v120;
            v121 = v224;
            *(_QWORD *)(v119 + 48) = v106;
            *(_QWORD *)(v119 + 56) = v121;
            *(_QWORD *)(v119 + 64) = 0;
            *(_QWORD *)(v119 + 72) = 0;
            v122 = v225;
            *(_QWORD *)(v119 + 80) = 0;
            *(_QWORD *)(v119 + 88) = v122;
            *(_QWORD *)(v119 + 104) = 0;
            *(_QWORD *)(v119 + 112) = 0;
            *(_QWORD *)(v119 + 96) = 0;
            v124 = *((_QWORD *)&v235 + 1);
            v123 = (char *)v235;
            v125 = v236;
            v126 = v232;
            outlined copy of (offset: Int, element: Text.Layout.Line)?(v246, (void *)v235, *((uint64_t *)&v235 + 1), v214);
            v242 = v124;
            v243 = v123;
            v105 = v234;
            v244 = v233;
            v245 = v125;
            v127 = v126;
            v240 = v201;
            v241 = v202;
            v239 = v200;
            v82 = v247;
          }
          else
          {
            v244 = 0;
            v245 = 0;
            v239 = 0.0;
            v240 = 0.0;
            v119 = 0;
            v117 = v109;
            v242 = v107;
            v243 = v106;
            v127 = 0;
            v241 = v108;
            v118 = MEMORY[0x24BEE3598];
          }
          type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Composition.Run>, (uint64_t)&type metadata for Text.Effect.Composition.Run, (uint64_t (*)(_QWORD, uint64_t))v118);
          v128 = swift_allocObject();
          *(_OWORD *)(v128 + 16) = v212;
          *(_QWORD *)(v128 + 32) = v117;
          *(_QWORD *)(v128 + 40) = v105;
          v129 = v242;
          *(_QWORD *)(v128 + 48) = v243;
          *(_QWORD *)(v128 + 56) = v129;
          v130 = v245;
          *(_QWORD *)(v128 + 64) = v244;
          *(_QWORD *)(v128 + 72) = v130;
          v131 = v241;
          *(_QWORD *)(v128 + 80) = v127;
          *(_QWORD *)(v128 + 88) = v131;
          v132 = v239;
          *(double *)(v128 + 96) = v240;
          *(double *)(v128 + 104) = v132;
          *(_QWORD *)(v128 + 112) = v119;
          v133 = *(_QWORD *)(v82 + 80);
          v134 = *(_QWORD *)(v133 + 16);
          v218 = v127;
          v219 = v117;
          v234 = v105;
          if (v134)
          {
            v207 = v233 != 0;
            v135 = *(void **)(v82 + 16);
            v216 = *(_QWORD *)(v247 + 24);
            v217 = *(unsigned __int8 *)(v247 + 32);
            v136 = *(_DWORD *)(v247 + 56);
            *(_QWORD *)&v260 = MEMORY[0x24BEE4B08];
            *(_QWORD *)&v254 = v135;
            v137 = v135;
            v208 = v135;
            *((_QWORD *)&v254 + 1) = v216;
            LOBYTE(v255[0]) = v217;
            *(_OWORD *)((char *)v255 + 8) = *(_OWORD *)(v247 + 40);
            DWORD2(v255[1]) = v136;
            v256 = *(_OWORD *)(v247 + 64);
            v257 = v133;
            v139 = *((_QWORD *)&v235 + 1);
            v138 = v235;
            outlined copy of (offset: Int, element: Text.Layout.Line)?(v246, (void *)v235, *((uint64_t *)&v235 + 1), v214);
            outlined copy of Text.Effect.Composition.Operation(v117, v105, v243, v242, v244, v245, v127, v241);
            outlined copy of Text.Layout.Line.Line(v137, v216, v217);
            swift_bridgeObjectRetain();
            Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v260);
            v140 = v260;
            *(_QWORD *)&v260 = MEMORY[0x24BEE4B08];
            v254 = __PAIR128__(v139, v138);
            LOBYTE(v255[0]) = v207;
            *((_QWORD *)&v255[0] + 1) = v236;
            *(_QWORD *)&v255[1] = v232;
            v141 = v223;
            DWORD2(v255[1]) = v223;
            *(double *)&v256 = v35;
            *((double *)&v256 + 1) = v37;
            v257 = v128;
            Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v260);
            v142 = specialized _NativeSet.intersection(_:)(v260, v140);
            v144 = v225;
            v143 = v226;
            v145 = v224;
            outlined copy of Text.Effect.Composition.Operation(v237, v226, v229, v224, 0, 0, 0, v225);
            swift_bridgeObjectRelease();
            v146 = *(_QWORD *)(v142 + 16);
            v147 = v232;
            swift_release();
            outlined consume of Text.Layout.Line.Line(v208, v216, v217);
            v148 = v246;
            swift_bridgeObjectRelease();
            v149 = v141;
            v150 = v233;
            if (v146)
            {
              v151 = v235;
              v254 = v235;
              LOBYTE(v255[0]) = v233 != 0;
              *((_QWORD *)&v255[0] + 1) = v236;
              *(_QWORD *)&v255[1] = v147;
              DWORD2(v255[1]) = v141;
              *(double *)&v256 = v35;
              *((double *)&v256 + 1) = v37;
              v257 = v128;
              swift_beginAccess();
              Text.Effect.Composition.append(_:)((uint64_t)&v254);
              swift_endAccess();
              outlined consume of Text.Effect.Composition.Operation(v237, v143, v229, v145, 0, 0, 0, v144);
              outlined consume of Text.Effect.Composition.Operation(v219, v234, v243, v242, v244, v245, v218, v241);
              v152 = (uint64_t)v252;
              outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v252, v251);

              outlined consume of Text.Layout.Line.Line((void *)v151, *((uint64_t *)&v151 + 1), v233);
              swift_bridgeObjectRelease();
              v153 = v228;
              if ((*(_BYTE *)(v228 + 32) & 1) != 0)
              {
                v154 = v152 + 1;
                *(_QWORD *)(v228 + 16) = v152;
              }
              else
              {
                v154 = v152 + 1;
                if (v152 + 1 < *v198)
                  goto LABEL_100;
              }
              *(_QWORD *)(v153 + 24) = v154;
              *(_BYTE *)(v153 + 32) = 0;
LABEL_14:
              v42 = v247;
              v38 = (uint64_t)v230;
              goto LABEL_15;
            }
          }
          else
          {
            v148 = v246;
            v155 = v105;
            v156 = v223;
            outlined copy of (offset: Int, element: Text.Layout.Line)?(v246, (void *)v235, *((uint64_t *)&v235 + 1), v214);
            outlined copy of Text.Effect.Composition.Operation(v117, v155, v243, v242, v244, v245, v127, v241);
            v144 = v225;
            v143 = v226;
            v145 = v224;
            outlined copy of Text.Effect.Composition.Operation(v237, v226, v229, v224, 0, 0, 0, v225);
            v149 = v156;
            v150 = v233;
          }
          v217 = v150 != 0;
          v157 = v247;
          v158 = v149;
          flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v247, v228, v213, (uint64_t)v227, v148, v215, (uint64_t)&v269, v35, v37);
          outlined consume of Text.Effect.Composition.Operation(v237, v143, v229, v145, 0, 0, 0, v144);
          outlined consume of Text.Effect.Composition.Operation(v219, v234, v243, v242, v244, v245, v218, v241);
          v159 = (uint64_t)v252;
          outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v252, v251);

          v160 = *(void **)(v157 + 16);
          v161 = *(_QWORD *)(v157 + 24);
          v162 = *(_BYTE *)(v157 + 32);
          v163 = *((_QWORD *)&v235 + 1);
          *(_QWORD *)(v157 + 16) = v235;
          *(_QWORD *)(v157 + 24) = v163;
          *(_BYTE *)(v157 + 32) = v217;
          v164 = v232;
          *(_QWORD *)(v157 + 40) = v236;
          *(_QWORD *)(v157 + 48) = v164;
          *(_DWORD *)(v157 + 56) = v158;
          *(double *)(v157 + 64) = v35;
          *(double *)(v157 + 72) = v37;
          *(_QWORD *)(v157 + 80) = v128;
          outlined consume of Text.Layout.Line.Line(v160, v161, v162);
          swift_bridgeObjectRelease();
          v165 = v228;
          if ((*(_BYTE *)(v228 + 32) & 1) != 0)
          {
            v55 = v159 + 1;
            *(_QWORD *)(v228 + 16) = v159;
          }
          else
          {
            v55 = v159 + 1;
            if (v159 + 1 < *v198)
              goto LABEL_99;
          }
          *(_QWORD *)(v165 + 24) = v55;
          *(_BYTE *)(v165 + 32) = 0;
          goto LABEL_14;
        }
        flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v63, v228, v213, (uint64_t)v227, v76, v215, (uint64_t)&v269, v35, v37);
        v83 = (uint64_t)v230;
        swift_beginAccess();
        v84 = (uint64_t)v252;
        if (__OFADD__(v252, 1))
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        if ((uint64_t)(v252 + 1) < (uint64_t)v252)
          goto LABEL_94;
        v258 = (uint64_t)v252;
        v259 = v252 + 1;
        v85 = (void (*)(unsigned __int128 *, _QWORD))RangeSet._ranges.modify();
        type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
        RangeSet.Ranges._insert(contentsOf:)();
        v85(&v254, 0);
        swift_endAccess();
        v86 = v84;
        v38 = v83;
        v42 = v247;
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v86, v251);
LABEL_15:
        specialized EnumeratedSequence.Iterator.next()((uint64_t)&v254);
        v49 = (void *)*((_QWORD *)&v254 + 1);
        v50 = v254;
        v51 = *((_QWORD *)&v255[0] + 1);
        v52 = *(_QWORD *)&v255[0];
        v54 = *((_QWORD *)&v255[1] + 1);
        v53 = *(_QWORD *)&v255[1];
        v253 = v256;
      }
      while (*((_QWORD *)&v254 + 1));
    }
    outlined consume of Text.Layout.Line.Line((void *)v262, *((uint64_t *)&v262 + 1), v263[0]);
    v166 = v246;
    v167 = v215;
    flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v42, v228, v213, (uint64_t)v227, v246, v215, (uint64_t)&v269, v35, v37);
    if ((*(_BYTE *)(v167 + 16) & 1) != 0)
    {
      specialized flushStaticRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v206, v227, v205, v166, v38, (__int128 *)&v269, v167, v35, v37);
      v26 = v214;
    }
    else
    {
      v168 = (_QWORD **)v192;
      swift_beginAccess();
      v169 = *v168;
      v26 = v214;
      outlined copy of (offset: Int, element: Text.Layout.Line)?(v166, (void *)v235, *((uint64_t *)&v235 + 1), v214);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v169[2] + 1, 1, v169);
      v171 = v169[2];
      v170 = v169[3];
      if (v171 >= v170 >> 1)
        v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v170 > 1), v171 + 1, 1, v169);
      v169[2] = v171 + 1;
      v172 = &v169[6 * v171];
      v173 = v269;
      v174 = *(_OWORD *)v270;
      *(_OWORD *)((char *)v172 + 60) = *(_OWORD *)&v270[12];
      v172[2] = v173;
      v172[3] = v174;
      *v192 = v169;
      swift_endAccess();
      v175 = objc_msgSend(v194, sel_textLineFragments);
      v176 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v176 & 0xC000000000000001) != 0)
      {
        v177 = (id)MEMORY[0x23B7C6D9C](v246, v176);
      }
      else
      {
        if ((v246 & 0x8000000000000000) != 0)
          goto LABEL_103;
        if (v246 >= *(_QWORD *)((v176 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_104;
        v177 = *(id *)(v176 + 8 * v246 + 32);
      }
      v178 = v177;
      swift_bridgeObjectRelease();
      objc_msgSend(v178, sel_glyphOrigin);
      v180 = v179;
      v182 = v181;

      v183 = (_QWORD **)v191;
      swift_beginAccess();
      v184 = *v183;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v184 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v184[2] + 1, 1, v184);
      v186 = v184[2];
      v185 = v184[3];
      if (v186 >= v185 >> 1)
        v184 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v185 > 1), v186 + 1, 1, v184);
      v184[2] = v186 + 1;
      v187 = &v184[2 * v186];
      v187[4] = v180;
      v187[5] = v182;
      *v191 = v184;
      swift_endAccess();
      v166 = v246;
    }
    outlined consume of (offset: Int, element: Text.Layout.Line)?(v166, (void *)v235, *((uint64_t *)&v235 + 1), v26);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v38, v231);
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v254);
    v21 = (void *)*((_QWORD *)&v254 + 1);
    v20 = v254;
    v18 = *((_QWORD *)&v255[0] + 1);
    v22 = *(_QWORD *)&v255[0];
    v23 = *((_QWORD *)&v255[1] + 1);
    v24 = *(_QWORD *)&v255[1];
    v25 = v256;
    if (BYTE8(v255[0]) == 0xFF)
      goto LABEL_2;
  }
  if ((v246 & 0x8000000000000000) != 0)
    goto LABEL_101;
  if (v246 < *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v31 = *(id *)(v30 + 8 * v246 + 32);
    goto LABEL_10;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
}

uint64_t sub_234BCDC58()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSTextLineFragment()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSTextLineFragment;
  if (!lazy cache variable for type metadata for NSTextLineFragment)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  }
  return result;
}

uint64_t sub_234BCDCB8()
{
  return swift_deallocObject();
}

uint64_t sub_234BCDCC8()
{
  uint64_t v0;

  outlined consume of Text.Layout.Line.Line(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234BCDCF8()
{
  return swift_deallocObject();
}

id outlined copy of (offset: Int, element: Text.Layout.Line)?(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  id result;

  if (a4 != -1)
    return outlined copy of Text.Layout.Line.Line(a2, a3, a4 & 1);
  return result;
}

void outlined consume of (offset: Int, element: Text.Layout.Line)?(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    outlined consume of Text.Layout.Line.Line(a2, a3, a4 & 1);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of (offset: Int, element: Text.Layout.Run)?(uint64_t a1, void *a2)
{
  uint64_t result;

  if (a2)
  {

    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of RangeSet<Int><>.IndexSequence(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, unint64_t))
{
  uint64_t v4;

  type metadata accessor for RangeSet<Int><>.IndexSequence(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.RenderSegmentation.StaticRuns.Iterator(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = (uint64_t)a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Layout.Line.Line(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *((_QWORD *)a1 + 1) = v8;
    a1[16] = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    v10 = *(int *)(a3 + 20);
    v11 = &a1[v10];
    v12 = (uint64_t)a2 + v10;
    *(_OWORD *)&a1[v10] = *(_OWORD *)((char *)a2 + v10);
    type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    v14 = *(int *)(v13 + 48);
    v15 = &v11[v14];
    v16 = v12 + v14;
    type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t destroy for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v6 = v4 + *(int *)(v5 + 48);
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (_OWORD *)(a2 + v9);
  *(_OWORD *)(a1 + v9) = *v11;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v13 = *(int *)(v12 + 48);
  v14 = v10 + v13;
  v15 = (char *)v11 + v13;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of Text.Layout.Line.Line(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v16 = *(int *)(v15 + 48);
  v17 = (char *)v13 + v16;
  v18 = (char *)v14 + v16;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.RenderSegmentation.StaticRuns.Iterator(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *(_OWORD *)((char *)a1 + v5) = *(_OWORD *)((char *)a2 + v5);
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v9 = *(int *)(v8 + 48);
  v10 = &v6[v9];
  v11 = &v7[v9];
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = (_OWORD *)(a2 + v10);
  *(_OWORD *)(a1 + v10) = *v12;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v14 = *(int *)(v13 + 48);
  v15 = v11 + v14;
  v16 = (char *)v12 + v14;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BCE2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BCE354(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  else
  {
    type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for Text.Effect.RenderSegmentation.StaticRuns.Iterator()
{
  unint64_t v0;

  type metadata accessor for RangeSet<Int><>.IndexSequence(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.RenderSegmentation.Segment(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v7;
  uint64_t v8;
  char v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char *v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v23[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      v24 = a2[3];
      v25 = (uint64_t)a2[4];
      v26 = *((_BYTE *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v24, v25, v26);
      *((_QWORD *)a1 + 3) = v24;
      *((_QWORD *)a1 + 4) = v25;
      a1[40] = v26;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *((_QWORD *)a1 + 11) = a2[11];
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *a2;
      v8 = (uint64_t)a2[1];
      v9 = *((_BYTE *)a2 + 16);
      outlined copy of Text.Layout.Line.Line(*a2, v8, v9);
      *(_QWORD *)a1 = v7;
      *((_QWORD *)a1 + 1) = v8;
      a1[16] = v9;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      v10 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
      v11 = v10[6];
      v12 = &a1[v11];
      v13 = (uint64_t)a2 + v11;
      type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      *(_QWORD *)&a1[v10[7]] = *(char **)((char *)a2 + v10[7]);
      v15 = v10[8];
      v16 = &a1[v15];
      v17 = (_OWORD *)((char *)a2 + v15);
      v18 = v17[1];
      *(_OWORD *)v16 = *v17;
      *((_OWORD *)v16 + 1) = v18;
      v19 = v10[9];
      v20 = &a1[v19];
      v21 = (_OWORD *)((char *)a2 + v19);
      v22 = v21[1];
      *(_OWORD *)v20 = *v21;
      *((_OWORD *)v20 + 1) = v22;
    }
    else
    {
      v27 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v27;
      *((_QWORD *)a1 + 2) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Text.Effect.RenderSegmentation.Segment(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    outlined consume of Text.Layout.Line.Line(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    return swift_bridgeObjectRelease();
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v3 = a1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v21 = (void *)a2[3];
    v22 = a2[4];
    v23 = *((_BYTE *)a2 + 40);
    outlined copy of Text.Layout.Line.Line(v21, v22, v23);
    *(_QWORD *)(a1 + 24) = v21;
    *(_QWORD *)(a1 + 32) = v22;
    *(_BYTE *)(a1 + 40) = v23;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_QWORD *)(a1 + 88) = a2[11];
LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v24 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *((_BYTE *)a2 + 16);
  outlined copy of Text.Layout.Line.Line((void *)*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  v9 = v8[6];
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_QWORD *)(a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
  v13 = v8[8];
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v8[9];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of TypesettingConfiguration(a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      v21 = (void *)a2[3];
      v22 = a2[4];
      v23 = *((_BYTE *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v21, v22, v23);
      *(_QWORD *)(a1 + 24) = v21;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 40) = v23;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_QWORD *)(a1 + 88) = a2[11];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = *a2;
        v6 = a2[1];
        v7 = *((_BYTE *)a2 + 16);
        outlined copy of Text.Layout.Line.Line((void *)*a2, v6, v7);
        *(_QWORD *)a1 = v5;
        *(_QWORD *)(a1 + 8) = v6;
        *(_BYTE *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
        v9 = v8[6];
        v10 = a1 + v9;
        v11 = (uint64_t)a2 + v9;
        type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        *(_QWORD *)(a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
        v13 = v8[8];
        v14 = (_OWORD *)(a1 + v13);
        v15 = (_OWORD *)((char *)a2 + v13);
        v16 = v15[1];
        *v14 = *v15;
        v14[1] = v16;
        v17 = v8[9];
        v18 = (_OWORD *)(a1 + v17);
        v19 = (_OWORD *)((char *)a2 + v17);
        v20 = v19[1];
        *v18 = *v19;
        v18[1] = v20;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = a2[2];
      v24 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 24) = v24;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.RenderSegmentation.Segment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
    a1[3] = a2[3];
    v7 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (_OWORD *)((char *)a1 + v12);
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = v7[9];
    v17 = (_OWORD *)((char *)a1 + v16);
    v18 = (_OWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for Text.Effect.RenderSegmentation.Segment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
      a1[3] = a2[3];
      v7 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
      v12 = v7[8];
      v13 = (_OWORD *)((char *)a1 + v12);
      v14 = (_OWORD *)((char *)a2 + v12);
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      v16 = v7[9];
      v17 = (_OWORD *)((char *)a1 + v16);
      v18 = (_OWORD *)((char *)a2 + v16);
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Text.Effect.RenderSegmentation.Segment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

BOOL static TimelineScheduleMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TimelineScheduleMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TimelineScheduleMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t TimelineSchedule.entries(within:mode:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v17 = a1;
  v7 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v7 - 8);
  v19 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for DropWhileSequence();
  MEMORY[0x24BDAC7A8](v11);
  v12 = *a2;
  v13 = v17;
  DateInterval.start.getter();
  v22 = v12;
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a4 + 24))(v9, &v22, v16, a4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
  v21 = v13;
  Sequence.drop(while:)();
  v20 = v13;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE2D08], v11);
  return Sequence.prefix(while:)();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v29 = a1;
  v26 = a3;
  type metadata accessor for Range<Date>();
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v28 = type metadata accessor for LazySequence();
  MEMORY[0x24BDAC7A8](v28);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - v13;
  v15 = type metadata accessor for LazyDropWhileSequence();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v25 = (char *)&v25 - v17;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE3220], v15, v16);
  v30 = type metadata accessor for LazyPrefixWhileSequence();
  v18 = MEMORY[0x24BDAC7A8](v30);
  v27 = (char *)&v25 - v19;
  v33 = *a2;
  v20 = v29;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a4 + 24))(v29, &v33, v26, a4, v18);
  Sequence.enumerated()();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  outlined init with copy of Range<Date>(v20, (uint64_t)v9);
  v21 = (*(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  v22 = swift_allocObject();
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, v22 + v21, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE25B0], v28);
  LazySequenceProtocol.drop(while:)();
  swift_release();
  outlined init with copy of Range<Date>(v20, (uint64_t)v9);
  v23 = swift_allocObject();
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, v23 + v21, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE3228], v15);
  LazySequenceProtocol.prefix(while:)();
  swift_release();
  type metadata accessor for Date();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE3590], v30);
  return AnySequence.init<A>(_:)();
}

uint64_t partial apply for closure #1 in TimelineSchedule.entries(within:mode:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in TimelineSchedule.entries(within:mode:)(a1, *(_QWORD *)(v1 + 16), (void (*)(double))MEMORY[0x24BDCB848]) & 1;
}

uint64_t closure #1 in TimelineSchedule.entries(within:mode:)(uint64_t a1, uint64_t a2, void (*a3)(double))
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(v6);
  LOBYTE(a3) = static Date.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return a3 & 1;
}

uint64_t partial apply for closure #2 in TimelineSchedule.entries(within:mode:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in TimelineSchedule.entries(within:mode:)(a1, *(_QWORD *)(v1 + 16), (void (*)(double))MEMORY[0x24BDCB830]) & 1;
}

uint64_t TimelineSchedule.nextEntry(after:mode:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v21 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v20 - v11;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v20 - v15;
  v23 = *a2;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a4 + 24))(a1, &v23, a3, a4, v14);
  v22 = a1;
  swift_getAssociatedConformanceWitness();
  Sequence.first(where:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v21, v16, v17);
  static Date.distantFuture.getter();
  return outlined destroy of Date?((uint64_t)v16);
}

uint64_t partial apply for closure #1 in TimelineSchedule.nextEntry(after:mode:)()
{
  return static Date.> infix(_:_:)() & 1;
}

void type metadata accessor for Range<Date>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>);
  }
}

uint64_t outlined init with copy of Range<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in TimelineSchedule.entries(within:mode:)()
{
  type metadata accessor for Range<Date>();
  return static Date.< infix(_:_:)();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  type metadata accessor for Range<Date>();
  v2 = v1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v4 = v0 + ((v3 + 16) & ~v3);
  v5 = type metadata accessor for Date();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v4 + *(int *)(v2 + 36), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TimelineSchedule.entries(within:mode:)()
{
  type metadata accessor for Range<Date>();
  return static Date.< infix(_:_:)();
}

uint64_t PeriodicTimelineSchedule.init(from:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  result = type metadata accessor for PeriodicTimelineSchedule(0);
  *(double *)(a2 + *(int *)(result + 20)) = a3;
  return result;
}

uint64_t type metadata accessor for PeriodicTimelineSchedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for PeriodicTimelineSchedule);
}

uint64_t ExplicitTimelineSchedule.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PeriodicTimelineSchedule.Entries.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v1, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
  type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  return static Date.+= infix(_:_:)();
}

uint64_t type metadata accessor for PeriodicTimelineSchedule.Entries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for PeriodicTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance PeriodicTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of LocalizedStringKey.FormatArgument(v1, a1, type metadata accessor for PeriodicTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PeriodicTimelineSchedule.Entries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for PeriodicTimelineSchedule.Entries);
  return v1;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance PeriodicTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v1, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
  return static Date.+= infix(_:_:)();
}

uint64_t PeriodicTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  long double v4;
  long double v5;
  uint64_t result;

  Date.timeIntervalSince(_:)();
  v4 = v3;
  v5 = *(double *)(v1 + *(int *)(type metadata accessor for PeriodicTimelineSchedule(0) + 20));
  fmod(v4, v5);
  static Date.+ infix(_:_:)();
  result = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  *(long double *)(a1 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance PeriodicTimelineSchedule@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  long double v5;
  long double v6;
  uint64_t result;

  Date.timeIntervalSince(_:)();
  v5 = *(double *)(v2 + *(int *)(a1 + 20));
  fmod(v6, v5);
  static Date.+ infix(_:_:)();
  result = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  *(long double *)(a2 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t one-time initialization function for zeroSecondComponents()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for TimeZone?, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - v1;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Calendar?, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = type metadata accessor for DateComponents();
  __swift_allocate_value_buffer(v6, static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
  __swift_project_value_buffer(v6, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
  v7 = type metadata accessor for Calendar();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 1, 1, v8);
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t EveryMinuteTimelineSchedule.Entries.init(startDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;

  v63 = a1;
  v3 = type metadata accessor for Date();
  v4 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for Calendar.SearchDirection();
  v54 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Calendar.MatchingPolicy();
  v59 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, v4);
  MEMORY[0x24BDAC7A8](v14);
  v53 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v46 - v17;
  v19 = type metadata accessor for Calendar();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v62 = a2;
  v60 = v5;
  v61 = v24;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))v24)(a2, 1, 1, v3, v21);
  static Calendar.current.getter();
  if (one-time initialization token for zeroSecondComponents != -1)
    swift_once();
  v25 = type metadata accessor for DateComponents();
  __swift_project_value_buffer(v25, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
  v26 = Calendar.date(_:matchesComponents:)();
  v27 = *(void (**)(char *, uint64_t))(v20 + 8);
  v27(v23, v19);
  if ((v26 & 1) != 0)
  {
    v28 = v62;
    outlined destroy of Date?(v62);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v28, v63, v3);
    return v61(v28, 0, 1, v3);
  }
  else
  {
    v51 = v18;
    static Calendar.current.getter();
    v30 = *MEMORY[0x24BDCF020];
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 104);
    v48 = v19;
    v49 = v27;
    v32 = v52;
    v31(v52, v30, v12);
    v33 = *MEMORY[0x24BDCF070];
    v47 = v12;
    v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 104))(v11, v33, v58);
    v35 = *MEMORY[0x24BDCF0B0];
    v50 = v3;
    v37 = v55;
    v36 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 104))(v9, v35, v56);
    v38 = (uint64_t)v53;
    v39 = v63;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v36);
    v40 = *(void (**)(char *, uint64_t))(v34 + 8);
    v41 = v50;
    v40(v11, v58);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v47);
    v49(v23, v48);
    v42 = v60;
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
    v44 = v57;
    v43(v57, v39, v41);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v38, 1, v41) == 1)
    {
      v45 = (uint64_t)v51;
      v43(v51, (uint64_t)v44, v41);
      outlined destroy of Date?(v38);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
      v45 = (uint64_t)v51;
      v43(v51, v38, v41);
    }
    v61(v45, 0, 1, v41);
    return outlined assign with take of Date?(v45, v62);
  }
}

uint64_t EveryMinuteTimelineSchedule.Entries.next()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v40;
  char *v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;

  v2 = v1;
  v62 = a1;
  v3 = type metadata accessor for Calendar.SearchDirection();
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v57 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar.MatchingPolicy();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v56 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Calendar();
  v54 = *(_QWORD *)(v12 - 8);
  v55 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v61 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v14);
  v53 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v44 - v17;
  v19 = type metadata accessor for Date();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v52 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v44 - v23;
  v60 = v2;
  outlined init with copy of Date?(v2, (uint64_t)v18);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v25((uint64_t)v18, 1, v19) == 1)
  {
    outlined destroy of Date?((uint64_t)v18);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v62, 1, 1, v19);
  }
  else
  {
    v47 = v25;
    v49 = v20;
    v50 = v5;
    v48 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v48(v24, v18, v19);
    static Calendar.current.getter();
    if (one-time initialization token for zeroSecondComponents != -1)
      swift_once();
    v27 = type metadata accessor for DateComponents();
    v44 = __swift_project_value_buffer(v27, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
    v28 = *MEMORY[0x24BDCF020];
    v45 = v9;
    v46 = v10;
    v29 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v56, v28, v9);
    v30 = v57;
    v31 = v8;
    v32 = v6;
    (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v8, *MEMORY[0x24BDCF0B0], v6);
    v34 = v58;
    v33 = v59;
    v35 = v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v50, *MEMORY[0x24BDCF068], v59);
    v36 = (uint64_t)v53;
    v51 = v24;
    v37 = v61;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v33);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v45);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v55);
    if (v47(v36, 1, v19) == 1)
    {
      outlined destroy of Date?(v36);
      v38 = v60;
      outlined destroy of Date?(v60);
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
      v39(v38, 1, 1, v19);
      v40 = v62;
      v48(v62, v51, v19);
    }
    else
    {
      v41 = v52;
      v42 = (void (*)(uint64_t, char *, uint64_t))v48;
      v48(v52, (char *)v36, v19);
      v43 = v60;
      outlined destroy of Date?(v60);
      v42(v43, v41, v19);
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
      v39(v43, 0, 1, v19);
      v40 = v62;
      v42((uint64_t)v62, v51, v19);
    }
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v39)(v40, 0, 1, v19);
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EveryMinuteTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of LocalizedStringKey.FormatArgument(v1, a1, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EveryMinuteTimelineSchedule.Entries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
  return v1;
}

uint64_t EveryMinuteTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Date();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))(v7, a1, v5);
  return EveryMinuteTimelineSchedule.Entries.init(startDate:)((uint64_t)v7, a2);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance EveryMinuteTimelineSchedule@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Date();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))(v7, a1, v5);
  return EveryMinuteTimelineSchedule.Entries.init(startDate:)((uint64_t)v7, a2);
}

uint64_t ExplicitTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

unint64_t lazy protocol witness table accessor for type TimelineScheduleMode and conformance TimelineScheduleMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineScheduleMode and conformance TimelineScheduleMode;
  if (!lazy protocol witness table cache variable for type TimelineScheduleMode and conformance TimelineScheduleMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimelineScheduleMode, &type metadata for TimelineScheduleMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineScheduleMode and conformance TimelineScheduleMode);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PeriodicTimelineSchedule.Entries()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, type metadata accessor for PeriodicTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for PeriodicTimelineSchedule.Entries);
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in PeriodicTimelineSchedule()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, type metadata accessor for PeriodicTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for PeriodicTimelineSchedule.Entries);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in EveryMinuteTimelineSchedule.Entries()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule.Entries and conformance EveryMinuteTimelineSchedule.Entries, type metadata accessor for EveryMinuteTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for EveryMinuteTimelineSchedule.Entries);
}

uint64_t type metadata accessor for EveryMinuteTimelineSchedule.Entries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for EveryMinuteTimelineSchedule.Entries);
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in EveryMinuteTimelineSchedule()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule.Entries and conformance EveryMinuteTimelineSchedule.Entries, type metadata accessor for EveryMinuteTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for EveryMinuteTimelineSchedule.Entries);
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ExplicitTimelineSchedule<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t dispatch thunk of TimelineSchedule.entries(from:mode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t storeEnumTagSinglePayload for TimelineScheduleMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234BD0714 + 4 * byte_23528ACF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234BD0748 + 4 * byte_23528ACF0[v4]))();
}

uint64_t sub_234BD0748(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234BD0750(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234BD0758);
  return result;
}

uint64_t sub_234BD0764(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234BD076CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234BD0770(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234BD0778(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimelineScheduleMode()
{
  return &type metadata for TimelineScheduleMode;
}

uint64_t getEnumTagSinglePayload for PeriodicTimelineSchedule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PeriodicTimelineSchedule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PeriodicTimelineSchedule(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for PeriodicTimelineSchedule(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PeriodicTimelineSchedule.Entries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PeriodicTimelineSchedule.Entries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PeriodicTimelineSchedule()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for EveryMinuteTimelineSchedule()
{
  return &type metadata for EveryMinuteTimelineSchedule;
}

uint64_t *initializeBufferWithCopyOfBuffer for EveryMinuteTimelineSchedule.Entries(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for EveryMinuteTimelineSchedule.Entries(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for EveryMinuteTimelineSchedule.Entries(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for EveryMinuteTimelineSchedule.Entries(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for EveryMinuteTimelineSchedule.Entries(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for EveryMinuteTimelineSchedule.Entries(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for EveryMinuteTimelineSchedule.Entries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BD0FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for EveryMinuteTimelineSchedule.Entries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BD1020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for EveryMinuteTimelineSchedule.Entries()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t getEnumTagSinglePayload for ExplicitTimelineSchedule(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234BD1198 + 4 * byte_23528ACFA[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ExplicitTimelineSchedule(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ExplicitTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExplicitTimelineSchedule);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO18RenderSegmentationV7SegmentO_So7CGPointVtG_AJ0J11InteractionVAC33_18FF04020434AC91D85E42E330E464BELLVs5NeverOTg503_s7d3UI4f5VAAE6g3O18hi2V7j4OSo7k7VAE0G11ly12Element33_18mnopqr21BELLVIgnyr_AI_AKtAPs5T261OIegnrzr_TR03_s7a3UI4c5VAAE6d3O18gi175V12displacement15segmentCategory5range4time7contextAG21SelectionDisplacementVSo020_NSTextLayoutManagereI0V_SnyAC0P0V14CharacterIndexVGAA4TimeVAE11BaseContextVtFAG7Element33_18klmnop9BELLVAE18ef9V0E0O_So7H8VtXEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
  v3 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v20 = v1;
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v22;
    type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint)();
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    do
    {
      v13 = (uint64_t *)(v11 + *(int *)(v9 + 48));
      v14 = *v13;
      v15 = v13[1];
      outlined init with copy of TypesettingLanguage(v11, (uint64_t)v5, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v16 = &v5[*(int *)(v21 + 20)];
      *(_QWORD *)v16 = v14;
      *((_QWORD *)v16 + 1) = v15;
      v22 = v7;
      v18 = *(_QWORD *)(v7 + 16);
      v17 = *(_QWORD *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v7 = v22;
      }
      *(_QWORD *)(v7 + 16) = v18 + 1;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v5, v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v18, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.SegmentInteraction.Element);
      v11 += v12;
      --v6;
    }
    while (v6);
  }
  return v7;
}

char *NSTextRange.textRange.getter()
{
  void *v0;
  void *v1;
  char *result;
  uint64_t v3;
  BOOL v4;
  char *v5;
  char *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  objc_opt_self();
  v1 = (void *)swift_dynamicCastObjCClass();
  if (!v1)
  {
    v7 = objc_msgSend(objc_msgSend(v0, sel_location), sel_compare_, objc_msgSend(v0, sel_endLocation));
    swift_unknownObjectRelease();
    v8 = swift_unknownObjectRelease();
    if (!v7)
    {
      v9 = objc_msgSend(v0, sel_location);
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (v10)
      {
        v6 = (char *)objc_msgSend(v10, sel_range);
        v12 = v11;
        result = (char *)swift_unknownObjectRelease();
        if (__OFADD__(v6, v12))
          goto LABEL_15;
        if ((uint64_t)&v6[v12] >= (uint64_t)v6)
          return v6;
        __break(1u);
      }
      v8 = swift_unknownObjectRelease();
    }
    MEMORY[0x24BDAC7A8](v8);
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, implicit closure #1 in NSTextRange.textRange.getterpartial apply);
    return 0;
  }
  result = (char *)objc_msgSend(v1, sel_range);
  v4 = __OFADD__(result, v3);
  v5 = &result[v3];
  if (v4)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    if ((uint64_t)v5 >= (uint64_t)result)
      return v6;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

double Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, double, double);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v32 = a7;
  v33 = a8;
  v31 = a6;
  v15 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a4;
  if ((a1 & 1) != 0)
  {
    v20 = a2;
    v22 = a2;
    v21 = a3;
    if ((specialized Text.Effect.SegmentInteraction.matches(range:)(v22, a3, a9) & 1) == 0)
    {
      if ((a1 & 2) != 0)
      {
        a1 = 2;
        goto LABEL_10;
      }
      if ((a1 & 4) != 0)
        a1 = 4;
      if ((a1 & 1) == 0)
        goto LABEL_10;
    }
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = a3;
    v24 = (uint64_t (*)(char *, double, double))partial apply for closure #2 in Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:);
    goto LABEL_12;
  }
  v20 = a2;
  v21 = a3;
LABEL_10:
  v25 = *(_QWORD *)(a9 + 16);
  if (!v25)
    return 0.0;
  v26 = *(unsigned __int8 *)(v16 + 80);
  outlined init with copy of TypesettingLanguage(a9 + ((v26 + 32) & ~v26) + *(_QWORD *)(v16 + 72) * (v25 - 1), (uint64_t)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  v23 = swift_allocObject();
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v18, v23 + ((v26 + 16) & ~v26), type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  v24 = (uint64_t (*)(char *, double, double))partial apply for closure #1 in Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:);
LABEL_12:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Sequence.filter(_:)(a9, a10, v24, v23);
  v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO18RenderSegmentationV7SegmentO_So7CGPointVtG_AJ0J11InteractionVAC33_18FF04020434AC91D85E42E330E464BELLVs5NeverOTg503_s7d3UI4f5VAAE6g3O18hi2V7j4OSo7k7VAE0G11ly12Element33_18mnopqr21BELLVIgnyr_AI_AKtAPs5T261OIegnrzr_TR03_s7a3UI4c5VAAE6d3O18gi175V12displacement15segmentCategory5range4time7contextAG21SelectionDisplacementVSo020_NSTextLayoutManagereI0V_SnyAC0P0V14CharacterIndexVGAA4TimeVAE11BaseContextVtFAG7Element33_18klmnop9BELLVAE18ef9V0E0O_So7H8VtXEfU1_Tf3nnnpf_nTf1cn_n(v27);
  swift_bridgeObjectRelease();
  v34 = v19;
  v29 = InteractionElementContainer.selectionDisplacement(for:category:time:context:)(v20, v21, a1, &v34, a5, v31, v32, v33, v28);
  swift_bridgeObjectRelease();
  swift_release();
  return v29;
}

double InteractionElementContainer.displacement(for:end:time:context:)(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  void (*v37)(uint64_t *, _QWORD);
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  CFIndex v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t (*v55)(_QWORD);
  uint64_t v56;
  uint64_t v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[5];

  v62 = a6;
  v63 = a7;
  v61 = a5;
  v70 = a4;
  v71 = a2;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  v65 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
  v16 = v15;
  v72 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v69 = (char *)&v58 - v20;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v68 = v21;
  v64 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v67 = (uint64_t)&v58 - v22;
  type metadata accessor for Text.Effect.SegmentInteraction.Element?();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
  v27 = *(_QWORD *)(v26 - 8);
  v28.n128_f64[0] = MEMORY[0x24BDAC7A8](v26);
  v66 = (uint64_t)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *v70;
  v31 = *(_QWORD *)(a9 + 16);
  v60 = a3;
  if ((a3 & 1) == 0)
  {
    if (v31)
    {
      v59 = a8;
      v32 = a9 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
      goto LABEL_6;
    }
LABEL_23:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v27 + 56))(v25, 1, 1, v26, v28);
    v55 = (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.SegmentInteraction.Element?;
    v56 = (uint64_t)v25;
LABEL_25:
    outlined destroy of TypesettingConfiguration(v56, v55);
    return 0.0;
  }
  if (!v31)
    goto LABEL_23;
  v59 = a8;
  v32 = a9
      + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
      + *(_QWORD *)(v27 + 72) * (v31 - 1);
LABEL_6:
  outlined init with copy of TypesettingLanguage(v32, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.SegmentInteraction.Element);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v25, v66, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.SegmentInteraction.Element);
  Text.Effect.RenderSegmentation.Segment.characterRanges.getter(v67);
  v33 = v69;
  RangeSet.ranges.getter();
  v34 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v34(v18, v33, v16);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4928]);
  dispatch thunk of Sequence.makeIterator()();
  v35 = &v14[*(int *)(v65 + 36)];
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4930]);
  v70 = (uint64_t *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v36 = *(_QWORD *)v35;
    dispatch thunk of Collection.endIndex.getter();
    if (v36 == v73[0])
      break;
    v37 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v39 = *v38;
    v40 = v38[1];
    v37(v73, 0);
    v34(v18, v14, v16);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v18, v16);
    if (v39 <= a1)
      v41 = a1;
    else
      v41 = v39;
    if (v40 >= v71)
      v42 = v71;
    else
      v42 = v40;
    if (v41 < v42)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v43 = v70;
      else
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70[2] + 1, 1, v70);
      v45 = v43[2];
      v44 = v43[3];
      v46 = (uint64_t *)(v45 + 1);
      if (v45 >= v44 >> 1)
      {
        v70 = (uint64_t *)(v45 + 1);
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v43);
        v46 = v70;
        v43 = v48;
      }
      v43[2] = (uint64_t)v46;
      v70 = v43;
      v47 = &v43[2 * v45];
      v47[4] = v41;
      v47[5] = v42;
    }
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v69, v16);
  if (!v70[2])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v67, v68);
    v55 = (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.SegmentInteraction.Element;
    v56 = v66;
    goto LABEL_25;
  }
  v49 = v70[4];
  v50 = v70[5];
  swift_bridgeObjectRelease();
  v73[0] = v30;
  v51 = v50;
  v52 = v66;
  Text.Effect.SegmentInteraction.Element.displacement(for:end:time:context:)(v49, v51, v60 & 1, v73, v61, v62, v63, v59);
  v54 = v53;
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v67, v68);
  outlined destroy of TypesettingConfiguration(v52, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.SegmentInteraction.Element);
  return v54;
}

void Text.Effect.SegmentInteraction.Element.displacement(for:end:time:context:)(CFIndex a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  CFIndex v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  CFIndex v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v9 = v8;
  v41 = a6;
  v42 = a7;
  v40 = a5;
  v15 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (uint64_t *)((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __OFSUB__(a2, 1);
  v22 = a2 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    v23 = *a4;
    if ((a3 & 1) != 0)
    {
      Text.Effect.RenderSegmentation.Segment.layoutDirection(for:)(v22, v44);
      if (!LOBYTE(v44[0]))
        a1 = v22;
    }
    else
    {
      Text.Effect.RenderSegmentation.Segment.layoutDirection(for:)(a1, v44);
      if (LOBYTE(v44[0]))
        a1 = v22;
    }
    outlined init with copy of TypesettingLanguage(v9, (uint64_t)v17, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v38 = a1;
      v24 = (void *)*((_QWORD *)v17 + 3);
      v25 = *((_QWORD *)v17 + 4);
      v26 = v17[40];
      v27 = *((_QWORD *)v17 + 6);
      v28 = *((_QWORD *)v17 + 7);
      v39 = a3;
      v29 = *((_DWORD *)v17 + 16);
      v30 = *((_QWORD *)v17 + 9);
      v31 = *((_QWORD *)v17 + 10);
      v32 = *((_QWORD *)v17 + 11);
      *v20 = MEMORY[0x24BEE4AF8];
      outlined copy of Text.Layout.Line.Line(v24, v25, v26);
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      v37 = a8;
      swift_bridgeObjectRetain();
      RangeSet.init()();
      *(_QWORD *)((char *)v20 + *(int *)(v18 + 24)) = MEMORY[0x24BEE4B08];
      v33 = (_QWORD *)((char *)v20 + *(int *)(v18 + 28));
      *v33 = 0;
      v33[1] = 0;
      v44[0] = v24;
      v44[1] = v25;
      v45 = v26;
      v46 = v27;
      v47 = v28;
      v48 = v29;
      v49 = v30;
      v50 = v31;
      v51 = v32;
      v43 = v23;
      Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(v20, &v43, v40, v41, v42, v37);
      outlined consume of Text.Layout.Line.Line(v24, v25, v26);
      swift_bridgeObjectRelease();
      v34 = v25;
      a1 = v38;
      outlined consume of Text.Layout.Line.Line(v24, v34, v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      *v20 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      RangeSet.init()();
      *(_QWORD *)((char *)v20 + *(int *)(v18 + 24)) = MEMORY[0x24BEE4B08];
      v35 = (_QWORD *)((char *)v20 + *(int *)(v18 + 28));
      *v35 = 0;
      v35[1] = 0;
      outlined destroy of TypesettingConfiguration((uint64_t)v17, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    }
    Text.Effect.InteractionMetrics.displacement(for:end:)(a1);
    outlined destroy of TypesettingConfiguration((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
    type metadata accessor for Text.Effect.SegmentInteraction.Element();
  }
}

double InteractionElementContainer.selectionDisplacement(for:category:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v19;
  uint64_t v21;

  if (a3 == 4)
  {
    v10 = *(_QWORD *)(a9 + 16);
    if (v10)
    {
      v11 = v10 - 1;
      v12 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
      return *(double *)(a9
                       + ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))
                       + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v11
                       + *(int *)(v12 + 20));
    }
    else
    {
      return 0.0;
    }
  }
  else if (a3 == 2)
  {
    v9 = 0.0;
    if (*(_QWORD *)(a9 + 16))
      type metadata accessor for Text.Effect.SegmentInteraction.Element();
  }
  else
  {
    v21 = *a4;
    v19 = v21;
    v9 = InteractionElementContainer.displacement(for:end:time:context:)(a1, a2, 0, &v21, a5, a6, a7, a8, a9);
    v21 = v19;
    InteractionElementContainer.displacement(for:end:time:context:)(a1, a2, 1, &v21, a5, a6, a7, a8, a9);
  }
  return v9;
}

BOOL closure #1 in Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - v11;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v19 - v11, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, (uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      v15 = *(_QWORD *)&v6[*(int *)(v4 + 28)];
      outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      goto LABEL_7;
    }
    v15 = *(_QWORD *)v12;
    outlined consume of Text.Layout.Line.Line(*((void **)v12 + 3), *((_QWORD *)v12 + 4), v12[40]);
  }
  else
  {
    v15 = *((_QWORD *)v12 + 2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_7:
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)v9, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  v16 = swift_getEnumCaseMultiPayload();
  if (!v16)
  {
    v17 = *((_QWORD *)v9 + 2);
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return v15 == v17;
  }
  if (v16 != 1)
  {
    v17 = *(_QWORD *)v9;
    outlined consume of Text.Layout.Line.Line(*((void **)v9 + 3), *((_QWORD *)v9 + 4), v9[40]);
    goto LABEL_12;
  }
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  v17 = *(_QWORD *)&v6[*(int *)(v4 + 28)];
  outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  return v15 == v17;
}

uint64_t Text.Effect.RenderSegmentation.Segment.matches(range:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  void (*v18)(char *, uint64_t);
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v23 - v7;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23 - v15;
  Text.Effect.RenderSegmentation.Segment.characterRanges.getter((uint64_t)&v23 - v15);
  v24 = a1;
  v27 = a1;
  v28 = a2;
  RangeSet.ranges.getter();
  v26 = &v27;
  v17 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in RangeSet.overlaps(_:)specialized partial apply, (uint64_t)v25);
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v8, v5);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  if ((v17 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    v27 = v24;
    v28 = a2;
    v20 = RangeSet.ranges.getter();
    MEMORY[0x24BDAC7A8](v20);
    *(&v23 - 2) = (uint64_t)&v27;
    v19 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in RangeSet.contains(_:)specialized partial apply, (uint64_t)(&v23 - 4));
    v18(v8, v5);
  }
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v13, v10);
  v21(v16, v10);
  return v19 & 1;
}

void Text.Layout.Line.layoutDirection(for:)(CFIndex a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  CFIndex i;
  const __CTLine *v7;
  const __CFArray *RunCount;
  id v9;
  void *v10;
  char v11;
  const __CTLine *v12;
  const __CFArray *v13;
  const __CTLine *v14;
  const __CTLine *v15;
  void *v16;
  CFRange StringRange;
  CFIndex v18;
  const __CTLine *v19;
  void *v20;
  char Status;
  char v22;
  void *v23;
  uint64_t v24;
  char v25;

  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(unsigned __int8 *)(v2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)v2, v4, *(_BYTE *)(v2 + 16));
  for (i = 0; ; ++i)
  {
    if ((v5 & 1) != 0)
    {
      v7 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
      if (!v7)
      {
        if (!i)
        {
          v23 = v3;
          v24 = v4;
          v25 = 1;
LABEL_22:
          outlined consume of Text.Layout.Line.Line(v23, v24, v25);
          v22 = 0;
          goto LABEL_23;
        }
        goto LABEL_10;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      swift_release();
      v7 = (const __CTLine *)v3;
    }
    RunCount = _CTLineGetRunCount(v7);

    if ((const __CFArray *)i == RunCount)
    {
      v23 = v3;
      v24 = v4;
      v25 = v5;
      goto LABEL_22;
    }
    if (!v5)
    {
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);

      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      swift_release();
      v14 = (const __CTLine *)v3;
      v10 = v3;
      goto LABEL_14;
    }
LABEL_10:
    v9 = (id)_NSTextLineFragmentGetCTLine(v3);
    if (!v9)
      goto LABEL_27;
    v10 = v9;
    v11 = 1;
    outlined copy of Text.Layout.Line.Line(v3, v4, 1);
    v12 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
    v13 = 0;
    if (v12)
    {
      v14 = v12;
LABEL_14:
      v13 = _CTLineGetRunCount(v14);

      v11 = v5;
    }
    outlined consume of Text.Layout.Line.Line(v3, v4, v11);
    if (i >= (uint64_t)v13)
      break;
    swift_retain();
    v15 = v10;
    v16 = (id)_CTLineGetRunAtIndex(v15, i);
    StringRange = CTRunGetStringRange((CTRunRef)v16);
    swift_release();

    v18 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length))
      goto LABEL_25;
    if (v18 < StringRange.location)
      goto LABEL_26;
    if (StringRange.location <= a1 && v18 > a1)
    {
      outlined consume of Text.Layout.Line.Line(v3, v4, v5);
      v19 = v15;
      swift_retain();
      v20 = (id)_CTLineGetRunAtIndex(v19, i);
      Status = CTRunGetStatus((CTRunRef)v20);
      swift_release_n();

      v22 = Status & 1;
LABEL_23:
      *a2 = v22;
      return;
    }
    swift_release();

  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

void Text.Effect.RenderSegmentation.StaticLines.layoutDirection(for:)(CFIndex a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  const __CTLine *v14;
  CFRange StringRange;
  _BYTE *v16;
  uint64_t v17;

  v3 = *v2;
  v17 = v3;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
LABEL_15:
    *a2 = 0;
    return;
  }
  v16 = a2;
  swift_bridgeObjectRetain_n();
  v6 = v3 + 72;
  while (1)
  {
    v8 = *(void **)(v6 - 40);
    v7 = *(_QWORD *)(v6 - 32);
    v9 = *(_BYTE *)(v6 - 24);
    if ((v9 & 1) == 0)
    {
      outlined copy of Text.Layout.Line.Line(v8, v7, 0);
      outlined copy of Text.Layout.Line.Line(v8, v7, 0);
      v14 = v8;
      StringRange = CTLineGetStringRange(v14);

      outlined consume of Text.Layout.Line.Line(v8, v7, 0);
      v13 = StringRange.location + StringRange.length;
      if (__OFADD__(StringRange.location, StringRange.length))
        goto LABEL_18;
      if (v13 < StringRange.location)
        goto LABEL_19;
      if (StringRange.location > a1)
      {
        v9 = 0;
        goto LABEL_4;
      }
      goto LABEL_3;
    }
    outlined copy of Text.Layout.Line.Line(v8, v7, 1);
    outlined copy of Text.Layout.Line.Line(v8, v7, 1);
    v10 = objc_msgSend(v8, sel_characterRange);
    v12 = v11;
    outlined consume of Text.Layout.Line.Line(v8, v7, 1);
    v13 = (CFIndex)v10 + v12;
    if (__OFADD__(v10, v12))
      break;
    if (v13 < (uint64_t)v10)
      goto LABEL_20;
    if ((uint64_t)v10 > a1)
    {
      v9 = 1;
      goto LABEL_4;
    }
LABEL_3:
    if (v13 > a1)
    {
      outlined release of LinearGradient((uint64_t)&v17);
      outlined release of LinearGradient((uint64_t)&v17);
      Text.Layout.Line.layoutDirection(for:)(a1, v16);
      outlined consume of Text.Layout.Line.Line(v8, v7, v9);
      return;
    }
LABEL_4:
    outlined consume of Text.Layout.Line.Line(v8, v7, v9);
    v6 += 48;
    if (!--v4)
    {
      outlined release of LinearGradient((uint64_t)&v17);
      outlined release of LinearGradient((uint64_t)&v17);
      a2 = v16;
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

void Text.Effect.RenderSegmentation.Segment.layoutDirection(for:)(CFIndex a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t (*v12)(_QWORD);
  int EnumCaseMultiPayload;
  char v14;
  int v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  char v19;
  int v20;
  __int128 v21;
  _BYTE v22[32];
  uint64_t v23;

  v3 = v2;
  v6 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v9 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)v11, v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, (uint64_t)v8, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      v14 = v8[16];
      v15 = *((_DWORD *)v8 + 10);
      v21 = *(_OWORD *)v8;
      v22[0] = v14;
      *(_OWORD *)&v22[8] = *(_OWORD *)(v8 + 24);
      *(_DWORD *)&v22[24] = v15;
      Text.Layout.Line.layoutDirection(for:)(a1, a2);
      outlined destroy of TypesettingConfiguration((uint64_t)v8, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    }
    else
    {
      v17 = (void *)*((_QWORD *)v11 + 3);
      v18 = *((_QWORD *)v11 + 4);
      v19 = v11[40];
      v20 = *((_DWORD *)v11 + 16);
      *(_QWORD *)&v21 = v17;
      *((_QWORD *)&v21 + 1) = v18;
      v22[0] = v19;
      *(_OWORD *)&v22[8] = *((_OWORD *)v11 + 3);
      *(_DWORD *)&v22[24] = v20;
      outlined copy of Text.Layout.Line.Line(v17, v18, v19);
      Text.Layout.Line.layoutDirection(for:)(a1, a2);
      outlined consume of Text.Layout.Line.Line(v17, v18, v19);
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v17, v18, v19);
    }
  }
  else
  {
    v16 = *((_OWORD *)v11 + 1);
    v21 = *(_OWORD *)v11;
    *(_OWORD *)v22 = v16;
    *(_OWORD *)&v22[16] = *((_OWORD *)v11 + 2);
    v23 = *((_QWORD *)v11 + 6);
    Text.Effect.RenderSegmentation.StaticLines.layoutDirection(for:)(a1, a2);
    outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v21);
  }
}

uint64_t implicit closure #1 in NSTextRange.textRange.getter(void *a1)
{
  Swift::String v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(55);
  v2._object = (void *)0x80000002352E0BB0;
  v2._countAndFlagsBits = 0xD000000000000035;
  String.append(_:)(v2);
  v3 = objc_msgSend(a1, sel_description);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t sub_234BD2D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8)
                          + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Text.Layout.Line.Line(*(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40));
      goto LABEL_6;
    case 1:
      outlined consume of Text.Layout.Line.Line(*(void **)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
      v4 = v2 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
      type metadata accessor for RangeSet<Int>();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      return swift_deallocObject();
    case 0:
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
  }
  return swift_deallocObject();
}

void type metadata accessor for RangeSet<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for RangeSet<Int>)
  {
    v0 = type metadata accessor for RangeSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>);
  }
}

BOOL partial apply for closure #1 in Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8)
                          + 80);
  return closure #1 in Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:)(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t specialized Text.Effect.SegmentInteraction.matches(range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  char v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  char v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD v83[3];
  uint64_t v84;

  *((_QWORD *)&v68 + 1) = a2;
  *(_QWORD *)&v68 = a1;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
  v67 = v4;
  v63 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v55 - v5;
  v58 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x24BDAC7A8](v58);
  v57 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v62 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v55 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v55 - v16;
  v61 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x24BDAC7A8](v61);
  v69 = (uint64_t)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v70 = (uint64_t)&v55 - v21;
  v22 = *(void (**)(char *, uint64_t))(a3 + 16);
  if (v22)
  {
    v60 = v6;
    v23 = a3 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v59 = *(_QWORD *)(v20 + 72);
    v55 = a3;
    swift_bridgeObjectRetain();
    v24 = (char *)v22 - 1;
    v56 = v10;
    while (1)
    {
      v65 = v24;
      v25 = v70;
      outlined init with copy of TypesettingLanguage(v23, v70, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      outlined init with copy of TypesettingLanguage(v25, v69, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v66 = v23;
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v27 = v57;
          outlined init with take of LocalizedStringKey.FormatArgument(v69, v57, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          v28 = *(_BYTE *)(v27 + 16);
          v29 = *(_DWORD *)(v27 + 40);
          v76 = *(_OWORD *)v27;
          v77 = v28;
          v78 = *(_OWORD *)(v27 + 24);
          v79 = v29;
          Text.Layout.Line.characterRanges(runIndices:)(v27 + *(int *)(v58 + 24), (uint64_t)v14);
          outlined destroy of TypesettingConfiguration(v27, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          v32 = *(void **)(v69 + 24);
          v31 = *(_QWORD *)(v69 + 32);
          v33 = *(_BYTE *)(v69 + 40);
          v34 = *(_QWORD *)(v69 + 48);
          v35 = *(_QWORD *)(v69 + 56);
          v36 = v17;
          v37 = *(_DWORD *)(v69 + 64);
          v38 = *(_QWORD *)(v69 + 72);
          v39 = *(_QWORD *)(v69 + 80);
          v40 = *(_QWORD *)(v69 + 88);
          outlined copy of Text.Layout.Line.Line(v32, v31, v33);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          swift_bridgeObjectRetain();
          RangeSet.init()();
          *(_QWORD *)&v76 = v32;
          *((_QWORD *)&v76 + 1) = v31;
          v77 = v33;
          *(_QWORD *)&v78 = v34;
          *((_QWORD *)&v78 + 1) = v35;
          v79 = v37;
          v80 = v38;
          v81 = v39;
          v82 = v40;
          v71[0] = v32;
          v71[1] = v31;
          v72 = v33;
          v73 = v34;
          v74 = v35;
          v75 = v37;
          v17 = v36;
          Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v71, (uint64_t)v14);
          outlined consume of Text.Layout.Line.Line(v32, v31, v33);
          swift_bridgeObjectRelease();
          outlined consume of Text.Layout.Line.Line(v32, v31, v33);
          v10 = v56;
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v30 = *(_OWORD *)(v69 + 16);
        v83[0] = *(_OWORD *)v69;
        v83[1] = v30;
        v83[2] = *(_OWORD *)(v69 + 32);
        v84 = *(_QWORD *)(v69 + 48);
        Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
        outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v83);
      }
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v14, v9);
      v76 = v68;
      v41 = v17;
      v42 = v60;
      v43 = RangeSet.ranges.getter();
      v44 = v10;
      MEMORY[0x24BDAC7A8](v43);
      *(&v55 - 2) = (uint64_t)&v76;
      v45 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in RangeSet.overlaps(_:), (uint64_t)(&v55 - 4));
      v46 = *(void (**)(char *, uint64_t))(v63 + 8);
      v46(v42, v67);
      v47 = v62;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v62, v41, v9);
      if ((v45 & 1) != 0)
        break;
      v48 = v14;
      v76 = v68;
      v49 = v9;
      v50 = v47;
      v51 = RangeSet.ranges.getter();
      v64 = &v55;
      MEMORY[0x24BDAC7A8](v51);
      *(&v55 - 2) = (uint64_t)&v76;
      LOBYTE(v22) = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))_ss8RangeSetV7SwiftUIE8containsySbSnyxGFSbAEXEfU_AC4TextV6LayoutV14CharacterIndexV_TG5TA_0, (uint64_t)(&v55 - 4));
      v46(v42, v67);
      v52 = *(void (**)(char *, uint64_t))(v44 + 8);
      v52(v41, v49);
      v53 = v50;
      v9 = v49;
      v52(v53, v49);
      outlined destroy of TypesettingConfiguration(v70, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if ((v22 & 1) == 0)
      {
        v10 = v44;
        v17 = v41;
        v24 = v65 - 1;
        v23 = v66 + v59;
        v14 = v48;
        if (v65)
          continue;
      }
      goto LABEL_13;
    }
    v22 = *(void (**)(char *, uint64_t))(v44 + 8);
    v22(v41, v9);
    v22(v47, v9);
    outlined destroy of TypesettingConfiguration(v70, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    LOBYTE(v22) = 1;
LABEL_13:
    swift_bridgeObjectRelease();
  }
  return v22 & 1;
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, double, double), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(char *, double, double);
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v39 = a3;
  v8 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  v40 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v42 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint)();
  v38 = v10;
  v33 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v36 = (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v37 = (char *)&v31 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v31 - v15;
  v43 = MEMORY[0x24BEE4AF8];
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v17 = 0;
    v34 = MEMORY[0x24BEE4AF8];
    v31 = a4;
    v32 = a2;
    v18 = (uint64_t)v37;
    while (v17 < *(_QWORD *)(a1 + 16))
    {
      outlined init with copy of TypesettingLanguage(a1+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v17, v42, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      v19 = *(_QWORD *)(a2 + 16);
      if (v17 == v19)
      {
        outlined destroy of TypesettingConfiguration(v42, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        goto LABEL_16;
      }
      if (v17 >= v19)
        goto LABEL_19;
      v20 = a2;
      v21 = a2 + 16 * v17;
      v22 = v38;
      v23 = *(int *)(v38 + 48);
      v41 = *(_OWORD *)(v21 + 32);
      outlined init with take of LocalizedStringKey.FormatArgument(v42, v18, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      *(_OWORD *)(v18 + v23) = v41;
      outlined init with take of LocalizedStringKey.FormatArgument(v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint));
      v24 = v39(v16, *(double *)&v16[*(int *)(v22 + 48)], *(double *)&v16[*(int *)(v22 + 48) + 8]);
      if (v4)
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint));
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      if ((v24 & 1) != 0)
      {
        v25 = a1;
        outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v16, v36, (uint64_t (*)(_QWORD))type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint));
        v26 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v27 = v43;
        v29 = *(_QWORD *)(v43 + 16);
        v28 = *(_QWORD *)(v43 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v27 = v43;
        }
        *(_QWORD *)(v27 + 16) = v29 + 1;
        v30 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
        v34 = v27;
        outlined init with take of LocalizedStringKey.FormatArgument(v36, v27 + v30 + *(_QWORD *)(v33 + 72) * v29, (uint64_t (*)(_QWORD))type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint));
        a1 = v25;
        a2 = v32;
      }
      else
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint));
        a2 = v20;
      }
      if (v35 == ++v17)
        goto LABEL_16;
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_234BD3818()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:)()
{
  uint64_t v0;

  return Text.Effect.RenderSegmentation.Segment.matches(range:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24)) & 1;
}

void type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    v7 = a3(a1, &type metadata for Text.Layout.CharacterIndex, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t partial apply for specialized closure #1 in RangeSet.overlaps(_:)(uint64_t *a1)
{
  uint64_t v1;

  return (unint64_t)specialized closure #1 in RangeSet.overlaps(_:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

BOOL _ss8RangeSetV7SwiftUIE8containsySbSnyxGFSbAEXEfU_AC4TextV6LayoutV14CharacterIndexV_TG5TA_0(_QWORD *a1)
{
  uint64_t v1;

  return specialized closure #1 in RangeSet.contains(_:)(a1, *(_QWORD **)(v1 + 16));
}

uint64_t type metadata accessor for Text.Effect.SegmentInteraction.Element()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Text.Effect.SegmentInteraction.Element;
  if (!type metadata singleton initialization cache for Text.Effect.SegmentInteraction.Element)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for Text.Effect.SegmentInteraction.Element?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Text.Effect.SegmentInteraction.Element?)
  {
    type metadata accessor for Text.Effect.SegmentInteraction.Element();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.SegmentInteraction.Element?);
  }
}

uint64_t lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.SegmentInteraction.Element(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  char *v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      v25 = a2[3];
      v26 = (uint64_t)a2[4];
      v27 = *((_BYTE *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v25, v26, v27);
      *((_QWORD *)a1 + 3) = v25;
      *((_QWORD *)a1 + 4) = v26;
      a1[40] = v27;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *((_QWORD *)a1 + 11) = a2[11];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v8 = (uint64_t)*a2;
        v9 = (uint64_t)a2[1];
        v10 = *((_BYTE *)a2 + 16);
        outlined copy of Text.Layout.Line.Line(*a2, v9, v10);
        *(_QWORD *)a1 = v8;
        *((_QWORD *)a1 + 1) = v9;
        a1[16] = v10;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        v11 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
        v12 = v11[6];
        v13 = &a1[v12];
        v14 = (uint64_t)a2 + v12;
        type metadata accessor for RangeSet<Int>();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
        *(_QWORD *)&a1[v11[7]] = *(char **)((char *)a2 + v11[7]);
        v16 = v11[8];
        v17 = &a1[v16];
        v18 = (_OWORD *)((char *)a2 + v16);
        v19 = v18[1];
        *(_OWORD *)v17 = *v18;
        *((_OWORD *)v17 + 1) = v19;
        v20 = v11[9];
        v21 = &a1[v20];
        v22 = (_OWORD *)((char *)a2 + v20);
        v23 = v22[1];
        *(_OWORD *)v21 = *v22;
        *((_OWORD *)v21 + 1) = v23;
LABEL_9:
        swift_storeEnumTagMultiPayload();
        *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
        return a1;
      }
      v28 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v28;
      *((_QWORD *)a1 + 2) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  v24 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = &v24[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

uint64_t destroy for Text.Effect.SegmentInteraction.Element(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    outlined consume of Text.Layout.Line.Line(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    return swift_bridgeObjectRelease();
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v3 = a1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  type metadata accessor for RangeSet<Int>();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t initializeWithCopy for Text.Effect.SegmentInteraction.Element(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v23 = (void *)a2[3];
    v24 = a2[4];
    v25 = *((_BYTE *)a2 + 40);
    outlined copy of Text.Layout.Line.Line(v23, v24, v25);
    *(_QWORD *)(a1 + 24) = v23;
    *(_QWORD *)(a1 + 32) = v24;
    *(_BYTE *)(a1 + 40) = v25;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_QWORD *)(a1 + 88) = a2[11];
LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v26 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  v7 = *a2;
  v8 = a2[1];
  v9 = *((_BYTE *)a2 + 16);
  outlined copy of Text.Layout.Line.Line((void *)*a2, v8, v9);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v10 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  v11 = v10[6];
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  type metadata accessor for RangeSet<Int>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  *(_QWORD *)(a1 + v10[7]) = *(uint64_t *)((char *)a2 + v10[7]);
  v15 = v10[8];
  v16 = (_OWORD *)(a1 + v15);
  v17 = (_OWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v10[9];
  v20 = (_OWORD *)(a1 + v19);
  v21 = (_OWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
LABEL_7:
  swift_storeEnumTagMultiPayload();
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for Text.Effect.SegmentInteraction.Element(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;

  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of TypesettingConfiguration(a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      v23 = (void *)a2[3];
      v24 = a2[4];
      v25 = *((_BYTE *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v23, v24, v25);
      *(_QWORD *)(a1 + 24) = v23;
      *(_QWORD *)(a1 + 32) = v24;
      *(_BYTE *)(a1 + 40) = v25;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_QWORD *)(a1 + 88) = a2[11];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v7 = *a2;
        v8 = a2[1];
        v9 = *((_BYTE *)a2 + 16);
        outlined copy of Text.Layout.Line.Line((void *)*a2, v8, v9);
        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = v8;
        *(_BYTE *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        v10 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
        v11 = v10[6];
        v12 = a1 + v11;
        v13 = (uint64_t)a2 + v11;
        type metadata accessor for RangeSet<Int>();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        *(_QWORD *)(a1 + v10[7]) = *(uint64_t *)((char *)a2 + v10[7]);
        v15 = v10[8];
        v16 = (_OWORD *)(a1 + v15);
        v17 = (_OWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        v19 = v10[9];
        v20 = (_OWORD *)(a1 + v19);
        v21 = (_OWORD *)((char *)a2 + v19);
        v22 = v21[1];
        *v20 = *v21;
        v20[1] = v22;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = a2[2];
      v26 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 24) = v26;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
LABEL_9:
  v27 = *(int *)(a3 + 20);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.SegmentInteraction.Element(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;

  v6 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
    a1[3] = a2[3];
    v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
    v9 = v8[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    type metadata accessor for RangeSet<Int>();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    v13 = v8[8];
    v14 = (_OWORD *)((char *)a1 + v13);
    v15 = (_OWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = v8[9];
    v18 = (_OWORD *)((char *)a1 + v17);
    v19 = (_OWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *assignWithTake for Text.Effect.SegmentInteraction.Element(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    v6 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
      a1[3] = a2[3];
      v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      type metadata accessor for RangeSet<Int>();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
      v13 = v8[8];
      v14 = (_OWORD *)((char *)a1 + v13);
      v15 = (_OWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      v17 = v8[9];
      v18 = (_OWORD *)((char *)a1 + v17);
      v19 = (_OWORD *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.SegmentInteraction.Element()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BD4238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.SegmentInteraction.Element()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234BD4280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Text.Effect.SegmentInteraction.Element()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Effect.RenderSegmentation.Segment(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t closure #1 in RangeSet.overlaps(_:)specialized partial apply(uint64_t *a1)
{
  return partial apply for specialized closure #1 in RangeSet.overlaps(_:)(a1) & 1;
}

uint64_t static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  Swift::UInt32 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  void (*v65)(__int128 *, _QWORD);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  int OffsetAttribute2;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  Swift::UInt32 v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  Swift::UInt32 v92[6];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _QWORD v108[4];

  v79 = a5;
  v83 = a4;
  LODWORD(v85) = a3;
  v108[1] = *MEMORY[0x24BDAC8D0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v77 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v78 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v70 - v14;
  v86 = a6;
  v17 = type metadata accessor for ShapeStyledDisplayList(0, a6, a7, v16);
  v81 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v80 = (uint64_t)&v70 - v18;
  v84 = *a1;
  v19 = a2[3];
  v101 = a2[2];
  v102 = v19;
  v103 = a2[4];
  v104 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v99 = *a2;
  v100 = v20;
  v88 = MEMORY[0x24BEE4AF8];
  v21 = *MEMORY[0x24BE096C0];
  LODWORD(v89) = 0;
  HIDWORD(v89) = v21;
  v91 = DWORD2(v19);
  v90 = v19;
  v22 = v19;
  type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  v24 = v22;
  v25 = *(_QWORD *)(v22 + 16);
  v82 = v22;
  if (v25)
  {
    v26 = v23;
    v27 = (_QWORD *)(v24 + 32);
    v28 = v25;
    while (*v27 != v23)
    {
      v27 += 2;
      if (!--v28)
        goto LABEL_11;
    }
    v76 = a7;
    v29 = ++lastIdentity;
    v30 = a2[2];
    v106 = a2[1];
    v107 = v30;
    v105 = *a2;
    if ((BYTE5(v30) & 1) != 0)
    {
      outlined retain of _ViewInputs((uint64_t)&v99);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs((uint64_t)&v99);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v21)
      {
        __break(1u);
        return result;
      }
      v92[0] = v29;
      v65 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v92);
      v65(&v93, 0);
    }
    v87[0] = v29;
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v31 = v106;
    v95 = v101;
    v96 = v102;
    v97 = v103;
    v98 = v104;
    v93 = v99;
    v94 = v100;
    swift_beginAccess();
    v73 = CachedEnvironment.animatedSize(for:)((uint64_t *)&v93);
    v95 = v101;
    v96 = v102;
    v97 = v103;
    v98 = v104;
    v93 = v99;
    v94 = v100;
    v32 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v93);
    swift_endAccess();
    v71 = *(_DWORD *)(v31 + 16);
    v33 = v105;
    v108[0] = v105;
    outlined retain of _ViewInputs((uint64_t)&v99);
    outlined retain of _GraphInputs((uint64_t)&v105);
    outlined retain of ViewTransform((uint64_t)v108);
    v34 = specialized find<A>(_:key:)(v33);
    v75 = a8;
    v72 = v32;
    if (v34)
      v35 = *(_BYTE *)(v34 + 72);
    else
      v35 = 0;
    v36 = DWORD1(v103);
    v37 = HIDWORD(v102);
    v38 = HIDWORD(v103);
    outlined release of ViewTransform((uint64_t)v108);
    outlined release of _GraphInputs((uint64_t)&v105);
    outlined release of _ViewInputs((uint64_t)&v99);
    LOBYTE(v92[0]) = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v15, v79, v78);
    LOWORD(v93) = 0;
    a7 = v76;
    v66 = v38;
    v39 = v80;
    v40 = ShapeStyledDisplayList.init(group:identity:view:styles:size:animatedSize:position:containerPosition:transform:environment:safeAreaInsets:options:data:contentSeed:)(v83, (int *)v87, v84, v85, OffsetAttribute2, v73, v72, v36, v80, __SPAIR64__(v71, v37), v66, (char *)v92, (uint64_t)v15, (__int16 *)&v93, v86, v76);
    v41 = MEMORY[0x24BDAC7A8](v40);
    v68 = v17;
    v69 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, v17, v41);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v39, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v67, v17, MEMORY[0x24BEE4078], v42, MEMORY[0x24BEE40A8], v43);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v39, v17);
    v44 = v93;
    LOBYTE(v93) = 0;
    PreferencesOutputs.subscript.setter(v44, v26, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v45);
    a8 = v75;
  }
LABEL_11:
  v95 = v101;
  v96 = v102;
  v97 = v103;
  v98 = v104;
  v93 = v99;
  v94 = v100;
  swift_beginAccess();
  v46 = CachedEnvironment.animatedSize(for:)((uint64_t *)&v93);
  v95 = v101;
  v96 = v102;
  v97 = v103;
  v98 = v104;
  v93 = v99;
  v94 = v100;
  v47 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v93);
  swift_endAccess();
  v48 = ShapeStyledResponderFilter.init(view:styles:size:position:transform:)(v84, v85, v46, v47, HIDWORD(v102), v86, a7);
  v50 = v49;
  v52 = v51;
  v54 = v53;
  type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
  if (v25)
  {
    v56 = v55;
    v57 = (_QWORD *)(v82 + 32);
    while (*v57 != v55)
    {
      v57 += 2;
      if (!--v25)
        goto LABEL_17;
    }
    v85 = &v70;
    *(_QWORD *)&v93 = v48;
    *((_QWORD *)&v93 + 1) = v50;
    LODWORD(v94) = v52;
    *((_QWORD *)&v94 + 1) = v54;
    MEMORY[0x24BDAC7A8](v55);
    v59 = type metadata accessor for ShapeStyledResponderFilter(0, v86, a7, v58);
    v68 = v59;
    v69 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledResponderFilter<A>, v59);
    outlined retain of LinearGradient((uint64_t)&v90);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
    v61 = v60;
    swift_retain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v93, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v67, v59, MEMORY[0x24BEE4078], v61, MEMORY[0x24BEE40A8], v62);
    swift_release();
    LOBYTE(v93) = 0;
    PreferencesOutputs.subscript.setter(v92[0], v56, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v63);
    outlined release of LinearGradient((uint64_t)&v90);
  }
LABEL_17:
  result = swift_release();
  *a8 = v88;
  a8[1] = v89;
  return result;
}

uint64_t static ShapeStyledLeafView.animatesSize.getter()
{
  return 1;
}

uint64_t protocol witness for ContentResponder.contains(points:size:) in conformance Image.Resolved@<X0>(double *a1@<X0>, _QWORD *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  return specialized ShapeStyledLeafView.contains(points:size:)(a1, a2, a3, a4);
}

uint64_t specialized ShapeStyledLeafView.contains(points:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  double *v7;
  double (*v9)(uint64_t);
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  uint64_t v20;
  CGFloat v21;
  CGFloat v22;
  unint64_t v23;
  uint64_t v24;
  CGFloat *v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  CGPoint v29;
  CGRect v30;

  v7 = (double *)result;
  if (!a2)
  {
    v15 = 0.0;
    v17 = 0.0;
    v20 = *(_QWORD *)(result + 16);
    if (v20)
      goto LABEL_3;
LABEL_13:
    v24 = 0;
    goto LABEL_14;
  }
  v9 = *(double (**)(uint64_t))(*(_QWORD *)a2 + 112);
  v10 = swift_retain();
  v11 = v9(v10);
  v15 = CGRect.outset(by:)(v11, v12, v13, v14, 0.0, 0.0, a4, a5);
  v17 = v16;
  a4 = v18;
  a5 = v19;
  result = swift_release();
  v20 = *((_QWORD *)v7 + 2);
  if (!v20)
    goto LABEL_13;
LABEL_3:
  v22 = v7[4];
  v21 = v7[5];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = 0;
  v24 = 0;
  v25 = v7 + 7;
  v26 = v20 - 1;
  while (1)
  {
    v30.origin.x = v15;
    v30.origin.y = v17;
    v30.size.width = a4;
    v30.size.height = a5;
    v29.x = v22;
    v29.y = v21;
    v27 = CGRectContainsPoint(v30, v29);
    if (v23 < 0x40)
      break;
    v28 = 0;
    if (!v27)
      goto LABEL_9;
LABEL_6:
    v24 |= v28;
    if (v26 == v23)
      goto LABEL_11;
LABEL_10:
    v22 = *(v25 - 1);
    v21 = *v25;
    ++v23;
    v25 += 2;
  }
  v28 = 1 << v23;
  if (v27)
    goto LABEL_6;
LABEL_9:
  v24 &= ~v28;
  if (v26 != v23)
    goto LABEL_10;
LABEL_11:
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
LABEL_14:
  *a3 = v24;
  return result;
}

uint64_t specialized ShapeStyledLeafView.contains(points:size:)@<X0>(double *a1@<X0>, _QWORD *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  __int128 *v4;
  double *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  CGFloat v18;
  CGFloat v19;
  unint64_t v20;
  uint64_t v21;
  CGFloat *v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  double v28;
  double v29;
  uint64_t v30;
  CGFloat v31;
  CGFloat v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  int v41;
  _BYTE v42[38];
  char v43;
  char v44;
  _BYTE v45[40];
  CGPoint v46;
  CGPoint v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v9 = (double *)*((_QWORD *)v4 + 18);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v4 + 153, (uint64_t)&v43, &lazy cache variable for type metadata for SymbolVariants.Shape?, (uint64_t)&type metadata for SymbolVariants.Shape);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v43, (uint64_t)&v44, &lazy cache variable for type metadata for SymbolVariants.Shape?, (uint64_t)&type metadata for SymbolVariants.Shape);
  if (v44 == 3 || v9 == 0)
  {
    v11 = v4[5];
    v40[0] = v4[4];
    v40[1] = v11;
    v41 = *((_DWORD *)v4 + 24);
    v12 = v4[1];
    v36 = *v4;
    v37 = v12;
    v13 = v4[3];
    v38 = v4[2];
    v39 = v13;
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v40, (uint64_t)v42, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo);
    result = outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v42, (uint64_t)v45, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo);
    v15 = 0.0;
    v16 = 0.0;
    if (v45[32] == 2)
    {
      a3 = 0.0;
      if (v9)
      {
        v15 = v9[6];
        v16 = v9[7];
      }
      if (*(double *)&v37 != 0.0)
        __asm { BR              X10 }
      a4 = 0.0;
    }
    v17 = *((_QWORD *)a1 + 2);
    if (!v17)
      goto LABEL_31;
    v19 = a1[4];
    v18 = a1[5];
    swift_bridgeObjectRetain();
    outlined retain of GraphicsImage((uint64_t)&v36);
    v20 = 0;
    v21 = 0;
    v22 = a1 + 7;
    v23 = v17 - 1;
    while (1)
    {
      v48.origin.x = v15;
      v48.origin.y = v16;
      v48.size.width = a3;
      v48.size.height = a4;
      v46.x = v19;
      v46.y = v18;
      v24 = CGRectContainsPoint(v48, v46);
      if (v20 < 0x40)
      {
        v25 = 1 << v20;
        if (!v24)
        {
LABEL_13:
          v21 &= ~v25;
          if (v23 == v20)
            goto LABEL_20;
          goto LABEL_14;
        }
      }
      else
      {
        v25 = 0;
        if (!v24)
          goto LABEL_13;
      }
      v21 |= v25;
      if (v23 == v20)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        result = outlined release of GraphicsImage((uint64_t)&v36);
        *a2 = v21;
        return result;
      }
LABEL_14:
      v19 = *(v22 - 1);
      v18 = *v22;
      ++v20;
      v22 += 2;
    }
  }
  v26 = *((unsigned int *)v4 + 39);
  v27 = *((_BYTE *)v4 + 160);
  v28 = v9[8] * (a3 / v9[4]);
  v29 = v9[9] * (a4 / v9[5]);
  v45[0] = v44;
  LOBYTE(v36) = v27;
  SymbolVariants.Shape.path(in:cornerRadius:)(v26 | ((unint64_t)v27 << 32), (uint64_t)&v36, 0.0, 0.0, v28, v29);
  v30 = *((_QWORD *)a1 + 2);
  if (v30)
  {
    v31 = a1[4];
    v32 = a1[5];
    swift_bridgeObjectRetain();
    v49.origin.x = 0.0;
    v49.origin.y = 0.0;
    v49.size.width = v28;
    v49.size.height = v29;
    v47.x = v31;
    v47.y = v32;
    if (CGRectContainsPoint(v49, v47))
    {
LABEL_26:
      swift_bridgeObjectRelease();
      Path.contains(points:eoFill:origin:)();
      return outlined release of Path((uint64_t)&v36);
    }
    v33 = a1 + 7;
    while (--v30)
    {
      v34 = v33 + 2;
      v50.origin.x = 0.0;
      v50.origin.y = 0.0;
      v50.size.width = v28;
      v50.size.height = v29;
      v35 = CGRectContainsPoint(v50, *(CGPoint *)(v33 - 1));
      v33 = v34;
      if (v35)
        goto LABEL_26;
    }
    swift_bridgeObjectRelease();
  }
  result = outlined release of Path((uint64_t)&v36);
LABEL_31:
  *a2 = 0;
  return result;
}

void ShapeStyledLeafView.contains(points:size:)(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  unint64_t v39;
  uint64_t v40;
  CGFloat *v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  CGFloat v46;
  CGFloat v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  CGPoint v87;
  CGPoint v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) & 1) == 0)
    goto LABEL_5;
  v11 = (*(double (**)(uint64_t *, uint64_t, uint64_t, double, double))(a3 + 56))(&v74, a2, a3, a5, a6);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v74;
  v19 = v75;
  v20 = v76;
  v21 = v77;
  v22 = v78;
  v23 = v79;
  v24 = v80;
  v25 = v81;
  v26 = v82;
  v27 = v83;
  v28 = v86;
  v29 = v84;
  v30 = v85;
  if ((v86 & 0xE00000) == 0x800000
    && !(v75 | v74 | v76 | v77 | v78 | v79 | v80 | v81 | v82 | v83 | v84 | v85)
    && v86 == 0x800000)
  {
LABEL_5:
    v11 = (*(double (**)(uint64_t *, uint64_t, uint64_t, double, double))(a3 + 40))(&v74, a2, a3, a5, a6);
    v13 = v31;
    v15 = v32;
    v17 = v33;
    v18 = v74;
    v19 = v75;
    v20 = v76;
    v21 = v77;
    v22 = v78;
    v23 = v79;
    v24 = v80;
    v25 = v81;
    v26 = v82;
    v27 = v83;
    v29 = v84;
    v30 = v85;
    v28 = v86;
  }
  if ((v28 & 0xE00000) != 0)
  {
    v71 = v20;
    v34 = v19;
    v35 = v18;
    v36 = *((_QWORD *)a1 + 2);
    if (v36)
    {
      v56 = v29;
      v58 = v30;
      v59 = v27;
      v60 = v22;
      v61 = v26;
      v63 = v25;
      v65 = v24;
      v67 = v23;
      v69 = v21;
      v38 = a1[4];
      v37 = a1[5];
      swift_bridgeObjectRetain();
      v39 = 0;
      v40 = 0;
      v41 = a1 + 7;
      v42 = v36 - 1;
      while (1)
      {
        v89.origin.x = v11;
        v89.origin.y = v13;
        v89.size.width = v15;
        v89.size.height = v17;
        v87.x = v38;
        v87.y = v37;
        v43 = CGRectContainsPoint(v89, v87);
        if (v39 < 0x40)
        {
          v44 = 1 << v39;
          if (v43)
          {
LABEL_11:
            v40 |= v44;
            if (v42 == v39)
              goto LABEL_16;
            goto LABEL_15;
          }
        }
        else
        {
          v44 = 0;
          if (v43)
            goto LABEL_11;
        }
        v40 &= ~v44;
        if (v42 == v39)
        {
LABEL_16:
          swift_bridgeObjectRelease();
          v23 = v67;
          v21 = v69;
          v22 = v60;
          v26 = v61;
          v25 = v63;
          v24 = v65;
          v30 = v58;
          v27 = v59;
          v29 = v56;
          goto LABEL_24;
        }
LABEL_15:
        v38 = *(v41 - 1);
        v37 = *v41;
        ++v39;
        v41 += 2;
      }
    }
    v40 = 0;
LABEL_24:
    outlined consume of _ShapeStyle_RenderedShape.Shape(v35, v34, v71, v21, v22, v23, v24, v25, v26, v27, v29, v30, v28);
    *a4 = v40;
  }
  else
  {
    v74 = v18;
    v75 = v19;
    v76 = v20;
    v77 = v21;
    LOBYTE(v78) = v22;
    v45 = *((_QWORD *)a1 + 2);
    if (v45)
    {
      v46 = a1[4];
      v47 = a1[5];
      v48 = v30;
      v49 = v29;
      v50 = v27;
      v62 = v26;
      v64 = v25;
      v55 = v19;
      v57 = v18;
      v70 = v21;
      v72 = v20;
      v51 = v22;
      v66 = v24;
      v68 = v23;
      outlined copy of _ShapeStyle_RenderedShape.Shape(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v29, v30, v28);
      swift_bridgeObjectRetain();
      v90.origin.x = v11;
      v90.origin.y = v13;
      v90.size.width = v15;
      v90.size.height = v17;
      v88.x = v46;
      v88.y = v47;
      if (CGRectContainsPoint(v90, v88))
      {
LABEL_22:
        swift_bridgeObjectRelease();
        Path.contains(points:eoFill:origin:)();
        outlined consume of _ShapeStyle_RenderedShape.Shape(v57, v55, v72, v70, v51, v68, v66, v64, v62, v50, v49, v48, v28);
        outlined consume of _ShapeStyle_RenderedShape.Shape(v57, v55, v72, v70, v51, v68, v66, v64, v62, v50, v49, v48, v28);
        return;
      }
      v52 = a1 + 7;
      while (--v45)
      {
        v53 = v52 + 2;
        v91.origin.x = v11;
        v91.origin.y = v13;
        v91.size.width = v15;
        v91.size.height = v17;
        v54 = CGRectContainsPoint(v91, *(CGPoint *)(v52 - 1));
        v52 = v53;
        if (v54)
          goto LABEL_22;
      }
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_RenderedShape.Shape(v57, v55, v72, v70, v51, v68, v66, v64, v62, v50, v49, v48, v28);
      v20 = v72;
      v19 = v55;
      v18 = v57;
      v30 = v48;
      v27 = v50;
      v29 = v49;
      v26 = v62;
      v25 = v64;
      v24 = v66;
      v23 = v68;
      v22 = v51;
      v21 = v70;
    }
    outlined consume of _ShapeStyle_RenderedShape.Shape(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v29, v30, v28);
    *a4 = 0;
  }
}

double protocol witness for ContentResponder.contentPath(size:) in conformance Image.Resolved@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  __int128 *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[2];
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];

  v5 = v3[9];
  v22 = v3[8];
  v23 = v5;
  v24[0] = v3[10];
  *(_DWORD *)((char *)v24 + 15) = *(_DWORD *)((char *)v3 + 175);
  v6 = v3[5];
  v18 = v3[4];
  v19 = v6;
  v7 = v3[7];
  v20 = v3[6];
  v21 = v7;
  v8 = v3[1];
  v14 = *v3;
  v15 = v8;
  v9 = v3[3];
  v16 = v3[2];
  v17 = v9;
  specialized ShapeStyledLeafView.contentPath(size:)((uint64_t)v12, a2, a3);
  result = *(double *)v12;
  v11 = v12[1];
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = v13;
  return result;
}

void ShapeStyledLeafView.contentPath(size:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  CGFloat v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL IsNull;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CGAffineTransform v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _QWORD v49[4];
  char v50;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  char tx_low;

  v4 = (*(double (**)(CGAffineTransform *, uint64_t))(a2 + 40))(&v41, a1);
  v8 = *(_QWORD *)&v4;
  v9 = *(_QWORD *)&v5;
  v10 = *(_QWORD *)&v41.a;
  v11 = *(_QWORD *)&v41.b;
  v12 = *(_QWORD *)&v41.c;
  v13 = *(_QWORD *)&v41.d;
  v14 = *(_QWORD *)&v41.tx;
  v15 = v43;
  v16 = v45;
  if ((v48 & 0xE00000) != 0)
  {
    v17 = v6;
    v18 = v7;
    v36 = *(_QWORD *)&v41.ty;
    v38 = v43;
    v39 = v42;
    v32 = *(_QWORD *)&v41.tx;
    v19 = v44;
    v20 = v46;
    v21 = v47;
    v22 = v48;
    IsNull = CGRectIsNull(*(CGRect *)&v4);
    outlined consume of _ShapeStyle_RenderedShape.Shape(v10, v11, v12, v13, v32, v36, v39, v38, v19, v16, v20, v21, v22);
    if (IsNull)
      v10 = 0;
    else
      v10 = v8;
    if (IsNull)
      v11 = 0;
    else
      v11 = v9;
    if (IsNull)
      v12 = 0;
    else
      v12 = v17;
    if (IsNull)
      v13 = 0;
    else
      v13 = v18;
    if (IsNull)
      LOBYTE(v14) = 6;
    else
      LOBYTE(v14) = 0;
  }
  else
  {
    a = v41.a;
    b = v41.b;
    c = v41.c;
    d = v41.d;
    tx_low = LOBYTE(v41.tx);
    if (v4 != 0.0 || v5 != 0.0)
    {
      v31 = v44;
      v37 = *(_QWORD *)&v41.ty;
      v40 = v42;
      v35 = v46;
      v23 = v47;
      v26 = v47;
      v24 = v48;
      CGAffineTransformMakeTranslation(&v41, v4, v5);
      outlined copy of Path.Storage(v10, v11, v12, v13, v14);
      Path.applying(_:)(&v41.a, (uint64_t)v49);
      v33 = v49[0];
      v29 = v49[2];
      v30 = v49[1];
      v28 = v49[3];
      v27 = v50;
      outlined consume of _ShapeStyle_RenderedShape.Shape(v10, v11, v12, v13, v14, v37, v40, v15, v31, v16, v35, v23, v24);
      outlined consume of _ShapeStyle_RenderedShape.Shape(v10, v11, v12, v13, v14, v37, v40, v15, v31, v16, v35, v26, v25);
      v10 = v33;
      v12 = v29;
      v11 = v30;
      v13 = v28;
      LOBYTE(v14) = v27;
    }
  }
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v13;
  *(_BYTE *)(a3 + 32) = v14;
}

uint64_t static ShapeStyledLeafView.hasBackground.getter()
{
  return 0;
}

double ShapeStyledLeafView.backgroundShape(in:)(uint64_t a1)
{
  ShapeStyledLeafView.backgroundShape(in:)(a1);
  return 0.0;
}

{
  double result;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = 0.0;
  *(_DWORD *)(a1 + 96) = 0x800000;
  return result;
}

uint64_t ShapeStyledDisplayList.init(group:identity:view:styles:size:animatedSize:position:containerPosition:transform:environment:safeAreaInsets:options:data:contentSeed:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, int a11, char *a12, uint64_t a13, __int16 *a14, uint64_t a15, uint64_t a16)
{
  int v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v17 = *a2;
  v18 = *a12;
  v19 = *a14;
  *(_QWORD *)a9 = a1;
  *(_DWORD *)(a9 + 8) = v17;
  *(_DWORD *)(a9 + 12) = a3;
  *(_DWORD *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 20) = a5;
  *(_DWORD *)(a9 + 24) = a6;
  *(_DWORD *)(a9 + 28) = a7;
  *(_DWORD *)(a9 + 32) = a8;
  *(_QWORD *)(a9 + 36) = a10;
  *(_DWORD *)(a9 + 44) = a11;
  *(_BYTE *)(a9 + 48) = v18;
  v20 = type metadata accessor for ShapeStyledDisplayList(0, a15, a16, a4);
  v21 = a9 + *(int *)(v20 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v21, a13, AssociatedTypeWitness);
  *(_WORD *)(a9 + *(int *)(v20 + 84)) = v19;
  return result;
}

unint64_t ShapeStyledResponderFilter.init(view:styles:size:position:transform:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for ShapeStyledResponderData(255, a6, a7, a4);
  type metadata accessor for LeafViewResponder(0, v9, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, v10);
  LeafViewResponder.__allocating_init()();
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t ShapeStyledLeafView<>.mustUpdate(data:position:)()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t static ShapeStyledLeafView<>.makeLeafView(view:inputs:styles:interpolatorGroup:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  unsigned int v20;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  v20 = *a1;
  *(_QWORD *)&v13 = v7;
  DWORD2(v13) = v8;
  v14 = v9;
  v11 = *(_OWORD *)(a2 + 5);
  v15 = *(_OWORD *)(a2 + 3);
  v16 = v11;
  v17 = *(_OWORD *)(a2 + 7);
  v18 = a2[9];
  v19 = v10;
  return static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(&v20, &v13, a3, a4, a5, a5, a6, a7);
}

_QWORD *ShapeStyledDisplayList.updateValue()(uint64_t a1)
{
  uint64_t v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Value;
  char v14;
  char v15;
  unint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata3;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int CurrentAttribute;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  CGFloat v56;
  CGFloat v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unsigned int v63;
  CGFloat v64;
  CGFloat v65;
  __int128 v66;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unsigned int v92;
  __int128 v93;
  _QWORD *result;
  _QWORD v95[6];
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  CGFloat v99;
  CGFloat v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  char v132;
  char v133[23];
  char v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _OWORD v149[2];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  _OWORD v164[2];
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;

  v129 = 0;
  v171 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v102 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v96 - v9;
  v12 = *(int *)(v11 + 48);
  Value = AGGraphGetValue();
  v15 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v10, Value, v7);
  v16 = (unint64_t *)(v15 & 1);
  v10[v12] = (char)v16;
  v17 = v1 + *(int *)(a1 + 80);
  v18 = (_QWORD *)v1;
  v19 = *(unsigned int *)(v1 + 28);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 32);
  v103 = *(_QWORD *)(a1 + 24);
  v104 = v7;
  v21 = v20(v17, v19, v7);
  if ((v21 & 1) != 0)
  {
    v10[v12] = 1;
  }
  else if (!v16 && *(_WORD *)(v1 + *(int *)(a1 + 84)))
  {
    v16 = &v96;
    v134 = 0;
    *(_QWORD *)&v150 = *(_QWORD *)(v1 + 28);
    DWORD2(v150) = *(_DWORD *)(v1 + 12);
    MEMORY[0x24BDAC7A8](v21);
    v95[2] = v104;
    v95[3] = v103;
    v95[4] = &v134;
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Attribute<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    v12 = v22;
    type metadata accessor for Attribute();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v7 = v129;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v150, (uint64_t)partial apply for closure #1 in ShapeStyledDisplayList.updateValue(), (uint64_t)v95, TupleTypeMetadata3, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v24);
    v129 = v7;
    v25 = ++static DisplayList.Version.lastValue;
    if (v134 != 1)
      goto LABEL_11;
    goto LABEL_8;
  }
  v134 = 1;
  v25 = ++static DisplayList.Version.lastValue;
LABEL_8:
  v26 = (2 * ((33 * (v25 >> 16)) ^ v25)) | 1;
  if (!v25)
    LOWORD(v26) = 0;
  *(_WORD *)((char *)v18 + *(int *)(a1 + 84)) = v26;
LABEL_11:
  v106 = a1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v31 = *MEMORY[0x24BE096C0];
  if (CurrentAttribute == (_DWORD)v31)
  {
    __break(1u);
LABEL_25:
    LODWORD(v115) = v28;
    LODWORD(v114) = v29;
    LODWORD(v113) = v30;
    swift_once();
    v30 = v113;
    v29 = v114;
    LOBYTE(v28) = v115;
LABEL_23:
    v133[0] = byte_254266040;
    *(_QWORD *)&v135 = v10;
    *((_QWORD *)&v135 + 1) = v25;
    *(_QWORD *)&v136 = v31;
    *((_QWORD *)&v136 + 1) = v12;
    *(_QWORD *)&v137 = v7;
    *((_QWORD *)&v137 + 1) = v129;
    *(_QWORD *)&v138 = v128;
    *((_QWORD *)&v138 + 1) = v127;
    v85 = v117;
    v84 = v118;
    *(_QWORD *)&v139 = v126;
    *((_QWORD *)&v139 + 1) = v118;
    *(_QWORD *)&v140 = v117;
    v86 = v116;
    *((_QWORD *)&v140 + 1) = v116;
    LODWORD(v141) = TupleTypeMetadata2;
    WORD2(v141) = (_WORD)v16;
    *((CGFloat *)&v141 + 1) = v2;
    *(CGFloat *)&v142 = v3;
    *((CGFloat *)&v142 + 1) = v4;
    v143 = *(unint64_t *)&v5;
    LODWORD(v144) = 0;
    *((CGFloat *)&v144 + 1) = v2;
    *(CGFloat *)&v145 = v3;
    *((CGFloat *)&v145 + 1) = v4;
    *(CGFloat *)&v146 = v5;
    *((_QWORD *)&v146 + 1) = v125;
    v147 = xmmword_23527E880;
    *(_QWORD *)&v148 = 0;
    BYTE10(v148) = 0;
    WORD4(v148) = 0;
    HIDWORD(v148) = v29;
    LOBYTE(v149[0]) = v28;
    DWORD1(v149[0]) = v30;
    *((_QWORD *)&v149[0] + 1) = static GraphicsBlendMode.normal;
    LOBYTE(v149[1]) = byte_254266040;
    DWORD1(v149[1]) = 1065353216;
    BYTE8(v149[1]) = 0;
    LOBYTE(v150) = 0;
    v87 = *((unsigned int *)v18 + 4);
    v88 = v28;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v150, v87, (uint64_t)&v165);
    LOBYTE(v150) = v88;
    _ShapeStyle_RenderedLayers.commit(shape:options:)((uint64_t)&v135, (char *)&v150, (uint64_t)&v130);
    *(_QWORD *)&v150 = v130;
    WORD4(v150) = v131;
    BYTE10(v150) = v132;
    AGGraphSetOutputValue();
    outlined consume of _ShapeStyle_RenderedShape.Shape((uint64_t)v123, v122, v119, v121, v120, v129, v128, v127, v126, v84, v85, v86, TupleTypeMetadata2);
    swift_bridgeObjectRelease();
    v162 = v147;
    v163 = v148;
    v164[0] = v149[0];
    *(_OWORD *)((char *)v164 + 9) = *(_OWORD *)((char *)v149 + 9);
    v158 = v143;
    v159 = v144;
    v160 = v145;
    v161 = v146;
    v154 = v139;
    v155 = v140;
    v156 = v141;
    v157 = v142;
    v150 = v135;
    v151 = v136;
    v152 = v137;
    v153 = v138;
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v150);
    v89 = v166;
    v90 = v167;
    v91 = v168;
    v93 = v169;
    v92 = v170;
    swift_release();
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v89, *((uint64_t *)&v89 + 1), v90, *((uint64_t *)&v90 + 1), v91, *((uint64_t *)&v91 + 1), v93, *((uint64_t *)&v93 + 1), v92);
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v124, v101);
  }
  v124 = v10;
  v125 = v25;
  v101 = TupleTypeMetadata2;
  v32 = AGCreateWeakAttribute();
  v114 = HIDWORD(v32);
  v115 = v32;
  v33 = AGCreateWeakAttribute();
  v112 = HIDWORD(v33);
  v113 = v33;
  v34 = AGCreateWeakAttribute();
  v110 = HIDWORD(v34);
  v111 = v34;
  v35 = AGCreateWeakAttribute();
  v108 = HIDWORD(v35);
  v109 = v35;
  v36 = AGCreateWeakAttribute();
  v107 = HIDWORD(v36);
  v37 = v18;
  v38 = AGCreateWeakAttribute();
  v39 = v38;
  v40 = HIDWORD(v38);
  v41 = (double *)AGGraphGetValue();
  v42 = *v41;
  v43 = v41[1];
  v44 = (double *)AGGraphGetValue();
  v45 = *v44;
  v46 = v44[1];
  v48 = v103;
  v47 = v104;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v103 + 24))(v104, v103) & 1) == 0)
    type metadata accessor for CGSize(0);
  v49 = (double *)AGGraphGetValue();
  v51 = *v49;
  v50 = v49[1];
  _threadGeometryProxyData();
  *(_QWORD *)&v135 = __PAIR64__(v114, v115);
  *((_QWORD *)&v135 + 1) = __PAIR64__(v112, v113);
  *(_QWORD *)&v136 = __PAIR64__(v110, v111);
  *((_QWORD *)&v136 + 1) = __PAIR64__(v108, v109);
  v96 = v40;
  v97 = v36;
  *(_QWORD *)&v137 = __PAIR64__(v107, v36);
  *((_QWORD *)&v137 + 1) = __PAIR64__(v40, v39);
  LODWORD(v138) = v125;
  _setThreadGeometryProxyData();
  v52 = v129;
  closure #2 in ShapeStyledDisplayList.updateValue()((uint64_t)v124, v47, v48, (double *)&v150, v51, v50);
  if (!v52)
  {
    v53 = v47;
    v54 = v42 - v45;
    v55 = v43 - v46;
    _setThreadGeometryProxyData();
    v122 = *((_QWORD *)&v150 + 1);
    v123 = (char *)v150;
    v121 = *((_QWORD *)&v151 + 1);
    v119 = v151;
    v120 = v152;
    v128 = v153;
    v129 = *((_QWORD *)&v152 + 1);
    v126 = v154;
    v127 = *((_QWORD *)&v153 + 1);
    v117 = v155;
    v118 = *((_QWORD *)&v154 + 1);
    v116 = *((_QWORD *)&v155 + 1);
    v98 = v156;
    v56 = *((double *)&v157 + 1);
    v99 = *(double *)&v157;
    v100 = *((double *)&v156 + 1);
    v57 = *(double *)&v158;
    v105 = v37;
    v165 = *v37;
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    v169 = 0u;
    v170 = 0x80000000;
    v58 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 48);
    swift_retain();
    if ((v58(v53, v48) & 1) != 0)
    {
      _threadGeometryProxyData();
      *(_QWORD *)&v135 = __PAIR64__(v114, v115);
      *((_QWORD *)&v135 + 1) = __PAIR64__(v112, v113);
      *(_QWORD *)&v136 = __PAIR64__(v110, v111);
      *((_QWORD *)&v136 + 1) = __PAIR64__(v108, v109);
      *(_QWORD *)&v137 = __PAIR64__(v107, v97);
      *((_QWORD *)&v137 + 1) = __PAIR64__(v96, v39);
      LODWORD(v138) = v125;
      _setThreadGeometryProxyData();
      closure #3 in ShapeStyledDisplayList.updateValue()((uint64_t)v124, v53, v48, (double *)&v150, v51, v50);
      _setThreadGeometryProxyData();
      v59 = v150;
      v60 = v151;
      v61 = v152;
      v62 = v153;
      v63 = v156;
      v64 = *((double *)&v156 + 1);
      v66 = v157;
      v65 = *(double *)&v158;
      if ((v156 & 0xE00000) != 0x800000
        || *((_QWORD *)&v150 + 1) | (unint64_t)v150 | (unint64_t)v151 | *((_QWORD *)&v151 + 1) | (unint64_t)v152 | *((_QWORD *)&v152 + 1) | (unint64_t)v153 | *((_QWORD *)&v153 + 1) | (unint64_t)v154 | *((_QWORD *)&v154 + 1) | (unint64_t)v155 | *((_QWORD *)&v155 + 1)
        || (_DWORD)v156 != 0x800000)
      {
        v113 = *((_QWORD *)&v154 + 1);
        v114 = v154;
        v111 = *((_QWORD *)&v155 + 1);
        v112 = v155;
        v115 = *((_QWORD *)&v153 + 1);
        outlined copy of _ShapeStyle_RenderedShape.Shape(v150, *((uint64_t *)&v150 + 1), v151, *((uint64_t *)&v151 + 1), v152, *((uint64_t *)&v152 + 1), v153, *((uint64_t *)&v153 + 1), v154, *((uint64_t *)&v154 + 1), v155, *((uint64_t *)&v155 + 1), v156);
        v172.origin.x = v64;
        *(_OWORD *)&v172.origin.y = v66;
        v172.size.height = v65;
        v173 = CGRectOffset(v172, v54, v55);
        x = v173.origin.x;
        y = v173.origin.y;
        width = v173.size.width;
        height = v173.size.height;
        v71 = v61;
        v72 = *((_DWORD *)v105 + 2);
        v73 = *((_QWORD *)&v60 + 1);
        v74 = v60;
        v75 = *(_WORD *)((char *)v105 + *(int *)(v106 + 84));
        v76 = *((unsigned __int8 *)v105 + 48);
        v77 = *((_DWORD *)v105 + 10);
        if (one-time initialization token for normal != -1)
        {
          v109 = v61;
          LODWORD(v110) = v63;
          LODWORD(v108) = v72;
          LODWORD(v107) = v76;
          LODWORD(v104) = v77;
          swift_once();
          v77 = v104;
          LOBYTE(v76) = v107;
          v72 = v108;
          v73 = *((_QWORD *)&v60 + 1);
          v74 = v60;
          v63 = v110;
          v71 = v109;
        }
        LOBYTE(v130) = byte_254266040;
        v135 = v59;
        *(_QWORD *)&v136 = v74;
        *((_QWORD *)&v136 + 1) = v73;
        *(_QWORD *)&v137 = v71;
        *((_QWORD *)&v137 + 1) = *((_QWORD *)&v61 + 1);
        *(_QWORD *)&v138 = v62;
        *((_QWORD *)&v138 + 1) = v115;
        v107 = *((_QWORD *)&v59 + 1);
        v108 = v59;
        *(_QWORD *)&v139 = v114;
        v109 = v62;
        v110 = *((_QWORD *)&v61 + 1);
        v79 = v111;
        v78 = v112;
        *((_QWORD *)&v139 + 1) = v113;
        *(_QWORD *)&v140 = v112;
        *((_QWORD *)&v140 + 1) = v111;
        LODWORD(v141) = v63;
        WORD2(v141) = v75;
        *((CGFloat *)&v141 + 1) = x;
        *(CGFloat *)&v142 = y;
        *((CGFloat *)&v142 + 1) = width;
        v143 = *(unint64_t *)&height;
        LODWORD(v144) = 0;
        *((CGFloat *)&v144 + 1) = x;
        *(CGFloat *)&v145 = y;
        *((CGFloat *)&v145 + 1) = width;
        *(CGFloat *)&v146 = height;
        *((_QWORD *)&v146 + 1) = v125;
        v147 = xmmword_23527E880;
        *(_QWORD *)&v148 = 0;
        BYTE10(v148) = 0;
        WORD4(v148) = 0;
        HIDWORD(v148) = v72;
        LOBYTE(v149[0]) = v76;
        DWORD1(v149[0]) = v77;
        *((_QWORD *)&v149[0] + 1) = static GraphicsBlendMode.normal;
        LOBYTE(v149[1]) = byte_254266040;
        DWORD1(v149[1]) = 1065353216;
        BYTE8(v149[1]) = 0;
        v133[0] = 1;
        v80 = *(unsigned int *)(v61 + 16);
        v81 = v71;
        v82 = v73;
        v83 = v74;
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
        _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v133, v80, (uint64_t)&v165);
        outlined consume of _ShapeStyle_RenderedShape.Shape(v108, v107, v83, v82, v81, v110, v109, v115, v114, v113, v78, v79, v63);
        v162 = v147;
        v163 = v148;
        v164[0] = v149[0];
        *(_OWORD *)((char *)v164 + 9) = *(_OWORD *)((char *)v149 + 9);
        v158 = v143;
        v159 = v144;
        v160 = v145;
        v161 = v146;
        v154 = v139;
        v155 = v140;
        v156 = v141;
        v157 = v142;
        v150 = v135;
        v151 = v136;
        v152 = v137;
        v153 = v138;
        outlined release of _ShapeStyle_RenderedShape((uint64_t)&v150);
      }
    }
    LODWORD(TupleTypeMetadata2) = v98;
    v10 = v123;
    v25 = v122;
    v31 = v119;
    v12 = v121;
    v7 = v120;
    outlined copy of _ShapeStyle_RenderedShape.Shape((uint64_t)v123, v122, v119, v121, v120, v129, v128, v127, v126, v118, v117, v116, v98);
    v174.origin.y = v99;
    v174.origin.x = v100;
    v174.size.width = v56;
    v174.size.height = v57;
    v175 = CGRectOffset(v174, v54, v55);
    v2 = v175.origin.x;
    v3 = v175.origin.y;
    v4 = v175.size.width;
    v5 = v175.size.height;
    v18 = v105;
    v29 = *((_DWORD *)v105 + 2);
    LOWORD(v16) = *(_WORD *)((char *)v105 + *(int *)(v106 + 84));
    v28 = *((unsigned __int8 *)v105 + 48);
    v30 = *((_DWORD *)v105 + 10);
    if (one-time initialization token for normal == -1)
      goto LABEL_23;
    goto LABEL_25;
  }
  result = _setThreadGeometryProxyData();
  __break(1u);
  return result;
}

uint64_t closure #2 in ShapeStyledDisplayList.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v13);
  v14 = (*(double (**)(double *, uint64_t, uint64_t, double, double))(a3 + 40))(a4, a2, a3, a5, a6);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  a4[13] = v14;
  *((_QWORD *)a4 + 14) = v16;
  *((_QWORD *)a4 + 15) = v18;
  *((_QWORD *)a4 + 16) = v20;
  return result;
}

uint64_t closure #3 in ShapeStyledDisplayList.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v13);
  v14 = (*(double (**)(double *, uint64_t, uint64_t, double, double))(a3 + 56))(a4, a2, a3, a5, a6);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  a4[13] = v14;
  *((_QWORD *)a4 + 14) = v16;
  *((_QWORD *)a4 + 15) = v18;
  *((_QWORD *)a4 + 16) = v20;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ShapeStyledDisplayList<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t ShapeStyledResponderFilter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Value;
  char v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  __int128 *v34;
  char v35;
  __int128 v36;
  float64x2_t *v37;
  char v38;
  uint64_t v39;
  char v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float64x2_t v60;
  __int128 v61[2];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v54 = *(char **)(a1 + 24);
  v53 = type metadata accessor for ShapeStyledResponderData(255, v5, (uint64_t)v54, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v58 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v59 = TupleTypeMetadata2;
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v52 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v47 - v9;
  v11 = swift_getTupleTypeMetadata2();
  v56 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v47 - v15;
  v57 = v17;
  v18 = *(int *)(v17 + 48);
  v48 = *(_DWORD *)(v4 + 8);
  v49 = *(_DWORD *)(v4 + 12);
  v50 = *(_DWORD *)(v4 + 16);
  v47 = v4;
  v19 = *(_QWORD *)(v4 + 24);
  Value = AGGraphGetValue();
  v22 = v21;
  v23 = *(_QWORD *)(v5 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v24(v16, Value, v5);
  v16[v18] = v22 & 1;
  v25 = (uint64_t *)AGGraphGetValue();
  LOBYTE(v18) = v22 | v26;
  v27 = *v25;
  v55 = v16;
  v24(v13, (uint64_t)v16, v5);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v10, v13, v5);
  *(_QWORD *)&v10[*(int *)(type metadata accessor for ShapeStyledResponderData(0, v5, (uint64_t)v54, v28) + 36)] = v27;
  v29 = v59;
  LOBYTE(v18) = v18 & 1;
  v10[*(int *)(v59 + 48)] = v18;
  v30 = *(int *)(v29 + 48);
  v31 = v53;
  v51 = *(_QWORD *)(v53 - 8);
  v32 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v33 = (uint64_t)v52;
  v54 = v10;
  v32(v52, v10, v53);
  *(_BYTE *)(v33 + v30) = v18;
  v34 = (__int128 *)AGGraphGetValue();
  v48 = v35 & 1;
  v36 = v34[1];
  v61[0] = *v34;
  v61[1] = v36;
  v37 = (float64x2_t *)AGGraphGetValue();
  LODWORD(v30) = v38 & 1;
  v60 = *v37;
  v39 = AGGraphGetValue();
  v41 = v40 & 1;
  v62 = *(_QWORD *)v39;
  v42 = *(_OWORD *)(v39 + 24);
  v63 = *(_OWORD *)(v39 + 8);
  v64 = v42;
  swift_beginAccess();
  v44 = type metadata accessor for ContentResponderHelper(0, v31, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, v43);
  swift_bridgeObjectRetain();
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)(v33, v18, v61, v48, &v60, v30, (uint64_t)&v62, v41, v19, v44);
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v33, v31);
  type metadata accessor for [ViewResponder](0);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_235283250;
    *(_QWORD *)(v45 + 32) = *(_QWORD *)(v47 + 24);
    v62 = v45;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v58 + 8))(v54, v59);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v55, v57);
}

uint64_t ShapeStyledResponderData.contains(points:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v13 = *(_QWORD *)(v5 + *(int *)(a2 + 36));
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 64))(&v13, v10, v11);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)(v11 + 8) + 8))(a1, v10, a4, a5);
  *a3 = 0;
  return result;
}

uint64_t ShapeStyledResponderData.contentPath(size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  char v12;
  __int128 v13;
  _OWORD v14[2];
  char v15;

  *(_QWORD *)&v14[0] = *(_QWORD *)(v4 + *(int *)(a1 + 36));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v9 + 64))(v14, v8, v9);
  if ((result & 1) != 0)
  {
    v11 = 0uLL;
    v12 = 6;
    v13 = 0uLL;
  }
  else
  {
    result = (uint64_t)(*(_QWORD *(**)(_OWORD *__return_ptr, uint64_t, double, double))(*(_QWORD *)(v9 + 8)
                                                                                               + 16))(v14, v8, a3, a4);
    v11 = v14[0];
    v13 = v14[1];
    v12 = v15;
  }
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 32) = v12;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:) in conformance ShapeStyledResponderData<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double result;
  __int128 v6;
  _OWORD v7[2];
  char v8;

  ShapeStyledResponderData.contentPath(size:)(a1, (uint64_t)v7, a3, a4);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

double protocol witness for ShapeStyledLeafView.backgroundShape(in:) in conformance StyledTextContentView(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = 0.0;
  *(_DWORD *)(a1 + 96) = 0x800000;
  return result;
}

BOOL protocol witness for ShapeStyledLeafView.isClear(styles:) in conformance StyledTextContentView(uint64_t *a1)
{
  return specialized ShapeStyledLeafView.isClear(styles:)(*a1);
}

uint64_t protocol witness for ContentResponder.contains(points:size:) in conformance StyledTextContentView@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  uint64_t v4;

  return specialized ShapeStyledLeafView.contains(points:size:)(a1, *(_QWORD *)(v4 + 8), a2, a3, a4);
}

BOOL protocol witness for ContentResponder.contentPath(size:) in conformance StyledTextContentView@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  double (*v8)(uint64_t);
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _BOOL8 result;
  double v20;
  double v21;
  double v22;
  double v23;
  char v24;
  CGRect v25;

  v7 = *(_QWORD *)(v3 + 8);
  if (v7)
  {
    v8 = *(double (**)(uint64_t))(*(_QWORD *)v7 + 112);
    v9 = swift_retain();
    v10 = v8(v9);
    v14 = CGRect.outset(by:)(v10, v11, v12, v13, 0.0, 0.0, a2, a3);
    v16 = v15;
    a2 = v17;
    a3 = v18;
    swift_release();
  }
  else
  {
    v14 = 0.0;
    v16 = 0.0;
  }
  v25.origin.x = v14;
  v25.origin.y = v16;
  v25.size.width = a2;
  v25.size.height = a3;
  result = CGRectIsNull(v25);
  if (result)
    v20 = 0.0;
  else
    v20 = v14;
  if (result)
    v21 = 0.0;
  else
    v21 = v16;
  if (result)
    v22 = 0.0;
  else
    v22 = a2;
  if (result)
    v23 = 0.0;
  else
    v23 = a3;
  *(double *)a1 = v20;
  *(double *)(a1 + 8) = v21;
  if (result)
    v24 = 6;
  else
    v24 = 0;
  *(double *)(a1 + 16) = v22;
  *(double *)(a1 + 24) = v23;
  *(_BYTE *)(a1 + 32) = v24;
  return result;
}

uint64_t protocol witness for ShapeStyledLeafView.mustUpdate(data:position:) in conformance _BackgroundStyleModifier<A>()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

void protocol witness for ContentResponder.contains(points:size:) in conformance _BackgroundStyleModifier<A>(double *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  ShapeStyledLeafView.contains(points:size:)(a1, a2, (uint64_t)&protocol witness table for _BackgroundStyleModifier<A>, a3, a4, a5);
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _BackgroundStyleModifier<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for _BackgroundStyleModifier<A>, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

void protocol witness for ContentResponder.contains(points:size:) in conformance _BackgroundShapeModifier<A, B>(double *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  ShapeStyledLeafView.contains(points:size:)(a1, a2, (uint64_t)&protocol witness table for _BackgroundShapeModifier<A, B>, a3, a4, a5);
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _BackgroundShapeModifier<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for _BackgroundShapeModifier<A, B>, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t type metadata accessor for ShapeStyledDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShapeStyledDisplayList);
}

void protocol witness for ContentResponder.contains(points:size:) in conformance _ShapeView<A, B>(double *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  ShapeStyledLeafView.contains(points:size:)(a1, a2, (uint64_t)&protocol witness table for _ShapeView<A, B>, a3, a4, a5);
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _ShapeView<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

void protocol witness for ContentResponder.contains(points:size:) in conformance AnimatedShape<A>(double *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  ShapeStyledLeafView.contains(points:size:)(a1, a2, (uint64_t)&protocol witness table for AnimatedShape<A>, a3, a4, a5);
}

double protocol witness for ContentResponder.contentPath(size:) in conformance AnimatedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for AnimatedShape<A>, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t type metadata accessor for ShapeStyledResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShapeStyledResponderFilter);
}

BOOL specialized ShapeStyledLeafView.isClear(styles:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Bool v2;
  Swift::Bool v3;
  char v5;
  uint64_t v6;

  v1 = *a1;
  v6 = *a1;
  v5 = 0;
  v2 = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  v3 = 0;
  if (v2)
  {
    v6 = v1;
    v5 = 1;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  }
  return v3;
}

BOOL specialized ShapeStyledLeafView.isClear(styles:)(uint64_t a1)
{
  Swift::Bool v2;
  Swift::Bool v3;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = 0;
  v2 = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  v3 = 0;
  if (v2)
  {
    v6 = a1;
    v5 = 1;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  }
  return v3;
}

uint64_t dispatch thunk of static ShapeStyledLeafView.animatesSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.mustUpdate(data:position:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.shape(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of static ShapeStyledLeafView.hasBackground.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.backgroundShape(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.isClear(styles:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t type metadata completion function for ShapeStyledResponderData()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShapeStyledResponderData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ShapeStyledResponderData(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeStyledResponderData(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234BD72B8 + 4 * byte_23528AFF8[v10]))();
  }
}

void storeEnumTagSinglePayload for ShapeStyledResponderData(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234BD7430()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234BD74A4);
}

void sub_234BD7438(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234BD7440);
  JUMPOUT(0x234BD74A4);
}

void sub_234BD7480()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234BD74A4);
}

void sub_234BD7488()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234BD74A4);
}

uint64_t sub_234BD7490(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234BD74A4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234BD74A0);
    JUMPOUT(0x234BD749CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShapeStyledResponderData);
}

uint64_t initializeWithCopy for ShapeStyledResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShapeStyledResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShapeStyledResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t type metadata instantiation function for ShapeStyledDisplayList()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ShapeStyledDisplayList()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShapeStyledDisplayList(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 1;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 49) & ~v6)) & 0xFFFFFFFFFFFFFFFELL) + 2 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFCLL);
    v13 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *v12 = *v13;
    v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v16 = *v17;
    v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v18 = *v19;
    v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
    v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v20 = *v21;
    v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v22 = *v23;
    v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFCLL);
    v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v24 = *v25;
    v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v26 = *v27;
    v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFCLL);
    v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v28 = *v29;
    v30 = ((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v31 = ((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)v30 = *(_DWORD *)v31;
    *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
    v32 = (v30 + v6 + 5) & ~v6;
    v33 = (v31 + v6 + 5) & ~v6;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v34(v32, v33, AssociatedTypeWitness);
    *(_WORD *)((v7 + v32) & 0xFFFFFFFFFFFFFELL) = *(_WORD *)((v7 + v33) & 0xFFFFFFFFFFFFFELL);
  }
  return a1;
}

uint64_t destroy for ShapeStyledDisplayList(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = a1 + 11;
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(((((((((((((((((((((v1 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)+ 5) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

_QWORD *initializeWithCopy for ShapeStyledDisplayList(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 5 + v21) & ~v25;
  v27 = (v25 + 5 + v22) & ~v25;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_retain();
  v28(v26, v27, AssociatedTypeWitness);
  *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v26) & 0xFFFFFFFFFFFFFELL) = *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v27) & 0xFFFFFFFFFFFFFELL);
  return a1;
}

_QWORD *assignWithCopy for ShapeStyledDisplayList(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (unint64_t)a2 + 11;
  *a1 = *a2;
  v4 = (unint64_t)a1 + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 5 + v21) & ~v25;
  v27 = (v25 + 5 + v22) & ~v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24))(v26, v27, AssociatedTypeWitness);
  *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v26) & 0xFFFFFFFFFFFFFELL) = *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v27) & 0xFFFFFFFFFFFFFELL);
  return a1;
}

_QWORD *initializeWithTake for ShapeStyledDisplayList(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 5 + v21) & ~v25;
  v27 = (v25 + 5 + v22) & ~v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v26, v27, AssociatedTypeWitness);
  *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v26) & 0xFFFFFFFFFFFFFELL) = *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v27) & 0xFFFFFFFFFFFFFELL);
  return a1;
}

_QWORD *assignWithTake for ShapeStyledDisplayList(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (unint64_t)a2 + 11;
  *a1 = *a2;
  v4 = (unint64_t)a1 + 11;
  swift_release();
  *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 5 + v21) & ~v25;
  v27 = (v25 + 5 + v22) & ~v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40))(v26, v27, AssociatedTypeWitness);
  *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v26) & 0xFFFFFFFFFFFFFELL) = *(_WORD *)((*(_QWORD *)(v24 + 64) + 1 + v27) & 0xFFFFFFFFFFFFFELL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeStyledDisplayList(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 49) & ~v7) + 1) & 0xFFFFFFFFFFFFFFFELL) + 2;
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8))
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_24:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((((((((((((((((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                        + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                      + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                              + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                            + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                          + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                        + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                      + v7
                                                                      + 5) & ~v7);
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
  }
  v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((_BYTE *)a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = *a1;
    else
      v14 = *(_DWORD *)a1;
  }
  else
  {
    v14 = 0;
  }
  return v6 + (v14 | v13) + 1;
}

void storeEnumTagSinglePayload for ShapeStyledDisplayList(_WORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFEu)
    v7 = 2147483646;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64)
       + ((*(unsigned __int8 *)(v6 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 1) & 0xFFFFFFFFFFFFFFFELL)
     + 2;
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (((*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 49) & ~*(unsigned __int8 *)(v6 + 80)) + 1) & 0xFFFFFFFE) != 0xFFFFFFFE)
      {
        bzero(a1, v8);
        *a1 = v10 & ~(-1 << (8 * v8));
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t instantiation function for generic protocol witness table for ShapeStyledDisplayList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyledDisplayList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ShapeStyledDisplayList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ShapeStyledResponderFilter<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in ShapeStyledDisplayList.updateValue()()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(v0 + 32);
  result = AGGraphAnyInputsChanged();
  *v1 = result;
  return result;
}

uint64_t outlined release of Path(uint64_t a1)
{
  outlined consume of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW29VXEfU_AA14LinearGradientV_TG5AF01_yZ0VyAF14LinearGradientVGAF01_Y6InputsVTf1cn_nTm(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v26 = v6;
    v34 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v11 = v26;
    v12 = 0;
    result = v34;
    v27 = a1 + 32;
    do
    {
      v13 = (uint64_t *)(v27 + 16 * v12);
      v14 = v13[1];
      v28 = *v13;
      v29 = result;
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        swift_bridgeObjectRetain_n();
        v16 = v14 + 40;
        v17 = v15;
        do
        {
          (*(void (**)(void))(*(_QWORD *)v16 + 16))();
          v16 += 32;
          --v17;
        }
        while (v17);
        v32 = 0;
        v33 = 0;
        swift_bridgeObjectRetain();
        v18 = (uint64_t *)(v14 + 48);
        do
        {
          v19 = *(v18 - 1);
          v20 = *v18;
          v18 += 4;
          v31 = a2;
          (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v19 + 8))(&v32, &v31, v20, a3, a5);
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease_n();
        v21 = v32;
        v22 = v33;
        v11 = v26;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease_n();
        v21 = 0;
        v22 = 0;
      }
      result = v29;
      v34 = v29;
      v24 = *(_QWORD *)(v29 + 16);
      v23 = *(_QWORD *)(v29 + 24);
      if (v24 >= v23 >> 1)
      {
        v30 = v22;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v22 = v30;
        v11 = v26;
        result = v34;
      }
      ++v12;
      *(_QWORD *)(result + 16) = v24 + 1;
      v25 = (_QWORD *)(result + 24 * v24);
      v25[4] = v28;
      v25[5] = v21;
      v25[6] = v22;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t static EnvironmentalModifier._requiresMainThread.getter()
{
  return 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v36;
  char v37;
  uint64_t v38;
  unsigned int v40;
  _QWORD v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v64);
  v7 = v64;
  v8 = v65;
  v9 = v66;
  v10 = HIDWORD(v66);
  v11 = *(_OWORD *)(a2 + 48);
  v60 = *(_OWORD *)(a2 + 32);
  v61 = v11;
  v62 = *(_OWORD *)(a2 + 64);
  v63 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v58 = *(_OWORD *)a2;
  v59 = v12;
  outlined retain of _ViewInputs(a2);
  v37 = v9;
  LOBYTE(v64) = v9;
  v28 = a1;
  v38 = v8;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v42, (uint64_t)&v64, a1, (uint64_t)&v58, v7, v8, v9 | ((unint64_t)v10 << 32));
  v40 = v42;
  v26 = v65;
  v27 = v64;
  v36 = v66;
  v13 = v58;
  v14 = v59;
  v32 = HIDWORD(v59);
  v33 = DWORD2(v59);
  v15 = v60;
  v34 = DWORD2(v58);
  v16 = *((_QWORD *)&v60 + 1);
  v17 = v61;
  v30 = HIDWORD(v61);
  v31 = DWORD2(v61);
  v18 = v62;
  v19 = DWORD1(v62);
  v20 = DWORD2(v62);
  v21 = HIDWORD(v62);
  v29 = v63;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v42 = v13;
  v43 = v34;
  v44 = v14;
  v45 = v33;
  v46 = v32;
  v48 = HIDWORD(v15);
  v49 = v16;
  v50 = v17;
  v51 = v31;
  v52 = v30;
  v53 = v18;
  v54 = v19;
  v55 = v20;
  v56 = v21;
  v57 = v29;
  v64 = v13;
  LODWORD(v65) = v34;
  v66 = v14;
  v67 = v33;
  v68 = v32;
  v69 = 0;
  v70 = HIDWORD(v15);
  v71 = v16;
  v72 = v17;
  v73 = v31;
  v74 = v30;
  v75 = v18;
  v76 = v19;
  v77 = v20;
  v78 = v21;
  v79 = v29;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v40, (uint64_t)&v64, a3, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v47 = v15;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v41, &v42);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v23 = v41[0];
  v24 = v41[1];
  if ((v36 & 1) == 0)
  {
    LOBYTE(v42) = v37;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v28, v7, v38, v37, v27, v26);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v23;
  a4[1] = v24;
  return result;
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v36;
  char v37;
  uint64_t v38;
  unsigned int v40;
  _QWORD v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v64);
  v7 = v64;
  v8 = v65;
  v9 = v66;
  v10 = HIDWORD(v66);
  v11 = *(_OWORD *)(a2 + 48);
  v60 = *(_OWORD *)(a2 + 32);
  v61 = v11;
  v62 = *(_OWORD *)(a2 + 64);
  v63 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v58 = *(_OWORD *)a2;
  v59 = v12;
  outlined retain of _ViewInputs(a2);
  v37 = v9;
  LOBYTE(v64) = v9;
  v28 = a1;
  v38 = v8;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v42, (uint64_t)&v64, a1, (uint64_t)&v58, v7, v8, v9 | ((unint64_t)v10 << 32));
  v40 = v42;
  v26 = v65;
  v27 = v64;
  v36 = v66;
  v13 = v58;
  v14 = v59;
  v32 = HIDWORD(v59);
  v33 = DWORD2(v59);
  v15 = v60;
  v34 = DWORD2(v58);
  v16 = *((_QWORD *)&v60 + 1);
  v17 = v61;
  v30 = HIDWORD(v61);
  v31 = DWORD2(v61);
  v18 = v62;
  v19 = DWORD1(v62);
  v20 = DWORD2(v62);
  v21 = HIDWORD(v62);
  v29 = v63;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v42 = v13;
  v43 = v34;
  v44 = v14;
  v45 = v33;
  v46 = v32;
  v48 = HIDWORD(v15);
  v49 = v16;
  v50 = v17;
  v51 = v31;
  v52 = v30;
  v53 = v18;
  v54 = v19;
  v55 = v20;
  v56 = v21;
  v57 = v29;
  v64 = v13;
  LODWORD(v65) = v34;
  v66 = v14;
  v67 = v33;
  v68 = v32;
  v69 = 0;
  v70 = HIDWORD(v15);
  v71 = v16;
  v72 = v17;
  v73 = v31;
  v74 = v30;
  v75 = v18;
  v76 = v19;
  v77 = v20;
  v78 = v21;
  v79 = v29;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v40, (uint64_t)&v64, a3, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v47 = v15;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v41, &v42);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v23 = v41[0];
  v24 = v41[1];
  if ((v36 & 1) == 0)
  {
    LOBYTE(v42) = v37;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v28, v7, v38, v37, v27, v26);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v23;
  a4[1] = v24;
  return result;
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v36;
  char v37;
  uint64_t v38;
  unsigned int v40;
  _QWORD v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v64);
  v7 = v64;
  v8 = v65;
  v9 = v66;
  v10 = HIDWORD(v66);
  v11 = *(_OWORD *)(a2 + 48);
  v60 = *(_OWORD *)(a2 + 32);
  v61 = v11;
  v62 = *(_OWORD *)(a2 + 64);
  v63 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v58 = *(_OWORD *)a2;
  v59 = v12;
  outlined retain of _ViewInputs(a2);
  v37 = v9;
  LOBYTE(v64) = v9;
  v28 = a1;
  v38 = v8;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v42, (uint64_t)&v64, a1, (uint64_t)&v58, v7, v8, v9 | ((unint64_t)v10 << 32));
  v40 = v42;
  v26 = v65;
  v27 = v64;
  v36 = v66;
  v13 = v58;
  v14 = v59;
  v32 = HIDWORD(v59);
  v33 = DWORD2(v59);
  v15 = v60;
  v34 = DWORD2(v58);
  v16 = *((_QWORD *)&v60 + 1);
  v17 = v61;
  v30 = HIDWORD(v61);
  v31 = DWORD2(v61);
  v18 = v62;
  v19 = DWORD1(v62);
  v20 = DWORD2(v62);
  v21 = HIDWORD(v62);
  v29 = v63;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v42 = v13;
  v43 = v34;
  v44 = v14;
  v45 = v33;
  v46 = v32;
  v48 = HIDWORD(v15);
  v49 = v16;
  v50 = v17;
  v51 = v31;
  v52 = v30;
  v53 = v18;
  v54 = v19;
  v55 = v20;
  v56 = v21;
  v57 = v29;
  v64 = v13;
  LODWORD(v65) = v34;
  v66 = v14;
  v67 = v33;
  v68 = v32;
  v69 = 0;
  v70 = HIDWORD(v15);
  v71 = v16;
  v72 = v17;
  v73 = v31;
  v74 = v30;
  v75 = v18;
  v76 = v19;
  v77 = v20;
  v78 = v21;
  v79 = v29;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v40, (uint64_t)&v64, a3, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v47 = v15;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v41, &v42);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v23 = v41[0];
  v24 = v41[1];
  if ((v36 & 1) == 0)
  {
    LOBYTE(v42) = v37;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v28, v7, v38, v37, v27, v26);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v23;
  a4[1] = v24;
  return result;
}

uint64_t static EnvironmentalModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  void (*v31)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t AssociatedTypeWitness;
  int v54;
  _QWORD v56[2];
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v90);
  v17 = v90;
  v16 = v91;
  v18 = v92;
  v19 = HIDWORD(v92);
  v90 = v10;
  LODWORD(v91) = v11;
  v93 = *(_OWORD *)(a2 + 24);
  v92 = v12;
  v94 = v13;
  v95 = v14;
  v96 = *(_OWORD *)(a2 + 56);
  v97 = *(_QWORD *)(a2 + 72);
  v98 = v15;
  v37 = v19;
  v38 = v9;
  v57 = v9;
  v49 = v17;
  v50 = v16;
  v74 = v17;
  v75 = v16;
  v51 = v18;
  LOBYTE(v76) = v18;
  HIDWORD(v76) = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(v56, (uint64_t)&v58, &v57, (uint64_t)&v90, &v74, a5, a6);
  v54 = v56[0];
  v35 = v58;
  v36 = v59;
  v47 = v60;
  v48 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = v90;
  v21 = v92;
  v43 = v93;
  v44 = v91;
  v22 = *((_QWORD *)&v93 + 1);
  v42 = DWORD1(v93);
  v23 = v94;
  v24 = v95;
  v25 = DWORD1(v96);
  v26 = DWORD2(v96);
  v27 = HIDWORD(v96);
  v28 = HIDWORD(v97);
  v40 = v97;
  v41 = v96;
  v39 = v98;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v74 = v20;
  LODWORD(v75) = v44;
  v76 = v21;
  v77 = v43;
  v78 = v42;
  v81 = v23;
  v82 = v24;
  v83 = v41;
  v84 = v25;
  v85 = v26;
  v86 = v27;
  v87 = v40;
  v88 = v28;
  v89 = v39;
  v80 = HIDWORD(v22);
  v79 = 0;
  v57 = v54;
  v58 = v20;
  LODWORD(v59) = v44;
  v60 = v21;
  v61 = v43;
  v62 = v42;
  v63 = 0;
  v64 = HIDWORD(v22);
  v65 = v23;
  v66 = v24;
  v67 = v41;
  v68 = v25;
  v69 = v26;
  v70 = v27;
  v71 = v40;
  v72 = v28;
  v73 = v39;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v31 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v31(v56, &v57, &v58, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v79 = v22;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v56, (uint64_t)&v74);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v32 = v56[0];
  v33 = v56[1];
  if ((v47 & 1) == 0)
  {
    v58 = v35;
    v59 = v36;
    LODWORD(v56[0]) = v38;
    v74 = v49;
    v75 = v50;
    LOBYTE(v76) = v51;
    HIDWORD(v76) = v37;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)v56, &v74, v48);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a7 = v32;
  a7[1] = v33;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMonochromeEffect(int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v3;
  __int128 v7;
  unsigned __int8 v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v32);
  v7 = v32;
  v8 = v33;
  v9 = DWORD1(v33);
  v10 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v10;
  v30 = *(_OWORD *)(a2 + 64);
  v31 = *(_BYTE *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v26 = *(_OWORD *)a2;
  v27 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v32) = v8;
  v19 = a1;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v20, (uint64_t)&v32, a1, (uint64_t)&v26, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  v12 = v20;
  v17 = *((_QWORD *)&v32 + 1);
  v18 = v32;
  v13 = v33;
  v34 = v28;
  v35 = v29;
  v36 = v30;
  v37 = v31;
  v32 = v26;
  v33 = v27;
  LODWORD(a2) = AGSubgraphShouldRecordTree();
  v14 = outlined retain of _ViewListInputs((uint64_t)&v32);
  if ((_DWORD)a2)
  {
    v15 = AGSubgraphBeginTreeElement();
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v20 = v32;
    v21 = v33;
    a3(v15, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
    AGSubgraphEndTreeElement();
  }
  else
  {
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v20 = v32;
    v21 = v33;
    a3(v14, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  if ((v13 & 1) == 0)
  {
    LOBYTE(v20) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v19, v7, *((uint64_t *)&v7 + 1), v8, v18, v17);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v7;
  unsigned __int8 v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v32);
  v7 = v32;
  v8 = v33;
  v9 = DWORD1(v33);
  v10 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v10;
  v30 = *(_OWORD *)(a2 + 64);
  v31 = *(_BYTE *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v26 = *(_OWORD *)a2;
  v27 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v32) = v8;
  v19 = a1;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v20, (uint64_t)&v32, a1, (uint64_t)&v26, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  v12 = v20;
  v17 = *((_QWORD *)&v32 + 1);
  v18 = v32;
  v13 = v33;
  v34 = v28;
  v35 = v29;
  v36 = v30;
  v37 = v31;
  v32 = v26;
  v33 = v27;
  LODWORD(a2) = AGSubgraphShouldRecordTree();
  v14 = outlined retain of _ViewListInputs((uint64_t)&v32);
  if ((_DWORD)a2)
  {
    v15 = AGSubgraphBeginTreeElement();
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v20 = v32;
    v21 = v33;
    a3(v15, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
    AGSubgraphEndTreeElement();
  }
  else
  {
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v20 = v32;
    v21 = v33;
    a3(v14, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  if ((v13 & 1) == 0)
  {
    LOBYTE(v20) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v19, v7, *((uint64_t *)&v7 + 1), v8, v18, v17);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v7;
  unsigned __int8 v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v32);
  v7 = v32;
  v8 = v33;
  v9 = DWORD1(v33);
  v10 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v10;
  v30 = *(_OWORD *)(a2 + 64);
  v31 = *(_BYTE *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v26 = *(_OWORD *)a2;
  v27 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v32) = v8;
  v19 = a1;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v20, (uint64_t)&v32, a1, (uint64_t)&v26, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  v12 = v20;
  v17 = *((_QWORD *)&v32 + 1);
  v18 = v32;
  v13 = v33;
  v34 = v28;
  v35 = v29;
  v36 = v30;
  v37 = v31;
  v32 = v26;
  v33 = v27;
  LODWORD(a2) = AGSubgraphShouldRecordTree();
  v14 = outlined retain of _ViewListInputs((uint64_t)&v32);
  if ((_DWORD)a2)
  {
    v15 = AGSubgraphBeginTreeElement();
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v20 = v32;
    v21 = v33;
    a3(v15, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
    AGSubgraphEndTreeElement();
  }
  else
  {
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v20 = v32;
    v21 = v33;
    a3(v14, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  if ((v13 & 1) == 0)
  {
    LOBYTE(v20) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v19, v7, *((uint64_t *)&v7 + 1), v8, v18, v17);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 40);
  v46 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v44 = *(_BYTE *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v64);
  v17 = v64;
  v16 = v65;
  v18 = v66;
  v19 = HIDWORD(v66);
  v64 = v9;
  LODWORD(v65) = v10;
  v66 = v11;
  v67 = *(_OWORD *)(a2 + 24);
  v68 = v12;
  v69 = v46;
  v70 = v13;
  v71 = v14;
  v72 = v15;
  v73 = v44;
  v34 = v19;
  v35 = v8;
  v49 = v8;
  v43 = v17;
  v45 = v16;
  v51 = v17;
  v52 = v16;
  v47 = v18;
  LOBYTE(v53) = v18;
  HIDWORD(v53) = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v50, (uint64_t)&v61, &v49, (uint64_t)&v64, &v51, a5, a6);
  v20 = v50;
  v32 = v61;
  v33 = v62;
  v39 = v63;
  v42 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = v64;
  v38 = v65;
  v23 = v66;
  v24 = v67;
  v26 = v68;
  v25 = v69;
  v37 = v70;
  v36 = v71;
  v27 = v72;
  v28 = v73;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  LODWORD(v61) = v20;
  v51 = v22;
  LODWORD(v52) = v38;
  v53 = v23;
  v54 = v24;
  v55 = v26;
  v56 = v25;
  v57 = v37;
  v58 = v36;
  v59 = v27;
  v60 = v28;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v61, &v51, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v20, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v39 & 1) == 0)
  {
    v61 = v32;
    v62 = v33;
    v50 = v35;
    v51 = v43;
    v52 = v45;
    LOBYTE(v53) = v47;
    HIDWORD(v53) = v34;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v50, &v51, v42);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t specialized BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v12;
  int v13;
  uint64_t result;

  v12 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMonochromeEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMonochromeEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  swift_retain();
  v13 = Attribute.init<A>(body:value:flags:update:)();
  result = swift_release();
  *a1 = v13;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v12;
  int v13;
  uint64_t result;

  v12 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMultiplyEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMultiplyEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  swift_retain();
  v13 = Attribute.init<A>(body:value:flags:update:)();
  result = swift_release();
  *a1 = v13;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _TestApp.RootView);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _TestApp.RootView);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AnyShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AnyShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Path);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Path, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Path);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Path, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Path>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>(0);
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>(0);
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>(0);
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>(0);
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for EllipticalGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for EllipticalGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AngularGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AngularGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RadialGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RadialGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for LinearGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for LinearGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v12;
  int v13;
  uint64_t result;

  v12 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ShadowEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ShadowEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  swift_retain();
  v13 = Attribute.init<A>(body:value:flags:update:)();
  result = swift_release();
  *a1 = v13;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for MeshGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for MeshGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
  }
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void specialized BodyAccessor.makeBody(container:inputs:fields:)()
{
  Swift::String v0;

  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x80000002352E10E0;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::String v19;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x80000002352E1100;
    v19._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v19);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PropertyList.Tracker();
    v14 = swift_allocObject();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
    v15 = swift_allocObject();
    *(_DWORD *)(v15 + 16) = 0;
    v16 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = v16;
    v17 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v15 + 40) = v16;
    *(_QWORD *)(v15 + 48) = v17;
    *(_BYTE *)(v15 + 56) = 0;
    *(_QWORD *)(v14 + 16) = v15;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::String v19;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x80000002352E10C0;
    v19._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v19);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PropertyList.Tracker();
    v14 = swift_allocObject();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
    v15 = swift_allocObject();
    *(_DWORD *)(v15 + 16) = 0;
    v16 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = v16;
    v17 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v15 + 40) = v16;
    *(_QWORD *)(v15 + 48) = v17;
    *(_BYTE *)(v15 + 56) = 0;
    *(_QWORD *)(v14 + 16) = v15;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::String v19;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0x45776F646168535FLL;
    v19._object = (void *)0xED00007463656666;
    String.append(_:)(v19);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PropertyList.Tracker();
    v14 = swift_allocObject();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
    v15 = swift_allocObject();
    *(_DWORD *)(v15 + 16) = 0;
    v16 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = v16;
    v17 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v15 + 40) = v16;
    *(_QWORD *)(v15 + 48) = v17;
    *(_BYTE *)(v15 + 56) = 0;
    *(_QWORD *)(v14 + 16) = v15;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

uint64_t static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  Swift::String v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;
  int v34;
  _DWORD v35[3];
  uint64_t v36;
  char v37;

  v12 = *a3;
  v13 = *a5;
  v14 = a5[1];
  v15 = *((_BYTE *)a5 + 16);
  v16 = *((_DWORD *)a5 + 5);
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v30 = a1;
    v31 = a2;
    if ((v16 & 2) != 0)
    {
      outlined copy of DynamicPropertyCache.Fields.Layout();
    }
    else
    {
      v17 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 40);
      outlined copy of DynamicPropertyCache.Fields.Layout();
      if ((v17(a6, a7) & 1) == 0)
      {
        if (one-time initialization token for v4 != -1)
          swift_once();
        v18 = static Semantics.v4;
        if (one-time initialization token for forced != -1)
          swift_once();
        swift_beginAccess();
        if ((byte_25426FAB4 & 1) != 0)
          v19 = dyld_program_sdk_at_least();
        else
          v19 = static Semantics.forced >= v18;
        if ((v16 & 1) != 0)
          v20 = 0;
        else
          v20 = v19;
        v16 |= v20;
      }
    }
    v21 = *(_QWORD *)(a4 + 16);
    swift_beginAccess();
    v22 = *(unsigned int *)(v21 + 16);
    (*(void (**)(uint64_t, uint64_t))(a7 + 48))(a6, a7);
    v35[0] = v12;
    v35[1] = EnvironmentalBodyAccessor.init(environment:tracksDependencies:)(v22);
    v36 = v23;
    v37 = v24 & 1;
    v32[0] = v13;
    v32[1] = v14;
    v33 = v15;
    v34 = v16;
    v26 = type metadata accessor for EnvironmentalBodyAccessor(0, a6, a7, v25);
    v27 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalBodyAccessor<A>, v26);
    BodyAccessor.makeBody(container:inputs:fields:)(v30, v31, (uint64_t)v35, a4, (uint64_t)v32, v26, v27);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

uint64_t EnvironmentalBodyAccessor.init(environment:tracksDependencies:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PropertyList.Tracker();
  v2 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  v4 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = v4;
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 48) = v5;
  *(_BYTE *)(v3 + 56) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  return a1;
}

uint64_t EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t *Value;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;

  v59 = a1;
  v67 = *MEMORY[0x24BDAC8D0];
  v12 = type metadata accessor for OSSignpostID();
  v62 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v63 = (char *)v51 - v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v60 = (char *)v51 - v18;
  Value = (uint64_t *)AGGraphGetValue();
  v22 = *Value;
  result = Value[1];
  if ((a2 & 1) != 0)
  {
    v58 = result;
    swift_retain();
    swift_retain();
  }
  else
  {
    if ((v20 & 1) == 0)
      return result;
    v58 = result;
    swift_retain();
    swift_retain();
    if ((a5 & 1) != 0)
    {
      v24 = swift_retain();
      v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v24);
      swift_release();
      if ((v25 & 1) == 0)
      {
        swift_release();
        return swift_release();
      }
    }
  }
  PropertyList.Tracker.reset()();
  v57 = AssociatedTypeWitness;
  if (v22)
    v23 = *(_QWORD *)(v22 + 64);
  else
    v23 = 0;
  v26 = a4[2];
  swift_retain_n();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 16));
  *(_QWORD *)(v26 + 24) = v23;
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 16));
  swift_release();
  swift_release();
  v27 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v53 = v27;
    v54 = v22;
    v56 = a7;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v29 = AGTypeID.description.getter();
    v31 = v30;
    v32 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v33 = lazy protocol witness table accessor for type String and conformance String();
    v34 = a6;
    v35 = v33;
    *(_QWORD *)(inited + 32) = v29;
    *(_QWORD *)(inited + 64) = v33;
    *(_QWORD *)(inited + 40) = v31;
    v55 = v34;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v36 = inited + 72;
    *(_QWORD *)(inited + 96) = v32;
    *(_QWORD *)(inited + 104) = v35;
    *(_QWORD *)(inited + 80) = v37;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v14, v63, v12);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v38 = swift_initStackObject();
    v64 = xmmword_235283260;
    *(_OWORD *)(v38 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v39 = v38;
      outlined init with copy of AnyTrackedValue(inited + 32, v38 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v51[1] = inited;
        v52 = a4;
        LODWORD(inited) = v53 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v36, v39 + 72);
        *(_OWORD *)(v39 + 128) = 0u;
        *(_QWORD *)(v39 + 144) = 0;
        *(_OWORD *)(v39 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v39, inited, (uint64_t)v14);
        outlined init with copy of CVarArg?(v39 + 112, (uint64_t)v65);
        swift_bridgeObjectRelease();
        if (!v66)
        {
LABEL_22:
          outlined destroy of CVarArg?((uint64_t)v65);
          swift_bridgeObjectRelease();
          v44 = *(void (**)(char *, uint64_t))(v62 + 8);
          v44(v63, v12);
          v44(v14, v12);
          a4 = v52;
          a6 = v55;
          a7 = v56;
          v22 = v54;
          goto LABEL_23;
        }
        outlined destroy of CVarArg?((uint64_t)v65);
        a4 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_17:
          v40 = __swift_project_value_buffer(v12, (uint64_t)static OSSignpostID.continuation);
          v41 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 24);
          while (1)
          {
            v41(v14, v40, v12);
            v42 = swift_initStackObject();
            *(_OWORD *)(v42 + 16) = v64;
            *(_OWORD *)(v42 + 32) = 0u;
            *(_OWORD *)(v42 + 48) = 0u;
            *(_OWORD *)(v42 + 64) = 0u;
            *(_OWORD *)(v42 + 80) = 0u;
            *(_OWORD *)(v42 + 96) = 0u;
            *(_OWORD *)(v42 + 128) = 0u;
            *(_QWORD *)(v42 + 144) = 0;
            *(_OWORD *)(v42 + 112) = 0u;
            v43 = v42 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v42, inited, (uint64_t)v14);
            outlined init with copy of CVarArg?(v43, (uint64_t)v65);
            swift_bridgeObjectRelease();
            if (!v66)
              break;
            outlined destroy of CVarArg?((uint64_t)v65);
            if (a4[291] != -1)
              swift_once();
            v40 = __swift_project_value_buffer(v12, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_22;
        }
LABEL_27:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_23:
  AGGraphClearUpdate();
  v65[0] = v22;
  v65[1] = a4;
  v45 = (uint64_t)v60;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a7 + 32))(v65, a6, a7);
  AGGraphSetUpdate();
  v46 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  MEMORY[0x24BDAC7A8](v46);
  v48 = type metadata accessor for EnvironmentalBodyAccessor(0, a6, a7, v47);
  v51[-2] = v48;
  v51[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalBodyAccessor<A>, v48);
  v49 = v57;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v45, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v51[-4], v57, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v50);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v45, v49);
  swift_release();
  swift_release_n();
  return swift_release();
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance EnvironmentalBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  unsigned int *v3;

  return EnvironmentalBodyAccessor.updateBody(of:changed:)(a1, a2, *v3, *((_QWORD **)v3 + 1), *((_BYTE *)v3 + 16), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ShadowEffect@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ShadowEffect(int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(uint64_t result, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE v21[16];

  v9 = v7;
  v13 = result;
  if ((a3 & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v18 = swift_bridgeObjectRetain();
      v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW29VXEfU_AA14LinearGradientV_TG5AF01_yZ0VyAF14LinearGradientVGAF01_Y6InputsVTf1cn_nTm(v18, a4, a5, (uint64_t)v21, a7);
      outlined consume of DynamicPropertyCache.Fields.Layout();
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(v13, v9, v19, a6, a7, v13);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v14 = *(_QWORD *)(result + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = (uint64_t *)(v13 + 48);
      do
      {
        v16 = *(v15 - 1);
        v17 = *v15;
        v15 += 4;
        v20 = a4;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v16 + 8))(v7, &v20, v17 + a6, a5, a7);
        --v14;
      }
      while (v14);
      return outlined consume of DynamicPropertyCache.Fields.Layout();
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMultiplyEffect@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMultiplyEffect(int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t dispatch thunk of EnvironmentalModifier.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static EnvironmentalModifier._requiresMainThread.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static EnvironmentalModifier._tracksEnvironmentDependencies.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t outlined retain of _ViewListInputs(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _ViewListInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for EnvironmentalBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentalBodyAccessor);
}

unint64_t lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView;
  if (!lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _TestApp.RootView, &type metadata for _TestApp.RootView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView);
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Circle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Path>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Path>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol;
  if (!lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _IntelligenceSupport.AnimatingSummarySymbol, &type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    type metadata accessor for StaticBody();
  }
  return result;
}

void type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>)
  {
    v2 = type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
    v4 = type metadata accessor for ModifiedContent(a1, (uint64_t)&type metadata for Text, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>);
  }
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    type metadata accessor for DynamicBody();
  }
  return result;
}

void type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ViewBodyAccessor(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText;
  if (!lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _IntelligenceSupport.AnimatingText, &type metadata for _IntelligenceSupport.AnimatingText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<_TestApp.RootView>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>(&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for EnvironmentalBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EnvironmentalBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for EnvironmentalBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentalBodyAccessor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentalBodyAccessor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t dispatch thunk of StyledFormatStyle.makePlatformAttributes(resolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v3 = (int *)(a1 + 36);
  v4 = (int *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  float64x2_t *v6;
  float64x2_t *v7;
  int32x2_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40)
    || *(double *)(a1 + 48) != *(double *)(a2 + 48))
  {
    return 0;
  }
  v6 = (float64x2_t *)(a2 + 64);
  v7 = (float64x2_t *)(a1 + 64);
  do
  {
    result = --v2 == 0;
    if (!v2)
      break;
    if (*(_QWORD *)&v7[-1].f64[1] != *(_QWORD *)&v6[-1].f64[1])
      break;
    v8 = vmovn_s64(vceqq_f64(*v7, *v6));
    if ((v8.i8[0] & 1) == 0)
      break;
    v6 = (float64x2_t *)((char *)v6 + 24);
    v7 = (float64x2_t *)((char *)v7 + 24);
  }
  while ((v8.i8[4] & 1) != 0);
  return result;
}

{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _BOOL8 result;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (_DWORD *)(a2 + 100);
  v5 = (_DWORD *)(a1 + 100);
  do
  {
    result = *v5 == *v4 && *(_QWORD *)(v5 - 9) == *(_QWORD *)(v4 - 9);
    v9 = v3-- != 0;
    if (!result)
      break;
    v4 += 18;
    v5 += 18;
  }
  while (v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (double *)(a1 + 40);
  v6 = (double *)(a2 + 40);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  return ((uint64_t (*)(void))((char *)&loc_234BE5648 + 4 * byte_23528B330[*(unsigned __int8 *)(a1 + 48)]))();
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  char v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_BYTE *)(a1 + 40);
    v7 = *(_BYTE *)(a2 + 40);
    outlined copy of Text.Modifier(v4, v6);
    outlined copy of Text.Modifier(v5, v7);
    specialized static Text.Modifier.== infix(_:_:)(v4, v6);
    v9 = v8;
    outlined consume of Text.Modifier(v5, v7);
    outlined consume of Text.Modifier(v4, v6);
    if ((v9 & 1) != 0)
    {
      if (v2 != 1)
        __asm { BR              X9 }
      return 1;
    }
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        outlined init with copy of LocalizedStringKey.FormatArgument(a1 + v12, (uint64_t)v10);
        outlined init with copy of LocalizedStringKey.FormatArgument(a2 + v12, (uint64_t)v6);
        v15 = static LocalizedStringKey.FormatArgument.Storage.== infix(_:_:)(v10, v6);
        outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v6);
        outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v10);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v12 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = (unsigned __int8 *)(a2 + 48);
      v5 = (char *)(a1 + 48);
      do
      {
        v7 = *((_QWORD *)v5 - 2);
        v6 = *((_QWORD *)v5 - 1);
        v8 = *((_QWORD *)v4 - 2);
        v9 = *((_QWORD *)v4 - 1);
        v10 = *v5;
        v11 = *v4;
        outlined copy of Shader.Argument.Storage(v7, v6, *v5);
        outlined copy of Shader.Argument.Storage(v8, v9, v11);
        v12 = static Shader.Argument.Storage.== infix(_:_:)(v7, v6, v10, v8, v9, v11);
        outlined consume of Shader.Argument.Storage(v8, v9, v11);
        outlined consume of Shader.Argument.Storage(v7, v6, v10);
        v14 = v3-- != 0;
        if ((v12 & 1) == 0)
          break;
        v4 += 24;
        v5 += 24;
      }
      while (v14);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = a1 + 32;
    for (i = (_QWORD *)(a2 + 32); ; ++i)
    {
      if (*(_QWORD *)v3 != *i)
      {
        v5 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v3 + 88);
        swift_retain();
        v6 = swift_retain();
        LOBYTE(v5) = v5(v6);
        swift_release();
        swift_release();
        if ((v5 & 1) == 0)
          break;
      }
      v3 += 8;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  id v27;
  uint64_t v28;
  char v29;
  int v30;
  void *v31;
  char v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  id v38;
  uint64_t v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  char v44;
  void *v45;
  id v46;
  char v47;
  id v48;
  uint64_t v49;
  char v50;
  id v51;
  uint64_t v52;
  char v53;
  void *v54;
  id v55;
  char v56;
  id v57;
  uint64_t v58;
  char v59;
  id v60;
  uint64_t v61;
  char v62;
  void *v63;
  id v64;
  char v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  __int128 v78;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(_QWORD *)(a1 + 48);
  v72 = *(_QWORD *)(a1 + 16);
  v74 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  outlined copy of Text.Effect.Markers.MarkerType(v7, v6);
  outlined copy of Text.Effect.Markers.MarkerType(v8, v9);
  v12 = specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(v7, v6, v8, v9);
  outlined consume of Text.Effect.Markers.MarkerType(v8, v9);
  result = outlined consume of Text.Effect.Markers.MarkerType(v7, v6);
  if ((v12 & 1) == 0)
    return 0;
  if (__OFSUB__(v11, v5))
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if (v11 != v5)
    return 0;
  if (!__OFSUB__(v10, v74))
  {
    if (v10 == v74)
    {
      v69 = (void *)*MEMORY[0x24BEBB440];
      v68 = (void *)*MEMORY[0x24BEBB368];
      v67 = (void *)*MEMORY[0x24BEBB360];
      v66 = (void *)*MEMORY[0x24BEBB438];
      v14 = (_QWORD *)(a2 + 88);
      v15 = (uint64_t *)(a1 + 88);
      v16 = v72;
      while (1)
      {
        v17 = --v16 == 0;
        if (!v16)
          return v17;
        v18 = *(v15 - 3);
        v20 = *(v15 - 1);
        v19 = *v15;
        v21 = *(v14 - 3);
        v22 = *((_BYTE *)v14 - 16);
        v24 = *(v14 - 1);
        v23 = *v14;
        if ((*(_BYTE *)(v15 - 2) & 1) != 0)
        {
          if (v18 != v21)
            v22 = 0;
          if ((v22 & 1) == 0)
            return v17;
LABEL_15:
          v25 = v24 == v20;
          if (__OFSUB__(v24, v20))
            goto LABEL_134;
          goto LABEL_119;
        }
        if ((*(_BYTE *)(v14 - 2) & 1) != 0)
          return v17;
        v70 = *(v14 - 1);
        v71 = *v14;
        v73 = *(v15 - 1);
        v75 = *v15;
        outlined copy of Text.Effect.Markers.MarkerType(v21, 0);
        outlined copy of Text.Effect.Markers.MarkerType(v18, 0);
        specialized static Dictionary.Keys.== infix(_:_:)(v18, v21);
        if ((v26 & 1) == 0)
          goto LABEL_130;
        if (!*(_QWORD *)(v18 + 16))
          break;
        v27 = v69;
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        if ((v29 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v28, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_30;
        v30 = swift_dynamicCast();
        if (v30)
          v31 = v76;
        else
          v31 = 0;
        v32 = v30 ^ 1;
LABEL_31:
        if (!*(_QWORD *)(v21 + 16))
        {
          v77 = 0u;
          v78 = 0u;
LABEL_40:
          outlined destroy of Any?((uint64_t)&v77);
          if ((v32 & 1) == 0)
            goto LABEL_130;
          goto LABEL_46;
        }
        v33 = v69;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
        if ((v35 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v34, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_40;
        v36 = swift_dynamicCast();
        if ((v32 & 1) != 0)
        {
          if ((v36 & 1) != 0)
            goto LABEL_130;
        }
        else
        {
          if (v31 == v76)
            v37 = v36;
          else
            v37 = 0;
          if ((v37 & 1) == 0)
            goto LABEL_130;
        }
LABEL_46:
        if (!*(_QWORD *)(v18 + 16))
        {
          v77 = 0u;
          v78 = 0u;
LABEL_55:
          outlined destroy of Any?((uint64_t)&v77);
          v41 = 0;
          goto LABEL_56;
        }
        v38 = v68;
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
        if ((v40 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v39, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_55;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast())
          v41 = v76;
        else
          v41 = 0;
LABEL_56:
        if (!*(_QWORD *)(v21 + 16))
        {
          v77 = 0u;
          v78 = 0u;
LABEL_69:
          outlined destroy of Any?((uint64_t)&v77);
          if (v41)
            goto LABEL_129;
          goto LABEL_70;
        }
        v42 = v68;
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
        if ((v44 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v43, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_69;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast())
          v45 = v76;
        else
          v45 = 0;
        if (v41)
        {
          if (!v45)
            goto LABEL_129;
          v46 = v41;
          v47 = static NSObject.== infix(_:_:)();

          if ((v47 & 1) == 0)
            goto LABEL_130;
        }
        else
        {
          v41 = v45;
          if (v45)
            goto LABEL_129;
        }
LABEL_70:
        if (!*(_QWORD *)(v18 + 16))
        {
          v77 = 0u;
          v78 = 0u;
LABEL_79:
          outlined destroy of Any?((uint64_t)&v77);
          v41 = 0;
          goto LABEL_80;
        }
        v48 = v67;
        v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48);
        if ((v50 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v49, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_79;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast())
          v41 = v76;
        else
          v41 = 0;
LABEL_80:
        if (!*(_QWORD *)(v21 + 16))
        {
          v77 = 0u;
          v78 = 0u;
LABEL_93:
          outlined destroy of Any?((uint64_t)&v77);
          if (v41)
            goto LABEL_129;
          goto LABEL_94;
        }
        v51 = v67;
        v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
        if ((v53 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v52, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_93;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast())
          v54 = v76;
        else
          v54 = 0;
        if (v41)
        {
          if (!v54)
            goto LABEL_129;
          v55 = v41;
          v56 = static NSObject.== infix(_:_:)();

          if ((v56 & 1) == 0)
            goto LABEL_130;
        }
        else
        {
          v41 = v54;
          if (v54)
            goto LABEL_129;
        }
LABEL_94:
        if (!*(_QWORD *)(v18 + 16))
        {
          v77 = 0u;
          v78 = 0u;
LABEL_103:
          outlined destroy of Any?((uint64_t)&v77);
          v41 = 0;
          goto LABEL_104;
        }
        v57 = v66;
        v58 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
        if ((v59 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v58, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_103;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast())
          v41 = v76;
        else
          v41 = 0;
LABEL_104:
        if (!*(_QWORD *)(v21 + 16))
        {
          v77 = 0u;
          v78 = 0u;
LABEL_117:
          outlined destroy of Any?((uint64_t)&v77);
          if (v41)
            goto LABEL_129;
          goto LABEL_118;
        }
        v60 = v66;
        v61 = specialized __RawDictionaryStorage.find<A>(_:)(v60);
        if ((v62 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v61, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }

        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_117;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast())
          v63 = v76;
        else
          v63 = 0;
        if (v41)
        {
          if (!v63)
            goto LABEL_129;
          v64 = v41;
          v65 = static NSObject.== infix(_:_:)();

          outlined consume of Text.Effect.Markers.MarkerType(v21, 0);
          result = outlined consume of Text.Effect.Markers.MarkerType(v18, 0);
          v20 = v73;
          v19 = v75;
          v24 = v70;
          v23 = v71;
          if ((v65 & 1) == 0)
            return v17;
          goto LABEL_15;
        }
        v41 = v63;
        if (v63)
        {
LABEL_129:

LABEL_130:
          outlined consume of Text.Effect.Markers.MarkerType(v21, 0);
          outlined consume of Text.Effect.Markers.MarkerType(v18, 0);
          return 0;
        }
LABEL_118:
        outlined consume of Text.Effect.Markers.MarkerType(v21, 0);
        result = outlined consume of Text.Effect.Markers.MarkerType(v18, 0);
        v19 = v75;
        v23 = v71;
        v25 = v70 == v73;
        if (__OFSUB__(v70, v73))
        {
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
LABEL_119:
        if (!v25)
          return v17;
        if (__OFSUB__(v23, v19))
          goto LABEL_135;
        v14 += 4;
        v15 += 4;
        if (v23 != v19)
          return v17;
      }
      v77 = 0u;
      v78 = 0u;
LABEL_30:
      outlined destroy of Any?((uint64_t)&v77);
      v31 = 0;
      v32 = 1;
      goto LABEL_31;
    }
    return 0;
  }
LABEL_137:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *i;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  void *v104;
  void *v105;
  double v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  _QWORD v114[23];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (uint64_t *)(a1 + 56);
  for (i = (_QWORD *)(a2 + 56); ; i += 11)
  {
    result = *(v4 - 3);
    v7 = *(v4 - 2);
    v8 = (void *)*(v4 - 1);
    v9 = *v4;
    v11 = v4[1];
    v10 = v4[2];
    v12 = v4[3];
    v13 = v4[4];
    v15 = *((double *)v4 + 5);
    v14 = *((double *)v4 + 6);
    v16 = v4[7];
    v18 = *(i - 3);
    v17 = *(i - 2);
    v19 = (void *)*(i - 1);
    v20 = *i;
    v21 = i[1];
    v22 = i[2];
    v24 = i[3];
    v23 = i[4];
    v25 = *((double *)i + 5);
    v26 = *((double *)i + 6);
    v27 = i[7];
    v114[0] = result;
    v114[1] = v7;
    v114[2] = v8;
    v114[3] = v9;
    v114[4] = v11;
    v114[5] = v10;
    v114[6] = v12;
    v114[7] = v13;
    *(double *)&v114[8] = v15;
    *(double *)&v114[9] = v14;
    v114[10] = v16;
    v114[11] = v18;
    v114[12] = v17;
    v114[13] = v19;
    v114[14] = v20;
    v114[15] = v21;
    v112 = v16;
    v113 = v21;
    v114[16] = v22;
    v114[17] = v24;
    v114[18] = v23;
    *(double *)&v114[19] = v25;
    v110 = v12;
    v111 = v13;
    v28 = v13 >> 62;
    *(double *)&v114[20] = v26;
    v114[21] = v27;
    v108 = v11;
    v109 = v10;
    v107 = v9;
    v100 = v3;
    v106 = v14;
    if ((_DWORD)v28)
    {
      v94 = v18;
      v96 = result;
      v29 = v23 >> 62;
      if ((_DWORD)v28 == 1)
      {
        if (v29 != 1)
          goto LABEL_39;
        v104 = v8;
        v30 = v17;
        v31 = v19;
        v32 = v20;
        v33 = v22;
        v34 = v24;
        v35 = v23;
        outlined copy of Text.Effect.Composition.Operation(v18, v17, v19, v20, v113, v22, v24, v23);
        outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
        if (v96 != v94)
          return 0;
        outlined consume of Text.Effect.Composition.Operation(v96, v30, v31, v32, v113, v33, v34, v35);
        outlined consume of Text.Effect.Composition.Operation(v96, v7, v104, v107, v108, v109, v110, v111);
        if (v7 != v30)
          return 0;
      }
      else
      {
        if (v29 != 2)
          goto LABEL_39;
        v38 = v8;
        v39 = v7;
        v40 = v17;
        v41 = v19;
        v42 = v20;
        v43 = v22;
        v99 = v24;
        v44 = v23;
        outlined copy of Text.Effect.Composition.Operation(v18, v17, v19, v20, v113, v22, v24, v23);
        outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
        result = v96;
        if (v96 != v94)
          return 0;
        if (__OFSUB__(v40, v39))
          goto LABEL_45;
        if (v40 != v39)
          return 0;
        if (v38 != v41)
          return 0;
        outlined consume of Text.Effect.Composition.Operation(v96, v39, v38, v42, v113, v43, v99, v44);
        outlined consume of Text.Effect.Composition.Operation(v96, v39, v38, v107, v108, v109, v110, v111);
        if (v107 != v42)
          return 0;
      }
      goto LABEL_33;
    }
    v36 = v22;
    v93 = v19;
    v92 = v23;
    if (v23 >> 62)
      break;
    if (result != v18)
    {
      v72 = v17;
      v73 = v7;
      v74 = v18;
      v75 = v23;
      v76 = v20;
      v77 = v24;
      outlined copy of Text.Effect.Composition.Operation(result, v73, v8, v9, v11, v10, v12, v111);
      v84 = v74;
      v85 = v72;
      v86 = v93;
      v87 = v76;
      v88 = v113;
      v89 = v36;
      v90 = v77;
      v91 = v75;
      goto LABEL_41;
    }
    if (__OFSUB__(v17, v7))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v17 != v7)
    {
      v102 = v17;
      v78 = v7;
      v79 = v19;
      v80 = v23;
      v81 = result;
      v82 = v20;
      v83 = v24;
      outlined copy of Text.Effect.Composition.Operation(result, v78, v8, v9, v11, v10, v12, v111);
      v84 = v81;
      v85 = v102;
      v86 = v79;
      v87 = v82;
      v88 = v113;
      v89 = v36;
      v90 = v83;
      v91 = v80;
LABEL_41:
      outlined copy of Text.Effect.Composition.Operation(v84, v85, v86, v87, v88, v89, v90, v91);
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
      return 0;
    }
    v103 = v26;
    v105 = v8;
    v37 = v22;
    v98 = v24;
    if (*(double *)&v10 != *(double *)&v22 || *(double *)&v12 != *(double *)&v24)
      goto LABEL_37;
    if ((v11 & 1) != 0)
    {
      if ((v21 & 1) == 0)
        goto LABEL_37;
    }
    else if ((v21 & 1) != 0)
    {
      goto LABEL_37;
    }
    if (v8 != v19)
    {
LABEL_37:
      v56 = v9;
      v57 = result;
      v58 = v20;
      v59 = v10;
      outlined copy of Text.Effect.Composition.Operation(result, v7, v8, v56, v11, v10, v12, v111);
      outlined copy of Text.Effect.Composition.Operation(v57, v7, v93, v58, v113, v36, v98, v92);
      outlined copy of Text.Effect.Composition.Operation(v57, v7, v105, v107, v11, v59, v110, v111);
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
      v60 = v57;
      v61 = v7;
      v62 = v105;
      v63 = v107;
      v64 = v11;
      v65 = v59;
      v66 = v110;
      v67 = v111;
      goto LABEL_43;
    }
    v45 = v15;
    v46 = v25;
    v47 = v7;
    v48 = v7;
    v49 = v19;
    v50 = v9;
    v51 = v11;
    v52 = v10;
    v53 = v23;
    v54 = result;
    v55 = v20;
    outlined copy of Text.Effect.Composition.Operation(result, v47, v8, v50, v51, v10, v12, v111);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v49, v55, v113, v37, v98, v53);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v52, v110, v111);
    if (v45 != v46 || v106 != v103)
    {
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
      v63 = v107;
      v60 = v54;
      v61 = v48;
      v62 = v105;
      v64 = v108;
      v65 = v109;
      v66 = v110;
      v67 = v111;
      goto LABEL_43;
    }
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v53);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v109, v110, v111);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v92);
    v97 = specialized static Array<A>.== infix(_:_:)(v112, v27);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v92);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v109, v110, v111);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v92);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v109, v110, v111);
    if ((v97 & 1) == 0)
      return 0;
LABEL_33:
    if (!v100)
      return 1;
    v4 += 11;
    v3 = v100 - 1;
  }
  v95 = v18;
  v96 = result;
  v101 = v17;
  v68 = v20;
  v69 = v24;
  v70 = v8;
  outlined copy of Text.Effect.Composition.Operation(result, v7, v8, v9, v11, v10, v12, v111);
  outlined copy of Text.Layout.Line.Line(v70, v9, v11 & 1);
  swift_bridgeObjectRetain();
  v8 = v70;
  v17 = v101;
  v24 = v69;
  v23 = v92;
  v20 = v68;
  v18 = v95;
  v19 = v93;
  v22 = v36;
LABEL_39:
  v71 = v8;
  outlined copy of Text.Effect.Composition.Operation(v18, v17, v19, v20, v113, v22, v24, v23);
  outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
  v60 = v96;
  v61 = v7;
  v62 = v71;
  v63 = v9;
  v64 = v11;
  v65 = v109;
  v66 = v110;
  v67 = v111;
LABEL_43:
  outlined consume of Text.Effect.Composition.Operation(v60, v61, v62, v63, v64, v65, v66, v67);
  return 0;
}

{
  uint64_t v2;
  double *v3;
  double *i;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (double *)(a2 + 64);
    for (i = (double *)(a1 + 64); *(i - 1) == *(v3 - 1) && *i == *v3; i += 6)
    {
      v5 = *((unsigned __int8 *)v3 - 16);
      v7 = *((_QWORD *)v3 - 4);
      v8 = *((_QWORD *)i - 4);
      if ((*(_BYTE *)(i - 2) & 1) != 0)
      {
        if (v8 != v7)
          v5 = 0;
        if (v5 != 1)
          return 0;
      }
      else
      {
        if (v8 != v7)
          LOBYTE(v5) = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      v3 += 6;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  CFIndex v8;
  void *v9;
  CFIndex v10;
  void *v11;
  double v12;
  double v13;
  uint64_t v14;
  id v15;
  id v16;
  const __CTLine *v17;
  const __CTLine *v18;
  void *v19;
  void *v20;
  _BOOL4 v22;
  uint64_t result;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = a2 + 48;
  v5 = a1 + 48;
  do
  {
    v27 = *(_QWORD *)(v5 + 32);
    v28 = *(_QWORD *)(v5 + 40);
    v7 = *(double *)v5;
    v6 = *(double *)(v5 + 8);
    v9 = *(void **)(v5 - 16);
    v8 = *(_QWORD *)(v5 - 8);
    v11 = *(void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 8);
    v13 = *(double *)v4;
    v12 = *(double *)(v4 + 8);
    v14 = *(_QWORD *)(v4 + 32);
    v26 = *(_QWORD *)(v4 + 40);
    swift_retain_n();
    v15 = v9;
    swift_retain_n();
    v16 = v11;
    v17 = (const __CTLine *)v15;
    v18 = (const __CTLine *)v16;
    v19 = (id)_CTLineGetRunAtIndex(v17, v8);
    v20 = (id)_CTLineGetRunAtIndex(v18, v10);
    swift_release_n();

    swift_release_n();
    v22 = v7 == v13 && v19 == v20;
    if (v6 != v12)
      v22 = 0;
    if (v27 != v14)
      v22 = 0;
    result = v28 == v26 && v22;
    v25 = v3-- != 0;
    if ((_DWORD)result != 1)
      break;
    v4 += 64;
    v5 += 64;
  }
  while (v25);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v45 = a2 + 32;
  v46 = a1 + 32;
  v43 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v5 = v46 + 56 * v3;
    v6 = *(double *)v5;
    v7 = *(double *)(v5 + 8);
    v9 = *(_QWORD *)(v5 + 24);
    v8 = *(_QWORD *)(v5 + 32);
    v10 = *(_BYTE *)(v5 + 40);
    v11 = *(_QWORD *)(v5 + 48);
    v12 = *(unsigned __int8 *)(v5 + 16);
    v13 = v45 + 56 * v3;
    v14 = *(double *)v13;
    v15 = *(double *)(v13 + 8);
    v16 = *(unsigned __int8 *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    v18 = *(_QWORD *)(v13 + 32);
    v19 = *(_BYTE *)(v13 + 40);
    v20 = *(_QWORD *)(v13 + 48);
    if (!v12)
    {
      v21 = v16 == 0;
LABEL_11:
      if (!v21 || v6 != v14 || v7 != v15)
        goto LABEL_40;
      goto LABEL_24;
    }
    if (v12 == 1)
    {
      v21 = v16 == 1;
      goto LABEL_11;
    }
    if (v16 != 2 || (*(_QWORD *)&v15 | *(_QWORD *)&v14) != 0)
    {
LABEL_40:
      outlined copy of Text.Storage(v9, v8, v10);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v17, v18, v19);
      swift_bridgeObjectRetain();
      outlined consume of Text.Storage(v17, v18, v19);
      swift_bridgeObjectRelease();
      v37 = v9;
      v38 = v8;
LABEL_44:
      v42 = v10;
      goto LABEL_45;
    }
LABEL_24:
    v48 = v8;
    if ((v10 & 1) == 0)
      break;
    if ((*(_BYTE *)(v13 + 40) & 1) == 0)
    {
      outlined copy of Text.Storage(v9, v8, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v17, v18, 0);
      swift_bridgeObjectRetain();
      outlined consume of Text.Storage(v17, v18, 0);
      swift_bridgeObjectRelease();
      v37 = v9;
      v38 = v8;
      v42 = 1;
      goto LABEL_45;
    }
    v44 = *(_BYTE *)(v13 + 40);
    v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96);
    outlined copy of Text.Storage(v9, v8, 1);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v17, v18, 1);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v9, v8, 1);
    outlined copy of Text.Storage(v17, v18, 1);
    v26 = v3;
    v27 = v20;
    v28 = v8;
    v29 = v25(v17);
    v19 = v44;
    v30 = v29;
    outlined consume of Text.Storage(v17, v18, 1);
    v31 = v28;
    v20 = v27;
    v3 = v26;
    outlined consume of Text.Storage(v9, v31, 1);
    if ((v30 & 1) == 0)
      goto LABEL_42;
LABEL_36:
    v47 = v17;
    v36 = *(_QWORD *)(v11 + 16);
    if (v36 != *(_QWORD *)(v20 + 16))
    {
      v39 = v47;
      v40 = v18;
      v41 = v19;
LABEL_43:
      outlined consume of Text.Storage(v39, v40, v41);
      swift_bridgeObjectRelease();
      v37 = v9;
      v38 = v48;
      goto LABEL_44;
    }
    if (v36)
    {
      if (v11 != v20)
        __asm { BR              X9 }
    }
    ++v3;
    outlined consume of Text.Storage(v47, v18, v19);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v9, v48, v10);
    swift_bridgeObjectRelease();
    result = 1;
    if (v3 == v43)
      return result;
  }
  if ((*(_BYTE *)(v13 + 40) & 1) == 0)
  {
    if (v9 == v17 && v8 == v18)
    {
      outlined copy of Text.Storage(v9, v8, 0);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v9, v8, 0);
      swift_bridgeObjectRetain();
    }
    else
    {
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v34 = v8;
      v35 = v33;
      outlined copy of Text.Storage(v9, v34, 0);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v17, v18, 0);
      swift_bridgeObjectRetain();
      if ((v35 & 1) == 0)
      {
LABEL_42:
        v39 = v17;
        v40 = v18;
        v41 = v10;
        goto LABEL_43;
      }
    }
    goto LABEL_36;
  }
  outlined copy of Text.Storage(v9, v8, 0);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v17, v18, 1);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v17, v18, 1);
  swift_bridgeObjectRelease();
  v37 = v9;
  v38 = v8;
  v42 = 0;
LABEL_45:
  outlined consume of Text.Storage(v37, v38, v42);
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  double v5;
  double v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  _BOOL8 v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(double *)(a1 + 40);
  v6 = *(double *)(a2 + 40);
  v7 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(a1 + 32) + 104);
  swift_retain();
  v8 = swift_retain();
  LOBYTE(v7) = v7(v8);
  swift_release();
  swift_release();
  v9 = 0;
  if ((v7 & 1) != 0 && v5 == v6)
  {
    v10 = (double *)(a2 + 56);
    v11 = (double *)(a1 + 56);
    do
    {
      v9 = --v2 == 0;
      if (!v2)
        break;
      v12 = *v11;
      v13 = *v10;
      v14 = *(uint64_t (**)(uint64_t))(**((_QWORD **)v11 - 1) + 104);
      swift_retain();
      v15 = swift_retain();
      LOBYTE(v14) = v14(v15);
      swift_release();
      swift_release();
      if ((v14 & 1) == 0)
        break;
      v10 += 2;
      v11 += 2;
    }
    while (v12 == v13);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = 0;
    v27 = a2 + 32;
    v28 = a1 + 32;
    v26 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v29 = v3;
      v4 = 32 * v3;
      v5 = v28 + 32 * v3;
      v7 = *(_QWORD *)v5;
      v6 = *(_QWORD *)(v5 + 8);
      v8 = *(_BYTE *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      v10 = v27 + v4;
      v12 = *(_QWORD *)v10;
      v11 = *(_QWORD *)(v10 + 8);
      v13 = *(_QWORD *)(v10 + 24);
      v32 = v6;
      v31 = *(_BYTE *)(v10 + 16);
      if ((v8 & 1) != 0)
      {
        if ((*(_BYTE *)(v10 + 16) & 1) == 0)
          return 0;
        v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v12, v11, 1);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v7, v6, 1);
        if ((v14(v12) & 1) == 0)
        {
LABEL_25:
          outlined consume of Text.Storage(v12, v11, v8);
          swift_bridgeObjectRelease();
          v23 = v7;
          v24 = v32;
          v25 = v8;
          goto LABEL_27;
        }
      }
      else
      {
        if ((*(_BYTE *)(v10 + 16) & 1) != 0)
          return 0;
        if (v7 == v12 && v6 == v11)
        {
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 0);
        }
        else
        {
          v16 = *(_QWORD *)(v5 + 8);
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v12, v11, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v16, 0);
          if ((v17 & 1) == 0)
            goto LABEL_25;
        }
      }
      v30 = v8;
      v18 = *(_QWORD *)(v9 + 16);
      if (v18 != *(_QWORD *)(v13 + 16))
        break;
      if (v18)
      {
        v19 = v11;
        v20 = v7;
        v21 = v12;
        if (v9 != v13)
          __asm { BR              X9 }
      }
      else
      {
        v19 = v11;
        v20 = v7;
        v21 = v12;
      }
      v3 = v29 + 1;
      outlined consume of Text.Storage(v21, v19, v31);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v20, v32, v30);
      swift_bridgeObjectRelease();
      result = 1;
      if (v29 + 1 == v26)
        return result;
    }
    outlined consume of Text.Storage(v12, v11, v31);
    swift_bridgeObjectRelease();
    v23 = v7;
    v24 = v32;
    v25 = v30;
LABEL_27:
    outlined consume of Text.Storage(v23, v24, v25);
    swift_bridgeObjectRelease();
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  uint64_t result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (float64x2_t *)(a2 + 40);
  v5 = (float64x2_t *)(a1 + 40);
  do
  {
    result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*v5, *v4), (int32x4_t)vceqq_f64(v5[1], v4[1]))), 0xFuLL))) & (*(_QWORD *)&v5[-1].f64[1] == *(_QWORD *)&v4[-1].f64[1]);
    v8 = v3-- != 0;
    if ((_DWORD)result != 1)
      break;
    v4 = (float64x2_t *)((char *)v4 + 40);
    v5 = (float64x2_t *)((char *)v5 + 40);
  }
  while (v8);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  float v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD v55[10];
  char v56;
  id v57[10];
  char v58;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    goto LABEL_27;
  if (!v2 || a1 == a2)
  {
    v28 = 1;
    return v28 & 1;
  }
  v3 = 0;
  v4 = v2 - 1;
  while (1)
  {
    v34 = v4;
    v5 = *(void **)(a1 + v3 + 40);
    v6 = *(void **)(a1 + v3 + 48);
    v7 = *(void **)(a1 + v3 + 56);
    v8 = *(void **)(a1 + v3 + 64);
    v9 = *(void **)(a1 + v3 + 72);
    v10 = *(void **)(a1 + v3 + 80);
    v11 = *(void **)(a1 + v3 + 88);
    v12 = *(void **)(a1 + v3 + 96);
    v13 = *(void **)(a1 + v3 + 104);
    v14 = *(_BYTE *)(a1 + v3 + 112);
    v15 = *(float *)(a1 + v3 + 116);
    v54 = *(unsigned __int8 *)(a1 + v3 + 128);
    v52 = *(_QWORD *)(a1 + v3 + 136);
    v53 = *(_QWORD *)(a1 + v3 + 120);
    v33 = v3;
    v16 = *(void **)(a2 + v3 + 32);
    v48 = *(_QWORD *)(a2 + v3 + 40);
    v49 = *(void **)(a2 + v3 + 48);
    v47 = *(void **)(a2 + v3 + 56);
    v18 = *(_QWORD *)(a2 + v3 + 64);
    v17 = *(_QWORD *)(a2 + v3 + 72);
    v20 = *(_QWORD *)(a2 + v3 + 80);
    v19 = *(_QWORD *)(a2 + v3 + 88);
    v21 = *(_QWORD *)(a2 + v3 + 96);
    v22 = *(_QWORD *)(a2 + v3 + 104);
    v23 = *(_BYTE *)(a2 + v3 + 112);
    v24 = *(float *)(a2 + v3 + 116);
    v51 = *(_QWORD *)(a2 + v3 + 120);
    v50 = *(unsigned __int8 *)(a2 + v3 + 128);
    v25 = *(_QWORD *)(a2 + v3 + 136);
    v57[0] = *(id *)(a1 + v3 + 32);
    v57[1] = v5;
    v57[2] = v6;
    v57[3] = v7;
    v57[4] = v8;
    v57[5] = v9;
    v57[6] = v10;
    v57[7] = v11;
    v57[8] = v12;
    v57[9] = v13;
    v58 = v14;
    v55[0] = v16;
    v55[1] = v48;
    v55[2] = v49;
    v55[3] = v47;
    v55[4] = v18;
    v55[5] = v17;
    v55[6] = v20;
    v55[7] = v19;
    v55[8] = v21;
    v55[9] = v22;
    v56 = v23;
    v37 = v14;
    v38 = (uint64_t)v13;
    v39 = (uint64_t)v12;
    v26 = v57[0];
    v45 = (unint64_t)v6;
    v46 = (uint64_t)v5;
    v43 = (uint64_t)v8;
    v44 = v7;
    v41 = (uint64_t)v10;
    v42 = (uint64_t)v9;
    v40 = (uint64_t)v11;
    outlined copy of _ShapeStyle_Pack.Fill(v57[0], (uint64_t)v5, v6, v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v14);
    outlined copy of GraphicsBlendMode?(v53, v54);
    swift_bridgeObjectRetain();
    v35 = v18;
    v36 = v19;
    outlined copy of _ShapeStyle_Pack.Fill(v16, v48, v49, v47, v18, v17, v20, v19, v21, v22, v23);
    outlined copy of GraphicsBlendMode?(v51, v50);
    swift_bridgeObjectRetain();
    if ((static _ShapeStyle_Pack.Fill.== infix(_:_:)(v57, v55) & 1) == 0 || v15 != v24)
    {
      v29 = v53;
      goto LABEL_26;
    }
    if (v54 != 255)
      break;
    v27 = v53;
    if (v50 != 255)
    {
LABEL_23:
      outlined copy of GraphicsBlendMode?(v51, v50);
      v29 = v53;
      outlined copy of GraphicsBlendMode?(v53, v54);
      outlined consume of GraphicsBlendMode?(v53, v54);
      outlined consume of GraphicsBlendMode?(v51, v50);
      goto LABEL_26;
    }
LABEL_17:
    v28 = specialized static Array<A>.== infix(_:_:)(v52, v25);
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v16, v48, (unint64_t)v49, v47, v35, v17, v20, v36, v21, v22, v23);
    outlined consume of GraphicsBlendMode?(v51, v50);
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v26, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37);
    outlined consume of GraphicsBlendMode?(v27, v54);
    swift_bridgeObjectRelease();
    v4 = v34 - 1;
    if ((v28 & 1) != 0)
    {
      v3 = v33 + 112;
      if (v34)
        continue;
    }
    return v28 & 1;
  }
  if (v50 == 255)
    goto LABEL_23;
  if ((v54 & 1) == 0)
  {
    if ((v50 & 1) != 0)
      goto LABEL_25;
    v27 = v53;
    outlined consume of GraphicsBlendMode(v53, 0);
    outlined consume of GraphicsBlendMode(v51, 0);
    if ((_DWORD)v53 != (_DWORD)v51)
    {
LABEL_22:
      v29 = v27;
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  if ((v50 & 1) != 0)
  {
    outlined copy of GraphicsBlendMode?(v51, v50);
    v27 = v53;
    outlined copy of GraphicsBlendMode?(v53, v54);
    outlined consume of GraphicsBlendMode(v53, 1);
    outlined consume of GraphicsBlendMode(v51, 1);
    if (v53 != v51)
      goto LABEL_22;
    goto LABEL_17;
  }
  swift_unknownObjectRetain();
LABEL_25:
  outlined copy of GraphicsBlendMode(v51, (v54 & 1) == 0);
  v29 = v53;
  outlined consume of GraphicsBlendMode(v53, v54 & 1);
  outlined consume of GraphicsBlendMode(v51, (v54 & 1) == 0);
LABEL_26:
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v16, v48, (unint64_t)v49, v47, v35, v17, v20, v36, v21, v22, v23);
  outlined consume of GraphicsBlendMode?(v51, v50);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v26, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37);
  outlined consume of GraphicsBlendMode?(v29, v54);
  swift_bridgeObjectRelease();
LABEL_27:
  v28 = 0;
  return v28 & 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  for (i = 0; ; i += 48)
  {
    v4 = 0;
    v5 = a1 + i;
    v6 = a2 + i;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)(a1 + i + 32), *(float32x4_t *)(a2 + i + 32))), 0xFuLL))) & 1) == 0|| *(double *)(v5 + 48) != *(double *)(v6 + 48))
    {
      break;
    }
    if ((*(_BYTE *)(a1 + i + 72) & 1) != 0)
    {
      if ((*(_BYTE *)(v6 + 72) & 1) == 0)
        return 0;
    }
    else
    {
      if ((*(_BYTE *)(v6 + 72) & 1) != 0)
        return 0;
      v7 = *(_QWORD *)(v5 + 56);
      v8 = *(_QWORD *)(v5 + 64);
      v9 = *(_QWORD *)(v6 + 64);
      v10 = *(float *)&v7 == COERCE_FLOAT(*(_QWORD *)(v6 + 56))
         && *((float *)&v7 + 1) == COERCE_FLOAT(HIDWORD(*(_QWORD *)(v6 + 56)));
      v11 = v10 && *(float *)&v8 == *(float *)&v9;
      if (!v11 || *((float *)&v8 + 1) != *((float *)&v9 + 1))
        return 0;
    }
    if (!--v2)
      return 1;
  }
  return v4;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9.n128_f64[0] = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == *(_QWORD *)(a2 + 16))
  {
    if (!v12 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16);
      v15 = v12 - 1;
      do
      {
        v16 = a1;
        v14(v11, a1 + v13, v4, v9);
        v17 = a2;
        ((void (*)(char *, unint64_t, uint64_t))v14)(v6, a2 + v13, v4);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v6, v4);
        v19(v11, v4);
        v21 = v15-- != 0;
        if ((v18 & 1) == 0)
          break;
        v13 += v23;
        a2 = v17;
        a1 = v16;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  int v14;
  float v15;
  int v16;
  float v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    for (i = 0; ; i += 36)
    {
      v4 = a1 + i;
      v5 = a2 + i;
      if (*(_DWORD *)(a1 + i + 32) != *(_DWORD *)(a2 + i + 32))
        break;
      v6 = *(float *)(v4 + 36);
      v7 = *(float *)(v4 + 44);
      v8 = *(unsigned __int8 *)(v4 + 48);
      v10 = *(float *)(v4 + 52);
      v9 = *(float *)(v4 + 56);
      v12 = *(_DWORD *)(v4 + 60);
      v11 = *(_DWORD *)(v4 + 64);
      v13 = *(float *)(v5 + 36);
      v14 = *(unsigned __int8 *)(v5 + 40);
      v15 = *(float *)(v5 + 44);
      v16 = *(unsigned __int8 *)(v5 + 48);
      v18 = *(float *)(v5 + 52);
      v17 = *(float *)(v5 + 56);
      v20 = *(_DWORD *)(v5 + 60);
      v19 = *(_DWORD *)(v5 + 64);
      v21 = *(unsigned __int8 *)(v4 + 40);
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
        {
          v21 = 0;
          if (v14 != 1 || LODWORD(v6) != LODWORD(v13))
            return v21;
        }
        else
        {
          v21 = 0;
          if (v14 != 2 || v13 != 0.0)
            return v21;
        }
      }
      else if (v14 || v6 != v13)
      {
        return v21;
      }
      if (v8)
      {
        if (v8 == 1)
        {
          if (v16 != 1)
            return 0;
          v21 = 0;
          if (LODWORD(v7) != LODWORD(v15))
            return v21;
        }
        else
        {
          v21 = 0;
          if (v16 != 2 || v15 != 0.0)
            return v21;
        }
        if (v10 != v18 || v9 != v17 || v12 != v20 || v11 != v19)
          return v21;
      }
      else
      {
        v21 = 0;
        if (v16)
          return v21;
        v22 = v7 == v15 && v10 == v18;
        v23 = v22 && v9 == v17;
        v24 = v23 && v12 == v20;
        if (!v24 || v11 != v19)
          return v21;
      }
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    for (i = 0; ; i += 56)
    {
      v4 = a1 + i;
      v5 = a2 + i;
      if (*(float *)(a1 + i + 32) != *(float *)(a2 + i + 32))
        break;
      if ((*(_BYTE *)(v4 + 80) & 1) != 0)
      {
        if ((*(_BYTE *)(v5 + 80) & 1) == 0)
          return 0;
      }
      else
      {
        if ((*(_BYTE *)(v5 + 80) & 1) != 0)
          return 0;
        v6 = *(_QWORD *)(v4 + 40);
        v7 = *(_QWORD *)(v4 + 48);
        v8 = *(_QWORD *)(v5 + 48);
        v9 = *(_QWORD *)(v5 + 40);
        v10 = *(float *)&v6 == *(float *)&v9 && *((float *)&v6 + 1) == *((float *)&v9 + 1);
        v11 = v10 && *(float *)&v7 == *(float *)&v8;
        v12 = v11 && *((float *)&v7 + 1) == *((float *)&v8 + 1);
        v13 = v12 && *(double *)(v4 + 56) == *(double *)(v5 + 56);
        v14 = v13 && *(double *)(v4 + 64) == *(double *)(v5 + 64);
        if (!v14 || *(double *)(v4 + 72) != *(double *)(v5 + 72))
          return 0;
      }
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  for (i = 0; ; i += 72)
  {
    v6 = a1 + i;
    v7 = *(float *)(a1 + i + 80);
    v8 = *(_QWORD *)(a1 + i + 88);
    v9 = *(unsigned __int8 *)(a1 + i + 96);
    v10 = a2 + i;
    v11 = *(float *)(a2 + i + 80);
    v12 = *(_QWORD *)(a2 + i + 88);
    v13 = *(unsigned __int8 *)(a2 + i + 96);
    if ((*(_BYTE *)(a1 + i + 77) & 1) != 0)
    {
      if (v7 == v11)
        v14 = *(_BYTE *)(a2 + i + 77);
      else
        v14 = 0;
      if ((v14 & 1) == 0)
        return 0;
    }
    else
    {
      result = 0;
      if ((*(_BYTE *)(a2 + i + 77) & 1) != 0)
        return result;
      v16 = *(_QWORD *)(v6 + 32);
      v17 = *(_QWORD *)(v10 + 32);
      if (*(float *)&v16 != *(float *)&v17)
        return result;
      if (*((float *)&v16 + 1) != *((float *)&v17 + 1))
        return result;
      v18 = *(_QWORD *)(v6 + 40);
      v19 = *(_QWORD *)(v10 + 40);
      if (*(float *)&v18 != *(float *)&v19)
        return result;
      if (*((float *)&v18 + 1) != *((float *)&v19 + 1))
        return result;
      if (*(double *)(v6 + 48) != *(double *)(v10 + 48))
        return result;
      if (*(double *)(v6 + 56) != *(double *)(v10 + 56))
        return result;
      if (*(double *)(v6 + 64) != *(double *)(v10 + 64))
        return result;
      v20 = *(unsigned int *)(v6 + 72) | ((unint64_t)*(unsigned __int8 *)(v6 + 76) << 32);
      v21 = *(unsigned int *)(v10 + 72) | ((unint64_t)*(unsigned __int8 *)(v10 + 76) << 32);
      if (*(float *)&v20 != *(float *)&v21)
        return result;
      result = 0;
      if (BYTE4(v20) != BYTE4(v21) || v7 != v11)
        return result;
    }
    if (v9 == 255)
    {
      if (v13 != 255)
        goto LABEL_34;
      goto LABEL_6;
    }
    if (v13 == 255)
    {
LABEL_34:
      outlined copy of GraphicsBlendMode?(*(_QWORD *)(a2 + i + 88), *(_BYTE *)(a2 + i + 96));
      outlined copy of GraphicsBlendMode?(v8, v9);
      outlined consume of GraphicsBlendMode?(v8, v9);
      outlined consume of GraphicsBlendMode?(v12, v13);
      return 0;
    }
    if ((v9 & 1) != 0)
      break;
    if ((v13 & 1) != 0)
      goto LABEL_38;
    outlined consume of GraphicsBlendMode(*(_QWORD *)(a1 + i + 88), 0);
    outlined consume of GraphicsBlendMode(v12, 0);
    if ((_DWORD)v8 != (_DWORD)v12)
      return 0;
LABEL_6:
    if (!--v2)
      return 1;
  }
  if ((v13 & 1) != 0)
  {
    outlined copy of GraphicsBlendMode?(*(_QWORD *)(a2 + i + 88), *(_BYTE *)(a2 + i + 96));
    outlined copy of GraphicsBlendMode?(v8, v9);
    outlined consume of GraphicsBlendMode(v8, 1);
    outlined consume of GraphicsBlendMode(v12, 1);
    if (v8 != v12)
      return 0;
    goto LABEL_6;
  }
  outlined copy of GraphicsBlendMode?(*(_QWORD *)(a1 + i + 88), *(_BYTE *)(a1 + i + 96));
LABEL_38:
  outlined copy of GraphicsBlendMode?(v12, v13);
  outlined consume of GraphicsBlendMode(v8, v9 & 1);
  outlined consume of GraphicsBlendMode(v12, (v9 & 1) == 0);
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  int32x2_t *v4;
  int32x2_t *v5;
  int32x2_t v6;
  uint64_t result;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (int32x2_t *)(a1 + 36);
  v5 = (int32x2_t *)(a2 + 36);
  do
  {
    v6 = vceq_s32(*v4, *v5);
    result = ((v4[-1].i32[1] == v5[-1].i32[1]) & v6.i8[0]) & v6.i8[4];
    v9 = v3-- != 0;
    if ((_DWORD)result != 1)
      break;
    v4 = (int32x2_t *)((char *)v4 + 12);
    v5 = (int32x2_t *)((char *)v5 + 12);
  }
  while (v9);
  return result;
}

{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (double *)(a2 + 40);
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v6 = *v4;
      v7 = *v3;
      if (v5 == *((_QWORD *)v3 - 1))
      {
        if (v6 != v7)
          return 0;
      }
      else
      {
        v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88);
        swift_retain();
        v9 = swift_retain();
        LOBYTE(v8) = v8(v9);
        swift_release();
        swift_release();
        result = 0;
        if ((v8 & 1) == 0 || v6 != v7)
          return result;
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  float v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  float v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    for (i = 0; ; i += 56)
    {
      v6 = a1 + i;
      v7 = a2 + i;
      if (*(_QWORD *)(a1 + i + 32) != *(_QWORD *)(a2 + i + 32) || *(_QWORD *)(a1 + i + 40) != *(_QWORD *)(a2 + i + 40))
        break;
      v9 = *(float *)(v6 + 80);
      v10 = *(_DWORD *)(v6 + 76);
      v11 = *(_WORD *)(v6 + 72);
      v12 = *(_QWORD *)(v6 + 64);
      v13 = *(float *)(v7 + 80);
      v14 = *(_DWORD *)(v7 + 76);
      v15 = *(_WORD *)(v7 + 72);
      v16 = *(_QWORD *)(v7 + 64);
      v22 = *(_OWORD *)(v6 + 48);
      v23 = v12;
      v24 = v11;
      v19 = *(_OWORD *)(v7 + 48);
      v20 = v16;
      v21 = v15;
      v17 = static _SymbolEffect.Storage.== infix(_:_:)(&v22, &v19);
      result = 0;
      if ((v17 & 1) == 0 || v10 != v14 || v9 != v13)
        return result;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  uint64_t v15;
  uint64_t (*v17)(uint64_t);

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    v3 = a1;
    if (a1 != a2)
    {
      v4 = 0;
      v15 = a2;
      do
      {
        v5 = *(_QWORD *)(v3 + v4 + 32);
        v6 = *(_QWORD *)(v3 + v4 + 40);
        v7 = *(_DWORD *)(v3 + v4 + 48);
        v8 = *(unsigned __int8 *)(v3 + v4 + 52);
        v9 = *(_QWORD *)(a2 + v4 + 40);
        v10 = *(_DWORD *)(a2 + v4 + 48);
        v11 = *(unsigned __int8 *)(a2 + v4 + 52);
        if (v5 == *(_QWORD *)(a2 + v4 + 32))
        {
          result = 0;
          v14 = v6 == v9 && v7 == v10;
          if (!v14 || ((v8 ^ v11) & 1) != 0)
            return result;
        }
        else
        {
          v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104);
          swift_retain();
          v12 = swift_retain();
          LOBYTE(v17) = v17(v12);
          swift_release();
          swift_release();
          result = 0;
          if ((v17 & 1) == 0)
            return result;
          if (v6 != v9)
            return result;
          if (v7 != v10)
            return result;
          a2 = v15;
          v3 = a1;
          if (((v8 ^ v11) & 1) != 0)
            return result;
        }
        v4 += 24;
        --v2;
      }
      while (v2);
    }
  }
  return 1;
}

{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(_OWORD *)(a1 + 48);
  v20[0] = *(_OWORD *)(a1 + 32);
  v20[1] = v5;
  v21 = *(_QWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a2 + 48);
  v22[0] = *(_OWORD *)(a2 + 32);
  v22[1] = v6;
  v23 = *(_QWORD *)(a2 + 64);
  if ((specialized static MeshGradient.BezierPoint.== infix(_:_:)((float32x2_t *)v20, (float32x2_t *)v22) & 1) == 0)
    return 0;
  v7 = a1 + 72;
  v8 = a2 + 72;
  do
  {
    v9 = --v2 == 0;
    if (!v2)
      break;
    v10 = v7 + 40;
    v11 = v8 + 40;
    v12 = *(_OWORD *)(v7 + 16);
    v16[0] = *(_OWORD *)v7;
    v16[1] = v12;
    v17 = *(_QWORD *)(v7 + 32);
    v13 = *(_OWORD *)(v8 + 16);
    v18[0] = *(_OWORD *)v8;
    v18[1] = v13;
    v19 = *(_QWORD *)(v8 + 32);
    v14 = specialized static MeshGradient.BezierPoint.== infix(_:_:)((float32x2_t *)v16, (float32x2_t *)v18);
    v8 = v11;
    v7 = v10;
  }
  while ((v14 & 1) != 0);
  return v9;
}

{
  uint64_t v2;
  uint64_t i;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  float v11;
  char v12;
  int v13;
  float v14;
  int v15;
  float v16;
  float v17;
  __int16 v18;
  uint64_t v19;
  float v20;
  float v21;
  __int16 v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  __int128 v30;
  uint64_t v31;
  __int16 v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    for (i = 0; ; i += 64)
    {
      v7 = a1 + i;
      v8 = a2 + i;
      if (*(_QWORD *)(a1 + i + 32) != *(_QWORD *)(a2 + i + 32) || *(_QWORD *)(a1 + i + 40) != *(_QWORD *)(a2 + i + 40))
        break;
      v10 = *(_BYTE *)(v7 + 84);
      v11 = *(float *)(v7 + 88);
      v12 = *(_BYTE *)(v7 + 92);
      v13 = *(unsigned __int8 *)(v8 + 84);
      v14 = *(float *)(v8 + 88);
      v15 = *(unsigned __int8 *)(v8 + 92);
      v17 = *(float *)(v7 + 76);
      v16 = *(float *)(v7 + 80);
      v18 = *(_WORD *)(v7 + 72);
      v19 = *(_QWORD *)(v7 + 64);
      v21 = *(float *)(v8 + 76);
      v20 = *(float *)(v8 + 80);
      v22 = *(_WORD *)(v8 + 72);
      v23 = *(_QWORD *)(v8 + 64);
      v30 = *(_OWORD *)(v7 + 48);
      v31 = v19;
      v32 = v18;
      v27 = *(_OWORD *)(v8 + 48);
      v28 = v23;
      v29 = v22;
      v24 = static _SymbolEffect.Storage.== infix(_:_:)(&v30, &v27);
      result = 0;
      if ((v24 & 1) == 0 || v17 != v21)
        return result;
      if ((v10 & 1) != 0)
      {
        if (!v13)
          return 0;
      }
      else
      {
        if (v16 == v20)
          v26 = v13;
        else
          v26 = 1;
        if ((v26 & 1) != 0)
          return 0;
      }
      if ((v12 & 1) != 0)
      {
        if (!v15)
          return 0;
      }
      else
      {
        if (v11 == v14)
          v6 = v15;
        else
          v6 = 1;
        if ((v6 & 1) != 0)
          return 0;
      }
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 40);
    v4 = (_BYTE *)(a2 + 40);
    do
    {
      v6 = *((_QWORD *)v3 - 1);
      v7 = *((_QWORD *)v4 - 1);
      v5 = *v4;
      if (*v3 == 1)
      {
        if (v6)
        {
          if (!v7)
            v5 = 0;
          if ((v5 & 1) == 0)
            return 0;
        }
        else
        {
          if (v7)
            v5 = 0;
          if ((v5 & 1) == 0)
            return 0;
        }
      }
      else
      {
        if (v6 != v7)
          v5 = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v8;
  _BYTE v10[120];
  _BYTE v11[120];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v6 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        outlined init with copy of AccessibilityCustomContentEntry(v3, (uint64_t)v11);
        outlined init with copy of AccessibilityCustomContentEntry(v4, (uint64_t)v10);
        v6 = specialized static AccessibilityCustomContentEntry.== infix(_:_:)((uint64_t)v11, (uint64_t)v10);
        outlined destroy of AccessibilityCustomContentEntry((uint64_t)v10);
        outlined destroy of AccessibilityCustomContentEntry((uint64_t)v11);
        v8 = v5-- != 0;
        if ((v6 & 1) == 0)
          break;
        v4 += 120;
        v3 += 120;
      }
      while (v8);
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

unint64_t specialized static Array<A>.== infix(_:_:)(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = result;
  v5 = result >> 62;
  if (!(result >> 62))
  {
    v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v6 == v22)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_34;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = v4 & 0xFFFFFFFFFFFFFF8;
  v9 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v8 = v4;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    result = MEMORY[0x23B7C6D9C](0, v4);
    v12 = result;
    v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
      goto LABEL_18;
LABEL_41:
    v14 = MEMORY[0x23B7C6D9C](0, a2);
LABEL_20:
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v14);
    swift_release();
    swift_release();
    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v20 = i - 4;
        if (v2)
        {
          v21 = MEMORY[0x23B7C6D9C](i - 4, v4);
          if (v13)
            goto LABEL_22;
        }
        else
        {
          if (v20 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          v21 = *(_QWORD *)(v4 + 8 * i);
          swift_retain();
          if (v13)
          {
LABEL_22:
            v18 = MEMORY[0x23B7C6D9C](i - 4, a2);
            goto LABEL_23;
          }
        }
        if (v20 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v18 = *(_QWORD *)(a2 + 8 * i);
        swift_retain();
LABEL_23:
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v18);
        swift_release();
        swift_release();
        if ((v19 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_40;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  v12 = *(_QWORD *)(v4 + 32);
  result = swift_retain();
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_41;
LABEL_18:
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD *)(a2 + 32);
    swift_retain();
    goto LABEL_20;
  }
LABEL_43:
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = result;
  v5 = result >> 62;
  if (!(result >> 62))
  {
    v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v6 == v22)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_34;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = v4 & 0xFFFFFFFFFFFFFF8;
  v9 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v8 = v4;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    result = MEMORY[0x23B7C6D9C](0, v4);
    v12 = result;
    v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
      goto LABEL_18;
LABEL_41:
    v14 = MEMORY[0x23B7C6D9C](0, a2);
LABEL_20:
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v14);
    swift_release();
    swift_release();
    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v20 = i - 4;
        if (v2)
        {
          v21 = MEMORY[0x23B7C6D9C](i - 4, v4);
          if (v13)
            goto LABEL_22;
        }
        else
        {
          if (v20 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          v21 = *(_QWORD *)(v4 + 8 * i);
          swift_retain();
          if (v13)
          {
LABEL_22:
            v18 = MEMORY[0x23B7C6D9C](i - 4, a2);
            goto LABEL_23;
          }
        }
        if (v20 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v18 = *(_QWORD *)(a2 + 8 * i);
        swift_retain();
LABEL_23:
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 88))(v18);
        swift_release();
        swift_release();
        if ((v19 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_40;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  v12 = *(_QWORD *)(v4 + 32);
  result = swift_retain();
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_41;
LABEL_18:
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD *)(a2 + 32);
    swift_retain();
    goto LABEL_20;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  char v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = (void *)(a2 >> 62);
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_35:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v23)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v6 = (void *)(a2 >> 62);
  if (a2 >> 62)
    goto LABEL_35;
LABEL_3:
  if (v5 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v5)
    return 1;
  v7 = a1 & 0xFFFFFFFFFFFFFF8;
  v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v7 = a1;
  if (v4)
    v8 = v7;
  v9 = a2 & 0xFFFFFFFFFFFFFF8;
  v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v9 = a2;
  if (v6)
    v10 = v9;
  if (v8 == v10)
    return 1;
  if (v5 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v25 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_41:
    result = MEMORY[0x23B7C6D9C](0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v6 = (void *)result;
  v24 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_43:
    v12 = (id)MEMORY[0x23B7C6D9C](0, a2);
LABEL_21:
    v13 = v12;
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v14 = static _CFObject.== infix(_:_:)();

    if ((v14 & 1) != 0)
    {
      v15 = 1 - v5;
      for (i = 5; ; ++i)
      {
        v5 = v15 + i == 5;
        if (v15 + i == 5)
          break;
        v20 = i - 4;
        if (v25)
        {
          v21 = (id)MEMORY[0x23B7C6D9C](i - 4, a1);
        }
        else
        {
          if (v20 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          v21 = *(id *)(a1 + 8 * i);
        }
        v22 = v21;
        if (v24)
        {
          v17 = (id)MEMORY[0x23B7C6D9C](i - 4, a2);
        }
        else
        {
          if (v20 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_39;
          v17 = *(id *)(a2 + 8 * i);
        }
        v18 = v17;
        v19 = static _CFObject.== infix(_:_:)();

        if ((v19 & 1) == 0)
          return v5;
      }
      return v5;
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

unsigned __int16 specialized static Array<A>.== infix(_:_:)@<H0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>)
{
  uint64_t v2;
  unsigned __int16 result;
  float32x4_t *v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;

  v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(a1[2], a2[2])), 0xFuLL)));
        if ((result & 1) != 0)
        {
          v4 = a1 + 3;
          v5 = a2 + 3;
          v6 = v2 - 1;
          do
          {
            if (!v6)
              break;
            v7 = *v4++;
            v8 = v7;
            v9 = *v5++;
            result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v8, v9)), 0xFuLL)));
            --v6;
          }
          while ((result & 1) != 0);
        }
      }
    }
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t v2;
  int32x2_t *v3;
  int32x2_t *v4;
  uint64_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  BOOL v11;

  v2 = a1[2];
  if (*(_QWORD *)&v2 != *(_QWORD *)&a2[2])
    return 0;
  if (!*(_QWORD *)&v2 || a1 == a2)
    return 1;
  v3 = a1 + 4;
  v4 = a2 + 4;
  v5 = *(_QWORD *)&v2 - 1;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    v9 = vceq_s32(v7, v8);
    v11 = v5-- != 0;
  }
  while ((v9.i8[0] & v9.i8[4] & 1) != 0 && v11);
  return v9.i8[0] & v9.i8[4] & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t *v3;
  float32x2_t *v4;
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  BOOL v11;

  v2 = a1[2];
  if (*(_QWORD *)&v2 != *(_QWORD *)&a2[2])
    return 0;
  if (!*(_QWORD *)&v2 || a1 == a2)
    return 1;
  v3 = a1 + 4;
  v4 = a2 + 4;
  v5 = *(_QWORD *)&v2 - 1;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    v9 = vceq_f32(v7, v8);
    v11 = v5-- != 0;
  }
  while ((v9.i8[0] & v9.i8[4] & 1) != 0 && v11);
  return v9.i8[0] & v9.i8[4] & 1;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  unint64_t v23;
  unint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v31 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v3 + 32); ; result = (id)MEMORY[0x23B7C6D9C](0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)MEMORY[0x23B7C6D9C](0, v2);
LABEL_21:
    v14 = v13;
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v15 = static _CFObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
      goto LABEL_48;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v30 = v8;
      v17 = 0;
      v8 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v31)
          v18 = (id)MEMORY[0x23B7C6D9C](v17 + 1, v3);
        else
          v18 = *(id *)(v3 + 40 + 8 * v17);
        v19 = v18;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v20 = (id)MEMORY[0x23B7C6D9C](v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v30 + 16))
            goto LABEL_53;
          v20 = *(id *)(v2 + 40 + 8 * v17);
        }
        v21 = v20;
        v5 = static _CFObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v8 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v23 = *(_QWORD *)(v8 + 16);
      if (v23 <= 1)
        v23 = 1;
      v24 = v23 - 1;
      v25 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v24)
          goto LABEL_52;
        v27 = *v25++;
        v26 = v27;
        v28 = *(void **)v8;
        v8 += 8;
        v2 = v26;
        v3 = v28;
        v5 = static _CFObject.== infix(_:_:)();

        if ((v5 & 1) != 0)
        {
          --v24;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for NSNumber);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for CAMediaTimingFunction);
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id result;
  void *v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;

  v4 = a2;
  v5 = a1;
  v6 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == v29)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v8 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v7 != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v7)
    goto LABEL_37;
  v9 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0)
    v9 = v5;
  if (!v6)
    v9 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  v10 = v4 & 0xFFFFFFFFFFFFFF8;
  v11 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v12 = v4;
  else
    v12 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v8)
    v11 = v12;
  if (v9 == v11)
  {
LABEL_37:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v30 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v5 + 32); ; result = (id)MEMORY[0x23B7C6D9C](0, v5))
  {
    v14 = result;
    if ((v4 & 0xC000000000000001) == 0)
      break;
    v15 = (id)MEMORY[0x23B7C6D9C](0, v4);
LABEL_21:
    v16 = v15;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)a3);
    a3 = static NSObject.== infix(_:_:)();

    if ((a3 & 1) == 0)
      goto LABEL_48;
    v17 = v7 - 1;
    if (v7 == 1)
      return (id)(v7 & 1);
    if (((v4 | v5) & 0xC000000000000001) != 0)
    {
      v18 = 0;
      v19 = v7 - 2;
      while (v17 != v18)
      {
        v7 = v18 + 1;
        if (v30)
          v20 = (id)MEMORY[0x23B7C6D9C](v18 + 1, v5);
        else
          v20 = *(id *)(v5 + 40 + 8 * v18);
        a3 = (uint64_t)v20;
        if ((v4 & 0xC000000000000001) != 0)
        {
          v21 = (id)MEMORY[0x23B7C6D9C](v18 + 1, v4);
        }
        else
        {
          if (v7 >= *(_QWORD *)(v10 + 16))
            goto LABEL_53;
          v21 = *(id *)(v4 + 40 + 8 * v18);
        }
        v22 = v21;
        v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0 && v19 != v18++)
          continue;
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v10 + 16);
      if (v24 <= 1)
        v24 = 1;
      a3 = v24 - 1;
      v25 = (void **)(v5 + 40);
      v10 = v4 + 40;
      while (v17)
      {
        if (!a3)
          goto LABEL_52;
        v27 = *v25++;
        v26 = v27;
        v28 = *(void **)v10;
        v10 += 8;
        v4 = v26;
        v5 = v28;
        v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0)
        {
          --a3;
          if (--v17)
            continue;
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = *(id *)(v4 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2[2])
    return 0;
  if (!v2 || (_QWORD *)result == a2)
    return 1;
  v3 = *(_QWORD *)(result + 32);
  v4 = a2[4];
  if (__OFSUB__(v4, v3))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 != v3)
    return 0;
  v5 = *(_QWORD *)(result + 40);
  v6 = a2[5];
  if (!__OFSUB__(v6, v5))
  {
    if (v6 == v5)
    {
      v7 = v2 - 1;
      if (!v7)
        return 1;
      v8 = a2 + 7;
      v9 = (_QWORD *)(result + 56);
      result = 1;
      while (1)
      {
        v10 = *(v9 - 1);
        v11 = *(v8 - 1);
        if (__OFSUB__(v11, v10))
          break;
        if (v11 != v10)
          return 0;
        if (__OFSUB__(*v8, *v9))
          goto LABEL_19;
        if (*v8 != *v9)
          return 0;
        v8 += 2;
        v9 += 2;
        if (!--v7)
          return result;
      }
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    return 0;
  }
LABEL_21:
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = a3 & 1;
  if ((a3 & 1) == 0)
  {
    v6[0] = a1;
    v6[1] = a2;
    closure #1 in ResolvedGradient.Stop.encode(to:)((float *)v6, a4);
  }
  return v4;
}

uint64_t Gradient.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  v5 = *a1;
  v6 = a1[1];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(a2, v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if (one-time initialization token for default != -1)
    result = swift_once();
  v9 = static ResolvedGradient.ColorSpace.default;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = v9;
  return result;
}

uint64_t Gradient.fallbackColor.getter(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    return swift_retain();
  else
    return 0;
}

BOOL ResolvedGradient.isClear.getter()
{
  uint64_t v0;
  uint64_t v1;
  float *v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (float *)(*(_QWORD *)v0 + 44);
    v3 = 1;
    v4 = 1;
    do
    {
      if (v4)
      {
        result = *v2 == 0.0;
        v4 = *v2 == 0.0;
        if (v1 == v3)
          return result;
      }
      else
      {
        result = 0;
        v4 = 0;
        if (v1 == v3)
          return result;
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 1;
}

BOOL ResolvedGradient.isOpaque.getter()
{
  uint64_t v0;
  uint64_t v1;
  float *v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (float *)(*(_QWORD *)v0 + 44);
    v3 = 1;
    v4 = 1;
    do
    {
      if (v4)
      {
        v4 = *v2 == 1.0;
        result = v4;
        if (v1 == v3)
          return result;
      }
      else
      {
        v4 = 0;
        result = 0;
        if (v1 == v3)
          return result;
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 0;
}

uint64_t ResolvedGradient.animatableData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  unsigned int v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  SwiftUI::ResolvedGradient v13;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  result = swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v5)
      goto LABEL_7;
LABEL_9:
    v9 = v3;
    v10 = v4;
    swift_bridgeObjectRetain();
    v13.stops._rawValue = &v9;
    result = (unint64_t)ResolvedGradientVector.init(_:)(v13);
    v8 = v11;
    v7 = v12;
    goto LABEL_10;
  }
  result = dyld_program_sdk_at_least();
  if ((result & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v7 = 0;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_10:
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = v7;
  return result;
}

uint64_t ResolvedGradient.animatableData.setter(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  float *v27;
  char v29;
  __int128 v30;
  char v31;

  v2 = v1;
  v3 = *a1;
  v29 = *((_BYTE *)a1 + 8);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v4 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      return swift_bridgeObjectRelease();
  }
  else if (static Semantics.forced < v4)
  {
    return swift_bridgeObjectRelease();
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v6 + 16));
  }
  else
  {
    *v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v6 + 24) >> 1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop);
    swift_bridgeObjectRelease();
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = (_QWORD *)*v2;
  v9 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v2 = v8;
  if (!(_DWORD)v9 || v7 > v8[3] >> 1)
  {
    if (v8[2] <= v7)
      v10 = v7;
    else
      v10 = v8[2];
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9, v10, 0, v8);
  }
  *v2 = v8;
  v11 = *(_QWORD *)(v3 + 16);
  if (!v11)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12 = (_BYTE *)(v3 + 72);
  do
  {
    v13 = *((_QWORD *)v12 - 3);
    v14 = *((_QWORD *)v12 - 2);
    v15 = *((_QWORD *)v12 - 1);
    v16 = *v12;
    v31 = v29;
    v30 = *(_OWORD *)(v12 - 40);
    v17 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)&v30);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v24 = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v8;
    if ((v24 & 1) == 0)
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      *v2 = v8;
    }
    v26 = v8[2];
    v25 = v8[3];
    if (v26 >= v25 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v8);
    v8[2] = v26 + 1;
    v27 = (float *)&v8[6 * v26];
    v27[8] = v17;
    *((_DWORD *)v27 + 9) = v19;
    *((_DWORD *)v27 + 10) = v21;
    *((_DWORD *)v27 + 11) = v23;
    *((_QWORD *)v27 + 6) = v13;
    *((_QWORD *)v27 + 7) = v14;
    *((_QWORD *)v27 + 8) = v15;
    *((_BYTE *)v27 + 72) = v16;
    *v2 = v8;
    v12 += 48;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

SwiftUI::ResolvedGradient __swiftcall ResolvedGradient.init()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  SwiftUI::ResolvedGradient::ColorSpace v4;
  SwiftUI::ResolvedGradient result;

  v1 = v0;
  if (one-time initialization token for default != -1)
    v3 = (void *)swift_once();
  v2 = static ResolvedGradient.ColorSpace.default;
  *(_QWORD *)v1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v1 + 8) = v2;
  result.stops._rawValue = v3;
  result.colorSpace = v4;
  return result;
}

uint64_t protocol witness for GradientProvider.resolve(in:) in conformance Gradient@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  v4 = *v2;
  v5 = *a1;
  v6 = a1[1];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(v4, v5, v6);
  result = swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1)
    result = swift_once();
  v9 = static ResolvedGradient.ColorSpace.default;
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v9;
  return result;
}

uint64_t Gradient.constantColor.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == 1)
    return swift_retain();
  if (!v1)
  {
    if (one-time initialization token for clear != -1)
      swift_once();
    return swift_retain();
  }
  return 0;
}

uint64_t Gradient.Stop.color.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Gradient.Stop.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Gradient.Stop.location.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*Gradient.Stop.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Gradient.Stop.resolve(in:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  int v6;
  int v7;
  int v8;
  __int128 v9;

  v9 = *a1;
  *(float *)a3 = (*(float (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v9);
  *(_DWORD *)(a3 + 4) = v6;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v8;
  *(double *)(a3 + 16) = a4;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
}

__n128 ResolvedGradient.Stop.init(color:location:interpolation:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, double a7@<D4>)
{
  unsigned __int8 v7;
  __n128 result;

  v7 = a1[1].n128_u8[0];
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float *)(a2 + 12) = a6;
  *(double *)(a2 + 16) = a7;
  result = *a1;
  *(__n128 *)(a2 + 24) = *a1;
  *(_BYTE *)(a2 + 40) = v7;
  return result;
}

BOOL static Gradient.Stop.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return (a1 == a2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a2) & 1) != 0) && a3 == a4;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Gradient.Stop(double *a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = a1[1];
  v3 = *(double *)(a2 + 8);
  return (*(_QWORD *)a1 == *(_QWORD *)a2 || ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))() & 1) != 0) && v2 == v3;
}

uint64_t Gradient.stops.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Gradient.stops.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ResolvedGradient __swiftcall ResolvedGradient.init(stops:colorSpace:)(Swift::OpaquePointer stops, SwiftUI::ResolvedGradient::ColorSpace colorSpace)
{
  uint64_t v2;
  char v3;
  SwiftUI::ResolvedGradient result;

  v3 = *(_BYTE *)colorSpace;
  *(Swift::OpaquePointer *)v2 = stops;
  *(_BYTE *)(v2 + 8) = v3;
  result.stops = stops;
  result.colorSpace = colorSpace;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Gradient(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

void Gradient.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  void (*v7)(uint64_t);
  Swift::UInt64 v8;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v6 = *v5;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)*(v5 - 1) + 136);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = v6;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

Swift::Int Gradient.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Gradient()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Gradient(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Gradient()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void Gradient.Stop.hash(into:)(uint64_t a1, uint64_t a2, double a3)
{
  void (*v5)(uint64_t);
  Swift::UInt64 v6;

  v5 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 136);
  swift_retain();
  v5(a1);
  swift_release();
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)&a3;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
}

Swift::Int Gradient.Stop.hashValue.getter(uint64_t a1, double a2)
{
  void (*v4)(_BYTE *);
  Swift::UInt64 v5;
  _BYTE v7[72];

  Hasher.init(_seed:)();
  v4 = *(void (**)(_BYTE *))(*(_QWORD *)a1 + 136);
  swift_retain();
  v4(v7);
  swift_release();
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)&a2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Gradient.Stop()
{
  uint64_t v0;

  return Gradient.Stop.hashValue.getter(*(_QWORD *)v0, *(double *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance Gradient.Stop(uint64_t a1)
{
  _QWORD *v1;
  Swift::UInt64 v3;
  void (*v4)(uint64_t);
  Swift::UInt64 v5;

  v3 = v1[1];
  v4 = *(void (**)(uint64_t))(*(_QWORD *)*v1 + 136);
  swift_retain();
  v4(a1);
  swift_release();
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Gradient.Stop()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt64 v2;
  void (*v3)(_BYTE *);
  Swift::UInt64 v4;
  _BYTE v6[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  v3 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
  swift_retain();
  v3(v6);
  swift_release();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t Gradient._apply(to:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  specialized Paint._apply(to:)(a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance Gradient(uint64_t a1)
{
  swift_bridgeObjectRetain();
  specialized Paint._apply(to:)(a1);
  return swift_bridgeObjectRelease();
}

uint64_t Gradient.reversed.getter(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  double *v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (double *)(a1 + 16 * v1 + 24);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v6 = *v4;
      v7 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      swift_retain();
      if (v7 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v7 + 1, 1);
      *(_QWORD *)(v11 + 16) = v7 + 1;
      v9 = v11 + 16 * v7;
      *(_QWORD *)(v9 + 32) = v5;
      *(double *)(v9 + 40) = 1.0 - v6;
      v4 -= 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return specialized Gradient.init(stops:)(v2);
}

float ResolvedGradient.Stop.color.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ResolvedGradient.Stop.color.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ResolvedGradient.Stop.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ResolvedGradient.Stop.location.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ResolvedGradient.Stop.location.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*ResolvedGradient.Stop.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 ResolvedGradient.Stop.interpolation.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ResolvedGradient.Stop.interpolation.setter(__n128 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*ResolvedGradient.Stop.interpolation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static ResolvedGradient.Stop.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static ResolvedGradient.Stop.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedGradient.Stop(uint64_t a1, uint64_t a2)
{
  return specialized static ResolvedGradient.Stop.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static ResolvedGradient.ColorSpace.default.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for default != -1)
    result = swift_once();
  *a1 = static ResolvedGradient.ColorSpace.default;
  return result;
}

SwiftUI::ResolvedGradient::ColorSpace_optional __swiftcall ResolvedGradient.ColorSpace.init(rawValue:)(SwiftUI::ResolvedGradient::ColorSpace_optional rawValue)
{
  SwiftUI::ResolvedGradient::ColorSpace *v1;
  SwiftUI::ResolvedGradient::ColorSpace value;

  value = rawValue.value;
  if (rawValue.value >= SwiftUI_ResolvedGradient_ColorSpace_unknownDefault)
    value = SwiftUI_ResolvedGradient_ColorSpace_unknownDefault;
  *v1 = value;
  return rawValue;
}

uint64_t ResolvedGradient.ColorSpace.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::ResolvedGradient::ColorSpace_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ResolvedGradient.ColorSpace(Swift::UInt8 *a1)
{
  return ResolvedGradient.ColorSpace.init(rawValue:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvedGradient.ColorSpace()
{
  Swift::UInt8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvedGradient.ColorSpace()
{
  Swift::UInt8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t ResolvedGradient.stops.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResolvedGradient.stops.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ResolvedGradient.stops.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ResolvedGradient.colorSpace.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *ResolvedGradient.colorSpace.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ResolvedGradient.colorSpace.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedGradient.hasInterpolations.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE *v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (_BYTE *)(*(_QWORD *)v0 + 72);
    do
    {
      if ((v2 & 1) != 0)
        v2 = 1;
      else
        v2 = *v3 ^ 1;
      v3 += 48;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  return v2 & 1;
}

uint64_t ResolvedGradient.interpolationsCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE *i;
  uint64_t v4;
  BOOL v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (!v1)
    return 0;
  result = 0;
  for (i = (_BYTE *)(*(_QWORD *)v0 + 72); ; i += 48)
  {
    v4 = (*i & 1) == 0;
    v5 = __OFADD__(result, v4);
    result += v4;
    if (v5)
      break;
    if (!--v1)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t ResolvedGradient.constantColor.getter()
{
  float32x4_t **v0;
  float32x4_t *v1;
  uint64_t v2;
  float32x4_t v3;
  uint64_t v4;
  float32x4_t *i;

  v1 = *v0;
  v2 = (*v0)[1].i64[0];
  if (!v2)
    return 0;
  v3 = v1[2];
  v4 = v2 - 1;
  if (!v4)
    return v3.i64[0];
  for (i = v1 + 5; (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*i, v3)), 0xFuLL))) & 1) != 0; i += 3)
  {
    if (!--v4)
      return v3.i64[0];
  }
  return 0;
}

Swift::Void __swiftcall ResolvedGradient.multiplyOpacity(by:)(Swift::Float by)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float *v10;
  unint64_t v11;
  float v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v5 = v2[2];
    v6 = v3 - 1;
    if (v5 < v3 - 1)
      v6 = v2[2];
    if (v6 >= 2)
    {
      v8 = v6 + 1;
      v9 = v8 & 1;
      if ((v8 & 1) == 0)
        v9 = 2;
      v7 = v8 - v9;
      v10 = (float *)v2 + 23;
      v11 = v7;
      do
      {
        v12 = *v10 * by;
        *(v10 - 12) = *(v10 - 12) * by;
        *v10 = v12;
        v10 += 24;
        v11 -= 2;
      }
      while (v11);
    }
    else
    {
      v7 = 0;
    }
    v13 = 48 * v7 + 44;
    do
    {
      if (v7 >= v5)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v7;
      *(float *)((char *)v2 + v13) = *(float *)((char *)v2 + v13) * by;
      v13 += 48;
    }
    while (v3 != v7);
    *(_QWORD *)v1 = v2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedGradient(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & (v2 == v3);
}

void ResolvedGradient.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  uint64_t v12;
  char v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  float *v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  float *v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  float *v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  float *v45;
  double v46;
  Swift::UInt v47;
  uint64_t v48;
  int64_t v49;
  float v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  _BYTE *v76;
  int64_t v77;
  _BYTE *v78;
  int64_t v79;
  _BYTE *v80;
  int64_t v81;
  _BYTE *v82;
  int64_t v83;
  _BYTE *v84;
  int64_t v85;
  _BYTE *v86;
  int64_t v87;
  _BYTE *v88;
  int64_t v89;
  _BYTE *v90;
  int64_t v91;
  _BYTE *v92;
  int64_t v93;
  _BYTE *v94;
  int64_t v95;
  _BYTE *v96;
  Swift::UInt v97;
  uint64_t v98;

  v2 = v1;
  v4 = v2[8];
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (!v5)
  {
LABEL_165:
    if ((_DWORD)v4)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v4);
    }
    return;
  }
  v97 = v2[8];
  v6 = swift_bridgeObjectRetain() + 36;
  while (1)
  {
    v8 = *(float *)(v6 - 4);
    v7 = *(float *)v6;
    v10 = *(float *)(v6 + 4);
    v9 = *(float *)(v6 + 8);
    v11 = *(double *)(v6 + 12);
    v12 = *(_QWORD *)(v6 + 20);
    v98 = *(_QWORD *)(v6 + 28);
    v13 = *(_BYTE *)(v6 + 36);
    v14 = a1[1];
    v15 = a1[2];
    if (v14 >= v15)
    {
      v75 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_181;
      if (v15 < v75)
      {
        v76 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v75);
      }
      else
      {
        a1[1] = v75;
        v76 = (_BYTE *)(*a1 + v14);
      }
      *v76 = 10;
      v16 = a1[1];
    }
    else
    {
      *(_BYTE *)(*a1 + v14) = 10;
      v16 = v14 + 1;
      a1[1] = v14 + 1;
    }
    v17 = (_QWORD *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
    v17[2] = v19 + 1;
    v17[v19 + 4] = v16;
    a1[3] = v17;
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    a1[1] = v20;
    v21 = a1[2];
    if (v20 >= v21)
    {
      v77 = v16 + 2;
      if (__OFADD__(v20, 1))
        goto LABEL_182;
      if (v21 < v77)
      {
        v78 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v77);
      }
      else
      {
        a1[1] = v77;
        v78 = (_BYTE *)(*a1 + v20);
      }
      *v78 = 10;
      v22 = a1[1];
    }
    else
    {
      *(_BYTE *)(*a1 + v20) = 10;
      v22 = v16 + 2;
      a1[1] = v20 + 1;
    }
    v23 = (_QWORD *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    v25 = v23[2];
    v24 = v23[3];
    if (v25 >= v24 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
    v23[2] = v25 + 1;
    v23[v25 + 4] = v22;
    a1[3] = v23;
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_169;
    a1[1] = v26;
    if (v8 == 0.0)
    {
      if (v7 == 0.0)
        goto LABEL_22;
    }
    else
    {
      v27 = a1[2];
      if (v26 >= v27)
      {
        v81 = v22 + 2;
        if (__OFADD__(v26, 1))
          goto LABEL_184;
        if (v27 < v81)
        {
          v82 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v81);
        }
        else
        {
          a1[1] = v81;
          v82 = (_BYTE *)(*a1 + v26);
        }
        *v82 = 13;
        v28 = a1[1];
        v29 = v28 + 4;
        if (__OFADD__(v28, 4))
          goto LABEL_171;
      }
      else
      {
        *(_BYTE *)(*a1 + v26) = 13;
        v28 = v22 + 2;
        a1[1] = v22 + 2;
        v29 = v22 + 6;
        if (__OFADD__(v22 + 2, 4))
          goto LABEL_171;
      }
      if (a1[2] < v29)
      {
        v30 = (float *)ProtobufEncoder.growBufferSlow(to:)(v29);
      }
      else
      {
        a1[1] = v29;
        v30 = (float *)(*a1 + v28);
      }
      *v30 = v8;
      if (v7 == 0.0)
      {
LABEL_22:
        if (v10 == 0.0)
          goto LABEL_23;
        goto LABEL_35;
      }
    }
    v31 = a1[1];
    v32 = a1[2];
    if (v31 >= v32)
    {
      v83 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_185;
      if (v32 < v83)
      {
        v84 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v83);
      }
      else
      {
        a1[1] = v83;
        v84 = (_BYTE *)(*a1 + v31);
      }
      *v84 = 21;
      v33 = a1[1];
      v34 = v33 + 4;
      if (__OFADD__(v33, 4))
        goto LABEL_172;
    }
    else
    {
      *(_BYTE *)(*a1 + v31) = 21;
      v33 = v31 + 1;
      a1[1] = v33;
      v34 = v33 + 4;
      if (__OFADD__(v33, 4))
        goto LABEL_172;
    }
    if (a1[2] < v34)
    {
      v35 = (float *)ProtobufEncoder.growBufferSlow(to:)(v34);
    }
    else
    {
      a1[1] = v34;
      v35 = (float *)(*a1 + v33);
    }
    *v35 = v7;
    if (v10 == 0.0)
    {
LABEL_23:
      if (v9 == 1.0)
        goto LABEL_45;
LABEL_40:
      v41 = a1[1];
      v42 = a1[2];
      if (v41 >= v42)
      {
        v87 = v41 + 1;
        if (__OFADD__(v41, 1))
          goto LABEL_187;
        if (v42 < v87)
        {
          v88 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v87);
        }
        else
        {
          a1[1] = v87;
          v88 = (_BYTE *)(*a1 + v41);
        }
        *v88 = 37;
        v43 = a1[1];
        v44 = v43 + 4;
        if (__OFADD__(v43, 4))
          goto LABEL_174;
      }
      else
      {
        *(_BYTE *)(*a1 + v41) = 37;
        v43 = v41 + 1;
        a1[1] = v43;
        v44 = v43 + 4;
        if (__OFADD__(v43, 4))
          goto LABEL_174;
      }
      if (a1[2] < v44)
      {
        v45 = (float *)ProtobufEncoder.growBufferSlow(to:)(v44);
      }
      else
      {
        a1[1] = v44;
        v45 = (float *)(*a1 + v43);
      }
      *v45 = v9;
      goto LABEL_45;
    }
LABEL_35:
    v36 = a1[1];
    v37 = a1[2];
    if (v36 >= v37)
    {
      v85 = v36 + 1;
      if (__OFADD__(v36, 1))
        goto LABEL_186;
      if (v37 < v85)
      {
        v86 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v85);
      }
      else
      {
        a1[1] = v85;
        v86 = (_BYTE *)(*a1 + v36);
      }
      *v86 = 29;
      v38 = a1[1];
      v39 = v38 + 4;
      if (__OFADD__(v38, 4))
        goto LABEL_173;
    }
    else
    {
      *(_BYTE *)(*a1 + v36) = 29;
      v38 = v36 + 1;
      a1[1] = v38;
      v39 = v38 + 4;
      if (__OFADD__(v38, 4))
        goto LABEL_173;
    }
    if (a1[2] < v39)
    {
      v40 = (float *)ProtobufEncoder.growBufferSlow(to:)(v39);
    }
    else
    {
      a1[1] = v39;
      v40 = (float *)(*a1 + v38);
    }
    *v40 = v10;
    if (v9 != 1.0)
      goto LABEL_40;
LABEL_45:
    ProtobufEncoder.endLengthDelimited()();
    if (v11 != 0.0)
    {
      v46 = fabs(v11);
      if (v46 >= 65536.0)
        v47 = 17;
      else
        v47 = 21;
      ProtobufEncoder.encodeVarint(_:)(v47);
      if (v46 >= 65536.0)
      {
        v51 = a1[1];
        v52 = v51 + 8;
        if (__OFADD__(v51, 8))
          goto LABEL_178;
        if (a1[2] < v52)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v52) = v11;
        }
        else
        {
          a1[1] = v52;
          *(double *)(*a1 + v51) = v11;
        }
      }
      else
      {
        v48 = a1[1];
        v49 = v48 + 4;
        if (__OFADD__(v48, 4))
          goto LABEL_177;
        v50 = v11;
        if (a1[2] < v49)
        {
          *(float *)ProtobufEncoder.growBufferSlow(to:)(v49) = v50;
        }
        else
        {
          a1[1] = v49;
          *(float *)(*a1 + v48) = v50;
        }
      }
    }
    if ((v13 & 1) == 0)
    {
      v53 = a1[1];
      v54 = a1[2];
      if (v53 >= v54)
      {
        v79 = v53 + 1;
        if (__OFADD__(v53, 1))
          goto LABEL_183;
        if (v54 < v79)
        {
          v80 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v79);
        }
        else
        {
          a1[1] = v79;
          v80 = (_BYTE *)(*a1 + v53);
        }
        *v80 = 26;
        v55 = a1[1];
      }
      else
      {
        *(_BYTE *)(*a1 + v53) = 26;
        v55 = v53 + 1;
        a1[1] = v53 + 1;
      }
      v56 = (_QWORD *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
      v58 = v56[2];
      v57 = v56[3];
      if (v58 >= v57 >> 1)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v56);
      v56[2] = v58 + 1;
      v56[v58 + 4] = v55;
      a1[3] = v56;
      v59 = v55 + 1;
      if (__OFADD__(v55, 1))
        goto LABEL_170;
      a1[1] = v59;
      if ((v12 & 0x7FFFFFFF) != 0)
      {
        v60 = a1[2];
        if (v59 >= v60)
        {
          v89 = v55 + 2;
          if (__OFADD__(v59, 1))
            goto LABEL_188;
          if (v60 < v89)
          {
            v90 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v89);
          }
          else
          {
            a1[1] = v89;
            v90 = (_BYTE *)(*a1 + v59);
          }
          *v90 = 13;
          v61 = a1[1];
          v62 = v61 + 4;
          if (__OFADD__(v61, 4))
            goto LABEL_175;
        }
        else
        {
          *(_BYTE *)(*a1 + v59) = 13;
          v61 = v55 + 2;
          a1[1] = v55 + 2;
          v62 = v55 + 6;
          if (__OFADD__(v55 + 2, 4))
            goto LABEL_175;
        }
        if (a1[2] < v62)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v62) = v12;
        }
        else
        {
          a1[1] = v62;
          *(_DWORD *)(*a1 + v61) = v12;
        }
      }
      if ((v12 & 0x7FFFFFFF00000000) != 0)
      {
        v63 = a1[1];
        v64 = a1[2];
        if (v63 >= v64)
        {
          v91 = v63 + 1;
          if (__OFADD__(v63, 1))
            goto LABEL_189;
          if (v64 < v91)
          {
            v92 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v91);
          }
          else
          {
            a1[1] = v91;
            v92 = (_BYTE *)(*a1 + v63);
          }
          *v92 = 21;
          v65 = a1[1];
          v66 = v65 + 4;
          if (__OFADD__(v65, 4))
            goto LABEL_176;
        }
        else
        {
          *(_BYTE *)(*a1 + v63) = 21;
          v65 = v63 + 1;
          a1[1] = v65;
          v66 = v65 + 4;
          if (__OFADD__(v65, 4))
            goto LABEL_176;
        }
        if (a1[2] < v66)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v66) = HIDWORD(v12);
        }
        else
        {
          a1[1] = v66;
          *(_DWORD *)(*a1 + v65) = HIDWORD(v12);
        }
      }
      if (*(float *)&v98 != 1.0)
      {
        v67 = a1[1];
        v68 = a1[2];
        if (v67 >= v68)
        {
          v93 = v67 + 1;
          if (__OFADD__(v67, 1))
            goto LABEL_190;
          if (v68 < v93)
          {
            v94 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v93);
          }
          else
          {
            a1[1] = v93;
            v94 = (_BYTE *)(*a1 + v67);
          }
          *v94 = 29;
          v69 = a1[1];
          v70 = v69 + 4;
          if (__OFADD__(v69, 4))
            goto LABEL_179;
        }
        else
        {
          *(_BYTE *)(*a1 + v67) = 29;
          v69 = v67 + 1;
          a1[1] = v69;
          v70 = v69 + 4;
          if (__OFADD__(v69, 4))
            goto LABEL_179;
        }
        if (a1[2] < v70)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v70) = v98;
        }
        else
        {
          a1[1] = v70;
          *(_DWORD *)(*a1 + v69) = v98;
        }
      }
      if (*((float *)&v98 + 1) != 1.0)
      {
        v71 = a1[1];
        v72 = a1[2];
        if (v71 >= v72)
        {
          v95 = v71 + 1;
          if (__OFADD__(v71, 1))
            goto LABEL_191;
          if (v72 < v95)
          {
            v96 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v95);
          }
          else
          {
            a1[1] = v95;
            v96 = (_BYTE *)(*a1 + v71);
          }
          *v96 = 37;
          v73 = a1[1];
          v74 = v73 + 4;
          if (__OFADD__(v73, 4))
            goto LABEL_180;
        }
        else
        {
          *(_BYTE *)(*a1 + v71) = 37;
          v73 = v71 + 1;
          a1[1] = v73;
          v74 = v73 + 4;
          if (__OFADD__(v73, 4))
            goto LABEL_180;
        }
        if (a1[2] < v74)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v74) = HIDWORD(v98);
        }
        else
        {
          a1[1] = v74;
          *(_DWORD *)(*a1 + v73) = HIDWORD(v98);
        }
      }
      ProtobufEncoder.endLengthDelimited()();
    }
    ProtobufEncoder.endLengthDelimited()();
    v6 += 48;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      v4 = v97;
      goto LABEL_165;
    }
  }
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
}

unint64_t ResolvedGradient.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v4 = (_QWORD *)result;
  if (one-time initialization token for default != -1)
    result = swift_once();
  v5 = static ResolvedGradient.ColorSpace.default;
  v6 = v4[1];
  v7 = v4[2];
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v6 >= v7)
    {
      v4[3] = 0;
      *(_QWORD *)a2 = v8;
      *(_BYTE *)(a2 + 8) = v5;
      return result;
    }
    result = v4[3];
    if (result)
    {
      v10 = v4[4];
      if (v6 < v10)
        goto LABEL_14;
      if (v10 < v6)
        goto LABEL_57;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (result < 8)
    {
LABEL_57:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_57;
        v26 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if (v26 < 0)
          goto LABEL_63;
        v27 = v4[1] + v26;
        if (v7 < v27)
          goto LABEL_57;
        v4[3] = 16;
        v4[4] = v27;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return swift_bridgeObjectRelease();
      if (result == 2)
        v28 = 2;
      else
        v28 = result == 1;
      if (result <= 0xFF)
        v5 = v28;
      else
        v5 = 0;
      goto LABEL_6;
    }
    if (result >> 3 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          goto LABEL_6;
        case 1uLL:
          v9 = v4[1] + 8;
          if (v7 < v9)
            goto LABEL_57;
          goto LABEL_5;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_64;
          v9 = v4[1] + result;
          if (v7 < v9)
            goto LABEL_57;
LABEL_5:
          v4[1] = v9;
          break;
        case 5uLL:
          v9 = v4[1] + 4;
          if (v7 < v9)
            goto LABEL_57;
          goto LABEL_5;
        default:
          goto LABEL_57;
      }
      goto LABEL_6;
    }
    if ((result & 7) != 2)
      goto LABEL_57;
    v11 = (_QWORD *)v4[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
    v11[2] = v13 + 1;
    v11[v13 + 4] = v7;
    v4[5] = v11;
    v14 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (v14 < 0)
      break;
    v15 = v4[1] + v14;
    if (v7 < v15)
      goto LABEL_57;
    v4[2] = v15;
    ResolvedGradient.Stop.init(from:)((unint64_t)v4, (uint64_t)&v35);
    v16 = (_QWORD *)v4[5];
    if (!v16[2])
      goto LABEL_61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v17 = v16[2];
      if (!v17)
        goto LABEL_62;
    }
    else
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      v17 = v16[2];
      if (!v17)
        goto LABEL_62;
    }
    v18 = v17 - 1;
    v19 = v16[v18 + 4];
    v16[2] = v18;
    v4[5] = v16;
    v4[2] = v19;
    v34 = v35;
    v20 = v36;
    v21 = v37;
    v22 = v38;
    v23 = v39;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v8 = (_QWORD *)result;
    }
    v3 = v8[2];
    v24 = v8[3];
    if (v3 >= v24 >> 1)
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v3 + 1, 1, v8);
      v8 = (_QWORD *)result;
    }
    v8[2] = v3 + 1;
    v25 = &v8[6 * v3];
    *((_OWORD *)v25 + 2) = v34;
    v25[6] = v20;
    v25[7] = v21;
    v25[8] = v22;
    *((_BYTE *)v25 + 72) = v23;
LABEL_6:
    v6 = v4[1];
    v7 = v4[2];
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  __break(1u);
  v31 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
  v32 = v31[2];
  if (!v32)
  {
    __break(1u);
    JUMPOUT(0x234BECF20);
  }
  v29 = v32 - 1;
  v30 = v31[v29 + 4];
  v31[2] = v29;
  v4[5] = v31;
  v4[2] = v30;
  return swift_bridgeObjectRelease();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ResolvedGradient(_QWORD *a1)
{
  ResolvedGradient.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ResolvedGradient@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvedGradient.init(from:)(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvedGradient@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvedGradient(_QWORD *a1)
{
  uint64_t v1;

  return specialized CodableByProtobuf.encode(to:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t ResolvedGradient.Stop.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v5;
  float v6;
  float v7;
  float v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  double v14;
  Swift::UInt v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;

  v3 = v1;
  v5 = *(float *)v3;
  v6 = *(float *)(v3 + 4);
  v7 = *(float *)(v3 + 8);
  v8 = *(float *)(v3 + 12);
  v9 = *(double *)(v3 + 16);
  v10 = *(_QWORD *)(v3 + 24);
  v11 = *(_QWORD *)(v3 + 32);
  v12 = *(_BYTE *)(v3 + 40);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
  if (!v2)
  {
    if (v9 != 0.0)
    {
      v14 = fabs(v9);
      if (v14 >= 65536.0)
        v15 = 17;
      else
        v15 = 21;
      ProtobufEncoder.encodeVarint(_:)(v15);
      if (v14 >= 65536.0)
      {
        v18 = a1[1];
        v19 = v18 + 8;
        if (__OFADD__(v18, 8))
        {
          __break(1u);
        }
        else if (a1[2] >= v19)
        {
          a1[1] = v19;
          *(double *)(*a1 + v18) = v9;
          return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
        }
        *(double *)ProtobufEncoder.growBufferSlow(to:)(v19) = v9;
        return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
      }
      v16 = a1[1];
      v17 = v16 + 4;
      if (__OFADD__(v16, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v14 = v9;
        if (a1[2] >= v17)
        {
          a1[1] = v17;
          *(_DWORD *)(*a1 + v16) = LODWORD(v14);
          return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17) = LODWORD(v14);
    }
    return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
  }
  return result;
}

uint64_t closure #1 in ResolvedGradient.Stop.encode(to:)(float *a1, _QWORD *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  _QWORD *v8;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  v7 = a2[1];
  v8 = (_QWORD *)a2[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a2[3] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    a2[3] = isUniquelyReferenced_nonNull_native;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  a2[3] = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    *(float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v4;
    if (v3 == 0.0)
      goto LABEL_14;
    goto LABEL_11;
  }
  a2[1] = v7 + 1;
  if (v4 == 0.0)
    goto LABEL_10;
  ProtobufEncoder.encodeVarint(_:)(0xDuLL);
  v12 = a2[1];
  isUniquelyReferenced_nonNull_native = v12 + 4;
  if (__OFADD__(v12, 4))
    goto LABEL_24;
  if (a2[2] < isUniquelyReferenced_nonNull_native)
    goto LABEL_25;
  a2[1] = isUniquelyReferenced_nonNull_native;
  *(float *)(*a2 + v12) = v4;
LABEL_10:
  if (v3 == 0.0)
    goto LABEL_14;
LABEL_11:
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  v13 = a2[1];
  v14 = v13 + 4;
  if (__OFADD__(v13, 4))
  {
    __break(1u);
  }
  else if (a2[2] >= v14)
  {
    a2[1] = v14;
    *(float *)(*a2 + v13) = v3;
    goto LABEL_14;
  }
  *(float *)ProtobufEncoder.growBufferSlow(to:)(v14) = v3;
LABEL_14:
  if (v6 == 1.0)
    goto LABEL_18;
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  v15 = a2[1];
  v16 = v15 + 4;
  if (__OFADD__(v15, 4))
  {
    __break(1u);
LABEL_30:
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v16) = v6;
    if (v5 == 1.0)
      return ProtobufEncoder.endLengthDelimited()();
LABEL_19:
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    v17 = a2[1];
    v18 = v17 + 4;
    if (__OFADD__(v17, 4))
    {
      __break(1u);
    }
    else if (a2[2] >= v18)
    {
      a2[1] = v18;
      *(float *)(*a2 + v17) = v5;
      return ProtobufEncoder.endLengthDelimited()();
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v18) = v5;
    return ProtobufEncoder.endLengthDelimited()();
  }
  if (a2[2] < v16)
    goto LABEL_30;
  a2[1] = v16;
  *(float *)(*a2 + v15) = v6;
LABEL_18:
  if (v5 != 1.0)
    goto LABEL_19;
  return ProtobufEncoder.endLengthDelimited()();
}

unint64_t ResolvedGradient.Stop.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  int v9;
  double v10;
  int v11;
  int v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double *v38;
  float *v39;
  float v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;
  char v48;

  v3 = (_QWORD *)result;
  v5 = 1;
  v48 = 1;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = 0uLL;
  v9 = 0;
  v10 = 0.0;
  if (v6 < v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0.0;
    while (1)
    {
      result = v3[3];
      v45 = v8;
      if (result)
      {
        v15 = v3[4];
        if (v6 < v15)
          goto LABEL_14;
        if (v15 < v6)
          goto LABEL_65;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      v8 = v45;
      if (result <= 7)
        goto LABEL_65;
LABEL_14:
      v16 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) != 2)
          goto LABEL_65;
        v29 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v29[2] = v31 + 1;
        v29[v31 + 4] = v7;
        v3[5] = v29;
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_73;
        v32 = v3[1] + result;
        if (v7 < v32)
          goto LABEL_65;
        v3[2] = v32;
        closure #1 in ResolvedGradient.Stop.init(from:)((unint64_t)v3, (uint64_t)&v46);
        v33 = (_QWORD *)v3[5];
        if (!v33[2])
          goto LABEL_75;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v34 = v33[2];
          if (!v34)
            goto LABEL_64;
        }
        else
        {
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
          v33 = (_QWORD *)result;
          v34 = *(_QWORD *)(result + 16);
          if (!v34)
          {
LABEL_64:
            __break(1u);
LABEL_65:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
        }
        v35 = v34 - 1;
        v36 = v33[v35 + 4];
        v33[2] = v35;
        v3[5] = v33;
        v3[2] = v36;
        v8 = v46;
        v48 = v47;
      }
      else if (v16 == 2)
      {
        v37 = result & 7;
        if (v37 == 5)
        {
          v39 = (float *)v3[1];
          if (v7 < (unint64_t)(v39 + 1))
            goto LABEL_65;
          v40 = *v39;
          v3[1] = v39 + 1;
          v10 = v40;
          v8 = v45;
        }
        else
        {
          if (v37 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            v8 = v45;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_77;
            v38 = (double *)v3[1];
            if (v7 < (unint64_t)v38 + result)
              goto LABEL_65;
            v3[3] = 17;
            v3[4] = (char *)v38 + result;
          }
          else
          {
            if (v37 != 1)
              goto LABEL_65;
            v38 = (double *)v3[1];
          }
          if (v7 < (unint64_t)(v38 + 1))
            goto LABEL_65;
          v10 = *v38;
          v3[1] = v38 + 1;
        }
      }
      else if (v16 == 1)
      {
        if ((result & 7) != 2)
          goto LABEL_65;
        v17 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v19 = v17[2];
        v18 = v17[3];
        if (v19 >= v18 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
        v17[2] = v19 + 1;
        v17[v19 + 4] = v7;
        v3[5] = v17;
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          __break(1u);
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
          v41 = (_QWORD *)result;
          v42 = *(_QWORD *)(result + 16);
          if (!v42)
          {
            __break(1u);
            v41 = (_QWORD *)v3[5];
            if (v41[2])
            {
              result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) != 0)
              {
                v42 = v41[2];
                if (v42)
                  goto LABEL_71;
LABEL_82:
                __break(1u);
                JUMPOUT(0x234BED864);
              }
            }
            else
            {
              __break(1u);
            }
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v41);
            v41 = (_QWORD *)result;
            v42 = *(_QWORD *)(result + 16);
            if (!v42)
              goto LABEL_82;
          }
LABEL_71:
          v43 = v42 - 1;
          v44 = v41[v43 + 4];
          v41[2] = v43;
          v3[5] = v41;
          v3[2] = v44;
          return result;
        }
        v20 = v3[1] + result;
        if (v7 < v20)
          goto LABEL_65;
        v3[2] = v20;
        v21 = specialized Color.Resolved.init(from:)(v3);
        v25 = (_QWORD *)v3[5];
        if (!v25[2])
          goto LABEL_74;
        v13 = v21;
        v12 = v22;
        v11 = v23;
        v9 = v24;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          v25 = (_QWORD *)result;
        }
        v26 = v25[2];
        v8 = v45;
        if (!v26)
          goto LABEL_76;
        v27 = v26 - 1;
        v28 = v25[v27 + 4];
        v25[2] = v27;
        v3[5] = v25;
        v3[2] = v28;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            v8 = v45;
            break;
          case 1uLL:
            v14 = v3[1] + 8;
            if (v7 < v14)
              goto LABEL_65;
            goto LABEL_6;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            v8 = v45;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_78;
            v14 = v3[1] + result;
            if (v7 < v14)
              goto LABEL_65;
LABEL_6:
            v3[1] = v14;
            break;
          case 5uLL:
            v14 = v3[1] + 4;
            if (v7 >= v14)
              goto LABEL_6;
            goto LABEL_65;
          default:
            goto LABEL_65;
        }
      }
      v6 = v3[1];
      v7 = v3[2];
      if (v6 >= v7)
      {
        v5 = v48;
        goto LABEL_4;
      }
    }
  }
  v11 = 0;
  v12 = 0;
  v13 = 0.0;
LABEL_4:
  v3[3] = 0;
  *(float *)a2 = v13;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v9;
  *(double *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 40) = v5;
  return result;
}

unint64_t closure #1 in ResolvedGradient.Stop.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 1065353216;
    v10 = 1065353216;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v11 = v3[4];
        if (v5 < v11)
          goto LABEL_9;
        if (v11 < v5)
          goto LABEL_60;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_60:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_9:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              JUMPOUT(0x234BEDBA8);
            }
            v12 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v12 + result)
              goto LABEL_60;
            v3[3] = 13;
            v3[4] = (char *)v12 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_60;
            v12 = (unsigned int *)v3[1];
          }
          v5 = (unint64_t)(v12 + 1);
          if (v6 < (unint64_t)(v12 + 1))
            goto LABEL_60;
          v8 = *v12;
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_63;
            v13 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v13 + result)
              goto LABEL_60;
            v3[3] = 21;
            v3[4] = (char *)v13 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_60;
            v13 = (unsigned int *)v3[1];
          }
          v5 = (unint64_t)(v13 + 1);
          if (v6 < (unint64_t)(v13 + 1))
            goto LABEL_60;
          v7 = *v13;
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_64;
            v14 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v14 + result)
              goto LABEL_60;
            v3[3] = 29;
            v3[4] = (char *)v14 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_60;
            v14 = (unsigned int *)v3[1];
          }
          v5 = (unint64_t)(v14 + 1);
          if (v6 < (unint64_t)(v14 + 1))
            goto LABEL_60;
          v10 = *v14;
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_65;
            v15 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v15 + result)
              goto LABEL_60;
            v3[3] = 37;
            v3[4] = (char *)v15 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_60;
            v15 = (unsigned int *)v3[1];
          }
          v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1))
            goto LABEL_60;
          v9 = *v15;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v5 = v3[1];
              goto LABEL_56;
            case 1uLL:
              v5 = v3[1] + 8;
              goto LABEL_54;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_66;
              v5 = v3[1] + result;
LABEL_54:
              if (v6 >= v5)
                goto LABEL_55;
              goto LABEL_60;
            case 5uLL:
              v5 = v3[1] + 4;
              goto LABEL_54;
            default:
              goto LABEL_60;
          }
      }
LABEL_55:
      v3[1] = v5;
LABEL_56:
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_59;
    }
  }
  v7 = 0;
  v8 = 0;
  v9 = 1065353216;
  v10 = 1065353216;
LABEL_59:
  v3[3] = 0;
  *(_QWORD *)a2 = v8 | (unint64_t)(v7 << 32);
  *(_QWORD *)(a2 + 8) = v10 | (unint64_t)(v9 << 32);
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ResolvedGradient.Stop(_QWORD *a1)
{
  return ResolvedGradient.Stop.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ResolvedGradient.Stop@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvedGradient.Stop.init(from:)(a1, a2);
}

void ResolvedGradient.ColorSpace.mix(_:_:by:)(int8x16_t a1, float a2, float a3, float a4, float a5, int8x16_t a6, float a7, float a8, float a9)
{
  __int8 *v17;
  float v20;
  __int8 v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  __int8 v26;
  float32x4_t v27;
  float32x4_t v28;

  v20 = *(float *)a6.i32;
  v27.i8[0] = *v17;
  v22 = v27.i8[0];
  ResolvedGradient.ColorSpace.convertIn(_:)(v28.f32, a1, a2, LODWORD(a3), a4, a6);
  *(float *)v23.i32 = a5;
  ResolvedGradient.ColorSpace.convertIn(_:)(v27.f32, v23, v20, LODWORD(a7), a8, v24);
  v26 = v22;
  v25 = vaddq_f32(vmulq_n_f32(v28, 1.0 - a9), vmulq_n_f32(v27, a9));
  ResolvedGradient.ColorSpace.convertOut(_:)(v25.f32);
}

float ResolvedGradient.ColorSpace.convertIn(_:)@<S0>(float *a1@<X8>, int8x16_t a2@<Q0>, float a3@<S1>, unsigned __int32 a4@<S2>, float a5@<S3>, int8x16_t a6@<Q5>)
{
  _BYTE *v6;
  float v8;
  float v9;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float result;
  int8x16_t v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  unsigned __int32 v30;
  int8x16_t v31;
  float v32;
  float v33;
  float v34;
  int8x16_t v35;
  float v36;
  float v37;
  float v38;

  v8 = a3;
  v9 = *(float *)a2.i32;
  if (*v6)
  {
    if (*v6 != 1)
    {
      *(float *)a6.i32 = (float)((float)(*(float *)a2.i32 * 0.41222) + (float)(a3 * 0.53633))
                       + (float)(*(float *)&a4 * 0.051446);
      *(float *)a2.i32 = (float)((float)(*(float *)a2.i32 * 0.2119) + (float)(a3 * 0.6807))
                       + (float)(*(float *)&a4 * 0.1074);
      v31 = a2;
      v35 = a6;
      *(float *)a2.i32 = (float)((float)(v9 * 0.088302) + (float)(a3 * 0.28172)) + (float)(*(float *)&a4 * 0.62998);
      v27 = a2;
      *(float *)v11.i32 = powf(fabsf(*(float *)a6.i32), 0.33333);
      v12.i64[0] = 0x8000000080000000;
      v12.i64[1] = 0x8000000080000000;
      v35.i32[0] = vbslq_s8(v12, v11, v35).u32[0];
      *(float *)v13.i32 = powf(fabsf(*(float *)v31.i32), 0.33333);
      v14.i64[0] = 0x8000000080000000;
      v14.i64[1] = 0x8000000080000000;
      v31.i32[0] = vbslq_s8(v14, v13, v31).u32[0];
      *(float *)v15.i32 = powf(fabsf(*(float *)v27.i32), 0.33333);
      v8 = *(float *)v31.i32;
      v9 = *(float *)v35.i32;
      v16.i64[0] = 0x8000000080000000;
      v16.i64[1] = 0x8000000080000000;
      a4 = vbslq_s8(v16, v15, v27).u32[0];
    }
  }
  else
  {
    v17 = -*(float *)a2.i32;
    if (v9 > 0.0)
      v17 = v9;
    if (v17 <= 0.0031308)
    {
      v18 = v17 * 12.92;
    }
    else
    {
      v18 = 1.0;
      if (v17 != 1.0)
      {
        v32 = v8;
        v36 = v9;
        v28 = a4;
        v19 = powf(v17, 0.41667);
        a4 = v28;
        v8 = v32;
        v9 = v36;
        v18 = (float)(v19 * 1.055) + -0.055;
      }
    }
    if (v9 <= 0.0)
      v9 = -v18;
    else
      v9 = v18;
    v20 = -v8;
    if (v8 > 0.0)
      v20 = v8;
    if (v20 <= 0.0031308)
    {
      v21 = v20 * 12.92;
    }
    else
    {
      v21 = 1.0;
      if (v20 != 1.0)
      {
        v33 = v8;
        v37 = v9;
        v29 = a4;
        v22 = powf(v20, 0.41667);
        a4 = v29;
        v8 = v33;
        v9 = v37;
        v21 = (float)(v22 * 1.055) + -0.055;
      }
    }
    if (v8 <= 0.0)
      v8 = -v21;
    else
      v8 = v21;
    v23 = -*(float *)&a4;
    if (*(float *)&a4 > 0.0)
      v23 = *(float *)&a4;
    if (v23 <= 0.0031308)
    {
      v24 = v23 * 12.92;
    }
    else
    {
      v24 = 1.0;
      if (v23 != 1.0)
      {
        v34 = v8;
        v38 = v9;
        v30 = a4;
        v25 = powf(v23, 0.41667);
        a4 = v30;
        v8 = v34;
        v9 = v38;
        v24 = (float)(v25 * 1.055) + -0.055;
      }
    }
    if (*(float *)&a4 <= 0.0)
      *(float *)&a4 = -v24;
    else
      *(float *)&a4 = v24;
  }
  *a1 = v9 * a5;
  a1[1] = v8 * a5;
  result = *(float *)&a4 * a5;
  a1[2] = *(float *)&a4 * a5;
  a1[3] = a5;
  return result;
}

float ResolvedGradient.ColorSpace.convertOut(_:)(float *a1)
{
  _BYTE *v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  if (v4 == 0.0)
  {
    if (*v1)
      goto LABEL_3;
  }
  else
  {
    v2 = v2 * (float)(1.0 / v4);
    v3 = v3 * (float)(1.0 / v4);
    v5 = v5 * (float)(1.0 / v4);
    if (*v1)
    {
LABEL_3:
      if (*v1 != 1)
        return (float)((float)(v5 * (float)(v5 * v5)) * 0.23097)
             + (float)((float)((float)(v2 * (float)(v2 * v2)) * 4.0767)
                     + (float)((float)(v3 * (float)(v3 * v3)) * -3.3077));
      return v2;
    }
  }
  if (v2 <= 0.0)
    v6 = -v2;
  else
    v6 = v2;
  if (v6 <= 0.04045)
  {
    v7 = v6 * 0.077399;
  }
  else
  {
    v7 = 1.0;
    if (v6 != 1.0)
      v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
  }
  if (v2 <= 0.0)
    v2 = -v7;
  else
    v2 = v7;
  if (v3 <= 0.0)
    v8 = -v3;
  else
    v8 = v3;
  if (v8 > 0.04045 && v8 != 1.0)
    powf((float)(v8 * 0.94787) + 0.052133, 2.4);
  if (v5 <= 0.0)
    v9 = -v5;
  else
    v9 = v5;
  if (v9 > 0.04045 && v9 != 1.0)
    powf((float)(v9 * 0.94787) + 0.052133, 2.4);
  return v2;
}

SwiftUI::ResolvedGradientVector __swiftcall ResolvedGradientVector.init(_:)(SwiftUI::ResolvedGradient a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int8 v13;
  unint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  _QWORD *v17;
  void *v18;
  SwiftUI::ResolvedGradient::ColorSpace v19;
  int8x16_t v20;
  uint64_t v21;
  int8x16_t v22;
  SwiftUI::ResolvedGradientVector result;

  v2 = v1;
  v3 = *(_QWORD *)a1.stops._rawValue;
  v4 = *((_BYTE *)a1.stops._rawValue + 8);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)a1.stops._rawValue + 16), 0, MEMORY[0x24BEE4AF8]);
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
  {
    v21 = v2;
    swift_bridgeObjectRetain();
    v9 = v3 + 36;
    do
    {
      v7.i32[0] = *(_DWORD *)(v9 - 4);
      v10 = *(_QWORD *)(v9 + 12);
      v11 = *(_QWORD *)(v9 + 20);
      v12 = *(_QWORD *)(v9 + 28);
      v13 = *(_BYTE *)(v9 + 36);
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)v22.i32, v7, *(float *)v9, *(_DWORD *)(v9 + 4), *(float *)(v9 + 8), v8);
      v7 = v22;
      v15 = v5[2];
      v14 = v5[3];
      if (v15 >= v14 >> 1)
      {
        v20 = v22;
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v5);
        v7 = v20;
        v5 = v17;
      }
      v5[2] = v15 + 1;
      v16 = (int8x16_t *)&v5[6 * v15];
      v16[2] = v7;
      v16[3].i64[0] = v10;
      v16[3].i64[1] = v11;
      v16[4].i64[0] = v12;
      v16[4].i8[8] = v13;
      v9 += 48;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v2 = v21;
  }
  v18 = (void *)swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v5;
  *(_BYTE *)(v2 + 8) = v4;
  result.stops._rawValue = v18;
  result.colorSpace = v19;
  return result;
}

SwiftUI::ResolvedGradientVector __swiftcall ResolvedGradientVector.init()()
{
  uint64_t v0;
  SwiftUI::ResolvedGradientVector result;

  *(_QWORD *)v0 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v0 + 8) = 0;
  return result;
}

void (*ResolvedGradient.animatableData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  SwiftUI::ResolvedGradient v14;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  v5 = *((_BYTE *)v1 + 8);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v6)
      goto LABEL_7;
LABEL_9:
    v10 = v4;
    v11 = v5;
    swift_bridgeObjectRetain();
    v14.stops._rawValue = &v10;
    ResolvedGradientVector.init(_:)(v14);
    v8 = v12;
    v7 = v13;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v7 = 0;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_10:
  v3[3] = v8;
  *((_BYTE *)v3 + 32) = v7;
  return ResolvedGradient.animatableData.modify;
}

void ResolvedGradient.animatableData.modify(uint64_t a1, char a2)
{
  void *v2;
  char v3;
  uint64_t v4;
  char v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v4);
  }
  free(v2);
}

void (*protocol witness for Animatable.animatableData.modify in conformance ResolvedGradient(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ResolvedGradient.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void static ResolvedGradientVector.zero.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t static ResolvedGradientVector.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(1.0, a1, a2);
}

uint64_t ResolvedGradientVector.add(_:scaledBy:)(uint64_t result, double a2)
{
  uint64_t v2;
  float32x4_t *v3;
  int64_t v4;
  char v6;
  float32x4_t *v7;
  uint64_t v8;
  unint64_t v9;
  int32x2_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t v15;
  int64x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x16_t v20;
  unint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int64x2_t v24;
  int64_t v25;
  float32x4_t *v26;
  unint64_t v27;
  float32x4_t *v28;
  float v29;
  float32x4_t **v30;
  double v31;
  double v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t **v46;
  float32x4_t **v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  unint64_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float32x4_t **v67;
  int32x2_t v68;
  float v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  char v73;

  v3 = *(float32x4_t **)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v4)
    return result;
  v6 = *(_BYTE *)(result + 8);
  v7 = *(float32x4_t **)v2;
  v8 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (!v8)
  {
    if (a2 == 1.0)
    {
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      v47 = v67;
      *v67 = v3;
    }
    else
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)result || v4 > (unint64_t)v7[1].i64[1] >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)result, v4, 0, v7);
        v7 = (float32x4_t *)result;
      }
      v47 = v67;
      *v67 = v7;
      v48 = v3[1].i64[0];
      if (v48)
      {
        v49 = a2;
        v69 = v49;
        v50 = v7[1].u64[0];
        swift_bridgeObjectRetain();
        v51 = v69;
        v52 = 0;
        v53 = 3 * v50;
        do
        {
          v54 = v3[v52 + 2];
          v55 = v3[v52 + 3].i64[0];
          v56 = v7[1].u64[1];
          if (v50 >= v56 >> 1)
          {
            v66 = v3[v52 + 2];
            v58 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v50 + 1, 1, v7);
            v54 = v66;
            v51 = v69;
            v7 = v58;
          }
          v7[1].i64[0] = v50 + 1;
          v57 = &v7[v53 + v52];
          v57[2] = vmulq_n_f32(v54, v51);
          v57[3].i64[0] = v55;
          v57[3].i64[1] = 0;
          v57[4].i64[0] = 0;
          v57[4].i8[8] = 1;
          v52 += 3;
          ++v50;
          --v48;
        }
        while (v48);
        result = swift_bridgeObjectRelease();
        v47 = v67;
        *v67 = v7;
      }
    }
    *((_BYTE *)v47 + 8) = v6;
    return result;
  }
  v70.i8[0] = *(_BYTE *)(result + 8);
  ResolvedGradientVector.setColorSpace(_:)((unsigned __int8 *)&v70);
  if (v8 != v4
    || (v9 = *(_QWORD *)v2,
        result = specialized Sequence.reduce<A>(_:_:)(1, 0, *(_QWORD *)(*(_QWORD *)v2 + 16), v2, (uint64_t)v3),
        (result & 1) == 0))
  {
    if (v4 <= (unint64_t)v8)
      v25 = v8;
    else
      v25 = v4;
    v26 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0, MEMORY[0x24BEE4AF8]);
    v9 = 0;
    v27 = 0;
    v68 = (int32x2_t)&v3[3];
    v28 = v3 + 2;
    v29 = a2;
    v11 = 48;
    v30 = v67;
    v65 = v29;
    if (v8 <= 0)
      goto LABEL_30;
    while (1)
    {
      if (v27 >= (*v30)[1].i64[0])
        goto LABEL_59;
      v31 = *(double *)(*v30)[3 * v27 + 3].i64;
      if ((uint64_t)v9 >= v4)
        break;
      while (1)
      {
        if (v9 >= v3[1].i64[0])
          goto LABEL_60;
        v32 = *(double *)(*(_QWORD *)&v68 + 48 * v9);
        v33 = v31 < v32;
        if (v31 != v32)
        {
LABEL_26:
          if (v33)
          {
            if (v27 >= (*v30)[1].i64[0])
              goto LABEL_61;
            v34 = (uint64_t)&(*v30)[3 * v27];
            v35 = *(_QWORD *)(v34 + 48);
            v36 = *(_BYTE *)(v34 + 72);
            ++v27;
            v61 = *(float32x4_t *)(v34 + 32);
            v63 = *(float32x4_t *)(v34 + 56);
            mix #1 (stops:count:at:location:) in ResolvedGradientVector.add(_:scaledBy:)(v3, v4, v9, (uint64_t)&v70, v31);
            v38 = v61;
            v37 = v63;
            v29 = v65;
            v28 = v3 + 2;
            v30 = v67;
            v39 = v70;
          }
          else
          {
            if (v9 >= v3[1].i64[0])
              goto LABEL_62;
            v41 = 3 * v9++;
            v59 = v28[v41];
            mix #1 (stops:count:at:location:) in ResolvedGradientVector.add(_:scaledBy:)(*v30, v8, v27, (uint64_t)&v70, v32);
            v39 = v59;
            v29 = v65;
            v28 = v3 + 2;
            v30 = v67;
            v38 = v70;
            v35 = v71;
            v37 = v72;
            v36 = v73;
          }
          goto LABEL_38;
        }
LABEL_33:
        if (v27 >= (*v30)[1].i64[0])
        {
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          while (2)
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
            v9 = result;
LABEL_8:
            v12 = 0;
            v13 = 0;
            v14 = *(_QWORD *)(v9 + 16);
            v15 = (float32x2_t)vdupq_lane_s32(v68, 0).u64[0];
LABEL_12:
            if (v13 >= v14)
              continue;
            break;
          }
          v21 = v9 + v12 * 16;
          *(float32x4_t *)(v9 + v12 * 16 + 32) = vaddq_f32(*(float32x4_t *)(v9 + v12 * 16 + 32), vmulq_n_f32(v3[v12 + 2], *(float *)v68.i32));
          if (*(_BYTE *)(v9 + v12 * 16 + 72) == 1)
          {
            v22 = (float32x2_t)0x3F80000000000000;
            v23 = (float32x2_t)0x3F80000000000000;
            if ((v3[v12 + 4].i8[8] & 1) != 0)
            {
LABEL_11:
              ++v13;
              v12 += 3;
              if (v11 == v13)
              {
                *v67 = (float32x4_t *)v9;
                return result;
              }
              goto LABEL_12;
            }
LABEL_9:
            v16 = *(int64x2_t *)((char *)&v3[v12 + 3] + 8);
            v17 = (float32x2_t)vmovn_s64(v16);
            v18 = (float32x2_t)vshrn_n_s64(v16, 0x20uLL);
          }
          else
          {
            v24 = *(int64x2_t *)(v21 + 56);
            v23 = (float32x2_t)vmovn_s64(v24);
            v22 = (float32x2_t)vshrn_n_s64(v24, 0x20uLL);
            v18 = (float32x2_t)0x3F80000000000000;
            v17 = (float32x2_t)0x3F80000000000000;
            if ((v3[v12 + 4].i8[8] & 1) == 0)
              goto LABEL_9;
          }
          v19 = vadd_f32(vmul_f32(v23, v15), v17);
          v20.i64[0] = v19.u32[0];
          v20.i64[1] = v19.u32[1];
          *(int8x16_t *)(v21 + 56) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32(vmul_f32(v22, v15), v18), 0x20uLL), v20);
          *(_BYTE *)(v21 + 72) = 0;
          goto LABEL_11;
        }
        if (v9 >= v3[1].i64[0])
          goto LABEL_58;
        v40 = (uint64_t)&(*v30)[3 * v27++];
        v36 = *(_BYTE *)(v40 + 72);
        v37 = *(float32x4_t *)(v40 + 56);
        v35 = *(_QWORD *)(v40 + 48);
        v38 = *(float32x4_t *)(v40 + 32);
        v39 = v28[3 * v9++];
LABEL_38:
        v43 = v26[1].u64[0];
        v42 = v26[1].u64[1];
        if (v43 >= v42 >> 1)
        {
          v62 = v38;
          v64 = v37;
          v60 = v39;
          v45 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v26);
          v39 = v60;
          v38 = v62;
          v37 = v64;
          v29 = v65;
          v28 = v3 + 2;
          v30 = v67;
          v26 = v45;
        }
        v26[1].i64[0] = v43 + 1;
        v44 = &v26[3 * v43];
        v44[2] = vaddq_f32(vmulq_n_f32(v39, v29), v38);
        v44[3].i64[0] = v35;
        *(float32x4_t *)((char *)v44 + 56) = v37;
        v44[4].i8[8] = v36;
        if ((uint64_t)v27 < v8)
          break;
LABEL_30:
        if ((uint64_t)v9 >= v4)
        {
          v46 = v30;
          result = swift_bridgeObjectRelease();
          *v46 = v26;
          return result;
        }
        v31 = INFINITY;
      }
    }
    v32 = INFINITY;
    v33 = v31 < INFINITY;
    if (v31 != INFINITY)
      goto LABEL_26;
    goto LABEL_33;
  }
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    if (v11 > v3[1].i64[0])
      goto LABEL_64;
    *(float *)v10.i32 = a2;
    v68 = v10;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      goto LABEL_65;
    goto LABEL_8;
  }
  return result;
}

uint64_t static ResolvedGradientVector.-= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(-1.0, a1, a2);
}

uint64_t static ResolvedGradientVector.+= infix(_:_:)(double a1, uint64_t a2, uint64_t *a3)
{
  char v3;
  uint64_t v5;
  char v6;

  v3 = *((_BYTE *)a3 + 8);
  v5 = *a3;
  v6 = v3;
  return ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v5, a1);
}

void ResolvedGradientVector.setColorSpace(_:)(unsigned __int8 *a1)
{
  _BYTE *v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  float v9;
  unsigned __int32 v10;
  float v11;
  int8x16_t v12;
  __int128 v13;

  v2 = *a1;
  if (v1[8] != v2)
  {
    v3 = *(_QWORD **)v1;
    v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
    if (v4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      v5 = 0;
      v6 = v3[2];
      v7 = 4;
      do
      {
        if (v5 >= v6)
        {
          __break(1u);
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
        v13 = *(_OWORD *)&v3[v7];
        *(float *)v8.i32 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)&v13);
        ResolvedGradient.ColorSpace.convertIn(_:)((float *)&v13, v8, v9, v10, v11, v12);
        v6 = v3[2];
        if (v5 >= v6)
          goto LABEL_12;
        ++v5;
        *(_OWORD *)&v3[v7] = v13;
        v7 += 6;
      }
      while (v4 != v5);
      *(_QWORD *)v1 = v3;
    }
    v1[8] = v2;
  }
}

float32x4_t *mix #1 (stops:count:at:location:) in ResolvedGradientVector.add(_:scaledBy:)@<X0>(float32x4_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  float32x4_t v11;
  float v12;
  unint64_t v13;

  v5 = a3 - 1;
  if (a3 < 1)
  {
    if (!result[1].i64[0])
    {
      __break(1u);
      goto LABEL_14;
    }
    v11 = result[2];
LABEL_12:
    *(float32x4_t *)a4 = v11;
    *(double *)(a4 + 16) = a5;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_BYTE *)(a4 + 40) = 1;
    return result;
  }
  if (a3 < a2)
  {
    v6 = result[1].u64[0];
    if (v5 < v6)
    {
      if (v6 > a3)
      {
        v7 = (uint64_t)&result[3 * v5 + 2];
        v8 = *(double *)(v7 + 16);
        v9 = (uint64_t)&result[3 * a3 + 2];
        v10 = *(double *)(v9 + 16);
        v11 = *(float32x4_t *)v7;
        if (v8 != v10)
        {
          v12 = (a5 - v8) / (v10 - v8);
          v11 = vaddq_f32(vmulq_n_f32(v11, 1.0 - v12), vmulq_n_f32(*(float32x4_t *)v9, v12));
        }
        goto LABEL_12;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v13 = a2 - 1;
  if (a2 - 1 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v13 < result[1].i64[0])
  {
    v11 = result[3 * v13 + 2];
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ResolvedGradientVector.scale(by:)(Swift::Double by)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  float v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v3)
  {
    v4 = by;
    v8 = v4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v5 = 0;
    v6 = v2[2];
    v7 = 4;
    do
    {
      if (v5 >= v6)
      {
        __break(1u);
        goto LABEL_9;
      }
      ++v5;
      *(float32x4_t *)&v2[v7] = vmulq_n_f32(*(float32x4_t *)&v2[v7], v8);
      v7 += 6;
    }
    while (v3 != v5);
    *(_QWORD *)v1 = v2;
  }
}

double ResolvedGradientVector.magnitudeSquared.getter()
{
  uint64_t v0;
  uint64_t v1;
  float *v2;
  double result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (!v1)
    return 0.0;
  v2 = (float *)(*(_QWORD *)v0 + 44);
  result = 0.0;
  do
  {
    result = result
           + (float)((float)((float)((float)(*(v2 - 3) * *(v2 - 3)) + (float)(*(v2 - 2) * *(v2 - 2)))
                           + (float)(*(v2 - 1) * *(v2 - 1)))
                   + (float)(*v2 * *v2));
    v2 += 12;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t static ResolvedGradientVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, 1.0);
}

uint64_t static ResolvedGradientVector.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, -1.0);
}

uint64_t static ResolvedGradientVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  char v10;

  v5 = *(_BYTE *)(a1 + 8);
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_BYTE *)(a3 + 8) = v5;
  v9 = v6;
  v10 = v7;
  swift_bridgeObjectRetain();
  return ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v9, a4);
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance ResolvedGradientVector(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ResolvedGradientVector@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, 1.0);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance ResolvedGradientVector(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(1.0, a1, a2);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ResolvedGradientVector@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, -1.0);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance ResolvedGradientVector(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(-1.0, a1, a2);
}

void specialized static Dictionary.Keys.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = a1 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    v15 = v9;
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_30;
      goto LABEL_7;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v16 >= v8)
      goto LABEL_30;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v15 + 2;
      if (v15 + 2 >= v8)
        goto LABEL_30;
      v17 = *(_QWORD *)(v4 + 8 * v9);
      if (!v17)
      {
        v9 = v15 + 3;
        if (v15 + 3 >= v8)
          goto LABEL_30;
        v17 = *(_QWORD *)(v4 + 8 * v9);
        if (!v17)
        {
          v9 = v15 + 4;
          if (v15 + 4 >= v8)
            goto LABEL_30;
          v17 = *(_QWORD *)(v4 + 8 * v9);
          if (!v17)
          {
            v9 = v15 + 5;
            if (v15 + 5 >= v8)
              goto LABEL_30;
            v17 = *(_QWORD *)(v4 + 8 * v9);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_26:
    v7 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v9 << 6);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_30:
      outlined consume of Set<EventID>.Iterator._Variant();
      return;
    }
LABEL_7:
    v12 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    specialized __RawDictionaryStorage.find<A>(_:)(v12);
    v14 = v13;

    if ((v14 & 1) == 0)
      goto LABEL_30;
  }
  v18 = v15 + 6;
  if (v15 + 6 >= v8)
    goto LABEL_30;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
    v9 = v15 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v8)
      goto LABEL_30;
    v17 = *(_QWORD *)(v4 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_32:
  __break(1u);
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  size_t v7;

  if (a2 <= a1)
    v4 = a1;
  else
    v4 = a2;
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v6[2] = a1;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 48);
  return v6;
}

{
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;

  if (a2 <= a1)
    v4 = a1;
  else
    v4 = a2;
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 25;
  v6[2] = a1;
  v6[3] = 2 * (v8 >> 3);
  return v6;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[15 * a1 + 4];
  type metadata accessor for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)();
  result = (char *)swift_arrayDestroy();
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 120);
    v19 = (char *)&v5[15 * a2 + 4];
    if ((char *)(v14 + 120) != v19 || result >= &v19[120 * v18])
      result = (char *)memmove(result, v19, 120 * v18);
    v20 = v5[2];
    v17 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      v22 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v14 + 80) = v22;
      *(_OWORD *)(v14 + 96) = *(_OWORD *)(a3 + 96);
      *(_QWORD *)(v14 + 112) = *(_QWORD *)(a3 + 112);
      v23 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v23;
      v24 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 48) = v24;
      *(_QWORD *)v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)(a3 + 16);
  v10 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v11 = v6 + v10;
  if (__OFADD__(v6, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v5[3] >> 1)
  {
    if (v6 <= v11)
      v13 = v6 + v10;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[4 * a1 + 4];
  result = (char *)swift_arrayDestroy();
  if (!v10)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_28;
  if (v18 < 0)
  {
LABEL_30:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = (char *)(v14 + 32 * v9);
  v19 = (char *)&v5[4 * a2 + 4];
  if (result != v19 || result >= &v19[32 * v18])
    result = (char *)memmove(result, v19, 32 * v18);
  v20 = v5[2];
  v17 = __OFADD__(v20, v10);
  v21 = v20 + v10;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5[2] = v21;
LABEL_20:
  if (v9)
    result = (char *)swift_arrayInitWithCopy();
  *(_QWORD *)v3 = v5;
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, unint64_t a3)
{
  unint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = a3;
    v4 = a2;
    v5 = a1;
    if (!(*v3 >> 62))
    {
      v9 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 >= a2)
        goto LABEL_4;
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)v9 < v4)
    goto LABEL_37;
LABEL_4:
  v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v7 = v8 >> 62;
  if (!(v8 >> 62))
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v6;
    if (!__OFSUB__(v10, v6))
      goto LABEL_7;
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = v12 + v32;
    if (!__OFADD__(v12, v32))
      goto LABEL_9;
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_39:
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v11 = v10 - v6;
  if (__OFSUB__(v10, v6))
    goto LABEL_41;
LABEL_7:
  v9 = *v3;
  v32 = v11;
  if (*v3 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 + v11;
  if (__OFADD__(v12, v11))
    goto LABEL_44;
LABEL_9:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v30 = v7;
  v31 = v8;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v15 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v12 = 1;
  }
  if (v9 >> 62)
    goto LABEL_45;
  v16 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x23B7C6DA8](v12, v16, 1, v9);
  swift_bridgeObjectRelease();
  *v3 = v9;
  v15 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  v17 = v15 + 32 + 8 * v5;
  type metadata accessor for TextAttributeModifierBase();
  swift_arrayDestroy();
  v18 = v32;
  if (!v32)
  {
LABEL_29:
    if (v10 < 1)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return specialized Array._endMutation()();
    }
    if (v30)
    {
      v25 = swift_bridgeObjectRetain();
      v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v25);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v26 + 4), v26[2], v10);
      swift_release();
      goto LABEL_34;
    }
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) == v10)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_52;
  }
  if (!(v9 >> 62))
  {
    v19 = *(_QWORD *)(v15 + 16);
    v20 = v19 - v4;
    if (!__OFSUB__(v19, v4))
      goto LABEL_22;
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v18 = v32;
  v20 = v28 - v4;
  if (__OFSUB__(v28, v4))
    goto LABEL_48;
LABEL_22:
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = (char *)(v17 + 8 * v10);
    v22 = (char *)(v15 + 32 + 8 * v4);
    if (v21 != v22 || v21 >= &v22[8 * v20])
    {
      memmove(v21, v22, 8 * v20);
      v18 = v32;
    }
    if (!(v9 >> 62))
    {
      v23 = *(_QWORD *)(v15 + 16);
      v24 = v23 + v18;
      if (!__OFADD__(v23, v18))
      {
LABEL_28:
        *(_QWORD *)(v15 + 16) = v24;
        goto LABEL_29;
      }
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_49:
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v24 = v29 + v32;
    if (!__OFADD__(v29, v32))
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_53:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char **v6;
  char *v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *result;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = *v6;
  v9 = *((_QWORD *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v13 > *((_QWORD *)v8 + 3) >> 1)
  {
    if (v9 <= v13)
      v18 = v9 + v12;
    else
      v18 = v9;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v18, 1, v8);
    v8 = result;
  }
  v19 = v8 + 32;
  v20 = &v8[28 * a1 + 32];
  if (!v12)
    goto LABEL_20;
  v21 = *((_QWORD *)v8 + 2);
  v22 = __OFSUB__(v21, a2);
  v23 = v21 - a2;
  if (v22)
    goto LABEL_26;
  if ((v23 & 0x8000000000000000) == 0)
  {
    result = v20 + 28;
    v24 = &v19[28 * a2];
    if (v20 + 28 != v24 || result >= &v24[28 * v23])
      result = (char *)memmove(result, v24, 28 * v23);
    v25 = *((_QWORD *)v8 + 2);
    v22 = __OFADD__(v25, v12);
    v26 = v25 + v12;
    if (!v22)
    {
      *((_QWORD *)v8 + 2) = v26;
LABEL_20:
      *(_DWORD *)v20 = a3;
      v27 = &v19[28 * a1];
      *((_DWORD *)v27 + 1) = HIDWORD(a3);
      *((_QWORD *)v27 + 1) = a4;
      *((_QWORD *)v27 + 2) = a5;
      *((_DWORD *)v27 + 6) = a6;
      *v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v7 = a1;
    v6 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 < v5)
    goto LABEL_31;
LABEL_4:
  v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v6 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v6 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v6 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x23B7C6DA8](v10, v14, 1, v6);
  swift_bridgeObjectRelease();
  *v4 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v7);
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for AXCustomContent);
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()();
  }
  if (!(v6 >> 62))
  {
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - v5;
    if (!__OFSUB__(v16, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v17 = v24 - v5;
  if (__OFSUB__(v24, v5))
    goto LABEL_40;
LABEL_21:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v15 + 1);
    v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v19 || v18 >= &v19[8 * v17])
      memmove(v18, v19, 8 * v17);
    if (!(v6 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v21 = v25 + v8;
    if (!__OFADD__(v25, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = a6;
    v11 = a5;
    v8 = a2;
    v9 = a1;
    v10 = *v6;
    if (!(*v6 >> 62))
    {
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRetain();
  v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v30 < v8)
    goto LABEL_34;
LABEL_4:
  v12 = v8 - v9;
  if (__OFSUB__(v8, v9))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v13 = (v7 >> 1) - v11;
  if (__OFSUB__(v7 >> 1, v11))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v14 = v13 - v12;
  if (__OFSUB__(v13, v12))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v16 = v31 + v35;
    if (!__OFADD__(v31, v35))
      goto LABEL_9;
LABEL_40:
    __break(1u);
LABEL_41:
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v10 = *v6;
  v34 = (v7 >> 1) - v11;
  v35 = v13 - v12;
  if (*v6 >> 62)
    goto LABEL_38;
  v15 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  v16 = v15 + v14;
  if (__OFADD__(v15, v14))
    goto LABEL_40;
LABEL_9:
  v10 = *v6;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v6 = v10;
  v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v18 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v16 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v11 = 1;
  }
  if (v10 >> 62)
    goto LABEL_41;
  v19 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v19 <= v16)
    v19 = v16;
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x23B7C6DA8](v11, v19, 1, v10);
  swift_bridgeObjectRelease();
  *v6 = v10;
  v18 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  v20 = v18 + 32 + 8 * v9;
  type metadata accessor for DynamicContainer.ItemInfo();
  swift_arrayDestroy();
  v21 = v34;
  v22 = v35;
  if (v35)
  {
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v21 = v34;
      v22 = v35;
      v24 = v32 - v8;
      if (!__OFSUB__(v32, v8))
      {
LABEL_22:
        if (v24 < 0)
        {
LABEL_48:
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        v25 = (char *)(v20 + 8 * v21);
        v26 = (char *)(v18 + 32 + 8 * v8);
        if (v25 != v26 || v25 >= &v26[8 * v24])
        {
          memmove(v25, v26, 8 * v24);
          v21 = v34;
          v22 = v35;
        }
        if (!(v10 >> 62))
        {
          v27 = *(_QWORD *)(v18 + 16);
          v28 = v27 + v22;
          if (!__OFADD__(v27, v22))
          {
LABEL_28:
            *(_QWORD *)(v18 + 16) = v28;
            goto LABEL_29;
          }
          goto LABEL_47;
        }
LABEL_45:
        swift_bridgeObjectRetain();
        v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v21 = v34;
        v28 = v33 + v35;
        if (!__OFADD__(v33, v35))
          goto LABEL_28;
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    else
    {
      v23 = *(_QWORD *)(v18 + 16);
      v24 = v23 - v8;
      if (!__OFSUB__(v23, v8))
        goto LABEL_22;
    }
    __break(1u);
    goto LABEL_45;
  }
LABEL_29:
  if (v21 >= 1)
    swift_arrayInitWithCopy();
  swift_unknownObjectRelease();
  return specialized Array._endMutation()();
}

_QWORD *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *result;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v11 > v6[3] >> 1)
  {
    if (v7 <= v11)
      v15 = v7 + v10;
    else
      v15 = v7;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v15, 1, v6);
    v6 = result;
  }
  v16 = &v6[2 * a1 + 4];
  if (!v10)
    goto LABEL_20;
  v17 = v6[2];
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_26;
  if ((v19 & 0x8000000000000000) == 0)
  {
    result = v16 + 2;
    v20 = &v6[2 * a2 + 4];
    if (v16 + 2 != v20 || result >= &v20[2 * v19])
      result = memmove(result, v20, 16 * v19);
    v21 = v6[2];
    v18 = __OFADD__(v21, v10);
    v22 = v21 + v10;
    if (!v18)
    {
      v6[2] = v22;
LABEL_20:
      *v16 = a3;
      v16[1] = a4;
      *(_QWORD *)v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for TextAttributeModifierBase();
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL specialized static ResolvedGradient.ColorSpace.InterpolatableColor.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t specialized static ResolvedGradient.Stop.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)), 0xFuLL))) & 1) != 0
    && *(double *)(a1 + 16) == *(double *)(a2 + 16))
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 40) & 1) != 0)
        return 1;
    }
    else if ((*(_BYTE *)(a2 + 40) & 1) == 0)
    {
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      v6 = *(float *)&v5 == COERCE_FLOAT(*(_QWORD *)(a2 + 24))
        && *((float *)&v5 + 1) == COERCE_FLOAT(HIDWORD(*(_QWORD *)(a2 + 24)));
      v7 = v6 && *(float *)&v4 == COERCE_FLOAT(*(_QWORD *)(a2 + 32));
      if (v7 && *((float *)&v4 + 1) == COERCE_FLOAT(HIDWORD(*(_QWORD *)(a2 + 32))))
        return 1;
    }
    return 0;
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

BOOL specialized Sequence.reduce<A>(_:_:)(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a2 == a3)
    return result;
  if (a3 >= a2)
  {
    if (a2 < a3)
    {
      v5 = 48 * a2 + 48;
      v6 = a3 - 1;
      v7 = a2;
      while (1)
      {
        if (result)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_16;
          if (v7 >= *(_QWORD *)(*(_QWORD *)a4 + 16))
            goto LABEL_17;
          if (v7 >= *(_QWORD *)(a5 + 16))
            goto LABEL_18;
          result = *(double *)(*(_QWORD *)a4 + v5) == *(double *)(a5 + v5);
          if (v6 == v7)
            return result;
        }
        else
        {
          result = 0;
          if (v6 == v7)
            return result;
        }
        v8 = v7 + 1;
        if ((uint64_t)(v7 + 1) >= a2)
        {
          v5 += 48;
          ++v7;
          if (v8 < a3)
            continue;
        }
        break;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)();
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[14 * a2 + 4];
    if (a1 != a2 || &v4[14 * a1 + 4] >= (_QWORD *)&v16[112 * v15])
      result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, 112 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_21;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_27;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[14 * a2 + 4];
    v17 = 112 * v15;
    if (112 * a1 < 112 * a2 || &v4[14 * a1 + 4] >= (_QWORD *)&v16[v17] || a1 != a2)
      result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, v17);
    v18 = v4[2];
    v14 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v14)
    {
      v4[2] = v19;
LABEL_21:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnyTrackedValue();
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v16[40 * v15])
      result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[15 * a2 + 4];
    if (a1 != a2 || &v4[15 * a1 + 4] >= (_QWORD *)&v16[120 * v15])
      result = (uint64_t)memmove(&v4[15 * a1 + 4], v16, 120 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_23;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_29;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[6 * a2 + 4];
    v17 = 48 * v15;
    if (48 * a1 < 48 * a2 || (&v4[6 * a1 + 4] < (_QWORD *)&v16[v17] ? (v18 = a1 == a2) : (v18 = 0), !v18))
      result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, v17);
    v19 = v4[2];
    v14 = __OFADD__(v19, v8);
    v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[a2 + 4];
    if (a1 != a2 || &v4[a1 + 4] >= (_QWORD *)&v16[8 * v15])
      result = (uint64_t)memmove(&v4[a1 + 4], v16, 8 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v16[40 * v15])
      result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>.Fork, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>, &lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[11 * a2 + 4];
    if (a1 != a2 || &v4[11 * a1 + 4] >= (_QWORD *)&v16[88 * v15])
      result = (uint64_t)memmove(&v4[11 * a1 + 4], v16, 88 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (_QWORD *)&v16[48 * v15])
      result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[7 * a2 + 4];
    if (a1 != a2 || &v4[7 * a1 + 4] >= (_QWORD *)&v16[56 * v15])
      result = (uint64_t)memmove(&v4[7 * a1 + 4], v16, 56 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0]);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(0);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[7 * a2 + 4];
    if (a1 != a2 || &v4[7 * a1 + 4] >= (_QWORD *)&v16[56 * v15])
      result = (uint64_t)memmove(&v4[7 * a1 + 4], v16, 56 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v16[40 * v15])
      result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (_QWORD *)&v16[48 * v15])
      result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[7 * a2 + 4];
    if (a1 != a2 || &v4[7 * a1 + 4] >= (_QWORD *)&v16[56 * v15])
      result = (uint64_t)memmove(&v4[7 * a1 + 4], v16, 56 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[8 * a2 + 4];
    if (a1 != a2 || &v4[8 * a1 + 4] >= (_QWORD *)&v16[64 * v15])
      result = (uint64_t)memmove(&v4[8 * a1 + 4], v16, v15 << 6);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork(0);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (_QWORD *)&v16[72 * v15])
      result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (_QWORD *)&v16[72 * v15])
      result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (_QWORD *)&v16[72 * v15])
      result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v16[40 * v15])
      result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork(0);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (_QWORD *)&v16[48 * v15])
      result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, &lazy protocol witness table cache variable for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[16 * a2 + 4];
    if (a1 != a2 || &v4[16 * a1 + 4] >= (_QWORD *)&v16[128 * v15])
      result = (uint64_t)memmove(&v4[16 * a1 + 4], v16, v15 << 7);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[14 * a2 + 4];
    if (a1 != a2 || &v4[14 * a1 + 4] >= (_QWORD *)&v16[112 * v15])
      result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, 112 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (_QWORD *)&v16[72 * v15])
      result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, &lazy protocol witness table cache variable for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[10 * a2 + 4];
    if (a1 != a2 || &v4[10 * a1 + 4] >= (_QWORD *)&v16[80 * v15])
      result = (uint64_t)memmove(&v4[10 * a1 + 4], v16, 80 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork(0);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[8 * a2 + 4];
    if (a1 != a2 || &v4[8 * a1 + 4] >= (_QWORD *)&v16[64 * v15])
      result = (uint64_t)memmove(&v4[8 * a1 + 4], v16, v15 << 6);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, &lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (_QWORD *)&v16[48 * v15])
      result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[8 * a2 + 4];
    if (a1 != a2 || &v4[8 * a1 + 4] >= (_QWORD *)&v16[64 * v15])
      result = (uint64_t)memmove(&v4[8 * a1 + 4], v16, v15 << 6);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (_QWORD *)&v16[72 * v15])
      result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_23;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_29;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[11 * a2 + 4];
    v17 = 88 * v15;
    if (88 * a1 < 88 * a2 || (&v4[11 * a1 + 4] < (_QWORD *)&v16[v17] ? (v18 = a1 == a2) : (v18 = 0), !v18))
      result = (uint64_t)memmove(&v4[11 * a1 + 4], v16, v17);
    v19 = v4[2];
    v14 = __OFADD__(v19, v8);
    v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))MEMORY[0x24BEE20E8]);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for AnyFontModifier);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for TextLinesLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for TextRunsLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for StaticEffectLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for DynamicEffectLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for ViewResponder);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for CALayer);
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_24;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_24;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_30;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[48 * a1 + 32];
    v15 = &v4[48 * a2 + 32];
    v16 = 48 * v14;
    if (48 * a1 < 48 * a2 || (result < &v15[v16] ? (v17 = a1 == a2) : (v17 = 0), !v17))
      result = (char *)memmove(result, v15, v16);
    v18 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v18, v8);
    v19 = v18 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v19;
LABEL_24:
      *v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[16 * a1 + 32];
    v15 = &v4[16 * a2 + 32];
    if (a1 != a2 || result >= &v15[16 * v14])
      result = (char *)memmove(result, v15, 16 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[16 * a1 + 32];
    v15 = &v4[16 * a2 + 32];
    if (a1 != a2 || result >= &v15[16 * v14])
      result = (char *)memmove(result, v15, 16 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[8 * a1 + 32];
    v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14])
      result = (char *)memmove(result, v15, 8 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3)
    goto LABEL_31;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 - v9;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x23B7C6DA8](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (!v8)
    return specialized Array._endMutation()();
  if (!(v7 >> 62))
  {
    v15 = *(_QWORD *)(v13 + 16);
    v16 = v15 - v3;
    if (!__OFSUB__(v15, v3))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v16 = v22 - v3;
  if (__OFSUB__(v22, v3))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16)
      memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
    if (!(v7 >> 62))
    {
      v18 = *(_QWORD *)(v13 + 16);
      v19 = v18 + v8;
      if (!__OFADD__(v18, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v19;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v19 = v23 + v8;
    if (!__OFADD__(v23, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16 < v3)
    goto LABEL_15;
LABEL_4:
  v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v17 + v29;
    if (!__OFADD__(v17, v29))
      goto LABEL_8;
LABEL_20:
    __break(1u);
LABEL_21:
    v13 = 1;
    goto LABEL_22;
  }
  v7 = *v4;
  v29 = v5 - v3;
  v30 = v5;
  if (*v4 >> 62)
    goto LABEL_18;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 - v8;
  if (__OFADD__(v10, v9))
    goto LABEL_20;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v14 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
      v15 = v6;
      goto LABEL_27;
    }
    goto LABEL_21;
  }
LABEL_22:
  v15 = v6;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v18 <= v11)
    v18 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x23B7C6DA8](v13, v18, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v14 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_27:
  v19 = (char *)(v14 + 32 + 8 * v30);
  type metadata accessor for CAPresentationModifier(0, v15);
  swift_arrayDestroy();
  v20 = v29;
  if (!v29)
    return specialized Array._endMutation()();
  if (!(v7 >> 62))
  {
    v21 = *(_QWORD *)(v14 + 16);
    v22 = v21 - v3;
    if (!__OFSUB__(v21, v3))
      goto LABEL_30;
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v20 = v29;
  v22 = v27 - v3;
  if (__OFSUB__(v27, v3))
    goto LABEL_41;
LABEL_30:
  if ((v22 & 0x8000000000000000) == 0)
  {
    v23 = (char *)(v14 + 32 + 8 * v3);
    if (v30 != v3 || v19 >= &v23[8 * v22])
    {
      memmove(v19, v23, 8 * v22);
      v20 = v29;
    }
    if (!(v7 >> 62))
    {
      v24 = *(_QWORD *)(v14 + 16);
      v25 = v24 + v20;
      if (!__OFADD__(v24, v20))
      {
LABEL_36:
        *(_QWORD *)(v14 + 16) = v25;
        return specialized Array._endMutation()();
      }
      goto LABEL_44;
    }
LABEL_42:
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v25 = v28 + v29;
    if (!__OFADD__(v28, v29))
      goto LABEL_36;
LABEL_44:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Gradient.init(colors:)(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 - 1;
  if (v2 <= 1)
  {
    if (v2)
    {
      v19 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
      v4 = v19;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(v19 + 16);
      v15 = *(_QWORD *)(v19 + 24);
      swift_retain();
      if (v14 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
        v4 = v19;
      }
      *(_QWORD *)(v4 + 16) = v14 + 1;
      v16 = v4 + 16 * v14;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v18[1] = v18;
    v19 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    v4 = v19;
    v5 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v18[2] = a1;
    if (v5)
    {
      v6 = 0;
      v7 = 1.0 / (double)v3;
      v8 = *(_QWORD *)(v4 + 16);
      v9 = 16 * v8;
      do
      {
        v10 = *(_QWORD *)(a1 + 32 + 8 * v6);
        v19 = v4;
        v11 = *(_QWORD *)(v4 + 24);
        swift_retain();
        if (v8 + v6 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v8 + v6 + 1, 1);
          v4 = v19;
        }
        *(_QWORD *)(v4 + 16) = v8 + v6 + 1;
        v12 = v4 + v9;
        *(_QWORD *)(v12 + 32) = v10;
        *(double *)(v12 + 40) = v7 * (double)v6;
        v9 += 16;
        ++v6;
      }
      while (v5 != v6);
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t specialized Gradient.init(stops:)(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  double v4;
  double *v5;
  uint64_t v6;
  double v7;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    v3 = v2 == 1;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = *(double *)(a1 + 56);
    if (v4 < *(double *)(a1 + 40))
    {
LABEL_10:
      static os_log_type_t.fault.getter();
      if (one-time initialization token for runtimeIssuesLog != -1)
        swift_once();
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      v5 = (double *)(a1 + 72);
      v6 = v2 - 1;
      while (--v6)
      {
        v7 = *v5;
        v5 += 2;
        v8 = v7 < v4;
        v4 = v7;
        if (v8)
          goto LABEL_10;
      }
    }
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type Gradient.Stop and conformance Gradient.Stop()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Gradient.Stop and conformance Gradient.Stop;
  if (!lazy protocol witness table cache variable for type Gradient.Stop and conformance Gradient.Stop)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Gradient.Stop, &type metadata for Gradient.Stop);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient.Stop and conformance Gradient.Stop);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace;
  if (!lazy protocol witness table cache variable for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedGradient.ColorSpace, &type metadata for ResolvedGradient.ColorSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedGradient(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
  result = lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedGradient, &type metadata for ResolvedGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedGradient, &type metadata for ResolvedGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedGradient, &type metadata for ResolvedGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedGradientVector(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234BF1868@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;

  result = ResolvedGradient.animatableData.getter((uint64_t)&v4);
  v3 = v5;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_234BF18B8(uint64_t a1)
{
  char v1;
  uint64_t v3;
  char v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  v4 = v1;
  swift_bridgeObjectRetain();
  return ResolvedGradient.animatableData.setter(&v3);
}

ValueMetadata *type metadata accessor for Gradient()
{
  return &type metadata for Gradient;
}

_QWORD *initializeBufferWithCopyOfBuffer for Gradient.Stop(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Gradient.Stop(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for Gradient.Stop(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Gradient.Stop()
{
  return &type metadata for Gradient.Stop;
}

ValueMetadata *type metadata accessor for ResolvedGradient()
{
  return &type metadata for ResolvedGradient;
}

ValueMetadata *type metadata accessor for ResolvedGradient.Stop()
{
  return &type metadata for ResolvedGradient.Stop;
}

uint64_t storeEnumTagSinglePayload for ResolvedGradient.ColorSpace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234BF1A48 + 4 * byte_23528B33B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234BF1A7C + 4 * byte_23528B336[v4]))();
}

uint64_t sub_234BF1A7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234BF1A84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234BF1A8CLL);
  return result;
}

uint64_t sub_234BF1A98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234BF1AA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234BF1AA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234BF1AAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResolvedGradient.ColorSpace()
{
  return &type metadata for ResolvedGradient.ColorSpace;
}

ValueMetadata *type metadata accessor for ResolvedGradient.ColorSpace.InterpolatableColor()
{
  return &type metadata for ResolvedGradient.ColorSpace.InterpolatableColor;
}

ValueMetadata *type metadata accessor for ResolvedGradientVector()
{
  return &type metadata for ResolvedGradientVector;
}

ValueMetadata *type metadata accessor for ResolvedGradientVector.Stop()
{
  return &type metadata for ResolvedGradientVector.Stop;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v12 = a1 - a2;
  if (__OFSUB__(0, v11))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFADD__(v9, v12))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v24 = v6;
  if (!swift_isUniquelyReferenced_nonNull_native() || v9 - v11 > *(_QWORD *)(v8 + 24) >> 1)
    v8 = a3();
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, a4, a5, a6);
  result = swift_arrayDestroy();
  if (!v11)
    goto LABEL_17;
  v17 = *(_QWORD *)(v8 + 16);
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_23;
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = (const void *)(v8 + 32 + 32 * a2);
    if (a1 != a2 || v8 + 32 + 32 * a1 >= (unint64_t)v20 + 32 * v19)
      result = (uint64_t)memmove((void *)(v8 + 32 + 32 * a1), v20, 32 * v19);
    v21 = *(_QWORD *)(v8 + 16);
    v18 = __OFADD__(v21, v12);
    v22 = v21 - v11;
    if (!v18)
    {
      *(_QWORD *)(v8 + 16) = v22;
LABEL_17:
      *v24 = v8;
      return result;
    }
    goto LABEL_24;
  }
LABEL_25:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char **v6;
  char *v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *result;
  int64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v8 = *v6;
  v9 = *((_QWORD *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v15 > *((_QWORD *)v8 + 3) >> 1)
  {
    if (v9 <= v15)
      v18 = v9 + v14;
    else
      v18 = v9;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v18, 1, v8);
    v8 = result;
  }
  v19 = &v8[4 * a1 + 32];
  if (!v14)
    goto LABEL_21;
  v20 = *((_QWORD *)v8 + 2);
  v21 = __OFSUB__(v20, a2);
  v22 = v20 - a2;
  if (v21)
    goto LABEL_30;
  if (v22 < 0)
  {
LABEL_32:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = &v19[4 * v13];
  v23 = &v8[4 * a2 + 32];
  if (result != v23 || result >= &v23[4 * v22])
    result = (char *)memmove(result, v23, 4 * v22);
  v24 = *((_QWORD *)v8 + 2);
  v21 = __OFADD__(v24, v14);
  v25 = v24 + v14;
  if (v21)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *((_QWORD *)v8 + 2) = v25;
LABEL_21:
  if (v13 >= 1)
    result = (char *)memcpy(v19, (const void *)(a4 + 4 * a5), 4 * v13);
  *v6 = v8;
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  char **v3;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = a1 - a2;
  if (__OFSUB__(0, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v10 <= *((_QWORD *)v5 + 3) >> 1)
  {
    if (!v9)
      goto LABEL_18;
  }
  else
  {
    result = (char *)a3();
    v5 = result;
    if (!v9)
    {
LABEL_18:
      *v3 = v5;
      return result;
    }
  }
  v13 = *((_QWORD *)v5 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_24;
  if ((v15 & 0x8000000000000000) == 0)
  {
    result = &v5[8 * a1 + 32];
    v16 = &v5[8 * a2 + 32];
    if (a1 != a2 || result >= &v16[8 * v15])
      result = (char *)memmove(result, v16, 8 * v15);
    v17 = *((_QWORD *)v5 + 2);
    v14 = __OFADD__(v17, v9);
    v18 = v17 + v9;
    if (!v14)
    {
      *((_QWORD *)v5 + 2) = v18;
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_26:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(void **)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 144);
  outlined consume of Text.Effect.Composition.Operation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  outlined consume of Text.Effect.Composition.Operation(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

void type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v10 = a3(255);
    v11 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
    v12 = a5(a1, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4();
    v10 = type metadata accessor for AnimatorState.Fork(a1, v7, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t outlined init with copy of AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityCustomContentEntry(a2, a1);
  return a2;
}

uint64_t outlined destroy of AccessibilityCustomContentEntry(uint64_t a1)
{
  destroy for AccessibilityCustomContentEntry(a1);
  return a1;
}

uint64_t outlined copy of Shader.Argument.Storage(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 4:
    case 6:
      result = swift_bridgeObjectRetain();
      break;
    case 5:
    case 7:
      result = swift_retain();
      break;
    case 8:
      result = outlined copy of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of Shader.Argument.Storage(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 4:
    case 6:
      result = swift_bridgeObjectRelease();
      break;
    case 5:
    case 7:
      result = swift_release();
      break;
    case 8:
      result = outlined consume of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AnimatorState<CGFloat>.Fork(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for AnimatorState.Fork(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined init with copy of LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of LocalizedStringKey.FormatArgument(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for AnyTrackedValue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AnyTrackedValue;
  if (!lazy cache variable for type metadata for AnyTrackedValue)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<CGPoint>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style));
  }
}

BOOL static Color.Resolved.== infix(_:_:)(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  _BOOL4 v8;

  v8 = a1 == a5;
  if (a2 != a6)
    v8 = 0;
  if (a3 != a7)
    v8 = 0;
  return a4 == a8 && v8;
}

float Color.Resolved.animatableData.getter(float a1, float a2, float a3, float a4)
{
  int8x16_t v8;
  int8x16_t v9;
  float v11;

  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    *(float *)v8.i32 = a1;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v11, v8, a2, LODWORD(a3), a4, v9);
    a1 = v11;
  }
  return a1 * 128.0;
}

void Color.Resolved.animatableData.setter(float a1, float a2, float a3, float a4)
{
  float *v4;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16[4];
  char v17;

  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  v9 = a1 * 0.0078125;
  v10 = a2 * 0.0078125;
  v11 = a3 * 0.0078125;
  v12 = a4 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v17 = 2;
    v16[0] = v9;
    v16[1] = v10;
    v16[2] = v11;
    v16[3] = v12;
    v9 = ResolvedGradient.ColorSpace.convertOut(_:)(v16);
    v10 = v13;
    v11 = v14;
    v12 = v15;
  }
  *v4 = v9;
  v4[1] = v10;
  v4[2] = v11;
  v4[3] = v12;
}

void Color.Resolved.linearRed.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*Color.Resolved.linearRed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.linearGreen.getter(double a1, float a2)
{
  return a2;
}

void Color.Resolved.linearGreen.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*Color.Resolved.linearGreen.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.linearBlue.getter(double a1, double a2, float a3)
{
  return a3;
}

void Color.Resolved.linearBlue.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*Color.Resolved.linearBlue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.opacity.getter(double a1, double a2, double a3, float a4)
{
  return a4;
}

void Color.Resolved.opacity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*Color.Resolved.opacity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.multiplyingOpacity(by:)(double a1, float a2)
{
  return a2;
}

void Color.Resolved.over(_:)(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;

  v16 = -a1;
  if (a1 > 0.0)
    v16 = a1;
  if (v16 <= 0.0031308)
  {
    v17 = v16 * 12.92;
  }
  else
  {
    v17 = 1.0;
    if (v16 != 1.0)
      v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
  }
  if (a1 <= 0.0)
    v18 = -v17;
  else
    v18 = v17;
  v19 = -a2;
  if (a2 > 0.0)
    v19 = a2;
  if (v19 <= 0.0031308)
  {
    v20 = v19 * 12.92;
  }
  else
  {
    v20 = 1.0;
    if (v19 != 1.0)
      v20 = (float)(powf(v19, 0.41667) * 1.055) + -0.055;
  }
  if (a2 <= 0.0)
    v21 = -v20;
  else
    v21 = v20;
  v22 = -a3;
  if (a3 > 0.0)
    v22 = a3;
  if (v22 <= 0.0031308)
  {
    v23 = v22 * 12.92;
  }
  else
  {
    v23 = 1.0;
    if (v22 != 1.0)
      v23 = (float)(powf(v22, 0.41667) * 1.055) + -0.055;
  }
  if (a3 <= 0.0)
    v24 = -v23;
  else
    v24 = v23;
  v25 = -a5;
  if (a5 > 0.0)
    v25 = a5;
  if (v25 <= 0.0031308)
  {
    v26 = v25 * 12.92;
  }
  else
  {
    v26 = 1.0;
    if (v25 != 1.0)
      v26 = (float)(powf(v25, 0.41667) * 1.055) + -0.055;
  }
  if (a5 <= 0.0)
    v27 = -v26;
  else
    v27 = v26;
  v28 = -a6;
  if (a6 > 0.0)
    v28 = a6;
  if (v28 <= 0.0031308)
  {
    v29 = v28 * 12.92;
  }
  else
  {
    v29 = 1.0;
    if (v28 != 1.0)
      v29 = (float)(powf(v28, 0.41667) * 1.055) + -0.055;
  }
  if (a6 <= 0.0)
    v30 = -v29;
  else
    v30 = v29;
  v31 = -a7;
  if (a7 > 0.0)
    v31 = a7;
  if (v31 <= 0.0031308)
  {
    v32 = v31 * 12.92;
  }
  else
  {
    v32 = 1.0;
    if (v31 != 1.0)
      v32 = (float)(powf(v31, 0.41667) * 1.055) + -0.055;
  }
  v33 = (float)((float)(1.0 - a8) * a4) + a8;
  if (v33 != 0.0)
  {
    if (a7 <= 0.0)
      v32 = -v32;
    specialized Color.Resolved.init(red:green:blue:opacity:)((float)((float)((float)(1.0 - a8) * (float)(v18 * a4)) + (float)(v27 * a8)) / v33, (float)((float)((float)(1.0 - a8) * (float)(v21 * a4)) + (float)(v30 * a8)) / v33, (float)((float)((float)(1.0 - a8) * (float)(v24 * a4)) + (float)(v32 * a8)) / v33);
  }
}

void Color.Resolved.red.getter(float a1)
{
  float v2;

  v2 = -a1;
  if (a1 > 0.0)
    v2 = a1;
  if (v2 > 0.0031308 && v2 != 1.0)
    powf(v2, 0.41667);
}

void Color.Resolved.green.getter(double a1, float a2)
{
  float v2;

  v2 = -a2;
  if (a2 > 0.0)
    v2 = a2;
  if (v2 > 0.0031308 && v2 != 1.0)
    powf(v2, 0.41667);
}

void Color.Resolved.blue.getter(double a1, double a2, float a3)
{
  float v3;

  v3 = -a3;
  if (a3 > 0.0)
    v3 = a3;
  if (v3 > 0.0031308 && v3 != 1.0)
    powf(v3, 0.41667);
}

void Color.Resolved.hash(into:)(float a1, float a2, float a3, float a4)
{
  Swift::UInt32 v7;
  Swift::UInt32 v8;
  Swift::UInt32 v9;
  Swift::UInt32 v10;

  if ((LODWORD(a1) & 0x7FFFFFFF) != 0)
    v7 = LODWORD(a1);
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0)
    v8 = LODWORD(a2);
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((LODWORD(a3) & 0x7FFFFFFF) != 0)
    v9 = LODWORD(a3);
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((LODWORD(a4) & 0x7FFFFFFF) != 0)
    v10 = LODWORD(a4);
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
}

Swift::Int Color.Resolved.hashValue.getter(float a1, float a2, float a3, float a4)
{
  Hasher.init(_seed:)();
  Color.Resolved.hash(into:)(a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.Resolved()
{
  float *v0;
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Color.Resolved.hash(into:)(v1, v2, v3, v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.Resolved()
{
  float *v0;

  Color.Resolved.hash(into:)(*v0, v0[1], v0[2], v0[3]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.Resolved()
{
  float *v0;
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Color.Resolved.hash(into:)(v1, v2, v3, v4);
  return Hasher._finalize()();
}

float Color.ResolvedVibrant.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void Color.ResolvedVibrant.scale.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*Color.ResolvedVibrant.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float Color.ResolvedVibrant.bias.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void Color.ResolvedVibrant.bias.setter(float a1, float a2, float a3)
{
  float *v3;

  v3[1] = a1;
  v3[2] = a2;
  v3[3] = a3;
}

uint64_t (*Color.ResolvedVibrant.bias.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Color.ResolvedVibrant.colorMatrix.getter@<D0>(uint64_t a1@<X8>)
{
  int *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  double result;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *(_DWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 36) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = v5;
  result = 0.0;
  *(_OWORD *)(a1 + 60) = xmmword_23528B790;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

float *Color.init(_:)(float a1, float a2, float a3, float a4)
{
  float *result;

  type metadata accessor for ColorBox<ResolvedColorProvider>(0);
  result = (float *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[6] = a3;
  result[7] = a4;
  return result;
}

void Color.Resolved._apply(to:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_234BF5E80(float a1, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float *v12;
  uint64_t result;
  _QWORD v17[28];

  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_BYTE *)(v3 + 40);
  if (v4 >= 1)
  {
    v8 = *(_QWORD *)(v3 + 56);
    v9 = *(_QWORD *)(v3 + 48);
    outlined copy of _ShapeStyle_Shape.Result(v6, v7);
    swift_retain();
    swift_retain();
    swift_retain();
    EnvironmentValues.systemColorDefinition.getter();
    v17[0] = v9;
    v17[1] = v8;
    v11 = (*(float (**)(uint64_t, _QWORD *))(v10 + 16))(v4, v17);
    outlined consume of _ShapeStyle_Shape.Result(v6, v7);
    swift_release();
    swift_release();
    swift_release();
    v5 = v11 * v5;
  }
  type metadata accessor for ColorBox<ResolvedColorProvider>(0);
  v12 = (float *)swift_allocObject();
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = v5;
  result = outlined consume of _ShapeStyle_Shape.Result(v6, v7);
  *(_QWORD *)(v3 + 32) = v12;
  *(_BYTE *)(v3 + 40) = 0;
  return result;
}

void protocol witness for ShapeStyle._apply(to:) in conformance Color.Resolved(uint64_t a1)
{
  Color.Resolved._apply(to:)(a1);
}

void Color.Resolved.description.getter(float a1, float a2, float a3, float a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = -a1;
  if (a1 > 0.0)
    v8 = a1;
  if (v8 <= 0.0031308)
  {
    v9 = v8 * 12.92;
  }
  else
  {
    v9 = 1.0;
    if (v8 != 1.0)
      v9 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
  }
  v10 = -v9;
  if (a1 > 0.0)
    v10 = v9;
  v11 = (float)(v10 * 255.0) + 0.5;
  if ((~LODWORD(v11) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v11 <= -9.2234e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v11 >= 9.2234e18)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v12 = -a2;
  if (a2 > 0.0)
    v12 = a2;
  if (v12 <= 0.0031308)
  {
    v13 = v12 * 12.92;
  }
  else
  {
    v13 = 1.0;
    if (v12 != 1.0)
      v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
  }
  v14 = -v13;
  if (a2 > 0.0)
    v14 = v13;
  v15 = (float)(v14 * 255.0) + 0.5;
  if ((~LODWORD(v15) & 0x7F800000) == 0)
    goto LABEL_41;
  if (v15 <= -9.2234e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v15 >= 9.2234e18)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v16 = -a3;
  if (a3 > 0.0)
    v16 = a3;
  if (v16 <= 0.0031308)
  {
    v17 = v16 * 12.92;
  }
  else
  {
    v17 = 1.0;
    if (v16 != 1.0)
      v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
  }
  v18 = -v17;
  if (a3 > 0.0)
    v18 = v17;
  v19 = (float)(v18 * 255.0) + 0.5;
  if (v19 <= -9.2234e18)
    goto LABEL_44;
  if (v19 >= 9.2234e18)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v20 = (float)(a4 * 255.0) + 0.5;
  if ((~LODWORD(v20) & 0x7F800000) == 0 || (LODWORD(v19) & 0x7F800000) == 0x7F800000)
    goto LABEL_46;
  if (v20 <= -9.2234e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v20 < 9.2234e18)
  {
    v21 = (uint64_t)v19;
    v22 = (uint64_t)v20;
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_23528B7A0;
    v24 = MEMORY[0x24BEE1768];
    v25 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v23 + 64) = v25;
    *(_QWORD *)(v23 + 32) = (uint64_t)v11;
    *(_QWORD *)(v23 + 96) = v24;
    *(_QWORD *)(v23 + 104) = v25;
    *(_QWORD *)(v23 + 72) = (uint64_t)v15;
    *(_QWORD *)(v23 + 136) = v24;
    *(_QWORD *)(v23 + 144) = v25;
    *(_QWORD *)(v23 + 112) = v21;
    *(_QWORD *)(v23 + 176) = v24;
    *(_QWORD *)(v23 + 184) = v25;
    *(_QWORD *)(v23 + 152) = v22;
    String.init(format:_:)();
    return;
  }
LABEL_48:
  __break(1u);
}

void protocol witness for CustomStringConvertible.description.getter in conformance Color.Resolved()
{
  float *v0;

  Color.Resolved.description.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t one-time initialization function for legacyInterpolation()
{
  unsigned int v0;
  uint64_t result;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v0;
  static Color.Resolved.legacyInterpolation = result ^ 1;
  return result;
}

uint64_t static Color.Resolved.legacyInterpolation.getter()
{
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  return static Color.Resolved.legacyInterpolation;
}

uint64_t static Color.Resolved.legacyInterpolation.setter(char a1)
{
  uint64_t result;

  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  result = swift_beginAccess();
  static Color.Resolved.legacyInterpolation = a1 & 1;
  return result;
}

uint64_t (*static Color.Resolved.legacyInterpolation.modify())()
{
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void (*Color.Resolved.animatableData.modify(float32x4_t **a1))(float32x4_t **a1, char a2)
{
  int8x16_t *v1;
  float32x4_t *v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v8;
  float32x4_t v9;

  v3 = (float32x4_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].i64[1] = (uint64_t)v1;
  v8 = *(float32x4_t *)v1;
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, (int8x16_t)v8, v8.f32[1], v8.u32[2], v8.f32[3], v4);
    v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  v3[2] = vmulq_f32(v5, v6);
  return Color.Resolved.animatableData.modify;
}

void Color.Resolved.animatableData.modify(float32x4_t **a1, char a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  __int32 v5;
  __int32 v6;
  __int32 v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  float32x4_t v12;

  v2 = *a1;
  v3.i64[0] = 0x3C0000003C000000;
  v3.i64[1] = 0x3C0000003C000000;
  v4 = vmulq_f32((*a1)[2], v3);
  if ((a2 & 1) != 0)
  {
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v5 = v4.i32[1];
      v7 = v4.i32[3];
      v6 = v4.i32[2];
    }
    else
    {
      v12 = v4;
      v4.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
    }
    v11 = (_DWORD *)v2[1].i64[1];
    *v11 = v4.i32[0];
    v11[1] = v5;
    v11[2] = v6;
    v11[3] = v7;
  }
  else
  {
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v12 = v4;
      v4.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
      v4.i32[1] = v8;
      v4.i64[1] = __PAIR64__(v10, v9);
    }
    *(float32x4_t *)v2[1].i64[1] = v4;
  }
  free(v2);
}

void protocol witness for Animatable.animatableData.getter in conformance Color.Resolved(uint64_t a1@<X8>)
{
  float *v1;
  int v3;
  int v4;
  int v5;

  *(float *)a1 = Color.Resolved.animatableData.getter(*v1, v1[1], v1[2], v1[3]);
  *(_DWORD *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void protocol witness for Animatable.animatableData.setter in conformance Color.Resolved(float *a1)
{
  Color.Resolved.animatableData.setter(*a1, a1[1], a1[2], a1[3]);
}

void (*protocol witness for Animatable.animatableData.modify in conformance Color.Resolved(uint64_t a1))(float *a1)
{
  float *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = a1;
  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = Color.Resolved.animatableData.getter(*v1, v1[1], v1[2], v1[3]);
  *(_DWORD *)(v2 + 12) = v3;
  v2 += 8;
  *(_DWORD *)(v2 + 8) = v4;
  *(_DWORD *)(v2 + 12) = v5;
  return protocol witness for Animatable.animatableData.modify in conformance Color.Resolved;
}

void protocol witness for Animatable.animatableData.modify in conformance Color.Resolved(float *a1)
{
  Color.Resolved.animatableData.setter(a1[2], a1[3], a1[4], a1[5]);
}

float Color.ResolvedVibrant.animatableData.getter()
{
  float *v0;

  return *v0 * 128.0;
}

float Color.ResolvedVibrant.animatableData.setter(float a1, float a2, float a3, float a4)
{
  float *v4;
  float result;

  *v4 = a1 * 0.0078125;
  v4[1] = a2 * 0.0078125;
  result = a4 * 0.0078125;
  v4[2] = a3 * 0.0078125;
  v4[3] = a4 * 0.0078125;
  return result;
}

float32x4_t (*Color.ResolvedVibrant.animatableData.modify(uint64_t a1))(uint64_t a1)
{
  float32x4_t *v1;
  float32x4_t v2;

  *(_QWORD *)a1 = v1;
  v2.i64[0] = 0x4300000043000000;
  v2.i64[1] = 0x4300000043000000;
  *(float32x4_t *)(a1 + 8) = vmulq_f32(*v1, v2);
  return Color.ResolvedVibrant.animatableData.modify;
}

float32x4_t Color.ResolvedVibrant.animatableData.modify(uint64_t a1)
{
  float32x4_t v1;
  float32x4_t result;

  v1.i64[0] = 0x3C0000003C000000;
  v1.i64[1] = 0x3C0000003C000000;
  result = vmulq_f32(*(float32x4_t *)(a1 + 8), v1);
  *(float32x4_t *)*(_QWORD *)a1 = result;
  return result;
}

float32x4_t protocol witness for Animatable.animatableData.getter in conformance Color.ResolvedVibrant@<Q0>(float32x4_t *a1@<X8>)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t result;

  v2.i64[0] = 0x4300000043000000;
  v2.i64[1] = 0x4300000043000000;
  result = vmulq_f32(*v1, v2);
  *a1 = result;
  return result;
}

float32x4_t protocol witness for Animatable.animatableData.setter in conformance Color.ResolvedVibrant(float32x4_t *a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t result;

  v2.i64[0] = 0x3C0000003C000000;
  v2.i64[1] = 0x3C0000003C000000;
  result = vmulq_f32(*a1, v2);
  *v1 = result;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance Color.ResolvedVibrant(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Color.ResolvedVibrant.animatableData.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

float static Color.Resolved.clear.getter()
{
  return 0.0;
}

float static Color.Resolved.black.getter()
{
  return 0.0;
}

double one-time initialization function for gray_75()
{
  double result;

  result = 0.0000415144676;
  static Color.Resolved.gray_75 = xmmword_23528B7B0;
  return result;
}

float static Color.Resolved.gray_75.getter()
{
  if (one-time initialization token for gray_75 != -1)
    swift_once();
  return *(float *)&static Color.Resolved.gray_75;
}

double one-time initialization function for gray_50()
{
  double result;

  result = 0.0000000253116105;
  static Color.Resolved.gray_50 = xmmword_23528B7C0;
  return result;
}

float static Color.Resolved.gray_50.getter()
{
  if (one-time initialization token for gray_50 != -1)
    swift_once();
  return *(float *)&static Color.Resolved.gray_50;
}

double one-time initialization function for gray_25()
{
  double result;

  result = 2.32894051e-13;
  static Color.Resolved.gray_25 = xmmword_23528B7D0;
  return result;
}

float static Color.Resolved.gray_25.getter()
{
  if (one-time initialization token for gray_25 != -1)
    swift_once();
  return *(float *)&static Color.Resolved.gray_25;
}

float static Color.Resolved.white.getter()
{
  return 1.0;
}

float static Color.Resolved.red.getter()
{
  return 1.0;
}

float static Color.Resolved.blue.getter()
{
  return 0.0;
}

float static Color.Resolved.green.getter()
{
  return 0.0;
}

float Color.Resolved.init(colorSpace:red:green:blue:opacity:)(_BYTE *a1, float result, float a3, float a4)
{
  if (!*a1)
    return specialized Color.Resolved.init(red:green:blue:opacity:)(result, a3, a4);
  if (*a1 != 1)
    return specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(result, a3, a4);
  return result;
}

void Color.Resolved.init(white:opacity:)(float a1)
{
  float v2;
  float v3;

  v2 = -a1;
  if (a1 <= 0.0)
    v3 = v2;
  else
    v3 = a1;
  if (v3 > 0.04045 && v3 != 1.0)
    powf((float)(v3 * 0.94787) + 0.052133, 2.4);
}

void Color.Resolved.red.setter(float a1)
{
  float *v1;
  float v3;
  float v4;
  float v5;

  v3 = -a1;
  if (a1 <= 0.0)
    v4 = v3;
  else
    v4 = a1;
  if (v4 <= 0.04045)
  {
    v5 = v4 * 0.077399;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  }
  if (a1 <= 0.0)
    v5 = -v5;
  *v1 = v5;
}

void (*Color.Resolved.red.modify(float **a1))(uint64_t a1)
{
  float *v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;

  *a1 = v1;
  v2 = (float *)(a1 + 1);
  v3 = *v1;
  v4 = -*v1;
  if (*v1 > 0.0)
    v4 = *v1;
  if (v4 <= 0.0031308)
  {
    v5 = v4 * 12.92;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
  }
  v6 = -v5;
  if (v3 > 0.0)
    v6 = v5;
  *v2 = v6;
  return Color.Resolved.red.modify;
}

void Color.Resolved.red.modify(uint64_t a1)
{
  float v2;
  float v3;
  float v4;

  v2 = *(float *)(a1 + 8);
  if (v2 <= 0.0)
    v3 = -v2;
  else
    v3 = *(float *)(a1 + 8);
  if (v3 <= 0.04045)
  {
    v4 = v3 * 0.077399;
  }
  else
  {
    v4 = 1.0;
    if (v3 != 1.0)
      v4 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
  }
  if (v2 <= 0.0)
    v4 = -v4;
  **(float **)a1 = v4;
}

void Color.Resolved.green.setter(float a1)
{
  uint64_t v1;
  float v3;
  float v4;
  float v5;

  v3 = -a1;
  if (a1 <= 0.0)
    v4 = v3;
  else
    v4 = a1;
  if (v4 <= 0.04045)
  {
    v5 = v4 * 0.077399;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  }
  if (a1 <= 0.0)
    v5 = -v5;
  *(float *)(v1 + 4) = v5;
}

void (*Color.Resolved.green.modify(_QWORD *a1))(float *a1)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;

  *a1 = v1;
  v2 = (float *)(a1 + 1);
  v3 = *(float *)(v1 + 4);
  v4 = -v3;
  if (v3 > 0.0)
    v4 = *(float *)(v1 + 4);
  if (v4 <= 0.0031308)
  {
    v5 = v4 * 12.92;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
  }
  v6 = -v5;
  if (v3 > 0.0)
    v6 = v5;
  *v2 = v6;
  return Color.Resolved.green.modify;
}

void Color.Resolved.green.modify(float *a1)
{
  float v2;
  float v3;
  float v4;

  v2 = a1[2];
  if (v2 <= 0.0)
    v3 = -v2;
  else
    v3 = a1[2];
  if (v3 <= 0.04045)
  {
    v4 = v3 * 0.077399;
  }
  else
  {
    v4 = 1.0;
    if (v3 != 1.0)
      v4 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
  }
  if (v2 <= 0.0)
    v4 = -v4;
  *(float *)(*(_QWORD *)a1 + 4) = v4;
}

void Color.Resolved.blue.setter(float a1)
{
  uint64_t v1;
  float v3;
  float v4;
  float v5;

  v3 = -a1;
  if (a1 <= 0.0)
    v4 = v3;
  else
    v4 = a1;
  if (v4 <= 0.04045)
  {
    v5 = v4 * 0.077399;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  }
  if (a1 <= 0.0)
    v5 = -v5;
  *(float *)(v1 + 8) = v5;
}

void (*Color.Resolved.blue.modify(_QWORD *a1))(float *a1)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;

  *a1 = v1;
  v2 = (float *)(a1 + 1);
  v3 = *(float *)(v1 + 8);
  v4 = -v3;
  if (v3 > 0.0)
    v4 = *(float *)(v1 + 8);
  if (v4 <= 0.0031308)
  {
    v5 = v4 * 12.92;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
  }
  v6 = -v5;
  if (v3 > 0.0)
    v6 = v5;
  *v2 = v6;
  return Color.Resolved.blue.modify;
}

void Color.Resolved.blue.modify(float *a1)
{
  float v2;
  float v3;
  float v4;

  v2 = a1[2];
  if (v2 <= 0.0)
    v3 = -v2;
  else
    v3 = a1[2];
  if (v3 <= 0.04045)
  {
    v4 = v3 * 0.077399;
  }
  else
  {
    v4 = 1.0;
    if (v3 != 1.0)
      v4 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
  }
  if (v2 <= 0.0)
    v4 = -v4;
  *(float *)(*(_QWORD *)a1 + 8) = v4;
}

void Color.Resolved.white.getter(float a1, float a2, float a3)
{
  float v3;
  float v4;

  v3 = (float)((float)(a1 * 0.2126) + (float)(a2 * 0.7152)) + (float)(a3 * 0.0722);
  v4 = -v3;
  if (v3 > 0.0)
    v4 = v3;
  if (v4 > 0.0031308 && v4 != 1.0)
    powf(v4, 0.41667);
}

float Color.Resolved.linearWhite.getter(float a1, float a2, float a3)
{
  return (float)((float)(a1 * 0.2126) + (float)(a2 * 0.7152)) + (float)(a3 * 0.0722);
}

float Color.Resolved.init(linearDisplayP3Red:green:blue:opacity:)(float a1, float a2)
{
  return (float)(a1 * 1.2249) + (float)(a2 * -0.2247);
}

float Color.Resolved.linearDisplayP3Components.getter(float a1, float a2)
{
  return (float)(a1 * 0.8225) + (float)(a2 * 0.1774);
}

void Color.Resolved.displayP3Components.getter(float a1, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v3 = (float)(a1 * 0.8225) + (float)(a2 * 0.1774);
  v4 = (float)(a1 * 0.0332) + (float)(a2 * 0.9669);
  v5 = (float)(a1 * 0.0171) + (float)(a2 * 0.0724);
  v6 = a3 * 0.9108;
  v7 = -v3;
  if (v3 > 0.0)
    v7 = v3;
  if (v7 > 0.0031308 && v7 != 1.0)
    powf(v7, 0.41667);
  v8 = v5 + v6;
  v9 = -v4;
  if (v4 > 0.0)
    v9 = v4;
  if (v9 > 0.0031308 && v9 != 1.0)
    powf(v9, 0.41667);
  v10 = -v8;
  if (v8 > 0.0)
    v10 = v8;
  if (v10 > 0.0031308 && v10 != 1.0)
    powf(v10, 0.41667);
}

uint64_t Color.Resolved.encode(to:)(_QWORD *a1, float a2, float a3, float a4)
{
  uint64_t v4;
  float v8;
  float v9;
  float v10;
  _BYTE v12[24];
  uint64_t v13;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v8 = -a2;
  if (a2 > 0.0)
    v8 = a2;
  if (v8 > 0.0031308 && v8 != 1.0)
    powf(v8, 0.41667);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v4)
  {
    v9 = -a3;
    if (a3 > 0.0)
      v9 = a3;
    if (v9 > 0.0031308 && v9 != 1.0)
      powf(v9, 0.41667);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    v10 = -a4;
    if (a4 > 0.0)
      v10 = a4;
    if (v10 > 0.0031308 && v10 != 1.0)
      powf(v10, 0.41667);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

float Color.Resolved.init(from:)(_QWORD *a1)
{
  return specialized Color.Resolved.init(from:)(a1);
}

{
  return specialized Color.Resolved.init(from:)(a1);
}

void protocol witness for Decodable.init(from:) in conformance Color.Resolved(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;
  int v7;

  v4 = specialized Color.Resolved.init(from:)(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Color.Resolved(_QWORD *a1)
{
  float *v1;

  return Color.Resolved.encode(to:)(a1, *v1, v1[1], v1[2]);
}

float *Color.Resolved.encode(to:)(float *result, float a2, float a3, float a4, float a5)
{
  float *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = result;
  if (a2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    v10 = *((_QWORD *)v8 + 1);
    result = (float *)(v10 + 4);
    if (__OFADD__(v10, 4))
    {
      __break(1u);
    }
    else if (*((_QWORD *)v8 + 2) >= (uint64_t)result)
    {
      *((_QWORD *)v8 + 1) = result;
      *(float *)(*(_QWORD *)v8 + v10) = a2;
      goto LABEL_5;
    }
    result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = a2;
    if (a3 == 0.0)
      goto LABEL_9;
    goto LABEL_6;
  }
LABEL_5:
  if (a3 == 0.0)
    goto LABEL_9;
LABEL_6:
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  v11 = *((_QWORD *)v8 + 1);
  result = (float *)(v11 + 4);
  if (__OFADD__(v11, 4))
  {
    __break(1u);
  }
  else if (*((_QWORD *)v8 + 2) >= (uint64_t)result)
  {
    *((_QWORD *)v8 + 1) = result;
    *(float *)(*(_QWORD *)v8 + v11) = a3;
    goto LABEL_9;
  }
  result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *result = a3;
LABEL_9:
  if (a4 == 0.0)
    goto LABEL_13;
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  v12 = *((_QWORD *)v8 + 1);
  result = (float *)(v12 + 4);
  if (__OFADD__(v12, 4))
  {
    __break(1u);
  }
  else if (*((_QWORD *)v8 + 2) >= (uint64_t)result)
  {
    *((_QWORD *)v8 + 1) = result;
    *(float *)(*(_QWORD *)v8 + v12) = a4;
    goto LABEL_13;
  }
  result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *result = a4;
LABEL_13:
  if (a5 == 1.0)
    return result;
  ProtobufEncoder.encodeVarint(_:)(0x25uLL);
  v13 = *((_QWORD *)v8 + 1);
  result = (float *)(v13 + 4);
  if (__OFADD__(v13, 4))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (*((_QWORD *)v8 + 2) < (uint64_t)result)
  {
LABEL_26:
    result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = a5;
    return result;
  }
  *((_QWORD *)v8 + 1) = result;
  *(float *)(*(_QWORD *)v8 + v13) = a5;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Color.Resolved(float *a1)
{
  float *v1;

  return Color.Resolved.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance Color.Resolved(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;
  int v7;

  v4 = specialized Color.Resolved.init(from:)(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

float specialized Color.Resolved.init(red:green:blue:opacity:)(float a1, float a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;

  v6 = -a1;
  if (a1 > 0.0)
    v6 = a1;
  if (v6 <= 0.04045)
  {
    v7 = v6 * 0.077399;
  }
  else
  {
    v7 = 1.0;
    if (v6 != 1.0)
      v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
  }
  v8 = -a2;
  if (a2 > 0.0)
    v8 = a2;
  if (v8 > 0.04045 && v8 != 1.0)
    powf((float)(v8 * 0.94787) + 0.052133, 2.4);
  if (a3 <= 0.0)
    v9 = -a3;
  else
    v9 = a3;
  if (v9 > 0.04045 && v9 != 1.0)
    powf((float)(v9 * 0.94787) + 0.052133, 2.4);
  if (a1 <= 0.0)
    return -v7;
  else
    return v7;
}

void type metadata accessor for ColorBox<ResolvedColorProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>)
  {
    v2 = lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider();
    v4 = type metadata accessor for ColorBox(a1, (uint64_t)&type metadata for ResolvedColorProvider, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider;
  if (!lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedColorProvider, &type metadata for ResolvedColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider;
  if (!lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedColorProvider, &type metadata for ResolvedColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider;
  if (!lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedColorProvider, &type metadata for ResolvedColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider);
  }
  return result;
}

float specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(float a1, float a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v6 = -a1;
  if (a1 > 0.0)
    v6 = a1;
  if (v6 <= 0.04045)
  {
    v7 = v6 * 0.077399;
  }
  else
  {
    v7 = 1.0;
    if (v6 != 1.0)
      v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
  }
  v8 = -a2;
  if (a2 > 0.0)
    v8 = a2;
  if (v8 <= 0.04045)
  {
    v9 = v8 * 0.077399;
  }
  else
  {
    v9 = 1.0;
    if (v8 != 1.0)
      v9 = powf((float)(v8 * 0.94787) + 0.052133, 2.4);
  }
  if (a3 <= 0.0)
    v10 = -a3;
  else
    v10 = a3;
  if (v10 > 0.04045 && v10 != 1.0)
    powf((float)(v10 * 0.94787) + 0.052133, 2.4);
  if (a2 <= 0.0)
    v11 = -v9;
  else
    v11 = v9;
  if (a1 <= 0.0)
    v12 = -v7;
  else
    v12 = v7;
  return (float)(v12 * 1.2249) + (float)(v11 * -0.2247);
}

float specialized Color.Resolved.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1[1];
  v4 = a1[2];
  if (v3 < v4)
  {
    v5 = 0.0;
    while (1)
    {
      v6 = a1[3];
      if (v6)
      {
        v7 = a1[4];
        if (v3 < v7)
          goto LABEL_9;
        if (v7 < v3)
          goto LABEL_60;
        a1[3] = 0;
      }
      v6 = ProtobufDecoder.decodeVarint()();
      if (v1)
        return v5;
      if (v6 <= 7)
      {
LABEL_60:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return v5;
      }
LABEL_9:
      switch(v6 >> 3)
      {
        case 1uLL:
          if ((v6 & 7) == 2)
          {
            v12 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            if (v12 < 0)
            {
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              JUMPOUT(0x234BF83D4);
            }
            v8 = (float *)a1[1];
            if (v4 < (unint64_t)v8 + v12)
              goto LABEL_60;
            a1[3] = 13;
            a1[4] = (char *)v8 + v12;
          }
          else
          {
            if ((v6 & 7) != 5)
              goto LABEL_60;
            v8 = (float *)a1[1];
          }
          v3 = (unint64_t)(v8 + 1);
          if (v4 < (unint64_t)(v8 + 1))
            goto LABEL_60;
          v5 = *v8;
          break;
        case 2uLL:
          if ((v6 & 7) == 2)
          {
            v13 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            if (v13 < 0)
              goto LABEL_63;
            v9 = a1[1];
            if (v4 < v9 + v13)
              goto LABEL_60;
            a1[3] = 21;
            a1[4] = v9 + v13;
          }
          else
          {
            if ((v6 & 7) != 5)
              goto LABEL_60;
            v9 = a1[1];
          }
          v3 = v9 + 4;
          if (v4 < v9 + 4)
            goto LABEL_60;
          break;
        case 3uLL:
          if ((v6 & 7) == 2)
          {
            v14 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            if (v14 < 0)
              goto LABEL_64;
            v10 = a1[1];
            if (v4 < v10 + v14)
              goto LABEL_60;
            a1[3] = 29;
            a1[4] = v10 + v14;
          }
          else
          {
            if ((v6 & 7) != 5)
              goto LABEL_60;
            v10 = a1[1];
          }
          v3 = v10 + 4;
          if (v4 < v10 + 4)
            goto LABEL_60;
          break;
        case 4uLL:
          if ((v6 & 7) == 2)
          {
            v15 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            if (v15 < 0)
              goto LABEL_65;
            v11 = a1[1];
            if (v4 < v11 + v15)
              goto LABEL_60;
            a1[3] = 37;
            a1[4] = v11 + v15;
          }
          else
          {
            if ((v6 & 7) != 5)
              goto LABEL_60;
            v11 = a1[1];
          }
          v3 = v11 + 4;
          if (v4 < v11 + 4)
            goto LABEL_60;
          break;
        default:
          switch(v6 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1)
                return v5;
              v3 = a1[1];
              goto LABEL_56;
            case 1uLL:
              v3 = a1[1] + 8;
              goto LABEL_54;
            case 2uLL:
              v16 = ProtobufDecoder.decodeVarint()();
              if (v1)
                return v5;
              if (v16 < 0)
                goto LABEL_66;
              v3 = a1[1] + v16;
LABEL_54:
              if (v4 >= v3)
                goto LABEL_55;
              goto LABEL_60;
            case 5uLL:
              v3 = a1[1] + 4;
              goto LABEL_54;
            default:
              goto LABEL_60;
          }
      }
LABEL_55:
      a1[1] = v3;
LABEL_56:
      v4 = a1[2];
      if (v3 >= v4)
        goto LABEL_59;
    }
  }
  v5 = 0.0;
LABEL_59:
  a1[3] = 0;
  return v5;
}

{
  uint64_t v1;
  float v2;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _BYTE v11[24];
  uint64_t v12;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v5 = v4;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v7 = v6;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v9 = v8;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v2 = specialized Color.Resolved.init(red:green:blue:opacity:)(v5, v7, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

void sub_234BF8590(float *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  int v5;

  *(float *)a2 = Color.Resolved.animatableData.getter(*a1, a1[1], a1[2], a1[3]);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
}

void sub_234BF85C0(float *a1)
{
  Color.Resolved.animatableData.setter(*a1, a1[1], a1[2], a1[3]);
}

float32x4_t sub_234BF85E8@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2;
  float32x4_t result;

  v2.i64[0] = 0x4300000043000000;
  v2.i64[1] = 0x4300000043000000;
  result = vmulq_f32(*a1, v2);
  *a2 = result;
  return result;
}

float32x4_t sub_234BF85FC(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t result;

  v2.i64[0] = 0x3C0000003C000000;
  v2.i64[1] = 0x3C0000003C000000;
  result = vmulq_f32(*a1, v2);
  *a2 = result;
  return result;
}

void sub_234BF8610(float *a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a1;
  v4 = -*a1;
  if (*a1 > 0.0)
    v4 = *a1;
  if (v4 <= 0.0031308)
  {
    v5 = v4 * 12.92;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
  }
  v6 = -v5;
  if (v3 > 0.0)
    v6 = v5;
  *a2 = v6;
}

void sub_234BF86B8(float *a1)
{
  Color.Resolved.red.setter(*a1);
}

void sub_234BF86DC(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *(float *)(a1 + 4);
  v4 = -v3;
  if (v3 > 0.0)
    v4 = *(float *)(a1 + 4);
  if (v4 <= 0.0031308)
  {
    v5 = v4 * 12.92;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
  }
  v6 = -v5;
  if (v3 > 0.0)
    v6 = v5;
  *a2 = v6;
}

void sub_234BF8784(float *a1)
{
  Color.Resolved.green.setter(*a1);
}

void sub_234BF87A8(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *(float *)(a1 + 8);
  v4 = -v3;
  if (v3 > 0.0)
    v4 = *(float *)(a1 + 8);
  if (v4 <= 0.0031308)
  {
    v5 = v4 * 12.92;
  }
  else
  {
    v5 = 1.0;
    if (v4 != 1.0)
      v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
  }
  v6 = -v5;
  if (v3 > 0.0)
    v6 = v5;
  *a2 = v6;
}

void sub_234BF8850(float *a1)
{
  Color.Resolved.blue.setter(*a1);
}

ValueMetadata *type metadata accessor for Color.Resolved()
{
  return &type metadata for Color.Resolved;
}

ValueMetadata *type metadata accessor for Color.ResolvedVibrant()
{
  return &type metadata for Color.ResolvedVibrant;
}

uint64_t static Signpost.kdebug(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 18) = 2;
  return result;
}

__n128 Signpost.published.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  v3 = v1[1].n128_u8[1];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u8[1] = v3;
  a1[1].n128_u8[2] = 3;
  return result;
}

void static Signpost.render.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 3;
}

double static Signpost.postUpdateActions.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 2;
  *(_OWORD *)a1 = xmmword_23528B9A0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 3;
  return result;
}

double static Signpost.renderUpdate.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 3;
  *(_OWORD *)a1 = xmmword_23528B9B0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 3;
  return result;
}

double static Signpost.renderFlattened.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 4;
  *(_OWORD *)a1 = xmmword_23528B9C0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 3;
  return result;
}

double static Signpost.bodyInvoke.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 5;
  *(_OWORD *)a1 = xmmword_23528B9D0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 3;
  return result;
}

void static Signpost.os_log(_:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  *(_WORD *)(a4 + 17) = 513;
}

void static Signpost.linkCreate.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "LinkCreate";
  *(_QWORD *)(a1 + 8) = 10;
  *(_WORD *)(a1 + 16) = 258;
  *(_BYTE *)(a1 + 18) = 3;
}

void static Signpost.linkUpdate.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "LinkUpdate";
  *(_QWORD *)(a1 + 8) = 10;
  *(_WORD *)(a1 + 16) = 258;
  *(_BYTE *)(a1 + 18) = 3;
}

void static Signpost.linkDestroy.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "LinkDestroy";
  *(_QWORD *)(a1 + 8) = 11;
  *(_WORD *)(a1 + 16) = 258;
  *(_BYTE *)(a1 + 18) = 3;
}

double static Signpost.viewHost.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 9;
  *(_OWORD *)a1 = xmmword_23528B9E0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 3;
  return result;
}

void static Signpost.platformView.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "ViewMapping";
  *(_QWORD *)(a1 + 8) = 11;
  *(_WORD *)(a1 + 16) = 258;
  *(_BYTE *)(a1 + 18) = 3;
}

void static Signpost.platformUpdate.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "PlatformViewUpdate";
  *(_QWORD *)(a1 + 8) = 18;
  *(_WORD *)(a1 + 16) = 258;
  *(_BYTE *)(a1 + 18) = 3;
}

void static Signpost.animationState.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "AnimationState";
  *(_QWORD *)(a1 + 8) = 14;
  *(_WORD *)(a1 + 16) = 258;
  *(_BYTE *)(a1 + 18) = 3;
}

void static Signpost.eventHandling.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "EventHandling";
  *(_QWORD *)(a1 + 8) = 13;
  *(_WORD *)(a1 + 16) = 258;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t one-time initialization function for _signpostLog()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  _signpostLog = result;
  return result;
}

uint64_t one-time initialization function for archiving(uint64_t a1)
{
  return one-time initialization function for archiving(a1, static Signpost.archiving, one-time initialization token for archiving, (uint64_t)static Log.archiving);
}

{
  return one-time initialization function for propertyChangeLog(a1, static Log.archiving);
}

uint64_t static Signpost.archiving.getter@<X0>(uint64_t a1@<X8>)
{
  return static Signpost.archiving.getter(&one-time initialization token for archiving, (uint64_t)static Signpost.archiving, a1);
}

uint64_t one-time initialization function for metadataExtraction(uint64_t a1)
{
  return one-time initialization function for archiving(a1, static Signpost.metadataExtraction, &one-time initialization token for metadataExtraction, (uint64_t)static Log.metadataExtraction);
}

{
  return one-time initialization function for propertyChangeLog(a1, static Log.metadataExtraction);
}

uint64_t one-time initialization function for archiving(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  return OSSignposter.init(logger:)();
}

uint64_t static Signpost.metadataExtraction.getter@<X0>(uint64_t a1@<X8>)
{
  return static Signpost.archiving.getter(&one-time initialization token for metadataExtraction, (uint64_t)static Signpost.metadataExtraction, a1);
}

uint64_t static Signpost.archiving.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for OSSignposter();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

const char *one-time initialization function for moduleName()
{
  const char *result;
  uint64_t v1;

  result = specialized static Tracing.libraryName(defining:)();
  static Signpost.moduleName = (uint64_t)result;
  unk_2561B1FF0 = v1;
  return result;
}

uint64_t static Signpost.moduleName.getter()
{
  uint64_t v0;

  if (one-time initialization token for moduleName != -1)
    swift_once();
  v0 = static Signpost.moduleName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static Signpost.kdebug(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 18) = 2;
  return result;
}

__n128 Signpost.disabled.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  v3 = v1[1].n128_u8[1];
  result = *v1;
  *(__n128 *)a1 = *v1;
  *(_BYTE *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 17) = v3;
  return result;
}

__n128 Signpost.verbose.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  v3 = v1[1].n128_u8[1];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u8[1] = v3;
  a1[1].n128_u8[2] = 1;
  return result;
}

uint64_t Signpost.isEnabled.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 18) != 3)
    return 0;
  if ((*(_BYTE *)(v0 + 17) & 1) != 0)
  {
    static os_signpost_type_t.event.getter();
    result = kdebug_is_enabled();
    if ((_DWORD)result)
    {
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      return OS_os_log.signpostsEnabled.getter() & 1;
    }
  }
  else
  {
    static os_signpost_type_t.event.getter();
    return kdebug_is_enabled();
  }
  return result;
}

uint64_t Signpost.traceInterval<A>(object:_:closure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  id v19;
  uint64_t v21;
  _QWORD v22[4];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v23 = a4;
  v22[2] = a3;
  v22[3] = a2;
  v12 = type metadata accessor for OSSignpostID();
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v7[1];
  v16 = *((_BYTE *)v7 + 16);
  v17 = *((_BYTE *)v7 + 17);
  LOBYTE(v13) = *((_BYTE *)v7 + 18);
  v26 = *v7;
  v27 = v15;
  v28 = v16;
  v29 = v17;
  v30 = v13;
  if ((Signpost.isEnabled.getter() & 1) == 0)
    return a5();
  v22[0] = a6;
  v22[1] = a7;
  if (a1)
  {
    v18 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v18 != -1)
      swift_once();
    v19 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
  }
  else
  {
    static OSSignpostID.exclusive.getter();
  }
  static os_signpost_type_t.begin.getter();
  if (one-time initialization token for _signpostLog == -1)
  {
    if ((v17 & 1) != 0)
      goto LABEL_10;
LABEL_14:
    OSSignpostID.rawValue.getter();
    v21 = kdebug_trace();
    goto LABEL_15;
  }
  swift_once();
  if ((v17 & 1) == 0)
    goto LABEL_14;
LABEL_10:
  if ((v23 & 0x100) != 0)
    v21 = os_signpost(_:dso:log:name:signpostID:)();
  else
    v21 = os_signpost(_:dso:log:name:signpostID:_:_:)();
LABEL_15:
  ((void (*)(uint64_t))a5)(v21);
  static os_signpost_type_t.end.getter();
  if ((v17 & 1) != 0)
  {
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    OSSignpostID.rawValue.getter();
    kdebug_trace();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v25);
}

uint64_t Signpost.traceInterval<A>(object:_:_:closure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t (*a6)(void)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v8;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  id v24;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t (*v42)(void);
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  char v53;
  char v54;
  char v55;
  uint64_t v56;

  v43 = a4;
  v44 = a3;
  *(_QWORD *)&v50 = a2;
  v14 = type metadata accessor for OSSignpostID();
  v51 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v41 - v18;
  v20 = v8[1];
  v21 = *((unsigned __int8 *)v8 + 16);
  LODWORD(v18) = *((unsigned __int8 *)v8 + 17);
  v22 = *((_BYTE *)v8 + 18);
  v49 = *v8;
  v52[0] = v49;
  v46 = v20;
  v52[1] = v20;
  v45 = v21;
  v53 = v21;
  v48 = v18;
  v54 = v18;
  v55 = v22;
  if ((Signpost.isEnabled.getter() & 1) == 0)
    return a6();
  v41[0] = a8;
  v41[1] = a7;
  v42 = a6;
  v47 = v19;
  if (a1)
  {
    v23 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v23 != -1)
      swift_once();
    v24 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
  }
  else
  {
    static OSSignpostID.exclusive.getter();
  }
  LOBYTE(v26) = static os_signpost_type_t.begin.getter();
  v27 = a5();
  if (one-time initialization token for _signpostLog != -1)
    goto LABEL_36;
LABEL_9:
  v28 = v47;
  if ((v48 & 1) == 0)
  {
    v30 = (4 * v49) | v26 | 0x14110000;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v16, v47, v14);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v26 = 0;
    v31 = v27 + 32;
    v50 = xmmword_235283260;
    while (1)
    {
      inited = swift_initStackObject();
      v33 = inited;
      *(_OWORD *)(inited + 16) = v50;
      v34 = (_OWORD *)(inited + 32);
      v35 = *(_QWORD *)(v27 + 16);
      if (v26 == v35)
      {
        *(_QWORD *)(inited + 64) = 0;
        *v34 = 0u;
        *(_OWORD *)(inited + 48) = 0u;
      }
      else
      {
        if (v26 >= v35)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          swift_once();
          goto LABEL_9;
        }
        outlined init with copy of AnyTrackedValue(v31 + 40 * v26++, (uint64_t)v34);
      }
      v36 = (_OWORD *)(v33 + 72);
      v37 = *(_QWORD *)(v27 + 16);
      if (v26 == v37)
      {
        *(_QWORD *)(v33 + 104) = 0;
        *v36 = 0u;
        *(_OWORD *)(v33 + 88) = 0u;
      }
      else
      {
        if (v26 >= v37)
          goto LABEL_34;
        outlined init with copy of AnyTrackedValue(v31 + 40 * v26++, (uint64_t)v36);
      }
      v38 = *(_QWORD *)(v27 + 16);
      if (v26 == v38)
      {
        *(_QWORD *)(v33 + 144) = 0;
        *(_OWORD *)(v33 + 112) = 0u;
        *(_OWORD *)(v33 + 128) = 0u;
      }
      else
      {
        if (v26 >= v38)
          goto LABEL_35;
        outlined init with copy of AnyTrackedValue(v31 + 40 * v26++, v33 + 112);
      }
      specialized withKDebugValues(_:_:closure:)(v30, v33, v30, (uint64_t)v16);
      outlined init with copy of CVarArg?(v33 + 112, (uint64_t)v52);
      swift_bridgeObjectRelease();
      if (!v56)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AnyTrackedValue?((uint64_t)v52, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
        v40 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v16, v14);
        v28 = v47;
        ((void (*)(uint64_t))v42)(v40);
        goto LABEL_29;
      }
      outlined destroy of AnyTrackedValue?((uint64_t)v52, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
      if (one-time initialization token for continuation != -1)
        swift_once();
      v39 = __swift_project_value_buffer(v14, (uint64_t)static OSSignpostID.continuation);
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 24))(v16, v39, v14);
    }
  }
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  v29 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v42)(v29);
LABEL_29:
  static os_signpost_type_t.end.getter();
  if ((v48 & 1) != 0)
  {
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    OSSignpostID.rawValue.getter();
    kdebug_trace();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v28, v14);
}

void Signpost.traceEvent(type:object:_:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t (*a6)(uint64_t))
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  _DWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  _BYTE v42[24];
  uint64_t v43;

  v38 = a5;
  v39 = a3;
  LODWORD(v41) = a1;
  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v40 = (char *)v35 - v14;
  if (*((_BYTE *)v6 + 18) != 3)
    return;
  v15 = *v6;
  v36 = v6[1];
  v35[1] = *((unsigned __int8 *)v6 + 16);
  v16 = *((unsigned __int8 *)v6 + 17);
  v37 = v15;
  if (!v16)
  {
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      return;
    goto LABEL_9;
  }
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) != 0)
  {
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
LABEL_9:
      if (a2)
      {
        v17 = one-time initialization token for _signpostLog;
        swift_unknownObjectRetain();
        if (v17 != -1)
          swift_once();
        v18 = (id)_signpostLog;
        v19 = OSSignpostID.init(log:object:)();
      }
      else
      {
        v19 = static OSSignpostID.exclusive.getter();
      }
      v20 = a6(v19);
      if (one-time initialization token for _signpostLog != -1)
        goto LABEL_39;
      while (1)
      {
        if ((v16 & 1) != 0)
        {
          v21 = v40;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
          swift_bridgeObjectRelease();
          return;
        }
        v22 = (4 * v37) | v41 | 0x14110000;
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v40, v9);
        type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
        LOBYTE(v16) = v23;
        v24 = 0;
        v25 = v20 + 32;
        v41 = xmmword_235283260;
        while (1)
        {
          inited = swift_initStackObject();
          v27 = inited;
          *(_OWORD *)(inited + 16) = v41;
          v28 = (_OWORD *)(inited + 32);
          v29 = *(_QWORD *)(v20 + 16);
          if (v24 == v29)
          {
            *(_QWORD *)(inited + 64) = 0;
            *v28 = 0u;
            *(_OWORD *)(inited + 48) = 0u;
            goto LABEL_22;
          }
          if (v24 >= v29)
            break;
          outlined init with copy of AnyTrackedValue(v25 + 40 * v24++, (uint64_t)v28);
LABEL_22:
          v30 = (_OWORD *)(v27 + 72);
          v31 = *(_QWORD *)(v20 + 16);
          if (v24 == v31)
          {
            *(_QWORD *)(v27 + 104) = 0;
            *v30 = 0u;
            *(_OWORD *)(v27 + 88) = 0u;
          }
          else
          {
            if (v24 >= v31)
              goto LABEL_37;
            outlined init with copy of AnyTrackedValue(v25 + 40 * v24++, (uint64_t)v30);
          }
          v32 = *(_QWORD *)(v20 + 16);
          if (v24 == v32)
          {
            *(_QWORD *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
          }
          else
          {
            if (v24 >= v32)
              goto LABEL_38;
            outlined init with copy of AnyTrackedValue(v25 + 40 * v24++, v27 + 112);
          }
          specialized withKDebugValues(_:_:closure:)(v22, v27, v22, (uint64_t)v12);
          outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v42);
          swift_bridgeObjectRelease();
          if (!v43)
          {
            swift_bridgeObjectRelease();
            v34 = *(void (**)(char *, uint64_t))(v10 + 8);
            v34(v40, v9);
            outlined destroy of AnyTrackedValue?((uint64_t)v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
            v34(v12, v9);
            return;
          }
          outlined destroy of AnyTrackedValue?((uint64_t)v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
          if (one-time initialization token for continuation != -1)
            swift_once();
          v33 = __swift_project_value_buffer(v9, (uint64_t)static OSSignpostID.continuation);
          (*(void (**)(char *, uint64_t, uint64_t))(v10 + 24))(v12, v33, v9);
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        swift_once();
      }
    }
  }
}

uint64_t closure #1 in Signpost._primitive(_:log:signpostID:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for OSSignpostID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a3, v5, v7);
  OSSignpostID.rawValue.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v11 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v11 >= 3)
    return kdebug_trace();
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized withKDebugValues(_:_:closure:)(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *i;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  _QWORD *v39;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v39 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v7 = a2 + 32;
    do
    {
      outlined init with copy of CVarArg?(v7, (uint64_t)v38);
      outlined init with copy of CVarArg?((uint64_t)v38, (uint64_t)v35);
      v8 = v36;
      if (v36)
      {
        v9 = v37;
        __swift_project_boxed_opaque_existential_1(v35, v36);
        v10 = CVarArg.kdebugValue(_:)(a1, v8, v9);
        v12 = v11;
        v14 = v13;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
        if (v12)
        {
          v15 = swift_allocObject();
          *(_QWORD *)(v15 + 16) = v12;
          *(_QWORD *)(v15 + 24) = v14;
          v16 = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
        }
        else
        {
          v16 = 0;
          v15 = 0;
        }
      }
      else
      {
        outlined destroy of AnyTrackedValue?((uint64_t)v35, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
        v10 = 0;
        v15 = 0;
        v16 = 1;
      }
      outlined destroy of AnyTrackedValue?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
      v17 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1);
        v17 = v39;
      }
      v19 = v17[2];
      v18 = v17[3];
      v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v17 = v39;
      }
      v17[2] = v20;
      v21 = &v17[3 * v19];
      v21[4] = v10;
      v21[5] = v16;
      v21[6] = v15;
      v7 += 40;
      --v4;
    }
    while (v4);
  }
  else
  {
    v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!v20)
      goto LABEL_22;
  }
  v38[0] = v5;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v5 = v38[0];
  v22 = v17 + 5;
  do
  {
    if (*v22 == 1)
      v23 = 0;
    else
      v23 = *(v22 - 1);
    v38[0] = v5;
    v25 = *(_QWORD *)(v5 + 16);
    v24 = *(_QWORD *)(v5 + 24);
    if (v25 >= v24 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      v5 = v38[0];
    }
    *(_QWORD *)(v5 + 16) = v25 + 1;
    *(_QWORD *)(v5 + 8 * v25 + 32) = v23;
    v22 += 3;
    --v20;
  }
  while (v20);
LABEL_22:
  closure #1 in Signpost._primitive(_:log:signpostID:_:_:)(v5, a3, a4);
  swift_bridgeObjectRelease();
  v26 = v17[2];
  if (v26)
  {
    swift_bridgeObjectRetain();
    for (i = v17 + 6; ; i += 3)
    {
      v29 = *(i - 2);
      v30 = (void (*)(uint64_t))*(i - 1);
      if (v30)
      {
        if (v30 == (void (*)(uint64_t))1)
          goto LABEL_25;
        v28 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(i - 1));
        v30(v28);
      }
      _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v29, (uint64_t)v30);
LABEL_25:
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t CVarArg.kdebugValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v12((char *)&v39 - v13, v3, a2, v10);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _KDebuggableCVarArg);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v42, (uint64_t)&v45);
    v14 = __swift_project_boxed_opaque_existential_1(&v45, v48);
    v15 = *v14;
    v16 = v14[1];
    if (one-time initialization token for moduleName != -1)
      swift_once();
    v17 = v15 == static Signpost.moduleName && v16 == unk_2561B1FF0;
    if (v17 || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v18 & 1) != 0))
    {
      v19 = 0;
    }
    else
    {
      MEMORY[0x24BDAC7A8](v18);
      *((_DWORD *)&v39 - 4) = v6;
      if ((v16 & 0x1000000000000000) != 0 || !(v16 & 0x2000000000000000 | v15 & 0x1000000000000000))
      {
        type metadata accessor for (arg: UInt64, destructor: (())?)();
        _StringGuts._slowWithCString<A>(_:)();
        v19 = v39;
        v26 = v40;
        v27 = v41;
        if (!v40)
          goto LABEL_37;
      }
      else if ((v16 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v42 = v15;
        *((_QWORD *)&v42 + 1) = v16 & 0xFFFFFFFFFFFFFFLL;
        v19 = kdebug_trace_string();
        v32 = swift_allocObject();
        *(_DWORD *)(v32 + 16) = v6;
        *(_QWORD *)(v32 + 24) = v19;
        v27 = swift_allocObject();
        *(_QWORD *)(v27 + 16) = closure #1 in closure #1 in String.kdebugValue(_:)partial apply;
        *(_QWORD *)(v27 + 24) = v32;
        v26 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      }
      else
      {
        if ((v15 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        partial apply for closure #1 in String.kdebugValue(_:)((uint64_t *)&v42);
        v26 = (uint64_t (*)())*((_QWORD *)&v42 + 1);
        v19 = v42;
        v27 = v43;
        v39 = v42;
        if (!*((_QWORD *)&v42 + 1))
          goto LABEL_37;
      }
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v26;
      *(_QWORD *)(v33 + 24) = v27;
    }
LABEL_37:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    return v19;
  }
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  outlined destroy of AnyTrackedValue?((uint64_t)&v42, &lazy cache variable for type metadata for _KDebuggableCVarArg?, &lazy cache variable for type metadata for _KDebuggableCVarArg);
  v20 = MEMORY[0x23B7C7768](a2, a3);
  if (*(_QWORD *)(v20 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, uint64_t))v12)(v8, v3, a2);
    v21 = String.init<A>(describing:)();
    v23 = v22;
    if (one-time initialization token for moduleName != -1)
      swift_once();
    v24 = v21 == static Signpost.moduleName && v23 == unk_2561B1FF0;
    if (v24 || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v25 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    MEMORY[0x24BDAC7A8](v25);
    *((_DWORD *)&v39 - 4) = v6;
    if ((v23 & 0x1000000000000000) != 0 || !(v23 & 0x2000000000000000 | v21 & 0x1000000000000000))
    {
      type metadata accessor for (arg: UInt64, destructor: (())?)();
      _StringGuts._slowWithCString<A>(_:)();
      v30 = (uint64_t (*)())*((_QWORD *)&v42 + 1);
      v19 = v42;
      v31 = v43;
      if (!*((_QWORD *)&v42 + 1))
        goto LABEL_12;
    }
    else
    {
      v29.n128_f64[0] = MEMORY[0x24BDAC7A8](v28);
      *(&v39 - 2) = (uint64_t)partial apply for closure #1 in String.kdebugValue(_:);
      *(&v39 - 1) = (uint64_t)(&v39 - 4);
      if ((v23 & 0x2000000000000000) != 0)
      {
        v45 = v21;
        v46 = v23 & 0xFFFFFFFFFFFFFFLL;
        v19 = kdebug_trace_string();
        v35 = swift_allocObject();
        *(_DWORD *)(v35 + 16) = v6;
        *(_QWORD *)(v35 + 24) = v19;
        v31 = swift_allocObject();
        *(_QWORD *)(v31 + 16) = partial apply for closure #1 in closure #1 in String.kdebugValue(_:);
        *(_QWORD *)(v31 + 24) = v35;
        v30 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      }
      else
      {
        if ((v21 & 0x1000000000000000) != 0)
        {
          ((void (*)(uint64_t *__return_ptr, uint64_t, __n128))partial apply for closure #1 in String.kdebugValue(_:))(&v45, (v23 & 0xFFFFFFFFFFFFFFFLL) + 32, v29);
        }
        else
        {
          v37 = _StringObject.sharedUTF8.getter();
          ((void (*)(uint64_t *__return_ptr, uint64_t, __n128))*(&v39 - 2))(&v45, v37, v38);
        }
        v19 = v45;
        v30 = (uint64_t (*)())v46;
        v31 = v47;
        *(_QWORD *)&v42 = v45;
        if (!v46)
          goto LABEL_12;
      }
    }
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = v30;
    *(_QWORD *)(v36 + 24) = v31;
    swift_bridgeObjectRelease();
    return v19;
  }
  v19 = *(_QWORD *)(v20 + 32);
LABEL_12:
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t closure #1 in String.kdebugValue(_:)@<X0>(int a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = kdebug_trace_string();
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = closure #1 in closure #1 in String.kdebugValue(_:)partial apply;
  *(_QWORD *)(result + 24) = v5;
  *a2 = v4;
  a2[1] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[2] = result;
  return result;
}

uint64_t one-time initialization function for continuation()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignpostID();
  __swift_allocate_value_buffer(v0, static OSSignpostID.continuation);
  __swift_project_value_buffer(v0, (uint64_t)static OSSignpostID.continuation);
  return OSSignpostID.init(_:)();
}

unint64_t instantiation function for generic protocol witness table for String(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Signpost(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 19))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Signpost()
{
  return &type metadata for Signpost;
}

uint64_t storeEnumTagSinglePayload for Signpost.Stability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234BFA5E0 + 4 * byte_23528B9F5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234BFA614 + 4 * byte_23528B9F0[v4]))();
}

uint64_t sub_234BFA614(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234BFA61C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234BFA624);
  return result;
}

uint64_t sub_234BFA630(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234BFA638);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234BFA63C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234BFA644(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Signpost.Stability()
{
  return &unk_25064E478;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Signpost.Style(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Signpost.Style(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t destructiveInjectEnumTag for Signpost.Style(uint64_t result, char a2)
{
  *(_BYTE *)(result + 17) = a2 & 1;
  return result;
}

void *type metadata accessor for Signpost.Style()
{
  return &unk_25064E3E8;
}

unint64_t lazy protocol witness table accessor for type Signpost.Stability and conformance Signpost.Stability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Signpost.Stability and conformance Signpost.Stability;
  if (!lazy protocol witness table cache variable for type Signpost.Stability and conformance Signpost.Stability)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Signpost.Stability, &unk_25064E478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signpost.Stability and conformance Signpost.Stability);
  }
  return result;
}

uint64_t partial apply for closure #1 in String.kdebugValue(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in String.kdebugValue(_:)(*(_DWORD *)(v1 + 16), a1);
}

uint64_t sub_234BFA784()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234BFA7A8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in String.kdebugValue(_:)()
{
  return kdebug_trace_string();
}

uint64_t sub_234BFA7CC()
{
  return swift_deallocObject();
}

uint64_t sub_234BFA7DC()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t closure #1 in String.kdebugValue(_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in String.kdebugValue(_:)(a1);
}

uint64_t Text.textVariant<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  char v18;
  uint64_t v19;

  (*(void (**)(uint64_t, uint64_t))(a6 + 8))(a5, a6);
  v17[0] = a1;
  v17[1] = a2;
  v18 = a3 & 1;
  v19 = a4;
  v15 = type metadata accessor for _TextVariantPreference(0, a5, a6, v14);
  return _TextVariantPreference.body<A>(_:)((uint64_t)v17, v15, (uint64_t)&type metadata for Text, (uint64_t)&protocol witness table for Text, a7);
}

uint64_t _TextVariantPreference.body<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];

  v32 = a2;
  v33 = a1;
  v35 = a5;
  v31 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - v10;
  v13 = type metadata accessor for ModifiedContent(0, a3, (uint64_t)&type metadata for VariantThatFitsModifier, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v30 - v18;
  v21 = type metadata accessor for _ConditionalContent(0, v13, a3, v20);
  v34 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v30 - v23;
  if (*(ValueMetadata **)(v32 + 16) == &type metadata for SizeDependentTextVariant)
  {
    View.modifier<A>(_:)(v22, a3, &type metadata for VariantThatFitsModifier, a4);
    v36[0] = a4;
    v36[1] = &protocol witness table for VariantThatFitsModifier;
    v27 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v13, v36);
    static ViewBuilder.buildExpression<A>(_:)(v16, v13, v27);
    v28 = *(void (**)(char *, uint64_t))(v14 + 8);
    v28(v16, v13);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v19, v13, (uint64_t)v16);
    v28(v19, v13);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v16, v13, a3, v27, (uint64_t)v24);
    v28(v16, v13);
  }
  else
  {
    static ViewBuilder.buildExpression<A>(_:)(v33, a3, a4);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, a3, (uint64_t)v8);
    v25 = *(void (**)(char *, uint64_t))(v31 + 8);
    v25(v11, a3);
    v39[0] = a4;
    v39[1] = &protocol witness table for VariantThatFitsModifier;
    v26 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v13, v39);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v8, v13, a3, v26, (uint64_t)v24);
    v25(v8, a3);
  }
  v38[0] = a4;
  v38[1] = &protocol witness table for VariantThatFitsModifier;
  v37[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v13, v38);
  v37[1] = a4;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21, v37);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v21, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v24, v21);
}

uint64_t type metadata accessor for _TextVariantPreference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TextVariantPreference);
}

uint64_t TextSizeVariant.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TextSizeVariant.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*TextSizeVariant.rawValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::TextSizeVariant __swiftcall TextSizeVariant.init(rawValue:)(SwiftUI::TextSizeVariant rawValue)
{
  SwiftUI::TextSizeVariant *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static TextSizeVariant.regular.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static TextSizeVariant.compact.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static TextSizeVariant.small.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static TextSizeVariant.tiny.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

BOOL static TextSizeVariant.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

void TextSizeVariant.nextUp.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  if (*v1)
  {
    v3 = v2 - 1;
    if (!__OFSUB__(v2, 1))
      goto LABEL_6;
    __break(1u);
  }
  v3 = 0;
LABEL_6:
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 == 0;
}

void TextSizeVariant.nextDown.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  if (__OFADD__(*v1, 1))
    __break(1u);
  else
    *a1 = *v1 + 1;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance TextSizeVariant(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance TextSizeVariant(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance TextSizeVariant(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance TextSizeVariant(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t TextSizeVariant.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TextSizeVariant.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TextSizeVariant@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TextSizeVariant(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t dispatch thunk of TextVariantPreference._preference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for FixedTextVariant()
{
  return &type metadata for FixedTextVariant;
}

ValueMetadata *type metadata accessor for SizeDependentTextVariant()
{
  return &type metadata for SizeDependentTextVariant;
}

ValueMetadata *type metadata accessor for TextSizeVariant()
{
  return &type metadata for TextSizeVariant;
}

uint64_t type metadata completion function for SizeFittingTextCache()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t StickyTextSizeFittingLogic.suggestedVariant(for:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  char v5;
  double v6;
  double v7;
  double v8;
  char v9;

  if ((*(_BYTE *)(v2 + 41) & 1) != 0)
    goto LABEL_19;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(double *)(v2 + 32);
  v5 = *(_BYTE *)(v2 + 1);
  v6 = *(double *)(result + 16);
  if ((*(_BYTE *)v2 & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 1) & 1) != 0)
      goto LABEL_13;
    goto LABEL_14;
  }
  v7 = *(double *)result;
  v8 = *(double *)(v2 + 16);
  if (*(_BYTE *)(result + 8))
    v7 = INFINITY;
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    v8 = INFINITY;
  if (v7 > v8)
    v5 = 1;
  if ((v5 & 1) != 0)
  {
    if (v7 <= v8)
      goto LABEL_13;
LABEL_19:
    v3 = 0;
    v9 = 1;
    goto LABEL_20;
  }
LABEL_14:
  if (*(_BYTE *)(result + 24))
    v6 = INFINITY;
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
    v4 = INFINITY;
  if (v6 > v4)
    goto LABEL_19;
LABEL_13:
  v9 = 0;
LABEL_20:
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v9;
  return result;
}

uint64_t _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v4 = *(double *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(double *)(v3 + 16);
  if ((a2 & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return 1;
    goto LABEL_11;
  }
  v8 = *(double *)v3;
  v9 = *(double *)a1;
  if (*(_BYTE *)(v3 + 8))
    v8 = INFINITY;
  if (*(_BYTE *)(a1 + 8))
    v9 = INFINITY;
  result = v8 <= v9;
  if (v8 <= v9 && (a3 & 1) == 0)
  {
LABEL_11:
    if (*(_BYTE *)(v3 + 24))
      v6 = INFINITY;
    if (v5)
      v4 = INFINITY;
    return v6 <= v4;
  }
  return result;
}

Swift::Void __swiftcall StickyTextSizeFittingLogic.onInvalidation(of:)(SwiftUI::TextSizeVariant of)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 41) & 1) == 0 && *(_QWORD *)of.rawValue == *(_QWORD *)(v1 + 8))
  {
    *(_BYTE *)(v1 + 40) = 0;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_BYTE *)(v1 + 41) = 1;
  }
}

void SizeFittingTextCache.CacheEntry.init(resolver:)()
{
  type metadata accessor for SizeFittingTextCache.CacheEntry();
}

uint64_t sub_234BFB25C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;

  v5 = v3 + *(int *)(a1 + 52);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
  *(_BYTE *)(v3 + *(int *)(a1 + 56)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3, v2, v1);
}

void SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *);
  uint64_t v28;

  v27 = a4;
  v9 = v8;
  v28 = a7;
  v25 = a8;
  v26 = a5;
  v23 = a3;
  v24 = a2;
  v12 = a6[4];
  v13 = a6[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(255, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v19 = (char *)&v23 - v18;
  v21 = *(int *)(v20 + 48);
  v22 = SizeFittingTextCache.CacheEntry.result(for:)((char *)&v23 - v18, a1, (uint64_t)a6);
  v19[v21] = v22 & 1;
  if ((v22 & 1) != 0)
    v24(v22);
  v27(v19);
  $defer #1 <A, B><A1>() in SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(v9, (uint64_t)v19, v13, a6[3], v28, v12, a6[5]);
}

uint64_t sub_234BFB458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t SizeFittingTextCache.CacheEntry.result(for:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v34 = a2;
  v35 = a1;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for SizeFittingTextCacheValue(255, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v10 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v30 - v18;
  v20 = v3 + *(int *)(a3 + 52);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v20, v11, v17);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v10);
  v32 = v6;
  if (v21 == 1)
  {
    v22 = v34;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v23 = v35;
    v24 = v12;
    v25 = v33;
  }
  else
  {
    v30 = v11;
    v31 = v12;
    v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v26(v19, v14, v10);
    v25 = v33;
    v27 = v34;
    if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 32))(v34, *(unsigned __int8 *)(v3 + *(int *)(a3 + 56)), v6, v33) & 1) == 0)
    {
      v23 = v35;
      v26(v35, v19, v10);
      v28 = 0;
      v11 = v30;
      v24 = v31;
      goto LABEL_7;
    }
    v22 = v27;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v10);
    v23 = v35;
    v11 = v30;
    v24 = v31;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40))(v22, v32, v25);
  v28 = 1;
LABEL_7:
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v20, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v20, v23, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v10);
  *(_BYTE *)(v3 + *(int *)(a3 + 56)) = 0;
  return v28;
}

void $defer #1 <A, B><A1>() in SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[6];

  v21[1] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for SizeFittingTextCacheValue(255, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = type metadata accessor for Optional();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v21 - v18;
  v20 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)v21 - v18, a2, v15, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, v15);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a6;
  v21[5] = a7;
  type metadata accessor for SizeFittingTextCache.CacheEntry();
}

uint64_t sub_234BFB7E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 40))(*(_QWORD *)(v4 - 120) + *(int *)(a1 + 52), v2, v1);
}

void SizeFittingTextCache.CacheEntry.narrowerVariant.getter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)(v3 + 32) + 48))(v1, *(_QWORD *)(v3 + 32), v2);
  SizeFittingTextCache.CacheEntry.init(resolver:)();
}

void sub_234BFB89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(v0 + 56)) = *(_BYTE *)(v1 + *(int *)(v0 + 56));
}

uint64_t specialized SizeFittingTextCache.input.setter(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  if ((a2 & 1) != 0)
  {
    v9 = v2 + 5;
    swift_beginAccess();
    v10 = *(_QWORD *)(v2[5] + 16);
    if (v10)
    {
      swift_beginAccess();
      v11 = *v9;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v9 = v11;
      v20 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_10:
        v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      for (i = 0; i != v10; ++i)
      {
        *v9 = v11;
        if (i >= *(_QWORD *)(v11 + 16))
        {
          __break(1u);
          goto LABEL_10;
        }
        type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
        *(_BYTE *)(v11
                 + ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))
                 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * i
                 + *(int *)(v14 + 56)) = 1;
        v11 = *v9;
      }
      swift_endAccess();
      v6 = v20;
    }
  }
  swift_beginAccess();
  v15 = v2[12];
  v16 = v2[13];
  v17 = v2[14];
  v18 = v2[15];
  v2[12] = v3;
  v2[13] = v4;
  v2[14] = v5;
  v2[15] = v6;
  v2[16] = v8;
  v2[17] = v7;
  outlined consume of Text?(v15, v16, v17, v18);
  swift_release();
  return swift_release();
}

uint64_t specialized SizeFittingTextCache.input.setter(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD **v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v5 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for (value: ResolvableStringResolutionContext, changed: Bool)();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v25[-v13];
  outlined init with take of ResolvableStringResolutionContext(a1, (uint64_t)&v25[-v13]);
  v14[*(int *)(v9 + 48)] = a2;
  v15 = *(int *)(v9 + 48);
  outlined init with copy of TypesettingLanguage((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v11[v15] = a2;
  outlined destroy of TypesettingConfiguration((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  if ((a2 & 1) != 0)
  {
    v16 = (_QWORD **)(v2 + 5);
    swift_beginAccess();
    v17 = *(_QWORD *)(v2[5] + 16);
    if (v17)
    {
      swift_beginAccess();
      v18 = *v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v16 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_10:
        v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v20 = 0;
      v21 = 12;
      do
      {
        *v16 = v18;
        if (v20 >= v18[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        ++v20;
        LOBYTE(v18[v21]) = 1;
        v18 = *v16;
        v21 += 9;
      }
      while (v17 != v20);
      swift_endAccess();
    }
  }
  v22 = *(int *)(v9 + 48);
  outlined init with take of ResolvableStringResolutionContext((uint64_t)v14, (uint64_t)v11);
  v11[v22] = a2 & 1;
  outlined init with take of ResolvableStringResolutionContext((uint64_t)v11, (uint64_t)v7);
  v23 = (uint64_t)v2 + *(_QWORD *)(*v2 + 144);
  swift_beginAccess();
  outlined assign with take of ResolvableStringResolutionContext((uint64_t)v7, v23);
  return swift_endAccess();
}

uint64_t specialized SizeFittingTextCache.withValue<A>(for:compute:)(_QWORD *a1, char a2, unint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29;
  char v30;
  char v31;

  v10 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2 & 1;
  LOBYTE(v28[0]) = v13;
  v31 = a4 & 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)((uint64_t)a1, v13, a3, a4 & 1, (uint64_t)&v29);
  if ((v30 & 1) != 0)
  {
    swift_beginAccess();
    swift_retain();
    LOBYTE(v28[0]) = v13;
    v31 = a4 & 1;
    LOBYTE(v27) = a4 & 1;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(a1, v13, *(double *)&a3, a4 & 1, a5 + 2, (uint64_t)a1, v13, v28, a3, v27, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    v14 = v28[0];
  }
  else
  {
    v14 = v29;
    v28[0] = v29;
  }
  v15 = (uint64_t)a5 + *(_QWORD *)(*a5 + 144);
  swift_beginAccess();
  outlined init with copy of TypesettingLanguage(v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  swift_beginAccess();
  v16 = (_QWORD *)a5[5];
  result = swift_isUniquelyReferenced_nonNull_native();
  a5[5] = v16;
  if ((result & 1) != 0)
  {
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
  v16 = (_QWORD *)result;
  a5[5] = result;
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_13;
LABEL_6:
  if (v14 >= v16[2])
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v18 = &v16[9 * v14];
  v19 = v18 + 4;
  v20 = v18[9];
  v21 = v18[11];
  if (v20 && *((_BYTE *)v18 + 96) != 1)
  {
    v22 = v18[9];
    v24 = v18[10];
  }
  else
  {
    v22 = DynamicTextView.DynamicTextHelper.value(for:)((uint64_t)v12);
    v24 = v23;
    v26 = v25;
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v20);
    v21 = v26;
  }
  *((_BYTE *)v19 + 64) = 0;
  v19[5] = v22;
  v19[6] = v24;
  v19[7] = v21;
  swift_retain_n();
  swift_retain();
  swift_retain();
  outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  swift_endAccess();
  outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v22);
  return v22;
}

void SizeFittingTextCache.withValue<A>(for:compute:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];

  v6 = v5;
  v25 = a3;
  v24 = a2;
  v27 = a5;
  v9 = *v6;
  v10 = *(_QWORD *)(*v6 + 96);
  v11 = *(_QWORD *)(*v6 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v23 - v14;
  v16 = *((_BYTE *)a1 + 8);
  v17 = a1[2];
  v18 = *((_BYTE *)a1 + 24);
  v36 = *a1;
  LOBYTE(v37) = v16;
  v38 = v17;
  LOBYTE(v39) = v18;
  SizeFittingTextCache.sizeVariant(for:)((uint64_t)&v36, v40);
  v23 = v40[0];
  v19 = (uint64_t)v6 + *(_QWORD *)(*v6 + 144);
  swift_beginAccess();
  v26 = v13;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v28 = AssociatedTypeWitness;
  v20(v15, v19, AssociatedTypeWitness);
  v21 = *(_QWORD *)(v9 + 88);
  v29 = v11;
  v30 = v21;
  v31 = a4;
  v32 = v10;
  v33 = *(_QWORD *)(v9 + 104);
  v22 = v33;
  v34 = v24;
  v35 = v25;
  swift_beginAccess();
  v36 = v11;
  v37 = v21;
  v38 = v10;
  v39 = v22;
  type metadata accessor for SizeFittingTextCache.CacheEntry();
}

void sub_234BFC064(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  Array._checkSubscript_mutating(_:)(*(_QWORD *)(v3 - 288));
  SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(v2, (void (*)(uint64_t))_ViewInputs.base.modify, 0, (void (*)(char *))partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:), v3 - 240, a1, v1, *(_QWORD *)(v3 - 256));
}

uint64_t specialized SizeFittingTextCache.withResolver<A>(for:compute:)@<X0>(_QWORD *a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27[3];
  uint64_t v28;
  char v29;
  char v30;

  v25 = a7;
  v26 = a6;
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - v15;
  v17 = a2 & 1;
  LOBYTE(v27[0]) = v17;
  v18 = a4 & 1;
  v30 = a4 & 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)((uint64_t)a1, v17, a3, a4 & 1, (uint64_t)&v28);
  if ((v29 & 1) != 0)
  {
    a4 = a5 + 16;
    swift_beginAccess();
    swift_retain();
    LOBYTE(v27[0]) = v17;
    v30 = v18;
    LOBYTE(v24) = v18;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(a1, v17, *(double *)&a3, v18, (_QWORD *)(a5 + 16), (uint64_t)a1, v17, (uint64_t *)v27, a3, v24, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    v19 = v27[0];
  }
  else
  {
    v19 = v28;
    v27[0] = v28;
  }
  v20 = (unint64_t *)(a5 + 40);
  swift_beginAccess();
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v21 = *(_QWORD *)(a5 + 40);
  if (v19 >= *(_QWORD *)(v21 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
    *v20 = v14;
    goto LABEL_8;
  }
  v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  a4 = *(_QWORD *)(v14 + 72) * v19;
  outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v21 + v17 + a4, (uint64_t)v16);
  closure #2 in SizeFittingTextFilter.updateValue()((uint64_t)v16, v26);
  if (!v7)
    goto LABEL_10;
  swift_beginAccess();
  v14 = *v20;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v20 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_16;
LABEL_8:
  if (v19 < *(_QWORD *)(v14 + 16))
  {
LABEL_13:
    outlined assign with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v16, v14 + v17 + a4);
    swift_endAccess();
    return outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v16);
  }
  __break(1u);
LABEL_10:
  swift_beginAccess();
  v14 = *v20;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v20 = v14;
  if ((result & 1) == 0)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
    v14 = result;
    *v20 = result;
  }
  if (v19 < *(_QWORD *)(v14 + 16))
    goto LABEL_13;
  __break(1u);
  return result;
}

uint64_t specialized SizeFittingTextCache.withResolver<A>(for:compute:)(_QWORD *a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v11;
  double v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41[3];
  unint64_t v42;
  char v43;
  char v44;
  int v45;

  v16 = *(double *)&a3;
  v18 = a2 & 1;
  LOBYTE(v41[0]) = a2 & 1;
  v19 = a4 & 1;
  v44 = a4 & 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)((uint64_t)a1, v18, a3, a4 & 1, (uint64_t)&v42);
  if ((v43 & 1) != 0)
  {
    swift_beginAccess();
    swift_retain();
    LOBYTE(v41[0]) = v18;
    v44 = v19;
    LOBYTE(v34) = v19;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(a1, v18, v16, v19, (_QWORD *)(a5 + 16), (uint64_t)a1, v18, (uint64_t *)v41, *(unint64_t *)&v16, v34, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    v20 = v41[0];
  }
  else
  {
    v20 = v42;
  }
  v21 = (uint64_t *)(a5 + 40);
  swift_beginAccess();
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = *(_QWORD *)(a5 + 40);
  if (v20 >= *(_QWORD *)(v22 + 16))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a6);
    a6 = result;
    *v21 = result;
    goto LABEL_11;
  }
  v35 = 72 * v20;
  v23 = v22 + 72 * v20;
  v24 = *(_QWORD *)(v23 + 32);
  v10 = *(_QWORD *)(v23 + 40);
  v11 = *(_QWORD *)(v23 + 48);
  v26 = *(_QWORD *)(v23 + 56);
  v25 = *(_QWORD *)(v23 + 64);
  v27 = *(_QWORD *)(v23 + 72);
  v28 = *(double *)(v23 + 80);
  v29 = *(_QWORD *)(v23 + 88);
  v45 = *(unsigned __int8 *)(v23 + 96);
  v30 = a9;
  if ((~*(_QWORD *)&a9 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a9 & 0xFFFFFFFFFFFFFLL) != 0)
    v30 = 0.0;
  v31 = a10;
  if ((~*(_QWORD *)&a10 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a10 & 0xFFFFFFFFFFFFFLL) != 0)
    v31 = 0.0;
  v37 = v25;
  *(_QWORD *)(a6 + 56) = v25;
  *(double *)(a6 + 64) = v30;
  *(_QWORD *)(a6 + 72) = ((~*(_QWORD *)&a9 & 0x7FF0000000000000) == 0) & ((*(_QWORD *)&a9 & 0xFFFFFFFFFFFFFLL) != 0);
  *(double *)(a6 + 80) = v31;
  *(_WORD *)(a6 + 88) = (~*(_QWORD *)&a10 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a10 & 0xFFFFFFFFFFFFFLL) != 0;
  swift_beginAccess();
  a6 = *v21;
  swift_retain();
  swift_retain();
  outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v27);
  v40 = v24;
  swift_retain();
  v38 = v26;
  swift_retain();
  v39 = v27;
  v16 = v28;
  v19 = v29;
  outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v27);
  result = swift_isUniquelyReferenced_nonNull_native();
  *v21 = a6;
  if ((result & 1) == 0)
    goto LABEL_15;
LABEL_11:
  if (v20 >= *(_QWORD *)(a6 + 16))
  {
    __break(1u);
  }
  else
  {
    v33 = a6 + v35;
    v36 = *(_QWORD *)(a6 + v35 + 72);
    *(_QWORD *)(v33 + 32) = v40;
    *(_QWORD *)(v33 + 40) = v10;
    *(_QWORD *)(v33 + 48) = v11;
    *(_QWORD *)(v33 + 56) = v38;
    *(_QWORD *)(v33 + 64) = v37;
    *(_QWORD *)(v33 + 72) = v39;
    *(double *)(v33 + 80) = v16;
    *(_QWORD *)(v33 + 88) = v19;
    *(_BYTE *)(v33 + 96) = v45;
    swift_endAccess();
    swift_release();
    swift_release();
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v36);
    swift_release();
    swift_release();
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v39);
    return swift_release();
  }
  return result;
}

uint64_t SizeFittingTextCache.sizeVariant(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v3;
  char v4;
  double v5;
  char v6;
  uint64_t result;
  double v8;
  char v9;
  double v10;
  char v11;
  uint64_t v12;
  char v13;

  v3 = *(double *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v8 = *(double *)a1;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  result = SizeFittingTextCache.suggestedVariant(for:)((uint64_t)&v8, &v12);
  if ((v13 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](result);
    swift_beginAccess();
    LOBYTE(v12) = v4;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(v3, v4, v5, v6, (unint64_t (*)(uint64_t *__return_ptr, uint64_t *, unint64_t))partial apply for closure #1 in SizeFittingTextCache.sizeVariant(for:), a2);
    return swift_endAccess();
  }
  else
  {
    *a2 = v12;
  }
  return result;
}

void closure #1 in SizeFittingTextCache.sizeVariant(for:)(uint64_t *a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _BYTE v21[32];

  v6 = (_QWORD *)*a2;
  if (*((_BYTE *)a1 + 8))
    v7 = 0;
  else
    v7 = *a1;
  v20 = v7;
  v8 = v6[11];
  v12 = v6[10];
  v13 = v8;
  v10 = v6[12];
  v9 = v6[13];
  v14 = v10;
  v15 = v9;
  v16 = a3;
  v17 = a4 & 1;
  v18 = a5;
  v19 = a6 & 1;
  SizeFittingTextCache.withValue<A>(for:onChange:compute:)((uint64_t)_ViewInputs.base.modify, 0, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v11, (uint64_t)v21);
}

uint64_t sub_234BFC8CC(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[96];

  if (*(_BYTE *)(v7 - 112) != 1)
  {
    if (!__OFADD__(v6, 1))
    {
      *(_QWORD *)(v7 - 72) = v6 + 1;
      specialized getter of narrowerVariantsMightExist #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)();
    }
    __break(1u);
    JUMPOUT(0x234BFCB74);
  }
  if (v6 >= 1)
  {
    *(_QWORD *)(v7 - 168) = v1 - 1;
    MEMORY[0x24BDAC7A8](result);
    v8 = *(_QWORD *)(v7 - 288);
    *(_QWORD *)&v10[-64] = *(_QWORD *)(v7 - 280);
    *(_QWORD *)&v10[-56] = v8;
    v9 = *(_QWORD *)(v7 - 304);
    *(_QWORD *)&v10[-48] = *(_QWORD *)(v7 - 296);
    *(_QWORD *)&v10[-40] = v9;
    *(_QWORD *)&v10[-32] = v5;
    v10[-24] = v4 & 1;
    *(_QWORD *)&v10[-16] = v3;
    v10[-8] = v2 & 1;
    SizeFittingTextCache.withValue<A>(for:onChange:compute:)((uint64_t)_ViewInputs.base.modify, 0, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)&v10[-80], v7 - 112);
  }
  **(_QWORD **)(v7 - 312) = v6;
  return result;
}

BOOL specialized SizeFittingTextCacheValue.fits(_:)(unint64_t a1, char a2, unint64_t a3, char a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  double v17;
  double v18;
  __n128 v19;
  __n128 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double (*v24)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _QWORD v31[8];
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  char v37;
  _OWORD v38[2];
  char v39;
  _OWORD v40[2];
  char v41;

  v7 = v6;
  v12 = *(_BYTE **)v6;
  if ((a2 & 1) != 0)
  {
    if ((a4 & 1) != 0)
    {
      swift_beginAccess();
      return 1;
    }
    a5.n128_u64[0] = 0x7FF0000000000000;
  }
  else
  {
    a5.n128_u64[0] = a1;
    if ((a4 & 1) != 0)
    {
      a6.n128_u64[0] = 0x7FF0000000000000;
      goto LABEL_8;
    }
  }
  a6.n128_u64[0] = a3;
LABEL_8:
  memset(v40, 0, sizeof(v40));
  v41 = 1;
  (*(void (**)(_QWORD *__return_ptr, _OWORD *, __n128, __n128))(*(_QWORD *)v12 + 256))(v31, v40, a5, a6);
  if ((v32 & 1) != 0)
    return 0;
  swift_beginAccess();
  if ((v12[96] & 1) != 0)
  {
    if ((a4 & 1) == 0)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v14 = *(_QWORD *)(v6 + 16);
      if (v14)
      {
        v33 = *(_QWORD *)(v7 + 8);
        v16 = *(void (**)(_QWORD))(*(_QWORD *)v14 + 104);
        swift_retain();
        swift_retain();
        LOBYTE(v38[0]) = a2 & 1;
        v16(a1);
        v18 = v17;
        swift_release();
        swift_release();
        if (v18 > *(double *)&a3)
          goto LABEL_20;
      }
      else
      {
        v33 = a1;
        v34 = a2 & 1;
        v35 = 0;
        v36 = 1;
        (*(void (**)(unint64_t *))(*(_QWORD *)v15 + 224))(&v33);
        v18 = v20.n128_f64[0];
        if (v20.n128_f64[0] > *(double *)&a3)
        {
LABEL_20:
          v26 = 0;
          v20.n128_f64[0] = v18 + -1.0;
          v21 = *(double *)&a1;
          v19.n128_u64[0] = a1;
          goto LABEL_23;
        }
      }
    }
    return 1;
  }
  if ((a2 & 1) != 0)
    return 1;
  v21 = *(double *)&a1;
  v23 = *(_QWORD *)(v6 + 8);
  v22 = *(_QWORD *)(v6 + 16);
  if (v22)
  {
    v33 = *(_QWORD *)(v7 + 8);
    v24 = *(double (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v22 + 104);
    swift_retain();
    swift_retain();
    LOBYTE(v38[0]) = 1;
    v25 = v24(0, 1, a3, a4 & 1, &v33);
    swift_release();
    swift_release();
    if (v25 <= v21)
      return 1;
  }
  else
  {
    v33 = 0;
    v34 = 1;
    v35 = a3;
    v36 = a4 & 1;
    v25 = (*(double (**)(unint64_t *))(*(_QWORD *)v23 + 224))(&v33);
    if (v25 <= v21)
      return 1;
  }
  v26 = a4 & 1;
  v19.n128_f64[0] = v25 + -1.0;
  v20.n128_u64[0] = a3;
LABEL_23:
  v27 = INFINITY;
  if ((a2 & 1) != 0)
    v28 = INFINITY;
  else
    v28 = v19.n128_f64[0];
  if ((a2 & 1) == 0)
    v27 = v21;
  if (v28 <= v27)
  {
    v29 = *(double *)&a3;
    v30 = v26 ? INFINITY : v20.n128_f64[0];
    if ((a4 & 1) != 0)
      v29 = INFINITY;
    if (v30 <= v29)
      return 1;
  }
  if ((a2 & 1) != 0)
  {
    if ((v26 & 1) != 0)
      return 1;
    v19.n128_u64[0] = 0x7FF0000000000000;
  }
  else if ((v26 & 1) != 0)
  {
    v20.n128_u64[0] = 0x7FF0000000000000;
  }
  memset(v38, 0, sizeof(v38));
  v39 = 1;
  (*(void (**)(unint64_t *__return_ptr, _OWORD *, __n128, __n128))(*(_QWORD *)v12 + 256))(&v33, v38, v19, v20);
  return (v37 & 1) == 0;
}

BOOL SizeFittingTextCacheValue.fits(_:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  _BYTE **v4;
  double v6;
  int v7;
  double v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  __n128 v12;
  __n128 v13;
  int v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  _QWORD v21[8];
  char v22;
  double v23;
  char v24;
  double v25;
  char v26;
  char v27;
  _BYTE v28[48];
  _BYTE v29[64];

  v6 = *(double *)a1;
  v7 = *(unsigned __int8 *)(a1 + 8);
  v8 = *(double *)(a1 + 16);
  v9 = *(unsigned __int8 *)(a1 + 24);
  v10 = *v4;
  if ((v7 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      swift_beginAccess();
      return 1;
    }
    a3.n128_u64[0] = 0x7FF0000000000000;
  }
  else
  {
    a3.n128_u64[0] = *(_QWORD *)a1;
    if ((v9 & 1) != 0)
    {
      a4.n128_u64[0] = 0x7FF0000000000000;
      goto LABEL_8;
    }
  }
  a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
LABEL_8:
  memset(v29, 0, 32);
  v29[32] = 1;
  (*(void (**)(_QWORD *__return_ptr, _BYTE *, __n128, __n128))(*(_QWORD *)v10 + 256))(v21, v29, a3, a4);
  if ((v22 & 1) != 0)
    return 0;
  swift_beginAccess();
  if ((v10[96] & 1) != 0)
  {
    v11 = 1;
    if ((v9 & 1) != 0)
      return v11;
    v23 = v6;
    v24 = v7;
    v25 = 0.0;
    v26 = 1;
    v12.n128_f64[0] = (*(double (**)(double *, uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 48))(&v23, 1, *(_QWORD *)(a2 + 16));
    if (v12.n128_f64[0] <= v8)
      return v11;
    v14 = 0;
    v13.n128_f64[0] = v12.n128_f64[0] + -1.0;
    v15 = v6;
    v12.n128_f64[0] = v6;
  }
  else
  {
    v11 = 1;
    if ((v7 & 1) != 0)
      return v11;
    v15 = v6;
    v23 = 0.0;
    v24 = 1;
    v25 = v8;
    v26 = v9;
    v12.n128_f64[0] = (*(double (**)(double *, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 48))(&v23, 0, *(_QWORD *)(a2 + 16));
    if (v12.n128_f64[0] <= v6)
      return v11;
    v12.n128_f64[0] = v12.n128_f64[0] + -1.0;
    v13.n128_f64[0] = v8;
    v14 = v9;
  }
  v17 = INFINITY;
  if (v7)
    v18 = INFINITY;
  else
    v18 = v12.n128_f64[0];
  if (!v7)
    v17 = v15;
  if (v18 > v17)
    goto LABEL_30;
  v19 = v8;
  if (v14)
    v20 = INFINITY;
  else
    v20 = v13.n128_f64[0];
  if (v9)
    v19 = INFINITY;
  if (v20 > v19)
  {
LABEL_30:
    if ((v7 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        return v11;
      v12.n128_u64[0] = 0x7FF0000000000000;
    }
    else if ((v14 & 1) != 0)
    {
      v13.n128_u64[0] = 0x7FF0000000000000;
    }
    memset(v28, 0, 32);
    v28[32] = 1;
    (*(void (**)(double *__return_ptr, _BYTE *, __n128, __n128))(*(_QWORD *)v10 + 256))(&v23, v28, v12, v13);
    return (v27 & 1) == 0;
  }
  return v11;
}

void specialized getter of narrowerVariantsMightExist #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)()
{
  swift_beginAccess();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  type metadata accessor for SizeFittingTextCache.CacheEntry();
}

_QWORD *specialized ClosestFitCache.callAsFunction(for:makeValue:)@<X0>(_QWORD *a1@<X0>, int a2@<W1>, double a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X6>, int a7@<W7>, uint64_t *a8@<X8>, unint64_t a9, char a10)
{
  uint64_t v11;

  LOBYTE(v11) = a10;
  return specialized ClosestFitCache.callAsFunction(for:makeValue:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, v11, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
}

_QWORD *specialized ClosestFitCache.callAsFunction(for:makeValue:)@<X0>(_QWORD *result@<X0>, int a2@<W1>, double a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X6>, int a7@<W7>, uint64_t *a8@<X8>, unint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  char v24;
  double v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  uint64_t v30;
  _QWORD *v31;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  _QWORD *v52;
  int v53;
  double v54;
  int v55;
  _QWORD *v56;
  int v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;

  v61 = a7;
  v16 = a5 + 1;
  v15 = a5[1];
  v17 = *(_QWORD *)(v15 + 16);
  v55 = a4;
  v59 = (_QWORD *)v15;
  v60 = a6;
  v54 = a3;
  v53 = a2;
  v52 = result;
  v56 = a5;
  if (!v17)
  {
    v30 = 0;
    v58 = 0;
LABEL_41:
    v57 = 1;
LABEL_44:
    v31 = a12;
    v33 = MEMORY[0x24BDAC7A8](result);
    v62 = v34;
    v35 = ((uint64_t (*)(uint64_t, uint64_t (*)(_QWORD, _QWORD), _QWORD, double))a12)(v30, _ViewInputs.base.modify, 0, v33);
    if ((v35 & 1) != 0)
    {
      if (v30 < 1)
        goto LABEL_64;
      v50 = v16;
      v51 = a8;
      while (1)
      {
        v36 = v30 - 1;
        v37 = MEMORY[0x24BDAC7A8](v35);
        v35 = ((uint64_t (*)(uint64_t, uint64_t (*)(_QWORD, _QWORD), _QWORD, uint64_t, double))a12)(v30 - 1, _ViewInputs.base.modify, 0, a13, v37);
        if ((v35 & 1) == 0)
          break;
        --v30;
        if (!v36)
        {
          a8 = v51;
          goto LABEL_63;
        }
      }
LABEL_62:
      a8 = v51;
LABEL_63:
      v16 = v50;
LABEL_64:
      v31 = v59;
      if (v57)
      {
        a9 = v59[2];
        goto LABEL_71;
      }
      if ((v58 & 0x8000000000000000) == 0)
      {
        a9 = v59[2];
        if (v58 < a9)
        {
          if (v30 == v59[5 * v58 + 8])
          {
            if (v58)
              specialized MutableCollection.swapAt(_:_:)(v58, v58 - 1);
            *(double *)&result = COERCE_DOUBLE(swift_release());
            goto LABEL_83;
          }
LABEL_71:
          if ((int64_t)a9 < *v56)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_73:
              v46 = v31[2];
              v45 = v31[3];
              if (v46 >= v45 >> 1)
                v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v31);
              v31[2] = v46 + 1;
              v47 = &v31[5 * v46];
              v47[4] = v52;
              *((_BYTE *)v47 + 40) = v53 & 1;
              *((double *)v47 + 6) = v54;
              *((_BYTE *)v47 + 56) = v55 & 1;
              v47[8] = v30;
              goto LABEL_80;
            }
LABEL_88:
            v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a9 + 1, 1, v31);
            goto LABEL_73;
          }
          *(double *)&result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) != 0)
          {
            if (a9)
              goto LABEL_78;
          }
          else
          {
            *(double *)&result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v31));
            v31 = result;
            if (a9)
            {
LABEL_78:
              if (a9 <= v31[2])
              {
                v48 = &v31[5 * a9 - 5];
                v48[4] = v52;
                *((_BYTE *)v48 + 40) = v53 & 1;
                *((double *)v48 + 6) = v54;
                *((_BYTE *)v48 + 56) = v55 & 1;
                v48[8] = v30;
LABEL_80:
                *(double *)&result = COERCE_DOUBLE(swift_release());
                *v16 = v31;
LABEL_83:
                *a8 = v30;
                return result;
              }
LABEL_91:
              __break(1u);
              goto LABEL_92;
            }
          }
          __break(1u);
          goto LABEL_91;
        }
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if (!__OFADD__(v30++, 1))
    {
      v50 = v16;
      v51 = a8;
      v63 = v30;
      v39 = v62 + 40;
      swift_beginAccess();
      if (v30 >= *(_QWORD *)(*(_QWORD *)(v62 + 40) + 16) - 1 && (*(_BYTE *)(v62 + 32) & 1) != 0
        || (v16 = a14,
            v40 = swift_beginAccess(),
            v41 = MEMORY[0x24BDAC7A8](v40),
            (((uint64_t (*)(uint64_t, uint64_t (*)(_QWORD, _QWORD), _QWORD, _QWORD *, double))a12)(v30, _ViewInputs.base.modify, 0, a14, v41) & 1) != 0))
      {
LABEL_59:
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v39 + 16) - 1 >= v63)
          v30 = v63;
        else
          v30 = *(_QWORD *)(*(_QWORD *)v39 + 16) - 1;
        goto LABEL_62;
      }
      a8 = (uint64_t *)_ViewInputs.base.modify;
      v42 = v62;
      while (1)
      {
        v44 = v63 + 1;
        if (__OFADD__(v63, 1))
          break;
        ++v63;
        if (v44 < *(_QWORD *)(*(_QWORD *)v39 + 16) - 1 || (*(_BYTE *)(v42 + 32) & 1) == 0)
        {
          v30 = (uint64_t)&v49;
          v43 = MEMORY[0x24BDAC7A8](v44);
          if ((((uint64_t (*)(double))a12)(v43) & 1) == 0)
            continue;
        }
        goto LABEL_59;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_86;
  }
  v18 = 0;
  v19 = 0;
  v20 = INFINITY;
  if ((a2 & 1) != 0)
    v21 = INFINITY;
  else
    v21 = *(double *)&result;
  if ((a4 & 1) != 0)
    v22 = INFINITY;
  else
    v22 = a3;
  v23 = (double *)(v15 + 56);
  v24 = 1;
  do
  {
    if (*((_BYTE *)v23 - 16))
      v25 = INFINITY;
    else
      v25 = *(v23 - 3);
    if (v25 <= v21)
    {
      v26 = INFINITY;
      if (!*(_BYTE *)v23)
        v26 = *(v23 - 1);
      if (v26 <= v22)
      {
        v27 = v21 - v25;
        if (v22 - v26 < v21 - v25)
          v27 = v22 - v26;
        v28 = v26 == INFINITY && v25 == INFINITY;
        v29 = v28 ? 0.0 : v27;
        if (v29 < v20)
        {
          if ((*(_BYTE *)(v23 - 2) & 1) != 0)
          {
            if ((a2 & 1) == 0)
              goto LABEL_10;
          }
          else
          {
            v24 = 0;
            if ((a2 & 1) != 0 || *(v23 - 3) != *(double *)&result)
              goto LABEL_11;
          }
          if ((*(_BYTE *)v23 & 1) != 0)
          {
            if ((a4 & 1) != 0)
              goto LABEL_37;
LABEL_10:
            v24 = 0;
LABEL_11:
            v20 = v29;
            v18 = v19;
            goto LABEL_12;
          }
          v24 = 0;
          if ((a4 & 1) != 0)
            goto LABEL_11;
          v20 = v29;
          v18 = v19;
          if (*(v23 - 1) == a3)
          {
LABEL_37:
            v18 = v19;
            goto LABEL_42;
          }
        }
      }
    }
LABEL_12:
    ++v19;
    v23 += 5;
  }
  while (v17 != v19);
  if ((v24 & 1) != 0)
  {
    v58 = v18;
    v30 = 0;
    goto LABEL_41;
  }
LABEL_42:
  if (v18 < v17)
  {
    v57 = 0;
    v58 = v18;
    v30 = *(_QWORD *)(v15 + 32 + 40 * v18 + 32);
    goto LABEL_44;
  }
LABEL_92:
  __break(1u);
  return result;
}

unint64_t specialized ClosestFitCache.callAsFunction(for:makeValue:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, unint64_t (*a5)(uint64_t *__return_ptr, uint64_t *, unint64_t)@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  char v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v26;
  unint64_t result;
  unint64_t v28;
  unint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v9 = (_QWORD *)v6;
  v12 = (_QWORD *)(v6 + 8);
  v13 = *(_QWORD **)(v6 + 8);
  v14 = v13[2];
  if (!v14)
  {
LABEL_39:
    v37 = 0;
    v38 = 1;
    result = (unint64_t)((unint64_t (*)(uint64_t *__return_ptr, uint64_t *))a5)(&v39, &v37);
    if (v7)
      return result;
    v6 = v13[2];
    goto LABEL_41;
  }
  v15 = 0;
  v16 = 0;
  v17 = INFINITY;
  if ((a2 & 1) != 0)
    v18 = INFINITY;
  else
    v18 = a1;
  if ((a4 & 1) != 0)
    v19 = INFINITY;
  else
    v19 = a3;
  v20 = (double *)(v13 + 7);
  v21 = 1;
  do
  {
    if (*((_BYTE *)v20 - 16))
      v22 = INFINITY;
    else
      v22 = *(v20 - 3);
    if (v22 <= v18)
    {
      v23 = INFINITY;
      if (!*(_BYTE *)v20)
        v23 = *(v20 - 1);
      if (v23 <= v19)
      {
        v24 = v18 - v22;
        if (v19 - v23 < v18 - v22)
          v24 = v19 - v23;
        v25 = v23 == INFINITY && v22 == INFINITY;
        v26 = v25 ? 0.0 : v24;
        if (v26 < v17)
        {
          if ((*(_BYTE *)(v20 - 2) & 1) != 0)
          {
            if ((a2 & 1) == 0)
              goto LABEL_10;
          }
          else
          {
            v21 = 0;
            if ((a2 & 1) != 0 || *(v20 - 3) != a1)
              goto LABEL_11;
          }
          if ((*(_BYTE *)v20 & 1) != 0)
          {
            if ((a4 & 1) != 0)
              goto LABEL_46;
LABEL_10:
            v21 = 0;
LABEL_11:
            v17 = v26;
            v15 = v16;
            goto LABEL_12;
          }
          v21 = 0;
          if ((a4 & 1) != 0)
            goto LABEL_11;
          v17 = v26;
          v15 = v16;
          if (*(v20 - 1) == a3)
            goto LABEL_46;
        }
      }
    }
LABEL_12:
    ++v16;
    v20 += 5;
  }
  while (v14 != v16);
  v16 = v15;
  if ((v21 & 1) != 0)
    goto LABEL_39;
LABEL_46:
  if (v16 >= v14)
  {
    __break(1u);
    goto LABEL_60;
  }
  v31 = (uint64_t)&v13[5 * v16 + 4];
  v33 = *(_QWORD *)(v31 + 32);
  v32 = (uint64_t *)(v31 + 32);
  v37 = v33;
  v38 = 0;
  result = a5(&v39, &v37, v15);
  if (v7)
    return result;
  v6 = v13[2];
  if (v16 >= v6)
  {
LABEL_64:
    __break(1u);
    return result;
  }
  v8 = *v32;
  if (v39 != v8)
  {
LABEL_41:
    if ((int64_t)v6 < *v9)
    {
      v8 = v39;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_43:
        v29 = v13[2];
        v28 = v13[3];
        if (v29 >= v28 >> 1)
        {
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v13);
          v13 = (_QWORD *)result;
        }
        v13[2] = v29 + 1;
        v30 = (double *)&v13[5 * v29];
        v30[4] = a1;
        *((_BYTE *)v30 + 40) = a2 & 1;
        v30[6] = a3;
        *((_BYTE *)v30 + 56) = a4 & 1;
        goto LABEL_56;
      }
LABEL_60:
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v13);
      v13 = (_QWORD *)result;
      goto LABEL_43;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (v6)
        goto LABEL_54;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
      v13 = (_QWORD *)result;
      if (v6)
      {
LABEL_54:
        if (v6 <= v13[2])
        {
          v30 = (double *)&v13[5 * v6 - 5];
          v30[4] = a1;
          *((_BYTE *)v30 + 40) = a2 & 1;
          v30[6] = a3;
          *((_BYTE *)v30 + 56) = a4 & 1;
          v8 = v39;
LABEL_56:
          *((_QWORD *)v30 + 8) = v8;
          *v12 = v13;
          goto LABEL_57;
        }
        goto LABEL_63;
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v16)
    result = specialized MutableCollection.swapAt(_:_:)(v16, v16 - 1);
LABEL_57:
  *a6 = v8;
  return result;
}

uint64_t SizeFittingTextCache.suggestedVariant(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  void (*v14)(char *, double);
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t);
  void (*v17)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t);
  uint64_t (*v18)(char *, uint64_t);
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v23[9];
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;

  v29 = a2;
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v9;
  v11 = *((unsigned __int8 *)v9 + 8);
  v12 = v9[2];
  v13 = *((unsigned __int8 *)v9 + 24);
  v14 = *(void (**)(char *, double))(v5 + 16);
  v23[8] = v2 + v3[17];
  v24 = v2;
  v14(v8, v6);
  v28 = v10;
  v32 = v10;
  v27 = v11;
  v33 = v11;
  v26 = v12;
  v34 = v12;
  v25 = v13;
  v35 = v13;
  v15 = v3[13];
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v15 + 8);
  v16(&v30, &v32, v4, v15);
  v17 = v16;
  v18 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  result = v18(v8, v4);
  v20 = v30;
  if ((v31 & 1) == 0)
  {
    v23[3] = v18;
    v23[4] = v8;
    v23[5] = v14;
    v23[6] = v17;
    v21 = swift_allocObject();
    v23[7] = v23;
    *(_BYTE *)(v21 + 16) = 0;
    v32 = v20;
    MEMORY[0x24BDAC7A8](v21);
    v23[-8] = v3[10];
    v23[-7] = v4;
    v23[-6] = v3[12];
    v23[-5] = v15;
    v23[-4] = v28;
    LOBYTE(v23[-3]) = v27;
    v23[-2] = v26;
    LOBYTE(v23[-1]) = v25;
    swift_retain();
    SizeFittingTextCache.withValue<A>(for:onChange:compute:)((uint64_t)partial apply for closure #1 in SizeFittingTextCache.suggestedVariant(for:), v21, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)&v23[-10], (uint64_t)&v30);
  }
  v22 = v29;
  *v29 = v30;
  *((_BYTE *)v22 + 8) = 1;
  return result;
}

void sub_234BFDE44()
{
  swift_release();
  JUMPOUT(0x234BFDD74);
}

uint64_t specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:)(_BYTE *a1)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = 1;
  return result;
}

BOOL closure #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)@<W0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, _BYTE *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  _BOOL8 result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  v13 = a1;
  v14 = a2 & 1;
  v15 = a3;
  v16 = a4 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  result = SizeFittingTextCacheValue.fits(_:)((uint64_t)&v13, v9, v10, v11);
  *a5 = result;
  return result;
}

uint64_t specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(unint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(__int128 *__return_ptr, __int128 *), uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t result;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  void (*v101)(__int128 *__return_ptr, __int128 *);
  uint64_t v102;
  char *v103;
  unint64_t v104;
  _OWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  void (*v108)(void);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t *v123;
  uint64_t v124[10];
  _QWORD v125[2];
  char v126;
  uint64_t v127[6];
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  v6 = v5;
  v100 = a5;
  v101 = a4;
  v108 = a2;
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  v113 = v9;
  v114 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (unint64_t *)((char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v97 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v97 - v16);
  v18 = (_QWORD *)(v5 + 40);
  swift_beginAccess();
  v19 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16) <= (uint64_t)a1;
  v115 = v5;
  v132 = a3;
  v112 = (_QWORD *)(v5 + 40);
  if (v19)
  {
    v106 = v11;
    v97 = v5 + 96;
    swift_beginAccess();
    if ((*(_BYTE *)(v5 + 32) & 1) != 0)
    {
LABEL_36:
      *(_QWORD *)&v122 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 16);
      swift_beginAccess();
      v80 = *(_QWORD *)(v6 + 96);
      v79 = *(_QWORD *)(v6 + 104);
      v82 = *(_QWORD **)(v6 + 112);
      v81 = *(_QWORD *)(v6 + 120);
      v83 = v6;
      v84 = *(_QWORD *)(v6 + 128);
      v85 = *(_QWORD **)(v83 + 136);
      swift_beginAccess();
      v5 = *(_QWORD *)(v83 + 40);
      swift_retain();
      swift_retain();
      v123 = (uint64_t *)v80;
      *(_QWORD *)&v121 = v79;
      v86 = v79;
      v18 = v82;
      v87 = (char)v82;
      a3 = v81;
      outlined copy of Text?(v80, v86, v87, v81);
      v11 = v85;
      swift_retain();
      a1 = v84;
      swift_retain();
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v83 + 40) = v5;
      if ((result & 1) != 0)
        goto LABEL_37;
      goto LABEL_53;
    }
    v105 = v17 + 6;
    v99 = v125;
    v98 = v5 + 56;
    v104 = a1;
    v123 = v17;
    v103 = v14;
    while (1)
    {
      v38 = *v18;
      v39 = *(_QWORD *)(*v18 + 16);
      if (v39 > a1)
        goto LABEL_36;
      if (!v39)
      {
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v109 = *(_QWORD *)(*v18 + 16);
      v40 = (*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
      v5 = *(_QWORD *)(v114 + 72);
      outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v38 + v40 + v5 * (v39 - 1), (uint64_t)v14);
      outlined init with copy of TypesettingLanguage((uint64_t)v14, (uint64_t)v17, type metadata accessor for ResolvedTextHelper);
      v41 = type metadata accessor for ResolvedTextHelper(0);
      v42 = *(int *)(v41 + 60);
      v43 = *(uint64_t *)((char *)v17 + v42);
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_49;
      v46 = v41;
      v117 = v40;
      v116 = v5;
      *(uint64_t *)((char *)v17 + v42) = v45;
      PropertyList.Tracker.reset()();
      outlined consume of Text?(v17[6], v17[7], v17[8], v17[9]);
      v47 = v105;
      *v105 = 0u;
      v47[1] = 0u;
      v48 = (uint64_t *)((char *)v17 + *(int *)(v46 + 56));
      outlined destroy of TypesettingConfiguration((uint64_t)v48, type metadata accessor for ResolvedTextHelper.NextUpdate);
      *v48 = 0;
      type metadata accessor for ResolvedTextHelper.NextUpdate(0);
      swift_storeEnumTagMultiPayload();
      v49 = v113;
      v50 = (uint64_t *)((char *)v17 + *(int *)(v113 + 52));
      *v50 = 0;
      v50[1] = 0;
      v50[2] = 0;
      v51 = *(int *)(v49 + 56);
      v52 = v14[v51];
      *(_QWORD *)&v122 = v51;
      *((_BYTE *)v17 + v51) = v52;
      outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v14);
      v53 = *(_QWORD *)(v6 + 96);
      v54 = *(_QWORD *)(v6 + 104);
      v55 = v17;
      v56 = *(_QWORD *)(v6 + 112);
      v57 = *(_QWORD **)(v6 + 120);
      v58 = *(_QWORD *)(v6 + 128);
      v59 = *(_QWORD *)(v6 + 136);
      v124[6] = v53;
      v124[7] = v54;
      v124[8] = v56;
      v124[9] = (uint64_t)v57;
      v125[0] = v58;
      v125[1] = v59;
      v60 = *v50;
      v61 = v50[1];
      v62 = v50[2];
      v120 = v58;
      v119 = v59;
      v118 = v53;
      *(_QWORD *)&v121 = v54;
      if (v60)
      {
        LODWORD(v111) = *((unsigned __int8 *)v55 + v122);
        swift_retain();
        swift_retain();
        outlined copy of Text?(v53, v54, v56, (uint64_t)v57);
        swift_retain();
        swift_retain();
        outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v60);
        v54 = v121;
        v107 = v57;
        v63 = ResolvedTextHelper.shouldUpdate(for:inputChanged:)(v53, v121, v56, (uint64_t)v57, v99, v111);
        v64 = v56;
        v65 = v62;
        if (!v63)
        {
          outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v60);
          *v50 = v60;
          v50[1] = v61;
          v50[2] = v62;
          *((_BYTE *)v123 + v122) = 0;
          swift_retain();
          swift_retain();
          swift_retain();
          v6 = v115;
          a3 = v132;
          v73 = (uint64_t)v107;
          goto LABEL_28;
        }
        v110 = v61;
        swift_release();
        swift_release();
        v111 = v62;
        swift_release();
        v58 = v120;
        v59 = v119;
        v66 = v118;
        v57 = v107;
      }
      else
      {
        v110 = v61;
        v111 = v62;
        swift_retain();
        swift_retain();
        v66 = v53;
        outlined copy of Text?(v53, v54, v56, (uint64_t)v57);
        swift_retain();
        swift_retain();
      }
      v67 = v122;
      *(_QWORD *)&v130 = v58;
      *((_QWORD *)&v130 + 1) = v59;
      v68 = v57;
      v69 = (uint64_t)v123;
      result = (uint64_t)ResolvedTextHelper.resolve(_:with:sizeFitting:)(v66, v54, v56, v57, (uint64_t *)&v130, 1);
      if (!result)
        goto LABEL_56;
      v61 = result;
      v64 = v56;
      swift_retain();
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v60);
      *v50 = v61;
      v50[1] = v61;
      v50[2] = 0;
      *(_BYTE *)(v69 + v67) = 0;
      v6 = v115;
      if ((*(_BYTE *)(v115 + 89) & 1) == 0 && v109 == *(_QWORD *)v98)
      {
        v71 = (_OWORD *)v98;
        *(_BYTE *)(v98 + 32) = 0;
        *v71 = 0u;
        v71[1] = 0u;
        *(_BYTE *)(v6 + 89) = 1;
      }
      v72 = swift_retain_n();
      a3 = v132;
      ((void (*)(uint64_t))v108)(v72);
      v60 = v61;
      v73 = (uint64_t)v68;
      v65 = 0;
LABEL_28:
      v74 = *(_WORD *)(v60 + 236);
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Text?(v118, v121, v64, v73);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      *v50 = v60;
      v50[1] = v61;
      v50[2] = v65;
      v75 = (uint64_t)v106;
      if ((v74 & 0x100) == 0)
      {
        outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v123);
        *(_BYTE *)(v6 + 32) = 1;
        goto LABEL_36;
      }
      v17 = v123;
      outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v123, (uint64_t)v106);
      v18 = v112;
      swift_beginAccess();
      v11 = (_QWORD *)*v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v18 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v11 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, (unint64_t)v11);
        *v18 = v11;
      }
      a1 = v104;
      v78 = v11[2];
      v77 = v11[3];
      v5 = v78 + 1;
      if (v78 >= v77 >> 1)
      {
        v11 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, (unint64_t)v11);
        *v18 = v11;
      }
      v11[2] = v5;
      outlined init with take of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v75, (uint64_t)v11 + v117 + v78 * v116);
      swift_endAccess();
      outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v17);
      v14 = v103;
      if ((*(_BYTE *)(v6 + 32) & 1) != 0)
        goto LABEL_36;
    }
  }
  swift_beginAccess();
  v21 = *(_QWORD *)(v5 + 96);
  v20 = *(_QWORD *)(v5 + 104);
  v23 = *(_QWORD **)(v5 + 112);
  v22 = *(_QWORD *)(v5 + 120);
  v11 = (_QWORD *)v5;
  v24 = *(uint64_t **)(v5 + 128);
  v25 = *(char **)(v5 + 136);
  swift_beginAccess();
  v5 = *(_QWORD *)(v5 + 40);
  v123 = (uint64_t *)v21;
  *(_QWORD *)&v122 = v20;
  v26 = v20;
  v18 = v23;
  v27 = (char)v23;
  a3 = v22;
  outlined copy of Text?(v21, v26, v27, v22);
  v14 = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  v17 = v24;
  swift_retain();
  v28 = swift_isUniquelyReferenced_nonNull_native();
  v11[5] = v5;
  if ((v28 & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
  else
  {
LABEL_50:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    *v112 = v5;
    if ((a1 & 0x8000000000000000) == 0)
    {
LABEL_4:
      if (*(_QWORD *)(v5 + 16) > a1)
      {
        v29 = (uint64_t)v17;
        v30 = (uint64_t)v18;
        v31 = v5
            + ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))
            + *(_QWORD *)(v114 + 72) * a1;
        v124[0] = (uint64_t)v123;
        v32 = v122;
        v124[1] = v122;
        v124[2] = v30;
        v124[3] = a3;
        v124[4] = v29;
        v124[5] = (uint64_t)v14;
        if ((specialized SizeFittingTextCache.CacheEntry.result(for:)(&v130, v124) & 1) != 0)
        {
          v33 = v115;
          if ((*(_BYTE *)(v115 + 89) & 1) == 0)
          {
            v34 = (_OWORD *)(v115 + 56);
            if (*(_QWORD *)(v115 + 56) == a1)
            {
              *(_BYTE *)(v115 + 88) = 0;
              *v34 = 0u;
              *(_OWORD *)(v33 + 72) = 0u;
              *(_BYTE *)(v33 + 89) = 1;
            }
          }
          v108();
        }
        v35 = v102;
        v101(&v128, &v130);
        if (!v35)
          LOBYTE(a1) = v128;
        v121 = v130;
        v36 = v131;
        v37 = (uint64_t *)(v31 + *(int *)(v113 + 52));
        outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v37);
        *(_OWORD *)v37 = v121;
        v37[2] = v36;
        outlined consume of Text?((uint64_t)v123, v32, v30, a3);
        swift_release();
        swift_release();
LABEL_47:
        swift_endAccess();
        swift_release();
        swift_release();
        return a1 & 1;
      }
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  result = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = result;
  *v112 = result;
LABEL_37:
  if ((_QWORD)v122)
  {
    if ((unint64_t)v122 <= *(_QWORD *)(v5 + 16))
    {
      v88 = a1;
      v89 = (uint64_t)v18;
      a1 = v122 - 1;
      v90 = v5
          + ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))
          + *(_QWORD *)(v114 + 72) * (v122 - 1);
      v91 = v121;
      v127[0] = (uint64_t)v123;
      v127[1] = v121;
      v127[2] = v89;
      v127[3] = a3;
      v127[4] = v88;
      v127[5] = (uint64_t)v11;
      if ((specialized SizeFittingTextCache.CacheEntry.result(for:)(&v128, v127) & 1) != 0)
      {
        v92 = v115;
        if ((*(_BYTE *)(v115 + 89) & 1) == 0)
        {
          v93 = (_OWORD *)(v115 + 56);
          if (a1 == *(_QWORD *)(v115 + 56))
          {
            *(_BYTE *)(v115 + 88) = 0;
            *v93 = 0u;
            *(_OWORD *)(v92 + 72) = 0u;
            *(_BYTE *)(v92 + 89) = 1;
          }
        }
        v108();
      }
      v94 = v102;
      v101((__int128 *)&v126, &v128);
      if (!v94)
        LOBYTE(a1) = v126;
      v122 = v128;
      v95 = v129;
      v96 = (uint64_t *)(v90 + *(int *)(v113 + 52));
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v96);
      *(_OWORD *)v96 = v122;
      v96[2] = v95;
      outlined consume of Text?((uint64_t)v123, v91, v89, a3);
      swift_release();
      swift_release();
      goto LABEL_47;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(unint64_t a1, void (*a2)(uint64_t), uint64_t a3, void (*a4)(__int128 *__return_ptr, __int128 *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  __int16 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  char v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(__int128 *__return_ptr, __int128 *);
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  _QWORD *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned __int8 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  uint64_t v106;

  v7 = v5;
  v80 = a5;
  v89 = a2;
  v11 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)&v92 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v84 = (uint64_t)&v80 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v80 - v16;
  v18 = v5 + 5;
  swift_beginAccess();
  v19 = *(_QWORD *)(v5[5] + 16) <= (uint64_t)a1;
  v90 = a3;
  v88 = a1;
  v82 = v6;
  v81 = a4;
  if (!v19)
  {
    v20 = (unint64_t)v5 + *(_QWORD *)(*v5 + 144);
    swift_beginAccess();
    outlined init with copy of TypesettingLanguage(v20, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
    swift_beginAccess();
    v5 = (_QWORD *)v5[5];
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7[5] = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_4;
    }
    else
    {
LABEL_55:
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      *v18 = v5;
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v5[2] > a1)
        {
          v22 = &v5[9 * a1];
          v23 = v22 + 4;
          v24 = v22[9];
          v25 = v22[10];
          v26 = v22[11];
          if (v24 && *((_BYTE *)v22 + 96) != 1)
          {
            v32 = 0;
            v27 = v24;
            v29 = v25;
          }
          else
          {
            v27 = DynamicTextView.DynamicTextHelper.value(for:)((uint64_t)v17);
            v29 = v28;
            v31 = v30;
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v24);
            v32 = 1;
            v26 = v31;
          }
          v23[5] = v27;
          v23[6] = v29;
          v23[7] = v26;
          *((_BYTE *)v23 + 64) = 0;
          *(_QWORD *)&v103 = v27;
          *((_QWORD *)&v103 + 1) = v29;
          v104 = v26;
          if (v32)
          {
            if ((*((_BYTE *)v7 + 89) & 1) == 0 && v7[7] == v88)
            {
              *((_BYTE *)v7 + 88) = 0;
              *(_OWORD *)(v7 + 7) = 0u;
              *(_OWORD *)(v7 + 9) = 0u;
              *((_BYTE *)v7 + 89) = 1;
            }
            swift_retain();
            swift_retain();
            v59 = swift_retain();
            v89(v59);
          }
          else
          {
            swift_retain();
            swift_retain();
            swift_retain();
          }
          v60 = v82;
          v81(&v101, &v103);
          if (v60)
          {
            v92 = v103;
            v61 = v104;
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v23[5]);
            *(_OWORD *)(v23 + 5) = v92;
            v23[7] = v61;
          }
          else
          {
            LOBYTE(v61) = v101;
            v92 = v103;
            v62 = v104;
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v23[5]);
            *(_OWORD *)(v23 + 5) = v92;
            v23[7] = v62;
          }
          outlined destroy of TypesettingConfiguration((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
LABEL_52:
          swift_endAccess();
          swift_release();
          swift_release();
          return v61 & 1;
        }
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v87 = (uint64_t)v5 + *(_QWORD *)(*v5 + 144);
  swift_beginAccess();
  v17 = (char *)(v5 + 5);
  if ((v5[4] & 1) == 0)
  {
    v86 = &v97;
    v83 = v5 + 7;
    v20 = 72;
    v85 = v5;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)v17 + 16);
      if (v33 > a1)
        break;
      if (!v33)
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      v34 = *(_QWORD *)v17 + 72 * v33;
      v35 = *(_QWORD *)(v34 - 8);
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_54;
      v38 = v34 - 40;
      v39 = *(_BYTE *)(v38 + 64);
      v93 = *(_QWORD **)v38;
      v94 = *(_OWORD *)(v38 + 8);
      v95 = 0;
      v96 = v37;
      v40 = v86;
      v86[1] = 0;
      v40[2] = 0;
      *v40 = 0;
      v100 = v39;
      v41 = v92;
      outlined init with copy of TypesettingLanguage(v87, v92, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      swift_retain();
      swift_retain();
      swift_retain();
      v42 = DynamicTextView.DynamicTextHelper.value(for:)(v41);
      v18 = v43;
      v45 = v44;
      v97 = v42;
      v98 = v43;
      v99 = v44;
      v100 = 0;
      if ((*((_BYTE *)v7 + 89) & 1) == 0 && v33 == *v83)
      {
        v46 = v83;
        *((_BYTE *)v83 + 32) = 0;
        *v46 = 0u;
        v46[1] = 0u;
        *((_BYTE *)v7 + 89) = 1;
      }
      swift_retain();
      swift_retain();
      v47 = swift_retain();
      v89(v47);
      v48 = *(_WORD *)(v42 + 236);
      swift_release();
      swift_release();
      swift_release();
      v97 = v42;
      v98 = v18;
      v99 = v45;
      outlined destroy of TypesettingConfiguration(v92, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      swift_release();
      swift_release();
      v5 = v93;
      if ((v48 & 0x100) == 0)
      {
        swift_release();
        swift_release();
        outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v42);
        *((_BYTE *)v7 + 32) = 1;
        break;
      }
      v49 = v94;
      v50 = v95;
      v91 = v96;
      v105 = v100;
      swift_beginAccess();
      v51 = v17;
      v52 = *(_QWORD **)v17;
      swift_retain();
      swift_retain();
      outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v42);
      v53 = swift_isUniquelyReferenced_nonNull_native();
      v54 = v51;
      *(_QWORD *)v51 = v52;
      if ((v53 & 1) == 0)
      {
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
        *(_QWORD *)v51 = v52;
      }
      v56 = v52[2];
      v55 = v52[3];
      if (v56 >= v55 >> 1)
      {
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v55 > 1), v56 + 1, 1, v52);
        *(_QWORD *)v51 = v52;
      }
      v52[2] = v56 + 1;
      v20 = 72;
      v57 = &v52[9 * v56];
      v57[4] = v5;
      *(_OWORD *)(v57 + 5) = v49;
      v58 = v91;
      v57[7] = v50;
      v57[8] = v58;
      v57[9] = v42;
      v57[10] = v18;
      v57[11] = v45;
      *((_BYTE *)v57 + 96) = v105;
      swift_endAccess();
      swift_release();
      swift_release();
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v42);
      v7 = v85;
      a1 = v88;
      v17 = v54;
    }
    while ((v85[4] & 1) == 0);
  }
  v20 = *(_QWORD *)(v7[5] + 16);
  v63 = v87;
  swift_beginAccess();
  outlined init with copy of TypesettingLanguage(v63, v84, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  swift_beginAccess();
  v5 = (_QWORD *)v7[5];
  swift_retain();
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v7[5] = v5;
  if ((result & 1) == 0)
  {
LABEL_58:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (_QWORD *)result;
    *(_QWORD *)v17 = result;
    if (!v20)
      goto LABEL_59;
    goto LABEL_37;
  }
  if (!v20)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_37:
  if (v20 <= v5[2])
  {
    v65 = v20 - 1;
    v66 = &v5[9 * v20 - 9];
    v67 = v66 + 4;
    v68 = v66[9];
    v69 = v66[10];
    v70 = v66[11];
    if (v68 && *((_BYTE *)v66 + 96) != 1)
    {
      v76 = 0;
      v71 = v68;
      v73 = v69;
    }
    else
    {
      v71 = DynamicTextView.DynamicTextHelper.value(for:)(v84);
      v73 = v72;
      v75 = v74;
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v68);
      v76 = 1;
      v70 = v75;
    }
    v67[5] = v71;
    v67[6] = v73;
    v67[7] = v70;
    *((_BYTE *)v67 + 64) = 0;
    *(_QWORD *)&v101 = v71;
    *((_QWORD *)&v101 + 1) = v73;
    v102 = v70;
    if (v76)
    {
      if ((*((_BYTE *)v7 + 89) & 1) == 0 && v65 == v7[7])
      {
        *((_BYTE *)v7 + 88) = 0;
        *(_OWORD *)(v7 + 7) = 0u;
        *(_OWORD *)(v7 + 9) = 0u;
        *((_BYTE *)v7 + 89) = 1;
      }
      swift_retain();
      swift_retain();
      v77 = swift_retain();
      v89(v77);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
    }
    v78 = v82;
    v81((__int128 *)&v106, &v101);
    if (v78)
    {
      v92 = v101;
      v61 = v102;
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v67[5]);
      *(_OWORD *)(v67 + 5) = v92;
      v67[7] = v61;
    }
    else
    {
      LOBYTE(v61) = v106;
      v92 = v101;
      v79 = v102;
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v67[5]);
      *(_OWORD *)(v67 + 5) = v92;
      v67[7] = v79;
    }
    outlined destroy of TypesettingConfiguration(v84, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
    goto LABEL_52;
  }
LABEL_60:
  __break(1u);
  return result;
}

void SizeFittingTextCache.withValue<A>(for:onChange:compute:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[35];
  uint64_t AssociatedTypeWitness;

  v16[2] = a4;
  v16[1] = a3;
  v16[14] = a2;
  v16[13] = a1;
  v16[3] = a5;
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 96);
  v8 = *(_QWORD *)(*v5 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16[20] = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v16[0] = (char *)v16 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v16[9] = (char *)v16 - v13;
  v14 = *(_QWORD *)(v6 + 88);
  v15 = *(_QWORD *)(v6 + 104);
  v16[15] = v8;
  v16[31] = v8;
  v16[32] = v14;
  v16[11] = v14;
  v16[16] = v7;
  v16[33] = v7;
  v16[34] = v15;
  v16[12] = v15;
  type metadata accessor for SizeFittingTextCache.CacheEntry();
}

uint64_t sub_234BFF690(uint64_t a1)
{
  Swift::Int *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  Swift::Int v26;
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[96];

  *(_QWORD *)(v5 - 232) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v35[-v8];
  v10 = *v1;
  *(_QWORD *)(v5 - 216) = v2 + 40;
  swift_beginAccess();
  v11 = swift_bridgeObjectRetain();
  *(_QWORD *)(v5 - 224) = a1;
  v12 = MEMORY[0x23B7C6268](v11, a1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 288) = v3;
  if (v10 < v12)
  {
    v13 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 144)];
    swift_beginAccess();
    (*(void (**)(_QWORD, _BYTE *, _QWORD))(v3 + 16))(*(_QWORD *)(v5 - 208), v13, *(_QWORD *)(v5 - 72));
    *(_QWORD *)(v5 - 168) = v10;
    v14 = onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)((uint64_t *)(v5 - 168), (uint64_t)v2, *(_QWORD *)(v5 - 264), *(_QWORD *)(v5 - 256), v4);
    *(_QWORD *)(v5 - 264) = v14;
    v16 = v15;
    *(_QWORD *)(v5 - 256) = v35;
    MEMORY[0x24BDAC7A8](v14);
    v17 = *(_QWORD *)(v5 - 280);
    *(_QWORD *)&v35[-64] = *(_QWORD *)(v5 - 248);
    *(_QWORD *)&v35[-56] = v17;
    v18 = *(_QWORD *)(v5 - 240);
    *(_QWORD *)&v35[-48] = v4;
    *(_QWORD *)&v35[-40] = v18;
    v19 = *(_QWORD *)(v5 - 360);
    *(_QWORD *)&v35[-32] = *(_QWORD *)(v5 - 272);
    *(_QWORD *)&v35[-24] = v19;
    *(_QWORD *)&v35[-16] = *(_QWORD *)(v5 - 352);
    swift_beginAccess();
    v20 = *(_QWORD **)(v5 - 224);
    type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    v21 = *(_QWORD *)(v5 - 208);
    Array._checkSubscript_mutating(_:)(v10);
    SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(v21, *(void (**)(uint64_t))(v5 - 264), v16, (void (*)(char *))partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)&v35[-80], v20, v4, *(_QWORD *)(v5 - 344));
  }
  *(_QWORD *)(v5 - 304) = &v2[*(_QWORD *)(*(_QWORD *)v2 + 144)];
  swift_beginAccess();
  if ((v2[32] & 1) == 0)
  {
    *(_QWORD *)(v5 - 320) = v9;
    *(_QWORD *)(v5 - 312) = v4;
    *(_QWORD *)(v5 - 336) = v10;
    *(_QWORD *)(v5 - 328) = v2;
    getter of currentVariant #1 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)();
  }
  v22 = *(_QWORD **)(v5 - 224);
  v23 = swift_bridgeObjectRetain();
  v24 = MEMORY[0x23B7C6268](v23, v22);
  result = swift_bridgeObjectRelease();
  v26 = v24 - 1;
  if (!__OFSUB__(v24, 1))
  {
    v27 = *(_QWORD *)(v5 - 304);
    swift_beginAccess();
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v3 + 16))(*(_QWORD *)(v5 - 368), v27, *(_QWORD *)(v5 - 72));
    *(_QWORD *)(v5 - 192) = v26;
    v28 = onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)((uint64_t *)(v5 - 192), (uint64_t)v2, *(_QWORD *)(v5 - 264), *(_QWORD *)(v5 - 256), v4);
    *(_QWORD *)(v5 - 208) = v28;
    v30 = v29;
    *(_QWORD *)(v5 - 256) = v35;
    MEMORY[0x24BDAC7A8](v28);
    v31 = *(_QWORD *)(v5 - 280);
    *(_QWORD *)&v35[-64] = *(_QWORD *)(v5 - 248);
    *(_QWORD *)&v35[-56] = v31;
    v32 = *(_QWORD *)(v5 - 240);
    *(_QWORD *)&v35[-48] = v4;
    *(_QWORD *)&v35[-40] = v32;
    v33 = *(_QWORD *)(v5 - 360);
    *(_QWORD *)&v35[-32] = *(_QWORD *)(v5 - 272);
    *(_QWORD *)&v35[-24] = v33;
    *(_QWORD *)&v35[-16] = *(_QWORD *)(v5 - 352);
    swift_beginAccess();
    type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    v34 = *(_QWORD *)(v5 - 368);
    Array._checkSubscript_mutating(_:)(v26);
    SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(v34, *(void (**)(uint64_t))(v5 - 208), v30, (void (*)(char *))partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)&v35[-80], v22, v4, *(_QWORD *)(v5 - 344));
  }
  __break(1u);
  return result;
}

uint64_t (*onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9;
  _QWORD *v10;

  v9 = *a1;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a5;
  v10[3] = a2;
  v10[4] = v9;
  v10[5] = a3;
  v10[6] = a4;
  swift_retain();
  swift_retain();
  return partial apply for closure #1 in onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:);
}

void getter of currentVariant #1 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  type metadata accessor for SizeFittingTextCache.CacheEntry();
}

uint64_t *SizeFittingTextCache.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  return v0;
}

uint64_t SizeFittingTextCache.__deallocating_deinit()
{
  SizeFittingTextCache.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for SizeFittingTextCache()
{
  JUMPOUT(0x23B7C9B5CLL);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>(255, a2, a3, a4);
    v6 = v5;
    v10[0] = lazy protocol witness table accessor for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>(v5, v7, v8, v9);
    v10[1] = &protocol witness table for Text;
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6, v10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>)
  {
    type metadata accessor for ModifiedContent<Text, VariantThatFitsModifier>(255, a2, a3, a4);
    v7 = type metadata accessor for _ConditionalContent(a1, v5, (uint64_t)&type metadata for Text, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>);
  }
}

void type metadata accessor for ModifiedContent<Text, VariantThatFitsModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Text, VariantThatFitsModifier>)
  {
    v4 = type metadata accessor for ModifiedContent(0, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for VariantThatFitsModifier, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, VariantThatFitsModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Text, VariantThatFitsModifier>(255, a2, a3, a4);
    v6[0] = &protocol witness table for Text;
    v6[1] = &protocol witness table for VariantThatFitsModifier;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v6);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for VariantThatFitsModifier()
{
  return &type metadata for VariantThatFitsModifier;
}

uint64_t type metadata completion function for SizeFittingTextCache.CacheEntry()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  unint64_t v5;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for SizeFittingTextCacheValue(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
    v0 = type metadata accessor for Optional();
    if (v5 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for SizeFittingTextCache.CacheEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(unint64_t, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 8;
  v12 = ((v10 + 8) & ~v10) + *(_QWORD *)(v9 + 64);
  v13 = (v10 | 7) + v7;
  v14 = v10 | 7 | *(_DWORD *)(v6 + 80);
  if (v14 == 7
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0
    && v12 + (v13 & ~(v10 | 7)) + 1 <= 0x18)
  {
    v18 = ~(v10 | 7);
    v19 = *(unsigned int *)(v9 + 84);
    v29 = AssociatedTypeWitness;
    v30 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v20 = (_QWORD *)(((unint64_t)a1 + v13) & v18);
    v21 = (uint64_t *)(((unint64_t)a2 + v13) & v18);
    if ((v19 & 0x80000000) != 0)
    {
      v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)v21 + v11) & v30, v19, v29);
      v23 = v30;
      if (v24)
      {
LABEL_14:
        memcpy(v20, v21, v12);
LABEL_17:
        *((_BYTE *)v20 + v12) = *((_BYTE *)v21 + v12);
        return a1;
      }
    }
    else
    {
      v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      v23 = v30;
      if ((_DWORD)v22 != -1)
        goto LABEL_14;
    }
    *v20 = *v21;
    v25 = ((unint64_t)v20 + v11) & v23;
    v26 = ((unint64_t)v21 + v11) & v23;
    v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    v27(v25, v26, v29);
    goto LABEL_17;
  }
  v17 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
  swift_retain();
  return a1;
}

uint64_t destroy for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (uint64_t *)((v4 + (v7 | 7)) & ~(v7 | 7));
  v9 = ~v7;
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v8 + v7 + 8) & v9);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v8 + v7 + 8) & v9, AssociatedTypeWitness);
  }
  v10 = *v8;
  if ((unint64_t)*v8 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  result = (v10 + 1);
  if ((_DWORD)v10 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  void (*v17)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (uint64_t *)((v10 + a2) & ~(v9 | 7));
  v13 = ~v9;
  v14 = v9 + 8;
  v15 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    v16 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    if ((_DWORD)v16 != -1)
      goto LABEL_5;
LABEL_7:
    *v11 = *v12;
    v17 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v17(((unint64_t)v11 + v14) & v13, ((unint64_t)v12 + v14) & v13, AssociatedTypeWitness);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v12 + v14) & v13))
    goto LABEL_7;
LABEL_5:
  memcpy(v11, v12, v15);
LABEL_8:
  *((_BYTE *)v11 + v15) = *((_BYTE *)v12 + v15);
  return a1;
}

uint64_t assignWithCopy for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  uint64_t (*v19)(unint64_t, uint64_t, uint64_t);
  void (*v20)(unint64_t, unint64_t, uint64_t);
  int v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = ~v9;
  v15 = v9 + 8;
  v16 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v22 = v19(((unint64_t)v11 + v15) & v14, *(unsigned int *)(v8 + 84), AssociatedTypeWitness);
    v18 = v19(((unint64_t)v12 + v15) & v14, v13, AssociatedTypeWitness);
    if (!v22)
    {
LABEL_5:
      if (!v18)
      {
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v17) = -1;
    v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v18)
  {
    *v11 = *v12;
    v20 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v20(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v16);
LABEL_12:
  *((_BYTE *)v11 + v16) = *((_BYTE *)v12 + v16);
  return a1;
}

uint64_t initializeWithTake for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (uint64_t *)((v10 + a2) & ~(v9 | 7));
  v13 = ~v9;
  v14 = v9 + 8;
  v15 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    v16 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    if ((_DWORD)v16 != -1)
      goto LABEL_5;
LABEL_7:
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v14) & v13, ((unint64_t)v12 + v14) & v13, AssociatedTypeWitness);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v12 + v14) & v13))
    goto LABEL_7;
LABEL_5:
  memcpy(v11, v12, v15);
LABEL_8:
  *((_BYTE *)v11 + v15) = *((_BYTE *)v12 + v15);
  return a1;
}

uint64_t assignWithTake for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  uint64_t (*v19)(unint64_t, uint64_t, uint64_t);
  int v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = ~v9;
  v15 = v9 + 8;
  v16 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v21 = v19(((unint64_t)v11 + v15) & v14, *(unsigned int *)(v8 + 84), AssociatedTypeWitness);
    v18 = v19(((unint64_t)v12 + v15) & v14, v13, AssociatedTypeWitness);
    if (!v21)
    {
LABEL_5:
      if (!v18)
      {
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v17) = -1;
    v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v18)
  {
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v16);
LABEL_12:
  *((_BYTE *)v11 + v16) = *((_BYTE *)v12 + v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingTextCache.CacheEntry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  v11 = v10 - 1;
  if (v10 - 1 <= v7)
    v12 = v7;
  else
    v12 = v10 - 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = v13 | 7;
  v15 = v13 + 8;
  v16 = (v13 | 7) + *(_QWORD *)(v6 + 64);
  if (a2 <= v12)
    goto LABEL_27;
  v17 = *(_QWORD *)(v8 + 64) + (v15 & ~v13) + (v16 & ~v14) + 1;
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if (v7 >= v11)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v24 = (unint64_t *)((v16 + a1) & ~v14);
      if ((v9 & 0x80000000) != 0)
      {
        v26 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v24 + v15) & ~v13);
      }
      else
      {
        v25 = *v24;
        if (v25 >= 0xFFFFFFFF)
          LODWORD(v25) = -1;
        v26 = v25 + 1;
      }
      if (v26 >= 2)
        return v26 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = v17;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v12 + v22 + 1;
}

void storeEnumTagSinglePayload for SizeFittingTextCache.CacheEntry(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 - 1 <= v8)
    v11 = v8;
  else
    v11 = v10 - 1;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = ((v12 + 8) & ~v12) + *(_QWORD *)(v9 + 64) + (((v12 | 7) + *(_QWORD *)(v7 + 64)) & ~(v12 | 7)) + 1;
  if (a3 <= v11)
  {
    v14 = 0;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v11 < a2)
  {
    v15 = ~v11 + a2;
    if (v13 < 4)
    {
      if ((((_DWORD)v12 + 8) & ~(_DWORD)v12)
         + *(_DWORD *)(v9 + 64)
         + (((v12 | 7) + *(_DWORD *)(v7 + 64)) & ~(v12 | 7)) != -1)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, ((v12 + 8) & ~v12) + *(_QWORD *)(v9 + 64) + (((v12 | 7) + *(_QWORD *)(v7 + 64)) & ~(v12 | 7)) + 1);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, ((v12 + 8) & ~v12) + *(_QWORD *)(v9 + 64) + (((v12 | 7) + *(_QWORD *)(v7 + 64)) & ~(v12 | 7)) + 1);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void type metadata accessor for SizeFittingTextCache.CacheEntry()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for SizeFittingTextCacheValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeFittingTextCacheValue);
}

uint64_t type metadata completion function for SizeFittingTextCacheValue()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SizeFittingTextCacheValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for SizeFittingTextCacheValue(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for SizeFittingTextCacheValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *assignWithCopy for SizeFittingTextCacheValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *initializeWithTake for SizeFittingTextCacheValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for SizeFittingTextCacheValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingTextCacheValue(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C013C4 + 4 * byte_23528BAD6[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SizeFittingTextCacheValue(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_QWORD *initializeBufferWithCopyOfBuffer for ClosestFitCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClosestFitCache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ClosestFitCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ClosestFitCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClosestFitCache);
}

BOOL ResolvedTextHelper.shouldUpdate(for:inputChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Update;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  double *v53;
  int EnumCaseMultiPayload;
  double v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;

  v7 = v6;
  v14 = type metadata accessor for Date();
  v73 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x24BDAC7A8](Update);
  v19 = (double *)((char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a6 & 1) == 0)
    goto LABEL_18;
  v20 = *a5;
  v21 = v7[9];
  if (v21)
  {
    if (!a4)
      return 1;
    v23 = v7[6];
    v22 = v7[7];
    v24 = v7[8];
    v25 = v24;
    v72 = v22;
    if ((v24 & 1) != 0)
    {
      v26 = a3;
      if ((a3 & 1) != 0)
      {
        v67 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 96);
        v68 = v20;
        v70 = v23;
        v71 = a3;
        v27 = v24;
        outlined copy of Text?(v23, v22, v24, v21);
        v28 = v72;
        outlined copy of Text?(v70, v72, v27, v21);
        v69 = a1;
        outlined copy of Text?(a1, a2, v71, a4);
        v29 = v70;
        outlined copy of Text.Storage(v70, v28, 1);
        v30 = v69;
        outlined copy of Text.Storage(v69, a2, 1);
        v31 = v30;
        v32 = v29;
        LODWORD(v67) = v67(v31);
        v33 = a2;
        v34 = a2;
        v35 = v69;
        outlined consume of Text.Storage(v69, v34, 1);
        outlined consume of Text.Storage(v32, v72, 1);
        v36 = 1;
        v37 = v71;
LABEL_15:
        if ((v67 & 1) != 0)
        {
LABEL_16:
          LODWORD(v67) = v27 & 1;
          v65 = v37 & 1;
          LODWORD(v71) = specialized static Array<A>.== infix(_:_:)(v21, a4);
          outlined consume of Text.Storage(v35, v33, v65);
          swift_bridgeObjectRelease();
          v50 = v72;
          outlined consume of Text?(v32, v72, v27, v21);
          outlined consume of Text.Storage(v32, v50, (char)v67);
          swift_bridgeObjectRelease();
          v20 = v68;
          if ((v71 & 1) != 0)
            goto LABEL_17;
          return 1;
        }
LABEL_24:
        outlined consume of Text.Storage(v35, v33, v36);
        swift_bridgeObjectRelease();
        v62 = v72;
        outlined consume of Text?(v32, v72, v27, v21);
        outlined consume of Text.Storage(v32, v62, v27 & 1);
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    else
    {
      v26 = a3;
      if ((a3 & 1) == 0)
      {
        v68 = v20;
        v43 = a2;
        v71 = a3;
        v66 = a2;
        v64 = v25;
        if (v23 == a1 && v22 == a2)
        {
          v35 = a1;
          v44 = a1;
          v45 = v25;
          v32 = v23;
          outlined copy of Text?(v44, v43, v45, v21);
          outlined copy of Text?(v35, v66, v45, v21);
          v33 = v66;
          v46 = a3;
          v27 = v64;
          outlined copy of Text?(v35, v66, v46, a4);
          v37 = v71;
          goto LABEL_16;
        }
        v69 = a1;
        v70 = v23;
        v47 = v22;
        LODWORD(v67) = _stringCompareWithSmolCheck(_:_:expecting:)();
        v48 = v25;
        v32 = v70;
        outlined copy of Text?(v70, v47, v48, v21);
        outlined copy of Text?(v32, v47, v48, v21);
        v35 = v69;
        v33 = v66;
        v49 = a3;
        v27 = v64;
        outlined copy of Text?(v69, v66, v49, a4);
        v37 = v71;
        v36 = 0;
        goto LABEL_15;
      }
    }
    v27 = v24;
    v38 = (v24 & 1) == 0;
    v32 = v23;
    v39 = v22;
    v40 = v26;
    outlined copy of Text?(v23, v22, v24, v21);
    outlined copy of Text?(v32, v39, v27, v21);
    v41 = a1;
    v42 = a2;
    v35 = a1;
    v33 = v42;
    outlined copy of Text?(v41, v42, v40, a4);
    v36 = v38;
    goto LABEL_24;
  }
  if (a4)
    return 1;
LABEL_17:
  v51 = v20;
  swift_retain();
  v52 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v51);
  swift_release();
  if ((v52 & 1) != 0)
    return 1;
LABEL_18:
  v53 = (double *)((char *)v7 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
  outlined init with copy of TypesettingLanguage((uint64_t)v53, (uint64_t)v19, type metadata accessor for ResolvedTextHelper.NextUpdate);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v60 = *v19;
    return *(double *)AGGraphGetValue() >= v60;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v53, type metadata accessor for ResolvedTextHelper.NextUpdate);
    v55 = *v19;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v57 = *((_BYTE *)v19 + *(int *)(v56 + 64));
    v59 = v73;
    v58 = v74;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v16, (char *)v19 + *(int *)(v56 + 48), v74);
    v75 = v55;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v75, (uint64_t)v16, v57, &v76);
    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v58);
    v60 = v76;
    *v53 = v76;
    swift_storeEnumTagMultiPayload();
    return *(double *)AGGraphGetValue() >= v60;
  }
  return 0;
}

BOOL protocol witness for SizeFittingTextResolver.shouldUpdate(for:inputChanged:) in conformance ResolvedTextHelper(uint64_t *a1, char a2)
{
  return ResolvedTextHelper.shouldUpdate(for:inputChanged:)(*a1, a1[1], a1[2], a1[3], a1 + 4, a2);
}

_QWORD *protocol witness for SizeFittingTextResolver.value(for:) in conformance ResolvedTextHelper@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  __int128 v8;

  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 24);
  v8 = *(_OWORD *)(a1 + 32);
  result = ResolvedTextHelper.resolve(_:with:sizeFitting:)(v4, v3, v5, v6, (uint64_t *)&v8, 1);
  if (result)
  {
    *a2 = result;
    a2[1] = result;
    a2[2] = 0;
    return (_QWORD *)swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SizeFittingTextResolver.narrowerVariant.getter in conformance ResolvedTextHelper@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;

  result = outlined init with copy of TypesettingLanguage(v2, (uint64_t)a2, type metadata accessor for ResolvedTextHelper);
  v6 = *(int *)(a1 + 60);
  v7 = *(uint64_t *)((char *)a2 + v6);
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)a2 + v6) = v9;
    PropertyList.Tracker.reset()();
    outlined consume of Text?(a2[6], a2[7], a2[8], a2[9]);
    *((_OWORD *)a2 + 3) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    v10 = (uint64_t *)((char *)a2 + *(int *)(a1 + 56));
    outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for ResolvedTextHelper.NextUpdate);
    *v10 = 0;
    type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, 1, (uint64_t)&v4);
  return swift_release();
}

_UNKNOWN **associated type witness table accessor for SizeFittingTextResolver.Engine : LayoutEngine in ResolvedTextHelper()
{
  return &protocol witness table for StyledTextLayoutEngine;
}

Swift::Void __swiftcall SizeFittingTextFilter.updateValue()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  BOOL v7;
  _QWORD *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  BOOL v38;
  _QWORD *v39;
  _BOOL4 v40;
  _BOOL4 v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[6];
  _QWORD v49[3];
  unint64_t v50[3];
  uint64_t v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD **)(v0 + 16);
  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 16);
  v4 = *(_QWORD *)(Value + 24);
  v5 = (~v3 & 0x7FF0000000000000) == 0;
  v6 = (v3 & 0xFFFFFFFFFFFFFLL) != 0;
  v7 = v5 && v6;
  if (v5 && v6)
    v8 = 0;
  else
    v8 = *(_QWORD **)(Value + 16);
  v9 = (~v4 & 0x7FF0000000000000) == 0;
  v10 = (v4 & 0xFFFFFFFFFFFFFLL) != 0;
  v11 = v9 && v10;
  if (v9 && v10)
    v12 = 0;
  else
    v12 = *(_QWORD *)(Value + 24);
  swift_retain();
  LOBYTE(v50[0]) = v7;
  v13 = v11;
  LOBYTE(v49[0]) = v13;
  specialized SizeFittingTextCache.suggestedVariant(for:)((uint64_t)v8, v7, v12, v13, (uint64_t)&v51);
  if ((v52 & 1) != 0)
  {
    swift_beginAccess();
    swift_retain();
    LOBYTE(v50[0]) = v7;
    LOBYTE(v49[0]) = v13;
    LOBYTE(v44) = v13;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(v8, v7, *(double *)&v12, v13, v1 + 2, (uint64_t)v8, v7, (uint64_t *)v50, v12, v44, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    v14 = v50[0];
  }
  else
  {
    v14 = v51;
    v50[0] = v51;
  }
  swift_beginAccess();
  v16 = v1[12];
  v15 = v1[13];
  v17 = v1[14];
  v18 = v1[15];
  v19 = v1[16];
  v20 = v1[17];
  swift_beginAccess();
  v21 = v1[5];
  v46 = v16;
  v22 = v16;
  v23 = v18;
  outlined copy of Text?(v22, v15, v17, v18);
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[5] = v21;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_12;
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
  v1[5] = v21;
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_21;
LABEL_12:
  if (v14 >= *(_QWORD *)(v21 + 16))
    goto LABEL_22;
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  v26 = v25;
  v27 = v21
      + ((*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v14;
  v48[0] = v46;
  v48[1] = v15;
  v48[2] = v17;
  v48[3] = v18;
  v48[4] = v19;
  v48[5] = v20;
  specialized SizeFittingTextCache.CacheEntry.result(for:)(v49, v48);
  v45 = v17;
  v28 = v49[0];
  v29 = v49[1];
  v30 = v49[2];
  v31 = (uint64_t *)(v27 + *(int *)(v26 + 52));
  v32 = *v31;
  swift_retain();
  outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v32);
  *v31 = v28;
  v31[1] = v29;
  v31[2] = v30;
  outlined consume of Text?(v46, v15, v45, v23);
  swift_release();
  swift_release();
  swift_endAccess();
  swift_release();
  v50[0] = v28;
  type metadata accessor for ResolvedStyledText();
  AGGraphSetOutputValue();
  swift_release();
  v33 = AGGraphGetValue();
  v34 = *(_QWORD *)(v33 + 16);
  v35 = *(_QWORD *)(v33 + 24);
  v36 = (~v34 & 0x7FF0000000000000) == 0;
  v37 = (v34 & 0xFFFFFFFFFFFFFLL) != 0;
  v38 = v36 && v37;
  if (v36 && v37)
    v39 = 0;
  else
    v39 = *(_QWORD **)(v33 + 16);
  v40 = (~v35 & 0x7FF0000000000000) == 0;
  v41 = (v35 & 0xFFFFFFFFFFFFFLL) != 0;
  v42 = v40 && v41;
  if (v40 && v41)
    v43 = 0;
  else
    v43 = *(_QWORD *)(v33 + 24);
  swift_retain();
  LOBYTE(v50[0]) = v38;
  LOBYTE(v49[0]) = v42;
  specialized SizeFittingTextCache.withResolver<A>(for:compute:)(v39, v38, v43, v42, (uint64_t)v1, v47, v42);
  swift_release();
}

uint64_t closure #2 in SizeFittingTextFilter.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Update;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double *v11;
  int EnumCaseMultiPayload;
  double v13;
  uint64_t v14;
  char v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t v27;
  double v28[3];
  double v29;

  v27 = a2;
  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x24BDAC7A8](Update);
  v9 = (uint64_t *)((char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for ResolvedTextHelper(0);
  v11 = (double *)(a1 + *(int *)(v10 + 56));
  outlined init with copy of TypesettingLanguage((uint64_t)v11, (uint64_t)v9, type metadata accessor for ResolvedTextHelper.NextUpdate);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
      goto LABEL_9;
    outlined destroy of TypesettingConfiguration((uint64_t)v11, type metadata accessor for ResolvedTextHelper.NextUpdate);
    v13 = *(double *)v9;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v15 = *((_BYTE *)v9 + *(int *)(v14 + 64));
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, (char *)v9 + *(int *)(v14 + 48), v3);
    v29 = v13;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v29, (uint64_t)v6, v15, v28);
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v16 = v28[0];
    *v11 = v28[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v16 = *(double *)v9;
  }
  if (*(double *)AGGraphGetValue() < v16)
  {
    v17 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    v18 = *(double *)(v17 + 376);
    if (v16 < v18)
      v18 = v16;
    *(double *)(v17 + 376) = v18;
    swift_release();
  }
LABEL_9:
  v19 = *(_QWORD *)(v27 + 16);
  v20 = *(_QWORD *)(a1 + *(int *)(v10 + 60));
  result = AGGraphGetValue();
  v22 = *(_QWORD *)(result + 16);
  v23 = *(_QWORD *)(result + 24);
  v24 = ((~v22 & 0x7FF0000000000000) == 0) & ((v22 & 0xFFFFFFFFFFFFFLL) != 0);
  if ((~v22 & 0x7FF0000000000000) == 0 && (v22 & 0xFFFFFFFFFFFFFLL) != 0)
    v22 = 0;
  v25 = (~v23 & 0x7FF0000000000000) == 0;
  v26 = (v23 & 0xFFFFFFFFFFFFFLL) != 0;
  *(_QWORD *)(v19 + 56) = v20;
  *(_QWORD *)(v19 + 64) = v22;
  if (v25 && v26)
    v23 = 0;
  *(_QWORD *)(v19 + 72) = v24;
  *(_QWORD *)(v19 + 80) = v23;
  *(_BYTE *)(v19 + 88) = v25 && v26;
  *(_BYTE *)(v19 + 89) = 0;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SizeFittingTextFilter()
{
  return 32;
}

Swift::Void __swiftcall SizeFittingTextLayoutComputer.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t CurrentAttribute;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21[6];

  v1 = v0;
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_QWORD *)Value;
  v6 = *(_QWORD *)(Value + 8);
  v7 = *(unsigned __int8 *)(Value + 16);
  v8 = *(_QWORD *)(Value + 24);
  v9 = (uint64_t *)AGGraphGetValue();
  v11 = v4 | v10;
  v12 = *v9;
  v13 = v9[1];
  v14 = *(_QWORD *)(v1 + 8);
  outlined copy of Text.Storage(v5, v6, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Text.Storage(v5, v6, v7);
  v21[0] = v5;
  v21[1] = v6;
  v21[2] = v7;
  v21[3] = v8;
  v21[4] = v12;
  v21[5] = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized SizeFittingTextCache.input.setter(v21, v11 & 1);
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v18[1] = v18;
    v19 = CurrentAttribute;
    v20 = v14;
    MEMORY[0x24BDAC7A8](CurrentAttribute);
    v17[2] = &v19;
    MEMORY[0x24BDAC7A8](v16);
    swift_retain();
    specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v17, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
    swift_release();
    swift_release();
    outlined consume of Text.Storage(v5, v6, v7);
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t SizeFittingTextLayoutComputer.Engine.layoutPriority()()
{
  uint64_t result;

  result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

void closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v7[7];
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  _BYTE v12[8];

  v8 = 0;
  v9 = 1;
  v10 = 0;
  v11 = 1;
  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a6;
  v7[5] = a7;
  SizeFittingTextCache.withValue<A>(for:compute:)(&v8, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority(), (uint64_t)v7, MEMORY[0x24BEE13C8], (uint64_t)v12);
}

void sub_234C02620()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)v0 = *(_QWORD *)(v1 - 40);
  *(_BYTE *)(v0 + 8) = 0;
}

void closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(double *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  *a1 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()()
{
  uint64_t result;

  result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

void closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[8];
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;

  v9 = 0;
  v10 = 1;
  v11 = 0;
  v12 = 1;
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a6;
  v8[5] = a7;
  SizeFittingTextCache.withValue<A>(for:compute:)(&v9, a8, (uint64_t)v8, MEMORY[0x24BEE1328], (uint64_t)&v13);
}

void sub_234C0286C()
{
  _BYTE *v0;
  uint64_t v1;

  *v0 = *(_BYTE *)(v1 - 33);
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t SizeFittingTextLayoutComputer.Engine.spacing()()
{
  uint64_t result;

  result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

void closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v6[7];
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];

  v7 = 0;
  v8 = 1;
  v9 = 0;
  v10 = 1;
  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a6;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)(&v7, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing(), (uint64_t)v6, (uint64_t)&type metadata for Spacing, (uint64_t)v11);
}

uint64_t sub_234C02A0C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release();
  *v0 = *(_QWORD *)(v1 - 40);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)()
{
  uint64_t result;

  result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

void closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[7];
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  _BYTE v20[16];

  v16 = a3;
  v17 = a4 & 1;
  v18 = a5;
  v19 = a6 & 1;
  v12[2] = a7;
  v12[3] = a8;
  v12[4] = a9;
  v12[5] = a10;
  v12[6] = a3;
  v13 = a4 & 1;
  v14 = a5;
  v15 = a6 & 1;
  type metadata accessor for CGSize(0);
  v11 = v10;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)(&v16, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:), (uint64_t)v12, v11, (uint64_t)v20);
}

__n128 sub_234C02BF0()
{
  __n128 *v0;
  uint64_t v1;
  __n128 result;

  swift_release();
  result = *(__n128 *)(v1 - 48);
  *v0 = result;
  v0[1].n128_u8[0] = 0;
  return result;
}

void closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v10 = a1;
  v11 = a2 & 1;
  v12 = a3;
  v13 = a4 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  *(double *)a5 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  *(_QWORD *)(a5 + 8) = v9;
}

uint64_t SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)()
{
  uint64_t result;

  result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

void closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, char a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _BYTE v22[8];

  v18 = a3;
  v19 = a4 & 1;
  v20 = a5;
  v21 = a6 & 1;
  v10[2] = a8;
  v11 = a9;
  v12 = a10;
  v13 = a3;
  v14 = a4 & 1;
  v15 = a5;
  v16 = a6 & 1;
  v17 = a7 & 1;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)(&v18, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:), (uint64_t)v10, MEMORY[0x24BEE50B0], (uint64_t)v22);
}

uint64_t sub_234C02E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)v0 = *(_QWORD *)(v1 - 40);
  *(_BYTE *)(v0 + 8) = 0;
  return result;
}

void closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, char a5@<W5>, double *a6@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v7 = a5 & 1;
  v11 = a1;
  v12 = a2 & 1;
  v13 = a3;
  v14 = a4 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  *a6 = (*(double (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v11, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)()
{
  uint64_t result;

  AGGraphWithUpdate();
  result = 0;
  __break(1u);
  return result;
}

void closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[13];
  double v15;
  char v16;
  double v17;
  char v18;
  _BYTE v19[8];

  v15 = a1;
  v16 = 0;
  v17 = a2;
  v18 = 0;
  v14[2] = a9;
  v14[3] = a10;
  v14[4] = a11;
  v14[5] = a12;
  *(double *)&v14[6] = a1;
  *(double *)&v14[7] = a2;
  *(double *)&v14[8] = a3;
  *(double *)&v14[9] = a4;
  *(double *)&v14[10] = a5;
  *(double *)&v14[11] = a6;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v13 = v12;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)((uint64_t *)&v15, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:), (uint64_t)v14, v13, (uint64_t)v19);
}

uint64_t sub_234C02FF8()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release();
  *v0 = *(_QWORD *)(v1 - 40);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[4];

  *(double *)v14 = a2;
  *(double *)&v14[1] = a3;
  *(double *)&v14[2] = a4;
  *(double *)&v14[3] = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 56))(v14, AssociatedTypeWitness, AssociatedConformanceWitness, a6, a7);
  *a1 = result;
  return result;
}

uint64_t SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  AGGraphWithUpdate();
  return 0;
}

void closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[12];
  double v14;
  char v15;
  double v16;
  char v17;
  _BYTE v18[16];

  v14 = a1;
  v15 = 0;
  v16 = a2;
  v17 = 0;
  v13[2] = a8;
  v13[3] = a9;
  v13[4] = a10;
  v13[5] = a11;
  v13[6] = a7;
  *(double *)&v13[7] = a1;
  *(double *)&v13[8] = a2;
  *(double *)&v13[9] = a3;
  *(double *)&v13[10] = a4;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CGFloat?, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = v11;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)((uint64_t *)&v14, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:), (uint64_t)v13, v12, (uint64_t)v18);
}

uint64_t sub_234C031F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3;

  result = swift_release();
  v3 = *(_BYTE *)(v1 - 40);
  *(_QWORD *)v0 = *(_QWORD *)(v1 - 48);
  *(_BYTE *)(v0 + 8) = v3;
  return result;
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t result;
  char v12;
  _QWORD v13[4];

  *(double *)v13 = a3;
  *(double *)&v13[1] = a4;
  *(double *)&v13[2] = a5;
  *(double *)&v13[3] = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(a1, v13, AssociatedTypeWitness, AssociatedConformanceWitness);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v12 & 1;
  return result;
}

void SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v6[8];
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  _BYTE v11[16];

  v7 = 0;
  v8 = 1;
  v9 = 0;
  v10 = 1;
  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a6;
  SizeFittingTextCache.withValue<A>(for:compute:)(&v7, (uint64_t)partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter, (uint64_t)v6, MEMORY[0x24BEE0D00], (uint64_t)v11);
}

unint64_t sub_234C03358()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *(_QWORD *)(v0 - 48);
  v2 = *(void **)(v0 - 40);
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD00000000000001ELL;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v6)
    v7 = result;
  else
    v7 = 0;
  v8 = 0xE000000000000000;
  if (v6)
    v8 = v6;
  *a1 = v7;
  a1[1] = v8;
  return result;
}

uint64_t protocol witness for LayoutEngine.layoutPriority() in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return SizeFittingTextLayoutComputer.Engine.layoutPriority()();
}

uint64_t protocol witness for LayoutEngine.ignoresAutomaticPadding() in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return protocol witness for LayoutEngine.ignoresAutomaticPadding() in conformance SizeFittingTextLayoutComputer.Engine<A, B>();
}

{
  return SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()() & 1;
}

uint64_t protocol witness for LayoutEngine.requiresSpacingProjection() in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return protocol witness for LayoutEngine.ignoresAutomaticPadding() in conformance SizeFittingTextLayoutComputer.Engine<A, B>();
}

uint64_t protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)();
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)();
}

void protocol witness for LayoutEngine.debugContentDescription.getter in conformance SizeFittingTextLayoutComputer.Engine<A, B>(uint64_t *a1)
{
  unsigned int *v1;

  SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(*v1, *((_QWORD *)v1 + 1), a1[2], a1[3], a1[4], a1[5]);
}

void type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText))
  {
    MEMORY[0x24BDAC7A8](0);
    type metadata accessor for Date();
    type metadata accessor for ResolvedStyledText();
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText));
  }
}

uint64_t partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)()
{
  return partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t partial apply for closure #2 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 237) & 1;
  return result;
}

uint64_t sub_234C03660()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 40);
  v2 = **(_QWORD **)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v3 = (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(v2 + 104) + 16))(&v5, *(_QWORD *)(v2 + 88));
  return v1(v3);
}

uint64_t sub_234C036E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SizeFittingTextCache.suggestedVariant(for:)()
{
  uint64_t v0;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v0 + 16) = 1;
  return result;
}

BOOL partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:)@<W0>(_BYTE *a1@<X8>)
{
  return partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:)(a1);
}

{
  uint64_t v1;

  return closure #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)(*(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), a1);
}

void partial apply for closure #1 in SizeFittingTextCache.sizeVariant(for:)(uint64_t *a1)
{
  uint64_t v1;

  closure #1 in SizeFittingTextCache.sizeVariant(for:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
}

uint64_t outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(a1);
}

uint64_t outlined assign with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized SizeFittingTextFilter.init(size:text:environment:time:referenceDate:includeDefaultAttributes:allowsKeyColors:archiveOptions:features:attachmentsAsAuxiliaryMetadata:idiom:)(unsigned int a1, uint64_t a2, int a3, int a4, unint64_t a5, int a6, unsigned int a7, __int16 *a8, __int16 *a9, char a10, __int128 *a11)
{
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a6;
  *(_QWORD *)&v39 = __PAIR64__(a1, a7);
  v12 = a5;
  v40 = a3;
  *((_QWORD *)&v39 + 1) = a2;
  v14 = HIDWORD(a5);
  v15 = type metadata accessor for ResolvedTextHelper(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a8;
  v19 = *a9;
  *(_QWORD *)&v17[*(int *)(v20 + 56)] = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  v37 = *a11;
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)v17 = a4;
  *((_DWORD *)v17 + 1) = v12;
  *((_DWORD *)v17 + 2) = v14;
  v17[12] = v38;
  v17[13] = v39;
  *((_WORD *)v17 + 7) = v18;
  *((_WORD *)v17 + 8) = v19;
  v17[18] = a10;
  *(_OWORD *)(v17 + 24) = v37;
  type metadata accessor for PropertyList.Tracker();
  v21 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v23 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 56) = 0;
  *(_QWORD *)(v21 + 16) = v22;
  *((_QWORD *)v17 + 5) = v21;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *(_QWORD *)&v17[*(int *)(v15 + 60)] = 0;
  v41 = 0;
  v42 = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v25 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v26 = static CoreGlue2.shared;
  v25(&v41);

  v28 = v41;
  v27 = v42;
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, &lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = 10;
  *(_QWORD *)(v29 + 24) = v24;
  *(_BYTE *)(v29 + 32) = 0;
  type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>();
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  v31 = v30;
  v32 = *(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_23527E860;
  outlined init with copy of TypesettingLanguage((uint64_t)v17, v34 + v33, type metadata accessor for ResolvedTextHelper);
  v35 = (_QWORD *)(v34 + v33 + *(int *)(v31 + 52));
  *v35 = 0;
  v35[1] = 0;
  v35[2] = 0;
  *(_BYTE *)(v34 + v33 + *(int *)(v31 + 56)) = 0;
  outlined destroy of TypesettingConfiguration((uint64_t)v17, type metadata accessor for ResolvedTextHelper);
  *(_QWORD *)(v29 + 40) = v34;
  *(_WORD *)(v29 + 48) = 0;
  *(_OWORD *)(v29 + 56) = 0u;
  *(_OWORD *)(v29 + 72) = 0u;
  *(_WORD *)(v29 + 88) = 256;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_QWORD *)(v29 + 128) = v28;
  *(_QWORD *)(v29 + 136) = v27;
  return v39 >> 32;
}

void type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = type metadata accessor for ResolvedTextHelper(255);
    v8[1] = &type metadata for StickyTextSizeFittingLogic;
    v8[2] = &protocol witness table for ResolvedTextHelper;
    v8[3] = &protocol witness table for StickyTextSizeFittingLogic;
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>)
  {
    type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(255, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>);
  }
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StickyTextSizeFittingLogic(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[42])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StickyTextSizeFittingLogic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for StickyTextSizeFittingLogic()
{
  return &type metadata for StickyTextSizeFittingLogic;
}

uint64_t initializeBufferWithCopyOfBuffer for SizeFittingTextLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SizeFittingTextLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SizeFittingTextLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void type metadata accessor for SizeFittingTextLayoutComputer.Engine()
{
  JUMPOUT(0x23B7C9B5CLL);
}

_QWORD *initializeBufferWithCopyOfBuffer for SizeFittingTextLayoutComputer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SizeFittingTextLayoutComputer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for SizeFittingTextLayoutComputer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SizeFittingTextLayoutComputer()
{
  return &type metadata for SizeFittingTextLayoutComputer;
}

uint64_t initializeBufferWithCopyOfBuffer for SizeFittingTextFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SizeFittingTextFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SizeFittingTextFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SizeFittingTextFilter()
{
  return &type metadata for SizeFittingTextFilter;
}

ValueMetadata *type metadata accessor for VariantThatFitsFlag()
{
  return &type metadata for VariantThatFitsFlag;
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextSizeVariantKey()
{
  return &type metadata for EnvironmentValues.TextSizeVariantKey;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in VariantThatFitsFlag()
{
  return &protocol witness table for VariantThatFitsFlag;
}

uint64_t associated type witness table accessor for ViewInputFlag.Input.PropertyKey.Value : Equatable in VariantThatFitsFlag()
{
  return MEMORY[0x24BEE1340];
}

unint64_t instantiation function for generic protocol witness table for SizeFittingTextFilter(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SizeFittingTextFilter and conformance SizeFittingTextFilter();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingTextFilter and conformance SizeFittingTextFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingTextFilter and conformance SizeFittingTextFilter;
  if (!lazy protocol witness table cache variable for type SizeFittingTextFilter and conformance SizeFittingTextFilter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SizeFittingTextFilter, &type metadata for SizeFittingTextFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingTextFilter and conformance SizeFittingTextFilter);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SizeFittingTextLayoutComputer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SizeFittingTextLayoutComputer, &type metadata for SizeFittingTextLayoutComputer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer);
  }
  return result;
}

void type metadata accessor for (value: ResolvableStringResolutionContext, changed: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (value: ResolvableStringResolutionContext, changed: Bool))
  {
    type metadata accessor for ResolvableStringResolutionContext();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: ResolvableStringResolutionContext, changed: Bool));
  }
}

uint64_t outlined assign with take of ResolvableStringResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  uint64_t v0;

  closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)(*(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)(*(_QWORD *)(v1 + 48), a1, *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80));
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)()
{
  uint64_t v0;

  closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)(*(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)@<X0>(uint64_t *a1@<X8>)
{
  double *v1;

  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)(a1, v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)()
{
  uint64_t v0;

  closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), *(_BYTE *)(v0 + 89), *(_QWORD *)(v0 + 16), *(_OWORD *)(v0 + 24), *(_QWORD *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(double *a1@<X8>)
{
  uint64_t v1;

  closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(*(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), *(_BYTE *)(v1 + 73), a1);
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)()
{
  uint64_t v0;

  closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(*(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), a1);
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()()
{
  uint64_t *v0;

  closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()()
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()();
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()()
{
  partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()((uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection());
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()(a1);
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()()
{
  partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()((uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding());
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()(*(_QWORD *)(v1 + 48), *(unsigned int *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()(a1);
}

void partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()()
{
  uint64_t v0;

  closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(*(_QWORD *)(v0 + 48), *(unsigned int *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(double *a1@<X8>)
{
  closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(a1);
}

void View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)()
{
  type metadata accessor for KeyframeAnimator();
}

void sub_234C04590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v1;
  *(_QWORD *)(v3 - 120) = a1;
  *(_QWORD *)(v3 - 112) = v2;
  *(_QWORD *)(v3 - 104) = &protocol witness table for KeyframeAnimator<A, B, C>;
  type metadata accessor for CustomModifier();
}

void sub_234C045AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x24BDAC7A8](a1);
  closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(*(_QWORD *)(v15 - 192), *(_QWORD *)(v15 - 184), *(_QWORD *)(v15 - 176), *(_QWORD *)(v15 - 168), *(_QWORD *)(v15 - 160), *(_QWORD *)(v15 - 152), v9, (uint64_t)&a9 - v16, *(_QWORD *)(v15 - 200), v10, v14, v11, *(_QWORD *)(v15 - 208), v12, v13);
}

uint64_t sub_234C04610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  View.modifier<A>(_:)(v3, v0, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
}

void type metadata accessor for KeyframeAnimator()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for CustomModifier()
{
  JUMPOUT(0x23B7C9B5CLL);
}

{
  JUMPOUT(0x23B7C9B5CLL);
}

void closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[22];

  v22[9] = a7;
  v22[10] = a3;
  v22[12] = a5;
  v22[13] = a6;
  v22[14] = a8;
  v22[15] = a4;
  v22[3] = a1;
  v22[4] = a2;
  v22[8] = a13;
  v22[1] = a15;
  MEMORY[0x24BDAC7A8](a1);
  v22[0] = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v22[2] = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[16] = v18;
  v22[17] = v19;
  v22[18] = a10;
  v22[19] = v20;
  v22[20] = v21;
  type metadata accessor for KeyframeAnimator();
}

void sub_234C04740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v19 - 208) = a1;
  *(_QWORD *)(v19 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v19 - 216) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v19 - 200) = (char *)&a9 - v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v13 + 16))(v10, *(_QWORD *)(v19 - 232), v12, v22);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v17, *(_QWORD *)(v19 - 224), v16);
  v24 = (_QWORD *)swift_allocObject();
  v26 = *(_QWORD *)(v19 - 184);
  v25 = *(_QWORD *)(v19 - 176);
  v24[2] = v26;
  v24[3] = v12;
  v24[4] = v16;
  v24[5] = v14;
  v24[6] = v15;
  v24[7] = v18;
  v27 = v15;
  v28 = v18;
  v29 = *(_QWORD *)(v19 - 192);
  v24[8] = v29;
  v24[9] = v9;
  v30 = v9;
  v31 = *(_QWORD *)(v19 - 248);
  v24[10] = v31;
  v24[11] = v25;
  v24[12] = *(_QWORD *)(v19 - 136);
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = v26;
  v32[3] = v12;
  v32[4] = v16;
  v32[5] = v14;
  v32[6] = v27;
  v32[7] = v28;
  v32[8] = v29;
  v32[9] = v30;
  v33 = *(_QWORD *)(v19 - 160);
  v34 = *(_QWORD *)(v19 - 152);
  v32[10] = v31;
  v32[11] = v33;
  v32[12] = v34;
  KeyframeAnimator.init<A>(initialValue:trigger:content:keyframes:)(*(_QWORD *)(v19 - 240), v12, *(_QWORD *)(v19 - 216));
}

uint64_t sub_234C04880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(v1 - 208);
  v2 = *(_QWORD *)(v1 - 200);
  static ViewBuilder.buildExpression<A>(_:)(v0, v3, &protocol witness table for KeyframeAnimator<A, B, C>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 168) + 8);
  swift_retain();
  swift_retain();
  v4(v0, v3);
  static ViewBuilder.buildBlock<A>(_:)(v2, v3, *(_QWORD *)(v1 - 144));
  return v4(v2, v3);
}

uint64_t closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v21 - v15;
  v18 = PlaceholderContentView.init()(v17);
  a2(v18, a1);
  static ViewBuilder.buildExpression<A>(_:)(v13, a3, a7);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, a3);
}

uint64_t closure #2 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void (*v21)(double);
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v14 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v24 - v19;
  v21(v18);
  static KeyframesBuilder.buildExpression<A>(_:)((uint64_t)v16, a8, (uint64_t)v20);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v16, a8);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v20, a5, a8, a12);
  v22(v20, a8);
  static KeyframesBuilder.buildFinalResult<A>(_:)(v16, a5, a8, a12);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, a8);
}

void KeyframeAnimator.init<A>(initialValue:trigger:content:keyframes:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for KeyframeAnimator();
}

uint64_t sub_234C04B80(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (_QWORD *)(v7 + a1[15]);
  *v10 = v5;
  v10[1] = v4;
  v11 = (_QWORD *)(v7 + a1[17]);
  *v11 = v6;
  v11[1] = v14;
  result = AnyEquatable.init<A>(_:)(v15, v8, v13, a4, &v16);
  *(_QWORD *)(v7 + a1[16]) = v16;
  return result;
}

void View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)()
{
  type metadata accessor for KeyframeAnimator();
}

void sub_234C04C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = v1;
  *(_QWORD *)(v3 - 112) = a1;
  *(_QWORD *)(v3 - 104) = v2;
  *(_QWORD *)(v3 - 96) = &protocol witness table for KeyframeAnimator<A, B, C>;
  type metadata accessor for CustomModifier();
}

void sub_234C04C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x24BDAC7A8](a1);
  closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(*(_QWORD *)(v16 - 184), *(_DWORD *)(v16 - 172), *(_QWORD *)(v16 - 168), *(_QWORD *)(v16 - 160), *(_QWORD *)(v16 - 152), *(_QWORD *)(v16 - 144), v9, v11, (uint64_t)&a9 - v17, v14, v15, v12, v10, v13);
}

uint64_t sub_234C04CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  View.modifier<A>(_:)(v4, v0, v3, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
}

void closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[12];
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v16[5] = a7;
  v16[6] = a3;
  v16[9] = a5;
  v16[10] = a6;
  v17 = a2;
  v18 = a9;
  v16[3] = a4;
  v16[4] = a12;
  v16[1] = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16[2] = (char *)v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v15;
  v20 = a11;
  v21 = a10;
  v22 = a14;
  v23 = a13;
  type metadata accessor for KeyframeAnimator();
}

void sub_234C04D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v18 - 176) = a1;
  *(_QWORD *)(v18 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v18 - 184) = (char *)&a9 - v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 16))(v9, v16, v15, v22);
  v24 = (_QWORD *)swift_allocObject();
  v26 = *(_QWORD *)(v18 - 208);
  v25 = *(_QWORD *)(v18 - 200);
  v24[2] = v25;
  v24[3] = v15;
  v24[4] = v17;
  v24[5] = v14;
  v24[6] = v26;
  v24[7] = v11;
  v27 = *(_QWORD *)(v18 - 192);
  v24[8] = v10;
  v24[9] = v27;
  v24[10] = v13;
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = v25;
  v28[3] = v15;
  v28[4] = v17;
  v28[5] = v14;
  v28[6] = v26;
  v28[7] = v11;
  v29 = *(_QWORD *)(v18 - 168);
  v30 = *(_QWORD *)(v18 - 160);
  v28[8] = v10;
  v28[9] = v29;
  v28[10] = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 232) + 32))(v20, *(_QWORD *)(v18 - 224), v15);
  *(_QWORD *)(v18 - 128) = v15;
  *(_QWORD *)(v18 - 120) = v14;
  *(_QWORD *)(v18 - 112) = v17;
  *(_QWORD *)(v18 - 104) = v10;
  *(_QWORD *)(v18 - 96) = v11;
  type metadata accessor for KeyframeAnimator();
}

uint64_t sub_234C04E94(int *a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v5 = (uint64_t (**)(uint64_t))(v2 + a1[15]);
  *v5 = partial apply for closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:);
  v5[1] = v1;
  v6 = (uint64_t (**)(uint64_t))(v2 + a1[17]);
  *v6 = partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:);
  v6[1] = v3;
  *(_QWORD *)(v2 + a1[16]) = ((*(_DWORD *)(v4 - 140) & 1) == 0) | 0x8000000000000000;
  v8 = *(_QWORD *)(v4 - 184);
  v7 = *(_QWORD *)(v4 - 176);
  static ViewBuilder.buildExpression<A>(_:)(v2, v7, &protocol witness table for KeyframeAnimator<A, B, C>);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 8);
  swift_retain();
  swift_retain();
  v9(v2, v7);
  static ViewBuilder.buildBlock<A>(_:)(v8, v7, *(_QWORD *)(v4 - 136));
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v8, v7);
}

uint64_t closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - v13;
  v16 = PlaceholderContentView.init()(v15);
  a2(v16, a1);
  static ViewBuilder.buildExpression<A>(_:)(v11, a3, a5);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, a3);
}

uint64_t closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(double);
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v22 - v17;
  v19(v16);
  static KeyframesBuilder.buildExpression<A>(_:)((uint64_t)v14, a7, (uint64_t)v18);
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, a7);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v18, a5, a7, a10);
  v20(v18, a7);
  static KeyframesBuilder.buildFinalResult<A>(_:)(v14, a5, a7, a10);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, a7);
}

void KeyframeAnimator.init(initialValue:repeating:content:keyframes:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for KeyframeAnimator();
}

int *sub_234C051D4(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v7 = (_QWORD *)(v6 + result[15]);
  *v7 = v2;
  v7[1] = v1;
  v8 = (_QWORD *)(v6 + result[17]);
  *v8 = v4;
  v8[1] = v3;
  *(_QWORD *)(v6 + result[16]) = ((v5 & 1) == 0) | 0x8000000000000000;
  return result;
}

void static CustomModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = type metadata accessor for PlaceholderContentView(0, a5, a3, a4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v5, a3, a4, v5);
  type metadata accessor for CustomModifier();
}

{
  uint64_t v5;

  v5 = type metadata accessor for PlaceholderContentView(0, a5, a3, a4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v5, a3, a4, v5);
  type metadata accessor for CustomModifier();
}

uint64_t sub_234C05320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int ShouldRecordTree;
  void (*v15)(_QWORD *__return_ptr, int *, uint64_t *);
  uint64_t result;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _DWORD v48[74];

  type metadata accessor for _GraphValue(0, a1, a3, a4);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:), v4, &v31);
  v28 = v31;
  v7 = v5[11];
  v8 = v5[13];
  v24 = *(_DWORD *)(v6 - 168);
  v22 = *(_DWORD *)(v6 - 184);
  v23 = *(_DWORD *)(v6 - 164);
  v9 = *(_DWORD *)(v6 - 156);
  v25 = *(_DWORD *)(v6 - 160);
  v10 = v5[16];
  v11 = v5[17];
  v12 = *(_DWORD *)(v6 - 136);
  v20 = *(_DWORD *)(v6 - 128);
  v21 = *(_DWORD *)(v6 - 132);
  v13 = *(_DWORD *)(v6 - 120);
  v18 = *(_DWORD *)(v6 - 116);
  v19 = *(_DWORD *)(v6 - 124);
  v17 = *(_DWORD *)(v6 - 112);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  *v5 = v7;
  v5[2] = v8;
  v48[2] = v22;
  v48[6] = v24;
  v48[7] = v23;
  v48[9] = v9;
  v5[5] = v10;
  v5[6] = v11;
  v48[14] = v12;
  v48[15] = v21;
  v48[16] = v20;
  v48[17] = v19;
  v48[18] = v13;
  v48[19] = v18;
  v48[20] = v17;
  v29 = v28;
  v32 = v7;
  v33 = v22;
  v34 = v8;
  v35 = v24;
  v36 = v23;
  v37 = 0;
  v38 = v9;
  v39 = v10;
  v40 = v11;
  v41 = v12;
  v42 = v21;
  v43 = v20;
  v44 = v19;
  v45 = v13;
  v46 = v18;
  v47 = v17;
  v15 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *))(v26 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v30, &v29, &v32);
  v48[8] = v25;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v30, (uint64_t)v48);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  result = swift_release();
  *v27 = v30[0];
  v27[1] = v30[1];
  return result;
}

void closure #1 in static CustomModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for CustomModifier();
}

uint64_t sub_234C055E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, v1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v8;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  static CustomModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

{
  static CustomModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

void static KeyframeAnimator._makeView(view:inputs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  _QWORD v13[17];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v13[15] = a1;
  v15 = a7;
  v21 = *MEMORY[0x24BDAC8D0];
  v13[2] = a5;
  v14 = type metadata accessor for KeyframeTrackState(0, a2, a3, a5);
  MEMORY[0x24BDAC7A8](v14);
  v13[16] = (char *)v13 - v12;
  v16 = a2;
  v17 = a3;
  v13[0] = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  type metadata accessor for AnimatorAttribute();
}

void sub_234C05714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v9 + 80) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v9 + 32) = (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v13 = *v10;
  *(_DWORD *)(v9 + 28) = *((_DWORD *)v10 + 2);
  *(_QWORD *)(v9 + 112) = v10[2];
  *(_QWORD *)(v9 + 120) = v13;
  *(_DWORD *)(v9 + 12) = *((_DWORD *)v10 + 6);
  *(_DWORD *)(v9 + 44) = *((_DWORD *)v10 + 7);
  *(_DWORD *)(v9 + 92) = *((_DWORD *)v10 + 8);
  LODWORD(v13) = *((_DWORD *)v10 + 9);
  v14 = v10[5];
  *(_QWORD *)(v9 + 96) = v10[6];
  *(_QWORD *)(v9 + 104) = v14;
  *(_DWORD *)(v9 + 72) = *((_DWORD *)v10 + 14);
  *(_DWORD *)(v9 + 76) = v13;
  LODWORD(v13) = *((_DWORD *)v10 + 15);
  *(_DWORD *)(v9 + 64) = *((_DWORD *)v10 + 16);
  *(_DWORD *)(v9 + 68) = v13;
  LODWORD(v13) = *((_DWORD *)v10 + 17);
  *(_DWORD *)(v9 + 56) = *((_DWORD *)v10 + 18);
  *(_DWORD *)(v9 + 60) = v13;
  LODWORD(v13) = *((_DWORD *)v10 + 19);
  *(_DWORD *)(v9 + 48) = *((_DWORD *)v10 + 20);
  *(_DWORD *)(v9 + 52) = v13;
  closure #1 in static KeyframeAnimator._makeView(view:inputs:)();
}

void sub_234C057F8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _DWORD *v3;
  int OffsetAttribute2;

  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + 136) = v2;
  AnimatorAttribute.init(view:playback:phase:time:resetSeed:currentState:)(v1, OffsetAttribute2, *(_DWORD *)(v0 + 12), *(_DWORD *)(v0 + 28), 0, v3);
}

uint64_t sub_234C05864()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  int v14;
  int ShouldRecordTree;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v33;

  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v9 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 128) = v5;
  v8(v9, v5, v4);
  *(_QWORD *)(v0 + 208) = v1;
  *(_QWORD *)(v0 + 216) = v4;
  *(_QWORD *)(v0 + 224) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatorAttribute<A, B, C>, v4);
  v10 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), v0 + 192, v4, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 80) = v12;
  v12(v9, v4);
  v13 = *(unsigned int *)(v6 - 192);
  AGGraphSetFlags();
  _GraphValue.init(_:)(v13, (_DWORD *)(v0 + 180));
  v14 = *(_DWORD *)(v0 + 180);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v16 = (_QWORD *)(v6 - 192);
  v17 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 120);
  *v16 = v18;
  v16[2] = v17;
  *(_DWORD *)(v6 - 184) = v2;
  v19 = v3;
  v21 = *(_DWORD *)(v0 + 44);
  v20 = *(_DWORD *)(v0 + 48);
  *(_DWORD *)(v6 - 168) = v3;
  *(_DWORD *)(v6 - 164) = v21;
  v23 = *(_DWORD *)(v0 + 72);
  v22 = *(_DWORD *)(v0 + 76);
  *(_DWORD *)(v6 - 156) = v22;
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 104);
  v16[5] = v25;
  v16[6] = v24;
  v27 = *(_DWORD *)(v0 + 64);
  v26 = *(_DWORD *)(v0 + 68);
  *(_DWORD *)(v6 - 136) = v23;
  *(_DWORD *)(v6 - 132) = v26;
  v29 = *(_DWORD *)(v0 + 56);
  v28 = *(_DWORD *)(v0 + 60);
  *(_DWORD *)(v6 - 128) = v27;
  *(_DWORD *)(v6 - 124) = v28;
  v30 = *(_DWORD *)(v0 + 52);
  *(_DWORD *)(v6 - 120) = v29;
  *(_DWORD *)(v6 - 116) = v30;
  *(_DWORD *)(v6 - 112) = v20;
  *(_DWORD *)(v0 + 16) = v14;
  *(_DWORD *)(v0 + 156) = v14;
  *(_QWORD *)(v0 + 232) = v18;
  *(_DWORD *)(v0 + 240) = v2;
  *(_QWORD *)(v0 + 248) = v17;
  *(_DWORD *)(v0 + 256) = v19;
  *(_QWORD *)(v0 + 260) = v21;
  *(_DWORD *)(v0 + 268) = v22;
  *(_QWORD *)(v0 + 272) = v25;
  *(_QWORD *)(v0 + 280) = v24;
  *(_DWORD *)(v0 + 288) = v23;
  *(_DWORD *)(v0 + 292) = v26;
  *(_DWORD *)(v0 + 296) = v27;
  *(_DWORD *)(v0 + 300) = v28;
  *(_DWORD *)(v0 + 304) = v29;
  *(_DWORD *)(v0 + 308) = v30;
  *(_DWORD *)(v0 + 312) = v20;
  v31 = *(_QWORD *)(v0 + 136);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(v0 + 156, v0 + 232, v1, v31);
  *(_DWORD *)(v6 - 160) = *(_DWORD *)(v0 + 92);
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v0 + 160, v6 - 192);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v33 = *(_QWORD **)(v0 + 144);
  *v33 = *(_QWORD *)(v0 + 160);
  v33[1] = *(_QWORD *)(v0 + 168);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 80))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 32));
}

uint64_t type metadata accessor for KeyframeTrackState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeTrackState);
}

void type metadata accessor for AnimatorAttribute()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void closure #1 in static KeyframeAnimator._makeView(view:inputs:)()
{
  type metadata accessor for KeyframeAnimator();
}

uint64_t sub_234C05AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[16];

  v2 = v1 + *(int *)(a1 + 64);
  v6[2] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, (uint64_t)&unk_2506142D0, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v6[5];
}

void AnimatorAttribute.init(view:playback:phase:time:resetSeed:currentState:)(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  type metadata accessor for AnimatorAttribute();
}

uint64_t sub_234C05BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a1 + 76);
  v7 = type metadata accessor for KeyframeTrackState(0, v2, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v3, v7);
}

void AnimatorAttribute.view.getter()
{
  type metadata accessor for KeyframeAnimator();
}

uint64_t sub_234C05C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance KeyframeAnimator<A, B, C>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  static KeyframeAnimator._makeView(view:inputs:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

void AnimatorAttribute.updateValue()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[17];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v33 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  v25[5] = (char *)v25 - v4;
  MEMORY[0x24BDAC7A8](v5);
  v25[6] = (char *)v25 - v6;
  type metadata accessor for ObservationTracking._AccessList?();
  v25[1] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v25[2] = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v10 = a1[4];
  v28 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v25[4] = (char *)v25 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v27 = (char *)v25 - v15;
  v16 = a1[2];
  v17 = a1[3];
  v18 = a1[5];
  v26 = type metadata accessor for KeyframeTrackState(0, v16, v17, v18);
  v25[12] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25[8] = (char *)v25 - v19;
  v34 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v29 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25[16] = (char *)v25 - v23;
  v24 = a1[6];
  v35 = v16;
  v36 = v17;
  v30 = v10;
  v37 = v10;
  v38 = v18;
  v31 = v24;
  v32 = v18;
  v39 = v24;
  type metadata accessor for KeyframeAnimator();
}

void closure #1 in AnimatorAttribute.updateValue()()
{
  type metadata accessor for AnimatorAttribute();
}

uint64_t sub_234C067F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = &v9[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v4 + 16))(&v9[-v6], v1, a1, v5);
  *v2 = *(_QWORD *)AGGraphGetValue();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, a1);
}

BOOL KeyframeTrackState.isInitial.getter(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  int EnumCaseMultiPayload;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return EnumCaseMultiPayload == 2;
}

uint64_t KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t (*v47)(uint64_t *, uint64_t *, uint64_t *);
  uint64_t *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int EnumCaseMultiPayload;
  char v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  __n128 v126;
  uint64_t v127;

  v122 = (uint64_t)a2;
  v116 = a4;
  v117 = a5;
  v118 = a3;
  v121 = a1;
  v7 = a6[2];
  v8 = type metadata accessor for KeyframeTimeline(0, v7, a3, a4);
  v112 = *(_QWORD *)(v8 - 8);
  v113 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v108 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v111 = (char *)&v104 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v104 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v104 - v16;
  v119 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v104 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v104 - v25;
  v27 = a6[3];
  v28 = a6[4];
  v120 = v7;
  v114 = v27;
  v115 = v28;
  v110 = (_QWORD *)type metadata accessor for KeyframeTrackState.RepeatingState(0, v7, v27, v28);
  v109 = *(v110 - 1);
  MEMORY[0x24BDAC7A8](v110);
  v30 = (char *)&v104 - v29;
  MEMORY[0x24BDAC7A8](v31);
  MEMORY[0x24BDAC7A8](v32);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char **)((char *)&v104 - v34);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (uint64_t *)((char *)&v104 - v37);
  v44 = MEMORY[0x24BDAC7A8](v39);
  v45 = (unint64_t *)((char *)&v104 - v41);
  v46 = *(_QWORD *)v122;
  v122 = *v121;
  if (v122 < 0)
  {
    v104 = v43;
    v106 = v42;
    v57 = (uint64_t)v111;
    v58 = (uint64_t)v26;
    v105 = v17;
    v107 = v14;
    v60 = v112;
    v59 = v113;
    v61 = *(_QWORD **)(v40 + 32);
    ((void (*)(char **, _QWORD *, uint64_t *, double))v61)(v35, v123, a6, v44);
    v121 = a6;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v63 = v122 & 1;
        v64 = (uint64_t)v110;
        (*(void (**)(_QWORD *, char **, _QWORD *))(v109 + 32))(v123, v35, v110);
        v126.n128_u64[0] = v46;
        KeyframeTrackState.RepeatingState.update(at:paused:)(v126.n128_f64, v63, v64);
        return swift_storeEnumTagMultiPayload();
      }
      v91 = v60;
      v92 = v120;
      v93 = (uint64_t)v20;
      v94 = v20;
      v95 = v118;
      v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v94, v118, v120);
      v110 = v61;
      MEMORY[0x24BDAC7A8](v96);
      v98 = v114;
      v97 = v115;
      *(&v104 - 6) = v92;
      *(&v104 - 5) = v98;
      v99 = v116;
      *(&v104 - 4) = v97;
      *(&v104 - 3) = v99;
      *(&v104 - 2) = v117;
      *(&v104 - 1) = v95;
      KeyframeTimeline.init<A>(initialValue:content:)(v93, (void (*)(void))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v104 - 8), v92, v98, v97, v57);
      v100 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v108, v57, v59);
      v101 = v46;
      if ((v122 & 1) != 0)
        v101 = 0;
      v126.n128_u64[0] = v101;
      v126.n128_u64[1] = (unint64_t)~(_DWORD)v122 << 63;
      v127 = 0;
      v102 = v104;
      KeyframeTrackState.RepeatingState.init(timeline:mode:)(v100, &v126, v92, v98, v97, v104);
      v103 = v121;
      swift_storeEnumTagMultiPayload();
      v88 = v123;
      v89 = v102;
      v90 = v103;
    }
    else
    {
      v72 = (unint64_t)v35[1];
      v111 = *v35;
      v118 = v72;
      v126.n128_u64[0] = (unint64_t)v111;
      v126.n128_u64[1] = v72;
      v125 = v46;
      v73 = v120;
      v75 = v114;
      v74 = v115;
      v76 = type metadata accessor for KeyframeTrackState.EventDrivenState(0, v120, v114, v115);
      v110 = v61;
      v77 = v58;
      KeyframeTrackState.EventDrivenState.value(at:)((double *)&v125, v76, v78, v79, v58);
      v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v23, v58, v73);
      MEMORY[0x24BDAC7A8](v80);
      *(&v104 - 6) = v73;
      *(&v104 - 5) = v75;
      v81 = v116;
      *(&v104 - 4) = v74;
      *(&v104 - 3) = v81;
      *(&v104 - 2) = v117;
      *(&v104 - 1) = v58;
      v82 = (uint64_t)v105;
      KeyframeTimeline.init<A>(initialValue:content:)((uint64_t)v23, (void (*)(void))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v104 - 8), v73, v75, v74, (uint64_t)v105);
      swift_release();
      swift_release();
      v83 = (uint64_t)v107;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v107, v82, v59);
      v84 = v46;
      if ((v122 & 1) != 0)
        v84 = 0;
      v126.n128_u64[0] = v84;
      v126.n128_u64[1] = (unint64_t)~(_DWORD)v122 << 63;
      v127 = 0;
      v85 = v106;
      v86 = KeyframeTrackState.RepeatingState.init(timeline:mode:)(v83, &v126, v73, v75, v74, v106);
      (*(void (**)(uint64_t, uint64_t, __n128))(v119 + 8))(v77, v73, v86);
      v87 = v121;
      swift_storeEnumTagMultiPayload();
      v88 = v123;
      v89 = v85;
      v90 = v87;
    }
    return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))v110)(v88, v89, v90);
  }
  else
  {
    v47 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *))(v40 + 32);
    v48 = v123;
    ((void (*)(char *, _QWORD *, uint64_t *, double))v47)((char *)&v104 - v41, v123, a6, v44);
    v49 = swift_getEnumCaseMultiPayload();
    if (v49)
    {
      if (v49 == 1)
      {
        v50 = v109;
        v51 = (uint64_t)v110;
        (*(void (**)(char *, unint64_t *, _QWORD *))(v109 + 32))(v30, v45, v110);
        v52 = swift_allocBox();
        v54 = v53;
        v126.n128_u64[0] = v46;
        v55 = v122;
        swift_retain();
        KeyframeTrackState.RepeatingState.value(at:)(v126.n128_f64, v51, v54);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v51);
        *v38 = v55;
        v38[1] = v52;
        swift_storeEnumTagMultiPayload();
        return v47(v48, v38, a6);
      }
      else
      {
        v69 = v120;
        v70 = swift_allocBox();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v71, v118, v69);
        *v48 = v122;
        v48[1] = v70;
        swift_storeEnumTagMultiPayload();
        return swift_retain();
      }
    }
    else
    {
      v65 = v45[1];
      v126.n128_u64[0] = *v45;
      v126.n128_u64[1] = v65;
      v125 = v46;
      v66 = v122;
      v124 = (_QWORD *)v122;
      v67 = type metadata accessor for KeyframeTrackState.EventDrivenState(0, v120, v114, v115);
      swift_retain();
      KeyframeTrackState.EventDrivenState.update(at:trigger:initialValue:path:)((double *)&v125, &v124, v118, v116, v117, v67);
      outlined consume of _SymbolEffect.Trigger(v66);
      v68 = v126.n128_u64[1];
      *v48 = v126.n128_u64[0];
      v48[1] = v68;
      return swift_storeEnumTagMultiPayload();
    }
  }
}

uint64_t KeyframeTrackState.isAnimating.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = type metadata accessor for KeyframeTrackState.RepeatingState(0, v4, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - v9;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, _QWORD *, double))(v15 + 16))(v14, v2, a1, v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
      v17 = *(_QWORD *)&v10[*(int *)(v7 + 44) + 8] >> 63;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v18 = *((_QWORD *)v14 + 1);
    swift_release();
    type metadata accessor for KeyframeTrackState.EventDrivenState(0, v4, v5, v6);
    v17 = v18 >> 63;
    swift_release();
  }
  return v17;
}

uint64_t KeyframeTrackState.updateAnimation(time:)(double *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  void (*v22)(uint64_t *, _QWORD *, _QWORD *, double);
  uint64_t result;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD *);
  _QWORD *v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  double v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  void (*v53)(uint64_t, uint64_t);
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;

  v5 = a2[2];
  v65 = type metadata accessor for KeyframeTrackState.RepeatingState(0, v5, a2[3], a2[4]);
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v64 = (char *)&v60 - v6;
  v9 = type metadata accessor for KeyframeTimeline(0, v5, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v60 - v14;
  v16 = *(a2 - 1);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (uint64_t *)((char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *a1;
  v22 = *(void (**)(uint64_t *, _QWORD *, _QWORD *, double))(v16 + 16);
  v62 = v2;
  v22(v20, v2, a2, v18);
  v61 = a2;
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v64 = (char *)v5;
    v65 = (uint64_t)v12;
    v31 = *v20;
    v30 = v20[1];
    if ((v30 & 0x8000000000000000) == 0)
    {
LABEL_22:
      swift_release();
      return swift_release();
    }
    v32 = v10;
    v33 = v30 & 0x7FFFFFFFFFFFFFFFLL;
    v34 = *(void (**)(_QWORD *, _QWORD *))(v16 + 8);
    swift_retain();
    swift_retain();
    v35 = v62;
    v34(v62, v61);
    v36 = v9;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v63 = v33;
    v38 = swift_projectBox();
    v39 = v38 + *(int *)(TupleTypeMetadata2 + 48);
    v40 = *(double *)v39;
    LOBYTE(v33) = *(_BYTE *)(v39 + 8);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
    v42 = v15;
    v41(v15, v38, v36);
    if ((v33 & 1) != 0)
    {
      v43 = v65;
    }
    else
    {
      v43 = v65;
      if (v21 <= v40)
      {
        v41((char *)v65, (uint64_t)v42, v36);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v43, v36);
        v56 = 0;
        goto LABEL_20;
      }
      v40 = v21;
    }
    v41((char *)v43, (uint64_t)v42, v36);
    v48 = v21 - v40;
    v52 = KeyframeTimeline.duration.getter(v36, v49, v50, v51);
    v53 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v53(v43, v36);
    if (v52 < v48)
    {
      v54 = swift_allocBox();
      KeyframeTimeline.value(progress:)(v36, v55, 1.0);
      v53((uint64_t)v42, v36);
      swift_release();
LABEL_21:
      *v35 = v31;
      v35[1] = v54;
      swift_retain();
      swift_storeEnumTagMultiPayload();
      swift_release();
      goto LABEL_22;
    }
    v56 = 1;
LABEL_20:
    v57 = swift_allocBox();
    v59 = v58 + *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v58, v42, v36);
    *(double *)v59 = v40;
    *(_BYTE *)(v59 + 8) = v56;
    swift_release();
    v54 = v57 | 0x8000000000000000;
    v35 = v62;
    goto LABEL_21;
  }
  if ((_DWORD)result == 1)
  {
    v24 = v63;
    v25 = v64;
    v26 = *(void (**)(char *, uint64_t *, uint64_t))(v63 + 32);
    v27 = v65;
    v26(v64, v20, v65);
    v28 = &v25[*(int *)(v27 + 44)];
    v29 = *((_QWORD *)v28 + 1);
    if (v29 < 0)
    {
      v44 = *(double *)v28;
      v45 = *((_QWORD *)v28 + 2);
      v46 = (char *)v62;
      (*(void (**)(_QWORD *, _QWORD *))(v16 + 8))(v62, v61);
      if ((v29 & 1) != 0)
      {
        v47 = 0x8000000000000001;
      }
      else if (v21 <= v44)
      {
        v47 = 0x8000000000000000;
      }
      else
      {
        v47 = 0x8000000000000001;
        v44 = v21;
      }
      *(double *)v28 = v44;
      *((_QWORD *)v28 + 1) = v47;
      *((_QWORD *)v28 + 2) = v45;
      v26(v46, (uint64_t *)v25, v27);
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v25, v27);
    }
  }
  return result;
}

uint64_t KeyframeTrackState.value(at:initialValue:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31[2];

  v5 = v4;
  v28 = a2;
  v29 = a4;
  v8 = a3[2];
  v9 = a3[3];
  v10 = a3[4];
  v11 = type metadata accessor for KeyframeTrackState.RepeatingState(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - v13;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  (*(void (**)(char *, uint64_t, _QWORD *, double))(v20 + 16))(v18, v5, a3, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v18, v11);
      v31[0] = v19;
      KeyframeTrackState.RepeatingState.value(at:)(v31, v11, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v29, v28, v8);
    }
  }
  else
  {
    v23 = *((double *)v18 + 1);
    v31[0] = *(double *)v18;
    v31[1] = v23;
    v30 = v19;
    v24 = type metadata accessor for KeyframeTrackState.EventDrivenState(0, v8, v9, v10);
    KeyframeTrackState.EventDrivenState.value(at:)(&v30, v24, v25, v26, v29);
    swift_release();
    return swift_release();
  }
}

void closure #2 in AnimatorAttribute.updateValue()()
{
  type metadata accessor for AnimatorAttribute();
}

void sub_234C0772C()
{
  type metadata accessor for KeyframeAnimator();
}

uint64_t sub_234C07754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #2 in AnimatorAttribute.updateValue(), (uint64_t)&v4, a1, v1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnimatorAttribute<A, B, C>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatorAttribute<A, B, C>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t KeyframeTrackState.EventDrivenState.update(at:trigger:initialValue:path:)(double *a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  double v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t TupleTypeMetadata2;
  uint64_t v61;
  uint64_t v62;
  double v63;
  char *v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v7 = v6;
  v97 = a6;
  v98 = a4;
  v94 = a3;
  v11 = *(_QWORD *)(a6 + 16);
  v99 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v93 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v91 = (char *)&v86 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v92 = (uint64_t)&v86 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v96 = (uint64_t)&v86 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v86 - v20;
  v24 = type metadata accessor for KeyframeTimeline(0, v11, v22, v23);
  MEMORY[0x24BDAC7A8](v24);
  v95 = (uint64_t)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v90 = (char *)&v86 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v86 - v31;
  v33 = *a2;
  if (v33 != (_QWORD *)*v7)
  {
    v34 = *a1;
    v35 = *v33;
    v36 = v33;
    v37 = v11;
    v38 = a5;
    v39 = v7;
    v40 = v29;
    v41 = v30;
    v42 = *(uint64_t (**)(uint64_t))(v35 + 80);
    v43 = swift_retain();
    v44 = v42(v43);
    v45 = v41;
    v46 = v40;
    v7 = v39;
    v47 = v38;
    v48 = v37;
    v33 = v36;
    LOBYTE(v36) = v44;
    swift_release();
    if ((v36 & 1) == 0)
    {
      v49 = v7[1];
      if (v49 < 0)
      {
        v59 = v49 & 0x7FFFFFFFFFFFFFFFLL;
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        v88 = TupleTypeMetadata2;
        v89 = v59;
        v61 = swift_projectBox();
        v62 = v61 + *(int *)(TupleTypeMetadata2 + 48);
        v63 = *(double *)v62;
        LODWORD(v94) = *(unsigned __int8 *)(v62 + 8);
        v64 = v90;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v90, v61, v46);
        v65 = v34 - v63;
        swift_retain();
        v69 = KeyframeTimeline.duration.getter(v46, v66, v67, v68);
        if (v69 < v65)
          v65 = v69;
        v70 = v96;
        KeyframeTimeline.value(time:)(v46, v96, v65);
        v71 = v92;
        KeyframeTimeline.velocity(time:)(v46, v92, v65);
        v72 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
        v87 = v45;
        v73 = (uint64_t)v91;
        v72(v91, v70, v48);
        v86 = v47;
        v74 = (uint64_t)v93;
        v75 = ((uint64_t (*)(char *, uint64_t, uint64_t))v72)(v93, v71, v48);
        MEMORY[0x24BDAC7A8](v75);
        v76 = *(_QWORD *)(v97 + 24);
        v77 = *(_QWORD *)(v97 + 32);
        *(&v86 - 6) = v48;
        *(&v86 - 5) = v76;
        v78 = v98;
        *(&v86 - 4) = v77;
        *(&v86 - 3) = v78;
        *(&v86 - 2) = v86;
        *(&v86 - 1) = v70;
        KeyframeTimeline.init<A>(initialValue:initialVelocity:content:)(v73, v74, (void (*)(uint64_t, uint64_t))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v86 - 8), v48, v76, v77, v95);
        v79 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
        v79(v71, v48);
        v80 = v87;
        (*(void (**)(char *, uint64_t))(v87 + 8))(v64, v46);
        v81 = v88;
        v56 = swift_allocBox();
        v83 = v82;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v82, v95, v46);
        v79(v96, v48);
        v84 = v83 + *(int *)(v81 + 48);
        *(double *)v84 = v34;
        *(_BYTE *)(v84 + 8) = v94;
        swift_release();
      }
      else
      {
        v50 = v94;
        v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 16))(v21, v94, v48);
        MEMORY[0x24BDAC7A8](v51);
        v52 = *(_QWORD *)(v97 + 24);
        v53 = *(_QWORD *)(v97 + 32);
        *(&v86 - 6) = v48;
        *(&v86 - 5) = v52;
        v54 = v98;
        *(&v86 - 4) = v53;
        *(&v86 - 3) = v54;
        *(&v86 - 2) = v47;
        *(&v86 - 1) = v50;
        KeyframeTimeline.init<A>(initialValue:content:)((uint64_t)v21, (void (*)(void))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v86 - 8), v48, v52, v53, (uint64_t)v32);
        v55 = swift_getTupleTypeMetadata2();
        v56 = swift_allocBox();
        v58 = v57 + *(int *)(v55 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v57, v32, v46);
        *(double *)v58 = v34;
        *(_BYTE *)(v58 + 8) = 0;
      }
      swift_release();
      v7[1] = v56 | 0x8000000000000000;
    }
  }
  swift_retain();
  result = swift_release();
  *v7 = v33;
  return result;
}

uint64_t KeyframeTrackState.RepeatingState.value(at:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;

  v6 = v3 + *(int *)(a2 + 44);
  v7 = *(double *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  type metadata accessor for KeyframeTrackState.RepeatingState.Mode(0, v9, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  if (v8 < 0)
  {
    v13 = *a1 - v7;
    if ((v8 & 1) == 0)
      v13 = 0.0;
    v12 = *(double *)(v6 + 16) + v13;
  }
  else
  {
    v12 = v7;
  }
  v14 = type metadata accessor for KeyframeTimeline(0, v9, v10, v11);
  v18 = KeyframeTimeline.duration.getter(v14, v15, v16, v17);
  v19 = fmod(v12, v18);
  return KeyframeTimeline.value(time:)(v14, a3, v19);
}

double *KeyframeTrackState.RepeatingState.update(at:paused:)(double *result, char a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;

  v4 = *result;
  v5 = v3 + *(int *)(a3 + 44);
  v6 = *(double *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  if (v7 < 0)
  {
    if ((a2 & 1) != 0)
    {
      v8 = *(double *)(v5 + 16);
      result = (double *)type metadata accessor for KeyframeTrackState.RepeatingState.Mode(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
      v9 = v4 - v6;
      if ((v7 & 1) == 0)
        v9 = 0.0;
      *(double *)v5 = v8 + v9;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else if ((a2 & 1) == 0)
  {
    *(double *)v5 = v4;
    *(_QWORD *)(v5 + 8) = 0x8000000000000000;
    *(double *)(v5 + 16) = v6;
  }
  return result;
}

uint64_t KeyframeTrackState.EventDrivenState.value(at:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  double v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = type metadata accessor for KeyframeTimeline(0, v8, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - v11;
  if ((*(_QWORD *)(v5 + 8) & 0x8000000000000000) != 0)
  {
    v15 = *a1;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v17 = swift_projectBox();
    v18 = v17 + *(int *)(TupleTypeMetadata2 + 48);
    v19 = *(double *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v17, v9);
    if ((v20 & 1) != 0)
      v21 = v15 - v19;
    else
      v21 = 0.0;
    KeyframeTimeline.value(time:)(v9, a5, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v13 = swift_projectBox();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v13, v8);
  }
}

__n128 KeyframeTrackState.RepeatingState.init(timeline:mode:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  __n128 *v13;
  __n128 result;
  __n128 v15;

  v15 = *a2;
  v11 = a2[1].n128_u64[0];
  v12 = type metadata accessor for KeyframeTimeline(0, a3, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  v13 = (__n128 *)(a6 + *(int *)(type metadata accessor for KeyframeTrackState.RepeatingState(0, a3, a4, a5) + 44));
  result = v15;
  *v13 = v15;
  v13[1].n128_u64[0] = v11;
  return result;
}

uint64_t closure #1 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(uint64_t, double);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v20 - v14;
  v17(v16, v13);
  static KeyframesBuilder.buildExpression<A>(_:)((uint64_t)v11, a5, (uint64_t)v15);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, a5);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v15, a4, a5, a6);
  v18(v15, a5);
  static KeyframesBuilder.buildFinalResult<A>(_:)(v11, a4, a5, a6);
  return ((uint64_t (*)(char *, uint64_t))v18)(v11, a5);
}

uint64_t type metadata completion function for KeyframeAnimator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyframeAnimator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
    v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)v14;
    v14 += 15;
    swift_retain();
    outlined copy of _SymbolEffect.Trigger(v15);
    *v13 = v15;
    v16 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    v17 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
    *v16 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
    v16[1] = v17;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for KeyframeAnimator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  outlined consume of _SymbolEffect.Trigger(*(_QWORD *)((v4 + 23) & 0xFFFFFFFFFFFFF8));
  return swift_release();
}

uint64_t initializeWithCopy for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  *v7 = *(_QWORD *)v8;
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  v8 += 23;
  v12 = (v8 & 0xFFFFFFFFFFFFF8) + 15;
  v11 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  outlined copy of _SymbolEffect.Trigger(v11);
  *v10 = v11;
  v13 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
  *v13 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  v13[1] = v14;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  v11 += 15;
  outlined copy of _SymbolEffect.Trigger(v12);
  v13 = *v10;
  *v10 = v12;
  outlined consume of _SymbolEffect.Trigger(v13);
  v14 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  *v14 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  v14[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v10 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  v11 = *v10;
  *v10 = *(_QWORD *)v9;
  outlined consume of _SymbolEffect.Trigger(v11);
  *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v9 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeAnimator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234C08570 + 4 * byte_23528C150[v10]))();
  }
}

void storeEnumTagSinglePayload for KeyframeAnimator(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234C086F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234C08770);
}

void sub_234C08700(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234C08708);
  JUMPOUT(0x234C08770);
}

void sub_234C08748()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C08770);
}

void sub_234C08750()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C08770);
}

uint64_t sub_234C08758(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234C08770);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234C0876CLL);
    JUMPOUT(0x234C08764);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void sub_234C08788()
{
  type metadata accessor for KeyframeAnimator();
}

void sub_234C087C4()
{
  type metadata accessor for CustomModifier();
}

uint64_t sub_234C087E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[11];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for CustomModifier<A, B>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

void sub_234C08820()
{
  type metadata accessor for KeyframeAnimator();
}

void sub_234C0885C()
{
  type metadata accessor for CustomModifier();
}

uint64_t sub_234C08878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[11];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for CustomModifier<A, B>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

uint64_t *initializeBufferWithCopyOfBuffer for PlaybackMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  outlined copy of _SymbolEffect.Trigger(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for PlaybackMode(uint64_t *a1)
{
  return outlined consume of _SymbolEffect.Trigger(*a1);
}

uint64_t *assignWithCopy for PlaybackMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  outlined copy of _SymbolEffect.Trigger(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of _SymbolEffect.Trigger(v4);
  return a1;
}

uint64_t *assignWithTake for PlaybackMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of _SymbolEffect.Trigger(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackMode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 63);
  v3 = (*(_QWORD *)a1 & 6 | ((*(_QWORD *)a1 >> 58) >> 5) & 0xFFFFFFC7 | (8
                                                                                     * (((*(_QWORD *)a1 >> 58) >> 2) & 7))) ^ 0x3F;
  if (v3 >= 0x3E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PlaybackMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x3E)
  {
    *(_QWORD *)result = a2 - 63;
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1F | (32 * (-a2 & 0x3F));
      *(_QWORD *)result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PlaybackMode(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *destructiveProjectEnumData for PlaybackMode(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for PlaybackMode(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF9 | (a2 << 63);
  return result;
}

void *type metadata accessor for PlaybackMode()
{
  return &unk_2506142D0;
}

uint64_t type metadata completion function for AnimatorAttribute(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for KeyframeTrackState(319, a1[2], a1[3], a1[5]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatorAttribute(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  unint64_t v25;
  char *v26;
  __int128 v27;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5 & 0xF8 | 7;
  v7 = ~v6;
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if ((((v8 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
    v9 = 16;
  else
    v9 = (((v8 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if ((v5 & 0x1000F8) != 0 || (v9 | 1) + (((v5 & 0xF8) + 27) & ~v6) > 0x18)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v6 + 16) & v7));
  }
  else
  {
    v13 = *(_DWORD *)a2;
    v12 = (unint64_t)a2 + 7;
    *(_DWORD *)a1 = v13;
    v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v14 = *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
    v16 = (_DWORD *)(((v12 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
    *v15 = *v16;
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v17 = *v18;
    v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
    v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v19 = *v20;
    v21 = (_QWORD *)(((unint64_t)v19 + 11) & v7);
    v22 = (_QWORD *)(((unint64_t)v20 + 11) & v7);
    v23 = *((unsigned __int8 *)v22 + v9);
    if ((v9 & 0xFFFFFFF8) != 0 && v23 >= 2)
      v23 = *(_DWORD *)v22 + 2;
    if (v23 == 1)
    {
      v25 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      (*(void (**)(_QWORD *, _QWORD *))(v4 + 16))(v21, v22);
      *(_QWORD *)(((unint64_t)v21 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + v8) & 0xFFFFFFFFFFFFF8);
      v26 = (char *)v21 + v25;
      v27 = *(_OWORD *)((char *)v22 + v25);
      *((_QWORD *)v26 + 2) = *(_QWORD *)((char *)v22 + v25 + 16);
      *(_OWORD *)v26 = v27;
      *((_BYTE *)v21 + v9) = 1;
      swift_bridgeObjectRetain();
      return v3;
    }
    if (v23)
    {
      memcpy(v21, v22, v9 | 1);
      return v3;
    }
    *v21 = *v22;
    v21[1] = v22[1];
    *((_BYTE *)v21 + v9) = 0;
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for AnimatorAttribute(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  v4 = (_DWORD *)((((((((((result + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                 + v3
                 + 4) & ~v3);
  v5 = ((((*(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 & 0xFFFFFFF8;
  v7 = *((unsigned __int8 *)v4 + v5);
  if (v7 >= 2 && v6 != 0)
    v7 = *v4 + 2;
  if (v7 == 1)
  {
    (*(void (**)(_DWORD *))(v2 + 8))(v4);
    return swift_bridgeObjectRelease();
  }
  else if (!v7)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

_DWORD *initializeWithCopy for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v24;
  char *v25;
  __int128 v26;

  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  v15 = v14 + 11;
  v16 = (unint64_t)v11 + v14 + 11;
  v17 = ~v14 & 0xFFFFFFFFFFFFFFF8;
  v18 = (_QWORD *)(v16 & v17);
  v19 = (_DWORD *)(((unint64_t)v12 + v15) & v17);
  v20 = *(_QWORD *)(v13 + 64) + 7;
  if ((((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
    v21 = 16;
  else
    v21 = (((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  v22 = *((unsigned __int8 *)v19 + v21);
  if (v22 >= 2 && (v21 & 0xFFFFFFF8) != 0)
    v22 = *v19 + 2;
  if (v22 == 1)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(_QWORD *, _DWORD *))(v13 + 16))(v18, v19);
    *(_QWORD *)(((unint64_t)v18 + v20) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + v20) & 0xFFFFFFFFFFFFF8);
    v25 = (char *)v18 + v24;
    v26 = *(_OWORD *)((char *)v19 + v24);
    *((_QWORD *)v25 + 2) = *(_QWORD *)((char *)v19 + v24 + 16);
    *(_OWORD *)v25 = v26;
    *((_BYTE *)v18 + v21) = 1;
    swift_bridgeObjectRetain();
  }
  else if (v22)
  {
    memcpy(v18, v19, v21 | 1);
  }
  else
  {
    *v18 = *(_QWORD *)v19;
    v18[1] = *(_QWORD *)((((unint64_t)v12 + v15) & v17) + 8);
    *((_BYTE *)v18 + v21) = 0;
    swift_retain();
    swift_retain();
  }
  return a1;
}

_DWORD *assignWithCopy for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v26;
  unint64_t v28;
  char *v29;
  __int128 v30;

  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v16 = v15 + 11;
  v17 = (unint64_t)v11 + v15 + 11;
  v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  v19 = v17 & v18;
  v20 = ((unint64_t)v12 + v16) & v18;
  if ((v17 & v18) != v20)
  {
    v21 = *(_QWORD *)(v14 + 64);
    v22 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
      v23 = 16;
    else
      v23 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    v24 = *(unsigned __int8 *)(v19 + v23);
    if (v24 >= 2 && (v23 & 0xFFFFFFF8) != 0)
      v24 = *(_DWORD *)v19 + 2;
    if (v24 == 1)
    {
      (*(void (**)(unint64_t, _QWORD))(v14 + 8))(v19, *(_QWORD *)(a3 + 16));
      swift_bridgeObjectRelease();
    }
    else if (!v24)
    {
      swift_release();
      swift_release();
    }
    v26 = *(unsigned __int8 *)(v20 + v23);
    if ((v23 & 0xFFFFFFF8) != 0 && v26 >= 2)
      v26 = *(_DWORD *)v20 + 2;
    if (v26 == 1)
    {
      v28 = v22 + 8;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(v19, v20, v13);
      *(_QWORD *)(((v19 | 7) + v21) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v20 | 7) + v21) & 0xFFFFFFFFFFFFF8);
      v29 = (char *)(v28 + v19);
      v30 = *(_OWORD *)(v28 + v20);
      *((_QWORD *)v29 + 2) = *(_QWORD *)(v28 + v20 + 16);
      *(_OWORD *)v29 = v30;
      *(_BYTE *)(v19 + v23) = 1;
      swift_bridgeObjectRetain();
    }
    else if (v26)
    {
      memcpy((void *)v19, (const void *)v20, v23 | 1);
    }
    else
    {
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v19 + v23) = 0;
      swift_retain();
      swift_retain();
    }
  }
  return a1;
}

_DWORD *initializeWithTake for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v24;
  char *v25;
  __int128 v26;

  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  v15 = v14 + 11;
  v16 = (unint64_t)v11 + v14 + 11;
  v17 = ~v14 & 0xFFFFFFFFFFFFFFF8;
  v18 = (_OWORD *)(v16 & v17);
  v19 = (_DWORD *)(((unint64_t)v12 + v15) & v17);
  v20 = *(_QWORD *)(v13 + 64) + 7;
  if ((((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
    v21 = 16;
  else
    v21 = (((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  v22 = *((unsigned __int8 *)v19 + v21);
  if (v22 >= 2 && (v21 & 0xFFFFFFF8) != 0)
    v22 = *v19 + 2;
  if (v22 == 1)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(_OWORD *, _DWORD *))(v13 + 32))(v18, v19);
    *(_QWORD *)(((unint64_t)v18 + v20) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + v20) & 0xFFFFFFFFFFFFF8);
    v25 = (char *)v18 + v24;
    v26 = *(_OWORD *)((char *)v19 + v24);
    *((_QWORD *)v25 + 2) = *(_QWORD *)((char *)v19 + v24 + 16);
    *(_OWORD *)v25 = v26;
    *((_BYTE *)v18 + v21) = 1;
  }
  else if (v22)
  {
    memcpy(v18, v19, v21 | 1);
  }
  else
  {
    *v18 = *(_OWORD *)v19;
    *((_BYTE *)v18 + v21) = 0;
  }
  return a1;
}

_DWORD *assignWithTake for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v26;
  unint64_t v28;
  char *v29;
  __int128 v30;

  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v16 = v15 + 11;
  v17 = (unint64_t)v11 + v15 + 11;
  v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  v19 = v17 & v18;
  v20 = ((unint64_t)v12 + v16) & v18;
  if ((v17 & v18) != v20)
  {
    v21 = *(_QWORD *)(v14 + 64);
    v22 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
      v23 = 16;
    else
      v23 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    v24 = *(unsigned __int8 *)(v19 + v23);
    if (v24 >= 2 && (v23 & 0xFFFFFFF8) != 0)
      v24 = *(_DWORD *)v19 + 2;
    if (v24 == 1)
    {
      (*(void (**)(unint64_t, _QWORD))(v14 + 8))(v19, *(_QWORD *)(a3 + 16));
      swift_bridgeObjectRelease();
    }
    else if (!v24)
    {
      swift_release();
      swift_release();
    }
    v26 = *(unsigned __int8 *)(v20 + v23);
    if ((v23 & 0xFFFFFFF8) != 0 && v26 >= 2)
      v26 = *(_DWORD *)v20 + 2;
    if (v26 == 1)
    {
      v28 = v22 + 8;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(v19, v20, v13);
      *(_QWORD *)(((v19 | 7) + v21) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v20 | 7) + v21) & 0xFFFFFFFFFFFFF8);
      v29 = (char *)(v28 + v19);
      v30 = *(_OWORD *)(v28 + v20);
      *((_QWORD *)v29 + 2) = *(_QWORD *)(v28 + v20 + 16);
      *(_OWORD *)v29 = v30;
      *(_BYTE *)(v19 + v23) = 1;
    }
    else if (v26)
    {
      memcpy((void *)v19, (const void *)v20, v23 | 1);
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *(_BYTE *)(v19 + v23) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatorAttribute(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = ((((*(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v4 <= 0x10)
    v4 = 16;
  if (!a2)
    return 0;
  v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  v6 = v5 | 7;
  if (a2 < 0xFE)
    goto LABEL_19;
  v7 = (((v5 + 27) & ~v6) + v4) | 1;
  if (v7 <= 3)
  {
    v9 = ((a2 + ~(-1 << (8 * v7)) - 253) >> (8 * v7)) + 1;
    if (HIWORD(v9))
    {
      if (!*(_DWORD *)(a1 + v7))
        goto LABEL_19;
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_19;
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_19:
      v11 = *(unsigned __int8 *)(((((((((((a1 + 7) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL)
                                   + 7) & 0xFFFFFFFFFFFFFCLL)
                                 + v6
                                 + 4) & ~v6)
                               + v4);
      if (v11 >= 3)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_19;
LABEL_14:
  if (v7 <= 3)
    v10 = v7;
  else
    v10 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C09520 + 4 * byte_23528C15F[v10 - 1]))();
}

void storeEnumTagSinglePayload for AnimatorAttribute(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v6 <= 0x10)
    v6 = 16;
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = (((v7 + 27) & ~(v7 | 7)) + v6) | 1;
  if (a3 < 0xFE)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X13 }
  v10 = a2 - 254;
  bzero(a1, v8);
  if (v8 < 4)
    *a1 = v10 & ~(-1 << (8 * v8));
  else
    *(_DWORD *)a1 = v10;
  __asm { BR              X10 }
}

uint64_t type metadata completion function for KeyframeTrackState(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for KeyframeTrackState.RepeatingState(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for KeyframeTrackState(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
    v8 = 16;
  else
    v8 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  v9 = *(_DWORD *)(v5 + 80);
  if ((v9 & 0x1000F8) != 0 || (v8 | 1) > 0x18)
  {
    v11 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v11 + ((unsigned __int16)((v9 & 0xF8) + 23) & (unsigned __int16)~(v9 & 0xF8) & 0x1F8));
  }
  else
  {
    v12 = __src[v8];
    if (v12 >= 2)
      v12 = *(_DWORD *)__src + 2;
    if (v12 == 1)
    {
      v14 = v7 + 8;
      (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
      v15 = ((unint64_t)v4 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      v16 = (unint64_t)&__src[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      v17 = *(_OWORD *)v16;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v15 = v17;
      *((_BYTE *)v4 + v8) = 1;
      swift_bridgeObjectRetain();
      return v4;
    }
    if (v12)
    {
      memcpy(__dst, __src, v8 | 1);
      return v4;
    }
    v13 = *((_QWORD *)__src + 1);
    *__dst = *(_QWORD *)__src;
    __dst[1] = v13;
    *((_BYTE *)__dst + v8) = 0;
    swift_retain();
  }
  swift_retain();
  return v4;
}

_DWORD *destroy for KeyframeTrackState(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = ((((*(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v3 <= 0x10)
    v3 = 16;
  v4 = v3 & 0xFFFFFFF8;
  v5 = *((unsigned __int8 *)result + v3);
  if (v5 >= 2 && v4 != 0)
    v5 = *result + 2;
  if (v5 == 1)
  {
    (*(void (**)(_DWORD *))(v2 + 8))(result);
    return (_DWORD *)swift_bridgeObjectRelease();
  }
  else if (!v5)
  {
    swift_release();
    return (_DWORD *)swift_release();
  }
  return result;
}

_BYTE *initializeWithCopy for KeyframeTrackState(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
    v8 = 16;
  else
    v8 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  v9 = __src[v8];
  if (v9 >= 2 && (v8 & 0xFFFFFFF8) != 0)
    v9 = *(_DWORD *)__src + 2;
  if (v9 == 1)
  {
    v12 = v7 + 8;
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    *(_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v13 = (unint64_t)&__dst[v12 + 7] & 0xFFFFFFFFFFFFFFF8;
    v14 = (unint64_t)&__src[v12 + 7] & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_OWORD *)v14;
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
    *(_OWORD *)v13 = v15;
    __dst[v8] = 1;
    swift_bridgeObjectRetain();
  }
  else if (v9)
  {
    memcpy(__dst, __src, v8 | 1);
  }
  else
  {
    v11 = *((_QWORD *)__src + 1);
    *(_QWORD *)__dst = *(_QWORD *)__src;
    *((_QWORD *)__dst + 1) = v11;
    __dst[v8] = 0;
    swift_retain();
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for KeyframeTrackState(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
      v9 = 16;
    else
      v9 = ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    v10 = __dst[v9];
    if (v10 >= 2 && (v9 & 0xFFFFFFF8) != 0)
      v10 = *(_DWORD *)__dst + 2;
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_bridgeObjectRelease();
    }
    else if (!v10)
    {
      swift_release();
      swift_release();
    }
    v12 = __src[v9];
    if ((v9 & 0xFFFFFFF8) != 0 && v12 >= 2)
      v12 = *(_DWORD *)__src + 2;
    if (v12 == 1)
    {
      v14 = v8 + 8;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *(_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v15 = (unint64_t)&__dst[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      v16 = (unint64_t)&__src[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      v17 = *(_OWORD *)v16;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v15 = v17;
      __dst[v9] = 1;
      swift_bridgeObjectRetain();
    }
    else if (v12)
    {
      memcpy(__dst, __src, v9 | 1);
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      *((_QWORD *)__dst + 1) = *((_QWORD *)__src + 1);
      __dst[v9] = 0;
      swift_retain();
      swift_retain();
    }
  }
  return __dst;
}

_BYTE *initializeWithTake for KeyframeTrackState(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
    v8 = 16;
  else
    v8 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  v9 = __src[v8];
  if (v9 >= 2 && (v8 & 0xFFFFFFF8) != 0)
    v9 = *(_DWORD *)__src + 2;
  if (v9 == 1)
  {
    v11 = v7 + 8;
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    *(_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v12 = (unint64_t)&__dst[v11 + 7] & 0xFFFFFFFFFFFFFFF8;
    v13 = (unint64_t)&__src[v11 + 7] & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_OWORD *)v13;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
    *(_OWORD *)v12 = v14;
    __dst[v8] = 1;
  }
  else if (v9)
  {
    memcpy(__dst, __src, v8 | 1);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[v8] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for KeyframeTrackState(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10)
      v9 = 16;
    else
      v9 = ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    v10 = __dst[v9];
    if (v10 >= 2 && (v9 & 0xFFFFFFF8) != 0)
      v10 = *(_DWORD *)__dst + 2;
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_bridgeObjectRelease();
    }
    else if (!v10)
    {
      swift_release();
      swift_release();
    }
    v12 = __src[v9];
    if ((v9 & 0xFFFFFFF8) != 0 && v12 >= 2)
      v12 = *(_DWORD *)__src + 2;
    if (v12 == 1)
    {
      v14 = v8 + 8;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *(_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v15 = (unint64_t)&__dst[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      v16 = (unint64_t)&__src[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      v17 = *(_OWORD *)v16;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v15 = v17;
      __dst[v9] = 1;
    }
    else if (v12)
    {
      memcpy(__dst, __src, v9 | 1);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v9] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  int v7;
  int v9;
  int v10;
  unsigned int v11;

  v3 = ((((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v3 <= 0x10)
    v3 = 16;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_20;
  v4 = v3 | 1;
  v5 = 8 * (v3 | 1);
  if ((v3 | 1) <= 3)
  {
    v6 = (a2 + ~(-1 << v5) - 253) >> v5;
    if (v6 > 0xFFFE)
    {
      v7 = *(_DWORD *)&a1[v4];
      if (!v7)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v6 > 0xFE)
    {
      v7 = *(unsigned __int16 *)&a1[v4];
      if (!*(_WORD *)&a1[v4])
        goto LABEL_20;
      goto LABEL_13;
    }
    if (!v6)
      goto LABEL_20;
  }
  v7 = a1[v4];
  if (!a1[v4])
  {
LABEL_20:
    v11 = a1[v3];
    if (v11 >= 3)
      return (v11 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_13:
  v9 = (v7 - 1) << v5;
  if (v4 >= 4)
    v9 = 0;
  if ((_DWORD)v4 == 1)
    v10 = *a1;
  else
    v10 = *(_DWORD *)a1;
  return (v10 | v9) + 254;
}

void storeEnumTagSinglePayload for KeyframeTrackState(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v5 = ((((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 | 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = (a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6);
    if (v9 > 0xFFFE)
    {
      v7 = 4u;
    }
    else if (v9 >= 0xFF)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 != 0;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    v8 &= ~(-1 << (8 * v6));
    bzero(a1, v6);
    if ((_DWORD)v6 == 1)
    {
      *a1 = v8;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v5 | 1);
  }
  *(_DWORD *)a1 = v8;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t getEnumTag for KeyframeTrackState(_DWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = ((((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v2 <= 0x10)
    v2 = 16;
  v3 = v2 & 0xFFFFFFF8;
  v4 = *((unsigned __int8 *)a1 + v2);
  if (v4 >= 2 && v3 != 0)
    return (*a1 + 2);
  return v4;
}

void destructiveInjectEnumTag for KeyframeTrackState(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  char v5;
  unsigned int v6;

  v4 = ((((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v4 <= 0x10)
    v4 = 16;
  if (a2 > 1)
  {
    if ((_DWORD)v4)
      v5 = 2;
    else
      v5 = a2;
    if ((_DWORD)v4)
      v6 = a2 - 2;
    else
      v6 = 0;
    a1[v4] = v5;
    bzero(a1, v4);
    *(_DWORD *)a1 = v6;
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeTrackState.RepeatingState);
}

uint64_t type metadata completion function for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for KeyframeTimeline(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyframeTrackState.RepeatingState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0
    || ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v11 = v7 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v12 = ((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_OWORD *)v12;
    v14 = ((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v12 + 16);
    *(_OWORD *)v14 = v13;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t initializeWithCopy for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = a1 + v7 + 7;
  v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_OWORD *)v9;
  v12 = v8 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v12 = v11;
  *(_QWORD *)(v12 + 16) = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = a1 + v7 + 7;
  v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v8 = v10;
  return a1;
}

uint64_t initializeWithTake for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = a1 + v7 + 7;
  v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_OWORD *)v9;
  v12 = v8 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v12 = v11;
  *(_QWORD *)(v12 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = a1 + v7 + 7;
  v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v8 = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState.RepeatingState(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234C0A6A4 + 4 * byte_23528C177[v10]))();
  }
}

void storeEnumTagSinglePayload for KeyframeTrackState.RepeatingState(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234C0A824()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234C0A898);
}

void sub_234C0A82C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234C0A834);
  JUMPOUT(0x234C0A898);
}

void sub_234C0A874()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C0A898);
}

void sub_234C0A87C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C0A898);
}

uint64_t sub_234C0A884(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234C0A898);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234C0A894);
    JUMPOUT(0x234C0A890);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for CustomModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for CustomModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
}

uint64_t initializeWithCopy for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C0AB0C + 4 * byte_23528C186[(v7 - 1)]))();
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350A4934 + 4 * byte_2352C4AD0[(v7 - 1)]))();
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23518AC7C + 4 * byte_2352D380F[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CustomModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t instantiation function for generic protocol witness table for AnimatorAttribute<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatorAttribute<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in AnimatorAttribute<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for ObservationTracking._AccessList?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ObservationTracking._AccessList?)
  {
    type metadata accessor for ObservationTracking._AccessList();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?);
  }
}

void partial apply for closure #2 in AnimatorAttribute.updateValue()()
{
  closure #2 in AnimatorAttribute.updateValue()();
}

uint64_t partial apply for closure #1 in _withObservation<A>(do:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return closure #1 in _withObservation<A>(do:)(a1, *(uint64_t (**)(void))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(void))(v2 + 24);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = a1;
  result = v5();
  *(_QWORD *)(StatusReg + 848) = v7;
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t outlined init with copy of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ObservationTracking._AccessList?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for KeyframeTrackState.EventDrivenState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeTrackState.EventDrivenState);
}

uint64_t partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)()
{
  uint64_t *v0;

  return closure #1 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)(v0[5], v0[6], v0[7], v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for KeyframeTrackState.RepeatingState.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeTrackState.RepeatingState.Mode);
}

void partial apply for closure #1 in closure #2 in AnimatorAttribute.updateValue()()
{
  type metadata accessor for KeyframeAnimator();
}

uint64_t sub_234C0AE98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v1 + *(int *)(a1 + 68)))(v2);
}

void partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:)()
{
  closure #1 in static CustomModifier._makeView(modifier:inputs:body:)();
}

uint64_t specialized static PlaybackMode.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  char v6;

  v2 = *a1;
  v3 = *a2;
  if (*a1 < 0)
  {
    if (v3 < 0)
    {
      outlined consume of _SymbolEffect.Trigger(*a1);
      outlined consume of _SymbolEffect.Trigger(v3);
      v6 = ((v2 & 1) == 0) ^ v3;
      return v6 & 1;
    }
LABEL_8:
    outlined copy of _SymbolEffect.Trigger(v3);
    outlined consume of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v3);
    v6 = 0;
    return v6 & 1;
  }
  if (v3 < 0)
  {
    swift_retain();
    goto LABEL_8;
  }
  if (v2 != v3)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80);
    outlined copy of _SymbolEffect.Trigger(*a2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v3);
    LOBYTE(v4) = v4(v3);
    outlined consume of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v3);
    outlined consume of _SymbolEffect.Trigger(v3);
    outlined consume of _SymbolEffect.Trigger(v2);
    return v4 & 1;
  }
  outlined copy of _SymbolEffect.Trigger(*a1);
  outlined copy of _SymbolEffect.Trigger(v3);
  outlined consume of _SymbolEffect.Trigger(v2);
  outlined consume of _SymbolEffect.Trigger(v3);
  v6 = 1;
  return v6 & 1;
}

uint64_t sub_234C0AFFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:));
}

uint64_t partial apply for closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(a1, closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:));
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[9], v2[10], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:));
}

uint64_t sub_234C0B07C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(a1, closure #2 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:));
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[11], v2[12], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10]);
}

void *type metadata accessor for AnimationTime()
{
  return &unk_250615D48;
}

uint64_t destroy for KeyframeTrackState.EventDrivenState()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for KeyframeTrackState.EventDrivenState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for KeyframeTrackState.EventDrivenState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for KeyframeTrackState.EventDrivenState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState.RepeatingState.Mode(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyframeTrackState.RepeatingState.Mode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 2 * -a2;
      *(_QWORD *)(result + 16) = 0;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for KeyframeTrackState.RepeatingState.Mode(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >> 63;
}

uint64_t destructiveProjectEnumData for KeyframeTrackState.RepeatingState.Mode(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for KeyframeTrackState.RepeatingState.Mode(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 1 | (a2 << 63);
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for KeyframeTrackState.EventDrivenState.Phase(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for KeyframeTrackState.EventDrivenState.Phase()
{
  return swift_release();
}

_QWORD *assignWithCopy for KeyframeTrackState.EventDrivenState.Phase(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for KeyframeTrackState.EventDrivenState.Phase(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState.EventDrivenState.Phase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyframeTrackState.EventDrivenState.Phase(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t *destructiveInjectEnumTag for KeyframeTrackState.EventDrivenState.Phase(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

uint64_t type metadata accessor for KeyframeTrackState.EventDrivenState.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeTrackState.EventDrivenState.Phase);
}

uint64_t _AnyResolvedPaint.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 168) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 184), a1);
  return v2;
}

uint64_t ResolvedPaint.isCALayerCompatible.getter()
{
  return 1;
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance LinearGradient._Paint()
{
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)();
}

uint64_t ResolvedPaint.encodePaint(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v8;
  char v9;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 72))(&v8, a2, a3);
  if ((v9 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 24) + 8))(a1, a2);
  else
    return ProtobufEncoder.messageField<A>(_:_:)(v8, v3, a2, *(_QWORD *)(a3 + 24));
}

{
  return ResolvedPaint.encodePaint(to:)(a1, a2, a3);
}

void protocol witness for ShapeStyle._apply(to:) in conformance LinearGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

void specialized Paint._apply(to:)(uint64_t a1)
{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  specialized Paint._apply(to:)(a1);
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

uint64_t sub_234C0B65C()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234C0BB24()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234C0C1DC()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234C0C594()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234C0C948()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234C0CD00()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234C0D0CC()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance RadialGradient._Paint()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v3);
}

void protocol witness for ShapeStyle._apply(to:) in conformance RadialGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance EllipticalGradient._Paint()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v3);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance EllipticalGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type EllipticalGradient and conformance EllipticalGradient();
  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

double static Paint._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  double result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 24);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 72);
  v20 = v10;
  *(_QWORD *)&result = static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v21, &v13, a3, a4, *(_QWORD *)(a5 + 8), a6, a7).n128_u64[0];
  return result;
}

void protocol witness for ShapeStyle._apply(to:) in conformance EllipticalGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance AngularGradient._Paint()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  ProtobufEncoder.encodeVarint(_:)(0x22uLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v3);
}

void protocol witness for ShapeStyle._apply(to:) in conformance AngularGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

void ResolvedPaint.resolvedGradient.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

{
  ResolvedPaint.resolvedGradient.getter(a1);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance Color.Resolved()
{
  float *v0;
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(v1, v2, v3, v4);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyLinearGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type _AnyLinearGradient and conformance _AnyLinearGradient();
  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

void protocol witness for ShapeStyle._apply(to:) in conformance _AnyLinearGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyRadialGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type _AnyRadialGradient and conformance _AnyRadialGradient();
  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

void protocol witness for ShapeStyle._apply(to:) in conformance _AnyRadialGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyEllipticalGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient();
  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

void protocol witness for ShapeStyle._apply(to:) in conformance _AnyEllipticalGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyAngularGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type _AnyAngularGradient and conformance _AnyAngularGradient();
  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

void protocol witness for ShapeStyle._apply(to:) in conformance _AnyAngularGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance ImagePaint._Paint()
{
  ProtobufEncoder.encodeVarint(_:)(0x32uLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)();
}

void protocol witness for ShapeStyle._apply(to:) in conformance ImagePaint(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

uint64_t ResolvedPaint.isClear.getter()
{
  return 0;
}

uint64_t ResolvedPaint.isOpaque.getter()
{
  return 0;
}

double AnyResolvedPaint.protobufPaint.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AnyResolvedPaint.isClear.getter()
{
  return 0;
}

uint64_t AnyResolvedPaint.isOpaque.getter()
{
  return 0;
}

void AnyResolvedPaint.resolvedGradient.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t AnyResolvedPaint.isCALayerCompatible.getter()
{
  return 0;
}

uint64_t AnyResolvedPaint.isEqual(to:)()
{
  return 0;
}

void AnyResolvedPaint.encode(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyResolvedPaint.as<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  type metadata accessor for _AnyResolvedPaint(0, a1, a2, a3);
  v7 = swift_dynamicCastClass();
  v8 = v7;
  if (v7)
    v7 = swift_retain();
  v11[5] = v8;
  MEMORY[0x24BDAC7A8](v7);
  v11[2] = a1;
  v11[3] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnyResolvedPaint.as<A>(type:), (uint64_t)v11, MEMORY[0x24BEE4078], a1, v9, a4);
  return swift_release();
}

uint64_t static AnyResolvedPaint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a2) & 1;
}

uint64_t AnyResolvedPaint.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyResolvedPaint.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyResolvedPaint(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*a2) & 1;
}

uint64_t _AnyResolvedPaint.paint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 168) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 184));
}

uint64_t _AnyResolvedPaint.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 168) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184), a1);
  return v1;
}

uint64_t _AnyResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;
  char v13;

  v5 = *v4;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(*v4 + 176);
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  v12 = v6;
  v13 = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(v8 + 32))(a1, v11, a3, a4, *(_QWORD *)(v5 + 168));
}

uint64_t _AnyResolvedPaint.protobufPaint.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  v2 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  a1[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v2, v3);
}

uint64_t _AnyResolvedPaint.isClear.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 176) + 40))(*(_QWORD *)(*(_QWORD *)v0 + 168)) & 1;
}

uint64_t _AnyResolvedPaint.isOpaque.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 176) + 48))(*(_QWORD *)(*(_QWORD *)v0 + 168)) & 1;
}

uint64_t _AnyResolvedPaint.resolvedGradient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 176) + 56))(*(_QWORD *)(*(_QWORD *)v0 + 168));
}

uint64_t _AnyResolvedPaint.isCALayerCompatible.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 176) + 64))(*(_QWORD *)(*(_QWORD *)v0 + 168)) & 1;
}

uint64_t _AnyResolvedPaint.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t _AnyResolvedPaint.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a3 + 8))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 184), *(_QWORD *)(*(_QWORD *)v3 + 168), *(_QWORD *)(*(_QWORD *)v3 + 176), a2, a3);
}

uint64_t _AnyResolvedPaint.encode(to:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 176) + 80))(a1, *(_QWORD *)(*(_QWORD *)v1 + 168));
}

uint64_t _AnyResolvedPaint.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 168) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
}

uint64_t _AnyResolvedPaint.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 168) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
  return v0;
}

uint64_t _AnyResolvedPaint.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 168) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_deallocClassInstance();
}

uint64_t CodableResolvedPaint.Tag.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::CodableResolvedPaint::Tag __swiftcall CodableResolvedPaint.Tag.init(rawValue:)(SwiftUI::CodableResolvedPaint::Tag rawValue)
{
  SwiftUI::CodableResolvedPaint::Tag *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static CodableResolvedPaint.Tag.color.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CodableResolvedPaint.Tag.linearGradient.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static CodableResolvedPaint.Tag.radialGradient.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

void static CodableResolvedPaint.Tag.angularGradient.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static CodableResolvedPaint.Tag.ellipticalGradient.getter(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

void static CodableResolvedPaint.Tag.image.getter(_QWORD *a1@<X8>)
{
  *a1 = 6;
}

void static CodableResolvedPaint.Tag.anchorRect.getter(_QWORD *a1@<X8>)
{
  *a1 = 7;
}

void static CodableResolvedPaint.Tag.shader.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static CodableResolvedPaint.Tag.meshGradient.getter(_QWORD *a1@<X8>)
{
  *a1 = 9;
}

BOOL static CodableResolvedPaint.Tag.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ProtobufTag.rawValue.getter in conformance CodableResolvedPaint.Tag()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t lazy protocol witness table accessor for type EllipticalGradient and conformance EllipticalGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EllipticalGradient and conformance EllipticalGradient;
  if (!lazy protocol witness table cache variable for type EllipticalGradient and conformance EllipticalGradient)
  {
    result = MEMORY[0x23B7C9C04]("Qp=\x1B", &type metadata for EllipticalGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient and conformance EllipticalGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyLinearGradient and conformance _AnyLinearGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AnyLinearGradient and conformance _AnyLinearGradient;
  if (!lazy protocol witness table cache variable for type _AnyLinearGradient and conformance _AnyLinearGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AnyLinearGradient, &type metadata for _AnyLinearGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyLinearGradient and conformance _AnyLinearGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyRadialGradient and conformance _AnyRadialGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AnyRadialGradient and conformance _AnyRadialGradient;
  if (!lazy protocol witness table cache variable for type _AnyRadialGradient and conformance _AnyRadialGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AnyRadialGradient, &type metadata for _AnyRadialGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyRadialGradient and conformance _AnyRadialGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient;
  if (!lazy protocol witness table cache variable for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AnyEllipticalGradient, &type metadata for _AnyEllipticalGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyAngularGradient and conformance _AnyAngularGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AnyAngularGradient and conformance _AnyAngularGradient;
  if (!lazy protocol witness table cache variable for type _AnyAngularGradient and conformance _AnyAngularGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AnyAngularGradient, &type metadata for _AnyAngularGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAngularGradient and conformance _AnyAngularGradient);
  }
  return result;
}

uint64_t protocol witness for ProtobufTag.init(rawValue:) in conformance CodableResolvedPaint.Tag@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableResolvedPaint.base.getter()
{
  return swift_retain();
}

uint64_t CodableResolvedPaint.base.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*CodableResolvedPaint.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableResolvedPaint.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableResolvedPaint.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

unint64_t CodableResolvedPaint.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  int v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t (*v42)();
  ValueMetadata *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  _BYTE v124[32];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
    goto LABEL_150;
  v7 = v2;
  v8 = 0;
  while (2)
  {
    result = a1[3];
    if (result)
    {
      v10 = a1[4];
      if (v5 < v10)
        goto LABEL_9;
      if (v10 < v5)
        goto LABEL_152;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v7)
      return swift_release();
    if (result < 8)
    {
LABEL_152:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_release();
    }
LABEL_9:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        v11 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        v13 = v11[2];
        v12 = v11[3];
        if (v13 >= v12 >> 1)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
        v11[2] = v13 + 1;
        v11[v13 + 4] = v6;
        a1[5] = v11;
        v14 = a1;
        v15 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release();
        if (v15 < 0)
        {
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
        }
        else
        {
          v16 = a1[1] + v15;
          if (v6 < v16)
            goto LABEL_152;
          a1[2] = v16;
          v17 = specialized Color.Resolved.init(from:)(a1);
          v14 = (_QWORD *)a1[5];
          if (v14[2])
          {
            v21 = v17;
            v22 = v18;
            v23 = v19;
            v24 = v20;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v25 = v14[2];
              if (!v25)
                goto LABEL_196;
              goto LABEL_21;
            }
            v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            v25 = v14[2];
            if (v25)
            {
LABEL_21:
              v26 = v25 - 1;
              v27 = v14[v26 + 4];
              v14[2] = v26;
              a1[5] = v14;
              a1[2] = v27;
              type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
              v28 = swift_allocObject();
              *(float *)(v28 + 16) = v21;
              *(_DWORD *)(v28 + 20) = v22;
              *(_DWORD *)(v28 + 24) = v23;
              *(_DWORD *)(v28 + 28) = v24;
              goto LABEL_118;
            }
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
            __break(1u);
            v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            v107 = v106[2];
            if (v107)
              goto LABEL_174;
            __break(1u);
            v106 = (_QWORD *)a1[5];
            if (v106[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v107 = v106[2];
                if (v107)
                  goto LABEL_174;
LABEL_159:
                __break(1u);
                v106 = (_QWORD *)a1[5];
                if (v106[2])
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    v107 = v106[2];
                    if (v107)
                      goto LABEL_174;
LABEL_162:
                    __break(1u);
                    v106 = (_QWORD *)a1[5];
                    if (v106[2])
                    {
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                      {
                        v107 = v106[2];
                        if (v107)
                          goto LABEL_174;
LABEL_165:
                        __break(1u);
                        v106 = (_QWORD *)a1[5];
                        if (v106[2])
                        {
                          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                          {
                            v107 = v106[2];
                            if (v107)
                              goto LABEL_174;
LABEL_168:
                            __break(1u);
                            v106 = (_QWORD *)a1[5];
                            if (v106[2])
                            {
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                              {
                                v107 = v106[2];
                                if (!v107)
                                  goto LABEL_171;
LABEL_174:
                                v108 = v107 - 1;
                                v109 = v106[v108 + 4];
                                v106[2] = v108;
                                result = swift_release();
                                a1[5] = v106;
                                a1[2] = v109;
                                return result;
                              }
                            }
                            else
                            {
                              __break(1u);
                            }
                            v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                            v107 = v106[2];
                            if (v107)
                              goto LABEL_174;
LABEL_171:
                            __break(1u);
                            v106 = (_QWORD *)a1[5];
                            if (v106[2])
                            {
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                              {
                                v107 = v106[2];
                                if (v107)
                                  goto LABEL_174;
LABEL_224:
                                __break(1u);
                                __break(1u);
                                v113 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                                v114 = v113[2];
                                if (v114)
                                {
                                  v110 = v114 - 1;
                                  v111 = v113[v110 + 4];
                                  v113[2] = v110;
                                  result = swift_release();
                                }
                                else
                                {
                                  __break(1u);
                                  __break(1u);
                                  v113 = specialized _ArrayBuffer._consumeAndCreateNew()(v113);
                                  v115 = v113[2];
                                  if (!v115)
                                    __break(1u);
                                  v112 = v115 - 1;
                                  v111 = v113[v112 + 4];
                                  v113[2] = v112;
                                  result = swift_release_n();
                                }
                                a1[5] = v113;
                                a1[2] = v111;
                                return result;
                              }
                            }
                            else
                            {
                              __break(1u);
                            }
                            v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                            v107 = v106[2];
                            if (v107)
                              goto LABEL_174;
                            goto LABEL_224;
                          }
                        }
                        else
                        {
                          __break(1u);
                        }
                        v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                        v107 = v106[2];
                        if (v107)
                          goto LABEL_174;
                        goto LABEL_168;
                      }
                    }
                    else
                    {
                      __break(1u);
                    }
                    v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                    v107 = v106[2];
                    if (v107)
                      goto LABEL_174;
                    goto LABEL_165;
                  }
                }
                else
                {
                  __break(1u);
                }
                v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                v107 = v106[2];
                if (v107)
                  goto LABEL_174;
                goto LABEL_162;
              }
            }
            else
            {
              __break(1u);
            }
            v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
            v107 = v106[2];
            if (v107)
              goto LABEL_174;
            goto LABEL_159;
          }
        }
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
        goto LABEL_196;
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        v29 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v29[2] = v31 + 1;
        v29[v31 + 4] = v6;
        a1[5] = v29;
        v14 = a1;
        v32 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release();
        if (v32 < 0)
          goto LABEL_181;
        v33 = a1[1] + v32;
        if (v6 < v33)
          goto LABEL_152;
        a1[2] = v33;
        LinearGradient._Paint.init(from:)((unint64_t)a1, &v123);
        v14 = (_QWORD *)a1[5];
        if (!v14[2])
          goto LABEL_190;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v34 = v14[2];
          if (!v34)
            goto LABEL_197;
        }
        else
        {
          v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          v34 = v14[2];
          if (!v34)
            goto LABEL_197;
        }
        v35 = v34 - 1;
        v36 = v14[v35 + 4];
        v14[2] = v35;
        a1[5] = v14;
        a1[2] = v36;
        v37 = v123;
        v38 = BYTE8(v123);
        v119 = *(_OWORD *)v124;
        v40 = *(_QWORD *)&v124[24];
        v39 = *(_QWORD *)&v124[16];
        v41 = (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<LinearGradient._Paint>;
        v42 = lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint;
        v43 = &type metadata for LinearGradient._Paint;
        goto LABEL_73;
      case 3uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        v44 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
        v46 = v44[2];
        v45 = v44[3];
        if (v46 >= v45 >> 1)
          v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
        v44[2] = v46 + 1;
        v44[v46 + 4] = v6;
        a1[5] = v44;
        v14 = a1;
        v47 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release();
        if (v47 < 0)
          goto LABEL_182;
        v48 = a1[1] + v47;
        if (v6 < v48)
          goto LABEL_152;
        a1[2] = v48;
        RadialGradient._Paint.init(from:)((unint64_t)a1, (uint64_t)&v123);
        v14 = (_QWORD *)a1[5];
        if (!v14[2])
          goto LABEL_191;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v49 = v14[2];
          if (!v49)
            goto LABEL_198;
        }
        else
        {
          v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          v49 = v14[2];
          if (!v49)
            goto LABEL_198;
        }
        v50 = v49 - 1;
        v51 = v14[v50 + 4];
        v14[2] = v50;
        a1[5] = v14;
        a1[2] = v51;
        v37 = v123;
        v38 = BYTE8(v123);
        v119 = *(_OWORD *)v124;
        v40 = *(_QWORD *)&v124[24];
        v39 = *(_QWORD *)&v124[16];
        v41 = (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<RadialGradient._Paint>;
        v42 = lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint;
        v43 = &type metadata for RadialGradient._Paint;
        goto LABEL_73;
      case 4uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        v52 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
        v54 = v52[2];
        v53 = v52[3];
        if (v54 >= v53 >> 1)
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v52);
        v52[2] = v54 + 1;
        v52[v54 + 4] = v6;
        a1[5] = v52;
        v14 = a1;
        v55 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release();
        if (v55 < 0)
          goto LABEL_183;
        v56 = a1[1] + v55;
        if (v6 < v56)
          goto LABEL_152;
        a1[2] = v56;
        AngularGradient._Paint.init(from:)((unint64_t)a1, (uint64_t)&v123);
        v14 = (_QWORD *)a1[5];
        if (!v14[2])
          goto LABEL_192;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v57 = v14[2];
          if (!v57)
            goto LABEL_199;
        }
        else
        {
          v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          v57 = v14[2];
          if (!v57)
            goto LABEL_199;
        }
        v58 = v57 - 1;
        v59 = v14[v58 + 4];
        v14[2] = v58;
        a1[5] = v14;
        a1[2] = v59;
        v37 = v123;
        v38 = BYTE8(v123);
        v119 = *(_OWORD *)v124;
        v40 = *(_QWORD *)&v124[24];
        v39 = *(_QWORD *)&v124[16];
        v41 = (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AngularGradient._Paint>;
        v42 = lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint;
        v43 = &type metadata for AngularGradient._Paint;
        goto LABEL_73;
      case 5uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        v60 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
        v62 = v60[2];
        v61 = v60[3];
        if (v62 >= v61 >> 1)
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v62 + 1, 1, v60);
        v60[2] = v62 + 1;
        v60[v62 + 4] = v6;
        a1[5] = v60;
        v14 = a1;
        v63 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release();
        if (v63 < 0)
          goto LABEL_184;
        v64 = a1[1] + v63;
        if (v6 < v64)
          goto LABEL_152;
        a1[2] = v64;
        EllipticalGradient._Paint.init(from:)((unint64_t)a1, (uint64_t)&v123);
        v14 = (_QWORD *)a1[5];
        if (!v14[2])
          goto LABEL_193;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v65 = v14[2];
          if (!v65)
            goto LABEL_200;
        }
        else
        {
          v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          v65 = v14[2];
          if (!v65)
            goto LABEL_200;
        }
        v66 = v65 - 1;
        v67 = v14[v66 + 4];
        v14[2] = v66;
        a1[5] = v14;
        a1[2] = v67;
        v37 = v123;
        v38 = BYTE8(v123);
        v119 = *(_OWORD *)v124;
        v40 = *(_QWORD *)&v124[24];
        v39 = *(_QWORD *)&v124[16];
        v41 = (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<EllipticalGradient._Paint>;
        v42 = lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
        v43 = &type metadata for EllipticalGradient._Paint;
LABEL_73:
        type metadata accessor for FontBox<Font.SystemProvider>(0, v41, (uint64_t (*)(void))v42, (uint64_t)v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        v28 = swift_allocObject();
        *(_QWORD *)(v28 + 16) = v37;
        *(_BYTE *)(v28 + 24) = v38;
        *(_OWORD *)(v28 + 32) = v119;
        *(_QWORD *)(v28 + 48) = v39;
        *(_QWORD *)(v28 + 56) = v40;
        goto LABEL_118;
      case 6uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        ProtobufDecoder.beginMessage()();
        if (v7)
          return swift_release();
        ImagePaint._Paint.init(from:)((id *)a1, (uint64_t)&v123);
        v7 = 0;
        v14 = (_QWORD *)a1[5];
        if (!v14[2])
          goto LABEL_187;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v68 = v14[2];
          if (!v68)
            goto LABEL_188;
        }
        else
        {
          v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          v68 = v14[2];
          if (!v68)
            goto LABEL_188;
        }
        v69 = v68 - 1;
        v70 = v14[v69 + 4];
        v14[2] = v69;
        a1[5] = v14;
        a1[2] = v70;
        type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<ImagePaint._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint, (uint64_t)&type metadata for ImagePaint._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        v28 = swift_allocObject();
        v71 = v129;
        *(_OWORD *)(v28 + 112) = v128;
        *(_OWORD *)(v28 + 128) = v71;
        *(_OWORD *)(v28 + 144) = v130;
        v72 = v125;
        *(_OWORD *)(v28 + 48) = *(_OWORD *)&v124[16];
        *(_OWORD *)(v28 + 64) = v72;
        v73 = v127;
        *(_OWORD *)(v28 + 80) = v126;
        *(_OWORD *)(v28 + 96) = v73;
        v74 = *(_OWORD *)v124;
        *(_OWORD *)(v28 + 16) = v123;
        *(_OWORD *)(v28 + 32) = v74;
        goto LABEL_118;
      case 7uLL:
        if (!v8)
        {
          v5 = a1[1];
          v6 = a1[2];
          if (v5 >= v6)
            goto LABEL_150;
          continue;
        }
        if ((result & 7) != 2)
          goto LABEL_152;
        v75 = (_QWORD *)a1[5];
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75[2] + 1, 1, v75);
        v77 = v75[2];
        v76 = v75[3];
        if (v77 >= v76 >> 1)
          v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v76 > 1), v77 + 1, 1, v75);
        v75[2] = v77 + 1;
        v75[v77 + 4] = v6;
        a1[5] = v75;
        v14 = a1;
        v78 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release_n();
        if (v78 < 0)
          goto LABEL_203;
        v79 = a1[1] + v78;
        if (v6 >= v79)
        {
          a1[2] = v79;
          v123 = 0u;
          *(_OWORD *)v124 = 0u;
          closure #1 in CGRect.init(from:)((unint64_t)&v123, a1, &v122);
          v14 = (_QWORD *)a1[5];
          if (!v14[2])
            goto LABEL_204;
          v117 = *(_OWORD *)v124;
          v120 = v123;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            v80 = v14[2];
            if (v80)
              goto LABEL_92;
LABEL_149:
            __break(1u);
LABEL_150:
            a1[3] = 0;
            goto LABEL_151;
          }
          v80 = v14[2];
          if (!v80)
            goto LABEL_149;
LABEL_92:
          v81 = v80 - 1;
          v82 = v14[v81 + 4];
          v14[2] = v81;
          a1[5] = v14;
          a1[2] = v82;
          v123 = v120;
          *(_OWORD *)v124 = v117;
          *(_QWORD *)&v124[16] = 0;
          (*(void (**)(__int128 *, void *, _UNKNOWN **))(*(_QWORD *)v8 + 136))(&v123, &unk_250620178, &protocol witness table for Visitor #1 in AnyResolvedPaint.anchorRect(_:));
          v28 = *(_QWORD *)&v124[16];
          if (!*(_QWORD *)&v124[16])
          {
            __break(1u);
            JUMPOUT(0x234C0F790);
          }
          result = swift_release_n();
LABEL_119:
          v8 = v28;
LABEL_120:
          v5 = a1[1];
          v6 = a1[2];
          if (v5 >= v6)
          {
            a1[3] = 0;
            if (v8)
            {
              *a2 = v8;
              return result;
            }
LABEL_151:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          continue;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_release_n();
      case 8uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        v83 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
        v85 = v83[2];
        v84 = v83[3];
        if (v85 >= v84 >> 1)
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v84 > 1), v85 + 1, 1, v83);
        v83[2] = v85 + 1;
        v83[v85 + 4] = v6;
        a1[5] = v83;
        v14 = a1;
        v86 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release();
        if (v86 < 0)
          goto LABEL_185;
        v87 = a1[1] + v86;
        if (v6 < v87)
          goto LABEL_152;
        a1[2] = v87;
        Shader.ResolvedShader.init(from:)(a1, (double *)&v123);
        v14 = (_QWORD *)a1[5];
        if (!v14[2])
          goto LABEL_194;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v88 = v14[2];
          if (!v88)
            goto LABEL_201;
        }
        else
        {
          v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          v88 = v14[2];
          if (!v88)
            goto LABEL_201;
        }
        v89 = v88 - 1;
        v90 = v14[v89 + 4];
        v14[2] = v89;
        a1[5] = v14;
        a1[2] = v90;
        v92 = v123;
        v91 = *(_QWORD *)v124;
        v93 = *(_DWORD *)&v124[8];
        type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v92;
        *(_QWORD *)(v28 + 32) = v91;
        *(_DWORD *)(v28 + 40) = v93;
        goto LABEL_118;
      case 9uLL:
        if ((result & 7) != 2)
          goto LABEL_152;
        v94 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v94[2] + 1, 1, v94);
        v96 = v94[2];
        v95 = v94[3];
        if (v96 >= v95 >> 1)
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v95 > 1), v96 + 1, 1, v94);
        v94[2] = v96 + 1;
        v94[v96 + 4] = v6;
        a1[5] = v94;
        v14 = a1;
        v97 = ProtobufDecoder.decodeVarint()();
        if (v7)
          return swift_release();
        if (v97 < 0)
          goto LABEL_186;
        v98 = a1[1] + v97;
        if (v6 < v98)
          goto LABEL_152;
        a1[2] = v98;
        MeshGradient._Paint.init(from:)((uint64_t)a1, (uint64_t)&v123);
        v14 = (_QWORD *)a1[5];
        if (!v14[2])
          goto LABEL_195;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v99 = v14[2];
          if (!v99)
            goto LABEL_202;
        }
        else
        {
          v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          v99 = v14[2];
          if (!v99)
            goto LABEL_202;
        }
        v100 = v99 - 1;
        v101 = v14[v100 + 4];
        v14[2] = v100;
        a1[5] = v14;
        a1[2] = v101;
        v102 = v123;
        v103 = BYTE8(v123);
        v104 = *(_QWORD *)v124;
        v121 = *(_QWORD *)&v124[24];
        v118 = v125;
        v116 = DWORD2(v125);
        type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        v28 = swift_allocObject();
        *(_QWORD *)(v28 + 16) = v102;
        *(_BYTE *)(v28 + 24) = v103;
        *(_QWORD *)(v28 + 32) = v104;
        *(_OWORD *)(v28 + 40) = *(_OWORD *)&v124[8];
        *(_QWORD *)(v28 + 56) = v121;
        *(_QWORD *)(v28 + 64) = v118;
        *(_DWORD *)(v28 + 72) = v116;
LABEL_118:
        result = swift_release();
        goto LABEL_119;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v7)
              return swift_release();
            goto LABEL_120;
          case 1uLL:
            v105 = a1[1] + 8;
            if (v6 < v105)
              goto LABEL_152;
            goto LABEL_131;
          case 2uLL:
            v14 = a1;
            result = ProtobufDecoder.decodeVarint()();
            if (v7)
              return swift_release();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_205;
            v105 = a1[1] + result;
            if (v6 < v105)
              goto LABEL_152;
LABEL_131:
            a1[1] = v105;
            break;
          case 5uLL:
            v105 = a1[1] + 4;
            if (v6 < v105)
              goto LABEL_152;
            goto LABEL_131;
          default:
            goto LABEL_152;
        }
        goto LABEL_120;
    }
  }
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableResolvedPaint()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableResolvedPaint@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodableResolvedPaint.init(from:)(a1, a2);
}

uint64_t visitPaint<A>(_:) in Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AnchoredResolvedPaint(0, v10, v11, v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - v15;
  v17 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnchoredResolvedPaint<A>, v13, v14);
  type metadata accessor for _AnyResolvedPaint(0, v13, v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
  AnchoredResolvedPaint.init(_:bounds:)((uint64_t)v9, a2, a3, (uint64_t)v16, *(double *)v3, *(double *)(v3 + 8), *(double *)(v3 + 16), *(double *)(v3 + 24));
  v19 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 168) - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)v19 + 184), v16);
  result = swift_release();
  *(_QWORD *)(v3 + 32) = v19;
  return result;
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance Shader@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type Shader and conformance Shader();
  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

void protocol witness for ShapeStyle._apply(to:) in conformance Shader(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

void protocol witness for ResolvedPaint.encodePaint(to:) in conformance Shader.ResolvedShader()
{
  specialized ProtobufEncoder.messageField<A>(_:_:)(8);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance MeshGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type MeshGradient and conformance MeshGradient();
  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

void protocol witness for ShapeStyle._apply(to:) in conformance MeshGradient(uint64_t a1)
{
  specialized Paint._apply(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint;
  if (!lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MeshGradient._Paint, &type metadata for MeshGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint;
  if (!lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MeshGradient._Paint, &type metadata for MeshGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint;
  if (!lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MeshGradient._Paint, &type metadata for MeshGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint);
  }
  return result;
}

uint64_t type metadata accessor for _AnyResolvedPaint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyResolvedPaint);
}

unint64_t lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader;
  if (!lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.ResolvedShader, &type metadata for Shader.ResolvedShader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader;
  if (!lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.ResolvedShader, &type metadata for Shader.ResolvedShader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader;
  if (!lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.ResolvedShader, &type metadata for Shader.ResolvedShader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shader and conformance Shader()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader and conformance Shader;
  if (!lazy protocol witness table cache variable for type Shader and conformance Shader)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader, &type metadata for Shader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader and conformance Shader);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshGradient and conformance MeshGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshGradient and conformance MeshGradient;
  if (!lazy protocol witness table cache variable for type MeshGradient and conformance MeshGradient)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MeshGradient, &type metadata for MeshGradient);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient and conformance MeshGradient);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableResolvedPaint.Tag(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag;
  if (!lazy protocol witness table cache variable for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableResolvedPaint.Tag, &type metadata for CodableResolvedPaint.Tag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag);
  }
  return result;
}

uint64_t dispatch thunk of ResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  char v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t, _OWORD *);
  __int128 v9;
  __int128 v10;
  _OWORD v12[2];
  char v13;
  _OWORD v14[2];
  char v15;

  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_BYTE *)(a4 + 32);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, _OWORD *))(a6 + 32);
  v9 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v9;
  v15 = v6;
  v10 = *(_OWORD *)(a4 + 16);
  v12[0] = *(_OWORD *)a4;
  v12[1] = v10;
  v13 = v7;
  return v8(v14, a2, a3, v12);
}

uint64_t dispatch thunk of ResolvedPaint.isClear.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ResolvedPaint.isOpaque.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ResolvedPaint.resolvedGradient.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ResolvedPaint.isCALayerCompatible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of static ResolvedPaint.leafProtobufTag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ResolvedPaint.encodePaint(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t type metadata accessor for AnyResolvedPaint()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyResolvedPaint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t (*v7)(_OWORD *, uint64_t, uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  char v12;
  _OWORD v13[2];
  char v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_BYTE *)(a4 + 32);
  v7 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v4 + 80);
  v8 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v8;
  v14 = v5;
  v9 = *(_OWORD *)(a4 + 16);
  v11[0] = *(_OWORD *)a4;
  v11[1] = v9;
  v12 = v6;
  return v7(v13, a2, a3, v11);
}

uint64_t dispatch thunk of AnyResolvedPaint.protobufPaint.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isClear.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isOpaque.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AnyResolvedPaint.resolvedGradient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isCALayerCompatible.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isEqual(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AnyResolvedPaint.visit<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AnyResolvedPaint.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t type metadata completion function for _AnyResolvedPaint()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for _AnyResolvedPaint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _AnyResolvedPaint.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of ResolvedPaintVisitor.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for CodableResolvedPaint()
{
  return &type metadata for CodableResolvedPaint;
}

ValueMetadata *type metadata accessor for CodableResolvedPaint.Tag()
{
  return &type metadata for CodableResolvedPaint.Tag;
}

_QWORD *assignWithCopy for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

void *type metadata accessor for Visitor #1 in AnyResolvedPaint.anchorRect(_:)()
{
  return &unk_250620178;
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<MeshGradient._Paint>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<MeshGradient._Paint>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint);
    v6 = type metadata accessor for _AnyResolvedPaint(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<MeshGradient._Paint>>);
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<Shader.ResolvedShader>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<Shader.ResolvedShader>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<Shader.ResolvedShader> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader);
    v6 = type metadata accessor for _AnyResolvedPaint(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<Shader.ResolvedShader>>);
  }
}

uint64_t lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnchoredResolvedPaint<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<ImagePaint._Paint>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<ImagePaint._Paint>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<ImagePaint._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint, (uint64_t)&type metadata for ImagePaint._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<ImagePaint._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<ImagePaint._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint, (uint64_t)&type metadata for ImagePaint._Paint);
    v6 = type metadata accessor for _AnyResolvedPaint(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<ImagePaint._Paint>>);
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<AngularGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint);
    v6 = type metadata accessor for _AnyResolvedPaint(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>);
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<EllipticalGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint);
    v6 = type metadata accessor for _AnyResolvedPaint(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>);
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<RadialGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint);
    v6 = type metadata accessor for _AnyResolvedPaint(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>);
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<LinearGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint);
    v6 = type metadata accessor for _AnyResolvedPaint(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>);
  }
}

uint64_t partial apply for closure #1 in AnyResolvedPaint.as<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 184));
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_234C10574()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  char *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_23528C9A0[*v0]);
  return Hasher._finalize()();
}

SwiftUI::Axis __swiftcall Axis.init(edge:)(SwiftUI::Edge edge)
{
  return (edge & 1) == 0;
}

void *static Axis.allCases.getter()
{
  return &outlined read-only object #0 of static Axis.allCases.getter;
}

Swift::Bool __swiftcall Axis.Set.contains(_:)(SwiftUI::Axis a1)
{
  unsigned __int8 v1;

  return (v1 >> (a1 & 1)) & 1;
}

BOOL Axis.otherAxis.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Axis.perpendicularEdges.getter(char a1)
{
  return !(a1 & 1) | ((a1 & 1 ^ 3u) << 8);
}

uint64_t Axis.Set.init(_:)(char a1)
{
  return (1 << (a1 & 1));
}

uint64_t static Axis.Set.horizontal.getter()
{
  return 1;
}

uint64_t static Axis.Set.vertical.getter()
{
  return 2;
}

uint64_t static Axis.Set.both.getter()
{
  return 3;
}

uint64_t Axis.rawValue.getter(char a1)
{
  return a1 & 1;
}

BOOL Axis.Set.isOrthogonal(to:)(char a1, char a2)
{
  return (a2 ^ a1) == 3;
}

SwiftUI::Axis_optional __swiftcall Axis.init(rawValue:)(Swift::Int8 rawValue)
{
  SwiftUI::Axis_optional v1;

  if (rawValue == 1)
    v1.value = SwiftUI_Axis_vertical;
  else
    v1.value = SwiftUI_Axis_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Axis(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Axis;
}

uint64_t Axis.Alignment.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!(_BYTE)result)
    v2 = 0;
  *a2 = v2;
  return result;
}

void Axis.Alignment.init(rawValue:)(char *a1@<X8>, double a2@<D0>)
{
  char v2;
  char v3;

  if (a2 == 0.0)
  {
    *a1 = 0;
  }
  else
  {
    if (a2 == 1.0)
      v2 = 2;
    else
      v2 = 3;
    if (a2 == 0.5)
      v3 = 1;
    else
      v3 = v2;
    *a1 = v3;
  }
}

double Axis.Alignment.rawValue.getter()
{
  char *v0;

  return dbl_23528C9B8[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Axis.Alignment(char *a1, char *a2)
{
  return dbl_23528C9B8[*a1] == dbl_23528C9B8[*a2];
}

void protocol witness for Hashable.hash(into:) in conformance Axis.Alignment()
{
  char *v0;

  Hasher._combine(_:)(qword_23528C9A0[*v0]);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance Axis.Alignment(double *a1@<X0>, char *a2@<X8>)
{
  Axis.Alignment.init(rawValue:)(a2, *a1);
}

double protocol witness for RawRepresentable.rawValue.getter in conformance Axis.Alignment@<D0>(double *a1@<X8>)
{
  char *v1;
  double result;

  result = dbl_23528C9B8[*v1];
  *a1 = result;
  return result;
}

uint64_t Axis.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C61636974726576;
  else
    return 0x746E6F7A69726F68;
}

unint64_t lazy protocol witness table accessor for type Axis.Set and conformance Axis.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Axis.Set, &type metadata for Axis.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Axis.Set, &type metadata for Axis.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Axis.Set, &type metadata for Axis.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Axis.Set, &type metadata for Axis.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Axis and conformance Axis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Axis and conformance Axis;
  if (!lazy protocol witness table cache variable for type Axis and conformance Axis)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Axis, &type metadata for Axis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis and conformance Axis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Axis] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Axis] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Axis] and conformance [A])
  {
    type metadata accessor for [Axis]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Axis] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [Axis]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Axis])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Axis]);
  }
}

unint64_t lazy protocol witness table accessor for type Axis.Alignment and conformance Axis.Alignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Axis.Alignment and conformance Axis.Alignment;
  if (!lazy protocol witness table cache variable for type Axis.Alignment and conformance Axis.Alignment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Axis.Alignment, &type metadata for Axis.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Alignment and conformance Axis.Alignment);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Axis()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61636974726576;
  else
    return 0x746E6F7A69726F68;
}

uint64_t storeEnumTagSinglePayload for Axis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234C10B2C + 4 * byte_23528C633[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234C10B60 + 4 * byte_23528C62E[v4]))();
}

uint64_t sub_234C10B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C10B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C10B70);
  return result;
}

uint64_t sub_234C10B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C10B84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234C10B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C10B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Axis()
{
  return &type metadata for Axis;
}

ValueMetadata *type metadata accessor for Axis.Set()
{
  return &type metadata for Axis.Set;
}

uint64_t storeEnumTagSinglePayload for Axis.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234C10C08 + 4 * byte_23528C63D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234C10C3C + 4 * byte_23528C638[v4]))();
}

uint64_t sub_234C10C3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C10C44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C10C4CLL);
  return result;
}

uint64_t sub_234C10C58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C10C60);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234C10C64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C10C6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Axis.Alignment()
{
  return &type metadata for Axis.Alignment;
}

void Gesture.debugLabel(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[0] = a1;
  v15[1] = a2;
  v13 = type metadata accessor for GestureLabelModifier(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureLabelModifier<A>, v13);
  Gesture.modifier<A>(_:)((uint64_t)v15, a3, v13, a4, v14, a5);
}

uint64_t type metadata accessor for GestureLabelModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureLabelModifier);
}

void sub_234C10D38()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for GestureLabelModifier(255, AssociatedTypeWitness, v1, v2);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureLabelModifier<A>, v3);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234C10DA4(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
}

uint64_t getEnumTagSinglePayload for GestureLabelModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GestureLabelModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureLabelKey()
{
  return &type metadata for GestureLabelKey;
}

double static GestureLabelModifier._makeGesture(modifier:inputs:body:)@<D0>(uint64_t a1@<X1>, void (*a2)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int OffsetAttribute2;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  _OWORD v25[6];
  uint64_t v26;
  int v27;
  __int128 v28;
  _QWORD v29[2];
  int v30;

  v6 = *(_OWORD *)(a1 + 48);
  v25[2] = *(_OWORD *)(a1 + 32);
  v25[3] = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v25[4] = *(_OWORD *)(a1 + 64);
  v25[5] = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v8;
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_DWORD *)(a1 + 104);
  v28 = *(_OWORD *)(a1 + 108);
  v26 = v9;
  v27 = v10;
  a2(v29, v25);
  type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, v11, v12, v13);
  v15 = *(_QWORD *)(v9 + 16);
  if (v15)
  {
    v16 = v14;
    v17 = 32;
    while (*(_QWORD *)(v9 + v17) != v14)
    {
      v17 += 16;
      if (!--v15)
        goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    closure #1 in implicit closure #1 in static GestureLabelModifier._makeGesture(modifier:inputs:body:)(1, a3, v18, v19);
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    LOBYTE(v25[0]) = 0;
    PreferencesOutputs.subscript.setter(OffsetAttribute2, v16, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v21);
    swift_bridgeObjectRelease();
  }
LABEL_7:
  v22 = v29[1];
  v23 = v30;
  result = *(double *)v29;
  *(_QWORD *)a4 = v29[0];
  *(_QWORD *)(a4 + 8) = v22;
  *(_DWORD *)(a4 + 16) = v23;
  return result;
}

uint64_t closure #1 in implicit closure #1 in static GestureLabelModifier._makeGesture(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for GestureLabelModifier(0, a2, a3, a4);
  type metadata accessor for String?();
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v10, v6, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  return v10[5];
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance GestureLabelModifier<A>@<D0>(uint64_t a1@<X1>, void (*a2)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static GestureLabelModifier._makeGesture(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance GestureLabelKey(_QWORD *result, _QWORD *(*a2)(_QWORD *__return_ptr))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = result;
  v3 = result[1];
  if (v3)
  {
    v4 = *result;
  }
  else
  {
    result = a2(v5);
    v4 = v5[0];
    v3 = v5[1];
  }
  *v2 = v4;
  v2[1] = v3;
  return result;
}

void type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<GestureLabelKey>)
  {
    v4 = type metadata accessor for _AnyPreferenceKey(0, (uint64_t)&type metadata for GestureLabelKey, (uint64_t)&protocol witness table for GestureLabelKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureLabelKey>);
  }
}

uint64_t closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result - 1;
  return result;
}

void _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for String?();
  *a2 = a1 - 1;
}

void type metadata accessor for String?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for String?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for String?);
  }
}

__n128 _PaddingLayout.init(edges:insets:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  __n128 result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  outlined init with take of EdgeInsets?(a2, (uint64_t)v8);
  v5 = v9;
  result = (__n128)v8[0];
  v7 = v8[1];
  *(_BYTE *)a3 = a1;
  *(__n128 *)(a3 + 8) = result;
  *(_OWORD *)(a3 + 24) = v7;
  *(_BYTE *)(a3 + 40) = v5;
  return result;
}

double _PaddingLayout.placement(of:in:)@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  char v19;
  double v20;
  double result;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double v30;
  char v31;
  double v32;
  char v33;

  v4 = a1[1];
  v5 = a1[2];
  v22 = *((_OWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_BYTE *)a1 + 48);
  v23 = *a1;
  v3 = v23;
  v24 = v4;
  v25 = v5;
  _PaddingLayout.effectiveInsets(in:)((uint64_t)&v23);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v22;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  PlacementContext.proposedSize.getter((uint64_t)&v30);
  v17 = v30;
  v18 = v31;
  v19 = v33;
  if ((v31 & 1) == 0)
  {
    if (v30 - (v12 + v16) < 0.0)
      v17 = 0.0;
    else
      v17 = v30 - (v12 + v16);
  }
  v20 = v32;
  if ((v33 & 1) == 0)
  {
    if (v32 - (v10 + v14) < 0.0)
      v20 = 0.0;
    else
      v20 = v32 - (v10 + v14);
  }
  if (one-time initialization token for topLeading != -1)
    swift_once();
  *(double *)a2 = v17;
  *(_BYTE *)(a2 + 8) = v18;
  *(double *)(a2 + 16) = v20;
  *(_BYTE *)(a2 + 24) = v19;
  result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a2 + 32) = static UnitPoint.topLeading;
  *(double *)(a2 + 48) = v12;
  *(double *)(a2 + 56) = v10;
  return result;
}

uint64_t _PaddingLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v3;
  char v4;
  double v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  int v20;
  double v21;
  char v22;
  uint64_t v23;
  int v24;

  v3 = *(double *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *a3;
  v9 = *((_DWORD *)a3 + 2);
  v19 = *(double *)a2;
  v20 = v7;
  _PaddingLayout.effectiveInsets(in:)((uint64_t)&v19);
  v12 = v11;
  v15 = v3 - (v13 + v14);
  if (v15 < 0.0)
    v15 = 0.0;
  if ((v4 & 1) != 0)
    v15 = v3;
  v16 = v5 - (v12 + v10);
  if (v16 < 0.0)
    v16 = 0.0;
  v23 = v8;
  v24 = v9;
  v19 = v15;
  LOBYTE(v20) = v4;
  if ((v6 & 1) != 0)
    v17 = v5;
  else
    v17 = v16;
  v21 = v17;
  v22 = v6;
  return LayoutProxy.size(in:)((uint64_t *)&v19);
}

uint64_t _PaddingLayout.edges.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t _PaddingLayout.edges.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_PaddingLayout.edges.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _PaddingLayout.insets.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)(v1 + 8);
  v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t _PaddingLayout.insets.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined init with take of EdgeInsets?(a1, v1 + 8);
}

uint64_t (*_PaddingLayout.insets.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _PaddingLayout.effectiveInsets(in:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  Swift::UInt32 v3;

  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    v3 = *(_DWORD *)(a1 + 8);
    swift_getKeyPath();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EnvironmentFetch<EdgeInsets>, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v3);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(0, &lazy cache variable for type metadata for KeyPath<EnvironmentValues, EdgeInsets>);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<EdgeInsets> and conformance EnvironmentFetch<A>, &lazy cache variable for type metadata for EnvironmentFetch<EdgeInsets>, (uint64_t)&type metadata for EdgeInsets, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<EdgeInsets> and conformance EnvironmentFetch<A>, &lazy cache variable for type metadata for EnvironmentFetch<EdgeInsets>, (uint64_t)&type metadata for EdgeInsets, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
    v2 = *(double *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
  }
  else
  {
    v2 = *(double *)(v1 + 8);
  }
  EdgeInsets.in(_:)(v2);
}

uint64_t _PaddingLayout.ignoresAutomaticPadding(child:)()
{
  return 1;
}

uint64_t _PaddingLayout.spacing(in:child:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  int v4;
  int v5;
  Swift::UInt32 v6;
  int v7;
  unsigned int v8;
  __int128 *InputValue;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  char v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  char v22;
  _DWORD v23[18];
  unint64_t *v24;
  Swift::UInt32 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *(_DWORD *)(a2 + 4);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v8 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_7;
  }
  else if (static Semantics.forced < v8)
  {
LABEL_7:
    if (v7 == *MEMORY[0x24BE096C0])
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      InputValue = &static LayoutComputer.defaultValue;
    }
    else
    {
      InputValue = (__int128 *)AGGraphGetInputValue();
    }
    v11 = *(_QWORD *)InputValue;
    v12 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v12 != -1)
      swift_once();
    if (!lockAssertionsAreEnabled)
      goto LABEL_23;
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (_MovableLockIsOwner(static Update._lock))
    {
LABEL_23:
      (*(void (**)(void))(*(_QWORD *)v11 + 112))();
      return swift_release();
    }
    goto LABEL_40;
  }
  if (v7 == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v10 = &static LayoutComputer.defaultValue;
  }
  else
  {
    v10 = (__int128 *)AGGraphGetInputValue();
  }
  v14 = *(_QWORD *)v10;
  v15 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v15 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_31;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_31:
    (*(void (**)(unint64_t **__return_ptr))(*(_QWORD *)v14 + 112))(&v24);
    swift_release();
    v23[0] = v4;
    v23[1] = v5;
    v23[2] = v6;
    _PaddingLayout.effectiveInsets(in:)((uint64_t)v23);
    if (one-time initialization token for introduced != -1)
      swift_once();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
        goto LABEL_35;
    }
    else if (static Semantics.forced < static _SemanticFeature_v3.introduced)
    {
LABEL_35:
      KeyPath = swift_getKeyPath();
      v25 = v6;
      v26 = KeyPath;
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v6);
      type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>);
      swift_retain();
      dispatch thunk of Hashable.hash(into:)();
      Hasher._finalize()();
      lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
      lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
      LOBYTE(v23[0]) = 0;
      v17 = *(_BYTE *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
      swift_release_n();
      LOBYTE(v25) = v17;
      result = AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v25, v23);
      v18 = (unint64_t *)LOBYTE(v23[0]);
      if (LOBYTE(v23[0]))
      {
        v19 = swift_bridgeObjectRetain();
        v20 = specialized _NativeDictionary.filter(_:)(v19, v18);
        result = swift_bridgeObjectRelease_n();
        v24 = v20;
      }
      goto LABEL_39;
    }
    v21 = swift_getKeyPath();
    v25 = v6;
    v26 = v21;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
    LOBYTE(v23[0]) = 0;
    v22 = *(_BYTE *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
    LOBYTE(v23[0]) = v22;
    AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)v23, &v25);
    result = (uint64_t)Spacing.reset(_:)(&v25);
LABEL_39:
    *a3 = v24;
    return result;
  }
LABEL_40:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _PaddingLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  return _PaddingLayout.spacing(in:child:)(a1, a2, a3);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _PaddingLayout@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  return _PaddingLayout.placement(of:in:)(a1, a2);
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _PaddingLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _PaddingLayout.sizeThatFits(in:context:child:)(a1, a2, a3);
}

uint64_t View.padding(_:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  char v7[8];
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;

  v7[0] = 15;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a6;
  v12 = 0;
  return View.modifier<A>(_:)(v7, a1, &type metadata for _PaddingLayout, a2);
}

uint64_t View.padding(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v7[0] = a1;
  if ((a3 & 1) != 0)
    v5 = 0;
  else
    v5 = a2;
  v8 = v5;
  v9 = v5;
  v10 = v5;
  v11 = v5;
  v12 = a3 & 1;
  return View.modifier<A>(_:)(v7, a4, &type metadata for _PaddingLayout, a5);
}

uint64_t View.padding(_:)(uint64_t a1, uint64_t a2, double a3)
{
  char v4[8];
  double v5;
  double v6;
  double v7;
  double v8;
  char v9;

  v4[0] = 15;
  v5 = a3;
  v6 = a3;
  v7 = a3;
  v8 = a3;
  v9 = 0;
  return View.modifier<A>(_:)(v4, a1, &type metadata for _PaddingLayout, a2);
}

uint64_t View._tightPadding()(uint64_t a1, uint64_t a2)
{
  char v8[8];
  __int128 v9;
  __int128 v10;
  char v11;

  v8[0] = 15;
  __asm { FMOV            V0.2D, #8.0 }
  v9 = _Q0;
  v10 = _Q0;
  v11 = 0;
  return View.modifier<A>(_:)(v8, a1, &type metadata for _PaddingLayout, a2);
}

uint64_t (*specialized closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

uint64_t lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)()
{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, a2);
    MEMORY[0x23B7C9D54](v9, -1, -1);
  }
  return a2;
}

unint64_t instantiation function for generic protocol witness table for _PaddingLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _PaddingLayout()
{
  return &type metadata for _PaddingLayout;
}

uint64_t sub_234C123F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _PaddingLayout, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _PaddingLayout;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned int v17;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_19:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 48) + 16 * v13 + 8);
    if (v17 - 9 >= 0xEF && (v17 & 0x80) == 0 && v17 <= 7 && ((1 << v17) & ~a4) != 0)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
        goto LABEL_31;
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for KeyPath();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t UpdateCycleDetector.init()@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  uint64_t Context;
  uint64_t v6;
  int v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v6 = Context;
    swift_retain();

    swift_beginAccess();
    v7 = *(_DWORD *)(v6 + 64);
    result = swift_release();
    *(_DWORD *)a1 = v7;
    *(_QWORD *)(a1 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall UpdateCycleDetector.reset()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 4) = 0xFFFFFFFFLL;
  *(_BYTE *)(v0 + 12) = 0;
}

uint64_t specialized UpdateCycleDetector.dispatch(label:isDebug:)(char a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t result;
  Swift::String v8;

  AGGraphClearUpdate();
  v4 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(a2 + 4) != v4)
  {
    *(_DWORD *)(a2 + 4) = v4;
    *(_DWORD *)(a2 + 8) = 2;
    return 1;
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = v5 - 1;
    *(_DWORD *)(a2 + 8) = v6;
    if (v6)
      return 1;
  }
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
    return 0;
  if ((a1 & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x80000002352E12C0;
    v8._countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v8);
    specialized static Log.externalWarning(_:)(0x6F546C6C6F726353, 0xE800000000000000);
    swift_bridgeObjectRelease();
  }
  result = 0;
  *(_BYTE *)(a2 + 12) = 1;
  return result;
}

uint64_t UpdateCycleDetector.dispatch(label:isDebug:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;

  v4 = v3;
  AGGraphClearUpdate();
  v7 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(v4 + 4) == v7)
  {
    v8 = *(_DWORD *)(v4 + 8);
    if (v8 && (v9 = v8 - 1, (*(_DWORD *)(v4 + 8) = v9) != 0))
    {
      return 1;
    }
    else if ((*(_BYTE *)(v4 + 12) & 1) != 0)
    {
      return 0;
    }
    else
    {
      if ((a3 & 1) == 0)
      {
        _StringGuts.grow(_:)(44);
        v13 = a1(v11, v12);
        v15 = v14;
        swift_bridgeObjectRelease();
        v16._object = (void *)0x80000002352E12C0;
        v16._countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v16);
        specialized static Log.externalWarning(_:)(v13, v15);
        swift_bridgeObjectRelease();
      }
      result = 0;
      *(_BYTE *)(v4 + 12) = 1;
    }
  }
  else
  {
    *(_DWORD *)(v4 + 4) = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return 1;
  }
  return result;
}

uint64_t ValueCycleDetector.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  void *v7;
  id v8;
  uint64_t Context;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v6 = (id)AGSubgraphGetCurrent();
    if (!v6)
      goto LABEL_8;
    v7 = v6;
    v8 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v8 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v10 = Context;
    swift_retain();

    swift_beginAccess();
    v11 = *(_DWORD *)(v10 + 64);
    swift_release();
    *(_DWORD *)a3 = v11;
    *(_DWORD *)(a3 + 4) = -1;
    *(_BYTE *)(a3 + 8) = 0;
    v13 = type metadata accessor for ValueCycleDetector(0, a1, a2, v12);
    return Stack3.init()(a1, a3 + *(int *)(v13 + 44));
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall ValueCycleDetector.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v2 + 4) = -1;
  v3 = v2 + *(int *)(v0 + 44);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = type metadata accessor for Stack3(0, v4, *(_QWORD *)(v0 + 24), v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  Stack3.init()(v4, v3);
  *(_BYTE *)(v2 + 8) = 0;
}

BOOL ValueCycleDetector.dispatch(value:label:isDebug:)(void (*a1)(char *, uint64_t), uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;

  v6 = v5;
  AGGraphClearUpdate();
  v11 = *(_QWORD *)(a5 + 16);
  v12 = *(_QWORD *)(a5 + 24);
  v13 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(v6 + 4) != v13)
  {
    *(_DWORD *)(v6 + 4) = v13;
    v15 = v6 + *(int *)(a5 + 44);
    v16 = type metadata accessor for Stack3(0, v11, v12, v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    Stack3.init()(v11, v15);
  }
  v17 = type metadata accessor for Stack3(0, v11, v12, v14);
  v18 = Stack3.contains(_:)(a1, v17);
  if ((v18 & 1) != 0)
  {
    if ((*(_BYTE *)(v6 + 8) & 1) == 0)
    {
      if ((a4 & 1) == 0)
      {
        _StringGuts.grow(_:)(39);
        v21 = a2(v19, v20);
        v23 = v22;
        swift_bridgeObjectRelease();
        v24._object = (void *)0x80000002352E12F0;
        v24._countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v24);
        specialized static Log.externalWarning(_:)(v21, v23);
        swift_bridgeObjectRelease();
      }
      *(_BYTE *)(v6 + 8) = 1;
    }
  }
  else
  {
    Stack3.push(_:)((uint64_t)a1, v17);
  }
  return (v18 & 1) == 0;
}

uint64_t type metadata accessor for ValueCycleDetector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueCycleDetector);
}

_QWORD *__swift_memcpy13_4(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for UpdateCycleDetector(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateCycleDetector(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateCycleDetector()
{
  return &type metadata for UpdateCycleDetector;
}

uint64_t type metadata completion function for ValueCycleDetector()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[8];

  v2[4] = MEMORY[0x24BEE0170] + 64;
  v2[5] = MEMORY[0x24BEE0170] + 64;
  v2[6] = &unk_23528CB78;
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[7] = v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueCycleDetector(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  unsigned int (*v19)(unint64_t, uint64_t, uint64_t);
  void *v20;
  const void *v21;
  void *v22;
  const void *v23;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + v6;
  v10 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v10 != 0 || ((v7 + 9) & ~v7) + v8 + ((v8 + v7 + ((v8 + v7) & ~v7)) & ~v7) > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    v14 = ~v7;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v15 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v16 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
    v17 = (void *)((v15 + v7 + 5) & ~v7);
    v18 = (const void *)((v16 + v7 + 5) & ~v7);
    v19 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v19((v16 + v7 + 5) & ~v7, 1, v4))
    {
      memcpy(v17, v18, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v17, v18, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
    }
    v20 = (void *)(((unint64_t)v17 + v9) & v14);
    v21 = (const void *)(((unint64_t)v18 + v9) & v14);
    if (v19((unint64_t)v21, 1, v4))
    {
      memcpy(v20, v21, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v20, v21, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v4);
    }
    v22 = (void *)(((unint64_t)v20 + v9) & v14);
    v23 = (const void *)(((unint64_t)v21 + v9) & v14);
    if (v19((unint64_t)v23, 1, v4))
    {
      memcpy(v22, v23, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v22, v23, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for ValueCycleDetector(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(unint64_t, uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v4 + 5;
  v6 = ~v4;
  v7 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v7(v5 & ~v4, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v5 & ~v4, v2);
  if (*(_DWORD *)(v3 + 84))
    v8 = *(_QWORD *)(v3 + 64);
  else
    v8 = *(_QWORD *)(v3 + 64) + 1;
  v9 = ((v5 | v4) + v8) & v6;
  if (!v7(v9, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v9, v2);
  v10 = (v8 + v4 + v9) & v6;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v10, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v10, v2);
  return result;
}

_DWORD *initializeWithCopy for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  unsigned int (*v20)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v3 = *(_DWORD *)v4;
  *(_BYTE *)(v3 + 4) = *(_BYTE *)(v4 + 4);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 + 5 + v3;
  v9 = ~v7;
  v10 = v7 + 5 + v4;
  v20 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v20(v10 & ~v7, 1, v5))
  {
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
    if (v11)
      v13 = *(_QWORD *)(v6 + 64);
    else
      v13 = v12 + 1;
    memcpy((void *)(v8 & ~v7), (const void *)(v10 & ~v7), v13);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v8 & ~v7, v10 & ~v7, v5);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = (void *)(((v8 | v7) + v14) & v9);
  v16 = (const void *)(((v10 | v7) + v14) & v9);
  if (v20((unint64_t)v16, 1, v5))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v14 + v7) & v9);
  v18 = (const void *)(((unint64_t)v16 + v14 + v7) & v9);
  if (v20((unint64_t)v18, 1, v5))
  {
    memcpy(v17, v18, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

_DWORD *assignWithCopy for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(unint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  size_t v15;
  void *v16;
  const void *v17;
  int v18;
  int v19;
  void *v20;
  const void *v21;
  int v22;
  int v23;

  *a1 = *a2;
  v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v3 = *(_DWORD *)v4;
  *(_BYTE *)(v3 + 4) = *(_BYTE *)(v4 + 4);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 + 5 + v3;
  v9 = ~v7;
  v10 = v7 + 5 + v4;
  v11 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v12 = v11(v8 & ~v7, 1, v5);
  v13 = v11(v10 & ~v7, 1, v5);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v8 & ~v7, v10 & ~v7, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(v8 & ~v7, v10 & ~v7, v5);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v14 = *(_QWORD *)(v6 + 64);
  else
    v14 = *(_QWORD *)(v6 + 64) + 1;
  memcpy((void *)(v8 & ~v7), (const void *)(v10 & ~v7), v14);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v15 = *(_QWORD *)(v6 + 64);
  else
    v15 = *(_QWORD *)(v6 + 64) + 1;
  v16 = (void *)(((v8 | v7) + v15) & v9);
  v17 = (const void *)(((v10 | v7) + v15) & v9);
  v18 = v11((unint64_t)v16, 1, v5);
  v19 = v11((unint64_t)v17, 1, v5);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v16, v5);
LABEL_18:
    memcpy(v16, v17, v15);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v16, v17, v5);
LABEL_19:
  v20 = (void *)(((unint64_t)v16 + v15 + v7) & v9);
  v21 = (const void *)(((unint64_t)v17 + v15 + v7) & v9);
  v22 = v11((unint64_t)v20, 1, v5);
  v23 = v11((unint64_t)v21, 1, v5);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v20, v21, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v20, v5);
    goto LABEL_24;
  }
  if (v23)
  {
LABEL_24:
    memcpy(v20, v21, v15);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v20, v21, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  return a1;
}

_DWORD *initializeWithTake for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  unsigned int (*v20)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v3 = *(_DWORD *)v4;
  *(_BYTE *)(v3 + 4) = *(_BYTE *)(v4 + 4);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 + 5 + v3;
  v9 = ~v7;
  v10 = v7 + 5 + v4;
  v20 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v20(v10 & ~v7, 1, v5))
  {
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
    if (v11)
      v13 = *(_QWORD *)(v6 + 64);
    else
      v13 = v12 + 1;
    memcpy((void *)(v8 & ~v7), (const void *)(v10 & ~v7), v13);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v8 & ~v7, v10 & ~v7, v5);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = (void *)(((v8 | v7) + v14) & v9);
  v16 = (const void *)(((v10 | v7) + v14) & v9);
  if (v20((unint64_t)v16, 1, v5))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v14 + v7) & v9);
  v18 = (const void *)(((unint64_t)v16 + v14 + v7) & v9);
  if (v20((unint64_t)v18, 1, v5))
  {
    memcpy(v17, v18, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

_DWORD *assignWithTake for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(unint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  size_t v15;
  void *v16;
  const void *v17;
  int v18;
  int v19;
  void *v20;
  const void *v21;
  int v22;
  int v23;

  *a1 = *a2;
  v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v3 = *(_DWORD *)v4;
  *(_BYTE *)(v3 + 4) = *(_BYTE *)(v4 + 4);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 + 5 + v3;
  v9 = ~v7;
  v10 = v7 + 5 + v4;
  v11 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v12 = v11(v8 & ~v7, 1, v5);
  v13 = v11(v10 & ~v7, 1, v5);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v8 & ~v7, v10 & ~v7, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(v8 & ~v7, v10 & ~v7, v5);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v14 = *(_QWORD *)(v6 + 64);
  else
    v14 = *(_QWORD *)(v6 + 64) + 1;
  memcpy((void *)(v8 & ~v7), (const void *)(v10 & ~v7), v14);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v15 = *(_QWORD *)(v6 + 64);
  else
    v15 = *(_QWORD *)(v6 + 64) + 1;
  v16 = (void *)(((v8 | v7) + v15) & v9);
  v17 = (const void *)(((v10 | v7) + v15) & v9);
  v18 = v11((unint64_t)v16, 1, v5);
  v19 = v11((unint64_t)v17, 1, v5);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v16, v5);
LABEL_18:
    memcpy(v16, v17, v15);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 40))(v16, v17, v5);
LABEL_19:
  v20 = (void *)(((unint64_t)v16 + v15 + v7) & v9);
  v21 = (const void *)(((unint64_t)v17 + v15 + v7) & v9);
  v22 = v11((unint64_t)v20, 1, v5);
  v23 = v11((unint64_t)v21, 1, v5);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 40))(v20, v21, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v20, v5);
    goto LABEL_24;
  }
  if (v23)
  {
LABEL_24:
    memcpy(v20, v21, v15);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v20, v21, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueCycleDetector(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v19;
  int v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 > v7)
  {
    v11 = ((v9 + 9) & ~v9) + v8 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9);
    v12 = 8 * v11;
    if (v11 > 3)
      goto LABEL_13;
    v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 >= 2)
    {
LABEL_13:
      v13 = *(unsigned __int8 *)(a1 + v11);
      if (!*(_BYTE *)(a1 + v11))
        goto LABEL_27;
LABEL_20:
      v15 = (v13 - 1) << v12;
      if (v11 > 3)
        v15 = 0;
      if ((_DWORD)v11)
      {
        if (v11 > 3)
          LODWORD(v11) = 4;
        __asm { BR              X12 }
      }
      v20 = v7 + v15;
      return (v20 + 1);
    }
  }
LABEL_27:
  v16 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v6 <= 0xFE)
  {
    v17 = *(unsigned __int8 *)(v16 + 4);
    if (v17 < 2)
      return 0;
    v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v16 + v9 + 5) & ~v9);
  if (v19 >= 2)
    return v19 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ValueCycleDetector(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  v11 = *(unsigned __int8 *)(v7 + 80);
  v13 = ((v12 + v11 + ((v12 + v11) & ~v11)) & ~v11) + v12 + ((v11 + 9) & ~v11);
  v14 = a3 >= v10;
  v15 = a3 - v10;
  if (v15 != 0 && v14)
  {
    if (v13 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v17 = ~v10 + a2;
        if (v13 < 4)
        {
          if ((_DWORD)v13)
          {
            v18 = v17 & ~(-1 << (8 * v13));
            bzero(a1, v13);
            if ((_DWORD)v13 == 3)
            {
              *a1 = v18;
              *((_BYTE *)a1 + 2) = BYTE2(v18);
            }
            else if ((_DWORD)v13 == 2)
            {
              *a1 = v18;
            }
            else
            {
              *(_BYTE *)a1 = v18;
            }
          }
        }
        else
        {
          bzero(a1, v13);
          *(_DWORD *)a1 = v17;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v16 >= 0x100)
      v6 = 2;
    else
      v6 = v16 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_234C13E60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234C13E68()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234C13E88()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_234C13E98()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_234C13EA0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t static StyleContext.acceptsTop<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a4 + 8))(a1, 0, a3, a2);
}

BOOL static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static StyleContext.accepts<A>(_:at:)(a1, a4);
}

BOOL static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static StyleContext.accepts<A>(_:at:)(a1, a3);
}

uint64_t static StyleContext.acceptsAny<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v11;
  size_t v12;
  char *v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    memcpy((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11, v12);
  return static StyleContext.acceptsAny<A>(_:)((uint64_t)v13, a2, a5, a3, a6, a4) & 1;
}

{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t Visitor;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned __int8 v17;

  if (!a2)
    return 0;
  v8 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  v9 = (uint64_t *)(a6 & 0xFFFFFFFFFFFFFFFELL);
  Visitor = type metadata accessor for QueryVisitor(0, a3, a5, a4);
  v11 = a2 - 1;
  do
  {
    v13 = *v8++;
    v12 = v13;
    v14 = *v9++;
    v15 = v11;
    a1 += 8;
    v17 = 0;
    (*(void (**)(unsigned __int8 *, uint64_t, _UNKNOWN **, uint64_t))(v14 + 24))(&v17, Visitor, &protocol witness table for QueryVisitor<A>, v12);
    result = v17;
    if ((v17 & 1) != 0)
      break;
    v11 = v15 - 1;
  }
  while (v15);
  return result;
}

uint64_t static StyleContext.visitStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static StyleContext.visitStyle<A>(_:)(a1, a4, a2, a5, a3);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a2, a2, a4, a3);
}

uint64_t QueryVisitor.visit<A>(_:)(uint64_t result, uint64_t a2)
{
  BOOL *v2;

  *v2 = *v2 || *(_QWORD *)(a2 + 16) == result;
  return result;
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance QueryVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return QueryVisitor.visit<A>(_:)(a1, a4);
}

uint64_t View.styleContext<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = type metadata accessor for StyleContextWriter(0, a3, a5, a4);
  return View.modifier<A>(_:)(v7, a2, v7, a4);
}

uint64_t View._defaultContext()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for DefaultStyleContextWriter, a2);
}

uint64_t static StyleContextWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  return specialized static StyleContextWriter._makeInputs(modifier:inputs:)(a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance StyleContextWriter<A>(uint64_t a1, uint64_t *a2)
{
  return specialized static StyleContextWriter._makeInputs(modifier:inputs:)(a2);
}

uint64_t static DefaultStyleContextWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  __int128 v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v3 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, *((uint64_t *)&v3 + 1));
  return swift_release();
}

Swift::Void __swiftcall _GraphInputs.resetStyleContext()()
{
  uint64_t *v0;
  __int128 v1;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v1 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v1, *((uint64_t *)&v1 + 1));
  swift_release();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DefaultStyleContextWriter(uint64_t a1, uint64_t *a2)
{
  __int128 v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v3 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, *((uint64_t *)&v3 + 1));
  return swift_release();
}

void one-time initialization function for defaultValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for StyleContextTypeBox<NoStyleContext>(0, a2, a3, a4);
  *(_QWORD *)&static StyleContextInput.defaultValue = v4;
  *((_QWORD *)&static StyleContextInput.defaultValue + 1) = &protocol witness table for StyleContextTypeBox<A>;
}

double static StyleContextInput.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static StyleContextInput.defaultValue;
  *a1 = static StyleContextInput.defaultValue;
  return result;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance StyleContextInput@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static StyleContextInput.defaultValue;
  *a1 = static StyleContextInput.defaultValue;
  return result;
}

uint64_t static StyleContextAcceptsPredicate.evaluate(inputs:)(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized find<A>(_:key:)(v1) && one-time initialization token for defaultValue != -1)
    swift_once();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return AnyStyleContextType.acceptsTop<A>(_:)() & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance StyleContextAcceptsPredicate<A>(uint64_t *a1)
{
  return static StyleContextAcceptsPredicate.evaluate(inputs:)(a1);
}

uint64_t static StyleContextAcceptsAnyPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t MetatypeMetadata;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v28 = a3;
  v29 = a4;
  v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  v7 = 8 * a2;
  if (a2 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v9 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    if (a2)
    {
      v10 = v6;
      v11 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      v12 = a2;
      do
      {
        ++v10;
        *v11++ = swift_getMetatypeMetadata();
        --v12;
      }
      while (v12);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v9 = MetatypeMetadata;
  }
  MEMORY[0x24BDAC7A8](MetatypeMetadata);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = specialized find<A>(_:key:)(v15);
  if (v16)
  {
    v17 = (__int128 *)(v16 + 72);
    v18 = (uint64_t *)(v16 + 80);
  }
  else
  {
    v17 = &static StyleContextInput.defaultValue;
    v18 = (uint64_t *)&static StyleContextInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v19 = *v18;
  v20 = *(_QWORD *)v17;
  swift_bridgeObjectRelease();
  swift_release();
  v21 = swift_release_n();
  v30 = v20;
  v31 = v19;
  MEMORY[0x24BDAC7A8](v21);
  if (a2)
  {
    v22 = (int *)(v9 + 32);
    v23 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    v24 = a2;
    do
    {
      if (a2 == 1)
        v25 = 0;
      else
        v25 = *v22;
      v26 = *v6++;
      *(_QWORD *)&v14[v25] = v26;
      *v23++ = &v14[v25];
      v22 += 4;
      --v24;
    }
    while (v24);
  }
  return AnyStyleContextType.acceptsAny<each A>(_:)((_QWORD **)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0)), a2, v28, v29) & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance StyleContextAcceptsAnyPredicate<Pack{repeat A}>(uint64_t *a1, uint64_t *a2)
{
  return static StyleContextAcceptsAnyPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4]);
}

uint64_t _GraphInputs.isDefaultStyleContext.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
    v4 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = (uint64_t *)&static StyleContextInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v3 = &static StyleContextInput.defaultValue;
  }
  v5 = *v4;
  v6 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v5 + 8))(static StyleContextInput.defaultValue, *((_QWORD *)&static StyleContextInput.defaultValue + 1), v6, v5) & 1;
}

uint64_t _GraphInputs.accepts<each A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 40);
  v21 = *(_QWORD *)v2;
  v22 = v3;
  v23 = v4;
  v24 = *(_OWORD *)(v2 + 24);
  v25 = v5;
  if (a2 != 1)
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      if (v6 < 4)
        goto LABEL_8;
      if ((unint64_t)&v9[-v7] < 0x20)
        goto LABEL_8;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = (__int128 *)(v7 + 16);
      v12 = v9 + 16;
      v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v10 != v6)
      {
LABEL_8:
        v15 = v6 - v10;
        v16 = 8 * v10;
        v17 = &v9[8 * v10];
        v18 = (uint64_t *)(v7 + v16);
        do
        {
          v19 = *v18++;
          *(_QWORD *)v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    swift_getTupleTypeMetadata();
  }
  return static StyleContextAcceptsPredicate.evaluate(inputs:)(&v21) & 1;
}

uint64_t _GraphInputs.pushStyleContext<A>(_:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];

  v1 = v0;
  v2 = swift_retain();
  if (!specialized find<A>(_:key:)(v2) && one-time initialization token for defaultValue != -1)
    swift_once();
  swift_release();
  AnyStyleContextType.pushing<A>(_:)(v6);
  v3 = v6[0];
  v4 = v6[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3, v4);
  return swift_release();
}

Swift::Void __swiftcall _GraphInputs.printStyleContext()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t *v5;
  uint64_t v6;

  v1 = *v0;
  type metadata accessor for _ContiguousArrayStorage<Any>();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_23527E860;
  *(_QWORD *)(v2 + 56) = &type metadata for AnyStyleContextType;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v3 = specialized find<A>(_:key:)(v1);
  if (v3)
  {
    v4 = (__int128 *)(v3 + 72);
    v5 = (uint64_t *)(v3 + 80);
  }
  else
  {
    v4 = &static StyleContextInput.defaultValue;
    v5 = (uint64_t *)&static StyleContextInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v6 = *v5;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)v4;
  *(_QWORD *)(v2 + 40) = v6;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _ViewListCountInputs.resetStyleContext()()
{
  uint64_t *v0;
  __int128 v1;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v1 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v1, *((uint64_t *)&v1 + 1));
  swift_release();
}

uint64_t static TupleStyleContext.acceptsAny<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  specialized static TupleDescriptor.tupleDescription(_:)(a3, v10);
  if (*(_QWORD *)(v10[0] + 16))
  {
    v10[0] = a2;
    v10[1] = a3;
    v10[2] = a4;
    v10[3] = a5;
    type metadata accessor for TupleStyleContext.QueryVisitor();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static TupleDescriptor.tupleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  void *v10;
  uint64_t v11[3];

  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  v4 = static ViewDescriptor.typeCache;
  if (*((_QWORD *)static ViewDescriptor.typeCache + 2)
    && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    *a2 = *(_QWORD *)(v4[7] + 8 * v5);
    return swift_bridgeObjectRetain();
  }
  else
  {
    specialized TupleTypeDescription.init(_:)(a1, (uint64_t)v11);
    v8 = v11[0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = static ViewDescriptor.typeCache;
    static ViewDescriptor.typeCache = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a1, isUniquelyReferenced_nonNull_native);
    static ViewDescriptor.typeCache = v10;
    swift_bridgeObjectRelease();
    result = swift_endAccess();
    *a2 = v8;
  }
  return result;
}

{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  void *v10;
  uint64_t v11[3];

  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  v4 = static StyleContextDescriptor.typeCache;
  if (*((_QWORD *)static StyleContextDescriptor.typeCache + 2)
    && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    *a2 = *(_QWORD *)(v4[7] + 8 * v5);
    return swift_bridgeObjectRetain();
  }
  else
  {
    specialized TupleTypeDescription.init(_:)(a1, (uint64_t)v11);
    v8 = v11[0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = static StyleContextDescriptor.typeCache;
    static StyleContextDescriptor.typeCache = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a1, isUniquelyReferenced_nonNull_native);
    static StyleContextDescriptor.typeCache = v10;
    swift_bridgeObjectRelease();
    result = swift_endAccess();
    *a2 = v8;
  }
  return result;
}

uint64_t TypeConformance<>.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

{
  _QWORD *v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

uint64_t static TupleStyleContext.visitStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v10;

  specialized static TupleDescriptor.tupleDescription(_:)(a2, &v10);
  v6 = *(_QWORD *)(v10 + 16);
  if (v6)
  {
    v7 = *(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a4 + 8);
    v8 = (_QWORD *)(v10 + 48);
    do
    {
      v7(*(v8 - 1), *(v8 - 1), *v8, a3, a4);
      v8 += 3;
      --v6;
    }
    while (v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t TupleStyleContext.QueryVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v7;
  uint64_t MetatypeMetadata;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t *v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_QWORD *)(a2 + 16);
  if (v7 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    if (v7)
    {
      v10 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      v11 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
      v12 = v7;
      do
      {
        v10 += 8;
        *v11++ = swift_getMetatypeMetadata();
        --v12;
      }
      while (v12);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x24BDAC7A8](MetatypeMetadata);
  if ((*v4 & 1) != 0)
  {
    result = 1;
  }
  else
  {
    v18.n128_f64[0] = MEMORY[0x24BDAC7A8](v13);
    if (v7)
    {
      v19 = (uint64_t *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      v20 = (int *)(v15 + 32);
      v21 = (uint64_t *)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      v22 = v7;
      do
      {
        if (v7 == 1)
          v23 = 0;
        else
          v23 = *v20;
        v24 = *v19++;
        *(_QWORD *)(v17 + v23) = v24;
        *v21++ = v17 + v23;
        v20 += 4;
        --v22;
      }
      while (v22);
    }
    result = (*(uint64_t (**)(__n128))(a4 + 16))(v18);
  }
  *v4 = result & 1;
  return result;
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance TupleStyleContext<A>.QueryVisitor<Pack{repeat A1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleStyleContext.QueryVisitor.visit<A>(_:)(a1, a4, a2, a3);
}

uint64_t static TupleStyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20[2];
  unsigned __int8 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  specialized static TupleDescriptor.tupleDescription(_:)(a3, v20);
  v7 = v20[0];
  specialized static TupleDescriptor.tupleDescription(_:)(a4, v20);
  v8 = v20[0];
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v20[0] + 16);
  if (v9 >= v10)
  {
    v20[0] = a2;
    v20[1] = v8;
    v21 = 1;
    if (v9)
    {
      swift_bridgeObjectRetain();
      v13 = (uint64_t *)(v7 + 48);
      do
      {
        v14 = *(v13 - 2);
        if (v14 >= a2 && v14 < v10)
        {
          v17 = *(v13 - 1);
          v16 = *v13;
          v18 = type metadata accessor for TupleStyleContext.QueryAtIndexVisitor(0, a3, a4, v12);
          TupleStyleContext.QueryAtIndexVisitor.visit<A>(_:)(v17, v18, v17, v16);
        }
        v13 += 3;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v21;
    }
    else
    {
      swift_bridgeObjectRelease();
      v11 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v11;
}

uint64_t TupleStyleContext.QueryAtIndexVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *v4;
  if ((*v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v4[1];
  if (v6 >= *(_QWORD *)(v7 + 16))
    goto LABEL_5;
  v8 = *(_QWORD *)(v7 + 24 * v6 + 40);
  v9 = type metadata accessor for TupleStyleContext.ContextAcceptsVisitor(0, v5, a3, a4);
  result = TupleStyleContext.ContextAcceptsVisitor.visit<A>(_:)(v8, v9);
  *((_BYTE *)v4 + 16) = 0;
  ++*v4;
  return result;
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance TupleStyleContext<A>.QueryAtIndexVisitor<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleStyleContext.QueryAtIndexVisitor.visit<A>(_:)(a1, a4, a2, a3);
}

uint64_t TupleStyleContext.ContextAcceptsVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 32) + 8))(a1, 0);
  *v2 = result & 1;
  return result;
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance TupleStyleContext<A>.ContextAcceptsVisitor<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleStyleContext.ContextAcceptsVisitor.visit<A>(_:)(a1, a4);
}

uint64_t protocol witness for static StyleContext.accepts<A>(_:at:) in conformance TupleStyleContext<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TupleStyleContext.accepts<A>(_:at:)(a1, a2, *(_QWORD *)(a4 + 16), a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance TupleStyleContext<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static TupleStyleContext.acceptsAny<A>(_:)(a1, a2, *(_QWORD *)(a5 + 16), a3, a4);
}

uint64_t protocol witness for static StyleContext.visitStyle<A>(_:) in conformance TupleStyleContext<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TupleStyleContext.visitStyle<A>(_:)(a1, *(_QWORD *)(a4 + 16), a2, a3);
}

void one-time initialization function for typeCache()
{
  static StyleContextDescriptor.typeCache = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

{
  static ViewDescriptor.typeCache = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

{
  static GestureDescriptor.typeCache = MEMORY[0x24BEE4B00];
}

{
  static GestureModifierDescriptor.typeCache = MEMORY[0x24BEE4B00];
}

uint64_t static StyleContextDescriptor.typeCache.getter()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static StyleContextDescriptor.typeCache.setter(void *a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static StyleContextDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static StyleContextDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance StyleContextDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance StyleContextDescriptor(void *a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static StyleContextDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance StyleContextDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t specialized TupleTypeDescription.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = AGTupleCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    v35[0] = a2;
    if (result)
    {
      v11 = 0;
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v38 = 0x80000002352E1320;
      *(_QWORD *)&v9 = 136446210;
      v36 = v9;
      v35[1] = MEMORY[0x24BEE4AD8] + 8;
      v40 = result;
      v37 = v5;
      do
      {
        v13 = AGTupleElementType();
        _viewProtocolDescriptor();
        v14 = swift_conformsToProtocol();
        if (v14)
        {
          v15 = v14;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
            v12 = (_QWORD *)result;
          }
          v17 = v12[2];
          v16 = v12[3];
          if (v17 >= v16 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
            v12 = (_QWORD *)result;
          }
          v12[2] = v17 + 1;
          v18 = &v12[3 * v17];
          v18[4] = v11;
          v18[5] = v13;
          v18[6] = v15;
          v10 = v40;
        }
        else
        {
          v42 = 0;
          v43 = 0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v41 = v11;
          v42 = 0x65646E6920746120;
          v43 = 0xEA00000000002078;
          v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v19);
          swift_bridgeObjectRelease();
          v20._countAndFlagsBits = 0x2065707974202CLL;
          v20._object = (void *)0xE700000000000000;
          String.append(_:)(v20);
          v21._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v21);
          swift_bridgeObjectRelease();
          v22._countAndFlagsBits = v42;
          v23 = (void *)v43;
          v42 = 0xD000000000000015;
          v43 = v38;
          v22._object = v23;
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          v24 = v43;
          v39 = v42;
          if (one-time initialization token for unlocatedIssuesLog != -1)
            swift_once();
          v25 = __swift_project_value_buffer(v4, (uint64_t)static Log.unlocatedIssuesLog);
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v25, v4);
          swift_bridgeObjectRetain_n();
          v26 = Logger.logObject.getter();
          v27 = v7;
          v28 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v26, v28))
          {
            v29 = swift_slowAlloc();
            v30 = v4;
            v31 = a1;
            v32 = swift_slowAlloc();
            v42 = v32;
            *(_DWORD *)v29 = v36;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v24, &v42);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_2349C4000, v26, v28, "%{public}s", (uint8_t *)v29, 0xCu);
            swift_arrayDestroy();
            v33 = v32;
            a1 = v31;
            v4 = v30;
            v5 = v37;
            MEMORY[0x23B7C9D54](v33, -1, -1);
            v34 = v29;
            v10 = v40;
            MEMORY[0x23B7C9D54](v34, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
          result = swift_bridgeObjectRelease();
          v7 = v27;
        }
        ++v11;
      }
      while (v10 != v11);
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)v35[0] = v12;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = AGTupleCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    v35[0] = a2;
    if (result)
    {
      v11 = 0;
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v38 = 0x80000002352E1320;
      *(_QWORD *)&v9 = 136446210;
      v36 = v9;
      v35[1] = MEMORY[0x24BEE4AD8] + 8;
      v40 = result;
      v37 = v5;
      do
      {
        v13 = AGTupleElementType();
        _styleContextProtocolDescriptor();
        v14 = swift_conformsToProtocol();
        if (v14)
        {
          v15 = v14;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
            v12 = (_QWORD *)result;
          }
          v17 = v12[2];
          v16 = v12[3];
          if (v17 >= v16 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
            v12 = (_QWORD *)result;
          }
          v12[2] = v17 + 1;
          v18 = &v12[3 * v17];
          v18[4] = v11;
          v18[5] = v13;
          v18[6] = v15;
          v10 = v40;
        }
        else
        {
          v42 = 0;
          v43 = 0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v41 = v11;
          v42 = 0x65646E6920746120;
          v43 = 0xEA00000000002078;
          v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v19);
          swift_bridgeObjectRelease();
          v20._countAndFlagsBits = 0x2065707974202CLL;
          v20._object = (void *)0xE700000000000000;
          String.append(_:)(v20);
          v21._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v21);
          swift_bridgeObjectRelease();
          v22._countAndFlagsBits = v42;
          v23 = (void *)v43;
          v42 = 0xD000000000000015;
          v43 = v38;
          v22._object = v23;
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          v24 = v43;
          v39 = v42;
          if (one-time initialization token for unlocatedIssuesLog != -1)
            swift_once();
          v25 = __swift_project_value_buffer(v4, (uint64_t)static Log.unlocatedIssuesLog);
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v25, v4);
          swift_bridgeObjectRetain_n();
          v26 = Logger.logObject.getter();
          v27 = v7;
          v28 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v26, v28))
          {
            v29 = swift_slowAlloc();
            v30 = v4;
            v31 = a1;
            v32 = swift_slowAlloc();
            v42 = v32;
            *(_DWORD *)v29 = v36;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v24, &v42);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_2349C4000, v26, v28, "%{public}s", (uint8_t *)v29, 0xCu);
            swift_arrayDestroy();
            v33 = v32;
            a1 = v31;
            v4 = v30;
            v5 = v37;
            MEMORY[0x23B7C9D54](v33, -1, -1);
            v34 = v29;
            v10 = v40;
            MEMORY[0x23B7C9D54](v34, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
          result = swift_bridgeObjectRelease();
          v7 = v27;
        }
        ++v11;
      }
      while (v10 != v11);
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)v35[0] = v12;
  }
  return result;
}

uint64_t specialized static StyleContextWriter._makeInputs(modifier:inputs:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];

  v2 = swift_retain();
  if (!specialized find<A>(_:key:)(v2) && one-time initialization token for defaultValue != -1)
    swift_once();
  swift_release();
  AnyStyleContextType.pushing<A>(_:)(v6);
  v3 = v6[0];
  v4 = v6[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a1, v3, v4);
  return swift_release();
}

BOOL specialized static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

uint64_t type metadata accessor for QueryVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryVisitor);
}

uint64_t type metadata accessor for StyleContextWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleContextWriter);
}

void type metadata accessor for _ContiguousArrayStorage<Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Any>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>);
  }
}

void type metadata accessor for TupleStyleContext.QueryVisitor()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for TupleStyleContext.QueryAtIndexVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleStyleContext.QueryAtIndexVisitor);
}

uint64_t dispatch thunk of static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static StyleContext.acceptsAny<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of static StyleContext.visitStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

ValueMetadata *type metadata accessor for WindowRootContext()
{
  return &type metadata for WindowRootContext;
}

ValueMetadata *type metadata accessor for AccessibilityRepresentableStyleContext()
{
  return &type metadata for AccessibilityRepresentableStyleContext;
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionStyleContext()
{
  return &type metadata for AccessibilityQuickActionStyleContext;
}

ValueMetadata *type metadata accessor for ContainerStyleContext()
{
  return &type metadata for ContainerStyleContext;
}

ValueMetadata *type metadata accessor for ContentListStyleContext()
{
  return &type metadata for ContentListStyleContext;
}

ValueMetadata *type metadata accessor for DocumentStyleContext()
{
  return &type metadata for DocumentStyleContext;
}

ValueMetadata *type metadata accessor for ControlGroupStyleContext()
{
  return &type metadata for ControlGroupStyleContext;
}

ValueMetadata *type metadata accessor for DialogActionStyleContext()
{
  return &type metadata for DialogActionStyleContext;
}

ValueMetadata *type metadata accessor for HostingConfigurationContext()
{
  return &type metadata for HostingConfigurationContext;
}

ValueMetadata *type metadata accessor for MenuStyleContext()
{
  return &type metadata for MenuStyleContext;
}

ValueMetadata *type metadata accessor for MultimodalListContext()
{
  return &type metadata for MultimodalListContext;
}

ValueMetadata *type metadata accessor for MultimodalListGridContext()
{
  return &type metadata for MultimodalListGridContext;
}

ValueMetadata *type metadata accessor for MultimodalListStackContext()
{
  return &type metadata for MultimodalListStackContext;
}

ValueMetadata *type metadata accessor for NoStyleContext()
{
  return &type metadata for NoStyleContext;
}

ValueMetadata *type metadata accessor for ScrollViewStyleContext()
{
  return &type metadata for ScrollViewStyleContext;
}

ValueMetadata *type metadata accessor for TextInputSuggestionsContext()
{
  return &type metadata for TextInputSuggestionsContext;
}

ValueMetadata *type metadata accessor for SectionHeaderStyleContext()
{
  return &type metadata for SectionHeaderStyleContext;
}

ValueMetadata *type metadata accessor for SheetStyleContext()
{
  return &type metadata for SheetStyleContext;
}

ValueMetadata *type metadata accessor for SheetToolbarStyleContext()
{
  return &type metadata for SheetToolbarStyleContext;
}

ValueMetadata *type metadata accessor for SidebarStyleContext()
{
  return &type metadata for SidebarStyleContext;
}

ValueMetadata *type metadata accessor for SwipeActionsStyleContext()
{
  return &type metadata for SwipeActionsStyleContext;
}

ValueMetadata *type metadata accessor for TableStyleContext()
{
  return &type metadata for TableStyleContext;
}

ValueMetadata *type metadata accessor for ToolbarStyleContext()
{
  return &type metadata for ToolbarStyleContext;
}

ValueMetadata *type metadata accessor for InspectorStyleContext()
{
  return &type metadata for InspectorStyleContext;
}

ValueMetadata *type metadata accessor for MenuBarExtraWindowStyleContext()
{
  return &type metadata for MenuBarExtraWindowStyleContext;
}

ValueMetadata *type metadata accessor for DefaultStyleContextWriter()
{
  return &type metadata for DefaultStyleContextWriter;
}

ValueMetadata *type metadata accessor for StyleContextInput()
{
  return &type metadata for StyleContextInput;
}

uint64_t type metadata accessor for StyleContextAcceptsPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleContextAcceptsPredicate);
}

uint64_t type metadata accessor for StyleContextAcceptsAnyPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleContextAcceptsAnyPredicate);
}

uint64_t type metadata accessor for TupleStyleContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleStyleContext);
}

uint64_t dispatch thunk of StyleContextVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for StyleContextDescriptor()
{
  return &type metadata for StyleContextDescriptor;
}

uint64_t sub_234C162F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for StyleContextWriter(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for StyleContextWriter<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t sub_234C16358(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for DefaultStyleContextWriter, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for DefaultStyleContextWriter;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t initializeBufferWithCopyOfBuffer for TupleStyleContext.QueryAtIndexVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleStyleContext.QueryAtIndexVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for TupleStyleContext.QueryAtIndexVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t type metadata accessor for TupleStyleContext.ContextAcceptsVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleStyleContext.ContextAcceptsVisitor);
}

void type metadata accessor for StyleContextTypeBox<NoStyleContext>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for StyleContextTypeBox<NoStyleContext>)
  {
    v4 = type metadata accessor for StyleContextTypeBox(0, (uint64_t)&type metadata for NoStyleContext, (uint64_t)&protocol witness table for NoStyleContext, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for StyleContextTypeBox<NoStyleContext>);
  }
}

uint64_t storeEnumTagSinglePayload for TupleStyleContext.QueryVisitor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234C16530 + 4 * byte_23528CBB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234C16564 + 4 * byte_23528CBB0[v4]))();
}

uint64_t sub_234C16564(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C1656C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C16574);
  return result;
}

uint64_t sub_234C16580(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C16588);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234C1658C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C16594(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t TupleView.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TupleView.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TupleView.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TupleView.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static TupleView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Unary;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  __int128 v32;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v31 = *(_QWORD *)(a2 + 48);
  v26 = *(_DWORD *)(a2 + 36);
  v27 = *(_QWORD *)(a2 + 56);
  v28 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 72);
  v30 = *(_DWORD *)(a2 + 80);
  specialized static TupleDescriptor.tupleDescription(_:)(a3, &v35);
  v13 = v35;
  v14 = *(_QWORD *)(v35 + 16);
  if (v14 == 1)
  {
    LODWORD(v35) = v5;
    v36 = v6;
    LODWORD(v37) = v7;
    v38 = v8;
    v39 = v9;
    v40 = v10;
    v41 = __PAIR64__(v26, v11);
    v42 = v12;
    v43 = v31;
    v44 = v27;
    v45 = v28;
    v46 = v29;
    v47 = v30;
    v48 = 0;
    v49 = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = *(_OWORD *)(v13 + 40);
    swift_bridgeObjectRelease();
    v34 = v32;
    Unary = type metadata accessor for TupleView.MakeUnary(0, a3, v17, v18);
    result = TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v35, Unary, (uint64_t)&protocol witness table for TupleView<A>.MakeUnary);
    v20 = v48;
    if (v48)
    {
      v21 = v49;
      v22 = HIDWORD(v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      *(_QWORD *)a4 = v20;
      *(_DWORD *)(a4 + 8) = v21;
      *(_DWORD *)(a4 + 12) = v22;
    }
    else
    {
      __break(1u);
    }
  }
  else if (v14)
  {
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for TupleView(0, a3, v23, v24);
    LODWORD(v34) = v5;
    v35 = v6;
    LODWORD(v36) = v7;
    v37 = v8;
    v38 = __PAIR64__(v10, v9);
    v39 = v11;
    v40 = v26;
    v41 = v12;
    v42 = v31;
    v43 = v27;
    v44 = v28;
    v45 = v29;
    LODWORD(v46) = v30;
    return static View.makeImplicitRoot(view:inputs:)((int *)&v34, &v35, v25, (uint64_t)&protocol witness table for TupleView<A>, a4);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a4 = MEMORY[0x24BEE4AF8];
    v16 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = v16;
  }
  return result;
}

uint64_t type metadata accessor for TupleView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleView);
}

uint64_t type metadata accessor for TupleView.MakeUnary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleView.MakeUnary);
}

uint64_t static TupleView._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t List;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  char v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  char v49;
  unsigned int v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v48 = *a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 32);
  v52 = *(_QWORD *)(a2 + 24);
  v51 = *(_DWORD *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 48);
  v46 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_BYTE *)(a2 + 80);
  specialized static TupleDescriptor.tupleDescription(_:)(a3, &v67);
  v14 = v9;
  v15 = v67;
  v16 = (v10 & 0x200) != 0;
  LODWORD(v67) = v48;
  v68 = v5;
  v17 = v46;
  v44 = v6;
  v69 = v6;
  v18 = v7;
  v70 = v7;
  v71 = v52;
  v72 = v8;
  v73 = v51;
  v19 = v10;
  v74 = v46;
  v75 = v9;
  v76 = v10;
  v20 = v11;
  v77 = v11;
  v78 = v12;
  v21 = v13;
  v79 = v13;
  v80 = 0uLL;
  v81 = v16;
  v82 = MEMORY[0x24BEE4AF8];
  if ((v19 & 0x200) != 0)
  {
    v19 &= ~0x200uLL;
    v76 = v19;
  }
  v22 = v15;
  v23 = *(_QWORD *)(v15 + 16);
  if (v23)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = (_OWORD *)(v22 + 40);
    do
    {
      v25 = *((_QWORD *)v24 - 1);
      v26 = *v24;
      v24 = (_OWORD *)((char *)v24 + 24);
      *(_QWORD *)&v80 = v25;
      *((_QWORD *)&v80 + 1) = AGTupleElementOffset();
      v53 = v26;
      List = type metadata accessor for TupleView.MakeList(0, a3, v27, v28);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v67, List, (uint64_t)&protocol witness table for TupleView<A>.MakeList);
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    v30 = v82;
    v31 = v68;
    v32 = v69;
    v33 = v70;
    v52 = v71;
    v34 = v72;
    v51 = v73;
    v17 = v74;
    v35 = v75;
    v36 = v76;
    v37 = v77;
    v12 = v78;
    v38 = v79;
  }
  else
  {
    v39 = v14;
    v36 = v19;
    swift_bridgeObjectRetain();
    v33 = v18;
    v31 = swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35 = v39;
    v30 = MEMORY[0x24BEE4AF8];
    v32 = v44;
    v34 = v8;
    v37 = v20;
    v38 = v21;
  }
  v43 = v35;
  v45 = v36;
  v47 = v37;
  v49 = v38;
  *(_QWORD *)&v53 = v31;
  DWORD2(v53) = v32;
  v54 = v33;
  v55 = v52;
  v56 = __PAIR64__(v51, v34);
  v57 = v17;
  v58 = v35;
  v59 = v36;
  LODWORD(v60) = v37;
  v61 = v12;
  LOBYTE(v62) = v38;
  v40 = v34;
  v41 = v32;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.concat(_:inputs:)(v30, &v53, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v53) = v67;
  *((_QWORD *)&v53 + 1) = v31;
  LODWORD(v54) = v41;
  v55 = v33;
  v56 = v52;
  v57 = __PAIR64__(v51, v40);
  v58 = v17;
  v59 = v43;
  v60 = v45;
  LODWORD(v61) = v47;
  v62 = v12;
  v63 = v49;
  v64 = v80;
  v65 = v81;
  v66 = v30;
  return outlined release of TupleView<A>.MakeList((uint64_t)&v53);
}

uint64_t static TupleView._viewListCount(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  specialized static TupleDescriptor.tupleDescription(_:)(a2, v15);
  v9 = v15[0];
  if ((v4 & 0x200) != 0)
  {
    v13 = *(_QWORD *)(v15[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15[0] = v3;
    v15[1] = v4;
    v16 = v5;
    v17 = v6;
    v18 = 0;
    v19 = 0;
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = type metadata accessor for TupleView.CountViews(0, a2, v7, v8);
      swift_retain();
      swift_bridgeObjectRetain();
      v12 = 40;
      do
      {
        TypeConformance<>.visitType<A>(visitor:)((uint64_t)v15, v11, (uint64_t)&protocol witness table for TupleView<A>.CountViews);
        v12 += 24;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v13 = v18;
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13 = 0;
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v13;
}

uint64_t TupleView.MakeUnary.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int ShouldRecordTree;
  void (*v17)(_QWORD *__return_ptr, int *, uint64_t *);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v31;
  int v32;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  v5 = v4;
  v67 = *MEMORY[0x24BDAC8D0];
  LODWORD(v51) = *(_DWORD *)v4;
  v6 = type metadata accessor for TupleView(255, *(_QWORD *)(a2 + 16), a3, a4);
  type metadata accessor for _GraphValue(0, v6, v7, v8);
  _GraphValue.unsafeBitCast<A>(to:)(&v34);
  v31 = v34;
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v5 + 24);
  v25 = *(_DWORD *)(v5 + 36);
  v26 = *(_DWORD *)(v5 + 32);
  v29 = *(_DWORD *)(v5 + 40);
  v27 = *(_DWORD *)(v5 + 44);
  v28 = *(_DWORD *)(v5 + 16);
  v11 = *(_QWORD *)(v5 + 48);
  v12 = *(_QWORD *)(v5 + 56);
  v13 = *(_DWORD *)(v5 + 68);
  v23 = *(_DWORD *)(v5 + 72);
  v24 = *(_DWORD *)(v5 + 64);
  v14 = *(_DWORD *)(v5 + 80);
  v15 = *(_DWORD *)(v5 + 84);
  v21 = *(_DWORD *)(v5 + 88);
  v22 = *(_DWORD *)(v5 + 76);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v51 = v9;
  v53 = v10;
  v52 = v28;
  v54 = v26;
  v55 = v25;
  v57 = v27;
  v58 = v11;
  v59 = v12;
  v60 = v24;
  v61 = v13;
  v62 = v23;
  v63 = v22;
  v64 = v14;
  v65 = v15;
  v66 = v21;
  v32 = v31;
  v35 = v9;
  v36 = v28;
  v37 = v10;
  v38 = v26;
  v39 = v25;
  v40 = 0;
  v41 = v27;
  v42 = v11;
  v43 = v12;
  v44 = v24;
  v45 = v13;
  v46 = v23;
  v47 = v22;
  v48 = v14;
  v49 = v15;
  v50 = v21;
  v17 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(v33, &v32, &v35);
  v56 = v29;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v33, (uint64_t)&v51);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v18 = v33[0];
  v19 = v33[1];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 96) = v18;
  *(_QWORD *)(v5 + 104) = v19;
  return result;
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance TupleView<A>.MakeUnary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleView.MakeUnary.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t TupleView.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t OffsetAttribute2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int ShouldRecordTree;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  int v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  _BYTE v39[32];
  __int128 v40;
  int v41;
  uint64_t v42;
  char v43;
  int v44;
  unsigned int v45;
  _QWORD v46[9];
  uint64_t v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  char v55;

  v5 = v4;
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(_DWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(v4 + 48);
  v12 = *(_DWORD *)(v5 + 72);
  v13 = *(_QWORD *)(v5 + 80);
  v14 = *(_BYTE *)(v5 + 88);
  v47 = v8;
  v48 = v9;
  v50 = *(_OWORD *)(v5 + 32);
  v49 = v10;
  v51 = v11;
  v52 = *(_OWORD *)(v5 + 56);
  v53 = v12;
  v54 = v13;
  v55 = v14;
  if ((WORD6(v50) & 0x100) != 0)
  {
    v34 = *(_QWORD **)(v5 + 96);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized _GraphInputs.pushScope<A>(id:)(v34);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (*(_BYTE *)(v5 + 112) == 1)
  {
    _GraphValue.init(_:)(OffsetAttribute2, &v45);
    *(_QWORD *)&v38 = v47;
    DWORD2(v38) = v48;
    *(_QWORD *)v39 = v49;
    *(_OWORD *)&v39[8] = v50;
    *(_QWORD *)&v39[24] = v51;
    v40 = v52;
    v41 = v53;
    v42 = v54;
    v43 = v55;
    static _ViewListOutputs.unaryViewList<A>(view:inputs:)((uint64_t)&v38, a3, a4, (uint64_t)v46);
  }
  else
  {
    v37 = a4;
    _GraphValue.init(_:)(OffsetAttribute2, &v45);
    v16 = v45;
    v17 = v47;
    v36 = v48;
    v18 = v49;
    v19 = v50;
    v20 = v51;
    v21 = v52;
    v35 = v53;
    v22 = v54;
    v23 = v55;
    ShouldRecordTree = AGSubgraphShouldRecordTree();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (ShouldRecordTree)
      AGSubgraphBeginTreeElement();
    v44 = v16;
    *(_QWORD *)&v38 = v17;
    DWORD2(v38) = v36;
    *(_QWORD *)v39 = v18;
    *(_OWORD *)&v39[8] = v19;
    *(_QWORD *)&v39[24] = v20;
    v40 = v21;
    v41 = v35;
    v42 = v22;
    v43 = v23;
    (*(void (**)(_QWORD *__return_ptr, int *, __int128 *, uint64_t, uint64_t))(v37 + 32))(v46, &v44, &v38, a3, v37);
    $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v16, a3, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  outlined init with copy of _ViewListOutputs((uint64_t)v46, (uint64_t)&v38);
  v25 = *(_QWORD **)(v5 + 120);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
  v27 = v25[2];
  v26 = v25[3];
  if (v27 >= v26 >> 1)
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
  v25[2] = v27 + 1;
  v28 = &v25[9 * v27];
  *((_OWORD *)v28 + 2) = v38;
  v29 = *(_OWORD *)v39;
  v30 = *(_OWORD *)&v39[16];
  v31 = v40;
  *((_BYTE *)v28 + 96) = v41;
  *((_OWORD *)v28 + 4) = v30;
  *((_OWORD *)v28 + 5) = v31;
  *((_OWORD *)v28 + 3) = v29;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 120) = v25;
  v32 = v46[6];
  result = outlined destroy of _ViewListOutputs((uint64_t)v46);
  *(_QWORD *)(v5 + 56) = v32;
  return result;
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance TupleView<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleView.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void TupleView.CountViews.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  if ((*((_BYTE *)v4 + 40) & 1) != 0
    || (v5 = *((_DWORD *)v4 + 4),
        v6 = *((_QWORD *)v4 + 3),
        v7 = *((_QWORD *)v4 + 4),
        v12 = *v4,
        v13 = v5,
        v14 = v6,
        v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a4 + 40))(&v12, a3, a4),
        (v9 & 1) != 0))
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_6;
  }
  v10 = v7 + v8;
  if (!__OFADD__(v7, v8))
  {
    v11 = 0;
LABEL_6:
    *((_QWORD *)v4 + 4) = v10;
    *((_BYTE *)v4 + 40) = v11;
    return;
  }
  __break(1u);
}

void protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance TupleView<A>.CountViews(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TupleView.CountViews.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TupleView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TupleView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleView._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TupleView<A>(uint64_t a1, uint64_t a2)
{
  return static TupleView._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t type metadata accessor for TupleView.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleView.MakeList);
}

uint64_t outlined release of TupleView<A>.MakeList(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for TupleView.CountViews(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleView.CountViews);
}

uint64_t getEnumTagSinglePayload for TupleView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C1758C + 4 * byte_23528D3D0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TupleView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t destroy for TupleView.CountViews()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleView.CountViews(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleView.CountViews(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithTake for TupleView.CountViews(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleView.CountViews(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleView.CountViews(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for TupleView.MakeList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleView.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleView.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for TupleView.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleView.MakeList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleView.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for TupleView.MakeUnary()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleView.MakeUnary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleView.MakeUnary(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  return a1;
}

uint64_t assignWithTake for TupleView.MakeUnary(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleView.MakeUnary(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleView.MakeUnary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t outlined init with copy of _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _ViewListOutputs(a2, a1);
  return a2;
}

void ResolvedShadowStyle.init(nsShadow:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  double Offset;
  double v5;
  double v6;
  double BlurRadius;
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  Offset = CoreShadowGetOffset();
  v6 = v5;
  BlurRadius = CoreShadowGetBlurRadius(a1);
  v8 = (id)CoreShadowGetPlatformColor(a1, 0);
  if (Offset < 0.0 || v6 < 0.0 || BlurRadius < 0.0)
  {

    goto LABEL_8;
  }
  if (!v8)
  {
LABEL_8:

    goto LABEL_9;
  }
  v9 = v8;
  v10 = specialized Color.Resolved.init(platformColor:)(v9);
  v12 = v11;
  v14 = v13;

  if ((v14 & 1) == 0)
  {
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(double *)(a2 + 16) = BlurRadius;
    *(double *)(a2 + 24) = Offset;
    *(double *)(a2 + 32) = v6;
    *(_WORD *)(a2 + 44) = 0;
    *(_DWORD *)(a2 + 40) = 1056964608;
    return;
  }
LABEL_9:
  *(_OWORD *)(a2 + 29) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 45) = 1;
}

void Dictionary<>.setShadow(shadowStyle:)(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  objc_class *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  objc_class *v10;
  _QWORD v11[4];

  v1 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  v3 = *(double *)(a1 + 32);
  v4 = specialized static CoreColor.platformColor(resolvedColor:)(*(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  if (v4)
  {
    v10 = v4;
    v5 = CoreMakeNSShadow(v4, v2, v3, v1);
    if (v5)
    {
      v6 = v5;
      if (one-time initialization token for kitShadow != -1)
        swift_once();
      v7 = (void *)static NSAttributedStringKey.kitShadow;
      v11[3] = type metadata accessor for NSObject();
      v11[0] = v6;
      v8 = v7;
      v9 = v6;
      specialized Dictionary.subscript.setter((uint64_t)v11, v8);

    }
    else
    {

    }
  }
}

id Dictionary<>.setShadow(customStyleIndex:)(uint64_t a1)
{
  id result;
  id v2;
  void *v3;
  _QWORD v4[4];

  result = CoreMakeNSShadowWithCustomStyleIndex(0, (double)a1);
  if (result)
  {
    v2 = result;
    if (one-time initialization token for kitShadow != -1)
      swift_once();
    v3 = (void *)static NSAttributedStringKey.kitShadow;
    v4[3] = type metadata accessor for NSObject();
    v4[0] = v2;
    return (id)specialized Dictionary.subscript.setter((uint64_t)v4, v3);
  }
  return result;
}

void _BlendModeEffect.blendMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_BlendModeEffect.blendMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_BlendModeEffect.blendMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_BlendModeEffect __swiftcall _BlendModeEffect.init(blendMode:)(SwiftUI::_BlendModeEffect blendMode)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)blendMode.blendMode;
  return blendMode;
}

char *_BlendModeEffect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *result;
  int v4;
  char v5;
  uint64_t v6;
  unsigned __int8 v7;

  v5 = *v1;
  result = GraphicsBlendMode.init(_:)(&v5, (uint64_t)&v6);
  v4 = v7;
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = 5;
  return result;
}

BOOL static _BlendModeEffect.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

char *protocol witness for _RendererEffect.effectValue(size:) in conformance _BlendModeEffect@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *result;
  int v4;
  char v5;
  uint64_t v6;
  unsigned __int8 v7;

  v5 = *v1;
  result = GraphicsBlendMode.init(_:)(&v5, (uint64_t)&v6);
  v4 = v7;
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = 5;
  return result;
}

uint64_t _ExtendedBlendModeEffect.blendMode.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_ExtendedBlendModeEffect.blendMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ExtendedBlendModeEffect.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 5;
  return result;
}

BOOL static _ExtendedBlendModeEffect.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _ExtendedBlendModeEffect(uint64_t a1@<X8>)
{
  unsigned int *v1;

  *(_QWORD *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 5;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance GraphicsBlendModeEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = 5;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t View.blendMode(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for _BlendModeEffect, a3);
}

void VisualEffect.blendMode(_:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;

  v7 = *a1;
  lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect();
  VisualEffect.rendererEffect<A>(_:)((uint64_t)&v7, a2, (uint64_t)&type metadata for _BlendModeEffect, a3, a4);
}

uint64_t View.extendedBlendMode(_:)(int a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for _ExtendedBlendModeEffect, a3);
}

uint64_t View.graphicsBlendMode(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v5;
  char v6;

  v3 = *((_BYTE *)a1 + 8);
  v5 = *a1;
  v6 = v3;
  return View.modifier<A>(_:)(&v5, a2, &type metadata for GraphicsBlendModeEffect, a3);
}

unint64_t lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect;
  if (!lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _BlendModeEffect, &type metadata for _BlendModeEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect;
  if (!lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _BlendModeEffect, &type metadata for _BlendModeEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _BlendModeEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ExtendedBlendModeEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect;
  if (!lazy protocol witness table cache variable for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ExtendedBlendModeEffect, &type metadata for _ExtendedBlendModeEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _BlendModeEffect(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _BlendModeEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_234C18750 + 4 * byte_23528D505[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_234C18784 + 4 * byte_23528D500[v4]))();
}

uint64_t sub_234C18784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C1878C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C18794);
  return result;
}

uint64_t sub_234C187A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C187A8);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_234C187AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C187B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _BlendModeEffect()
{
  return &type metadata for _BlendModeEffect;
}

ValueMetadata *type metadata accessor for _ExtendedBlendModeEffect()
{
  return &type metadata for _ExtendedBlendModeEffect;
}

uint64_t sub_234C187E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _BlendModeEffect, (uint64_t)&protocol witness table for _BlendModeEffect, a4);
}

void sub_234C187F4()
{
  type metadata accessor for RendererVisualEffect<_BlendModeEffect>(255);
  lazy protocol witness table accessor for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>();
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234C18830(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedVisualEffect<A, B>, a1);
}

void type metadata accessor for RendererVisualEffect<_BlendModeEffect>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for RendererVisualEffect<_BlendModeEffect>)
  {
    v2 = lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect();
    v4 = type metadata accessor for RendererVisualEffect(a1, (uint64_t)&type metadata for _BlendModeEffect, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for RendererVisualEffect<_BlendModeEffect>);
  }
}

unint64_t lazy protocol witness table accessor for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>;
  if (!lazy protocol witness table cache variable for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>)
  {
    type metadata accessor for RendererVisualEffect<_BlendModeEffect>(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RendererVisualEffect<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>);
  }
  return result;
}

uint64_t sub_234C188F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _ExtendedBlendModeEffect, (uint64_t)&protocol witness table for _ExtendedBlendModeEffect, a4);
}

uint64_t sub_234C18908(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for GraphicsBlendModeEffect, (uint64_t)&protocol witness table for GraphicsBlendModeEffect, a4);
}

uint64_t initializeBufferWithCopyOfBuffer for GraphicsBlendModeEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsBlendMode(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for GraphicsBlendModeEffect(uint64_t a1)
{
  return outlined consume of GraphicsBlendMode(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for GraphicsBlendModeEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsBlendMode(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of GraphicsBlendMode(v5, v6);
  return a1;
}

uint64_t assignWithTake for GraphicsBlendModeEffect(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of GraphicsBlendMode(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for GraphicsBlendModeEffect()
{
  return &type metadata for GraphicsBlendModeEffect;
}

unint64_t instantiation function for generic protocol witness table for GraphicsBlendModeEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect;
  if (!lazy protocol witness table cache variable for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsBlendModeEffect, &type metadata for GraphicsBlendModeEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect);
  }
  return result;
}

uint64_t _Placement.init(proposedSize:aligning:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6;
  uint64_t v7;
  char v8;

  v6 = *(_BYTE *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = *(_BYTE *)(result + 24);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  *(double *)(a2 + 32) = a3;
  *(double *)(a2 + 40) = a4;
  *(double *)(a2 + 48) = a3 * a5;
  *(double *)(a2 + 56) = a4 * a6;
  return result;
}

CGPoint __swiftcall _Placement.frameOrigin(childSize:)(CGSize childSize)
{
  double *v1;
  double v2;
  double v3;
  CGPoint result;

  v2 = v1[6] - v1[4] * childSize.width;
  v3 = v1[7] - v1[5] * childSize.height;
  result.y = v3;
  result.x = v2;
  return result;
}

double _Placement.init(proposedSize:at:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  double result;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  if (one-time initialization token for topLeading != -1)
    swift_once();
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v10;
  result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a2 + 32) = static UnitPoint.topLeading;
  *(double *)(a2 + 48) = a3;
  *(double *)(a2 + 56) = a4;
  return result;
}

double _Placement.proposedSize.getter()
{
  uint64_t v0;
  double result;

  result = *(double *)v0;
  if (*(_BYTE *)(v0 + 8))
    return 10.0;
  return result;
}

void _Placement.proposedSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)v2 = a1;
  *(_BYTE *)(v2 + 8) = 0;
  *(double *)(v2 + 16) = a2;
  *(_BYTE *)(v2 + 24) = 0;
}

_QWORD *(*_Placement.proposedSize.modify(uint64_t a1))(_QWORD *result)
{
  uint64_t v1;
  double v2;
  double v3;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(double *)v1;
  v3 = *(double *)(v1 + 16);
  if (*(_BYTE *)(v1 + 8))
    v2 = 10.0;
  if (*(_BYTE *)(v1 + 24))
    v3 = 10.0;
  *(double *)a1 = v2;
  *(double *)(a1 + 8) = v3;
  return _Placement.proposedSize.modify;
}

_QWORD *_Placement.proposedSize.modify(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = result[1];
  v1 = result[2];
  *(_QWORD *)v1 = *result;
  *(_BYTE *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 24) = 0;
  return result;
}

void _Placement.proposedSize_.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
}

uint64_t _Placement.proposedSize_.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  v4 = *(_BYTE *)(result + 24);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v4;
  return result;
}

uint64_t (*_Placement.proposedSize_.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Placement.anchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void _Placement.anchor.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*_Placement.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Placement.anchorPosition.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void _Placement.anchorPosition.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*_Placement.anchorPosition.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _Placement.init(proposedSize:anchoring:at:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a5;
  *(double *)(a1 + 48) = a6;
  *(double *)(a1 + 56) = a7;
}

uint64_t _Placement.init(proposedSize:anchoring:at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6;
  uint64_t v7;
  char v8;

  v6 = *(_BYTE *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = *(_BYTE *)(result + 24);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  *(double *)(a2 + 32) = a3;
  *(double *)(a2 + 40) = a4;
  *(double *)(a2 + 48) = a5;
  *(double *)(a2 + 56) = a6;
  return result;
}

double _Placement.init(proposedSize:aligning:in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  double result;

  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  result = a5 * a7;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a5;
  *(double *)(a1 + 48) = a4 * a6;
  *(double *)(a1 + 56) = a5 * a7;
  return result;
}

BOOL specialized static _Placement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  BOOL v8;

  v3 = *(double *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v4 = *(_BYTE *)(a2 + 8);
  v6 = *(double *)(a2 + 32);
  v5 = *(double *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
    if (v3 != v6 || v2 != v5)
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      return 0;
    v8 = *(double *)(a1 + 16) == *(double *)(a2 + 16) && v3 == v6;
    if (!v8 || v2 != v5)
      return 0;
  }
  return *(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 48) == *(double *)(a2 + 48);
}

uint64_t sub_234C18D90@<X0>(uint64_t result@<X0>, double *a2@<X8>)
{
  double v2;
  double v3;

  v2 = *(double *)result;
  v3 = *(double *)(result + 16);
  if (*(_BYTE *)(result + 8))
    v2 = 10.0;
  if (*(_BYTE *)(result + 24))
    v3 = 10.0;
  *a2 = v2;
  a2[1] = v3;
  return result;
}

_QWORD *sub_234C18DBC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[1];
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v2;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

ValueMetadata *type metadata accessor for _Placement()
{
  return &type metadata for _Placement;
}

__n128 _ColorMatrixEffect.matrix.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ColorMatrixEffect.matrix.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v2;
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(__n128 *)(v1 + 16) = result;
  return result;
}

uint64_t (*_ColorMatrixEffect.matrix.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void __swiftcall _ColorMatrixEffect.init(matrix:)(SwiftUI::_ColorMatrixEffect *__return_ptr retstr, SwiftUI::_ColorMatrix *matrix)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)&matrix->m33;
  *(_OWORD *)&retstr->matrix.m24 = *(_OWORD *)&matrix->m24;
  *(_OWORD *)&retstr->matrix.m33 = v2;
  *(_OWORD *)&retstr->matrix.m42 = *(_OWORD *)&matrix->m42;
  v3 = *(_OWORD *)&matrix->m15;
  *(_OWORD *)&retstr->matrix.m11 = *(_OWORD *)&matrix->m11;
  *(_OWORD *)&retstr->matrix.m15 = v3;
}

double _ColorMatrixEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = _ColorMatrixEffect.effectValue(size:)(0, a1).n128_u64[0];
  return result;
}

uint64_t sub_234C18E50()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect(0, a1).n128_u64[0];
  return result;
}

uint64_t View._colorMatrix(_:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];

  v3 = a1[3];
  v6[2] = a1[2];
  v6[3] = v3;
  v6[4] = a1[4];
  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return View.modifier<A>(_:)(v6, a2, &type metadata for _ColorMatrixEffect, a3);
}

__n128 _PremultipliedColorMatrixEffect.matrix.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _PremultipliedColorMatrixEffect.matrix.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v2;
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(__n128 *)(v1 + 16) = result;
  return result;
}

uint64_t (*_PremultipliedColorMatrixEffect.matrix.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _PremultipliedColorMatrixEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = _ColorMatrixEffect.effectValue(size:)(1, a1).n128_u64[0];
  return result;
}

__n128 _ColorMatrixEffect.effectValue(size:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v5 = swift_allocObject();
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v5 + 32) = v6;
  v7 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v5 + 64) = v7;
  result = *(__n128 *)(v2 + 64);
  *(__n128 *)(v5 + 80) = result;
  *(_QWORD *)(v5 + 96) = a1;
  *(_BYTE *)(v5 + 132) = 4;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 9;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ColorMatrixEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ColorMatrixEffect and conformance _ColorMatrixEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ColorMatrixEffect and conformance _ColorMatrixEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ColorMatrixEffect and conformance _ColorMatrixEffect;
  if (!lazy protocol witness table cache variable for type _ColorMatrixEffect and conformance _ColorMatrixEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ColorMatrixEffect, &type metadata for _ColorMatrixEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorMatrixEffect and conformance _ColorMatrixEffect);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _PremultipliedColorMatrixEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect;
  if (!lazy protocol witness table cache variable for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _PremultipliedColorMatrixEffect, &type metadata for _PremultipliedColorMatrixEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect);
  }
  return result;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _PremultipliedColorMatrixEffect@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect(1, a1).n128_u64[0];
  return result;
}

__n128 protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = v2[1];
  v12 = *v2;
  v9 = (__n128)v2[3];
  v10 = v2[2];
  v6 = *((_QWORD *)v2 + 8);
  v5 = *((_QWORD *)v2 + 9);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = v12;
  *(_OWORD *)(v7 + 32) = v11;
  result = v9;
  *(_OWORD *)(v7 + 48) = v10;
  *(__n128 *)(v7 + 64) = v9;
  *(_QWORD *)(v7 + 80) = v6;
  *(_QWORD *)(v7 + 88) = v5;
  *(_QWORD *)(v7 + 96) = a1;
  *(_BYTE *)(v7 + 132) = 4;
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 9;
  return result;
}

__n128 __swift_memcpy80_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _ColorMatrixEffect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ColorMatrixEffect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ColorMatrixEffect()
{
  return &type metadata for _ColorMatrixEffect;
}

ValueMetadata *type metadata accessor for _PremultipliedColorMatrixEffect()
{
  return &type metadata for _PremultipliedColorMatrixEffect;
}

uint64_t sub_234C191C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _ColorMatrixEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _ColorMatrixEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

BOOL specialized ShapeStyledLeafView.contentPath(size:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  __int128 *v3;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t (*v10)(void);
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  _BOOL8 result;
  char v15;
  _BYTE v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  int v22;
  _BYTE v23[40];
  _BYTE v24[40];
  uint64_t v25;
  CGRect v26;

  v7 = v3[5];
  v21[0] = v3[4];
  v21[1] = v7;
  v22 = *((_DWORD *)v3 + 24);
  v8 = v3[1];
  v17 = *v3;
  v18 = v8;
  v9 = v3[3];
  v19 = v3[2];
  v20 = v9;
  v10 = MEMORY[0x24BEE1C68];
  outlined init with take of Image.ResizingInfo?((uint64_t)v21, (uint64_t)v23, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  outlined init with take of Image.ResizingInfo?((uint64_t)v23, (uint64_t)v24, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, (uint64_t (*)(_QWORD, uint64_t))v10);
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  if (v24[32] == 2)
  {
    outlined init with take of Image.ResizingInfo?((uint64_t)(v3 + 9), (uint64_t)v16, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for IndirectOptional);
    outlined init with take of Image.ResizingInfo?((uint64_t)v16, (uint64_t)&v25, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for IndirectOptional);
    a2 = 0.0;
    if (v25)
    {
      v12 = *(double *)(v25 + 48);
      v13 = *(double *)(v25 + 56);
    }
    if (*(double *)&v18 != 0.0)
      __asm { BR              X10 }
    a3 = 0.0;
  }
  v26.origin.x = v12;
  v26.origin.y = v13;
  v26.size.width = a2;
  v26.size.height = a3;
  result = CGRectIsNull(v26);
  if (result)
  {
    v15 = 6;
    v13 = 0.0;
    a2 = 0.0;
    a3 = 0.0;
  }
  else
  {
    v15 = 0;
    v11 = v12;
  }
  *(CGFloat *)a1 = v11;
  *(CGFloat *)(a1 + 8) = v13;
  *(CGFloat *)(a1 + 16) = a2;
  *(CGFloat *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance Image.Resolved@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  __int128 *v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13;
  _OWORD v14[2];
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];

  v6 = *a1;
  v7 = v4[9];
  v24 = v4[8];
  v25 = v7;
  v26[0] = v4[10];
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v4 + 175);
  v8 = v4[5];
  v20 = v4[4];
  v21 = v8;
  v9 = v4[7];
  v22 = v4[6];
  v23 = v9;
  v10 = v4[1];
  v16 = *v4;
  v17 = v10;
  v11 = v4[3];
  v18 = v4[2];
  v19 = v11;
  specialized ContentResponder.contentPath(size:kind:)(v6, (uint64_t)v14, a3, a4);
  result = *(double *)v14;
  v13 = v14[1];
  *(_OWORD *)a2 = v14[0];
  *(_OWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 32) = v15;
  return result;
}

uint64_t specialized ContentResponder.contentPath(size:kind:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  __int128 *v4;
  unsigned int v8;
  uint64_t result;
  char v10;
  CGFloat v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t (*v15)(void);
  CGFloat v16;
  CGFloat v17;
  _BYTE v18[8];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  int v24;
  _BYTE v25[40];
  _BYTE v26[40];
  uint64_t v27;
  CGRect v28;

  if (a1 != 1)
  {
    if (one-time initialization token for v3 != -1)
      swift_once();
    v8 = static Semantics.v3;
    if (one-time initialization token for forced != -1)
      swift_once();
    result = swift_beginAccess();
    if ((byte_25426FAB4 & 1) != 0)
    {
      result = dyld_program_sdk_at_least();
      if ((result & 1) != 0)
      {
LABEL_8:
        v10 = 6;
        v11 = 0.0;
        goto LABEL_18;
      }
    }
    else if (static Semantics.forced >= v8)
    {
      goto LABEL_8;
    }
  }
  v12 = v4[5];
  v23[0] = v4[4];
  v23[1] = v12;
  v24 = *((_DWORD *)v4 + 24);
  v13 = v4[1];
  v19 = *v4;
  v20 = v13;
  v14 = v4[3];
  v21 = v4[2];
  v22 = v14;
  v15 = MEMORY[0x24BEE1C68];
  outlined init with take of Image.ResizingInfo?((uint64_t)v23, (uint64_t)v25, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  outlined init with take of Image.ResizingInfo?((uint64_t)v25, (uint64_t)v26, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, (uint64_t (*)(_QWORD, uint64_t))v15);
  v11 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  if (v26[32] == 2)
  {
    outlined init with take of Image.ResizingInfo?((uint64_t)(v4 + 9), (uint64_t)v18, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for IndirectOptional);
    outlined init with take of Image.ResizingInfo?((uint64_t)v18, (uint64_t)&v27, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for IndirectOptional);
    a3 = 0.0;
    if (v27)
    {
      v16 = *(double *)(v27 + 48);
      v17 = *(double *)(v27 + 56);
    }
    if (*(double *)&v20 != 0.0)
      __asm { BR              X10 }
    a4 = 0.0;
  }
  v28.origin.x = v16;
  v28.origin.y = v17;
  v28.size.width = a3;
  v28.size.height = a4;
  result = CGRectIsNull(v28);
  if ((result & 1) == 0)
  {
    v10 = 0;
    v11 = v16;
    goto LABEL_20;
  }
  v10 = 6;
LABEL_18:
  v17 = 0.0;
  a3 = 0.0;
  a4 = 0.0;
LABEL_20:
  *(CGFloat *)a2 = v11;
  *(CGFloat *)(a2 + 8) = v17;
  *(CGFloat *)(a2 + 16) = a3;
  *(CGFloat *)(a2 + 24) = a4;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

{
  unsigned int v7;
  uint64_t result;
  char v9;
  double v10;
  double v11;
  CGRect v12;

  if (a1 != 1)
  {
    if (one-time initialization token for v3 != -1)
      swift_once();
    v7 = static Semantics.v3;
    if (one-time initialization token for forced != -1)
      swift_once();
    result = swift_beginAccess();
    if ((byte_25426FAB4 & 1) != 0)
    {
      result = dyld_program_sdk_at_least();
      if ((result & 1) != 0)
      {
LABEL_8:
        v9 = 6;
        v10 = 0.0;
        v11 = 0.0;
        goto LABEL_19;
      }
    }
    else if (static Semantics.forced >= v7)
    {
      goto LABEL_8;
    }
  }
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  v12.size.width = a3;
  v12.size.height = a4;
  result = CGRectIsNull(v12);
  if ((result & 1) != 0)
    v10 = 0.0;
  else
    v10 = a3;
  if ((result & 1) != 0)
    v11 = 0.0;
  else
    v11 = a4;
  if ((result & 1) != 0)
    v9 = 6;
  else
    v9 = 0;
LABEL_19:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = v10;
  *(double *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 32) = v9;
  return result;
}

uint64_t specialized ContentResponder.contentPath(size:kind:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  unsigned int v9;
  uint64_t result;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double (*v16)(uint64_t);
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGRect v27;

  if (a1 != 1)
  {
    if (one-time initialization token for v3 != -1)
      swift_once();
    v9 = static Semantics.v3;
    if (one-time initialization token for forced != -1)
      swift_once();
    result = swift_beginAccess();
    if ((byte_25426FAB4 & 1) != 0)
    {
      result = dyld_program_sdk_at_least();
      if ((result & 1) != 0)
      {
LABEL_8:
        v11 = 6;
        v12 = 0.0;
        v13 = 0.0;
        v14 = 0.0;
        v15 = 0.0;
        goto LABEL_28;
      }
    }
    else if (static Semantics.forced >= v9)
    {
      goto LABEL_8;
    }
  }
  if (a2)
  {
    v16 = *(double (**)(uint64_t))(*(_QWORD *)a2 + 112);
    v17 = swift_retain();
    v18 = v16(v17);
    v22 = CGRect.outset(by:)(v18, v19, v20, v21, 0.0, 0.0, a4, a5);
    v24 = v23;
    a4 = v25;
    a5 = v26;
    swift_release();
  }
  else
  {
    v22 = 0.0;
    v24 = 0.0;
  }
  v27.origin.x = v22;
  v27.origin.y = v24;
  v27.size.width = a4;
  v27.size.height = a5;
  result = CGRectIsNull(v27);
  if ((result & 1) != 0)
    v12 = 0.0;
  else
    v12 = v22;
  if ((result & 1) != 0)
    v13 = 0.0;
  else
    v13 = v24;
  if ((result & 1) != 0)
    v14 = 0.0;
  else
    v14 = a4;
  if ((result & 1) != 0)
    v15 = 0.0;
  else
    v15 = a5;
  if ((result & 1) != 0)
    v11 = 6;
  else
    v11 = 0;
LABEL_28:
  *(double *)a3 = v12;
  *(double *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v14;
  *(double *)(a3 + 24) = v15;
  *(_BYTE *)(a3 + 32) = v11;
  return result;
}

uint64_t ContentResponder.contentPath(size:kind:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  unsigned int v11;
  uint64_t result;
  __int128 v13;
  char v14;
  __int128 v15;
  _OWORD v16[2];
  char v17;

  if (*a1 == 1)
    goto LABEL_10;
  if (one-time initialization token for v3 != -1)
    swift_once();
  v11 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  result = swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced >= v11)
      goto LABEL_8;
LABEL_10:
    result = (uint64_t)(*(_QWORD *(**)(_OWORD *__return_ptr, uint64_t, uint64_t, double, double))(a3 + 16))(v16, a2, a3, a5, a6);
    v13 = v16[0];
    v15 = v16[1];
    v14 = v17;
    goto LABEL_11;
  }
  result = dyld_program_sdk_at_least();
  if ((result & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v13 = 0uLL;
  v14 = 6;
  v15 = 0uLL;
LABEL_11:
  *(_OWORD *)a4 = v13;
  *(_OWORD *)(a4 + 16) = v15;
  *(_BYTE *)(a4 + 32) = v14;
  return result;
}

uint64_t LeafResponderFilter.init(data:size:position:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(_DWORD *)a5 = result;
  *(_DWORD *)(a5 + 4) = a2;
  *(_DWORD *)(a5 + 8) = a3;
  *(_DWORD *)(a5 + 12) = a4;
  *(_QWORD *)(a5 + 16) = 0;
  return result;
}

char *LeafViewResponder.__allocating_init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v0 = (char *)swift_allocObject();
  v4 = specialized LeafViewResponder.init()(v0, v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, char a2, __int128 *a3, int a4, float64x2_t *a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  uint64_t v25;
  char v26;
  _OWORD *v27;
  char *v28;
  __int128 v29;
  int v30;
  float64x2_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  _OWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  char *v40;
  BOOL v41;
  char *v42;
  char *v43;
  float64x2_t *v45;
  int v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66[9];

  LODWORD(v55) = a8;
  v46 = a6;
  v45 = a5;
  v52 = a4;
  v51 = a3;
  v14 = a10;
  v15 = *(_QWORD *)(a10 + 16);
  v59 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v17 = (char *)&v45 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v57 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v48 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v45 - v22;
  v53 = *(_QWORD *)(v15 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v53 + 16);
  v24((char *)&v45 - v22, a1, v15, v21);
  v56 = TupleTypeMetadata2;
  v25 = *(int *)(TupleTypeMetadata2 + 48);
  v26 = a2;
  v23[v25] = a2;
  v27 = v10;
  v28 = (char *)v10 + *(int *)(a10 + 40);
  v58 = *(_QWORD *)v28;
  v29 = *(_OWORD *)(v28 + 24);
  v50 = *(_OWORD *)(v28 + 8);
  v49 = v29;
  if ((v55 & 1) != 0 || (v46 & 1) != 0)
  {
    *(_QWORD *)v28 = *(_QWORD *)a7;
    v31 = *v45;
    *(float64x2_t *)(v28 + 24) = vsubq_f64(*(float64x2_t *)(a7 + 24), vsubq_f64(*v45, *(float64x2_t *)(a7 + 8)));
    *(float64x2_t *)(v28 + 8) = v31;
    v30 = 4;
  }
  else
  {
    v30 = 0;
  }
  v32 = v52;
  v55 = *v51;
  swift_retain();
  if ((v32 & 1) != 0)
  {
    *v27 = v55;
    v30 |= 2u;
  }
  v33 = v59;
  v47 = (void (*)(char *, char *, uint64_t))v24;
  if ((v26 & 1) != 0)
  {
    v34 = v53;
    v35 = *(void (**)(char *, uint64_t))(v54 + 8);
    v36 = v27;
LABEL_11:
    v42 = (char *)v36 + *(int *)(v14 + 36);
    v35(v42, v33);
    v43 = v48;
    v47(v48, v23, v15);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v42, v43, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v42, 0, 1, v15);
    LOBYTE(v30) = v30 | 1;
    goto LABEL_12;
  }
  v37 = v54;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v17, (char *)v27 + *(int *)(a10 + 36), v59);
  v34 = v53;
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48))(v17, 1, v15);
  *(_QWORD *)&v55 = v23;
  v39 = v38;
  v35 = *(void (**)(char *, uint64_t))(v37 + 8);
  v40 = v17;
  v36 = v27;
  v35(v40, v59);
  v33 = v59;
  v41 = v39 == 1;
  v14 = a10;
  v23 = (char *)v55;
  if (v41)
    goto LABEL_11;
  if (!v30)
  {
    (*(void (**)(_QWORD, uint64_t))(v57 + 8))(v55, v56);
    return swift_release();
  }
LABEL_12:
  v66[0] = v30;
  v63 = v58;
  v64 = v50;
  v65 = v49;
  v60 = *(_QWORD *)v28;
  v61 = *(_OWORD *)(v28 + 8);
  v62 = *(_OWORD *)(v28 + 24);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a9, v66, &v63, &v60);
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v23, v56);
  return swift_release();
}

uint64_t ContentResponder.contains(points:size:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return ContentResponder.contains(points:size:)(a1, a2, a3, a4);
}

uint64_t ContentResponder.contains(points:size:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;
  uint64_t v12;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (double *)(result + 40);
    while (1)
    {
      v9 = *(v7 - 1);
      if (v9 >= 0.0 && ((v10 = *v7, *v7 >= 0.0) ? (v11 = v9 < a3) : (v11 = 0), v11))
      {
        if (v6 < 0x40)
        {
          v12 = 1 << v6;
          v8 = 1 << v6;
          if (v10 < a4)
          {
LABEL_18:
            v5 |= v12;
            goto LABEL_7;
          }
        }
        else
        {
          v12 = 0;
          v8 = 0;
          if (v10 < a4)
            goto LABEL_18;
        }
      }
      else if (v6 >= 0x40)
      {
        v8 = 0;
      }
      else
      {
        v8 = 1 << v6;
      }
      v5 &= ~v8;
LABEL_7:
      ++v6;
      v7 += 2;
      if (v4 == v6)
        goto LABEL_20;
    }
  }
  v5 = 0;
LABEL_20:
  *a2 = v5;
  return result;
}

BOOL ContentResponder.contentPath(size:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  _BOOL8 result;
  CGFloat v7;
  CGFloat v8;
  char v9;
  CGRect v10;

  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = a2;
  v10.size.height = a3;
  result = CGRectIsNull(v10);
  v7 = a2;
  v8 = a3;
  if (result)
  {
    v7 = 0.0;
    v8 = 0.0;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
    v9 = 6;
  else
    v9 = 0;
  *(CGFloat *)(a1 + 16) = v7;
  *(CGFloat *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

{
  _BOOL8 result;
  CGFloat v7;
  CGFloat v8;
  char v9;
  CGRect v10;

  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = a2;
  v10.size.height = a3;
  result = CGRectIsNull(v10);
  v7 = a2;
  v8 = a3;
  if (result)
  {
    v7 = 0.0;
    v8 = 0.0;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
    v9 = 6;
  else
    v9 = 0;
  *(CGFloat *)(a1 + 16) = v7;
  *(CGFloat *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

char *LeafResponderFilter.responder.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *(char **)(v4 + 16);
  }
  else
  {
    v6 = v4;
    type metadata accessor for LeafViewResponder(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
    v5 = LeafViewResponder.__allocating_init()();
    *(_QWORD *)(v6 + 16) = v5;
    swift_retain();
  }
  swift_retain();
  return v5;
}

Swift::Void __swiftcall LeafResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  __int128 *v13;
  char v14;
  __int128 v15;
  float64x2_t *v16;
  char v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  float64x2_t v35;
  __int128 v36[2];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v1 = v0;
  v40 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(v0 + 16);
  v34 = *(_QWORD *)(v2 - 8);
  v3 = v34;
  ((void (*)())MEMORY[0x24BDAC7A8])();
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LeafResponderFilter.responder.getter(v6, v7, v8, v9);
  Value = AGGraphGetValue();
  v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, v2);
  v33 = v12 & 1;
  v13 = (__int128 *)AGGraphGetValue();
  v32 = v14 & 1;
  v15 = v13[1];
  v36[0] = *v13;
  v36[1] = v15;
  v16 = (float64x2_t *)AGGraphGetValue();
  v18 = v17 & 1;
  v35 = *v16;
  v19 = AGGraphGetValue();
  v21 = v20 & 1;
  v37 = *(_QWORD *)v19;
  v38 = *(_OWORD *)(v19 + 8);
  v39 = *(_OWORD *)(v19 + 24);
  swift_retain();
  v25 = LeafResponderFilter.responder.getter(v1, v22, v23, v24);
  swift_beginAccess();
  v27 = type metadata accessor for ContentResponderHelper(0, v2, *(_QWORD *)(v1 + 24), v26);
  ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v5, v33, v36, v32, &v35, v18, (uint64_t)&v37, v21, (uint64_t)v25, v27);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v2);
  type metadata accessor for [ViewResponder](0);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_235283250;
    *(_QWORD *)(v28 + 32) = LeafResponderFilter.responder.getter(v1, v29, v30, v31);
    v37 = v28;
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

double ContentResponderHelper.init()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  int *v6;
  char *v7;
  double result;
  char *v9;

  v6 = (int *)type metadata accessor for ContentResponderHelper(0, a1, a2, a3);
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(&a4[v6[9]], 1, 1, a1);
  v7 = &a4[v6[10]];
  *((_QWORD *)v7 + 4) = 0;
  result = 0.0;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *(_QWORD *)&a4[v6[11]] = MEMORY[0x24BEE4AF8];
  v9 = &a4[v6[12]];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  return result;
}

double LeafViewResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v7 = *v3;
  swift_beginAccess();
  v9 = type metadata accessor for ContentResponderHelper(0, *(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v8);
  v11 = ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), v10, v9);
  swift_endAccess();
  return v11;
}

double ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  double v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v9 = *(_QWORD *)(a5 + 16);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  v14 = *(_QWORD *)(v9 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v11 + 16))(v13, (char *)v5 + *(int *)(a5 + 36), v10, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *a1 = 0;
    return 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, v9);
    v20 = (char *)v5 + *(int *)(a5 + 48);
    if ((v20[4] & 1) != 0 || (a3 & 0x100000000) != 0 || *(_DWORD *)v20 != (_DWORD)a3)
    {
      closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)(&v25, v24, v5, (uint64_t)v18, v9, *(_QWORD *)(a5 + 24));
      v19 = v22;
      v21 = v25;
      *((_QWORD *)v20 + 1) = v25;
      *((double *)v20 + 2) = v22;
      *(_DWORD *)v20 = a3;
      v20[4] = BYTE4(a3) & 1;
    }
    else
    {
      v21 = *((_QWORD *)v20 + 1);
      v19 = *((double *)v20 + 2);
    }
    *a1 = v21;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v9);
  }
  return v19;
}

uint64_t LeafViewResponder.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v10 = *v5;
  v14 = *a2;
  swift_beginAccess();
  v12 = type metadata accessor for ContentResponderHelper(0, *(_QWORD *)(v10 + 232), *(_QWORD *)(v10 + 240), v11);
  ContentResponderHelper.addContentPath(to:kind:in:observer:)(a1, &v14, a3, a4, a5, v12);
  return swift_endAccess();
}

uint64_t ContentResponderHelper.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double *v6;
  double *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  double v24;
  double v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD v34[5];
  _BYTE v35[40];
  _BYTE v36[40];
  _OWORD v37[2];
  uint64_t v38;

  v7 = v6;
  v31 = a3;
  v32 = a1;
  v12 = *(_QWORD *)(a6 + 16);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(v12 - 8);
  v19.n128_f64[0] = MEMORY[0x24BDAC7A8](v18);
  v33 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a2;
  if (a4)
  {
    *(_QWORD *)&v37[0] = a4;
    *((_QWORD *)&v37[0] + 1) = a5;
    closure #1 in ContentResponderHelper.addContentPath(to:kind:in:observer:)((uint64_t *)v37, (uint64_t)v7, v12, *(_QWORD *)(a6 + 24));
  }
  (*(void (**)(char *, char *, uint64_t, __n128))(v14 + 16))(v16, (char *)v7 + *(int *)(a6 + 36), v13, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v23 = v33;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v33, v16, v12);
  v24 = *v7;
  v25 = v7[1];
  *(_QWORD *)&v37[0] = v21;
  (*(void (**)(_QWORD *__return_ptr, _OWORD *, uint64_t, double, double))(*(_QWORD *)(a6 + 24) + 24))(v34, v37, v12, v24, v25);
  Path.isEmpty.getter();
  if ((v26 & 1) != 0)
  {
    v27 = v34;
  }
  else
  {
    v28 = (char *)v7 + *(int *)(a6 + 40);
    v29 = *((_OWORD *)v28 + 1);
    v37[0] = *(_OWORD *)v28;
    v37[1] = v29;
    v38 = *((_QWORD *)v28 + 4);
    MEMORY[0x24BDAC7A8](v26);
    *(&v30 - 2) = v31;
    *(&v30 - 1) = (uint64_t)v37;
    outlined retain of ViewTransform((uint64_t)v37);
    Path.mapPoints(_:)((void (*)(_QWORD **))partial apply for closure #1 in Path.convert(to:transform:), (uint64_t)v35);
    outlined retain of Path.Storage((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    outlined release of ViewTransform((uint64_t)v37);
    outlined init with take of Path.Storage((uint64_t)v35, (uint64_t)v36);
    outlined retain of Path.Storage((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    Path.formTrivialUnion(_:)((uint64_t)v35);
    outlined retain of Path.Storage((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    v27 = v35;
  }
  outlined retain of Path.Storage((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v12);
}

unint64_t LeafViewResponder.descriptionName.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  swift_beginAccess();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 2629694;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8745;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  return 0xD000000000000012;
}

Swift::Void __swiftcall LeafViewResponder.extendPrintTree(string:)(Swift::String *string)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  _QWORD v17[3];
  Swift::String v18;

  v3 = *v2;
  v4 = type metadata accessor for ContentResponderHelper(0, *(_QWORD *)(*v2 + 232), *(_QWORD *)(*v2 + 240), v1);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v17 - v6;
  v8 = (uint64_t)v2 + *(_QWORD *)(v3 + 248);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = ContentResponderHelper.globalPosition.getter(v4);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v12._countAndFlagsBits = 91;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 4202589;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  *(double *)&v17[1] = v9;
  v17[2] = v11;
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
}

double ContentResponderHelper.globalPosition.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  double v3;
  __int128 v4;
  double v5;
  double v6;
  double v7;
  double v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  char v17;
  char v18;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  v3 = *(double *)v2;
  v4 = *(_OWORD *)(v2 + 1);
  v5 = *((double *)v2 + 3);
  v6 = *((double *)v2 + 4);
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v17 = 2;
  v18 = 2;
  if (v3 == 0.0 && v5 == 0.0 && v6 == 0.0)
  {
    v7 = 0.0;
  }
  else
  {
    v13 = 0.0;
    v14 = 0;
    v9 = v3;
    v10 = v4;
    v11 = v5;
    v12 = v6;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v15, (uint64_t)&v9);
    v7 = v13;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v15);
  swift_release();
  return v7;
}

uint64_t LeafViewResponder.__ivar_destroyer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 248);
  v6 = type metadata accessor for ContentResponderHelper(0, *(_QWORD *)(*(_QWORD *)v4 + 232), *(_QWORD *)(*(_QWORD *)v4 + 240), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t *LeafViewResponder.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  outlined destroy of weak GestureGraphDelegate?((uint64_t)(v0 + 2));
  swift_weakDestroy();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 248);
  v4 = type metadata accessor for ContentResponderHelper(0, *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 240), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  return v0;
}

uint64_t LeafViewResponder.__deallocating_deinit()
{
  LeafViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ContentPathObservers.notifyPathChanged(for:changes:transform:)(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void (*v22)(uint64_t, char *, _QWORD *, _QWORD *, char *, uint64_t, uint64_t);
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  char v27;
  _QWORD v28[5];
  _QWORD v29[5];
  char v30;
  char v31;
  _BYTE v32[8];
  uint64_t v33;

  v27 = *a2;
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  v9 = a3[3];
  v10 = a3[4];
  v11 = *a4;
  v12 = a4[1];
  v13 = a4[2];
  v14 = a4[3];
  v15 = a4[4];
  v16 = (_QWORD *)*v4;
  *v4 = MEMORY[0x24BEE4AF8];
  v17 = v16[2];
  if (!v17)
    return swift_bridgeObjectRelease();
  v18 = (_QWORD **)v4;
  v19 = (uint64_t)(v16 + 4);
  do
  {
    outlined init with copy of ContentPathObservers.Observer(v19, (uint64_t)v32);
    v31 = 1;
    if (MEMORY[0x23B7C9E44](v32))
    {
      v20 = v33;
      ObjectType = swift_getObjectType();
      v30 = v27;
      v29[0] = v6;
      v29[1] = v7;
      v29[2] = v8;
      v29[3] = v9;
      v29[4] = v10;
      v28[0] = v11;
      v28[1] = v12;
      v28[2] = v13;
      v28[3] = v14;
      v28[4] = v15;
      v22 = *(void (**)(uint64_t, char *, _QWORD *, _QWORD *, char *, uint64_t, uint64_t))(v20 + 16);
      swift_retain();
      swift_retain();
      v22(a1, &v30, v29, v28, &v31, ObjectType, v20);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      if ((v31 & 1) == 0)
      {
        outlined init with copy of ContentPathObservers.Observer((uint64_t)v32, (uint64_t)v29);
        v23 = *v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, (unint64_t)v23);
        v25 = v23[2];
        v24 = v23[3];
        if (v25 >= v24 >> 1)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, (unint64_t)v23);
        v23[2] = v25 + 1;
        outlined init with take of ContentPathObservers.Observer((uint64_t)v29, (uint64_t)&v23[2 * v25 + 4]);
        *v18 = v23;
      }
    }
    outlined destroy of weak GestureGraphDelegate?((uint64_t)v32);
    v19 += 16;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease();
}

double ContentResponderHelper.size.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ContentResponderHelper.size.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*ContentResponderHelper.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentResponderHelper.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t ContentResponderHelper.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*ContentResponderHelper.data.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentResponderHelper.transform.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + *(int *)(a1 + 40);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 24);
  return swift_retain();
}

__n128 ContentResponderHelper.transform.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;

  v3 = *a1;
  v8 = *(__n128 *)(a1 + 1);
  v4 = a1[3];
  v5 = a1[4];
  v6 = v2 + *(int *)(a2 + 40);
  swift_release();
  *(_QWORD *)v6 = v3;
  result = v8;
  *(__n128 *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v5;
  return result;
}

uint64_t (*ContentResponderHelper.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ContentResponderHelper.bounds.getter(uint64_t a1)
{
  return ContentResponderHelper.globalPosition.getter(a1);
}

_QWORD *closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)(_QWORD *result, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  _OWORD v20[2];
  uint64_t v21;
  char v22;
  _BYTE v23[56];
  uint64_t v24;

  v24 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v9 = a2;
    v10 = (char *)a3 + *(int *)(type metadata accessor for ContentResponderHelper(0, a5, a6, a4) + 40);
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    v13 = *((_QWORD *)v10 + 2);
    v14 = *((double *)v10 + 3);
    v15 = *((double *)v10 + 4);
    v16 = 1;
    v17 = 0u;
    v18 = 0u;
    v19 = 2;
    memset(v20, 0, sizeof(v20));
    v21 = 0;
    v22 = 2;
    outlined init with copy of CoordinateSpace((uint64_t)&v16, (uint64_t)v23);
    v23[41] = 4;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of CoordinateSpace((uint64_t)&v16);
    if (v11 || v14 != 0.0 || v15 != 0.0)
    {
      v16 = v11;
      *(_QWORD *)&v17 = v12;
      *((_QWORD *)&v17 + 1) = v13;
      *(double *)&v18 = v14;
      *((double *)&v18 + 1) = v15;
      specialized ViewTransform.convert(_:_:)((uint64_t)v20, (uint64_t)&v16);
      v9 = v24;
    }
    outlined destroy of ViewTransform.Conversion((uint64_t)v20);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(a6 + 8))(v9, a5, a6, *a3, a3[1]);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t closure #1 in ContentResponderHelper.addContentPath(to:kind:in:observer:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];

  v5 = *a1;
  v6 = a1[1];
  v7 = *(int *)(type metadata accessor for ContentResponderHelper(0, a3, a4, a4) + 44);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v11 = MEMORY[0x23B7C9E44](v10);
      if (v11)
      {
        v12 = v11;
        swift_unknownObjectRelease();
        if (v12 == v5)
          return swift_bridgeObjectRelease();
      }
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  v18[1] = v6;
  swift_unknownObjectWeakInit();
  v14 = *(_QWORD **)(a2 + v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + v7) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, (unint64_t)v14);
    *(_QWORD *)(a2 + v7) = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, (unint64_t)v14);
    *(_QWORD *)(a2 + v7) = v14;
  }
  v14[2] = v17 + 1;
  return outlined init with take of ContentPathObservers.Observer((uint64_t)v18, (uint64_t)&v14[2 * v17 + 4]);
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance StyledTextContentView@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  uint64_t v4;
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  specialized ContentResponder.contentPath(size:kind:)(*a1, *(_QWORD *)(v4 + 8), (uint64_t)v8, a3, a4);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 32) = v9;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance ColorView@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  double result;
  __int128 v6;
  _OWORD v7[2];
  char v8;

  specialized ContentResponder.contentPath(size:kind:)(*a1, (uint64_t)v7, a3, a4);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance _ShapeView<A, B>@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  ContentResponder.contentPath(size:kind:)(a1, a2, a3, (uint64_t)v9, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a4 = v9[0];
  *(_OWORD *)(a4 + 16) = v8;
  *(_BYTE *)(a4 + 32) = v10;
  return result;
}

uint64_t type metadata accessor for ContentResponderHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentResponderHelper);
}

uint64_t partial apply for closure #1 in Path.convert(to:transform:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Path.convert(to:transform:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined destroy of ViewTransform.Conversion(uint64_t a1)
{
  destroy for ViewTransform.Conversion(a1);
  return a1;
}

void base witness table accessor for _AttributeBody in LeafResponderFilter<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t dispatch thunk of ContentResponder.contains(points:size:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ContentResponder.contentPath(size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ContentResponder.contentPath(size:kind:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for TrivialContentResponder()
{
  return &type metadata for TrivialContentResponder;
}

uint64_t assignWithCopy for LeafResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LeafResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for LeafResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LeafResponderFilter);
}

uint64_t type metadata completion function for LeafViewResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ContentResponderHelper(319, *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LeafViewResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LeafViewResponder);
}

uint64_t type metadata completion function for ContentResponderHelper()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContentResponderHelper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  void *v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((((v8 + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((((((v8 + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v14 = (void *)(((unint64_t)a1 + v7 + 16) & ~v7);
    v15 = (const void *)(((unint64_t)a2 + v7 + 16) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4))
    {
      memcpy(v14, v15, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v14, v15, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    }
    v16 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)(v17 + 8);
    *(_OWORD *)(v16 + 24) = *(_OWORD *)(v17 + 24);
    v18 = (_QWORD *)((v16 + 47) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v17 + 47) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_OWORD *)v21;
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
    *(_OWORD *)v20 = v22;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t destroy for ContentResponderHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

_OWORD *initializeWithCopy for ContentResponderHelper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = ((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
  v15 = (_QWORD *)((v13 + 47) & 0xFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + 47) & 0xFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)v18;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_OWORD *)v17 = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ContentResponderHelper(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = (_QWORD *)(((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_retain();
  swift_release();
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v16 = (_QWORD *)(((unint64_t)v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  v17 = ((unint64_t)v15 + 47) & 0xFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  v17 += 15;
  *v16 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_DWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v19 + 4) = *(_BYTE *)((v17 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)v19 = v20;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v19 + 16) = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 16);
  return a1;
}

_OWORD *initializeWithTake for ContentResponderHelper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = ((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)v14;
  v16 = *(_OWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_OWORD *)v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  v17 = (_QWORD *)((v13 + 47) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v14 + 47) & 0xFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  *(_OWORD *)v19 = v21;
  return a1;
}

_OWORD *assignWithTake for ContentResponderHelper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = (_QWORD *)(((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_release();
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v16 = (_QWORD *)(((unint64_t)v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  v17 = ((unint64_t)v15 + 47) & 0xFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  v17 += 15;
  *v16 = v18;
  swift_bridgeObjectRelease();
  v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_DWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v19 + 4) = *(_BYTE *)((v17 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)v19 = v20;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v19 + 16) = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentResponderHelper(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2)
  {
    if (((((((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 24) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  v15 = (a1 + v9 + 16) & ~v9;
  if (v6 < 0x7FFFFFFF)
  {
    v17 = *(_QWORD *)((((v10 + v15) & 0xFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    return (v17 + 1);
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for ContentResponderHelper(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8)
           + 47) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8)
           + 47) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((((v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 24);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_234C1BF6C@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t result;

  *(_BYTE *)(v15 + v16) = 0;
  if (a1)
  {
    v17 = (void *)((v15 + v14 + 16) & v10);
    if (v11 < 0x7FFFFFFF)
    {
      if ((a1 & 0x80000000) != 0)
        v19 = a1 ^ 0x80000000;
      else
        v19 = a1 - 1;
      *(_QWORD *)(((((unint64_t)v17 + v13) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) = v19;
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v18 = a2;
      else
        v18 = 4;
      bzero(v17, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_234C1C074()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_234C1C084()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_234C1C08C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

ValueMetadata *type metadata accessor for ContentPathObservers()
{
  return &type metadata for ContentPathObservers;
}

uint64_t initializeWithCopy for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for ContentPathObservers.Observer(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentPathObservers.Observer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentPathObservers.Observer()
{
  return &type metadata for ContentPathObservers.Observer;
}

char *specialized LeafViewResponder.init()(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  ContentResponderHelper.init()(*(_QWORD *)(*(_QWORD *)a1 + 232), *(_QWORD *)(*(_QWORD *)a1 + 240), a4, &a1[*(_QWORD *)(*(_QWORD *)a1 + 248)]);
  *((_QWORD *)a1 + 3) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v5 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v5 + 200);
  v6 = *(_QWORD *)(v5 + 208);
  swift_release();
  swift_beginAccess();
  *((_QWORD *)a1 + 3) = v6;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a1;
}

void type metadata accessor for (CGFloat, CGFloat)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CGFloat, CGFloat))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
  }
}

uint64_t outlined init with take of Image.ResizingInfo?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v7;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t outlined init with take of ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t outlined init with copy of ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

id DisplayList.ViewUpdater.Platform.viewLayer(_:)(void *a1)
{
  _DWORD *v1;

  return (id)CoreViewLayer(*v1 & 3, a1);
}

void specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  unsigned int v3;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char **p_type;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  void *v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  char v76;
  char v77;
  char v78;
  char v79;
  int v80;
  int v81;
  __int16 v82;
  __int16 v83;
  id v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int16 v95;
  int v96;
  char v97;
  char v98;
  uint64_t v99;
  _QWORD v100[2];

  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 > 0x10 || ((1 << v3) & 0x15F01) == 0)
    return;
  v6 = *(void **)a1;
  v65 = *a2 & 3;
  v7 = (id)CoreViewSubviews(v65, *(void **)(a1 + 16));
  v8 = (unint64_t)objc_msgSend(v7, sel_count);
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v9 = v8;
  v64 = v6;
  v66 = v3;
  if (v8)
  {
    v10 = 0;
    v67 = v8;
    v69 = v7;
    do
    {
      v20 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, v10, v64);
      v21 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v20);
      if ((v22 & 1) != 0)
      {
        v23 = v21;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v25 = a3[2];
        v85 = v25;
        a3[2] = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v25 = v85;
        }
        v26 = *(_QWORD *)(v25 + 56) + 20 * v23;
        v28 = *(_QWORD *)v26;
        v27 = *(_QWORD *)(v26 + 8);
        v29 = *(_BYTE *)(v26 + 16);
        specialized _NativeDictionary._delete(at:)(v23, v25);
        a3[2] = v25;
        swift_bridgeObjectRelease();
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27, v29);
        if ((v31 & 1) != 0)
        {
          v32 = v30;
          v33 = swift_isUniquelyReferenced_nonNull_native();
          v34 = a3[1];
          v85 = v34;
          a3[1] = 0x8000000000000000;
          if ((v33 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v34 = v85;
          }
          v11 = *(_QWORD *)(v34 + 56) + 120 * v32;
          v12 = *(_QWORD *)v11;
          v13 = *(void **)(v11 + 8);
          v14 = *(_QWORD *)(v11 + 16);
          v75 = *(_OWORD *)(v11 + 24);
          v15 = *(_QWORD *)(v11 + 40);
          v16 = *(_QWORD *)(v11 + 48);
          v17 = *(_WORD *)(v11 + 56);
          v18 = *(_QWORD *)(v11 + 64);
          v73 = *(_QWORD *)(v11 + 72);
          v81 = *(_DWORD *)(v11 + 100);
          v83 = *(_WORD *)(v11 + 96);
          v77 = *(_BYTE *)(v11 + 105);
          v79 = *(_BYTE *)(v11 + 104);
          v19 = *(_QWORD *)(v11 + 112);
          v71 = *(_OWORD *)(v11 + 80);
          specialized _NativeDictionary._delete(at:)(v32, v34);
          a3[1] = v34;
          swift_bridgeObjectRelease();
          v100[0] = *a3;
          v85 = v12;
          v86 = v13;
          v87 = v14;
          v88 = v75;
          v89 = v15;
          v90 = v16;
          v91 = v17;
          v92 = v18;
          v93 = v73;
          v94 = v71;
          v95 = v83;
          v96 = v81;
          v97 = v79;
          v98 = v77;
          v99 = v19;
          specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)(&v85, v100, a3);
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
          v9 = v67;
          v7 = v69;
        }
      }
      ++v10;
      CoreViewRemoveFromSuperview(*(_DWORD *)a3 & 3, v20);
      swift_unknownObjectRelease();
    }
    while (v9 != v10);
  }

  if (v66 == 12)
  {
    v35 = (id)CoreViewMaskView(v65, v64);
    if (v35)
    {
      v84 = (id)CoreViewSubviews(v65, v35);
      v36 = (unint64_t)objc_msgSend(v84, sel_count);
      if ((v36 & 0x8000000000000000) == 0)
      {
        v37 = v36;
        if (v36)
        {
          v38 = 0;
          p_type = (char **)(&stru_250685FF0 + 16);
          v68 = v36;
          do
          {
            v49 = objc_msgSend(v84, p_type[319], v38, v64);
            v50 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v49);
            if ((v51 & 1) != 0)
            {
              v52 = v50;
              v53 = swift_isUniquelyReferenced_nonNull_native();
              v54 = a3[2];
              v85 = v54;
              a3[2] = 0x8000000000000000;
              if ((v53 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                v54 = v85;
              }
              v55 = *(_QWORD *)(v54 + 56) + 20 * v52;
              v56 = *(_QWORD *)v55;
              v57 = *(_QWORD *)(v55 + 8);
              v58 = *(_BYTE *)(v55 + 16);
              specialized _NativeDictionary._delete(at:)(v52, v54);
              a3[2] = v54;
              swift_bridgeObjectRelease();
              v59 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v57, v58);
              if ((v60 & 1) != 0)
              {
                v61 = v59;
                v62 = swift_isUniquelyReferenced_nonNull_native();
                v63 = a3[1];
                v85 = v63;
                a3[1] = 0x8000000000000000;
                if ((v62 & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  v63 = v85;
                }
                v40 = *(_QWORD *)(v63 + 56) + 120 * v61;
                v41 = *(_QWORD *)v40;
                v42 = *(void **)(v40 + 8);
                v43 = *(_QWORD *)(v40 + 16);
                v74 = *(_OWORD *)(v40 + 24);
                v44 = *(_QWORD *)(v40 + 40);
                v45 = *(_QWORD *)(v40 + 48);
                v46 = *(_WORD *)(v40 + 56);
                v47 = *(_QWORD *)(v40 + 72);
                v72 = *(_QWORD *)(v40 + 64);
                v80 = *(_DWORD *)(v40 + 100);
                v82 = *(_WORD *)(v40 + 96);
                v78 = *(_BYTE *)(v40 + 104);
                v76 = *(_BYTE *)(v40 + 105);
                v48 = *(_QWORD *)(v40 + 112);
                v70 = *(_OWORD *)(v40 + 80);
                specialized _NativeDictionary._delete(at:)(v61, v63);
                a3[1] = v63;
                swift_bridgeObjectRelease();
                v100[0] = *a3;
                v85 = v41;
                v86 = v42;
                v87 = v43;
                v88 = v74;
                v89 = v44;
                v90 = v45;
                v91 = v46;
                v92 = v72;
                v93 = v47;
                v94 = v70;
                v95 = v82;
                v96 = v80;
                v97 = v78;
                v98 = v76;
                v99 = v48;
                specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)(&v85, v100, a3);
                swift_unknownObjectRelease();

                swift_unknownObjectRelease();
                v37 = v68;
                p_type = &stru_250685FF0.type;
              }
            }
            ++v38;
            CoreViewRemoveFromSuperview(*(_DWORD *)a3 & 3, v49);
            swift_unknownObjectRelease();
          }
          while (v37 != v38);
        }
        swift_unknownObjectRelease();

        return;
      }
LABEL_32:
      __break(1u);
    }
  }
}

void DisplayList.ViewUpdater.Platform.setShadow(_:layer:)(uint64_t a1, id a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    v4 = *v2 & 3;
    if ((_DWORD)v4 == 2 || (v5 = objc_msgSend(a2, sel_delegate)) == 0)
    {
      CoreViewSetShadow(2, a2, 0, 0.0, 0.0, 0.0);
    }
    else
    {
      v6 = v5;
      v7 = CoreViewResolvedSystem(v4, v5);
      CoreViewSetShadow(v7, v6, 0, 0.0, 0.0, 0.0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v9 = *(double *)(a1 + 24);
    v8 = *(double *)(a1 + 32);
    v10 = *(double *)(a1 + 16);
    v12 = *(float *)a1;
    v11 = *(float *)(a1 + 4);
    v13 = *v2 & 3;
    v15 = *(float *)(a1 + 8);
    v14 = *(float *)(a1 + 12);
    if ((_DWORD)v13 == 2 || (v16 = objc_msgSend(a2, sel_delegate)) == 0)
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v20 = (id)specialized ObjectCache.subscript.getter(v12, v11, v15, v14);
      CoreViewSetShadow(2, a2, (uint64_t)v20, v10, v9, v8);
    }
    else
    {
      v17 = v16;
      v18 = CoreViewResolvedSystem(v13, v16);
      v19 = one-time initialization token for cache;
      swift_unknownObjectRetain();
      if (v19 != -1)
        swift_once();
      v20 = (id)specialized ObjectCache.subscript.getter(v12, v11, v15, v14);
      CoreViewSetShadow(v18, v17, (uint64_t)v20, v10, v9, v8);
      swift_unknownObjectRelease_n();
    }

  }
}

void ShapeType.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  int8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  double v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  CGPoint v13;
  CGSize v14;
  double Width;
  CGFloat Height;
  CGFloat v17;
  double v18;
  unsigned int v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  int8x16_t v27;
  _BYTE v28[40];
  int8x16_t v29;
  int8x16_t v30;
  char v31;
  uint64_t v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v32 = *MEMORY[0x24BDAC8D0];
  outlined init with take of Path.Storage(a1, (uint64_t)v28);
  outlined init with take of Path.Storage((uint64_t)v28, (uint64_t)&v29);
  switch(v31)
  {
    case 0:
      v4 = 0;
      v5 = 0;
      v6 = v29.i64[1];
      v7 = v29.i64[0];
      v8 = 0uLL;
      v9 = 0.0;
      v10 = 0uLL;
      v12 = v30.i64[1];
      v11 = v30.i64[0];
      goto LABEL_25;
    case 1:
      v13 = (CGPoint)v29;
      v14 = (CGSize)v30;
      v33.origin = (CGPoint)v29;
      v33.size = (CGSize)v30;
      Width = CGRectGetWidth(v33);
      v34.origin = v13;
      v34.size = v14;
      Height = CGRectGetHeight(v34);
      v8 = 0uLL;
      if (Width == Height)
      {
        v35.origin = v13;
        v35.size = v14;
        v17 = CGRectGetWidth(v35);
        v8 = 0uLL;
        v4 = 0;
        v5 = 0;
        v9 = v17 * 0.5;
        v6 = *(_QWORD *)&v13.y;
        v7 = *(_OWORD *)&v13;
        v12 = *(_QWORD *)&v14.height;
        v11 = *(_OWORD *)&v14;
        break;
      }
      v5 = 0;
      v12 = 0;
      v11 = 0;
      v6 = 0;
      v9 = 0.0;
      v4 = 3;
      v10 = 0uLL;
      v7 = 1;
      goto LABEL_25;
    case 2:
      v18 = *(double *)(v29.i64[0] + 48);
      if (v18 != *(double *)(v29.i64[0] + 56))
        goto LABEL_16;
      v19 = *(unsigned __int8 *)(v29.i64[0] + 64);
      v21 = *(double *)(v29.i64[0] + 32);
      v20 = *(double *)(v29.i64[0] + 40);
      v23 = *(double *)(v29.i64[0] + 16);
      v22 = *(double *)(v29.i64[0] + 24);
      v36.origin.x = v23;
      v36.origin.y = v22;
      v36.size.width = v21;
      v36.size.height = v20;
      v24 = CGRectGetWidth(v36);
      v37.origin.x = v23;
      v37.origin.y = v22;
      v37.size.width = v21;
      v37.size.height = v20;
      v25 = CGRectGetHeight(v37);
      outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      v4 = 0;
      v5 = 0;
      if (v25 >= v24)
        v26 = v24;
      else
        v26 = v25;
      v9 = v26 * 0.5;
      if (v9 >= v18)
        v9 = v18;
      v7 = *(_QWORD *)&v23;
      v6 = *(_QWORD *)&v22;
      v11 = *(_QWORD *)&v21;
      v8 = v19;
      v12 = *(_QWORD *)&v20;
      break;
    case 5:
      if (*(_BYTE *)(v29.i64[0] + 16))
      {
        if (*(_BYTE *)(v29.i64[0] + 16) != 1 && one-time initialization token for bufferCallbacks != -1)
          swift_once();
      }
      else if (!*(_QWORD *)(v29.i64[0] + 24))
      {
        __break(1u);
        JUMPOUT(0x234C1D010);
      }
      RBPathApplyShape();
      outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      v7 = 1;
      v11 = 0;
      v6 = 0;
      v9 = 0.0;
      v12 = 0;
      v8 = 0u;
      v10 = 0u;
      v5 = 0;
      v4 = 3;
      goto LABEL_25;
    case 6:
      v27 = vorrq_s8(v29, v30);
      v5 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
      if (v5)
        goto LABEL_16;
      v12 = 0;
      v11 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0uLL;
      v9 = 0.0;
      v4 = 3;
      break;
    default:
LABEL_16:
      outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      v5 = 0;
      v12 = 0;
      v11 = 0;
      v6 = 0;
      v8 = 0uLL;
      v9 = 0.0;
      v4 = 3;
      v7 = 1;
      break;
  }
  v10 = 0uLL;
LABEL_25:
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(double *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 56) = v10;
  *(int8x8_t *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v4;
}

uint64_t ShapeLayerHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  void *v33;
  _DWORD v34[4];
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE v79[48];
  _BYTE v80[56];

  v52 = a3;
  v49 = a1;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_OWORD *)(v3 + 32);
  *v9 = *(_OWORD *)(v3 + 16);
  v9[1] = v8;
  v79[32] = *(_BYTE *)(v3 + 48);
  outlined init with take of Path.Storage((uint64_t)v79, (uint64_t)v80);
  outlined retain of Path.Storage((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v79, (uint64_t)&v54);
  v53 = v54;
  v10 = v57;
  v37 = v56;
  v11 = v58;
  v12 = v59;
  v13 = v61;
  v50 = v60;
  v14 = v63;
  v38 = v62;
  v39 = v55;
  v46 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v49, a2);
  v15 = (uint64_t)v7;
  v16 = v12;
  v17 = v37;
  PaintType.init<A>(_:)(v15, a2, (uint64_t)&v54);
  v18 = v54;
  v19 = v55;
  v21 = v56;
  v20 = v57;
  v22 = v58;
  v23 = v59;
  v24 = v60;
  v25 = v39;
  v54 = v53;
  v55 = v39;
  v56 = v17;
  v57 = v10;
  v43 = v10;
  v44 = v11;
  v58 = v11;
  v59 = v16;
  v26 = v50;
  v51 = v13;
  v52 = v16;
  v60 = v50;
  v61 = v13;
  v27 = v38;
  v62 = v38;
  v63 = v14;
  v47 = v18;
  v48 = v14;
  v28 = v46;
  LOBYTE(v64) = v46;
  v72 = v18;
  v73 = v19;
  v49 = v19;
  v40 = v21;
  v41 = v22;
  v74 = v21;
  v75 = v20;
  v45 = v20;
  v76 = v22;
  v77 = v23;
  v42 = v24;
  v78 = v24;
  v29 = *(unsigned __int8 *)(v3 + 128);
  contentLayerType(_:_:mayClip:)((uint64_t)&v54);
  if (v30 == *(_QWORD *)(v3 + 8))
  {
    v34[3] = v29;
    v33 = *(void **)v3;
    v35 = v3;
    v36 = v33;
    objc_msgSend(v33, sel_setAllowsEdgeAntialiasing_, *(unsigned __int8 *)(v3 + 113));
    v54 = v47;
    v55 = v49;
    v56 = v40;
    v57 = v45;
    v58 = v41;
    v59 = v23;
    LOBYTE(v60) = v42;
    v61 = v53;
    v62 = v25;
    v63 = v17;
    v64 = v43;
    v65 = v44;
    v66 = v52;
    v67 = v26;
    v68 = v51;
    v69 = v27;
    v70 = v48;
    v71 = v28;
    __asm { BR              X9 }
  }
  v31 = v30;
  outlined consume of ShapeType(v53, v25, v17, v43, v44, v52, v26, v51, v27, v48, v28);
  result = outlined consume of PaintType(v47, v49, v40, v45, v41, v23, v42);
  *(_QWORD *)(v3 + 8) = v31;
  return result;
}

void sub_234C1D810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v7 = v1;
  if (*(_DWORD *)(v2 + 12))
  {
    v9 = *(id *)(v2 + 24);
  }
  else
  {
    v10 = objc_msgSend(*(id *)(v2 + 24), sel_sublayers);
    if (!v10)
    {
      __break(1u);
      JUMPOUT(0x234C1DEE0);
    }
    v11 = v10;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v12 & 0xC000000000000001) != 0)
    {
      v9 = (id)MEMORY[0x23B7C6D9C](0, v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        JUMPOUT(0x234C1DED0);
      }
      v9 = *(id *)(v12 + 32);
      swift_bridgeObjectRelease();
    }
  }
  v13 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v2 + 312) = v7;
  *(_QWORD *)(v2 + 320) = v13;
  *(_QWORD *)(v2 + 328) = v3;
  *(_QWORD *)(v2 + 336) = v4;
  *(_BYTE *)(v2 + 344) = 1;
  swift_bridgeObjectRetain();
  objc_msgSend(v9, sel_setCornerRadius_, v6);
  v14 = (_QWORD *)MEMORY[0x24BDE58E8];
  if ((*(_QWORD *)(v2 + 152) & 1) == 0)
    v14 = (_QWORD *)MEMORY[0x24BDE58E0];
  objc_msgSend(v9, sel_setCornerCurve_, *v14);
  *(_QWORD *)(v5 - 240) = a1;
  v15 = *(_QWORD *)(v2 + 128);
  *(_BYTE *)(v5 - 232) = v15;
  GradientLayer.update(gradient:function:size:bounds:)(v5 - 240, (__int128 *)(v2 + 312));

  outlined release of (PaintType, ShapeType)(v2 + 168);
  outlined consume of PaintType(a1, v15, v7, v13, v3, v4, 2u);
  JUMPOUT(0x234C1D7E0);
}

uint64_t PaintType.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  char v35;
  char v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  char v39;
  char v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v46 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v46 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v46 - v16;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v20((char *)&v46 - v21, a1, a2, v19);
  if ((swift_dynamicCast() & 1) == 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v20)(v17, a1, a2);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v28 = v48;
      v23 = v49;
      v46 = v51;
      v47 = v50;
      v22 = ResolvedGradient.constantColor.getter();
      v30 = v29;
      v32 = v31;
      v33 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      swift_bridgeObjectRetain();
      v33(a1, a2);
      result = swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
      {
        v25 = 1;
LABEL_17:
        v22 = v28;
        v27 = v46;
        v26 = v47;
        goto LABEL_18;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v20)(v14, a1, a2);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v28 = v48;
        v23 = v49;
        v46 = v51;
        v47 = v50;
        v22 = ResolvedGradient.constantColor.getter();
        v30 = v34;
        v36 = v35;
        v37 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
        swift_bridgeObjectRetain();
        v37(a1, a2);
        result = swift_bridgeObjectRelease();
        if ((v36 & 1) != 0)
        {
          v25 = 2;
          goto LABEL_17;
        }
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t))v20)(v11, a1, a2);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v28 = v48;
          v23 = v49;
          v46 = v51;
          v47 = v50;
          v22 = ResolvedGradient.constantColor.getter();
          v30 = v38;
          v40 = v39;
          v41 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
          swift_bridgeObjectRetain();
          v41(a1, a2);
          result = swift_bridgeObjectRelease();
          if ((v40 & 1) != 0)
          {
            v25 = 3;
            goto LABEL_17;
          }
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t))v20)(v8, a1, a2);
          if ((swift_dynamicCast() & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
            v22 = 0;
            v23 = 0;
            v26 = 0uLL;
            v25 = 5;
            v27 = 0uLL;
            goto LABEL_18;
          }
          v28 = v48;
          v23 = v49;
          v46 = v51;
          v47 = v50;
          v22 = ResolvedGradient.constantColor.getter();
          v30 = v42;
          v44 = v43;
          v45 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
          swift_bridgeObjectRetain();
          v45(a1, a2);
          result = swift_bridgeObjectRelease();
          if ((v44 & 1) != 0)
          {
            v25 = 4;
            goto LABEL_17;
          }
        }
      }
    }
    result = swift_bridgeObjectRelease();
    v25 = 0;
    v26 = 0uLL;
    v23 = v30;
    v27 = 0uLL;
    goto LABEL_18;
  }
  v22 = v48;
  v23 = v49;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  v25 = 0;
  v26 = 0uLL;
  v27 = 0uLL;
LABEL_18:
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v23;
  *(_OWORD *)(a3 + 16) = v26;
  *(_OWORD *)(a3 + 32) = v27;
  *(_BYTE *)(a3 + 48) = v25;
  return result;
}

void contentLayerType(_:_:mayClip:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_234C1E364(uint64_t a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[240];

  if ((v3 - 1) >= 4)
  {
    if (v3)
    {
      outlined copy of PaintType(v9, v8, v7, v6, v5, v4, v3);
      outlined release of (PaintType, ShapeType)((uint64_t)v12);
      return type metadata accessor for PaintShapeLayer();
    }
    else
    {
      outlined copy of PaintType(v9, v8, v7, v6, v5, v4, 0);
      outlined release of (PaintType, ShapeType)((uint64_t)v12);
      return type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    }
  }
  else
  {
    outlined copy of PaintType(v9, v8, v7, v6, v5, v4, v3);
    outlined release of (PaintType, ShapeType)((uint64_t)v12);
    if ((a3 & 1) != 0)
      return type metadata accessor for GradientLayer();
    else
      return type metadata accessor for UnclippedGradientLayer();
  }
}

void updateContent(shapeLayer:color:strokedPath:origin:style:)(void *a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7, double a8, double a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  Class isa;
  _QWORD v38[4];
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  CGAffineTransform v45;

  if (a8 == 0.0 && a9 == 0.0)
  {
    v16 = *(_QWORD *)a2;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(_BYTE *)(a2 + 32);
    v21 = a1;
    outlined retain of Path.Storage(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  }
  else
  {
    CGAffineTransformMakeTranslation(&v45, -a8, -a9);
    v22 = a1;
    Path.applying(_:)(&v45.a, (uint64_t)v38);
    v16 = v38[0];
    v17 = v38[1];
    v18 = v38[2];
    v19 = v38[3];
    v20 = v39;
  }
  v40 = v16;
  v41 = v17;
  v42 = v18;
  v43 = v19;
  v44 = v20;
  Path.cgPath.getter();
  v24 = v23;
  outlined consume of Path.Storage(v16, v17, v18, v19, v20);
  objc_msgSend(a1, sel_setPath_, v24);

  if (one-time initialization token for cache != -1)
    swift_once();
  v25 = (void *)specialized ObjectCache.subscript.getter(0.0, 0.0, 0.0, 0.0);
  objc_msgSend(a1, sel_setFillColor_, v25);

  v26 = (void *)specialized ObjectCache.subscript.getter(a4, a5, a6, a7);
  objc_msgSend(a1, sel_setStrokeColor_, v26);

  objc_msgSend(a1, sel_setLineWidth_, *(double *)a3);
  objc_msgSend(a1, sel_setMiterLimit_, *(double *)(a3 + 16));
  v27 = (_QWORD *)MEMORY[0x24BDE5CF0];
  v28 = *(_DWORD *)(a3 + 8);
  v29 = (_QWORD *)MEMORY[0x24BDE5CE8];
  if (v28 != 1)
    v29 = (_QWORD *)MEMORY[0x24BDE5CE0];
  if (v28 != 2)
    v27 = v29;
  objc_msgSend(a1, sel_setLineCap_, *v27);
  v30 = (_QWORD *)MEMORY[0x24BDE5CF8];
  v31 = *(_DWORD *)(a3 + 12);
  v32 = (_QWORD *)MEMORY[0x24BDE5D08];
  if (v31 != 1)
    v32 = (_QWORD *)MEMORY[0x24BDE5D00];
  if (v31 != 2)
    v30 = v32;
  objc_msgSend(a1, sel_setLineJoin_, *v30);
  objc_msgSend(a1, sel_setLineDashPhase_, *(double *)(a3 + 32));
  v33 = *(_QWORD *)(a3 + 24);
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v35 = (double *)(v33 + 32);
    do
    {
      v36 = *v35++;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v36);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v34;
    }
    while (v34);
    outlined release of StrokeStyle(a3);
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setLineDashPattern_, isa);

}

void updateContent(shapeLayer:color:path:origin:eoFill:)(void *a1, uint64_t a2, char a3, float a4, float a5, float a6, float a7, double a8, double a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id *v25;
  id v26;
  _QWORD v28[4];
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  CGAffineTransform v35;

  if (a8 == 0.0 && a9 == 0.0)
  {
    v15 = *(_QWORD *)a2;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    v19 = *(_BYTE *)(a2 + 32);
    v20 = a1;
    outlined retain of Path.Storage(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  }
  else
  {
    CGAffineTransformMakeTranslation(&v35, -a8, -a9);
    v21 = a1;
    Path.applying(_:)(&v35.a, (uint64_t)v28);
    v15 = v28[0];
    v16 = v28[1];
    v17 = v28[2];
    v18 = v28[3];
    v19 = v29;
  }
  v30 = v15;
  v31 = v16;
  v32 = v17;
  v33 = v18;
  v34 = v19;
  Path.cgPath.getter();
  v23 = v22;
  outlined consume of Path.Storage(v15, v16, v17, v18, v19);
  objc_msgSend(a1, sel_setPath_, v23);

  if (one-time initialization token for cache != -1)
    swift_once();
  v24 = (void *)specialized ObjectCache.subscript.getter(a4, a5, a6, a7);
  objc_msgSend(a1, sel_setFillColor_, v24);

  v25 = (id *)MEMORY[0x24BDE5988];
  if ((a3 & 1) == 0)
    v25 = (id *)MEMORY[0x24BDE5990];
  v26 = *v25;
  objc_msgSend(a1, sel_setFillRule_, v26);

  objc_msgSend(a1, sel_setStrokeColor_, 0);
}

id updateContent(shapeLayer:path:origin:paint:paintBounds:style:contentsScale:)(char *a1, uint64_t a2, uint64_t a3, __int16 a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unsigned __int8 v27;
  double *v28;
  double *v29;
  char *v30;
  _BYTE v32[40];

  v21 = &a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path];
  v22 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path];
  v23 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 8];
  v24 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 16];
  v25 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 24];
  v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v21 = *(_OWORD *)a2;
  *((_OWORD *)v21 + 1) = v26;
  v27 = v21[32];
  v21[32] = *(_BYTE *)(a2 + 32);
  outlined init with take of Path.Storage(a2, (uint64_t)v32);
  outlined retain of Path.Storage((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  outlined consume of Path.Storage(v22, v23, v24, v25, v27);
  v28 = (double *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin];
  *v28 = a5;
  v28[1] = a6;
  *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paint] = a3;
  swift_release();
  v29 = (double *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds];
  *v29 = a7;
  v29[1] = a8;
  v29[2] = a9;
  v29[3] = a10;
  v30 = &a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle];
  *v30 = a4 & 1;
  v30[1] = HIBYTE(a4) & 1;
  swift_retain();
  objc_msgSend(a1, sel_setContentsScale_, a11);
  return objc_msgSend(a1, sel_setNeedsDisplay);
}

uint64_t ShapeLayerAsyncHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD v29[12];
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _OWORD v93[2];
  char v94;
  _OWORD v95[2];
  char v96;
  _BYTE v97[40];
  _BYTE v98[40];

  v56 = a1;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v29 - v8;
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v57 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v59 = (char *)v29 - v14;
  v15 = *(_QWORD *)(v3 + 16);
  swift_retain();
  v58 = a3;
  AnyResolvedPaint.as<A>(type:)(a2, a3, v16, (uint64_t)v9);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v9, a2);
    v29[10] = v3;
    v17 = *(_QWORD *)(v3 + 8);
    v29[4] = v17 + 16;
    v18 = *(_OWORD *)(v17 + 16);
    v19 = *(_OWORD *)(v17 + 32);
    v29[6] = v17;
    v96 = *(_BYTE *)(v17 + 48);
    v95[0] = v18;
    v95[1] = v19;
    outlined init with take of Path.Storage((uint64_t)v95, (uint64_t)v97);
    outlined retain of Path.Storage((uint64_t)v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    ShapeType.init(_:)((uint64_t)v95, (uint64_t)&v60);
    v37 = v61;
    v38 = v60;
    v50 = v64;
    v43 = v65;
    v44 = v63;
    v36 = v66;
    v41 = v62;
    v42 = v67;
    v45 = v68;
    v39 = v69;
    v31 = v70;
    v29[5] = v15 + 16;
    v20 = *(_OWORD *)(v15 + 32);
    v93[0] = *(_OWORD *)(v15 + 16);
    v93[1] = v20;
    v29[7] = v15;
    v94 = *(_BYTE *)(v15 + 48);
    outlined init with take of Path.Storage((uint64_t)v93, (uint64_t)v98);
    outlined retain of Path.Storage((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    ShapeType.init(_:)((uint64_t)v93, (uint64_t)&v60);
    v53 = v61;
    v40 = v62;
    v21 = v64;
    v54 = v63;
    v55 = v60;
    v22 = v66;
    v51 = v65;
    v23 = v67;
    v24 = v68;
    v25 = v69;
    v30 = v70;
    v35 = v10;
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v27 = (uint64_t)v57;
    v26(v57, v56, a2);
    PaintType.init<A>(_:)(v27, a2, (uint64_t)&v60);
    v56 = v60;
    v52 = v61;
    v46 = v62;
    v47 = v63;
    v48 = v64;
    v49 = v65;
    v33 = v66;
    v26((char *)v27, (uint64_t)v59, a2);
    v34 = a2;
    PaintType.init<A>(_:)(v27, a2, (uint64_t)&v60);
    v57 = v65;
    v58 = v63;
    v32 = v66;
    v71 = v38;
    v72 = v37;
    v73 = v41;
    v74 = v44;
    v75 = v50;
    v76 = v43;
    v77 = v36;
    v78 = v42;
    v79 = v45;
    v80 = v39;
    v81 = v31;
    v82 = v55;
    v83 = v53;
    v84 = v40;
    v85 = v54;
    v86 = v21;
    v87 = v51;
    v88 = v22;
    v29[8] = v25;
    v29[9] = v23;
    v89 = v23;
    v29[11] = v24;
    v90 = v24;
    v91 = v25;
    v92 = v30;
    __asm { BR              X9 }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void updateContentAsync(layer:oldSize:newSize:oldPaintType:newPaintType:old:new:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_234C2038C()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  void *v15;
  char v16;
  Swift::String v17;
  Swift::Bool v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CALayer v29;

  if (v3)
  {
    v19 = v0;
    outlined copy of PaintType(v9, v0, v5, v2, v7, v25, v3);
    outlined consume of PaintType(v28, v24, v4, v6, v26, v27, v1);
    outlined consume of PaintType(v9, v19, v5, v2, v7, v25, v3);
    v16 = 0;
  }
  else
  {
    v10 = v0;
    if (*(float *)&v9 == *(float *)&v28
      && *((float *)&v9 + 1) == *((float *)&v28 + 1)
      && *(float *)&v0 == *(float *)&v24
      && *((float *)&v0 + 1) == *((float *)&v24 + 1))
    {
      v20 = v0;
      outlined consume of PaintType(v28, v24, v4, v6, v26, v27, 0);
      outlined consume of PaintType(v9, v20, v5, v2, v7, v25, 0);
      v16 = 1;
    }
    else
    {
      v22 = v5;
      v23 = v0;
      v14 = v6;
      if (one-time initialization token for cache != -1)
        swift_once();
      v15 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v9, *((float *)&v9 + 1), *(float *)&v10, *((float *)&v10 + 1));
      v29.super.isa = *v8;
      v16 = 1;
      v17._countAndFlagsBits = 0x756F72676B636162;
      v17._object = (void *)0xEF726F6C6F43646ELL;
      *(_QWORD *)&v29._attr.refcount = 1;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v15, v17, v29, v18);

      outlined consume of PaintType(v28, v24, v4, v14, v26, v27, 0);
      outlined consume of PaintType(v9, v23, v22, v2, v7, v25, 0);
    }
  }
  return v16 & 1;
}

id ShapeLayerShadowHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  char v24;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  char v41;
  _BYTE v42[40];
  _QWORD v43[6];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v35 = a1;
  v36 = *(double *)&a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_OWORD *)(v3 + 32);
  v40[0] = *(_OWORD *)(v3 + 16);
  v40[1] = v8;
  v29 = v3;
  v41 = *(_BYTE *)(v3 + 48);
  outlined init with take of Path.Storage((uint64_t)v40, (uint64_t)v42);
  outlined retain of Path.Storage((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v40, (uint64_t)v43);
  v9 = v43[0];
  v10 = *(double *)&v43[4];
  v38 = v43[2];
  v39 = v43[3];
  v12 = v43[5];
  v11 = v44;
  v30 = v45;
  v31 = v43[1];
  v13 = v47;
  v37 = v46;
  v14 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v35, a2);
  PaintType.init<A>(_:)((uint64_t)v7, a2, (uint64_t)v43);
  v34 = v9;
  v35 = v12;
  v45 = v9;
  v46 = v31;
  v47 = v38;
  v48 = v39;
  v49 = v10;
  v36 = v10;
  v50 = v12;
  v51 = v11;
  v32 = v13;
  v33 = v11;
  v52 = v30;
  v53 = v37;
  v54 = v13;
  v55 = v14;
  v28 = v14;
  if (!v14)
    __asm { BR              X9 }
  if (v14 != 3 || v31 | v34 | v38 | v39 | *(_QWORD *)&v36 | v35 | v33 | v30 | v37 | v32)
    __asm { BR              X9 }
  v15 = v30;
  v16 = v31;
  v17 = v35;
  v18 = v29;
  v19 = *(void **)(v29 + 8);
  v20 = *(_BYTE *)v29 & 3;
  if ((_DWORD)v20 == 2
    || (v21 = objc_msgSend(*(id *)(v29 + 8), sel_delegate)) == 0)
  {
    CoreViewSetShadow(2, v19, 0, 0.0, 0.0, 0.0);
  }
  else
  {
    v22 = v21;
    v23 = CoreViewResolvedSystem(v20, v21);
    CoreViewSetShadow(v23, v22, 0, 0.0, 0.0, 0.0);
    swift_unknownObjectRelease();
  }
  outlined release of (PaintType, ShapeType)((uint64_t)v43);
  if ((*(_BYTE *)(v18 + 117) & 1) == 0)
    return (id)outlined consume of ShapeType(v34, v16, v38, v39, LOBYTE(v36), v17, v33, v15, v37, v32, v28);
  if (v28)
  {
    v24 = v28;
    objc_msgSend(v19, sel_setCornerRadius_, 0.0);
    return (id)outlined consume of ShapeType(v34, v16, v38, v39, LOBYTE(v36), v17, v33, v15, v37, v32, v24);
  }
  else
  {
    objc_msgSend(v19, sel_setCornerRadius_, v36);
    v26 = (_QWORD *)MEMORY[0x24BDE58E8];
    if ((v17 & 1) == 0)
      v26 = (_QWORD *)MEMORY[0x24BDE58E0];
    return objc_msgSend(v19, sel_setCornerCurve_, *v26);
  }
}

void updateShadow(platform:layer:shadow:paintOpacity:path:offset:)(uint64_t *a1, id a2, uint64_t *a3, uint64_t a4, float a5, double a6, double a7)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  __int128 v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  _QWORD v35[4];
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  CGAffineTransform v42;

  v8 = *a1;
  v9 = *((_BYTE *)a3 + 45);
  if ((v9 & 1) != 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0uLL;
  }
  else
  {
    v13 = *((unsigned int *)a3 + 10) | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32);
    v16 = a3[1];
    v26 = a3[4];
    v27 = *a1;
    v25 = *((_OWORD *)a3 + 1);
    v24 = *a3;
    if (a6 == 0.0 && a7 == 0.0)
    {
      v17 = *(_QWORD *)a4;
      v18 = *(_QWORD *)(a4 + 8);
      v19 = *(_QWORD *)(a4 + 16);
      v20 = *(_QWORD *)(a4 + 24);
      v21 = *(_BYTE *)(a4 + 32);
      outlined init with take of Path.Storage(a4, (uint64_t)&v42);
      outlined retain of Path.Storage((uint64_t)&v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    }
    else
    {
      CGAffineTransformMakeTranslation(&v42, -a6, -a7);
      Path.applying(_:)(&v42.a, (uint64_t)v35);
      v17 = v35[0];
      v18 = v35[1];
      v19 = v35[2];
      v20 = v35[3];
      v21 = v36;
    }
    v37 = v17;
    v38 = v18;
    v39 = v19;
    v40 = v20;
    v41 = v21;
    Path.cgPath.getter();
    v23 = v22;
    objc_msgSend(a2, sel_setShadowPath_, v22);
    outlined consume of Path.Storage(v17, v18, v19, v20, v21);

    v11 = v16 | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v16 + 1) * a5) << 32);
    v12 = v26;
    v8 = v27;
    v14 = v25;
    v10 = v24;
  }
  v34 = v8;
  v28[0] = v10;
  v28[1] = v11;
  v29 = v14;
  v30 = v12;
  v32 = BYTE4(v13);
  v31 = v13;
  v33 = v9;
  DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)v28, a2);
}

void updateShadow(platform:gradientLayer:shadow:opaque:)(uint64_t *a1, id a2, __int128 *a3, char a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  uint64_t v26;

  v5 = *a1;
  v6 = *a3;
  v7 = a3[1];
  v8 = *((_QWORD *)a3 + 4);
  v9 = *((unsigned __int8 *)a3 + 44);
  v10 = *((unsigned int *)a3 + 10);
  v11 = *((_BYTE *)a3 + 45);
  if ((v11 & 1) != 0)
    goto LABEL_7;
  v19 = a3[1];
  v20 = *a3;
  v13 = objc_msgSend(a2, sel_sublayers);
  if (v13)
  {
    v14 = v13;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v15 & 0xC000000000000001) != 0)
    {
      v16 = (id)MEMORY[0x23B7C6D9C](0, v15);
      goto LABEL_6;
    }
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v16 = *(id *)(v15 + 32);
LABEL_6:
      v17 = v16;
      swift_bridgeObjectRelease();
      objc_msgSend(a2, sel_setShadowPathIsBounds_, a4 & 1);
      objc_msgSend(v17, sel_cornerRadius);
      objc_msgSend(a2, sel_setCornerRadius_);
      v18 = objc_msgSend(v17, sel_cornerCurve);
      objc_msgSend(a2, sel_setCornerCurve_, v18);

      v7 = v19;
      v6 = v20;
LABEL_7:
      v26 = v5;
      v21[0] = v6;
      v21[1] = v7;
      v22 = v8;
      v24 = (v10 | (unint64_t)(v9 << 32)) >> 32;
      v23 = v10;
      v25 = v11;
      DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)v21, a2);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t PaintType.isOpaque.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)&loc_234C21F4C
                                         + *((int *)qword_234C220D8 + *(unsigned __int8 *)(v0 + 48))))(0);
}

BOOL sub_234C21F5C()
{
  uint64_t v0;

  return *(float *)(v0 + 12) == 1.0;
}

BOOL sub_234C21F70()
{
  uint64_t v0;
  uint64_t v1;
  float *v2;
  uint64_t v3;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = (float *)(v0 + 44);
    v3 = 1;
    LOBYTE(result) = 1;
    while (1)
    {
      if (result)
      {
        result = *v2 == 1.0;
        if (v1 == v3)
          return result;
      }
      else
      {
        result = 0;
        if (v1 == v3)
          return result;
      }
      v2 += 12;
      if (__OFADD__(v3++, 1))
      {
        __break(1u);
        JUMPOUT(0x234C220CCLL);
      }
    }
  }
  return 0;
}

uint64_t ShapeLayerAsyncShadowHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t result;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BYTE v46[16];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  _QWORD v92[10];
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  _OWORD v105[2];
  char v106;
  _OWORD v107[2];
  char v108;
  _BYTE v109[40];
  _BYTE v110[48];

  v78 = a1;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v46[-v8];
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v77 = &v46[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v46[-v14];
  v79 = a3;
  AnyResolvedPaint.as<A>(type:)(a2, a3, v16, (uint64_t)v9);
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v80 = a2;
  if (v17(v9, 1, a2) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  v19 = v15;
  v20 = v80;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v15, v9, v80);
  v21 = *(_QWORD *)(v3 + 8);
  v22 = *(_OWORD *)(v21 + 16);
  v23 = *(_OWORD *)(v21 + 32);
  v48 = v21;
  v108 = *(_BYTE *)(v21 + 48);
  v107[0] = v22;
  v107[1] = v23;
  outlined init with take of Path.Storage((uint64_t)v107, (uint64_t)v109);
  v24 = v10;
  outlined retain of Path.Storage((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v107, (uint64_t)&v81);
  v67 = v82;
  v68 = v81;
  v65 = v84;
  v66 = v83;
  v63 = v86;
  v64 = v85;
  v61 = v88;
  v62 = v87;
  v59 = v90;
  v60 = v89;
  v58 = v91;
  v47 = v3;
  v25 = *(_QWORD *)(v3 + 16);
  v26 = *(_OWORD *)(v25 + 16);
  v27 = *(_OWORD *)(v25 + 32);
  v106 = *(_BYTE *)(v25 + 48);
  v105[0] = v26;
  v105[1] = v27;
  outlined init with take of Path.Storage((uint64_t)v105, (uint64_t)v110);
  outlined retain of Path.Storage((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v105, (uint64_t)&v81);
  v70 = v81;
  v71 = v82;
  v72 = v83;
  v73 = v84;
  v74 = v85;
  v75 = v86;
  v28 = v88;
  v76 = v87;
  v69 = v89;
  v57 = v90;
  v29 = v91;
  v54 = v24;
  v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16);
  v31 = (uint64_t)v77;
  v30(v77, v78, v20);
  PaintType.init<A>(_:)(v31, v20, (uint64_t)&v81);
  v55 = v19;
  v56 = v81;
  v49 = v82;
  v50 = v83;
  v51 = v84;
  v52 = v85;
  v53 = v86;
  v78 = v87;
  v30((_BYTE *)v31, (uint64_t)v19, v20);
  PaintType.init<A>(_:)(v31, v20, (uint64_t)&v81);
  v32 = v29;
  v34 = v83;
  v33 = v84;
  v36 = v85;
  v35 = v86;
  v37 = v87;
  v92[0] = v68;
  v92[1] = v67;
  v92[2] = v66;
  v92[3] = v65;
  v92[4] = v64;
  v92[5] = v63;
  v92[6] = v62;
  v92[7] = v61;
  v92[8] = v60;
  v92[9] = v59;
  v93 = v58;
  v94 = v70;
  v95 = v71;
  v96 = v72;
  v97 = v73;
  v98 = v74;
  v38 = v57;
  v99 = v75;
  v100 = v76;
  v79 = v28;
  v101 = v28;
  v102 = v69;
  v103 = v57;
  v104 = v29;
  if (!v58)
  {
    if (!v29)
      __asm { BR              X9 }
    v43 = v81;
    v44 = v82;
    outlined consume of PaintType(v56, v49, v50, v51, v52, v53, v78);
    v41 = v43;
    v42 = v44;
    goto LABEL_14;
  }
  v39 = v81;
  v40 = v82;
  if (v58 != 3 || v67 | v68 | v66 | v65 | v64 | v63 | v62 | v61 | v60 | v59)
  {
    outlined consume of PaintType(v56, v49, v50, v51, v52, v53, v78);
    v41 = v39;
    v42 = v40;
LABEL_14:
    outlined consume of PaintType(v41, v42, v34, v33, v36, v35, v37);
    outlined release of (ShapeType, ShapeType)((uint64_t)v92);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v54 + 8))(v55, v80);
  }
  v45 = v32;
  (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v55, v80);
  outlined consume of PaintType(v56, v49, v50, v51, v52, v53, v78);
  outlined consume of PaintType(v39, v40, v34, v33, v36, v35, v37);
  if (v45 != 3 || v71 | v70 | v72 | v73 | v74 | v75 | v76 | v79 | v69 | v38)
    return outlined release of (ShapeType, ShapeType)((uint64_t)v92);
  result = outlined release of (ShapeType, ShapeType)((uint64_t)v92);
  *(_BYTE *)(v47 + 32) = 1;
  return result;
}

uint64_t DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)(uint64_t a1, double *a2)
{
  Class *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  id v16;
  Swift::String v17;
  Swift::Bool v18;
  float v19;
  id v20;
  Swift::String v21;
  Swift::Bool v22;
  BOOL v23;
  BOOL v24;
  void *v26;
  Swift::String v27;
  Swift::Bool v28;
  CALayer v29;
  CALayer v30;
  CALayer v31;

  v3 = *((unsigned __int8 *)a2 + 45);
  if ((*(_BYTE *)(a1 + 45) & 1) == 0)
  {
    if ((v3 & 1) != 0 || *(unsigned __int8 *)(a1 + 44) != *((unsigned __int8 *)a2 + 44))
    {
      return 0;
    }
    else
    {
      v4 = *a2;
      v5 = *((_QWORD *)a2 + 1);
      v6 = a2[2];
      v7 = a2[3];
      v8 = a2[4];
      v9 = *(double *)(a1 + 16);
      v11 = *(float *)a1;
      v10 = *(float *)(a1 + 4);
      v12 = HIDWORD(*(_QWORD *)a2);
      v14 = *(float *)(a1 + 8);
      v13 = *(float *)(a1 + 12);
      if (v7 != *(double *)(a1 + 24) || v8 != *(double *)(a1 + 32))
      {
        v15 = *(float *)(a1 + 4);
        v16 = objc_msgSend((id)objc_opt_self(), sel_valueWithSize_, v7, v8);
        v29.super.isa = *v2;
        v17._countAndFlagsBits = 0x664F776F64616873;
        v17._object = (void *)0xEC00000074657366;
        *(_QWORD *)&v29._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v16, v17, v29, v18);

        v10 = v15;
      }
      if (v6 != v9)
      {
        v19 = v10;
        v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v6);
        v30.super.isa = *v2;
        v21._countAndFlagsBits = 0x6152776F64616873;
        v21._object = (void *)0xEC00000073756964;
        *(_QWORD *)&v30._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v20, v21, v30, v22);

        v10 = v19;
      }
      if (*(float *)&v4 == v11
        && (*(float *)&v12 == v10 ? (v23 = *(float *)&v5 == v14) : (v23 = 0),
            v23 ? (v24 = *((float *)&v5 + 1) == v13) : (v24 = 0),
            v24))
      {
        return 1;
      }
      else
      {
        if (one-time initialization token for cache != -1)
          swift_once();
        v26 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v4, *(float *)&v12, *(float *)&v5, *((float *)&v5 + 1));
        v31.super.isa = *v2;
        v3 = 1;
        v27._countAndFlagsBits = 0x6F43776F64616873;
        v27._object = (void *)0xEB00000000726F6CLL;
        *(_QWORD *)&v31._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v26, v27, v31, v28);

      }
    }
  }
  return v3;
}

void ShapeType.initFromFilled(type:shape:)(int a1, uint64_t a2)
{
  int8x16_t *v2;
  __int128 v4;
  int8x16_t v5;
  char v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  int v19;
  CGSize v20;
  _BOOL8 v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  uint64_t v42;
  CGFloat x;
  uint64_t v44;
  CGAffineTransform v45;
  uint64_t v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v46 = *MEMORY[0x24BDAC8D0];
  if (a1 == 6)
  {
    if ((RBPathIsEmpty() & 1) != 0)
    {
      outlined consume of ShapeType(v2->i64[0], v2->i64[1], v2[1].i64[0], v2[1].i64[1], v2[2].i64[0], v2[2].i64[1], v2[3].i64[0], v2[3].i64[1], v2[4].i64[0], v2[4].i64[1], v2[5].i8[0]);
      v2[3] = 0u;
      v2[4] = 0u;
      v2[1] = 0u;
      v2[2] = 0u;
      *v2 = 0u;
      v6 = 3;
    }
    else
    {
      v25 = *(_QWORD *)(a2 + 48);
      if (v25 < 0)
        __break(1u);
      v26 = *(double *)(a2 + 16);
      v42 = *(unsigned int *)(a2 + 24);
      v44 = *(unsigned int *)(a2 + 28);
      v27 = *(double *)(a2 + 32);
      v28 = *(double *)(a2 + 40);
      if (v25)
      {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v30 = 0;
        v31 = v29[2];
        do
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v30);
          v33 = v29[3];
          if (v31 >= v33 >> 1)
            v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v31 + 1, 1, v29);
          ++v30;
          v29[2] = v31 + 1;
          v29[v31++ + 4] = v32;
        }
        while (v25 != v30);
      }
      else
      {
        v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      *(_QWORD *)&v45.a = v2;
      v45.b = v26;
      *(_QWORD *)&v45.c = __PAIR64__(v44, v42);
      v45.d = v27;
      *(_QWORD *)&v45.tx = v29;
      v45.ty = v28;
      swift_bridgeObjectRetain();
      RBPathApplyShape();
      swift_bridgeObjectRelease();
      if (v2[5].i8[0] != 3
        || v2->i64[0] != 1
        || (v34 = vorrq_s8(vorrq_s8(v2[1], v2[3]), vorrq_s8(v2[2], v2[4])),
            *(_QWORD *)&vorr_s8(*(int8x8_t *)v34.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)) | v2->i64[1]))
      {
        swift_bridgeObjectRelease();
        return;
      }
      v35 = RBPathRetain();
      v37 = v36;
      type metadata accessor for Path.PathBox();
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 24) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 56) = 0u;
      *(_OWORD *)(v38 + 40) = 0u;
      *(_BYTE *)(v38 + 16) = 1;
      *(_QWORD *)(v38 + 24) = v35;
      *(_QWORD *)(v38 + 32) = v37;
      v2->i64[0] = v38;
      v2[1].i64[0] = 0;
      v2[1].i64[1] = 0;
      v2->i64[1] = 0;
      v2[2].i64[0] = 5;
      *(CGFloat *)&v2[2].i64[1] = v26;
      v2[3].i64[0] = v42 | (v44 << 32);
      *(CGFloat *)&v2[3].i64[1] = v27;
      v2[4].i64[0] = (uint64_t)v29;
      *(CGFloat *)&v2[4].i64[1] = v28;
      v6 = 2;
    }
    v2[5].i8[0] = v6;
    return;
  }
  if (a1 == 3)
  {
    v7 = *(double *)a2;
    v8 = *(double *)(a2 + 8);
    v9 = *(double *)(a2 + 16);
    v10 = *(double *)(a2 + 24);
    v11 = *(double *)(a2 + 32);
    v12 = *(double *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_QWORD *)(a2 + 64);
    v16 = *(_QWORD *)(a2 + 72);
    v17 = *(double *)(a2 + 80);
    v18 = *(double *)(a2 + 88);
    v19 = *(_DWORD *)(a2 + 96);
    if (v8 == 0.0 && v9 == 0.0 || v7 == 0.0 && v10 == 0.0)
    {
      v45.a = *(CGFloat *)a2;
      v45.b = v8;
      v45.c = v9;
      v45.d = v10;
      v45.tx = v11;
      v45.ty = v12;
      v48 = CGRectApplyAffineTransform(*(CGRect *)&v13, &v45);
      y = v48.origin.y;
      x = v48.origin.x;
      height = v48.size.height;
      width = v48.size.width;
      v45.a = v7;
      v45.b = v8;
      v45.c = v9;
      v45.d = v10;
      v45.tx = v11;
      v45.ty = v12;
      v48.origin.x = v17;
      v48.origin.y = v18;
      v20 = CGSizeApplyAffineTransform((CGSize)v48.origin, &v45);
      if (v20.width == v20.height)
      {
        v21 = v19 == 1;
        outlined consume of ShapeType(v2->i64[0], v2->i64[1], v2[1].i64[0], v2[1].i64[1], v2[2].i64[0], v2[2].i64[1], v2[3].i64[0], v2[3].i64[1], v2[4].i64[0], v2[4].i64[1], v2[5].i8[0]);
        v49.origin.x = x;
        v49.origin.y = y;
        v49.size.width = width;
        v49.size.height = height;
        v22 = CGRectGetWidth(v49);
        v50.origin.x = x;
        v50.origin.y = y;
        v50.size.width = width;
        v50.size.height = height;
        v23 = CGRectGetHeight(v50);
        if (v23 >= v22)
          v23 = v22;
        v24 = v23 * 0.5;
        *(CGFloat *)v2->i64 = x;
        *(CGFloat *)&v2->i64[1] = y;
        if (v24 >= v20.width)
          v24 = v20.width;
        *(CGFloat *)v2[1].i64 = width;
        *(CGFloat *)&v2[1].i64[1] = height;
        *(double *)v2[2].i64 = v24;
        v2[2].i64[1] = v21;
        v5 = 0uLL;
        goto LABEL_22;
      }
    }
  }
  else if (!a1
         && (*(double *)(a2 + 8) == 0.0 && *(double *)(a2 + 16) == 0.0
          || *(double *)a2 == 0.0 && *(double *)(a2 + 24) == 0.0))
  {
    outlined consume of ShapeType(v2->i64[0], v2->i64[1], v2[1].i64[0], v2[1].i64[1], v2[2].i64[0], v2[2].i64[1], v2[3].i64[0], v2[3].i64[1], v2[4].i64[0], v2[4].i64[1], v2[5].i8[0]);
    v47 = *(CGRect *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v45.a = *(_OWORD *)a2;
    *(_OWORD *)&v45.c = v4;
    *(_OWORD *)&v45.tx = *(_OWORD *)(a2 + 32);
    *(CGRect *)v2->i8 = CGRectApplyAffineTransform(v47, &v45);
    v5 = 0uLL;
    v2[2] = 0u;
LABEL_22:
    v2[3] = v5;
    v2[4] = v5;
    v2[5].i8[0] = 0;
  }
}

void @objc closure #1 in closure #1 in ShapeType.init(_:)(uint64_t a1, int a2, uint64_t a3)
{
  ShapeType.initFromFilled(type:shape:)(a2, a3);
}

void ShapeType.initFromStroked(type:shape:style:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  _QWORD *v7;
  _BYTE *v8;
  double v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  int v15;
  __int128 v16;
  _BOOL8 v17;
  double v18;
  double Width;
  double Height;
  double v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  CGAffineTransform v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  if (!*(_QWORD *)(*(_QWORD *)(a3 + 24) + 16))
  {
    if (a1 == 3)
    {
      v10 = *(double *)(a2 + 80);
      if (v10 != *(double *)(a2 + 88))
        return;
      v11 = *(double *)(a2 + 48);
      v12 = *(double *)(a2 + 56);
      v13 = *(double *)(a2 + 64);
      v14 = *(double *)(a2 + 72);
      v15 = *(_DWORD *)(a2 + 96);
      v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v32.a = *(_OWORD *)a2;
      *(_OWORD *)&v32.c = v16;
      *(_OWORD *)&v32.tx = *(_OWORD *)(a2 + 32);
      if (!CGAffineTransformIsIdentity(&v32))
        return;
      v17 = v15 == 1;
      v7 = (_QWORD *)(v3 + 56);
      v8 = (_BYTE *)(v3 + 80);
      outlined consume of ShapeType(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_BYTE *)(v3 + 80));
      v18 = *(double *)a3;
      v33.origin.x = v11;
      v33.origin.y = v12;
      v33.size.width = v13;
      v33.size.height = v14;
      Width = CGRectGetWidth(v33);
      v34.origin.x = v11;
      v34.origin.y = v12;
      v34.size.width = v13;
      v34.size.height = v14;
      Height = CGRectGetHeight(v34);
      if (Height >= Width)
        Height = Width;
      v21 = Height * 0.5;
      if (v21 >= v10)
        v21 = v10;
      if (v21 == 0.0)
        v22 = 0.0;
      else
        v22 = v18 * 0.5 + v21;
      v35.origin.x = v11;
      v35.origin.y = v12;
      v35.size.width = v13;
      v35.size.height = v14;
      *(CGRect *)v3 = CGRectInset(v35, v18 * -0.5, v18 * -0.5);
      *(double *)(v3 + 32) = v22;
      *(_QWORD *)(v3 + 40) = v17;
      *(double *)(v3 + 48) = v18;
    }
    else if (a1 == 1)
    {
      v23 = *(double *)(a2 + 48);
      v24 = *(double *)(a2 + 56);
      v25 = *(double *)(a2 + 64);
      v26 = *(double *)(a2 + 72);
      v36.origin.x = v23;
      v36.origin.y = v24;
      v36.size.width = v25;
      v36.size.height = v26;
      v27 = CGRectGetWidth(v36);
      v37.origin.x = v23;
      v37.origin.y = v24;
      v37.size.width = v25;
      v37.size.height = v26;
      if (v27 != CGRectGetHeight(v37))
        return;
      v28 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v32.a = *(_OWORD *)a2;
      *(_OWORD *)&v32.c = v28;
      *(_OWORD *)&v32.tx = *(_OWORD *)(a2 + 32);
      if (!CGAffineTransformIsIdentity(&v32))
        return;
      v7 = (_QWORD *)(v3 + 56);
      v8 = (_BYTE *)(v3 + 80);
      outlined consume of ShapeType(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_BYTE *)(v3 + 80));
      v29 = *(double *)a3;
      v38.origin.x = v23;
      v38.origin.y = v24;
      v38.size.width = v25;
      v38.size.height = v26;
      v30 = CGRectGetWidth(v38) * 0.5;
      if (v30 == 0.0)
        v31 = 0.0;
      else
        v31 = v29 * 0.5 + v30;
      v39.origin.x = v23;
      v39.origin.y = v24;
      v39.size.width = v25;
      v39.size.height = v26;
      *(CGRect *)v3 = CGRectInset(v39, v29 * -0.5, v29 * -0.5);
      *(double *)(v3 + 32) = v31;
      *(_QWORD *)(v3 + 40) = 0;
      *(double *)(v3 + 48) = v29;
    }
    else
    {
      if (a1)
        return;
      if (*(_DWORD *)(a3 + 12))
        return;
      if (*(double *)(a3 + 16) <= 1.4142)
        return;
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v32.a = *(_OWORD *)a2;
      *(_OWORD *)&v32.c = v6;
      *(_OWORD *)&v32.tx = *(_OWORD *)(a2 + 32);
      if (!CGAffineTransformIsIdentity(&v32))
        return;
      v7 = (_QWORD *)(v3 + 56);
      v8 = (_BYTE *)(v3 + 80);
      outlined consume of ShapeType(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_BYTE *)(v3 + 80));
      v9 = *(double *)a3;
      *(CGRect *)v3 = CGRectInset(*(CGRect *)(a2 + 48), *(double *)a3 * -0.5, *(double *)a3 * -0.5);
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 40) = 0;
      *(double *)(v3 + 48) = v9;
    }
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *v8 = 1;
  }
}

uint64_t @objc closure #1 in closure #1 in closure #1 in ShapeType.initFromFilled(type:shape:)(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v5 = *(_OWORD *)(a1 + 24);
  v7[0] = *(_OWORD *)(a1 + 8);
  v7[1] = v5;
  v8 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  ShapeType.initFromStroked(type:shape:style:)(a2, a3, (uint64_t)v7);
  return outlined release of StrokeStyle((uint64_t)v7);
}

uint64_t type metadata accessor for ColorShapeLayer()
{
  return objc_opt_self();
}

id PaintShapeLayer.init(layer:)(_QWORD *a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 6;
  v5 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paint] = 0;
  v6 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *(_WORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle] = 256;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v7 = _bridgeAnythingToObjectiveC<A>(_:)();
  v10.receiver = v1;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, sel_initWithLayer_, v7);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

uint64_t PaintShapeLayer.draw(in:)(CGContext *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  void (*v5)(uint64_t *);
  void *v6;
  uint64_t v8[2];
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v3 = one-time initialization token for shared;
  v4 = v1;
  if (v3 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v6 = static CoreGlue2.shared;
  v5(&v9);

  v8[0] = v9;
  v8[1] = v10;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v8, 0, 1, (uint64_t)v4);

  swift_release();
  return swift_release();
}

void closure #1 in PaintShapeLayer.draw(in:)(uint64_t *a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  char v20;
  CGRect v21;
  char v22;
  CGRect v23;

  v4 = (double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin);
  GraphicsContext.translateBy(x:y:)(-*(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin), -*(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin + 8));
  v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paint);
  if (v5)
  {
    v6 = *(_OWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 16);
    v19[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path);
    v19[1] = v6;
    v20 = *(_BYTE *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 32);
    v7 = 256;
    if (!*(_BYTE *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle + 1))
      v7 = 0;
    v15 = v7 | *(unsigned __int8 *)(a2
                                  + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle);
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    v8 = *a1;
    v9 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds);
    v10 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds + 8);
    v11 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds + 16);
    v12 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds + 24);
    v13 = *v4;
    v14 = v4[1];
    swift_retain();
    outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v23.origin.x = v9;
    v23.origin.y = v10;
    v23.size.width = v11;
    v23.size.height = v12;
    v21 = CGRectOffset(v23, v13, v14);
    v22 = 0;
    (*(void (**)(_OWORD *, uint64_t *, uint64_t, CGRect *))(*(_QWORD *)v5 + 80))(v19, &v15, v8, &v21);
    outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for PaintShapeLayer()
{
  return objc_opt_self();
}

id UnclippedGradientLayer.init()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  Class isa;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  v1 = objc_msgSendSuper2(&v9, sel_init);
  v2 = objc_allocWithZone((Class)type metadata accessor for GradientLayer());
  v3 = v1;
  v4 = objc_msgSend(v2, sel_init);
  objc_msgSend(v4, sel_setAnchorPoint_, 0.0, 0.0);
  objc_msgSend(v4, sel_setNoAnimationDelegate);
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235283250;
  *(_QWORD *)(v5 + 32) = v4;
  specialized Array._endMutation()();
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
  v6 = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setSublayers_, isa);

  return v3;
}

id @objc ColorShapeLayer.init(layer:)(void *a1)
{
  objc_class *ObjectType;
  uint64_t v3;
  id v4;
  objc_super v6;
  _QWORD v7[4];

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  v3 = _bridgeAnythingToObjectiveC<A>(_:)();
  v6.receiver = a1;
  v6.super_class = ObjectType;
  v4 = objc_msgSendSuper2(&v6, sel_initWithLayer_, v3);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v4;
}

uint64_t type metadata accessor for UnclippedGradientLayer()
{
  return objc_opt_self();
}

uint64_t visitPaint<A>(_:) in Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD v54[10];
  char v55;

  v36 = a3;
  v37 = a2;
  v4 = MEMORY[0x24BDAC7A8](a1);
  v27 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 16);
  v38 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v12 = *(_QWORD *)(v3 + 56);
  v11 = *(_QWORD *)(v3 + 64);
  v13 = *(_QWORD *)(v3 + 72);
  v14 = *(unsigned __int8 *)(v3 + 80);
  v54[0] = v39;
  v54[1] = v38;
  v54[2] = v6;
  v54[3] = v7;
  v35 = v6;
  v34 = v7;
  v54[4] = v8;
  v54[5] = v9;
  v33 = v8;
  v32 = v9;
  v54[6] = v10;
  v54[7] = v12;
  v31 = v12;
  v54[8] = v11;
  v54[9] = v13;
  v30 = v11;
  v29 = v13;
  v55 = v14;
  v28 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v15 + 16))(v27, v16, v37, v4);
  outlined copy of ShapeType(v39, v38, v6, v7, v8, v9, v10, v12, v11, v13, v14);
  PaintType.init<A>(_:)(v27, v37, (uint64_t)&v47);
  v17 = v47;
  v18 = v48;
  v19 = v49;
  v20 = v50;
  v21 = v51;
  v22 = v52;
  LOBYTE(v8) = v53;
  v40 = v47;
  v41 = v48;
  v42 = v49;
  v43 = v50;
  v44 = v51;
  v45 = v52;
  v46 = v53;
  contentLayerType(_:_:mayClip:)((uint64_t)v54);
  v24 = v23;
  outlined consume of PaintType(v17, v18, v19, v20, v21, v22, v8);
  result = outlined consume of ShapeType(v39, v38, v35, v34, v33, v32, v10, v31, v30, v29, v28);
  *(_QWORD *)(v3 + 88) = v24;
  return result;
}

double specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  double x;
  double v9;
  CGRect v11;

  if (type metadata accessor for ColorShapeLayer() == a5)
    return 0.0;
  Path.boundingRect.getter();
  x = v11.origin.x;
  if (CGRectIsNull(v11))
    v9 = 0.0;
  else
    v9 = x;
  if (type metadata accessor for PaintShapeLayer() == a5)
    CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(1.0 / a3);
  return v9;
}

uint64_t specialized static ShapeLayerHelper.updateAsync(layer:old:new:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result;
  void (*v5)(_QWORD *, void *, _UNKNOWN **);
  _QWORD v6[3];
  unsigned __int8 v7;

  result = 0;
  if (*(unsigned __int8 *)(a2 + 112) == a3[112] && ((*(unsigned __int8 *)(a2 + 113) ^ a3[113]) & 1) == 0)
  {
    if (*(unsigned __int8 *)(a2 + 128) == a3[128])
    {
      v6[0] = a1;
      v6[1] = a2;
      v6[2] = a3;
      v7 = 0;
      v5 = *(void (**)(_QWORD *, void *, _UNKNOWN **))(**(_QWORD **)(a2 + 72) + 136);
      swift_retain();
      v5(v6, &unk_2506333D8, &protocol witness table for ShapeLayerAsyncHelper);
      swift_release();
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t outlined consume of ShapeType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 == 2)
  {
    outlined consume of Path.Storage(result, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of StrokeStyle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of ShapeType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 == 2)
  {
    outlined copy of Path.Storage(result, a2, a3, a4, a5);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t initializeWithCopy for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_BYTE *)(a2 + 80);
  outlined copy of ShapeType(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_BYTE *)(a2 + 80);
  outlined copy of ShapeType(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v25;
  *(_BYTE *)(a1 + 80) = v26;
  outlined consume of ShapeType(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_BYTE *)(a2 + 80);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 80);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v4;
  outlined consume of ShapeType(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 88) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)()
{
  return &type metadata for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:);
}

uint64_t destroy for ShapeLayerHelper(uint64_t a1)
{

  outlined consume of Path.Storage(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return swift_release();
}

uint64_t initializeWithCopy for ShapeLayerHelper(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  id v10;
  __int128 v11;

  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  v9 = *((_BYTE *)a2 + 48);
  v10 = (id)v4;
  outlined copy of Path.Storage(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  v11 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v11;
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShapeLayerHelper(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 48);
  outlined copy of Path.Storage(v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v11;
  outlined consume of Path.Storage(v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ShapeLayerHelper(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  __int128 v11;

  v4 = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeLayerHelper(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeLayerHelper()
{
  return &type metadata for ShapeLayerHelper;
}

uint64_t destroy for ShapeLayerShadowHelper(uint64_t a1)
{

  return outlined consume of Path.Storage(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for ShapeLayerShadowHelper(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  id v10;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = v4;
  outlined copy of Path.Storage(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 101) = *(_OWORD *)(a2 + 101);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  return a1;
}

uint64_t assignWithCopy for ShapeLayerShadowHelper(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 48);
  outlined copy of Path.Storage(v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v11;
  outlined consume of Path.Storage(v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  return a1;
}

__n128 __swift_memcpy118_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 110) = *(_QWORD *)((char *)a2 + 110);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ShapeLayerShadowHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  v6 = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v6;
  outlined consume of Path.Storage(v7, v8, v9, v10, v12);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeLayerShadowHelper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 118))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerShadowHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 118) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 118) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeLayerShadowHelper()
{
  return &type metadata for ShapeLayerShadowHelper;
}

uint64_t getEnumTagSinglePayload for ShapeLayerAsyncHelper(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerAsyncHelper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for ShapeLayerAsyncHelper()
{
  return &unk_2506333D8;
}

uint64_t initializeWithCopy for ShapeLayerAsyncShadowHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShapeLayerAsyncShadowHelper(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ShapeLayerAsyncShadowHelper(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeLayerAsyncShadowHelper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerAsyncShadowHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeLayerAsyncShadowHelper()
{
  return &type metadata for ShapeLayerAsyncShadowHelper;
}

uint64_t outlined consume of PaintType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  if (a7 - 1 <= 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined release of (ShapeType, ShapeType)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 168);
  outlined consume of ShapeType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  outlined consume of ShapeType(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined copy of PaintType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  if (a7 - 1 <= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined retain of ShapeLayerHelper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  v7 = *(id *)a1;
  outlined copy of Path.Storage(v2, v3, v4, v5, v6);
  swift_retain();
  return a1;
}

uint64_t outlined release of ShapeLayerHelper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);

  outlined consume of Path.Storage(v2, v3, v4, v5, v6);
  swift_release();
  return a1;
}

uint64_t outlined release of (PaintType, ShapeType)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  outlined consume of PaintType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  outlined consume of ShapeType(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t destroy for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1)
{
  return outlined consume of ShapeType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for ShapeType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  outlined copy of ShapeType(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for ShapeType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  char v25;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_BYTE *)(a2 + 80);
  outlined copy of ShapeType(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 80) = v25;
  outlined consume of ShapeType(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ShapeType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_BYTE *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v3;
  outlined consume of ShapeType(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ShapeType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 80) <= 2u)
    return *(unsigned __int8 *)(a1 + 80);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for ShapeType(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShapeType()
{
  return &type metadata for ShapeType;
}

uint64_t Date.nextDown.getter()
{
  Date.timeIntervalSinceReferenceDate.getter();
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t max<A>(_:ifPresent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return max<A>(_:ifPresent:)(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t))MEMORY[0x24BEE3DF8], a5);
}

uint64_t Date.nextUp.getter()
{
  Date.timeIntervalSinceReferenceDate.getter();
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t min<A>(_:ifPresent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return max<A>(_:ifPresent:)(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t))MEMORY[0x24BEE3E08], a5);
}

uint64_t max<A>(_:ifPresent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, char *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t, uint64_t);

  v22 = a5;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v21 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a2, v11, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a6, a1, a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v14, a3);
    v22(a1, v19, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  }
}

uint64_t RandomAccessCollection.lowerBound(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  void (*v15)(_QWORD, _QWORD, _QWORD);
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[32];

  v31 = a1;
  v32 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v28 = (char *)&v26 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v26 - v8;
  v10 = a3;
  dispatch thunk of Collection.startIndex.getter();
  v11 = v3;
  result = dispatch thunk of Collection.count.getter();
  if (result >= 1)
  {
    v13 = v7;
    v14 = v9;
    v15 = *(void (**)(_QWORD, _QWORD, _QWORD))(v33 + 16);
    v27 = v15;
    do
    {
      while (1)
      {
        v34 = result;
        v16 = (unint64_t)result >> 1;
        v17 = v10;
        v15(v14, v10, v13);
        v35 = v16;
        v18 = v11;
        Collection.formIndex(_:offsetBy:)();
        v19 = dispatch thunk of Collection.subscript.read();
        v20 = v28;
        v21 = v29;
        v22 = v14;
        v23 = v30;
        (*(void (**)(char *))(v29 + 16))(v28);
        ((void (*)(char *, _QWORD))v19)(v36, 0);
        LOBYTE(v19) = v31(v20);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v23);
        v10 = v17;
        v24 = *(void (**)(char *, uint64_t))(v33 + 8);
        if ((v19 & 1) != 0)
          break;
        v14 = v22;
        v24(v22, v13);
        result = v35;
        v11 = v18;
        v15 = v27;
        if (v35 <= 0)
          return result;
      }
      v24(v10, v13);
      v14 = v22;
      v25 = v22;
      v15 = v27;
      v27(v10, v25, v13);
      dispatch thunk of Collection.formIndex(after:)();
      v24(v14, v13);
      result = v34 + ~v35;
      v11 = v18;
    }
    while (result > 0);
  }
  return result;
}

uint64_t EquatableOptionalObject.init(wrappedValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t IndirectOptional.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(double))(v6 + 48))(v7) == 1)
  {
    v10 = type metadata accessor for Optional();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    v12 = 0;
  }
  else
  {
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    v13(v9, a1, a2);
    v12 = swift_allocBox();
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(v14, v9, a2);
  }
  *a3 = v12;
  return result;
}

uint64_t IndirectOptional.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*v2)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = swift_projectBox();
    v6 = *(_QWORD *)(v4 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v5, v4);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v8 = a2;
    v9 = 0;
    v10 = v4;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v8 = a2;
    v9 = 1;
  }
  return v7(v8, v9, 1, v10);
}

uint64_t IndirectOptional.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4) == 1)
  {
    v8 = type metadata accessor for Optional();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    v10 = 0;
  }
  else
  {
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    v11(v7, a1, v4);
    v10 = swift_allocBox();
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v11)(v12, v7, v4);
  }
  *v2 = v10;
  return result;
}

BOOL static EquatableOptionalObject.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  if (*a1)
    v2 = *a2 == 0;
  else
    v2 = 1;
  if (v2)
    return (*a1 | *a2) == 0;
  else
    return *a1 == *a2;
}

uint64_t static IndirectOptional<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - v8;
  v12 = *v11;
  if (!*v10)
  {
    if (!v12)
    {
      v16 = 1;
      return v16 & 1;
    }
    goto LABEL_5;
  }
  if (!v12)
  {
LABEL_5:
    v16 = 0;
    return v16 & 1;
  }
  v13 = swift_projectBox();
  v14 = swift_projectBox();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v15(v9, v13, a3);
  v15(v6, v14, a3);
  swift_retain();
  swift_retain();
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v6, a3);
  v17(v9, a3);
  swift_release();
  swift_release();
  return v16 & 1;
}

void (*MutableCollection<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Slice();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = (char *)malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for Range();
  v9[7] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(_QWORD *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, _QWORD))(v7 + 16))(v2[5], v5, v2[3]);
    MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v8);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v6, v8);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
  }
  else
  {
    MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v2[3]);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v9(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t TupleTypeMetadata2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v48 = a1;
  v49 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - v11;
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v40 - v17;
  swift_getAssociatedConformanceWitness();
  v45 = type metadata accessor for Range();
  v43 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v40 = (char *)&v40 - v22;
  dispatch thunk of Collection.startIndex.getter();
  v46 = a2;
  v47 = v4;
  v44 = v6;
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v25 = v41;
    v24 = TupleTypeMetadata2;
    v26 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    v27 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v27(v12, v18, AssociatedTypeWitness);
    v27(v26, v15, AssociatedTypeWitness);
    v28 = &v9[*(int *)(v24 + 48)];
    v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v29(v9, v12, AssociatedTypeWitness);
    v29(v28, v26, AssociatedTypeWitness);
    v27(v20, v9, AssociatedTypeWitness);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v28, AssociatedTypeWitness);
    v31 = &v9[*(int *)(v24 + 48)];
    v27(v9, v12, AssociatedTypeWitness);
    v27(v31, v26, AssociatedTypeWitness);
    v32 = v45;
    v27(&v20[*(int *)(v45 + 36)], v31, AssociatedTypeWitness);
    v30(v9, AssociatedTypeWitness);
    v33 = v43;
    v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v20, v32);
    v36 = v47;
    v35 = v48;
    v37 = v46;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    v38 = type metadata accessor for Slice();
    v39 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(&v49[*(int *)(v38 + 40)], v36, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v32);
    v27(v39, v34, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t))v27)(&v39[*(int *)(v38 + 36)], &v34[*(int *)(v32 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Collection<>.commonPrefix<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(void);
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char v56;
  char *v57;
  char v58;
  void (*v59)(char *, _QWORD);
  void (*v60)(char *);
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char v67;
  char *v68;
  uint64_t v69;
  void (*v70)(void);
  uint64_t result;
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t TupleTypeMetadata2;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  void (*v115)(void);
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  _QWORD *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char v149[8];

  v132 = a8;
  v147 = a3;
  v109 = a2;
  v114 = a1;
  v143 = a7;
  v144 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v108 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v103 = (char *)&v102 - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v139 = AssociatedTypeWitness;
  v140 = AssociatedConformanceWitness;
  v107 = type metadata accessor for Range();
  v106 = *(_QWORD *)(v107 - 8);
  MEMORY[0x24BDAC7A8](v107);
  v102 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v104 = (char *)&v102 - v18;
  v19 = swift_getAssociatedTypeWitness();
  v122 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](v122);
  v113 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v121 = (char *)&v102 - v22;
  v120 = swift_getAssociatedConformanceWitness();
  v145 = v19;
  v119 = type metadata accessor for Range();
  v112 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v118 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v111 = (char *)&v102 - v25;
  v131 = swift_getAssociatedTypeWitness();
  v146 = *(char **)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v130 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v129 = (char *)&v102 - v28;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v30);
  v110 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v136 = (char *)&v102 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v126 = (char *)&v102 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v142 = (char *)&v102 - v37;
  MEMORY[0x24BDAC7A8](v38);
  v124 = (char *)&v102 - v39;
  v125 = *(_QWORD **)(v19 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v116 = (char *)&v102 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v148 = (char *)&v102 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v102 - v45;
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v102 - v48;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  v117 = v8;
  v137 = a6;
  v138 = a4;
  dispatch thunk of Collection.endIndex.getter();
  v50 = v142;
  v51 = v139;
  dispatch thunk of Collection.endIndex.getter();
  v52 = (void (*)(void))v125[2];
  v123 = v49;
  ((void (*)(char *, char *, uint64_t))v52)(v148, v49, v145);
  v53 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v53(v126, v124, v51);
  v54 = *(_QWORD *)(v120 + 8);
  v55 = v136;
  v134 = v46;
  v128 = v54;
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v135 = v53;
  v53(v55, v50, v51);
  v133 = v29;
  v115 = v52;
  if ((v56 & 1) != 0)
  {
    v141 = *(void (**)(char *, uint64_t))(v29 + 8);
    v141(v55, v51);
  }
  else
  {
    v127 = *(_QWORD *)(v140 + 8);
    v57 = v126;
    while (1)
    {
      v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      v141 = *(void (**)(char *, uint64_t))(v29 + 8);
      v141(v55, v51);
      if ((v58 & 1) != 0)
        break;
      v59 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v60 = (void (*)(char *))*((_QWORD *)v146 + 2);
      v61 = v129;
      v62 = v131;
      v60(v129);
      v59(v149, 0);
      v63 = v57;
      v64 = dispatch thunk of Collection.subscript.read();
      v65 = v130;
      v60(v130);
      ((void (*)(char *, _QWORD))v64)(v149, 0);
      LOBYTE(v64) = dispatch thunk of static Equatable.== infix(_:_:)();
      v66 = (void (*)(char *, uint64_t))*((_QWORD *)v146 + 1);
      v66(v65, v62);
      v66(v61, v62);
      if ((v64 & 1) == 0)
      {
        v51 = v139;
        break;
      }
      dispatch thunk of Collection.formIndex(after:)();
      v57 = v63;
      dispatch thunk of Collection.formIndex(after:)();
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v55 = v136;
      v51 = v139;
      v135(v136, v142, v139);
      v29 = v133;
      if ((v67 & 1) != 0)
      {
        v141(v55, v51);
        break;
      }
    }
  }
  v68 = v116;
  v69 = v145;
  v70 = v115;
  v115();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v146 = &v121[*(int *)(v122 + 48)];
    v72 = v146;
    v70();
    v73 = v68;
    v74 = (void (*)(char *, char *, uint64_t))v125[4];
    v74(v72, v73, v69);
    v75 = v113;
    v76 = &v113[*(int *)(v122 + 48)];
    ((void (*)(char *, char *, uint64_t))v70)(v113, v121, v69);
    ((void (*)(char *, char *, uint64_t))v70)(v76, v146, v69);
    v74(v118, v75, v69);
    v77 = (char *)v125[1];
    ((void (*)(char *, uint64_t))v77)(v76, v69);
    v137 = &v75[*(int *)(v122 + 48)];
    v78 = v137;
    v74(v75, v121, v69);
    v74(v78, v146, v69);
    v79 = v118;
    v74(&v118[*(int *)(v119 + 36)], v137, v69);
    v146 = v77;
    ((void (*)(char *, uint64_t))v77)(v75, v69);
    v80 = v112;
    v81 = v111;
    v82 = v79;
    v83 = v119;
    (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v111, v82, v119);
    dispatch thunk of Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v83);
    v84 = v110;
    v85 = v135;
    v135(v110, v126, v51);
    v86 = v124;
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v87 = TupleTypeMetadata2;
      v88 = v103;
      v89 = &v103[*(int *)(TupleTypeMetadata2 + 48)];
      v85(v103, v86, v51);
      v90 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
      v91 = v89;
      v90(v89, v84, v51);
      v92 = v108;
      v93 = &v108[*(int *)(v87 + 48)];
      v85(v108, v88, v51);
      v85(v93, v89, v51);
      v94 = v102;
      v90(v102, v92, v51);
      v95 = v141;
      v141(v93, v51);
      v96 = &v92[*(int *)(v87 + 48)];
      v90(v92, v88, v51);
      v90(v96, v91, v51);
      v97 = v107;
      v90(&v94[*(int *)(v107 + 36)], v96, v51);
      v95(v92, v51);
      v98 = v106;
      v99 = v104;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v104, v94, v97);
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v97);
      v95(v126, v51);
      v101 = v145;
      v100 = v146;
      ((void (*)(char *, uint64_t))v146)(v148, v145);
      v95(v142, v51);
      ((void (*)(char *, uint64_t))v100)(v134, v101);
      v95(v124, v51);
      return ((uint64_t (*)(char *, uint64_t))v100)(v123, v101);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BidirectionalCollection<>.commonSuffix<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, _QWORD);
  uint64_t v65;
  void (*v66)(char *);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, char *, uint64_t);
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t TupleTypeMetadata2;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  char *v155;
  char v156[8];

  v139 = a8;
  v151 = a3;
  v115 = a2;
  v123 = a1;
  v138 = a7;
  v150 = *(_QWORD *)(a7 + 8);
  v152 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v114 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v109 = (char *)&v107 - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v124 = AssociatedTypeWitness;
  v125 = AssociatedConformanceWitness;
  v113 = type metadata accessor for Range();
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v108 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v110 = (char *)&v107 - v18;
  v137 = a6;
  v19 = *(_QWORD *)(a6 + 8);
  v20 = swift_getAssociatedTypeWitness();
  v119 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](v119);
  v122 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v117 = (char *)&v107 - v23;
  v127 = swift_getAssociatedConformanceWitness();
  v121 = type metadata accessor for Range();
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v126 = (char *)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v118 = (char *)&v107 - v26;
  v136 = swift_getAssociatedTypeWitness();
  v135 = *(_QWORD *)(v136 - 8);
  MEMORY[0x24BDAC7A8](v136);
  v134 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v133 = (char *)&v107 - v29;
  v154 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v30);
  v155 = (char *)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v142 = (char *)&v107 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v147 = (char *)&v107 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v128 = (char *)&v107 - v37;
  MEMORY[0x24BDAC7A8](v38);
  v146 = (char *)&v107 - v39;
  v153 = *(void (**)(char *, uint64_t))(v20 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v132 = (char *)&v107 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v148 = (char *)&v107 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v149 = (char *)&v107 - v45;
  MEMORY[0x24BDAC7A8](v46);
  v48 = (char *)&v107 - v47;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  v144 = a4;
  v145 = v8;
  v143 = v19;
  v49 = v124;
  dispatch thunk of Collection.endIndex.getter();
  v50 = v128;
  v51 = v147;
  v52 = v149;
  dispatch thunk of Collection.endIndex.getter();
  v53 = v148;
  v116 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v153 + 2);
  v116(v148, v52, v20);
  v54 = *(void (**)(char *, char *, uint64_t))(v154 + 16);
  v54(v51, v50, v49);
  v55 = *(_QWORD *)(v127 + 8);
  v56 = v53;
  v57 = v142;
  v141 = v48;
  v131 = v55;
  LOBYTE(v53) = dispatch thunk of static Equatable.== infix(_:_:)();
  v140 = v54;
  v54(v57, v146, v49);
  if ((v53 & 1) != 0)
  {
    v58 = *(void (**)(char *, uint64_t))(v154 + 8);
    v58(v57, v49);
  }
  else
  {
    v130 = *(_QWORD *)(v125 + 8);
    v59 = v154;
    v60 = v155;
    v129 = v20;
    while (1)
    {
      v61 = dispatch thunk of static Equatable.== infix(_:_:)();
      v58 = *(void (**)(char *, uint64_t))(v59 + 8);
      v58(v57, v49);
      if ((v61 & 1) != 0)
        break;
      v155 = (char *)v58;
      v62 = v49;
      v63 = v132;
      dispatch thunk of BidirectionalCollection.index(before:)();
      dispatch thunk of BidirectionalCollection.index(before:)();
      v64 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v65 = v135;
      v66 = *(void (**)(char *))(v135 + 16);
      v67 = v133;
      v68 = v136;
      v66(v133);
      v64(v156, 0);
      v69 = dispatch thunk of Collection.subscript.read();
      v70 = v134;
      v66(v134);
      ((void (*)(char *, _QWORD))v69)(v156, 0);
      LOBYTE(v69) = dispatch thunk of static Equatable.== infix(_:_:)();
      v71 = *(void (**)(char *, uint64_t))(v65 + 8);
      v71(v70, v68);
      v71(v67, v68);
      if ((v69 & 1) == 0)
      {
        v49 = v62;
        v74 = v62;
        v58 = (void (*)(char *, uint64_t))v155;
        ((void (*)(char *, uint64_t))v155)(v60, v74);
        v20 = v129;
        (*((void (**)(char *, uint64_t))v153 + 1))(v63, v129);
        v51 = v147;
        v56 = v148;
        v52 = v149;
        break;
      }
      v51 = v147;
      v49 = v62;
      v72 = v62;
      v58 = (void (*)(char *, uint64_t))v155;
      ((void (*)(char *, uint64_t))v155)(v147, v72);
      v73 = v153;
      v56 = v148;
      v20 = v129;
      (*((void (**)(char *, uint64_t))v153 + 1))(v148, v129);
      v59 = v154;
      (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v51, v60, v49);
      (*((void (**)(char *, char *, uint64_t))v73 + 4))(v56, v63, v20);
      LOBYTE(v73) = dispatch thunk of static Equatable.== infix(_:_:)();
      v57 = v142;
      v140(v142, v146, v49);
      v52 = v149;
      if ((v73 & 1) != 0)
      {
        v58(v57, v49);
        break;
      }
    }
  }
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v155 = (char *)v58;
    v76 = v119;
    v77 = v117;
    v78 = &v117[*(int *)(v119 + 48)];
    v79 = v116;
    v116(v117, v56, v20);
    v142 = v78;
    v79(v78, v52, v20);
    v80 = v122;
    v81 = &v122[*(int *)(v76 + 48)];
    v79(v122, v77, v20);
    v79(v81, v78, v20);
    v82 = v153;
    v83 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v153 + 4);
    v83(v126, v80, v20);
    v84 = (void (*)(char *, uint64_t))*((_QWORD *)v82 + 1);
    v84(v81, v20);
    v85 = &v80[*(int *)(v76 + 48)];
    v83(v80, v77, v20);
    v83(v85, v142, v20);
    v86 = v121;
    v87 = v126;
    v83(&v126[*(int *)(v121 + 36)], v85, v20);
    v153 = v84;
    v84(v80, v20);
    v88 = v120;
    v89 = v118;
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v118, v87, v86);
    dispatch thunk of Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v86);
    v90 = v128;
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v91 = v20;
      v92 = TupleTypeMetadata2;
      v93 = v49;
      v94 = v109;
      v95 = &v109[*(int *)(TupleTypeMetadata2 + 48)];
      v96 = v140;
      v140(v109, v51, v93);
      v96(v95, v90, v93);
      v97 = v114;
      v98 = &v114[*(int *)(v92 + 48)];
      v96(v114, v94, v93);
      v96(v98, v95, v93);
      v99 = *(void (**)(char *, char *, uint64_t))(v154 + 32);
      v100 = v108;
      v99(v108, v97, v93);
      v101 = (void (*)(char *, uint64_t))v155;
      ((void (*)(char *, uint64_t))v155)(v98, v93);
      v102 = &v97[*(int *)(v92 + 48)];
      v99(v97, v94, v93);
      v99(v102, v95, v93);
      v103 = v113;
      v99(&v100[*(int *)(v113 + 36)], v102, v93);
      v101(v97, v93);
      v104 = v112;
      v105 = v110;
      (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v110, v100, v103);
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v103);
      v101(v147, v93);
      v106 = v153;
      v153(v148, v91);
      v101(v128, v93);
      v106(v149, v91);
      v101(v146, v93);
      return ((uint64_t (*)(char *, uint64_t))v106)(v141, v91);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Range.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - v9;
  v11 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v2, a2);
  v12(v7, a1, a2);
  if ((v11 & 1) != 0)
    v13 = dispatch thunk of static Comparable.>= infix(_:_:)();
  else
    v13 = 0;
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, a2);
  v14(v10, a2);
  return v13 & 1;
}

uint64_t (*bind<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t (*v15)();
  uint64_t v17;

  v7 = *(_QWORD *)(a4 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v9, a4, v10);
    v13 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14 = (char *)swift_allocObject();
    *((_QWORD *)v14 + 2) = a4;
    *((_QWORD *)v14 + 3) = a1;
    *((_QWORD *)v14 + 4) = a2;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v14[v13], v11, a4);
    v15 = partial apply for closure #1 in bind<A>(_:_:);
  }
  else
  {
    v15 = 0;
  }
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
  return v15;
}

double Double.quantized.getter(double a1)
{
  return round(a1 * 256.0) * 0.00390625;
}

float Float.quantized.getter(float a1)
{
  return roundf(a1 * 256.0) * 0.0039062;
}

Swift::Float __swiftcall Float.mix(with:by:)(Swift::Float with, Swift::Double by)
{
  float v2;
  float v3;

  v3 = by;
  return (float)((float)(with - v2) * v3) + v2;
}

double CGFloat.quantized.getter(double a1)
{
  return round(a1 * 256.0) * 0.00390625;
}

double CGFloat.mix(with:by:)(double a1, double a2, double a3)
{
  return (a1 - a3) * a2 + a3;
}

uint64_t FloatingPoint.mappingNaN(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0)
    v7 = a1;
  else
    v7 = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v7, a2);
}

uint64_t BinaryFloatingPoint.ensuringNonzeroValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if ((dispatch thunk of FloatingPoint.isZero.getter() & 1) != 0)
    return dispatch thunk of static FloatingPoint.leastNonzeroMagnitude.getter();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

Swift::Void __swiftcall UInt32.unsafeIncrement()()
{
  _DWORD *v0;

  ++*v0;
}

uint64_t FixedWidthInteger.init<A>(clamping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a4;
  v16[1] = a3;
  v18 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v17 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v16 - v10;
  MEMORY[0x24BDAC7A8](v12);
  dispatch thunk of static FixedWidthInteger.min.getter();
  dispatch thunk of FloatingPoint.init<A>(_:)();
  dispatch thunk of static FixedWidthInteger.max.getter();
  dispatch thunk of FloatingPoint.init<A>(_:)();
  v13 = v18;
  Comparable.clamp(min:max:)((uint64_t)v11, (uint64_t)v8, a2);
  v14 = *(void (**)(char *, uint64_t))(v17 + 8);
  v14(v8, a2);
  v14(v11, a2);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, a2);
}

double Double.init(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = Duration.components.getter();
  return (double)v1 * 1.0e-18 + (double)v0;
}

uint64_t abs(_:)(uint64_t a1)
{
  uint64_t v2;

  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v2 = static Duration.zero.getter();
    return MEMORY[0x23B7C7B64](v2);
  }
  return a1;
}

uint64_t Pair.first.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Pair.first.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Pair.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Pair.second.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*Pair.second.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Pair.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for Pair(0, a3, a4, v9) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v10, a2, a4);
}

BOOL static Pair.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Pair.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t Pair.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7473726966 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int Pair.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t Pair.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x646E6F636573;
  else
    return 0x7473726966;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Pair<A, B>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Pair<A, B>.CodingKeys()
{
  char *v0;

  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Pair<A, B>.CodingKeys(uint64_t a1)
{
  char *v1;

  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Pair<A, B>.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Pair<A, B>.CodingKeys()
{
  char *v0;

  return Pair.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Pair<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Pair.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Pair<A, B>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Pair<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Pair<A, B>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Pair<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Pair<A, B>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t static Pair<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  type metadata accessor for Pair(0, a3, a4, v6);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Pair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Pair<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Pair<>.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int Pair<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Pair<A, B>()
{
  return Pair<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> Pair<A, B>()
{
  return Pair<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Pair<A, B>()
{
  Hasher.init(_seed:)();
  Pair<>.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Pair<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];
  char v17;
  char v18;

  v16[4] = a4;
  v16[2] = a6;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v16[0] = a2;
  v16[1] = v7;
  v9 = type metadata accessor for Pair.CodingKeys(255, v8, v7, a4);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Pair<A, B>.CodingKeys, v9);
  v10 = type metadata accessor for KeyedEncodingContainer();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = 0;
  v14 = v16[5];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v14)
  {
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Pair<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;

  v34 = a6;
  v35 = a5;
  v40 = a4;
  v33 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v38 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v41 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Pair.CodingKeys(255, v13, v14, v15);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Pair<A, B>.CodingKeys, v16);
  v44 = type metadata accessor for KeyedDecodingContainer();
  v36 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v18 = (char *)&v32 - v17;
  v42 = a2;
  v39 = a3;
  v20 = type metadata accessor for Pair(0, a2, a3, v19);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v32 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v43 = v18;
  v24 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = v36;
  v26 = v37;
  v45 = v21;
  v27 = v23;
  v28 = v38;
  v29 = v39;
  v47 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v27, v41, v42);
  v46 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v43, v44);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v27[*(int *)(v20 + 36)], v28, v29);
  v30 = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v34, v27, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v27, v20);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Pair<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Pair<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Pair<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Pair<>.encode(to:)(a1, a2, a3, *(_QWORD *)(a3 - 16), a5, *(_QWORD *)(a3 - 32));
}

uint64_t ArrayID.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a2 = a1;
  return result;
}

void ArrayID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static ArrayID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int ArrayID.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t UnsafeMutableBufferProjectionPointer.startIndex.getter()
{
  return 0;
}

uint64_t UnsafeMutableBufferProjectionPointer.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void UnsafeMutableBufferProjectionPointer.init()(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  *a2 = ~*(_BYTE *)(*(_QWORD *)(a1 - 8) + 80) | 0xFFFFFFFFFFFFFF00;
  a2[1] = 0;
}

uint64_t UnsafeMutableBufferProjectionPointer.init(start:count:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.init(_:_:)@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X2>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  void (*v7)(uint64_t *, _QWORD);
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *a2;
  if (!a1)
  {
    result = swift_release();
    v9 = ~*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE2B70] + v5 + 8) - 8) + 80) | 0xFFFFFFFFFFFFFF00;
    goto LABEL_5;
  }
  result = UnsafeBufferPointer.baseAddress.getter();
  if (result)
  {
    v7 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
    v9 = v8;
    v7(&v10, 0);
    result = swift_release();
LABEL_5:
    *a3 = v9;
    a3[1] = a1;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  if ((unsigned __int128)(v4 * (__int128)result) >> 64 == (v4 * result) >> 63)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 16))(a3, *v3 + v4 * result);
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.subscript.unsafeAddressor(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  if ((unsigned __int128)(v3 * (__int128)result) >> 64 == (v3 * result) >> 63)
    return *v2 + v3 * result;
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72);
  if ((unsigned __int128)(v4 * (__int128)a2) >> 64 == (v4 * a2) >> 63)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))(*v3 + v4 * a2, result);
  __break(1u);
  return result;
}

uint64_t (*UnsafeMutableBufferProjectionPointer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD, _QWORD)
{
  uint64_t v3;
  uint64_t (*result)(_QWORD, _QWORD);

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72);
  if ((unsigned __int128)(v3 * (__int128)a2) >> 64 == (v3 * a2) >> 63)
    return _ViewInputs.base.modify;
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return UnsafeMutableBufferProjectionPointer.subscript.setter(a1, *a2, a3);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance UnsafeMutableBufferProjectionPointer<A, B>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = UnsafeMutableBufferProjectionPointer.subscript.modify((uint64_t)v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  return specialized MutableCollection<>.subscript.setter();
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>, a3);
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = UnsafeMutableBufferProjectionPointer.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = UnsafeMutableBufferProjectionPointer.subscript.read((uint64_t)v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*UnsafeMutableBufferProjectionPointer.subscript.read(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD, _QWORD)
{
  uint64_t v3;
  uint64_t (*result)(_QWORD, _QWORD);

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72);
  if ((unsigned __int128)(v3 * (__int128)a2) >> 64 == (v3 * a2) >> 63)
    return _ViewInputs.base.modify;
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>);
  return MutableCollection<>.subscript.getter(a1, a2, v6, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance UnsafeMutableBufferProjectionPointer<A, B>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>, a1);
  return Collection._copyToContiguousArray()();
}

BOOL Numeric.isNaN.getter()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t Numeric.isFinite.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v18 - v5;
  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - v12;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x23B7C7558](&unk_235260F38, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x23B7C742C](v6, a1, v3);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, a1);
  v16(v13, a1);
  return v15 & 1;
}

uint64_t Sequence.first<A>(ofType:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;

  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v4);
  Sequence.first(where:)();
  v5 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v5 ^ 1u, 1, a1);
}

uint64_t closure #1 in Sequence.first<A>(ofType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v14 - v11, a1, AssociatedTypeWitness, v9);
  v12 = swift_dynamicCast();
  if ((_DWORD)v12)
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
  return v12;
}

uint64_t CountingIndexCollection.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t CountingIndexCollection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t CountingIndexCollection.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v11 - v4;
  dispatch thunk of Collection.startIndex.getter();
  v6 = dispatch thunk of Collection.isEmpty.getter();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
  result = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = a1 + *(int *)(result + 36);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = v6 & 1;
  return result;
}

uint64_t CountingIndexCollection.endIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v10 - v4;
  dispatch thunk of Collection.endIndex.getter();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
  result = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v9 = a1 + *(int *)(result + 36);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return result;
}

uint64_t CountingIndexCollection.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v26 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - v11;
  dispatch thunk of BidirectionalCollection.index(before:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v12, AssociatedTypeWitness);
  dispatch thunk of Collection.startIndex.getter();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v6, AssociatedTypeWitness);
  if ((v14 & 1) != 0)
  {
    v15(v12, AssociatedTypeWitness);
    v17 = 0;
LABEL_5:
    v22 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
    v23 = v27;
    v22(v27, v9, AssociatedTypeWitness);
    result = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
    v25 = v23 + *(int *)(result + 36);
    *(_QWORD *)v25 = v17;
    *(_BYTE *)(v25 + 8) = v14 & 1;
    return result;
  }
  result = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v19 = (uint64_t *)(a1 + *(int *)(result + 36));
  if ((v19[1] & 1) == 0)
  {
    v20 = *v19;
    result = ((uint64_t (*)(char *, uint64_t))v15)(v12, AssociatedTypeWitness);
    v21 = __OFSUB__(v20, 1);
    v17 = v20 - 1;
    if (!v21)
      goto LABEL_5;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CountingIndexCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - v12;
  dispatch thunk of Collection.index(after:)();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v13, AssociatedTypeWitness);
  dispatch thunk of Collection.endIndex.getter();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v7, AssociatedTypeWitness);
  if ((v15 & 1) != 0)
  {
    v16(v13, AssociatedTypeWitness);
    v18 = 0;
LABEL_5:
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v10, AssociatedTypeWitness);
    result = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
    v24 = a2 + *(int *)(result + 36);
    *(_QWORD *)v24 = v18;
    *(_BYTE *)(v24 + 8) = v15 & 1;
    return result;
  }
  result = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  v20 = (uint64_t *)(a1 + *(int *)(result + 36));
  if ((v20[1] & 1) == 0)
  {
    v21 = *v20;
    result = ((uint64_t (*)(char *, uint64_t))v16)(v13, AssociatedTypeWitness);
    v22 = __OFADD__(v21, 1);
    v18 = v21 + 1;
    if (!v22)
      goto LABEL_5;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CountingIndexCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v42 = a3;
  v43 = a5;
  v44 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v41 = (char *)&v37 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - v18;
  v37 = a2;
  v38 = a1;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v22 = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v43, 1, 1, v22);
  }
  v24 = v43;
  v25 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v25(v19, v10, AssociatedTypeWitness);
  v26 = v41;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v41, v19, AssociatedTypeWitness);
  dispatch thunk of Collection.endIndex.getter();
  v27 = swift_getAssociatedConformanceWitness();
  v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29 = *(void (**)(char *, uint64_t))(v11 + 8);
  v29(v14, AssociatedTypeWitness);
  if ((v28 & 1) == 0)
  {
    result = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, v27, v30);
    v32 = (uint64_t *)(v38 + *(int *)(result + 36));
    if ((v32[1] & 1) == 0)
    {
      v33 = *v32;
      result = ((uint64_t (*)(char *, uint64_t))v29)(v19, AssociatedTypeWitness);
      v31 = v33 + v37;
      if (!__OFADD__(v33, v37))
        goto LABEL_7;
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v29(v19, AssociatedTypeWitness);
  v31 = 0;
LABEL_7:
  v25(v24, v26, AssociatedTypeWitness);
  v35 = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, v27, v34);
  v36 = &v24[*(int *)(v35 + 36)];
  *(_QWORD *)v36 = v31;
  v36[8] = v28 & 1;
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v24, 0, 1, v35);
}

uint64_t CountingIndexCollection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v2)(uint64_t *, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v2 = (uint64_t (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v4, AssociatedTypeWitness);
  return v2(&v7, 0);
}

uint64_t CountingIndexCollection.withContiguousStorageIfAvailable<A>(_:)()
{
  return dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, double))CountingIndexCollection.index(before:));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CountingIndexCollection<A>(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)CountingIndexCollection.subscript.read(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*CountingIndexCollection.subscript.read(uint64_t *a1))()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  void *v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v3;
  v4 = malloc(*(_QWORD *)(v3 + 64));
  a1[2] = (uint64_t)v4;
  CountingIndexCollection.subscript.getter((uint64_t)v4);
  return CountingIndexCollection.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance CountingIndexCollection<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for CountingIndex(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CountingIndexCollection<A>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CountingIndexCollection<A>, a3);
  JUMPOUT(0x23B7C5C14);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, double))CountingIndexCollection.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, double))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v16 - v13;
  a4(a1, a2, v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v14, v10);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance CountingIndexCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for CountingIndex(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - v11;
  v13 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v13 + 16))(a2, v2, a1, v10);
  CountingIndexCollection.startIndex.getter((uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, a1);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CountingIndexCollection<A>, a1);
  v14 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2 + *(int *)(v14 + 36), v12, v8);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CountingIndexCollection<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CountingIndexCollection<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CountingIndexCollection<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CountingIndexCollection<A>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance CountingIndexCollection<A>()
{
  return CountingIndexCollection.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t CountingIndex.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CountingIndex.offset.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t static CountingIndex.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  char v13;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  v9 = *(int *)(type metadata accessor for CountingIndex(0, a3, a4, v8) + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = *(_BYTE *)(a1 + v9 + 8);
  v12 = (_QWORD *)(a2 + v9);
  v13 = *(_BYTE *)(a2 + v9 + 8);
  if ((v11 & 1) != 0)
  {
    if ((v13 & 1) == 0)
      return 0;
  }
  else
  {
    if (*v10 != *v12)
      v13 = 1;
    if ((v13 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CountingIndex<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CountingIndex.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static CountingIndex.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, double);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  _QWORD v25[2];

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v25 - v13;
  v15 = *(void (**)(char *, uint64_t, double))(v8 + 16);
  v15((char *)v25 - v13, a1, v12);
  v17 = type metadata accessor for CountingIndex(0, a3, a4, v16);
  v18 = a1 + *(int *)(v17 + 36);
  if (*(_BYTE *)(v18 + 8))
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v19 = *(_QWORD *)v18;
  v25[1] = v19;
  ((void (*)(char *, uint64_t, uint64_t))v15)(v10, a2, a3);
  v20 = a2 + *(int *)(v17 + 36);
  if (*(_BYTE *)(v20 + 8))
    v21 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v21 = *(_QWORD *)v20;
  v25[0] = v21;
  v22 = < infix<A, B>(_:_:)();
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v10, a3);
  v23(v14, a3);
  return v22 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance CountingIndex<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CountingIndex.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t CountingIndex.description.getter(uint64_t a1)
{
  uint64_t v1;
  Swift::String v3;
  Swift::String v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;

  _StringGuts.grow(_:)(23);
  v3._countAndFlagsBits = 0x203A6573616228;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4._countAndFlagsBits = 0x657366666F207C20;
  v4._object = (void *)0xEB00000000203A74;
  String.append(_:)(v4);
  if ((*(_BYTE *)(v1 + *(int *)(a1 + 36) + 8) & 1) != 0)
  {
    v5 = 0xE300000000000000;
    v6 = 7104878;
  }
  else
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v6 = BinaryInteger.description.getter();
    v5 = v7;
  }
  v8 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t == infix<A, B, C, D>(_:_:)(void (*a1)(char *, char *, uint64_t), char *a2, char *a3, char *a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  void (*v67)(void);
  void (*v68)(char *, char *, uint64_t);
  void (*v69)(char *, char *, uint64_t);
  void (*v70)(char *, char *);
  void (*v71)(void);
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;

  v81 = a7;
  v82 = a8;
  v79 = a5;
  v80 = a6;
  v76 = a3;
  v77 = a4;
  v74 = a1;
  v75 = a2;
  v86 = a13;
  v84 = a15;
  v85 = a14;
  v88 = a12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = swift_getTupleTypeMetadata2();
  v91 = swift_getTupleTypeMetadata2();
  v83 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v78 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v89 = (char *)&v60 - v19;
  v65 = v16;
  MEMORY[0x24BDAC7A8](v20);
  v90 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v60 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v73 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v60 - v29;
  v31 = *(int *)(TupleTypeMetadata2 + 48);
  v62 = TupleTypeMetadata2;
  v32 = (char *)&v60 + v31 - v29;
  v87 = a9;
  v33 = *(_QWORD *)(a9 - 8);
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  ((void (*)(char *, void (*)(char *, char *, uint64_t), uint64_t, double))v72)((char *)&v60 - v29, v74, a9, v28);
  v34 = *(_QWORD *)(a10 - 8);
  v74 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  v35 = v32;
  v61 = a10;
  v74(v32, v75, a10);
  v64 = &v24[*(int *)(v16 + 48)];
  v36 = v64;
  v63 = a11;
  v37 = *(_QWORD *)(a11 - 8);
  v71 = *(void (**)(void))(v37 + 16);
  ((void (*)(char *, char *, uint64_t))v71)(v24, v76, a11);
  v38 = *(_QWORD *)(v88 - 8);
  v70 = *(void (**)(char *, char *))(v38 + 16);
  v70(v36, v77);
  v39 = *(int *)(TupleTypeMetadata2 + 48);
  v40 = v89;
  v41 = &v89[v39];
  v77 = &v89[v39];
  v69 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v42 = v87;
  v69(v89, v30, v87);
  v68 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v68(v41, v35, a10);
  v76 = &v40[*(int *)(v91 + 48)];
  v43 = v65;
  v75 = &v76[*(int *)(v65 + 48)];
  v44 = v75;
  v67 = *(void (**)(void))(v37 + 32);
  v45 = v63;
  v67();
  v66 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  v46 = v88;
  v66(v44, v64, v88);
  v47 = v62;
  v48 = v73;
  v49 = &v73[*(int *)(v62 + 48)];
  v50 = v42;
  v72(v73, v79, v42);
  v51 = v61;
  v74(v49, v80, v61);
  v52 = &v90[*(int *)(v43 + 48)];
  v71();
  ((void (*)(char *, uint64_t, uint64_t))v70)(v52, v82, v46);
  v53 = v78;
  v54 = &v78[*(int *)(v47 + 48)];
  v69(v78, v48, v50);
  v68(v54, v49, v51);
  v55 = v91;
  v56 = &v53[*(int *)(v91 + 48) + *(int *)(v43 + 48)];
  ((void (*)(char *, char *, uint64_t))v67)(&v53[*(int *)(v91 + 48)], v90, v45);
  v66(v56, v52, v46);
  v57 = v89;
  LOBYTE(v49) = == infix<A, B, C, D>(_:_:)();
  v58 = *(void (**)(char *, uint64_t))(v83 + 8);
  v58(v53, v55);
  v58(v57, v55);
  return v49 & 1;
}

uint64_t Optional.init(if:then:)@<X0>(char a1@<W0>, void (*a2)(_QWORD *__return_ptr)@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v6;

  if ((a1 & 1) != 0)
  {
    a2(a4);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v6, 1, a3);
}

uint64_t IndirectOptional.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = swift_allocBox();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v7, a1, a2);
  *a3 = v6;
  return result;
}

void IndirectOptional.init(nilLiteral:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t key path setter for IndirectOptional.wrappedValue : <A>IndirectOptional<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = type metadata accessor for Optional();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v15 - v8, a1, v7);
  v13 = type metadata accessor for IndirectOptional(0, v5, v11, v12);
  return IndirectOptional.wrappedValue.setter((uint64_t)v9, v13);
}

void (*IndirectOptional.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = type metadata accessor for Optional();
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  IndirectOptional.wrappedValue.getter(a2, (uint64_t)v9);
  return IndirectOptional.wrappedValue.modify;
}

void IndirectOptional.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    IndirectOptional.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    IndirectOptional.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> IndirectOptional<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IndirectOptional<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

void IndirectOptional<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v2)
  {
    v7 = swift_projectBox();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
    Hasher._combine(_:)(1uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int IndirectOptional<A>.hashValue.getter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v4[10];

  v4[9] = *v1;
  Hasher.init(_seed:)();
  IndirectOptional<A>.hash(into:)((uint64_t)v4, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> IndirectOptional<A>(uint64_t a1)
{
  return IndirectOptional<A>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <A> IndirectOptional<A>(uint64_t a1, uint64_t a2)
{
  IndirectOptional<A>.hash(into:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> IndirectOptional<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  IndirectOptional<A>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t Cache3.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t TupleTypeMetadata3;
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v4 = a1 + *(int *)(TupleTypeMetadata3 + 48);
  v5 = a1 + *(int *)(TupleTypeMetadata3 + 64);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56);
  v7(a1, 1, 1, TupleTypeMetadata2);
  v7(v4, 1, 1, TupleTypeMetadata2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, TupleTypeMetadata2);
}

uint64_t Cache3.find(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata3;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, double);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  char v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  unsigned int v51;
  char *v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t TupleTypeMetadata2;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v70 = a2;
  v71 = a1;
  v67 = a3;
  v4 = *(_QWORD *)(a2 + 24);
  v66 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v59 = (char *)&v58 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v62 = (char *)&v58 - v11;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v60 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v58 - v16;
  v18 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  v73 = v18;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v64 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(int *)(v22 + 48);
  v24 = &v17[v23];
  v25 = *(int *)(v22 + 64);
  v26 = &v17[v25];
  v27 = v3;
  v28 = v3 + v23;
  v29 = v27 + v25;
  v30 = *(void (**)(char *, double))(v6 + 16);
  v30(v17, v20);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v24, v28, v5);
  v31 = v6;
  v69 = (void (*)(char *, char *, uint64_t))v30;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v26, v29, v5);
  v32 = &v14[*(int *)(TupleTypeMetadata3 + 48)];
  v61 = TupleTypeMetadata3;
  v33 = *(int *)(TupleTypeMetadata3 + 64);
  v34 = TupleTypeMetadata2;
  v35 = &v14[v33];
  v63 = v31;
  v36 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v36(v14, v17, v5);
  v37 = v24;
  v38 = v66;
  v36(v32, v37, v5);
  v68 = v35;
  v36(v35, v26, v5);
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48);
  if (v39(v14, 1, v34) != 1)
  {
    v40 = v62;
    v69(v62, v14, v5);
    v41 = &v40[*(int *)(v34 + 48)];
    v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v40, v38);
    if ((v42 & 1) != 0)
    {
      v44 = v72;
      v43 = v73;
LABEL_8:
      v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v49 = v64;
      v48(v64, v41, v44);
LABEL_13:
      v55 = *(void (**)(char *, uint64_t))(v63 + 8);
      v55(v68, v5);
      v55(v32, v5);
      v55(v14, v5);
      v56 = v67;
      v48(v67, v49, v44);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v56, 0, 1, v44);
    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v72);
  }
  v45 = v39(v32, 1, v34);
  v44 = v72;
  if (v45 != 1)
  {
    v46 = v59;
    v69(v59, v32, v5);
    v41 = &v46[*(int *)(v34 + 48)];
    v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v46, v38);
    if ((v47 & 1) != 0)
    {
      v43 = v73;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v44);
  }
  v50 = v68;
  v51 = v39(v68, 1, v34);
  v43 = v73;
  if (v51 != 1)
  {
    v52 = v58;
    v69(v58, v50, v5);
    v53 = &v52[*(int *)(v34 + 48)];
    v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v52, v38);
    if ((v54 & 1) != 0)
    {
      v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v49 = v64;
      v48(v64, v53, v44);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v53, v44);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v67, 1, 1, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v14, v61);
}

uint64_t Cache3.put(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v11 = v3 + *(int *)(TupleTypeMetadata3 + 48);
  v12 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v3 + *(int *)(TupleTypeMetadata3 + 64), v11, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v11, v3, v9);
  v13 = v3 + *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v3, a1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v13, a2, v6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v3, 0, 1, TupleTypeMetadata2);
}

uint64_t Cache3.get(_:makeValue:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata3;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, double);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t TupleTypeMetadata2;
  uint64_t v92;
  uint64_t v93;

  v6 = v5;
  v79 = a3;
  v80 = a2;
  v93 = a1;
  v86 = a5;
  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(a4 + 24);
  v88 = a4;
  v92 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v69 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v70 = (char *)&v69 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v73 = (char *)&v69 - v15;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v71 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v69 - v20;
  v89 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v82 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = v8;
  v78 = type metadata accessor for Optional();
  v76 = *(_QWORD *)(v78 - 8);
  v24 = MEMORY[0x24BDAC7A8](v78);
  v84 = (char *)&v69 - v25;
  v26 = *(int *)(TupleTypeMetadata3 + 48);
  v27 = &v21[v26];
  v28 = *(int *)(TupleTypeMetadata3 + 64);
  v29 = &v21[v28];
  v30 = v6;
  v31 = v6 + v26;
  v32 = v30 + v28;
  v33 = *(void (**)(char *, double))(v10 + 16);
  v81 = v30;
  v33(v21, v24);
  v77 = v31;
  ((void (*)(char *, uint64_t, uint64_t))v33)(v27, v31, v9);
  v75 = v32;
  v34 = v32;
  v35 = v18;
  v87 = (void (*)(char *, char *, uint64_t))v33;
  ((void (*)(char *, uint64_t, uint64_t))v33)(v29, v34, v9);
  v36 = TupleTypeMetadata2;
  v37 = &v18[*(int *)(TupleTypeMetadata3 + 48)];
  v72 = TupleTypeMetadata3;
  v38 = &v18[*(int *)(TupleTypeMetadata3 + 64)];
  v85 = v10;
  v39 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v39(v35, v21, v9);
  v39(v37, v27, v9);
  v40 = v38;
  v39(v38, v29, v9);
  v74 = *(_QWORD *)(v36 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  v42 = v41(v35, 1, v36);
  v83 = v37;
  if (v42 != 1)
  {
    v43 = v73;
    v87(v73, v35, v9);
    v44 = &v43[*(int *)(v36 + 48)];
    v45 = v92;
    v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v43, v45);
    if ((v46 & 1) != 0)
    {
      v48 = v89;
      v47 = v90;
      v49 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
      v50 = v82;
      v49(v82, v44, v90);
      v36 = TupleTypeMetadata2;
LABEL_12:
      v60 = v85;
      v61 = *(void (**)(char *, uint64_t))(v85 + 8);
      v61(v40, v9);
      v61(v83, v9);
      v61(v35, v9);
      v62 = v84;
      v49(v84, v50, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v62, 0, 1, v47);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v89 + 8))(v44, v90);
    v36 = TupleTypeMetadata2;
  }
  v51 = v41(v37, 1, v36);
  v48 = v89;
  v47 = v90;
  if (v51 != 1)
  {
    v73 = v40;
    v52 = v70;
    v87(v70, v83, v9);
    v53 = &v52[*(int *)(v36 + 48)];
    v54 = v92;
    v55 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v52, v54);
    if ((v55 & 1) != 0)
    {
      v49 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v50 = v82;
      v49(v82, v53, v47);
      v40 = v73;
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v53, v47);
    v40 = v73;
  }
  if (v41(v40, 1, v36) != 1)
  {
    v56 = v69;
    v87(v69, v40, v9);
    v57 = &v56[*(int *)(v36 + 48)];
    v58 = v92;
    v59 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v56, v58);
    if ((v59 & 1) != 0)
    {
      v49 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v50 = v82;
      v49(v82, v57, v47);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v57, v47);
  }
  v62 = v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v84, 1, 1, v47);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v35, v72);
  v60 = v85;
LABEL_15:
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v62, 1, v47) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v86, v62, v47);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v62, v78);
  v64 = v86;
  v80(v63);
  v65 = v77;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 24))(v75, v77, v9);
  v66 = v81;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40))(v65, v81, v9);
  v67 = v66 + *(int *)(v36 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v66, v93);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v67, v64, v47);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v66, 0, 1, v36);
}

unint64_t specialized Dictionary.optimisticFilter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt *v17;
  Swift::UInt v18;
  Swift::UInt v19;
  uint64_t DynamicType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  Swift::UInt v43;
  Swift::UInt v44;
  __int128 *v45;
  _OWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  Swift::UInt *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char v61;
  unint64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD v69[5];
  _QWORD v70[2];
  _QWORD v71[5];
  __int128 v72;
  _BYTE v73[40];
  __int128 v74;
  _OWORD v75[2];
  uint64_t v76;
  Swift::UInt v77;
  Swift::UInt v78;
  __int128 v79[3];

  if (*(_QWORD *)(a1 + 16) < 0x41uLL)
  {
    v65 = a1 + 64;
    v6 = 1 << *(_BYTE *)(a1 + 32);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(a1 + 64);
    v63 = (unint64_t)(v6 + 63) >> 6;
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = 0;
    v66 = 0;
    v60 = 1;
    v61 = 1;
    while (1)
    {
      if (v8)
      {
        v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_83:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        if (v13 >= v63)
          goto LABEL_30;
        v14 = *(_QWORD *)(v65 + 8 * v13);
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v63)
            goto LABEL_30;
          v14 = *(_QWORD *)(v65 + 8 * v10);
          if (!v14)
          {
            v10 = v13 + 2;
            if (v13 + 2 >= v63)
              goto LABEL_30;
            v14 = *(_QWORD *)(v65 + 8 * v10);
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v63)
              {
LABEL_30:
                v5 = a1;
                swift_release();
                if ((v60 & 1) != 0)
                  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
                if ((v61 & 1) != 0)
                {
                  swift_bridgeObjectRetain();
                  return v5;
                }
                v27 = 1 << *(_BYTE *)(a1 + 32);
                v28 = -1;
                if (v27 < 64)
                  v28 = ~(-1 << v27);
                v29 = v28 & *(_QWORD *)(a1 + 64);
                v30 = v75;
                v31 = v79;
                v62 = ((unint64_t)(v27 + 63) >> 6) - 1;
                v64 = (unint64_t)(v27 + 63) >> 6;
                swift_bridgeObjectRetain();
                v32 = 0;
                v67 = 0;
                v4 = (_QWORD *)MEMORY[0x24BEE4B00];
                while (2)
                {
                  if (v29)
                  {
                    v34 = __clz(__rbit64(v29));
                    v29 &= v29 - 1;
                    v35 = v34 | (v67 << 6);
                    goto LABEL_43;
                  }
                  v40 = v67 + 1;
                  if (__OFADD__(v67, 1))
                    goto LABEL_78;
                  if (v40 < v64)
                  {
                    v41 = *(_QWORD *)(v65 + 8 * v40);
                    if (v41)
                    {
LABEL_47:
                      v29 = (v41 - 1) & v41;
                      v35 = __clz(__rbit64(v41)) + (v40 << 6);
                      v67 = v40;
LABEL_43:
                      v36 = *(_QWORD *)(v5 + 56);
                      v37 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v35);
                      v39 = *v37;
                      v38 = v37[1];
                      *(_QWORD *)&v74 = v39;
                      *((_QWORD *)&v74 + 1) = v38;
                      outlined init with copy of AnyTrackedValue(v36 + 40 * v35, (uint64_t)v30);
LABEL_62:
                      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v74, (uint64_t)&v77);
                      v43 = v77;
                      if (!v77)
                      {
                        swift_release();
                        return (unint64_t)v4;
                      }
                      v44 = v78;
                      outlined init with take of ScrollStateRequest(v31, (uint64_t)&v74);
                      if (v32 == 0x8000000000000000)
                        goto LABEL_82;
                      if (v32 < 0x40 && ((v66 >> v32) & 1) != 0)
                      {
                        v45 = v31;
                        v46 = v30;
                        outlined init with copy of AnyTrackedValue((uint64_t)&v74, (uint64_t)&v72);
                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v70[0] = v4;
                        v49 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
                        v50 = v4[2];
                        v51 = (v48 & 1) == 0;
                        v52 = v50 + v51;
                        if (__OFADD__(v50, v51))
                          goto LABEL_79;
                        v53 = v48;
                        if (v4[3] >= v52)
                        {
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, isUniquelyReferenced_nonNull_native);
                          v54 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
                          if ((v53 & 1) != (v55 & 1))
                            goto LABEL_83;
                          v49 = v54;
                        }
                        v4 = (_QWORD *)v70[0];
                        if ((v53 & 1) != 0)
                        {
                          v33 = *(_QWORD *)(v70[0] + 56) + 40 * v49;
                          __swift_destroy_boxed_opaque_existential_1(v33);
                          outlined init with take of ScrollStateRequest(&v72, v33);
                        }
                        else
                        {
                          *(_QWORD *)(v70[0] + 8 * (v49 >> 6) + 64) |= 1 << v49;
                          v56 = (Swift::UInt *)(v4[6] + 16 * v49);
                          *v56 = v43;
                          v56[1] = v44;
                          outlined init with take of ScrollStateRequest(&v72, v4[7] + 40 * v49);
                          v57 = v4[2];
                          v58 = __OFADD__(v57, 1);
                          v59 = v57 + 1;
                          if (v58)
                            goto LABEL_80;
                          v4[2] = v59;
                        }
                        swift_bridgeObjectRelease();
                        v30 = v46;
                        v31 = v45;
                        v5 = a1;
                      }
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
                      ++v32;
                      continue;
                    }
                    v42 = v67 + 2;
                    ++v67;
                    if (v40 + 1 < v64)
                    {
                      v41 = *(_QWORD *)(v65 + 8 * v42);
                      if (v41)
                      {
LABEL_50:
                        v40 = v42;
                        goto LABEL_47;
                      }
                      v67 = v40 + 1;
                      if (v40 + 2 < v64)
                      {
                        v41 = *(_QWORD *)(v65 + 8 * (v40 + 2));
                        if (v41)
                        {
                          v40 += 2;
                          goto LABEL_47;
                        }
                        v42 = v40 + 3;
                        v67 = v40 + 2;
                        if (v40 + 3 < v64)
                        {
                          v41 = *(_QWORD *)(v65 + 8 * v42);
                          if (!v41)
                          {
                            while (1)
                            {
                              v40 = v42 + 1;
                              if (__OFADD__(v42, 1))
                                goto LABEL_81;
                              if (v40 >= v64)
                              {
                                v67 = v62;
                                goto LABEL_61;
                              }
                              v41 = *(_QWORD *)(v65 + 8 * v40);
                              ++v42;
                              if (v41)
                                goto LABEL_47;
                            }
                          }
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                  break;
                }
LABEL_61:
                v29 = 0;
                v76 = 0;
                memset(v75, 0, sizeof(v75));
                v74 = 0u;
                goto LABEL_62;
              }
              v14 = *(_QWORD *)(v65 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v10 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_77;
                  if (v10 >= v63)
                    goto LABEL_30;
                  v14 = *(_QWORD *)(v65 + 8 * v10);
                  ++v15;
                  if (v14)
                    goto LABEL_24;
                }
              }
              v10 = v15;
            }
          }
        }
LABEL_24:
        v8 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v16 = *(_QWORD *)(a1 + 56);
      v17 = (Swift::UInt *)(*(_QWORD *)(a1 + 48) + 16 * v12);
      v19 = v17[1];
      v77 = *v17;
      v18 = v77;
      v78 = v19;
      outlined init with copy of AnyTrackedValue(v16 + 40 * v12, (uint64_t)v79);
      *(_QWORD *)&v74 = v18;
      *((_QWORD *)&v74 + 1) = v19;
      outlined init with take of ScrollStateRequest(v79, (uint64_t)v75);
      *(_QWORD *)&v72 = v18;
      *((_QWORD *)&v72 + 1) = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v75, (uint64_t)v73);
      v70[0] = v18;
      v70[1] = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v71);
      __swift_project_boxed_opaque_existential_1(v71, v71[3]);
      DynamicType = swift_getDynamicType();
      v21 = a2;
      outlined init with copy of AnyTrackedValue(a2, (uint64_t)v69);
      __swift_project_boxed_opaque_existential_1(v69, v69[3]);
      v22 = swift_getDynamicType();
      v23 = v69[4];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
      outlined destroy of TypesettingConfiguration((uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
      outlined destroy of TypesettingConfiguration((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      if (DynamicType == v24)
      {
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_82;
        v60 = 0;
        v25 = 1 << v9;
        if (v9 >= 0x40)
          v25 = 0;
        v66 |= v25;
      }
      else
      {
        v61 = 0;
      }
      a2 = v21;
      ++v9;
    }
  }
  v3 = swift_bridgeObjectRetain();
  v4 = (_QWORD *)specialized _NativeDictionary.filter(_:)(v3, a2);
  swift_bridgeObjectRelease();
  return (unint64_t)v4;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt *v17;
  Swift::UInt v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *);
  uint64_t v24;
  unint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  __int128 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  __int128 *v44;
  _BYTE *v45;
  char isUniquelyReferenced_nonNull_native;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  Swift::UInt *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  char v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[2];
  _BYTE v69[40];
  __int128 v70;
  _BYTE v71[40];
  __int128 v72;
  _BYTE v73[32];
  uint64_t v74;
  Swift::UInt v75;
  Swift::UInt v76;
  __int128 v77[3];

  v3 = a1;
  if (*(_QWORD *)(a1 + 16) < 0x41uLL)
  {
    v64 = a1 + 64;
    v6 = 1 << *(_BYTE *)(a1 + 32);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(a1 + 64);
    v62 = (unint64_t)(v6 + 63) >> 6;
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = 0;
    v66 = v3;
    v67 = 0;
    v59 = 1;
    v60 = 1;
    while (1)
    {
      if (v8)
      {
        v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_83:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        if (v13 >= v62)
          goto LABEL_30;
        v14 = *(_QWORD *)(v64 + 8 * v13);
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v62)
            goto LABEL_30;
          v14 = *(_QWORD *)(v64 + 8 * v10);
          if (!v14)
          {
            v10 = v13 + 2;
            if (v13 + 2 >= v62)
              goto LABEL_30;
            v14 = *(_QWORD *)(v64 + 8 * v10);
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v62)
              {
LABEL_30:
                swift_release();
                if ((v60 & 1) != 0)
                  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
                if ((v59 & 1) != 0)
                {
                  swift_bridgeObjectRetain();
                  return v3;
                }
                v26 = 1 << *(_BYTE *)(v3 + 32);
                v27 = -1;
                if (v26 < 64)
                  v27 = ~(-1 << v26);
                v28 = v27 & *(_QWORD *)(v3 + 64);
                v29 = v73;
                v30 = v77;
                v61 = ((unint64_t)(v26 + 63) >> 6) - 1;
                v63 = (unint64_t)(v26 + 63) >> 6;
                swift_bridgeObjectRetain();
                v31 = 0;
                v65 = 0;
                v5 = (_QWORD *)MEMORY[0x24BEE4B00];
                while (2)
                {
                  if (v28)
                  {
                    v33 = __clz(__rbit64(v28));
                    v28 &= v28 - 1;
                    v34 = v33 | (v65 << 6);
                    goto LABEL_43;
                  }
                  v39 = v65 + 1;
                  if (__OFADD__(v65, 1))
                    goto LABEL_78;
                  if (v39 < v63)
                  {
                    v40 = *(_QWORD *)(v64 + 8 * v39);
                    if (v40)
                    {
LABEL_47:
                      v28 = (v40 - 1) & v40;
                      v34 = __clz(__rbit64(v40)) + (v39 << 6);
                      v65 = v39;
LABEL_43:
                      v35 = *(_QWORD *)(v3 + 56);
                      v36 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v34);
                      v38 = *v36;
                      v37 = v36[1];
                      *(_QWORD *)&v72 = v38;
                      *((_QWORD *)&v72 + 1) = v37;
                      outlined init with copy of AnyTrackedValue(v35 + 40 * v34, (uint64_t)v29);
LABEL_62:
                      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v72, (uint64_t)&v75);
                      v42 = v75;
                      if (!v75)
                      {
                        swift_release();
                        return (unint64_t)v5;
                      }
                      v43 = v76;
                      outlined init with take of ScrollStateRequest(v30, (uint64_t)&v72);
                      if (v31 == 0x8000000000000000)
                        goto LABEL_82;
                      if (v31 < 0x40 && ((v67 >> v31) & 1) != 0)
                      {
                        v44 = v30;
                        v45 = v29;
                        outlined init with copy of AnyTrackedValue((uint64_t)&v72, (uint64_t)&v70);
                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v68[0] = v5;
                        v48 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
                        v49 = v5[2];
                        v50 = (v47 & 1) == 0;
                        v51 = v49 + v50;
                        if (__OFADD__(v49, v50))
                          goto LABEL_79;
                        v52 = v47;
                        if (v5[3] >= v51)
                        {
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
                          v53 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
                          if ((v52 & 1) != (v54 & 1))
                            goto LABEL_83;
                          v48 = v53;
                        }
                        v3 = v66;
                        v5 = (_QWORD *)v68[0];
                        if ((v52 & 1) != 0)
                        {
                          v32 = *(_QWORD *)(v68[0] + 56) + 40 * v48;
                          __swift_destroy_boxed_opaque_existential_1(v32);
                          outlined init with take of ScrollStateRequest(&v70, v32);
                        }
                        else
                        {
                          *(_QWORD *)(v68[0] + 8 * (v48 >> 6) + 64) |= 1 << v48;
                          v55 = (Swift::UInt *)(v5[6] + 16 * v48);
                          *v55 = v42;
                          v55[1] = v43;
                          outlined init with take of ScrollStateRequest(&v70, v5[7] + 40 * v48);
                          v56 = v5[2];
                          v57 = __OFADD__(v56, 1);
                          v58 = v56 + 1;
                          if (v57)
                            goto LABEL_80;
                          v5[2] = v58;
                        }
                        swift_bridgeObjectRelease();
                        v29 = v45;
                        v30 = v44;
                      }
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
                      ++v31;
                      continue;
                    }
                    v41 = v65 + 2;
                    ++v65;
                    if (v39 + 1 < v63)
                    {
                      v40 = *(_QWORD *)(v64 + 8 * v41);
                      if (v40)
                      {
LABEL_50:
                        v39 = v41;
                        goto LABEL_47;
                      }
                      v65 = v39 + 1;
                      if (v39 + 2 < v63)
                      {
                        v40 = *(_QWORD *)(v64 + 8 * (v39 + 2));
                        if (v40)
                        {
                          v39 += 2;
                          goto LABEL_47;
                        }
                        v41 = v39 + 3;
                        v65 = v39 + 2;
                        if (v39 + 3 < v63)
                        {
                          v40 = *(_QWORD *)(v64 + 8 * v41);
                          if (!v40)
                          {
                            while (1)
                            {
                              v39 = v41 + 1;
                              if (__OFADD__(v41, 1))
                                goto LABEL_81;
                              if (v39 >= v63)
                              {
                                v65 = v61;
                                goto LABEL_61;
                              }
                              v40 = *(_QWORD *)(v64 + 8 * v39);
                              ++v41;
                              if (v40)
                                goto LABEL_47;
                            }
                          }
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                  break;
                }
LABEL_61:
                v28 = 0;
                v74 = 0;
                memset(v73, 0, sizeof(v73));
                v72 = 0u;
                goto LABEL_62;
              }
              v14 = *(_QWORD *)(v64 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v10 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_77;
                  if (v10 >= v62)
                    goto LABEL_30;
                  v14 = *(_QWORD *)(v64 + 8 * v10);
                  ++v15;
                  if (v14)
                    goto LABEL_24;
                }
              }
              v10 = v15;
            }
          }
        }
LABEL_24:
        v8 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v16 = *(_QWORD *)(v3 + 56);
      v17 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * v12);
      v19 = v17[1];
      v75 = *v17;
      v18 = v75;
      v76 = v19;
      outlined init with copy of AnyTrackedValue(v16 + 40 * v12, (uint64_t)v77);
      *(_QWORD *)&v72 = v18;
      *((_QWORD *)&v72 + 1) = v19;
      outlined init with take of ScrollStateRequest(v77, (uint64_t)v73);
      *(_QWORD *)&v70 = v18;
      *((_QWORD *)&v70 + 1) = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v71);
      v68[0] = v18;
      v68[1] = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v71, (uint64_t)v69);
      type metadata accessor for EventFilter<TappableEvent>(0, v20, v21, v22);
      v23 = *(uint64_t (**)(_BYTE *))AGGraphGetValue();
      swift_retain();
      LOBYTE(v23) = v23(v69);
      swift_release();
      outlined destroy of TypesettingConfiguration((uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
      outlined destroy of TypesettingConfiguration((uint64_t)&v72, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
      if ((v23 & 1) != 0)
      {
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_82;
        v60 = 0;
        v24 = 1 << v9;
        if (v9 >= 0x40)
          v24 = 0;
        v67 |= v24;
      }
      else
      {
        v59 = 0;
      }
      v3 = v66;
      ++v9;
    }
  }
  v4 = swift_bridgeObjectRetain();
  v5 = (_QWORD *)specialized _NativeDictionary.filter(_:)(v4, a2);
  swift_bridgeObjectRelease();
  return (unint64_t)v5;
}

uint64_t Dictionary.optimisticFilter(_:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  _QWORD v93[2];
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  int v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  int64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v123;
  uint64_t v124;

  v12 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v12);
  v96 = (char *)v93 - v13;
  v119 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v99 = (char *)v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v97 = (char *)v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v107 = (char *)v93 - v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v118 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v115 = (char *)v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v114 = (char *)v93 - v24;
  v121 = v25;
  v102 = type metadata accessor for Optional();
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  v27 = (char *)v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v100 = (char *)v93 - v29;
  v31 = MEMORY[0x24BDAC7A8](v30);
  v116 = (char *)v93 - v32;
  if (MEMORY[0x23B7C59C8](a3, a4, a5, a6, v31) > 64)
  {
    swift_bridgeObjectRetain();
    return Dictionary.filter(_:)();
  }
  v120 = a5;
  v95 = a6;
  v93[0] = a3 & 0xC000000000000001;
  v104 = v27;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v34 = __CocoaDictionary.makeIterator()();
    v108 = 0;
    v35 = 0;
    v36 = 0;
    v37 = v34 | 0x8000000000000000;
  }
  else
  {
    v38 = -1 << *(_BYTE *)(a3 + 32);
    v35 = ~v38;
    v39 = *(_QWORD *)(a3 + 64);
    v108 = a3 + 64;
    v40 = -v38;
    if (v40 < 64)
      v41 = ~(-1 << v40);
    else
      v41 = -1;
    v36 = v41 & v39;
    v37 = a3;
  }
  v42 = v116;
  v103 = v37 & 0x7FFFFFFFFFFFFFFFLL;
  v93[1] = v35;
  v98 = (unint64_t)(v35 + 64) >> 6;
  v94 = a3;
  swift_bridgeObjectRetain();
  v109 = a4;
  v110 = 0;
  v117 = 0;
  v105 = 1;
  v106 = 1;
  v112 = a1;
  v113 = a2;
  v111 = v37;
  v43 = v118;
  v123 = 0;
  if ((v37 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_10:
  if (!__CocoaDictionary.Iterator.next()())
  {
LABEL_34:
    v62 = v121;
    v122 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56);
    v122(v42, 1, 1, v121);
    outlined consume of Set<EventID>.Iterator._Variant();
    v63 = v104;
    v64 = v94;
    if ((v106 & 1) != 0)
    {
      swift_getTupleTypeMetadata2();
      static Array._allocateUninitialized(_:)();
      return Dictionary.init(dictionaryLiteral:)();
    }
    if ((v105 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      return v64;
    }
    v124 = Dictionary.init()();
    if (v93[0])
    {
      v66 = __CocoaDictionary.makeIterator()();
      v114 = 0;
      v67 = 0;
      v68 = 0;
      v69 = v66 | 0x8000000000000000;
    }
    else
    {
      v70 = -1 << *(_BYTE *)(v64 + 32);
      v67 = ~v70;
      v71 = *(_QWORD *)(v64 + 64);
      v114 = (char *)(v64 + 64);
      v72 = -v70;
      if (v72 < 64)
        v73 = ~(-1 << v72);
      else
        v73 = -1;
      v68 = v73 & v71;
      v69 = v64;
    }
    v115 = (char *)((unint64_t)(v67 + 64) >> 6);
    v116 = (char *)(v69 & 0x7FFFFFFFFFFFFFFFLL);
    v112 = v115 - 1;
    v113 = v67;
    swift_bridgeObjectRetain();
    v74 = 0;
    v75 = 0;
    while (1)
    {
      v123 = v74;
      if ((v69 & 0x8000000000000000) != 0)
      {
        if (__CocoaDictionary.Iterator.next()())
        {
          _forceBridgeFromObjectiveC<A>(_:_:)();
          swift_unknownObjectRelease();
          v62 = v121;
          _forceBridgeFromObjectiveC<A>(_:_:)();
          swift_unknownObjectRelease();
          v80 = 0;
          v78 = v75;
          v76 = v68;
        }
        else
        {
          v80 = 1;
          v78 = v75;
          v76 = v68;
          v62 = v121;
        }
      }
      else
      {
        if (v68)
        {
          v76 = (v68 - 1) & v68;
          v77 = __clz(__rbit64(v68)) | (v75 << 6);
          v78 = v75;
          goto LABEL_51;
        }
        v78 = v75 + 1;
        if (__OFADD__(v75, 1))
          goto LABEL_82;
        if (v78 >= (uint64_t)v115)
        {
          v76 = 0;
          v80 = 1;
          v78 = v75;
        }
        else
        {
          v81 = *(_QWORD *)&v114[8 * v78];
          if (v81)
            goto LABEL_57;
          if (v75 + 2 >= (uint64_t)v115)
          {
            v76 = 0;
            v80 = 1;
          }
          else
          {
            v81 = *(_QWORD *)&v114[8 * v75 + 16];
            if (v81)
            {
              v78 = v75 + 2;
              goto LABEL_57;
            }
            v92 = v75 + 3;
            if (v75 + 3 < (uint64_t)v115)
            {
              v81 = *(_QWORD *)&v114[8 * v92];
              if (!v81)
              {
                while (1)
                {
                  v78 = v92 + 1;
                  if (__OFADD__(v92, 1))
                    goto LABEL_83;
                  if (v78 >= (uint64_t)v115)
                  {
                    v76 = 0;
                    v80 = 1;
                    v78 = (uint64_t)v112;
                    goto LABEL_60;
                  }
                  v81 = *(_QWORD *)&v114[8 * v78];
                  ++v92;
                  if (v81)
                    goto LABEL_57;
                }
              }
              v78 = v75 + 3;
LABEL_57:
              v76 = (v81 - 1) & v81;
              v77 = __clz(__rbit64(v81)) + (v78 << 6);
LABEL_51:
              v63 = v104;
              (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v104, *(_QWORD *)(v69 + 48) + *(_QWORD *)(v16 + 72) * v77, v109);
              v79 = *(_QWORD *)(v69 + 56) + *(_QWORD *)(v119 + 72) * v77;
              v62 = v121;
              (*(void (**)(char *, unint64_t, uint64_t))(v119 + 16))(&v63[*(int *)(v121 + 48)], v79, v120);
              v80 = 0;
              goto LABEL_61;
            }
            v76 = 0;
            v80 = 1;
            v78 = v75 + 2;
          }
        }
LABEL_60:
        v63 = v104;
      }
LABEL_61:
      v122(v63, v80, 1, v62);
      v82 = v100;
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v100, v63, v102);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v82, 1, v62) == 1)
      {
        outlined consume of Set<EventID>.Iterator._Variant();
        return v124;
      }
      v83 = &v82[*(int *)(v62 + 48)];
      v84 = v16;
      v85 = v109;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v107, v82, v109);
      v86 = v119;
      v87 = v99;
      v88 = v83;
      v89 = v120;
      (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v99, v88, v120);
      v90 = v123;
      if (v123 == 0x8000000000000000)
        goto LABEL_84;
      if (v123 <= 0x3F && ((v117 >> v123) & 1) != 0)
      {
        (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v97, v107, v85);
        v91 = v96;
        (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v96, v87, v89);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v91, 0, 1, v89);
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
        v90 = v123;
      }
      (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v89);
      v16 = v84;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v107, v85);
      v74 = v90 + 1;
      v75 = v78;
      v68 = v76;
      v62 = v121;
      v63 = v104;
    }
  }
  v122 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v36;
  v44 = v109;
  _forceBridgeFromObjectiveC<A>(_:_:)();
  swift_unknownObjectRelease();
  v45 = v120;
  v46 = v121;
  _forceBridgeFromObjectiveC<A>(_:_:)();
  swift_unknownObjectRelease();
  v47 = v16;
  v48 = v119;
  while (1)
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v42, 0, 1, v46);
    v55 = *(int *)(v46 + 48);
    v56 = v114;
    v57 = &v114[v55];
    v58 = &v42[v55];
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v114, v42, v44);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v57, v58, v45);
    v59 = v115;
    v60 = &v115[*(int *)(v46 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v115, v56, v44);
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v60, v57, v45);
    LOBYTE(v57) = ((uint64_t (*)(char *, char *))v112)(v59, v60);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v56, v46);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v60, v45);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v44);
    a4 = v44;
    v16 = v47;
    if ((v57 & 1) != 0)
    {
      v37 = v111;
      v36 = (unint64_t)v122;
      v49 = v123;
      if ((v123 & 0x8000000000000000) != 0)
        goto LABEL_84;
      v106 = 0;
      v61 = 1 << v123;
      if (v123 >= 0x40)
        v61 = 0;
      v42 = v116;
      v117 |= v61;
    }
    else
    {
      v105 = 0;
      v42 = v116;
      v37 = v111;
      v36 = (unint64_t)v122;
      v49 = v123;
    }
    v123 = v49 + 1;
    if ((v37 & 0x8000000000000000) != 0)
      goto LABEL_10;
LABEL_14:
    if (v36)
    {
      v122 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((v36 - 1) & v36);
      v50 = __clz(__rbit64(v36)) | (v110 << 6);
      goto LABEL_28;
    }
    v51 = v110 + 1;
    if (__OFADD__(v110, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v51 >= v98)
      goto LABEL_34;
    v52 = *(_QWORD *)(v108 + 8 * v51);
    v53 = v110 + 1;
    if (!v52)
    {
      v53 = v110 + 2;
      if (v110 + 2 >= v98)
        goto LABEL_34;
      v52 = *(_QWORD *)(v108 + 8 * v53);
      if (!v52)
        break;
    }
LABEL_27:
    v122 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((v52 - 1) & v52);
    v50 = __clz(__rbit64(v52)) + (v53 << 6);
    v110 = v53;
LABEL_28:
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v42, *(_QWORD *)(v37 + 48) + *(_QWORD *)(v16 + 72) * v50, a4);
    v47 = v16;
    v48 = v119;
    v45 = v120;
    v46 = v121;
    (*(void (**)(char *, unint64_t, uint64_t))(v119 + 16))(&v42[*(int *)(v121 + 48)], *(_QWORD *)(v37 + 56) + *(_QWORD *)(v119 + 72) * v50, v120);
    v44 = a4;
  }
  v54 = v110 + 3;
  if (v110 + 3 >= v98)
    goto LABEL_34;
  v52 = *(_QWORD *)(v108 + 8 * v54);
  if (v52)
  {
    v53 = v110 + 3;
    goto LABEL_27;
  }
  while (1)
  {
    v53 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v53 >= v98)
      goto LABEL_34;
    v52 = *(_QWORD *)(v108 + 8 * v53);
    ++v54;
    if (v52)
      goto LABEL_27;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Dictionary.init<A>(identifying:by:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  char *v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a8;
  v40 = a4;
  v41 = a7;
  v35 = a6;
  v36 = a2;
  v37 = a3;
  v34 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v31 - v19;
  v21 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v27 = (char *)&v31 - v26;
  v42 = Dictionary.init()();
  v33 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v34, v35);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  v38 = v27;
  v39 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v28(v20, 1, a5) != 1)
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    do
    {
      v29(v14, v20, a5);
      v36(v14);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v14, a5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, a5);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v28(v20, 1, a5) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v39);
  return v42;
}

char *readEnvironment(_:_:)(_BYTE *a1, char *a2)
{
  int v2;
  char *result;

  v2 = *a1;
  if (v2 != 2)
    return (char *)(v2 & 1);
  result = getenv(a2);
  if (result)
    result = (char *)(atoi(result) != 0);
  *a1 = (_BYTE)result;
  return result;
}

uint64_t BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t))
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t result;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  void (*v82)(char *, char *, uint64_t);
  char *v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t TupleTypeMetadata2;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  _QWORD *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  char *v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v155 = a3;
  v150 = a4;
  v151 = a2;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v110 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v128 = (char *)&v109 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v125 = type metadata accessor for Range();
  v109 = *(_QWORD *)(v125 - 8);
  MEMORY[0x24BDAC7A8](v125);
  v123 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v124 = (char *)&v109 - v13;
  swift_getAssociatedTypeWitness();
  v114 = swift_getAssociatedConformanceWitness();
  v117 = swift_getAssociatedTypeWitness();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x24BDAC7A8](v117);
  v115 = (char *)&v109 - v14;
  v131 = swift_checkMetadataState();
  v112 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v122 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v111 = (char *)&v109 - v17;
  v146 = AssociatedConformanceWitness;
  v153 = type metadata accessor for PartialRangeFrom();
  v118 = *(_QWORD *)(v153 - 8);
  MEMORY[0x24BDAC7A8](v153);
  v143 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v126 = (char *)&v109 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v133 = (char *)&v109 - v22;
  v23 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v23);
  v113 = (char *)&v109 - v24;
  v142 = (_QWORD *)swift_getTupleTypeMetadata2();
  v120 = type metadata accessor for Optional();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x24BDAC7A8](v120);
  v141 = (char *)&v109 - v25;
  v121 = AssociatedTypeWitness;
  v147 = *(void (**)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v26);
  v130 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v127 = (char *)&v109 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v145 = (char *)&v109 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v154 = (char *)&v109 - v33;
  v34 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v34);
  swift_getAssociatedConformanceWitness();
  v35 = type metadata accessor for ReversedCollection();
  v140 = *(_QWORD *)(v35 - 8);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v109 - v37;
  v138 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE3058], v35, v36);
  v39 = type metadata accessor for Slice();
  v139 = *(_QWORD *)(v39 - 8);
  v135 = v39;
  v40 = MEMORY[0x24BDAC7A8](v39);
  v134 = (char *)&v109 - v41;
  v42 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4228], v39, v40);
  v137 = v42;
  v136 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE3048], v35);
  v162 = v39;
  v163 = v35;
  v164 = v42;
  v165 = v136;
  v149 = type metadata accessor for Zip2Sequence();
  v132 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8](v149);
  v148 = (char *)&v109 - v43;
  v44 = v156;
  dispatch thunk of Collection.indices.getter();
  BidirectionalCollection.reversed()();
  v45 = v134;
  Collection.dropFirst(_:)();
  v144 = v5;
  dispatch thunk of Collection.indices.getter();
  BidirectionalCollection.reversed()();
  v46 = v148;
  v47 = v135;
  zip<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v140 + 8))(v38, v35);
  v48 = v45;
  v49 = v141;
  v50 = v149;
  (*(void (**)(char *, uint64_t))(v139 + 8))(v48, v47);
  v152 = a1;
  v157 = a1;
  v158 = v151;
  v159 = v155;
  v160 = v150;
  v161 = v44;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE2620], v50);
  Sequence.first(where:)();
  v51 = v142;
  v52 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(*(v142 - 1) + 48))(v49, 1, v142);
  if (v52 == 1)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v46, v50);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v49, v120);
    return v52 != 1;
  }
  v53 = &v49[*((int *)v51 + 12)];
  v54 = v147;
  v55 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v147 + 4);
  v56 = v49;
  v57 = v121;
  v55(v154, v56, v121);
  v58 = v145;
  v55(v145, v53, v57);
  v59 = *(_QWORD *)(v146 + 8);
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v140 = v59;
  v142 = v55;
  LODWORD(v139) = v52;
  v141 = (char *)*((_QWORD *)v54 + 2);
  ((void (*)(char *, char *, uint64_t))v141)(v133, v58, v57);
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C50], v153);
  v61 = v111;
  v62 = v152;
  v63 = v155;
  v64 = v156;
  MutableCollection.subscript.getter();
  v65 = v115;
  v66 = v131;
  dispatch thunk of Collection.indices.getter();
  v67 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v61, v66);
  MEMORY[0x24BDAC7A8](v67);
  v69 = v150;
  v68 = v151;
  *(&v109 - 6) = v62;
  *(&v109 - 5) = v68;
  *(&v109 - 4) = v63;
  *(&v109 - 3) = (uint64_t)v69;
  v70 = v154;
  *(&v109 - 2) = v64;
  *(&v109 - 1) = (uint64_t)v70;
  v71 = swift_getAssociatedConformanceWitness();
  v72 = v117;
  swift_getAssociatedConformanceWitness();
  v73 = v113;
  BidirectionalCollection.last(where:)();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v65, v72);
  v74 = v118;
  v75 = *(void (**)(char *, uint64_t))(v118 + 8);
  v75(v133, v153);
  result = (*((uint64_t (**)(char *, uint64_t, uint64_t))v147 + 6))(v73, 1, v57);
  if ((_DWORD)result != 1)
  {
    ((void (*)(char *, char *, uint64_t))v142)(v127, v73, v57);
    dispatch thunk of MutableCollection.swapAt(_:_:)();
    v76 = v145;
    result = dispatch thunk of static Equatable.== infix(_:_:)();
    v77 = TupleTypeMetadata2;
    v78 = v128;
    v79 = v76;
    v80 = v130;
    if ((result & 1) != 0)
    {
      v150 = v75;
      v151 = v71;
      v81 = v126;
      v82 = (void (*)(char *, char *, uint64_t))v141;
      ((void (*)(char *, char *, uint64_t))v141)(v126, v79, v57);
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v143, v81, v153);
      dispatch thunk of Collection.endIndex.getter();
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        v83 = &v78[*(int *)(v77 + 48)];
        v82(v78, v81, v57);
        v84 = v80;
        v85 = v82;
        v86 = (void (*)(char *, char *, uint64_t))v142;
        ((void (*)(char *, char *, uint64_t))v142)(v83, v84, v57);
        v87 = v110;
        v88 = &v110[*(int *)(v77 + 48)];
        v85(v110, v78, v57);
        v85(v88, v83, v57);
        v89 = v123;
        v86(v123, v87, v57);
        v90 = (void (*)(char *, uint64_t))*((_QWORD *)v147 + 1);
        v90(v88, v57);
        v91 = &v87[*(int *)(v77 + 48)];
        v86(v87, v78, v57);
        v86(v91, v83, v57);
        v92 = v125;
        v86(&v89[*(int *)(v125 + 36)], v91, v57);
        v147 = v90;
        v90(v87, v57);
        v93 = v109;
        v94 = v124;
        v140 = *(_QWORD *)(v109 + 32);
        ((void (*)(char *, char *, uint64_t))v140)(v124, v89, v92);
        dispatch thunk of Collection.subscript.getter();
        v95 = *(void (**)(char *, uint64_t))(v93 + 8);
        v96 = v130;
        v95(v94, v92);
        swift_getAssociatedConformanceWitness();
        MutableCollection<>.reverse()();
        dispatch thunk of Collection.endIndex.getter();
        v97 = v143;
        result = dispatch thunk of static Comparable.<= infix(_:_:)();
        if ((result & 1) != 0)
        {
          v98 = v128;
          v99 = TupleTypeMetadata2;
          v100 = v147;
          v101 = &v128[*(int *)(TupleTypeMetadata2 + 48)];
          v102 = (void (*)(char *, char *, uint64_t))v141;
          ((void (*)(char *, char *, uint64_t))v141)(v128, v97, v57);
          v86(v101, v96, v57);
          v103 = &v87[*(int *)(v99 + 48)];
          v102(v87, v98, v57);
          v102(v103, v101, v57);
          v104 = v123;
          v86(v123, v87, v57);
          v100(v103, v57);
          v105 = &v87[*(int *)(v99 + 48)];
          v86(v87, v98, v57);
          v86(v105, v101, v57);
          v106 = v125;
          v86(&v104[*(int *)(v125 + 36)], v105, v57);
          v100(v87, v57);
          ((void (*)(char *, char *, uint64_t))v140)(v124, v104, v106);
          v107 = v153;
          v108 = v150;
          v150(v143, v153);
          dispatch thunk of MutableCollection.subscript.setter();
          v108(v126, v107);
          v100(v127, v57);
          v100(v145, v57);
          (*(void (**)(char *, uint64_t))(v132 + 8))(v148, v149);
          v100(v154, v57);
          v52 = v139;
          return v52 != 1;
        }
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t closure #1 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  void (*v25)(_BYTE *, _QWORD);
  void (*v26)(char *);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _BYTE v45[32];
  uint64_t v46;

  v42 = a6;
  v7 = *(_QWORD *)(a4 + 8);
  v38 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v41 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v44 = (char *)&v34 - v11;
  v36 = v7;
  v12 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v43 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v34 - v17;
  v20 = *(int *)(v19 + 48);
  v21 = (char *)&v34 + v20 - v17;
  v22 = a1;
  v37 = a1;
  v23 = a1 + v20;
  v35 = a1 + v20;
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v21;
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v39 + 16);
  v24((char *)&v34 - v17, v22, v12, v16);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v21, v23, v12);
  v25 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v26 = *(void (**)(char *))(v46 + 16);
  v26(v44);
  v25(v45, 0);
  v27 = &v43[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(void))v24)();
  ((void (*)(char *, uint64_t, uint64_t))v24)(v27, v35, v12);
  v28 = dispatch thunk of Collection.subscript.read();
  v29 = v41;
  v26(v41);
  ((void (*)(_BYTE *, _QWORD))v28)(v45, 0);
  v30 = v44;
  LOBYTE(v28) = dispatch thunk of static Comparable.< infix(_:_:)();
  v31 = *(void (**)(char *, uint64_t))(v46 + 8);
  v31(v29, AssociatedTypeWitness);
  v31(v30, AssociatedTypeWitness);
  v32 = *(void (**)(char *, uint64_t))(v39 + 8);
  v32(v27, v12);
  v32(v43, v12);
  v32(v40, v12);
  v32(v18, v12);
  return v28 & 1;
}

uint64_t closure #2 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(_BYTE *, _QWORD);
  void (*v15)(char *);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];
  _BYTE v20[32];

  v19[0] = a3;
  v19[1] = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v19 - v12;
  v14 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v15 = *(void (**)(char *))(v8 + 16);
  v15(v13);
  v14(v20, 0);
  v16 = dispatch thunk of Collection.subscript.read();
  v15(v10);
  ((void (*)(_BYTE *, _QWORD))v16)(v20, 0);
  LOBYTE(v16) = dispatch thunk of static Comparable.> infix(_:_:)();
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, AssociatedTypeWitness);
  v17(v13, AssociatedTypeWitness);
  return v16 & 1;
}

uint64_t sub_234C2E828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in bind<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 24))(v0 + ((v1 + 40) & ~v1));
}

uint64_t type metadata accessor for Pair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Pair);
}

uint64_t type metadata accessor for Pair.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Pair.CodingKeys);
}

uint64_t partial apply for closure #1 in Sequence.first<A>(ofType:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Sequence.first<A>(ofType:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t type metadata accessor for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountingIndex);
}

uint64_t RandomAccessCollection<>.lowerBound(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  _QWORD v6[6];

  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a1;
  return RandomAccessCollection.lowerBound(_:)((uint64_t (*)(char *))partial apply for closure #1 in RandomAccessCollection<>.lowerBound(of:), (uint64_t)v6, a5);
}

uint64_t ClosedRange<>.offset(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t TupleTypeMetadata2;
  char *v35;
  uint64_t v36;

  v5 = v4;
  v35 = a4;
  v9 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - v13;
  v15 = *(_QWORD **)(v9 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v33 - v21;
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  MEMORY[0x23B7C7090](v5, a1, v9, v23, v20);
  MEMORY[0x23B7C7090](v5 + *(int *)(a2 + 36), a1, v9, v23);
  v36 = a2;
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v25 = TupleTypeMetadata2;
    v26 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
    v27 = (void (*)(char *, char *, uint64_t))v15[4];
    v27(v14, v22, v9);
    v27(v26, v18, v9);
    v28 = &v11[*(int *)(v25 + 48)];
    v29 = (void (*)(char *, char *, uint64_t))v15[2];
    v29(v11, v14, v9);
    v29(v28, v26, v9);
    v30 = v35;
    v27(v35, v11, v9);
    v31 = (void (*)(char *, uint64_t))v15[1];
    v31(v28, v9);
    v32 = &v11[*(int *)(v25 + 48)];
    v27(v11, v14, v9);
    v27(v32, v26, v9);
    v27(&v30[*(int *)(v36 + 36)], v32, v9);
    return ((uint64_t (*)(char *, uint64_t))v31)(v11, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ClosedRange.init(bounds:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v35;
  char *v36;

  v36 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - v12;
  v14 = *(_QWORD **)(a3 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v33 - v19;
  min<A>(_:_:)();
  max<A>(_:_:)();
  v35 = a4;
  LOBYTE(a4) = dispatch thunk of static Comparable.<= infix(_:_:)();
  v21 = (void (*)(uint64_t, uint64_t))v14[1];
  v21(a2, a3);
  result = ((uint64_t (*)(uint64_t, uint64_t))v21)(a1, a3);
  if ((a4 & 1) != 0)
  {
    v33 = v21;
    v23 = TupleTypeMetadata2;
    v24 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    v25 = (void (*)(char *, char *, uint64_t))v14[4];
    v25(v13, v20, a3);
    v25(v24, v17, a3);
    v26 = &v10[*(int *)(v23 + 48)];
    v27 = (void (*)(char *, char *, uint64_t))v14[2];
    v27(v10, v13, a3);
    v27(v26, v24, a3);
    v28 = v36;
    v25(v36, v10, a3);
    v29 = v26;
    v30 = (uint64_t (*)(char *, uint64_t))v33;
    v33((uint64_t)v29, a3);
    v31 = &v10[*(int *)(v23 + 48)];
    v25(v10, v13, a3);
    v25(v31, v24, a3);
    v32 = type metadata accessor for ClosedRange();
    v25(&v28[*(int *)(v32 + 36)], v31, a3);
    return v30(v10, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ClosedRange.union(_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  char *v27;
  uint64_t v28;

  v27 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v25 - v7;
  v9 = *(_QWORD **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - v14;
  min<A>(_:_:)();
  v28 = a1;
  max<A>(_:_:)();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v17 = TupleTypeMetadata2;
    v18 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
    v19 = (void (*)(char *, char *, uint64_t))v9[4];
    v19(v8, v15, v3);
    v19(v18, v12, v3);
    v20 = &v5[*(int *)(v17 + 48)];
    v21 = (void (*)(char *, char *, uint64_t))v9[2];
    v21(v5, v8, v3);
    v21(v20, v18, v3);
    v22 = v27;
    v19(v27, v5, v3);
    v23 = (void (*)(char *, uint64_t))v9[1];
    v23(v20, v3);
    v24 = &v5[*(int *)(v17 + 48)];
    v19(v5, v8, v3);
    v19(v24, v18, v3);
    v19(&v22[*(int *)(v28 + 36)], v24, v3);
    return ((uint64_t (*)(char *, uint64_t))v23)(v5, v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Range.intersection(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t TupleTypeMetadata2;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - v7;
  v37 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - v16;
  max<A>(_:_:)();
  min<A>(_:_:)();
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
  {
    v32 = (void (*)(char *, uint64_t))v11[1];
    v32(v14, v3);
    v32(v17, v3);
    v31 = 1;
    v30 = v37;
    v29 = v38;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, v31, 1, a1);
  }
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v19 = v8;
    v20 = TupleTypeMetadata2;
    v34 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    v21 = v34;
    v22 = (void (*)(char *, char *, uint64_t))v11[4];
    v22(v19, v17, v3);
    v22(v21, v14, v3);
    v23 = &v5[*(int *)(v20 + 48)];
    v24 = (void (*)(char *, char *, uint64_t))v11[2];
    v24(v5, v19, v3);
    v25 = v34;
    v24(v23, v34, v3);
    v26 = v36;
    v22(v36, v5, v3);
    v27 = (void (*)(char *, uint64_t))v11[1];
    v27(v23, v3);
    v28 = &v5[*(int *)(v20 + 48)];
    v22(v5, v19, v3);
    v22(v28, v25, v3);
    v22(&v26[*(int *)(a1 + 36)], v28, v3);
    v27(v5, v3);
    v30 = v37;
    v29 = v38;
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v38, v26, a1);
    v31 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, v31, 1, a1);
  }
  __break(1u);
  return result;
}

uint64_t Range<>.length.getter()
{
  return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
}

uint64_t static ClosedRange<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return static ClosedRange<>.+ infix(_:_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))MEMORY[0x24BEE2F68], a6);
}

uint64_t static ClosedRange<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return static ClosedRange<>.+ infix(_:_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))MEMORY[0x24BEE2F70], a6);
}

uint64_t static ClosedRange<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, double)@<X5>, char *a7@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v39 = a7;
  v40 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v35 - v15;
  v36 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v35 - v22;
  v24 = *(_QWORD *)(a5 + 8);
  a6(a1, a2, a3, v24, v21);
  v38 = type metadata accessor for ClosedRange();
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a6)(a1 + *(int *)(v38 + 36), a2, a3, v24);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v27 = v36;
    v26 = TupleTypeMetadata2;
    v28 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
    v29 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    v29(v16, v23, a3);
    v29(v28, v19, a3);
    v30 = &v13[*(int *)(v26 + 48)];
    v31 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v31(v13, v16, a3);
    v31(v30, v28, a3);
    v32 = v39;
    v29(v39, v13, a3);
    v33 = *(void (**)(char *, uint64_t))(v27 + 8);
    v33(v30, a3);
    v34 = &v13[*(int *)(v26 + 48)];
    v29(v13, v16, a3);
    v29(v34, v28, a3);
    v29(&v32[*(int *)(v38 + 36)], v34, a3);
    return ((uint64_t (*)(char *, uint64_t))v33)(v13, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ClosedRange<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ClosedRange<>.+= infix(_:_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))static ClosedRange<>.+ infix(_:_:));
}

uint64_t static ClosedRange<>.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ClosedRange<>.+= infix(_:_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))static ClosedRange<>.- infix(_:_:));
}

uint64_t static ClosedRange<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v12 = type metadata accessor for ClosedRange();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v18 - v15;
  a6(a1, a2, a3, a4, a5, v14);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v16, v12);
}

uint64_t ClosedRange<>.progress(at:countdown:)()
{
  double v0;
  double v1;
  uint64_t result;
  double v3;

  Date.timeIntervalSinceReferenceDate.getter();
  v1 = v0;
  type metadata accessor for ClosedRange<Date>();
  result = Date.timeIntervalSinceReferenceDate.getter();
  if (v1 <= v3)
    return Date.timeIntervalSinceReferenceDate.getter();
  __break(1u);
  return result;
}

uint64_t CollectionOfTwo.startIndex.getter()
{
  return 0;
}

uint64_t CollectionOfTwo.endIndex.getter()
{
  return 2;
}

uint64_t CollectionOfTwo.elements.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, double);
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v19;

  v6 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v19 - v9;
  v12 = *(int *)(v11 + 48);
  v13 = &v10[v12];
  v14 = v3 + v12;
  v15 = *(_QWORD *)(v6 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v16(v10, v3, v6, v8);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v13, v14, v6);
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v17(a1, v10, v6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(a2, v13, v6);
}

