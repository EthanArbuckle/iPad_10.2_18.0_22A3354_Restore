uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, double *a3, uint64_t a4, double *a5, double a6)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double *v46;
  uint64_t result;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  unint64_t v77;
  unint64_t v78;
  double *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  _OWORD v101[2];
  __int128 v102;
  uint64_t v103;

  v12 = a3[1];
  v99 = *a3;
  v14 = a3[2];
  v13 = a3[3];
  v16 = a3[4];
  v15 = a3[5];
  v18 = a3[6];
  v17 = a3[7];
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v19 = swift_dynamicCastClass();
  v98 = a6;
  if (v19)
  {
    v84 = v12;
    v86 = v14;
    v88 = v13;
    v90 = v16;
    v92 = v15;
    v94 = v18;
    v96 = v17;
    v20 = *(_QWORD **)(v19 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v21 = *a5;
    v22 = a5[1];
    v23 = a5[2];
    v24 = a5[3];
    v25 = a5[4];
    v26 = a5[5];
    v28 = a5[6];
    v27 = a5[7];
    v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v30 = swift_bridgeObjectRetain();
    v31 = (_QWORD *)specialized AnimationState.subscript.getter(v30, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    v32 = v99 + v21;
    v33 = v84 + v22;
    v34 = v86 + v23;
    v35 = v88 + v24;
    v36 = v90 + v25;
    v37 = v92 + v26;
    v38 = v94 + v28;
    v39 = v96 + v27;
    v41 = v31[2];
    v40 = v31[3];
    if (v41 >= v40 >> 1)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v31);
    v31[2] = v41 + 1;
    v42 = (double *)&v31[9 * v41];
    v42[4] = v32;
    v42[5] = v33;
    v42[6] = v34;
    v42[7] = v35;
    v42[8] = v36;
    v42[9] = v37;
    v42[10] = v38;
    v42[11] = v39;
    *((_QWORD *)v42 + 12) = v29;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>(0);
    v103 = v43;
    *(_QWORD *)&v102 = v31;
    specialized Dictionary.subscript.setter((uint64_t)&v102, v43);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    v45 = v20[2];
    v44 = v20[3];
    if (v45 >= v44 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v20);
    v20[2] = v45 + 1;
    v46 = (double *)&v20[2 * v45];
    *((_QWORD *)v46 + 4) = a4;
    v46[5] = v98;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v20;
    *a1 = result;
  }
  else
  {
    v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v49 = *a2;
    swift_bridgeObjectRetain();
    v50 = swift_bridgeObjectRetain();
    v51 = (_QWORD *)specialized AnimationState.subscript.getter(v50, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
    v53 = v51[2];
    v52 = v51[3];
    if (v53 >= v52 >> 1)
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v51);
    v51[2] = v53 + 1;
    v54 = (double *)&v51[9 * v53];
    v54[4] = v99;
    v54[5] = v12;
    v54[6] = v14;
    v54[7] = v13;
    v54[8] = v16;
    v54[9] = v15;
    v54[10] = v18;
    v54[11] = v17;
    *((_QWORD *)v54 + 12) = v49;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>(0);
    v56 = v55;
    v103 = v55;
    *(_QWORD *)&v102 = v51;
    outlined init with take of Any(&v102, v101);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v101, v56, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v100 = *a3;
    v95 = a3[2];
    v97 = a3[1];
    v91 = a3[4];
    v93 = a3[3];
    v87 = a3[6];
    v89 = a3[5];
    v85 = a3[7];
    v59 = *a5;
    v58 = a5[1];
    v60 = a5[2];
    v61 = a5[3];
    v62 = a5[4];
    v63 = a5[5];
    v64 = a5[6];
    v65 = a5[7];
    v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v67 = swift_bridgeObjectRetain();
    v68 = (_QWORD *)specialized AnimationState.subscript.getter(v67, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
    v69 = v100 + v59;
    v70 = v97 + v58;
    v71 = v95 + v60;
    v72 = v93 + v61;
    v73 = v91 + v62;
    v74 = v89 + v63;
    v75 = v87 + v64;
    v76 = v85 + v65;
    v78 = v68[2];
    v77 = v68[3];
    if (v78 >= v77 >> 1)
      v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v68);
    v68[2] = v78 + 1;
    v79 = (double *)&v68[9 * v78];
    v79[4] = v69;
    v79[5] = v70;
    v79[6] = v71;
    v79[7] = v72;
    v79[8] = v73;
    v79[9] = v74;
    v79[10] = v75;
    v79[11] = v76;
    *((_QWORD *)v79 + 12) = v66;
    v103 = v56;
    *(_QWORD *)&v102 = v68;
    outlined init with take of Any(&v102, v101);
    v80 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v101, v56, v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v48;
    v81 = *a1;
    swift_retain();
    v82 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v81, a4, v98);
    v83 = swift_allocObject();
    *(_QWORD *)(v83 + 16) = v82;
    *a1 = v83;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  uint64_t result;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  unint64_t v66;
  unint64_t v67;
  double *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  _OWORD v78[2];
  __int128 v79;
  uint64_t v80;

  v12 = *a5;
  v13 = a5[1];
  v15 = a5[2];
  v14 = a5[3];
  v16 = *a3;
  v17 = a3[1];
  v18 = a3[2];
  v74 = a3[4];
  v76 = a3[3];
  v19 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v19 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, a6, v12);
  v73 = a6;
  if (v19 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, v17, v18, v76, a6, v12, v13, v15, v14);
  v20 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v21 = swift_dynamicCastClass();
  if (v21)
  {
    v22 = *(_QWORD **)(v21 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v23 = a5[4];
    v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v25 = swift_bridgeObjectRetain();
    v26 = (_QWORD *)specialized AnimationState.subscript.getter(v25, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    v27 = v12 + v16;
    v28 = v13 + v17;
    v29 = v15 + v18;
    v30 = v14 + v76;
    v31 = v74 + v23;
    v33 = v26[2];
    v32 = v26[3];
    if (v33 >= v32 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v26);
    v26[2] = v33 + 1;
    v34 = (double *)&v26[6 * v33];
    v34[4] = v27;
    v34[5] = v28;
    v34[6] = v29;
    v34[7] = v30;
    v34[8] = v31;
    *((_QWORD *)v34 + 9) = v24;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>(0);
    v80 = v35;
    *(_QWORD *)&v79 = v26;
    specialized Dictionary.subscript.setter((uint64_t)&v79, v35);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    v37 = v22[2];
    v36 = v22[3];
    if (v37 >= v36 >> 1)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v22);
    v22[2] = v37 + 1;
    v38 = (double *)&v22[2 * v37];
    *((_QWORD *)v38 + 4) = a4;
    v38[5] = v73;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v22;
    *a1 = result;
  }
  else
  {
    v72 = v20;
    v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v41 = *a2;
    swift_bridgeObjectRetain();
    v42 = swift_bridgeObjectRetain();
    v43 = (_QWORD *)specialized AnimationState.subscript.getter(v42, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    v45 = v43[2];
    v44 = v43[3];
    if (v45 >= v44 >> 1)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v43);
    v43[2] = v45 + 1;
    v46 = (double *)&v43[6 * v45];
    v46[4] = v16;
    v46[5] = v17;
    v46[6] = v18;
    v46[7] = v76;
    v46[8] = v74;
    *((_QWORD *)v46 + 9) = v41;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>(0);
    v48 = v47;
    v80 = v47;
    *(_QWORD *)&v79 = v43;
    outlined init with take of Any(&v79, v78);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v78, v48, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v50 = a3[2];
    v75 = a3[1];
    v77 = *a3;
    v51 = a3[3];
    v52 = a3[4];
    v53 = *a5;
    v54 = a5[1];
    v56 = a5[2];
    v55 = a5[3];
    v57 = a5[4];
    v58 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v59 = swift_bridgeObjectRetain();
    v60 = (_QWORD *)specialized AnimationState.subscript.getter(v59, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
    v61 = v77 + v53;
    v62 = v75 + v54;
    v63 = v50 + v56;
    v64 = v51 + v55;
    v65 = v52 + v57;
    v67 = v60[2];
    v66 = v60[3];
    if (v67 >= v66 >> 1)
      v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v60);
    v60[2] = v67 + 1;
    v68 = (double *)&v60[6 * v67];
    v68[4] = v61;
    v68[5] = v62;
    v68[6] = v63;
    v68[7] = v64;
    v68[8] = v65;
    *((_QWORD *)v68 + 9) = v58;
    v80 = v48;
    *(_QWORD *)&v79 = v60;
    outlined init with take of Any(&v79, v78);
    v69 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v78, v48, v69);
    swift_bridgeObjectRelease();
    *a2 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v70 = swift_allocObject();
    *(_OWORD *)(v70 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v70 + 32) = v72;
    *(_QWORD *)(v70 + 40) = 0;
    *(_QWORD *)(v70 + 48) = a4;
    *(double *)(v70 + 56) = v73;
    v71 = swift_allocObject();
    *(_QWORD *)(v71 + 16) = v70;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *a1 = v71;
  }
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _AnyAnimatableData)
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, *a3, a3[1], a3[2], a3[3], a6, *a5, a5[1], a5[2], a5[3]);
  v12 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v13 = swift_dynamicCastClass();
  if (v13)
  {
    v14 = *(_QWORD **)(v13 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    outlined init with copy of _AnyAnimatableData(a3, &v54);
    v15 = v54;
    if ((_QWORD)v54 == *(_QWORD *)a5)
    {
      (*(void (**)(char *, double *))(v54 + 96))((char *)&v54 + 8, a5 + 1);
    }
    else if (v15 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v54);
      outlined init with copy of _AnyAnimatableData(a5, &v54);
    }
    v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v59 = v54;
    v60 = v55;
    *(_QWORD *)&v61 = v56;
    v31 = swift_bridgeObjectRetain();
    v32 = (_QWORD *)specialized AnimationState.subscript.getter(v31, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    v34 = v32[2];
    v33 = v32[3];
    if (v34 >= v33 >> 1)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v32);
    v32[2] = v34 + 1;
    v35 = &v32[6 * v34];
    v36 = v60;
    v37 = v61;
    *((_OWORD *)v35 + 2) = v59;
    *((_OWORD *)v35 + 3) = v36;
    v35[8] = v37;
    v35[9] = v30;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    *((_QWORD *)&v55 + 1) = v38;
    *(_QWORD *)&v54 = v32;
    specialized Dictionary.subscript.setter((uint64_t)&v54, v38);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v40 = v14[2];
    v39 = v14[3];
    if (v40 >= v39 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v14);
    v14[2] = v40 + 1;
    v41 = (double *)&v14[2 * v40];
    *((_QWORD *)v41 + 4) = a4;
    v41[5] = a6;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v14;
    *a1 = result;
  }
  else
  {
    v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    outlined init with copy of _AnyAnimatableData(a3, &v59);
    *((_QWORD *)&v61 + 1) = *a2;
    swift_bridgeObjectRetain();
    v18 = swift_bridgeObjectRetain();
    v19 = (_QWORD *)specialized AnimationState.subscript.getter(v18, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
    v19[2] = v21 + 1;
    v22 = &v19[6 * v21];
    v23 = v59;
    v24 = v61;
    v22[3] = v60;
    v22[4] = v24;
    v22[2] = v23;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v26 = v25;
    *((_QWORD *)&v55 + 1) = v25;
    *(_QWORD *)&v54 = v19;
    outlined init with take of Any(&v54, v58);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v57 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v26, isUniquelyReferenced_nonNull_native);
    v28 = v57;
    swift_bridgeObjectRelease();
    outlined init with copy of _AnyAnimatableData(a3, &v54);
    v29 = v54;
    if ((_QWORD)v54 == *(_QWORD *)a5)
    {
      (*(void (**)(char *, double *))(v54 + 96))((char *)&v54 + 8, a5 + 1);
    }
    else if (v29 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v54);
      outlined init with copy of _AnyAnimatableData(a5, &v54);
    }
    v42 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v59 = v54;
    v60 = v55;
    *(_QWORD *)&v61 = v56;
    v43 = swift_bridgeObjectRetain();
    v44 = (_QWORD *)specialized AnimationState.subscript.getter(v43, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
    v46 = v44[2];
    v45 = v44[3];
    if (v46 >= v45 >> 1)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
    v44[2] = v46 + 1;
    v47 = &v44[6 * v46];
    v48 = v60;
    v49 = v61;
    *((_OWORD *)v47 + 2) = v59;
    *((_OWORD *)v47 + 3) = v48;
    v47[8] = v49;
    v47[9] = v42;
    *((_QWORD *)&v55 + 1) = v26;
    *(_QWORD *)&v54 = v44;
    outlined init with take of Any(&v54, v58);
    v50 = swift_isUniquelyReferenced_nonNull_native();
    v57 = v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v26, v50);
    v51 = v57;
    swift_bridgeObjectRelease();
    *a2 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v52 + 32) = v12;
    *(_QWORD *)(v52 + 40) = 0;
    *(_QWORD *)(v52 + 48) = a4;
    *(double *)(v52 + 56) = a6;
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = v52;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *a1 = v53;
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  double *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  uint64_t result;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  unint64_t v53;
  double *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  __int128 v60;
  uint64_t v61;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v20 = swift_dynamicCastClass();
  if (v20)
  {
    v21 = *(_QWORD **)(v20 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v23 = swift_bridgeObjectRetain();
    v24 = (_QWORD *)specialized AnimationState.subscript.getter(v23, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    v25 = a4 + a8;
    v26 = a5 + a9;
    v27 = a6 + a10;
    v29 = v24[2];
    v28 = v24[3];
    if (v29 >= v28 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v24);
    v24[2] = v29 + 1;
    v30 = (double *)&v24[4 * v29];
    v30[4] = v25;
    v30[5] = v26;
    v30[6] = v27;
    *((_QWORD *)v30 + 7) = v22;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>(0);
    v61 = v31;
    *(_QWORD *)&v60 = v24;
    specialized Dictionary.subscript.setter((uint64_t)&v60, v31);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v33 = v21[2];
    v32 = v21[3];
    if (v33 >= v32 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v21);
    v21[2] = v33 + 1;
    v34 = (double *)&v21[2 * v33];
    *((_QWORD *)v34 + 4) = a3;
    v34[5] = a7;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v21;
    *a1 = result;
  }
  else
  {
    v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v37 = *a2;
    swift_bridgeObjectRetain();
    v38 = swift_bridgeObjectRetain();
    v39 = (_QWORD *)specialized AnimationState.subscript.getter(v38, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    v41 = v39[2];
    v40 = v39[3];
    if (v41 >= v40 >> 1)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v39);
    v39[2] = v41 + 1;
    v42 = (double *)&v39[4 * v41];
    v42[4] = a4;
    v42[5] = a5;
    v42[6] = a6;
    *((_QWORD *)v42 + 7) = v37;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>(0);
    v44 = v43;
    v61 = v43;
    *(_QWORD *)&v60 = v39;
    outlined init with take of Any(&v60, v59);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v44, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v46 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v47 = swift_bridgeObjectRetain();
    v48 = (_QWORD *)specialized AnimationState.subscript.getter(v47, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
    v49 = a4 + a8;
    v50 = a5 + a9;
    v51 = a6 + a10;
    v53 = v48[2];
    v52 = v48[3];
    if (v53 >= v52 >> 1)
      v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v48);
    v48[2] = v53 + 1;
    v54 = (double *)&v48[4 * v53];
    v54[4] = v49;
    v54[5] = v50;
    v54[6] = v51;
    *((_QWORD *)v54 + 7) = v46;
    v61 = v44;
    *(_QWORD *)&v60 = v48;
    outlined init with take of Any(&v60, v59);
    v55 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v44, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v36;
    v56 = *a1;
    swift_retain();
    v57 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v56, a3, a7);
    v58 = swift_allocObject();
    *(_QWORD *)(v58 + 16) = v57;
    *a1 = v58;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _OWORD v70[2];
  __int128 v71;
  uint64_t v72;

  v20 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  if (v20 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a7, a8);
  v21 = v20;
  result = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v21 == result)
  {
    __break(1u);
  }
  else
  {
    v23 = *a1;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    v24 = swift_dynamicCastClass();
    if (v24)
    {
      v25 = *(_QWORD **)(v24 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v27 = swift_bridgeObjectRetain();
      v28 = (_QWORD *)specialized AnimationState.subscript.getter(v27, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
      v29 = a4 + a8;
      v30 = a5 + a9;
      v31 = a6 + a10;
      v33 = v28[2];
      v32 = v28[3];
      if (v33 >= v32 >> 1)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v28);
      v28[2] = v33 + 1;
      v34 = (double *)&v28[4 * v33];
      v34[4] = v29;
      v34[5] = v30;
      v34[6] = v31;
      *((_QWORD *)v34 + 7) = v26;
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0);
      v72 = v35;
      *(_QWORD *)&v71 = v28;
      specialized Dictionary.subscript.setter((uint64_t)&v71, v35);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      v37 = v25[2];
      v36 = v25[3];
      if (v37 >= v36 >> 1)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v25);
      v25[2] = v37 + 1;
      v38 = (double *)&v25[2 * v37];
      *((_QWORD *)v38 + 4) = a3;
      v38[5] = a7;
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v25;
      *a1 = result;
    }
    else
    {
      v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v40 = *a2;
      swift_bridgeObjectRetain();
      v41 = swift_bridgeObjectRetain();
      v42 = (_QWORD *)specialized AnimationState.subscript.getter(v41, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
      v43 = v42[2];
      v44 = v42[3];
      v45 = v43 + 1;
      if (v43 >= v44 >> 1)
      {
        v63 = v42;
        v64 = v42[2];
        v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v43 + 1, 1, v63);
        v43 = v64;
        v42 = v65;
      }
      v42[2] = v45;
      v46 = (double *)&v42[4 * v43];
      v46[4] = a4;
      v46[5] = a5;
      v46[6] = a6;
      *((_QWORD *)v46 + 7) = v40;
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0);
      v48 = v47;
      v72 = v47;
      *(_QWORD *)&v71 = v42;
      outlined init with take of Any(&v71, v70);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v48, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v51 = swift_bridgeObjectRetain();
      v52 = (_QWORD *)specialized AnimationState.subscript.getter(v51, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
      v53 = a4 + a8;
      v54 = a5 + a9;
      v55 = a6 + a10;
      v56 = v52[2];
      v57 = v52[3];
      v58 = v56 + 1;
      if (v56 >= v57 >> 1)
      {
        v69 = v56 + 1;
        v66 = v52;
        v67 = v52[2];
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v56 + 1, 1, v66);
        v56 = v67;
        v58 = v69;
        v52 = v68;
      }
      v52[2] = v58;
      v59 = (double *)&v52[4 * v56];
      v59[4] = v53;
      v59[5] = v54;
      v59[6] = v55;
      *((_QWORD *)v59 + 7) = v50;
      v72 = v48;
      *(_QWORD *)&v71 = v52;
      outlined init with take of Any(&v71, v70);
      v60 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v48, v60);
      swift_bridgeObjectRelease();
      *a2 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v61 + 32) = v23;
      *(_QWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 48) = a3;
      *(double *)(v61 + 56) = a7;
      v62 = swift_allocObject();
      *(_QWORD *)(v62 + 16) = v61;
      swift_retain();
      result = swift_bridgeObjectRelease();
      *a1 = v62;
    }
  }
  return result;
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _OWORD v70[2];
  __int128 v71;
  uint64_t v72;

  v20 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v20 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a7, a8);
  v21 = v20;
  result = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v21 == result)
  {
    __break(1u);
  }
  else
  {
    v23 = *a1;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    v24 = swift_dynamicCastClass();
    if (v24)
    {
      v25 = *(_QWORD **)(v24 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v27 = swift_bridgeObjectRetain();
      v28 = (_QWORD *)specialized AnimationState.subscript.getter(v27, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
      v29 = a4 + a8;
      v30 = a5 + a9;
      v31 = a6 + a10;
      v33 = v28[2];
      v32 = v28[3];
      if (v33 >= v32 >> 1)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v28);
      v28[2] = v33 + 1;
      v34 = (double *)&v28[4 * v33];
      v34[4] = v29;
      v34[5] = v30;
      v34[6] = v31;
      *((_QWORD *)v34 + 7) = v26;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>(0);
      v72 = v35;
      *(_QWORD *)&v71 = v28;
      specialized Dictionary.subscript.setter((uint64_t)&v71, v35);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      v37 = v25[2];
      v36 = v25[3];
      if (v37 >= v36 >> 1)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v25);
      v25[2] = v37 + 1;
      v38 = (double *)&v25[2 * v37];
      *((_QWORD *)v38 + 4) = a3;
      v38[5] = a7;
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v25;
      *a1 = result;
    }
    else
    {
      v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v40 = *a2;
      swift_bridgeObjectRetain();
      v41 = swift_bridgeObjectRetain();
      v42 = (_QWORD *)specialized AnimationState.subscript.getter(v41, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
      v43 = v42[2];
      v44 = v42[3];
      v45 = v43 + 1;
      if (v43 >= v44 >> 1)
      {
        v63 = v42;
        v64 = v42[2];
        v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v43 + 1, 1, v63);
        v43 = v64;
        v42 = v65;
      }
      v42[2] = v45;
      v46 = (double *)&v42[4 * v43];
      v46[4] = a4;
      v46[5] = a5;
      v46[6] = a6;
      *((_QWORD *)v46 + 7) = v40;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>(0);
      v48 = v47;
      v72 = v47;
      *(_QWORD *)&v71 = v42;
      outlined init with take of Any(&v71, v70);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v48, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v51 = swift_bridgeObjectRetain();
      v52 = (_QWORD *)specialized AnimationState.subscript.getter(v51, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
      v53 = a4 + a8;
      v54 = a5 + a9;
      v55 = a6 + a10;
      v56 = v52[2];
      v57 = v52[3];
      v58 = v56 + 1;
      if (v56 >= v57 >> 1)
      {
        v69 = v56 + 1;
        v66 = v52;
        v67 = v52[2];
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v56 + 1, 1, v66);
        v56 = v67;
        v58 = v69;
        v52 = v68;
      }
      v52[2] = v58;
      v59 = (double *)&v52[4 * v56];
      v59[4] = v53;
      v59[5] = v54;
      v59[6] = v55;
      *((_QWORD *)v59 + 7) = v50;
      v72 = v48;
      *(_QWORD *)&v71 = v52;
      outlined init with take of Any(&v71, v70);
      v60 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v48, v60);
      swift_bridgeObjectRelease();
      *a2 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v61 + 32) = v23;
      *(_QWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 48) = a3;
      *(double *)(v61 + 56) = a7;
      v62 = swift_allocObject();
      *(_QWORD *)(v62 + 16) = v61;
      swift_retain();
      result = swift_bridgeObjectRelease();
      *a1 = v62;
    }
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double *v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  double v56;
  double v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  double *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v67[2];
  __int128 v68;
  uint64_t v69;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v27 = swift_dynamicCastClass();
  if (v27)
  {
    v28 = *(_QWORD **)(v27 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v30 = swift_bridgeObjectRetain();
    v31 = (_QWORD *)specialized AnimationState.subscript.getter(v30, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    v32 = a4 + a9;
    v33 = a5 + a10;
    v34 = a6 + a11;
    v36 = v31[2];
    v35 = v31[3];
    if (v36 >= v35 >> 1)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v31);
    v31[2] = v36 + 1;
    v37 = (double *)&v31[5 * v36];
    v37[4] = v32;
    v37[5] = v33;
    v37[6] = v34;
    v37[7] = a7 + a12;
    *((_QWORD *)v37 + 8) = v29;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
    v69 = v38;
    *(_QWORD *)&v68 = v31;
    specialized Dictionary.subscript.setter((uint64_t)&v68, v38);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v40 = v28[2];
    v39 = v28[3];
    if (v40 >= v39 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v28);
    v28[2] = v40 + 1;
    v41 = (double *)&v28[2 * v40];
    *((_QWORD *)v41 + 4) = a3;
    v41[5] = a8;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v28;
    *a1 = result;
  }
  else
  {
    v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v44 = *a2;
    swift_bridgeObjectRetain();
    v45 = swift_bridgeObjectRetain();
    v46 = (_QWORD *)specialized AnimationState.subscript.getter(v45, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
    v48 = v46[2];
    v47 = v46[3];
    if (v48 >= v47 >> 1)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v46);
    v46[2] = v48 + 1;
    v49 = (double *)&v46[5 * v48];
    v49[4] = a4;
    v49[5] = a5;
    v49[6] = a6;
    v49[7] = a7;
    *((_QWORD *)v49 + 8) = v44;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
    v51 = v50;
    v69 = v50;
    *(_QWORD *)&v68 = v46;
    outlined init with take of Any(&v68, v67);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v54 = swift_bridgeObjectRetain();
    v55 = (_QWORD *)specialized AnimationState.subscript.getter(v54, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    v56 = a4 + a9;
    v57 = a5 + a10;
    v58 = a6 + a11;
    v60 = v55[2];
    v59 = v55[3];
    if (v60 >= v59 >> 1)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v55);
    v55[2] = v60 + 1;
    v61 = (double *)&v55[5 * v60];
    v61[4] = v56;
    v61[5] = v57;
    v61[6] = v58;
    v61[7] = a7 + a12;
    *((_QWORD *)v61 + 8) = v53;
    v69 = v51;
    *(_QWORD *)&v68 = v55;
    outlined init with take of Any(&v68, v67);
    v62 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v43;
    v63 = *a1;
    swift_retain();
    v64 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v63, a3, a8);
    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = v64;
    *a1 = v65;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  uint64_t result;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  double *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  double v74;
  unint64_t v76;
  _OWORD v77[2];
  __int128 v78;
  uint64_t v79;

  v27 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  if (v27 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a8, a9);
  v74 = a8;
  if (v27 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  v28 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v29 = swift_dynamicCastClass();
  if (v29)
  {
    v30 = *(_QWORD **)(v29 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v32 = swift_bridgeObjectRetain();
    v33 = (_QWORD *)specialized AnimationState.subscript.getter(v32, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    v34 = a4 + a9;
    v35 = a5 + a10;
    v37 = v33[2];
    v36 = v33[3];
    if (v37 >= v36 >> 1)
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v33);
    v33[2] = v37 + 1;
    v38 = (double *)&v33[5 * v37];
    v38[4] = v34;
    v38[5] = v35;
    v38[6] = a6 + a11;
    v38[7] = a7 + a12;
    *((_QWORD *)v38 + 8) = v31;
    type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
    v79 = v39;
    *(_QWORD *)&v78 = v33;
    specialized Dictionary.subscript.setter((uint64_t)&v78, v39);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    v41 = v30[2];
    v40 = v30[3];
    if (v41 >= v40 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v30);
    v30[2] = v41 + 1;
    v42 = (double *)&v30[2 * v41];
    *((_QWORD *)v42 + 4) = a3;
    v42[5] = a8;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v30;
    *a1 = result;
  }
  else
  {
    v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v45 = *a2;
    swift_bridgeObjectRetain();
    v46 = swift_bridgeObjectRetain();
    v47 = (_QWORD *)specialized AnimationState.subscript.getter(v46, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
    v48 = v47[2];
    v49 = v47[3];
    v50 = v48 + 1;
    if (v48 >= v49 >> 1)
    {
      v68 = v47;
      v69 = v47[2];
      v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v48 + 1, 1, v68);
      v48 = v69;
      v47 = v70;
    }
    v47[2] = v50;
    v51 = (double *)&v47[5 * v48];
    v51[4] = a4;
    v51[5] = a5;
    v51[6] = a6;
    v51[7] = a7;
    *((_QWORD *)v51 + 8) = v45;
    type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
    v53 = v52;
    v79 = v52;
    *(_QWORD *)&v78 = v47;
    outlined init with take of Any(&v78, v77);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v77, v53, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v55 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v56 = swift_bridgeObjectRetain();
    v57 = (_QWORD *)specialized AnimationState.subscript.getter(v56, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
    v58 = a4 + a9;
    v59 = a5 + a10;
    v60 = a6 + a11;
    v61 = v57[2];
    v62 = v57[3];
    v63 = v61 + 1;
    if (v61 >= v62 >> 1)
    {
      v76 = v61 + 1;
      v71 = v57;
      v72 = v57[2];
      v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v61 + 1, 1, v71);
      v61 = v72;
      v63 = v76;
      v57 = v73;
    }
    v57[2] = v63;
    v64 = (double *)&v57[5 * v61];
    v64[4] = v58;
    v64[5] = v59;
    v64[6] = v60;
    v64[7] = a7 + a12;
    *((_QWORD *)v64 + 8) = v55;
    v79 = v53;
    *(_QWORD *)&v78 = v57;
    outlined init with take of Any(&v78, v77);
    v65 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v77, v53, v65);
    swift_bridgeObjectRelease();
    *a2 = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v66 + 32) = v28;
    *(_QWORD *)(v66 + 40) = 0;
    *(_QWORD *)(v66 + 48) = a3;
    *(double *)(v66 + 56) = v74;
    v67 = swift_allocObject();
    *(_QWORD *)(v67 + 16) = v66;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *a1 = v67;
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  double v48;
  double v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  double *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _OWORD v64[2];
  __int128 v65;
  uint64_t v66;

  v16 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  if (v16 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a6, a7);
  v17 = v16;
  result = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v17 == result)
  {
    __break(1u);
  }
  else
  {
    v19 = *a1;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    v20 = swift_dynamicCastClass();
    if (v20)
    {
      v21 = *(_QWORD **)(v20 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v23 = swift_bridgeObjectRetain();
      v24 = (_QWORD *)specialized AnimationState.subscript.getter(v23, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      v25 = a4 + a7;
      v26 = a5 + a8;
      v28 = v24[2];
      v27 = v24[3];
      if (v28 >= v27 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v24);
      v24[2] = v28 + 1;
      v29 = (double *)&v24[3 * v28];
      v29[4] = v25;
      v29[5] = v26;
      *((_QWORD *)v29 + 6) = v22;
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>(0);
      v66 = v30;
      *(_QWORD *)&v65 = v24;
      specialized Dictionary.subscript.setter((uint64_t)&v65, v30);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      v32 = v21[2];
      v31 = v21[3];
      if (v32 >= v31 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v21);
      v21[2] = v32 + 1;
      v33 = (double *)&v21[2 * v32];
      *((_QWORD *)v33 + 4) = a3;
      v33[5] = a6;
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v21;
      *a1 = result;
    }
    else
    {
      v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v35 = *a2;
      swift_bridgeObjectRetain();
      v36 = swift_bridgeObjectRetain();
      v37 = (_QWORD *)specialized AnimationState.subscript.getter(v36, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
      v38 = v37[2];
      v39 = v37[3];
      v40 = v38 + 1;
      if (v38 >= v39 >> 1)
      {
        v57 = v37;
        v58 = v37[2];
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v38 + 1, 1, v57);
        v38 = v58;
        v37 = v59;
      }
      v37[2] = v40;
      v41 = (double *)&v37[3 * v38];
      v41[4] = a4;
      v41[5] = a5;
      *((_QWORD *)v41 + 6) = v35;
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>(0);
      v43 = v42;
      v66 = v42;
      *(_QWORD *)&v65 = v37;
      outlined init with take of Any(&v65, v64);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v43, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v46 = swift_bridgeObjectRetain();
      v47 = (_QWORD *)specialized AnimationState.subscript.getter(v46, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
      v48 = a4 + a7;
      v49 = a5 + a8;
      v50 = v47[2];
      v51 = v47[3];
      v52 = v50 + 1;
      if (v50 >= v51 >> 1)
      {
        v63 = v50 + 1;
        v60 = v47;
        v61 = v47[2];
        v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v50 + 1, 1, v60);
        v50 = v61;
        v52 = v63;
        v47 = v62;
      }
      v47[2] = v52;
      v53 = (double *)&v47[3 * v50];
      v53[4] = v48;
      v53[5] = v49;
      *((_QWORD *)v53 + 6) = v45;
      v66 = v43;
      *(_QWORD *)&v65 = v47;
      outlined init with take of Any(&v65, v64);
      v54 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v43, v54);
      swift_bridgeObjectRelease();
      *a2 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v55 + 32) = v19;
      *(_QWORD *)(v55 + 40) = 0;
      *(_QWORD *)(v55 + 48) = a3;
      *(double *)(v55 + 56) = a6;
      v56 = swift_allocObject();
      *(_QWORD *)(v56 + 16) = v55;
      swift_retain();
      result = swift_bridgeObjectRelease();
      *a1 = v56;
    }
  }
  return result;
}

ValueMetadata *specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  ValueMetadata *result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  _OWORD v57[2];
  __int128 v58;
  uint64_t v59;

  result = (ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (result == &type metadata for ResolvedGradientVector)
  {
    __break(1u);
  }
  else
  {
    v56 = a5;
    v17 = *a1;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    v18 = swift_dynamicCastClass();
    if (v18)
    {
      v19 = *(_QWORD **)(v18 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      *(_QWORD *)&v58 = a3;
      BYTE8(v58) = a4;
      *(_QWORD *)&v57[0] = a6;
      BYTE8(v57[0]) = a7;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v57, 1.0);
      v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v21 = v58;
      v22 = BYTE8(v58);
      v23 = swift_bridgeObjectRetain();
      v24 = (_QWORD *)specialized AnimationState.subscript.getter(v23, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      v26 = v24[2];
      v25 = v24[3];
      if (v26 >= v25 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
      v24[2] = v26 + 1;
      v27 = &v24[3 * v26];
      v27[4] = v21;
      *((_BYTE *)v27 + 40) = v22;
      v27[6] = v20;
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
      v59 = v28;
      *(_QWORD *)&v58 = v24;
      specialized Dictionary.subscript.setter((uint64_t)&v58, v28);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      v30 = v19[2];
      v29 = v19[3];
      if (v30 >= v29 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v19);
      v19[2] = v30 + 1;
      v31 = (double *)&v19[2 * v30];
      *((_QWORD *)v31 + 4) = v56;
      v31[5] = a8;
      result = (ValueMetadata *)swift_allocObject();
      v32 = (uint64_t)result;
      result[1].Kind = (uint64_t)v19;
    }
    else
    {
      v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v54 = a2;
      v34 = *a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35 = swift_bridgeObjectRetain();
      v36 = (_QWORD *)specialized AnimationState.subscript.getter(v35, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector);
      swift_bridgeObjectRelease();
      v55 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      v38 = v36[2];
      v37 = v36[3];
      if (v38 >= v37 >> 1)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
      v36[2] = v38 + 1;
      v39 = &v36[3 * v38];
      v39[4] = a3;
      *((_BYTE *)v39 + 40) = a4;
      v39[6] = v34;
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
      v41 = v40;
      v59 = v40;
      *(_QWORD *)&v58 = v36;
      outlined init with take of Any(&v58, v57);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v57, v41, isUniquelyReferenced_nonNull_native);
      v43 = v33;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v58 = a3;
      BYTE8(v58) = a4;
      *(_QWORD *)&v57[0] = a6;
      BYTE8(v57[0]) = a7;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v57, 1.0);
      v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v45 = v58;
      v46 = BYTE8(v58);
      v47 = swift_bridgeObjectRetain();
      v48 = (_QWORD *)specialized AnimationState.subscript.getter(v47, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
      v50 = v48[2];
      v49 = v48[3];
      if (v50 >= v49 >> 1)
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
      v48[2] = v50 + 1;
      v51 = &v48[3 * v50];
      v51[4] = v45;
      *((_BYTE *)v51 + 40) = v46;
      v51[6] = v44;
      v59 = v41;
      *(_QWORD *)&v58 = v48;
      outlined init with take of Any(&v58, v57);
      v52 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v57, v41, v52);
      swift_bridgeObjectRelease();
      *v54 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v53 + 32) = v17;
      *(_QWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = v56;
      *(double *)(v53 + 56) = a8;
      v32 = swift_allocObject();
      *(_QWORD *)(v32 + 16) = v53;
      swift_retain();
      result = (ValueMetadata *)swift_bridgeObjectRelease();
      a1 = v55;
    }
    *a1 = v32;
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, double *a3, uint64_t a4, uint64_t a5, double a6)
{
  float32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  double v19;
  float32x2_t v20;
  float32x2_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  float32x2_t v46;
  float32x2_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  float32x4_t v51;
  float32x2_t v52;
  unint64_t v53;
  unint64_t v54;
  float32x4_t *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  float32x2_t v62;
  float32x4_t v63;
  double v64;
  float32x4_t v65;
  float32x4_t v66;
  _OWORD v67[2];
  __int128 v68;
  uint64_t v69;

  v64 = *a3;
  v12 = (float32x2_t)a3[2];
  v62 = (float32x2_t)a3[1];
  v13 = type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  if (v13 == MEMORY[0x24BEE13C8])
  {
    *(double *)&v68 = v64;
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v64, a6, *(double *)a5);
  }
  else
  {
    v14 = v13;
    result = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v14 == result)
    {
      __break(1u);
    }
    else
    {
      v16 = *a1;
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      v17 = swift_dynamicCastClass();
      if (v17)
      {
        v18 = *(_QWORD **)(v17 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        v19 = *(double *)a5;
        v20 = *(float32x2_t *)(a5 + 8);
        v21 = *(float32x2_t *)(a5 + 16);
        v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v23 = swift_bridgeObjectRetain();
        v24 = (_QWORD *)specialized AnimationState.subscript.getter(v23, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        v25 = vadd_f32(*(float32x2_t *)&v64, *(float32x2_t *)&v19);
        v26 = vadd_f32(v62, v20);
        v27 = vadd_f32(v12, v21);
        v29 = v24[2];
        v28 = v24[3];
        if (v29 >= v28 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v24);
        v24[2] = v29 + 1;
        v30 = &v24[4 * v29];
        v30[4] = v25;
        v30[5] = v26;
        v30[6] = v27;
        v30[7] = v22;
        type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
        v69 = v31;
        *(_QWORD *)&v68 = v24;
        specialized Dictionary.subscript.setter((uint64_t)&v68, v31);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
        v33 = v18[2];
        v32 = v18[3];
        if (v33 >= v32 >> 1)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v18);
        v18[2] = v33 + 1;
        v34 = (double *)&v18[2 * v33];
        *((_QWORD *)v34 + 4) = a4;
        v34[5] = a6;
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v18;
        *a1 = result;
      }
      else
      {
        v61 = a1;
        v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v36 = *a2;
        swift_bridgeObjectRetain();
        v37 = swift_bridgeObjectRetain();
        v38 = (_QWORD *)specialized AnimationState.subscript.getter(v37, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        v40 = v38[2];
        v39 = v38[3];
        *(double *)&v41 = v64;
        if (v40 >= v39 >> 1)
        {
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
          *(double *)&v41 = v64;
          v38 = v59;
        }
        v38[2] = v40 + 1;
        *((float32x2_t *)&v41 + 1) = v62;
        v42 = &v38[4 * v40];
        *((_OWORD *)v42 + 2) = v41;
        v42[6] = v12;
        v42[7] = v36;
        type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
        v44 = v43;
        v69 = v43;
        *(_QWORD *)&v68 = v38;
        outlined init with take of Any(&v68, v67);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v44, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        v63 = *(float32x4_t *)a5;
        v65 = *(float32x4_t *)a3;
        v46 = (float32x2_t)a3[2];
        v47 = *(float32x2_t *)(a5 + 16);
        v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v49 = swift_bridgeObjectRetain();
        v50 = (_QWORD *)specialized AnimationState.subscript.getter(v49, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
        v51 = vaddq_f32(v65, v63);
        v52 = vadd_f32(v46, v47);
        v54 = v50[2];
        v53 = v50[3];
        if (v54 >= v53 >> 1)
        {
          v66 = v51;
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v50);
          v51 = v66;
          v50 = v60;
        }
        v50[2] = v54 + 1;
        v55 = (float32x4_t *)&v50[4 * v54];
        v55[2] = v51;
        *(float32x2_t *)v55[3].f32 = v52;
        v55[3].i64[1] = v48;
        v69 = v44;
        *(_QWORD *)&v68 = v50;
        outlined init with take of Any(&v68, v67);
        v56 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v44, v56);
        swift_bridgeObjectRelease();
        *a2 = v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v57 = swift_allocObject();
        *(_OWORD *)(v57 + 16) = xmmword_2352828C0;
        *(_QWORD *)(v57 + 32) = v16;
        *(_QWORD *)(v57 + 40) = 0;
        *(_QWORD *)(v57 + 48) = a4;
        *(double *)(v57 + 56) = a6;
        v58 = swift_allocObject();
        *(_QWORD *)(v58 + 16) = v57;
        swift_retain();
        result = swift_bridgeObjectRelease();
        *v61 = v58;
      }
    }
  }
  return result;
}

char *AnimatorState.deinit()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t);

  v1 = *(_QWORD *)v0;
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(&v0[*(_QWORD *)(*(_QWORD *)v0 + 112)], v2);
  v3(&v0[*(_QWORD *)(*(_QWORD *)v0 + 144)], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AnimatorState.__deallocating_deinit()
{
  AnimatorState.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized static AnimatableArray.+= infix(_:_:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64x2_t v9;
  float64x2_t v10;
  double v11;
  float32x2_t v12;
  int8x16_t v13;
  int64x2_t v14;
  float64x2_t v15;
  double v16;
  char v17;
  _QWORD *v18;

  v2 = *(_QWORD **)result;
  if (*(_QWORD *)(a2 + 16) >= *(_QWORD *)(*(_QWORD *)result + 16))
    v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  else
    v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v5 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (_QWORD *)result;
    }
    v6 = 0;
    v7 = 0;
    v8 = v2[2];
    do
    {
      if (v7 >= v8)
      {
        __break(1u);
        goto LABEL_17;
      }
      v14 = *(int64x2_t *)(a2 + v6 + 40);
      v15 = *(float64x2_t *)(a2 + v6 + 56);
      v16 = *(double *)(a2 + v6 + 72);
      v17 = *(_BYTE *)(a2 + v6 + 80);
      v18 = &v2[v6 / 8];
      *(float *)&v2[v6 / 8 + 4] = *(float *)(a2 + v6 + 32) + *(float *)&v2[v6 / 8 + 4];
      if ((v17 & 1) == 0)
      {
        if ((v18[10] & 1) != 0)
        {
          v18[5] = v14.i64[0];
          *((int8x16_t *)v18 + 3) = vextq_s8((int8x16_t)v14, (int8x16_t)v15, 8uLL);
          v18[8] = *(_QWORD *)&v15.f64[1];
          v11 = v16;
        }
        else
        {
          v9 = *(int64x2_t *)(v18 + 5);
          v10 = *(float64x2_t *)(v18 + 7);
          v11 = *((double *)v18 + 9) + v16;
          v12 = vadd_f32((float32x2_t)vmovn_s64(v14), (float32x2_t)vmovn_s64(v9));
          v13.i64[0] = v12.u32[0];
          v13.i64[1] = v12.u32[1];
          *(int8x16_t *)(v18 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v14, 0x20uLL), (float32x2_t)vshrn_n_s64(v9, 0x20uLL)), 0x20uLL), v13);
          *(float64x2_t *)(v18 + 7) = vaddq_f64(v10, v15);
        }
        *((double *)v18 + 9) = v11;
        *((_BYTE *)v18 + 80) = 0;
      }
      ++v7;
      v6 += 56;
    }
    while (v3 != v7);
    *v5 = v2;
  }
  return result;
}

{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  unint64_t i;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 >= *(_QWORD *)(*(_QWORD *)result + 16))
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (_QWORD *)result;
    }
    for (i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= v2[2])
        goto LABEL_13;
      *(float32x4_t *)&v2[2 * i + 4] = vaddq_f32(*(float32x4_t *)(a2 + 32 + 16 * i), *(float32x4_t *)&v2[2 * i + 4]);
    }
    *v6 = v2;
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  unint64_t i;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 >= *(_QWORD *)(*(_QWORD *)result + 16))
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = result;
    }
    for (i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= *(_QWORD *)(v2 + 16))
        goto LABEL_13;
      *(float *)(v2 + 4 * i + 32) = *(float *)(a2 + 32 + 4 * i) + *(float *)(v2 + 4 * i + 32);
    }
    *v6 = v2;
  }
  return result;
}

uint64_t specialized static AnimatableArray.-= infix(_:_:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64x2_t v9;
  float64x2_t v10;
  double v11;
  float32x2_t v12;
  int8x16_t v13;
  int64x2_t v14;
  float64x2_t v15;
  double v16;
  char v17;
  _QWORD *v18;

  v2 = *(_QWORD **)result;
  if (*(_QWORD *)(a2 + 16) >= *(_QWORD *)(*(_QWORD *)result + 16))
    v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  else
    v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v5 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (_QWORD *)result;
    }
    v6 = 0;
    v7 = 0;
    v8 = v2[2];
    do
    {
      if (v7 >= v8)
      {
        __break(1u);
        goto LABEL_17;
      }
      v14 = *(int64x2_t *)(a2 + v6 + 40);
      v15 = *(float64x2_t *)(a2 + v6 + 56);
      v16 = *(double *)(a2 + v6 + 72);
      v17 = *(_BYTE *)(a2 + v6 + 80);
      v18 = &v2[v6 / 8];
      *(float *)&v2[v6 / 8 + 4] = *(float *)&v2[v6 / 8 + 4] - *(float *)(a2 + v6 + 32);
      if ((v17 & 1) == 0)
      {
        if ((v18[10] & 1) != 0)
        {
          v18[5] = v14.i64[0];
          *((int8x16_t *)v18 + 3) = vextq_s8((int8x16_t)v14, (int8x16_t)v15, 8uLL);
          v18[8] = *(_QWORD *)&v15.f64[1];
          v11 = v16;
        }
        else
        {
          v9 = *(int64x2_t *)(v18 + 5);
          v10 = *(float64x2_t *)(v18 + 7);
          v11 = *((double *)v18 + 9) - v16;
          v12 = vsub_f32((float32x2_t)vmovn_s64(v9), (float32x2_t)vmovn_s64(v14));
          v13.i64[0] = v12.u32[0];
          v13.i64[1] = v12.u32[1];
          *(int8x16_t *)(v18 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v9, 0x20uLL), (float32x2_t)vshrn_n_s64(v14, 0x20uLL)), 0x20uLL), v13);
          *(float64x2_t *)(v18 + 7) = vsubq_f64(v10, v15);
        }
        *((double *)v18 + 9) = v11;
        *((_BYTE *)v18 + 80) = 0;
      }
      ++v7;
      v6 += 56;
    }
    while (v3 != v7);
    *v5 = v2;
  }
  return result;
}

{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  unint64_t i;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 >= *(_QWORD *)(*(_QWORD *)result + 16))
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (_QWORD *)result;
    }
    for (i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= v2[2])
        goto LABEL_13;
      *(float32x4_t *)&v2[2 * i + 4] = vsubq_f32(*(float32x4_t *)&v2[2 * i + 4], *(float32x4_t *)(a2 + 32 + 16 * i));
    }
    *v6 = v2;
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  unint64_t i;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 >= *(_QWORD *)(*(_QWORD *)result + 16))
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = result;
    }
    for (i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= *(_QWORD *)(v2 + 16))
        goto LABEL_13;
      *(float *)(v2 + 4 * i + 32) = *(float *)(v2 + 4 * i + 32) - *(float *)(a2 + 32 + 4 * i);
    }
    *v6 = v2;
  }
  return result;
}

uint64_t type metadata accessor for AnimatableAttributeHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatableAttributeHelper);
}

uint64_t type metadata accessor for AnimatableAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatableAttribute);
}

uint64_t specialized AnimatableAttribute.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x626174616D696E41;
}

uint64_t type metadata accessor for AnimatorState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatorState);
}

uint64_t specialized AnimatableAttributeHelper.transaction.getter()
{
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t specialized AnimatableAttributeHelper.transaction.setter()
{
  return AGGraphSetValue();
}

uint64_t type metadata accessor for AnimatorState.Fork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatorState.Fork);
}

void base witness table accessor for _AttributeBody in AnimatableAttribute<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for AnimatableAttribute<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AnimatableFrameAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AnimatableFrameAttributeVFD(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_DWORD *sub_23501EAD0@<X0>(_DWORD *a1@<X8>)
{
  return AnimatableAttributeHelper.phase.getter(a1);
}

uint64_t sub_23501EAF0()
{
  return AnimatableAttributeHelper.phase.setter();
}

uint64_t sub_23501EB24()
{
  return 16;
}

__n128 sub_23501EB30(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23501EB3C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = AnimatableAttributeHelper.$phase.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23501EB64(unsigned int *a1)
{
  return AnimatableAttributeHelper.$phase.setter(*a1);
}

uint64_t sub_23501EB88()
{
  return 16;
}

__n128 sub_23501EB94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_23501EBA0@<D0>(_QWORD *a1@<X8>)
{
  return AnimatableAttributeHelper.time.getter(a1);
}

uint64_t sub_23501EBC0()
{
  return AnimatableAttributeHelper.time.setter();
}

uint64_t sub_23501EBF4()
{
  return 16;
}

__n128 sub_23501EC00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23501EC0C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = AnimatableAttribute.$environment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23501EC34(unsigned int *a1)
{
  return AnimatableAttributeHelper.$time.setter(*a1);
}

uint64_t sub_23501EC58()
{
  return 16;
}

__n128 sub_23501EC64(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23501EC78()
{
  return 16;
}

__n128 sub_23501EC84(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23501EC90@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = AnimatableAttributeHelper.$transaction.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23501ECB8(unsigned int *a1)
{
  return AnimatableAttributeHelper.$transaction.setter(*a1);
}

uint64_t sub_23501ECDC()
{
  return 16;
}

__n128 sub_23501ECE8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for AnimatableAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AnimatableAttributeHelper(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatableAttribute(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  _QWORD *v26;
  _QWORD *v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  v10 = v9 + 7;
  v11 = v6 & 0x100000;
  if (v7 > 7
    || v11 != 0
    || ((((((v9 + 7 + ((v7 + 12) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + (v8 & (v7 + 8))) | 4) > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + (v8 & (v7 + 16)));
  }
  else
  {
    v15 = AssociatedTypeWitness;
    v16 = ~v7;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v17 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v18 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v17 = *v18;
    v19 = v8 & ((unint64_t)v17 + 11);
    v20 = v8 & ((unint64_t)v18 + 11);
    *(_DWORD *)v19 = *(_DWORD *)v20;
    *(_DWORD *)(v19 | 4) = *(_DWORD *)(v20 | 4);
    v21 = (_DWORD *)((v19 + 11) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_DWORD *)((v20 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = v7 + 4;
    v24 = (void *)(((unint64_t)v21 + v23) & v16);
    v25 = (const void *)(((unint64_t)v22 + v23) & v16);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v25, 1, AssociatedTypeWitness))
    {
      memcpy(v24, v25, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v24, v25, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v15);
    }
    v26 = (_QWORD *)(((unint64_t)v24 + v10) & 0xFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)v25 + v10) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v27;
    *(_DWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatableAttribute(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;

  v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80)
      + ((((v1 + (*(unsigned __int8 *)(v3 + 80) | 7) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return swift_release();
}

_DWORD *initializeWithCopy for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  void *v13;
  const void *v14;
  int v15;
  size_t v16;
  size_t v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 4;
  v9 = (_DWORD *)(((unint64_t)v3 + v8) & ~(v7 | 7));
  v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (void *)(((unint64_t)v11 + v7 + 4) & ~v7);
  v14 = (const void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v14, 1, AssociatedTypeWitness))
  {
    v15 = *(_DWORD *)(v6 + 84);
    v16 = *(_QWORD *)(v6 + 64);
    if (v15)
      v17 = v16;
    else
      v17 = v16 + 1;
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v13, v14, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, AssociatedTypeWitness);
    v15 = *(_DWORD *)(v6 + 84);
    v16 = *(_QWORD *)(v6 + 64);
  }
  if (v15)
    v18 = v16;
  else
    v18 = v16 + 1;
  v19 = (_QWORD *)(((unint64_t)v13 + v18 + 7) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  *(_DWORD *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 4;
  v9 = (_DWORD *)(((unint64_t)v3 + v8) & ~(v7 | 7));
  v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (void *)(((unint64_t)v11 + v7 + 4) & ~v7);
  v14 = (void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v16 = v15(v13, 1, AssociatedTypeWitness);
  v17 = v15(v14, 1, AssociatedTypeWitness);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v13, v14, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v13, v14, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v13, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v18 = *(_QWORD *)(v6 + 64);
  else
    v18 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v13, v14, v18);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v19 = *(_QWORD *)(v6 + 64);
  else
    v19 = *(_QWORD *)(v6 + 64) + 1;
  v20 = (uint64_t)v13 + v19 + 7;
  v21 = (uint64_t)v14 + v19 + 7;
  v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v23 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v22 & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  void *v13;
  const void *v14;
  int v15;
  size_t v16;
  size_t v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 4;
  v9 = (_DWORD *)(((unint64_t)v3 + v8) & ~(v7 | 7));
  v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (void *)(((unint64_t)v11 + v7 + 4) & ~v7);
  v14 = (const void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v14, 1, AssociatedTypeWitness))
  {
    v15 = *(_DWORD *)(v6 + 84);
    v16 = *(_QWORD *)(v6 + 64);
    if (v15)
      v17 = v16;
    else
      v17 = v16 + 1;
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v13, v14, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, AssociatedTypeWitness);
    v15 = *(_DWORD *)(v6 + 84);
    v16 = *(_QWORD *)(v6 + 64);
  }
  if (v15)
    v18 = v16;
  else
    v18 = v16 + 1;
  v19 = (_QWORD *)(((unint64_t)v13 + v18 + 7) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  *(_DWORD *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 4;
  v9 = (_DWORD *)(((unint64_t)v3 + v8) & ~(v7 | 7));
  v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (void *)(((unint64_t)v11 + v7 + 4) & ~v7);
  v14 = (void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v16 = v15(v13, 1, AssociatedTypeWitness);
  v17 = v15(v14, 1, AssociatedTypeWitness);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v13, v14, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v13, v14, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v13, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v18 = *(_QWORD *)(v6 + 64);
  else
    v18 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v13, v14, v18);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v19 = *(_QWORD *)(v6 + 64);
  else
    v19 = *(_QWORD *)(v6 + 64) + 1;
  v20 = (uint64_t)v13 + v19 + 7;
  v21 = (_QWORD *)(((unint64_t)v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) = *v21;
  v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_release();
  *(_DWORD *)(v22 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableAttribute(_DWORD *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  v11 = v8 + 7;
  if (v7 < a2
    && *((_BYTE *)a1
       + ((((((v11 + ((v9 + 12) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + ((v9 + 8) & ~v10)) | 4)))
  {
    return v7 + *a1 + 1;
  }
  v13 = (v9
       + (((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 4) & ~v10) + 11) & 0xFFFFFFFFFFFFFFF8)
       + 4) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v15 = *(_QWORD *)((v11 + v13) & 0xFFFFFFFFFFFFF8);
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((v15 + 1) >= 2)
      return v15;
    else
      return 0;
  }
  else
  {
    v14 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v13);
    if (v14 >= 2)
      return v14 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for AnimatableAttribute(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  void *v15;
  int v16;
  _QWORD *v17;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 1;
  if (!v7)
    v8 = 0;
  if (v8 <= 0x7FFFFFFE)
    v9 = 2147483646;
  else
    v9 = v8;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 + 8) & ~(v10 | 7);
  v12 = (v10 + 12) & ~v10;
  if (v7)
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = *(_QWORD *)(v6 + 64) + 1;
  v14 = (v11 + ((((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) | 4;
  if (v9 >= a2)
  {
    if (v9 < a3)
      *((_BYTE *)a1 + v14) = 0;
    if (a2)
    {
      v15 = (void *)((v10
                    + (((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + (v10 | 7) + 4) & ~(v10 | 7)) + 11) & 0xFFFFFFFFFFFFFFF8)
                    + 4) & ~v10);
      if (v8 < 0x7FFFFFFE)
      {
        v17 = (_QWORD *)(((unint64_t)v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *v17 = 0;
          *(_DWORD *)v17 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *v17 = a2;
        }
      }
      else if (v8 >= a2)
      {
        (*(void (**)(void *, _QWORD))(v6 + 56))(v15, a2 + 1);
      }
      else if ((_DWORD)v13)
      {
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        bzero(v15, v13);
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    bzero(a1, (v11 + ((((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) | 4);
    *a1 = ~v9 + a2;
    if (v9 < a3)
      *((_BYTE *)a1 + v14) = 1;
  }
}

void sub_23501F974()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x23501F960);
}

void sub_23501F97C()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x23501F960);
}

void sub_23501F98C()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x23501F960);
}

uint64_t destroy for AnimatableFrameAttribute()
{
  return swift_release();
}

uint64_t initializeWithCopy for AnimatableFrameAttribute(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatableFrameAttribute(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  return a1;
}

uint64_t assignWithTake for AnimatableFrameAttribute(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableFrameAttribute(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 85))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimatableFrameAttribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 85) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 85) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimatableFrameAttribute()
{
  return &type metadata for AnimatableFrameAttribute;
}

uint64_t initializeWithCopy for AnimatableFrameAttributeVFD(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatableFrameAttributeVFD(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  return a1;
}

__n128 __swift_memcpy146_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AnimatableFrameAttributeVFD(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableFrameAttributeVFD(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 146))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimatableFrameAttributeVFD(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 146) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 146) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimatableFrameAttributeVFD()
{
  return &type metadata for AnimatableFrameAttributeVFD;
}

uint64_t type metadata completion function for AnimatableAttributeHelper()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatableAttributeHelper(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  void *v19;
  const void *v20;
  _QWORD *v21;
  _QWORD *v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((v8 + 7 + ((v7 + 12) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v14 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v15 = *v16;
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v17 = *v18;
    v19 = (void *)(((unint64_t)v17 + v7 + 4) & ~v7);
    v20 = (const void *)(((unint64_t)v18 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v20, 1, AssociatedTypeWitness))
    {
      memcpy(v19, v20, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v14);
    }
    v21 = (_QWORD *)(((unint64_t)v19 + v9) & 0xFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)v20 + v9) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    *(_DWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatableAttributeHelper(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;

  v1 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return swift_release();
}

_DWORD *initializeWithCopy for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = (_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  v11 = (void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v13 = v12(v10, 1, AssociatedTypeWitness);
  v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = (uint64_t)v10 + v16 + 7;
  v18 = (uint64_t)v11 + v16 + 7;
  v19 = (v18 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v20 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v19 & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = (_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  v11 = (void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v13 = v12(v10, 1, AssociatedTypeWitness);
  v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = (uint64_t)v10 + v16 + 7;
  v18 = (_QWORD *)(((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v18;
  v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_release();
  *(_DWORD *)(v19 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableAttributeHelper(_DWORD *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2
    && *((_BYTE *)a1 + ((((v10 + ((v9 + 12) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v7 + *a1 + 1;
  }
  v12 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v14 = *(_QWORD *)((v10 + v12) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((v14 + 1) >= 2)
      return v14;
    else
      return 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v12);
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for AnimatableAttributeHelper(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  void *v14;
  int v15;
  _QWORD *v16;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 1;
  if (!v7)
    v8 = 0;
  if (v8 <= 0x7FFFFFFE)
    v9 = 2147483646;
  else
    v9 = v8;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 + 12) & ~v10;
  if (v7)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = *(_QWORD *)(v6 + 64) + 1;
  v13 = (((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v9 >= a2)
  {
    if (v9 < a3)
      *((_BYTE *)a1 + v13) = 0;
    if (a2)
    {
      v14 = (void *)(((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 4) & ~v10);
      if (v8 < 0x7FFFFFFE)
      {
        v16 = (_QWORD *)(((unint64_t)v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *v16 = 0;
          *(_DWORD *)v16 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *v16 = a2;
        }
      }
      else if (v8 >= a2)
      {
        (*(void (**)(void *, _QWORD))(v6 + 56))(v14, a2 + 1);
      }
      else if ((_DWORD)v12)
      {
        if (v12 <= 3)
          v15 = v12;
        else
          v15 = 4;
        bzero(v14, v12);
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    bzero(a1, (((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4);
    *a1 = ~v9 + a2;
    if (v9 < a3)
      *((_BYTE *)a1 + v13) = 1;
  }
}

void sub_235020A4C()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x235020A38);
}

void sub_235020A54()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x235020A38);
}

void sub_235020A64()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x235020A38);
}

uint64_t type metadata completion function for AnimatorState()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t method lookup function for AnimatorState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnimatorState.__allocating_init(animation:interval:at:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t storeEnumTagSinglePayload for AnimatorState.Phase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_235020B8C + 4 * byte_2352BDAA1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_235020BC0 + 4 * byte_2352BDA9C[v4]))();
}

uint64_t sub_235020BC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235020BC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235020BD0);
  return result;
}

uint64_t sub_235020BDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235020BE4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_235020BE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235020BF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for AnimatorState.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatorState.Phase);
}

void *type metadata accessor for FrameVelocityFilter()
{
  return &unk_25062C8A8;
}

uint64_t type metadata completion function for AnimatorState.Fork()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatorState.Fork(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    *(_QWORD *)((v7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + v15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AnimatorState.Fork(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AnimatorState.Fork(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AnimatorState.Fork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v6 + v8 + 8) & ~v8;
  v10 = (v8 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(uint64_t, unint64_t))(v7 + 24))(v9, v10);
  *(_QWORD *)((*(_QWORD *)(v7 + 64) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v7 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for AnimatorState.Fork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for AnimatorState.Fork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)v5;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v6 + v8 + 8) & ~v8;
  v10 = (v8 + 8 + v5) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  *(_QWORD *)((*(_QWORD *)(v7 + 64) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v7 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatorState.Fork(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235021184 + 4 * byte_2352BDAA6[v10]))();
  }
}

void storeEnumTagSinglePayload for AnimatorState.Fork(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_235021314()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235021384);
}

void sub_23502131C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235021324);
  JUMPOUT(0x235021384);
}

void sub_235021334()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235021384);
}

void sub_23502133C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235021384);
}

void sub_235021344(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x235021380);
      JUMPOUT(0x23502137CLL);
    }
    JUMPOUT(0x235021350);
  }
  JUMPOUT(0x235021384);
}

void base witness table accessor for Equatable in AnimatorState<A>.Phase()
{
  JUMPOUT(0x23B7C9C04);
}

unint64_t lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultCombiningAnimation, &type metadata for DefaultCombiningAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultCombiningAnimation, &type metadata for DefaultCombiningAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultCombiningAnimation, &type metadata for DefaultCombiningAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
}

uint64_t outlined destroy of Slice<IndexSet>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>)
  {
    v2 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    v3 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>)
  {
    v2 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    v3 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
  }
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?);
  }
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
  }
}

void type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>?)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>?);
  }
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

uint64_t outlined init with copy of _AnyAnimatableData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _AnyAnimatableData?, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *outlined assign with copy of _AnyAnimatableData(_QWORD *a1, _QWORD *a2)
{
  assignWithCopy for _AnyAnimatableData(a2, a1);
  return a2;
}

uint64_t outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnimatorState<_AnyAnimatableData>.Fork(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

uint64_t outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

uint64_t outlined copy of _ShapeStyle_Pack.Fill.AnimatableData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  if (a11 != 255)
    return outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2)
{
  __swift_memcpy81_8(a2, a1);
  return a2;
}

uint64_t outlined copy of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(uint64_t a1)
{
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(uint64_t a1)
{
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

uint64_t outlined retain of AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_BYTE *)(a1 + 96);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v10, v2, v3, v4, v6, v5, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

uint64_t outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
  }
}

uint64_t outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
  }
}

uint64_t _AnimationModifier.animation.getter()
{
  return swift_retain();
}

uint64_t _AnimationModifier.animation.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_AnimationModifier.animation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t _AnimationModifier.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*_AnimationModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationModifier.init(animation:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;

  *a5 = a1;
  v7 = (char *)a5 + *(int *)(type metadata accessor for _AnimationModifier(0, a3, a4, a4) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v7, a2, a3);
}

uint64_t type metadata accessor for _AnimationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnimationModifier);
}

uint64_t static _AnimationModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int OffsetAttribute2;
  int CurrentAttribute;
  int v21;
  id v22;
  void *v23;
  id v24;
  uint64_t Context;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;

  v43 = a2;
  v48 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v39 - v9;
  v12 = type metadata accessor for ValueTransactionSeed(0, a3, a4, v11);
  v40 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v39 - v14;
  v16 = *a1;
  v17 = *(_QWORD *)(a3 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v42 = a4;
  if (v18)
    closure #1 in static _AnimationModifier._makeInputs(modifier:inputs:)(1, a3, a4, v13);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v21 = *MEMORY[0x24BE096C0];
  v41 = v16;
  if (CurrentAttribute == v21)
  {
    v22 = (id)AGSubgraphGetCurrent();
    if (!v22)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v23 = v22;
    v24 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v24 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (!Context)
    __break(1u);
  v26 = Context;
  swift_retain();

  swift_beginAccess();
  v27 = *(_DWORD *)(v26 + 68);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v10, 1, 1, a3);
  *(_DWORD *)v15 = OffsetAttribute2;
  *((_DWORD *)v15 + 1) = v27;
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(&v15[*(int *)(v12 + 40)], v10, v7);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v37 = v12;
  v38 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueTransactionSeed<A>, v12, v29);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)(&v39 - 4), v12, MEMORY[0x24BEE4078], v30, MEMORY[0x24BEE40A8], v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v12);
  LODWORD(v26) = v44;
  AGGraphSetFlags();
  closure #2 in static _AnimationModifier._makeInputs(modifier:inputs:)(1, a3, v42, v32);
  v33 = AGGraphCreateOffsetAttribute2();
  v34 = v43;
  v35 = *(_DWORD *)(v43 + 28);
  v44 = v26;
  v45 = v33;
  v46 = v35;
  v47 = v27;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v34 + 28) = result;
  return result;
}

uint64_t closure #1 in static _AnimationModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for _AnimationModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  return v11[5];
}

uint64_t ValueTransactionSeed.init(value:transactionSeed:oldValue:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  char *v7;
  uint64_t v8;

  *a6 = a1;
  a6[1] = a2;
  v7 = (char *)a6 + *(int *)(type metadata accessor for ValueTransactionSeed(0, a4, a5, a4) + 40);
  v8 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a3, v8);
}

uint64_t closure #2 in static _AnimationModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for _AnimationModifier(0, a2, a3, a4);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Animation?, (uint64_t)&type metadata for Animation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v6, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  return v10[5];
}

uint64_t static _AnimationModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;

  v23 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 72);
  v22 = *(_DWORD *)(a2 + 80);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v16 = specialized find<A>(_:key:)(v7);
  if (v16)
  {
    v17 = *(_BYTE *)(v16 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if ((v17 & 1) != 0)
    {
      LODWORD(v29) = v23;
      v38 = v7;
      v39 = v8;
      v40 = v9;
      *(_QWORD *)&v41 = __PAIR64__(v10, v11);
      *((_QWORD *)&v41 + 1) = __PAIR64__(v12, v13);
      v42 = v15;
      v43 = v14;
      v44 = v20;
      v45 = v21;
      v46 = v22;
      return static _AnimationModifier.makeArchivedView(modifier:inputs:body:)((uint64_t)&v38, (uint64_t (*)(_QWORD, _OWORD *))a3, a4, a5, a6, a7);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v38 = v7;
  v39 = v8;
  v40 = v9;
  *(_QWORD *)&v41 = __PAIR64__(v10, v11);
  *((_QWORD *)&v41 + 1) = __PAIR64__(v12, v13);
  v42 = v15;
  v43 = v14;
  v44 = v20;
  v45 = v21;
  v46 = v22;
  LODWORD(v29) = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _AnimationModifier._makeInputs(modifier:inputs:)((int *)&v29, (uint64_t)&v38, a5, a6);
  v29 = v38;
  v30 = v39;
  v31 = v40;
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  v36 = v45;
  v37 = v46;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = swift_bridgeObjectRetain();
  a3(v19, &v29);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _AnimationModifier.makeArchivedView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(_QWORD, _OWORD *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];
  int v21;
  _OWORD v22[5];
  int v23;

  v12 = *(_OWORD *)(a1 + 48);
  v22[2] = *(_OWORD *)(a1 + 32);
  v22[3] = v12;
  v22[4] = *(_OWORD *)(a1 + 64);
  v23 = *(_DWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 16);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v13;
  v14 = dynamic_cast_existential_2_conditional(a4);
  if (v14)
    return project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedView(modifier:inputs:body:)((uint64_t)v22, (uint64_t)a2, a3, a4, v14, a5, a6, v15, v16);
  v18 = *(_OWORD *)(a1 + 48);
  v20[2] = *(_OWORD *)(a1 + 32);
  v20[3] = v18;
  v20[4] = *(_OWORD *)(a1 + 64);
  v21 = *(_DWORD *)(a1 + 80);
  v19 = *(_OWORD *)(a1 + 16);
  v20[0] = *(_OWORD *)a1;
  v20[1] = v19;
  return a2(0, v20);
}

uint64_t static _AnimationModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  __int128 v19;
  int v20;
  char v21;
  int v22;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  char v44;

  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 40);
  v19 = *(_OWORD *)(a2 + 48);
  v20 = *(_DWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v21 = *(_BYTE *)(a2 + 80);
  v22 = *a1;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v15 = specialized find<A>(_:key:)(v6);
  if (v15)
  {
    v16 = *(_BYTE *)(v15 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if ((v16 & 1) != 0)
    {
      LODWORD(v27) = v22;
      v36 = v6;
      v37 = v7;
      v38 = v8;
      *(_QWORD *)&v39 = __PAIR64__(v10, v9);
      *((_QWORD *)&v39 + 1) = __PAIR64__(v11, v12);
      v40 = v13;
      v41 = v19;
      v42 = v20;
      v43 = v14;
      v44 = v21;
      return static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)((unsigned int *)&v27, &v36, a3, a4, a5, a6);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v36 = v6;
  v37 = v7;
  v38 = v8;
  *(_QWORD *)&v39 = __PAIR64__(v10, v9);
  *((_QWORD *)&v39 + 1) = __PAIR64__(v11, v12);
  v40 = v13;
  v41 = v19;
  v42 = v20;
  v43 = v14;
  v44 = v21;
  LODWORD(v27) = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _AnimationModifier._makeInputs(modifier:inputs:)((int *)&v27, (uint64_t)&v36, a5, a6);
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v31 = v40;
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v18 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t, uint64_t *))a3)(v18, &v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)(unsigned int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  char v46;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v12 = a2[5];
  v11 = a2[6];
  v13 = a2[7];
  v14 = *((_DWORD *)a2 + 16);
  v15 = a2[9];
  v16 = *((_BYTE *)a2 + 80);
  v38 = *a2;
  v39 = v9;
  v41 = *(_OWORD *)(a2 + 3);
  v40 = v10;
  v42 = v12;
  *(_QWORD *)&v43 = v11;
  *((_QWORD *)&v43 + 1) = v13;
  v44 = v14;
  v45 = v15;
  v46 = v16;
  if ((v13 & 0x4000) != 0 && (v17 = dynamic_cast_existential_2_conditional(a5)) != 0)
  {
    v20 = v17;
    v21 = v18;
    v22 = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)(v20, (uint64_t)&v38, v8, a5, v20, a6, v21, v22);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v24 = type metadata accessor for _AnimationModifier(0, a5, a6, v23);
  v37 = v8;
  swift_beginAccess();
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  v35 = v45;
  v36 = v46;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v37, (uint64_t)&v28, a3, a4, v24, (uint64_t)&protocol witness table for _AnimationModifier<A>);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedView(modifier:inputs:body:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt value;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  int v34;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  type metadata accessor for _AnimationModifier(0, a5, a9, a2);
  type metadata accessor for _AnimationModifier(0, a4, a6, v12);
  v34 = Attribute.unsafeBitCast<A>(to:)();
  v13 = *(_OWORD *)(a1 + 16);
  v49 = *(_OWORD *)a1;
  v50 = v13;
  v51 = *(_OWORD *)(a1 + 32);
  v14 = v49;
  outlined retain of _ViewInputs(a1);
  outlined retain of _GraphInputs((uint64_t)&v49);
  v15 = swift_retain();
  v16 = specialized find<A>(_:key:)(v15);
  if (v16)
    v17 = *(unsigned __int8 *)(v16 + 72) | 1;
  else
    v17 = 1;
  swift_release();
  outlined release of _GraphInputs((uint64_t)&v49);
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (!v19 || (value = v14, v17 != *(unsigned __int8 *)(v19 + 72)))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<DisplayList.Options>, (uint64_t)&type metadata for DisplayList.Options, (uint64_t)&protocol witness table for DisplayList.Options, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = v17;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for DisplayList.Options, 0, v14).value;
  }
  v21 = *(_DWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *((_QWORD *)&v51 + 1);
  v24 = v50;
  v25 = DWORD2(v49);
  v26 = *((_QWORD *)&v50 + 1);
  v27 = v51;
  v33 = *(_OWORD *)(a1 + 56);
  v28 = *(_QWORD *)(a1 + 72);
  swift_release();
  v29 = type metadata accessor for ArchivedAnimationModifier.Effect(0, a5, a8, a9);
  LODWORD(v39) = v34;
  v30 = type metadata accessor for ArchivedAnimationModifier(0, a5, a8, a9);
  v31 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedAnimationModifier<A>, v30);
  _GraphValue.init<A>(_:)((uint64_t)&v39, v29, v30, v31, &v48);
  *(_QWORD *)&v39 = value;
  DWORD2(v39) = v25;
  v40 = v24;
  v41 = v26;
  v42 = v27;
  v43 = v23;
  v44 = v22;
  v45 = v33;
  v46 = v28;
  v47 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _RendererEffect._makeRendererEffect(effect:inputs:body:)(&v48, &v39, a2, a3, v29, (uint64_t)&protocol witness table for ArchivedAnimationModifier<A>.Effect, a7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  _DWORD v27[6];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _AnimationModifier(0, a5, a8, a4);
  type metadata accessor for _AnimationModifier(0, a4, a6, v14);
  LODWORD(a6) = Attribute.unsafeBitCast<A>(to:)();
  swift_beginAccess();
  v15 = *(_DWORD *)(a2 + 64);
  v27[0] = a6;
  v27[1] = v15;
  v25 = type metadata accessor for ArchivedAnimationTrait(0, a5, a7, a8);
  v26 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedAnimationTrait<A>, v25);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, (uint64_t)&type metadata for ViewTraitCollection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v27, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13, (uint64_t)v24, v25, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v17);
  swift_beginAccess();
  *(_DWORD *)(a2 + 64) = v22;
  if (*(_QWORD *)(a2 + 72))
  {
    v18 = *(_BYTE *)(a2 + 80) & 1;
    v22 = *(_QWORD *)(a2 + 72);
    v23 = v18;
    specialized Set._Variant.insert(_:)(&v21, (uint64_t)&type metadata for ArchivedAnimationTraitKey);
    v19 = v23;
    *(_QWORD *)(a2 + 72) = v22;
    *(_BYTE *)(a2 + 80) = v19;
  }
  return swift_endAccess();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnimationModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static _AnimationModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnimationModifier<A>(int *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static _AnimationModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

double ArchivedAnimationModifier.value.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Value;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double result;
  __int128 v26;
  _QWORD *v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  *(_QWORD *)&v26 = a2;
  v27 = a4;
  v30 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v6);
  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for _AnimationModifier(0, a1, a3, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v26 - v17;
  Value = AGGraphGetValue();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v20(v18, Value, v12);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, &v18[*(int *)(v12 + 36)], a1);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v18, v12);
  StrongHash.init<A>(encodable:)((uint64_t)v10, a1, (uint64_t)&v28);
  v26 = v28;
  LODWORD(v13) = v29;
  v22 = AGGraphGetValue();
  v20(v15, v22, v12);
  v23 = *(_QWORD *)v15;
  swift_retain();
  v21(v15, v12);
  v24 = v27;
  *v27 = v23;
  result = *(double *)&v26;
  *(_OWORD *)(v24 + 1) = v26;
  *((_DWORD *)v24 + 6) = v13;
  return result;
}

uint64_t ArchivedAnimationModifier.Effect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = *((_DWORD *)v1 + 6);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_DWORD *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 36) = 0;
  *(_QWORD *)(v7 + 40) = v3;
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 18;
  return swift_retain();
}

double protocol witness for Rule.value.getter in conformance ArchivedAnimationModifier<A>@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return ArchivedAnimationModifier.value.getter(a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ArchivedAnimationModifier<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedAnimationModifier<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t ArchivedAnimationTrait.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
  {
    result = 0;
  }
  else
  {
    AGGraphGetValue();
    result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t ArchivedAnimationTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t Value;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _UNKNOWN **v33;
  ValueMetadata *v34;
  _QWORD *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(__int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  __int128 v53;
  unint64_t v54;
  void (*v55)(char *, uint64_t);
  _UNKNOWN **v56;
  uint64_t v57;

  v50 = a3;
  v46 = a5;
  v57 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v8);
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = (void (*)(char *, uint64_t))a4;
  v14 = type metadata accessor for _AnimationModifier(0, a2, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v46 - v19;
  v51 = a1;
  Value = AGGraphGetValue();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v20, Value, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, &v20[*(int *)(v14 + 36)], a2);
  v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v20, v14);
  StrongHash.init<A>(encodable:)((uint64_t)v12, a2, (uint64_t)&v53);
  v24 = DWORD1(v53);
  v49 = v53;
  v25 = DWORD2(v53);
  v48 = HIDWORD(v53);
  v47 = v54;
  ArchivedAnimationTrait.traits.getter(v51, (uint64_t *)&v53);
  if ((_QWORD)v53)
    v26 = (_QWORD *)v53;
  else
    v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v27 = AGGraphGetValue();
  v22(v17, v27, v14);
  v52 = *(void (**)(char *, uint64_t))v17;
  swift_retain();
  v23(v17, v14);
  v28 = v49 | (unint64_t)(v24 << 32);
  v29 = v26[2];
  v30 = v25 | (unint64_t)(v48 << 32);
  if (v29)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      if (v32 >= v26[2])
      {
        __break(1u);
        goto LABEL_19;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&v26[v31 + 4], (uint64_t)&v53);
      v23 = v55;
      v33 = v56;
      __swift_project_boxed_opaque_existential_1(&v53, (uint64_t)v55);
      v34 = (ValueMetadata *)((uint64_t (*)(_QWORD, _UNKNOWN **))v33[1])(v23, v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
      if (v34 == &type metadata for ArchivedAnimationTraitKey)
        break;
      ++v32;
      v31 += 5;
      if (v29 == v32)
        goto LABEL_9;
    }
    *(_QWORD *)&v53 = v52;
    *((_QWORD *)&v53 + 1) = v28;
    v54 = v30;
    LODWORD(v55) = v47;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
    if (v32 >= v26[2])
      __break(1u);
    v42 = v26[v31 + 7];
    v43 = v26[v31 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v26[v31 + 4], v42);
    v44 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v43 + 24);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ArchivedAnimationTraitKey?, (uint64_t)&type metadata for ArchivedAnimationTraitKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v44(&v53, v45, v42, v43);
    result = swift_release();
    v35 = v46;
  }
  else
  {
LABEL_9:
    v23 = v52;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    v35 = v46;
    v36 = v47;
    v38 = v26[2];
    v37 = v26[3];
    if (v38 >= v37 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v26);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<ArchivedAnimationTraitKey>, (uint64_t)&type metadata for ArchivedAnimationTraitKey, (uint64_t)&protocol witness table for ArchivedAnimationTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v55 = (void (*)(char *, uint64_t))v39;
    v56 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    v40 = swift_allocObject();
    *(_QWORD *)&v53 = v40;
    *(_QWORD *)(v40 + 16) = v23;
    *(_QWORD *)(v40 + 24) = v28;
    *(_QWORD *)(v40 + 32) = v30;
    *(_DWORD *)(v40 + 40) = v36;
    v26[2] = v38 + 1;
    outlined init with take of ScrollStateRequest(&v53, (uint64_t)&v26[5 * v38 + 4]);
    result = swift_release();
  }
  *v35 = v26;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ArchivedAnimationTrait<A>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return ArchivedAnimationTrait.value.getter(*v2, a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ArchivedAnimationTrait<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedAnimationTrait<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t _AnimationView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _AnimationView.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_AnimationView.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationView.animation.getter()
{
  return swift_retain();
}

uint64_t _AnimationView.animation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 44);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*_AnimationView.animation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationView.init(content:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = *(int *)(type metadata accessor for _AnimationView(0, a3, a4, a5) + 44);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, a1, a3);
  *(_QWORD *)(a6 + v10) = a2;
  return result;
}

uint64_t static _AnimationView._makeInputs(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  void *v23;
  id v24;
  uint64_t Context;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  int OffsetAttribute2;
  uint64_t v33;
  int v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50[6];
  uint64_t v51;

  v41 = a6;
  v42 = a2;
  v51 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v38 - v12;
  v15 = type metadata accessor for ValueTransactionSeed(0, a3, a4, v14);
  v38 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v38 - v16;
  LODWORD(v16) = *a1;
  v47 = a3;
  v48 = a4;
  v49 = a5;
  v39 = v16;
  v43 = v16;
  v40 = a5;
  v18 = type metadata accessor for _AnimationView(255, a3, a4, a5);
  type metadata accessor for _GraphValue(0, v18, v19, v20);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _AnimationView._makeInputs(view:inputs:), a3, v50);
  v21 = v50[0];
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v22 = (id)AGSubgraphGetCurrent();
    if (!v22)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v23 = v22;
    v24 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v24 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (!Context)
    __break(1u);
  v26 = Context;
  swift_retain();

  swift_beginAccess();
  v27 = *(_DWORD *)(v26 + 68);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v13, 1, 1, a3);
  *(_DWORD *)v17 = v21;
  *((_DWORD *)v17 + 1) = v27;
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(&v17[*(int *)(v15 + 40)], v13, v10);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v36 = v15;
  v37 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueTransactionSeed<A>, v15, v29);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)(&v38 - 4), v15, MEMORY[0x24BEE4078], v30, MEMORY[0x24BEE40A8], v31);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v15);
  LODWORD(v26) = v43;
  AGGraphSetFlags();
  closure #2 in static _AnimationView._makeInputs(view:inputs:)(1, a3, a4, v40);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v33 = v42;
  v34 = *(_DWORD *)(v42 + 28);
  v43 = v26;
  v44 = OffsetAttribute2;
  v45 = v34;
  v46 = v27;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v33 + 28) = result;
  *v41 = v21;
  return result;
}

uint64_t closure #1 in static _AnimationView._makeInputs(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _AnimationView(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t closure #2 in static _AnimationView._makeInputs(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for _AnimationView(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 44);
  v12[2] = v5;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Animation?, (uint64_t)&type metadata for Animation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4, (uint64_t)v12, v8, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  return v12[5];
}

double static _AnimationView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  void (*v23)(uint64_t *__return_ptr, int *, uint64_t *);
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = a2[6];
  v14 = *((_DWORD *)a2 + 20);
  v72 = *a2;
  v74 = v11;
  v75 = *(_OWORD *)(a2 + 3);
  v76 = v12;
  v77 = v13;
  v78 = *(_OWORD *)(a2 + 7);
  v79 = a2[9];
  v73 = v10;
  v80 = v14;
  LODWORD(v40) = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = a5;
  static _AnimationView._makeInputs(view:inputs:)(&v40, (uint64_t)&v72, a3, a4, a5, &v56);
  v36 = v56;
  v15 = v72;
  v16 = v74;
  v32 = v75;
  v30 = v73;
  v31 = DWORD1(v75);
  v17 = HIDWORD(v75);
  v33 = DWORD2(v75);
  v18 = v76;
  v19 = v77;
  v20 = DWORD1(v78);
  v28 = DWORD2(v78);
  v29 = v78;
  v21 = v79;
  v26 = HIDWORD(v79);
  v27 = HIDWORD(v78);
  v25 = v80;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v56 = v15;
  v57 = v30;
  v58 = v16;
  v59 = v32;
  v60 = v31;
  v63 = v18;
  v64 = v19;
  v62 = v17;
  v65 = v29;
  v66 = v20;
  v67 = v28;
  v68 = v27;
  v69 = v21;
  v70 = v26;
  v71 = v25;
  v37 = v36;
  v40 = v15;
  v41 = v30;
  v42 = v16;
  v43 = v32;
  v44 = v31;
  v45 = 0;
  v46 = v17;
  v47 = v18;
  v48 = v19;
  v49 = v29;
  v50 = v20;
  v51 = v28;
  v52 = v27;
  v53 = v21;
  v54 = v26;
  v55 = v25;
  v23 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v34 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(&v38, &v37, &v40);
  v61 = v33;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v38, (uint64_t)&v56);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a6 = v38;
  result = v39;
  a6[1] = v39;
  return result;
}

uint64_t static _AnimationView._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  int ShouldRecordTree;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  char v45;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = *((_DWORD *)a2 + 16);
  v13 = a2[9];
  v14 = *((_BYTE *)a2 + 80);
  v37 = *a2;
  v38 = v9;
  v39 = v10;
  v40 = *(_OWORD *)(a2 + 3);
  v41 = v11;
  v42 = *((_OWORD *)a2 + 3);
  v43 = v12;
  v44 = v13;
  v45 = v14;
  v36 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _AnimationView._makeInputs(view:inputs:)(&v36, (uint64_t)&v37, a3, a4, a5, &v27);
  v15 = v27;
  v16 = v37;
  v26 = v38;
  v17 = v39;
  v18 = v40;
  v19 = v41;
  v20 = v42;
  v25 = v43;
  v21 = v44;
  v22 = v45;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v27 = v16;
  v28 = v26;
  v29 = v17;
  v30 = v18;
  v31 = v19;
  v32 = v20;
  v33 = v25;
  v34 = v21;
  v35 = v22;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a5 + 32))(&v36, &v27, a3, a5);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v15, a3, a5);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _AnimationView._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  __int128 v7;
  int v8;
  uint64_t v9;

  v4 = *((_DWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 3);
  v7 = *a1;
  v8 = v4;
  v9 = v5;
  return (*(uint64_t (**)(__int128 *))(a4 + 40))(&v7);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _AnimationView<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, double *a4@<X8>)
{
  return static _AnimationView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _AnimationView<A>(int *a1, uint64_t *a2, uint64_t *a3)
{
  return static _AnimationView._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _AnimationView<A>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return static _AnimationView._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 32));
}

uint64_t static _AnimationModifier.== infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  v6 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a1 + 104);
      swift_retain();
      swift_retain();
      LOBYTE(v7) = v7(v6);
      swift_release();
      swift_release();
      if ((v7 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!v6)
  {
LABEL_4:
    type metadata accessor for _AnimationModifier(0, a3, a4, a4);
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _AnimationModifier<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static _AnimationModifier.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t View.animation<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v21;

  v21 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _AnimationModifier(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a2, a4, v16);
  *(_QWORD *)v18 = a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[*(int *)(v14 + 36)], v11, a4);
  View.modifier<A>(_:)(v18, a3, v14, v21);
  v19 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  swift_retain();
  return v19(v18, v14);
}

uint64_t View<>.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v5, a2, v12);
  v15 = *(int *)(type metadata accessor for _AnimationView(0, a2, a3, a4) + 44);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a2);
  *(_QWORD *)(a5 + v15) = a1;
  return swift_retain();
}

Swift::Void __swiftcall ValueTransactionSeed.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Value;
  char *v17;
  void (*v18)(char *, uint64_t);
  void (*v19)(char *, uint64_t);
  int v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  int v23;
  uint64_t v24;

  v2 = v1;
  v3 = v0;
  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(v0 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - v7;
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - v14;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, Value, v4);
  v17 = (char *)(v2 + *(int *)(v3 + 40));
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v17, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v8, v5);
    v23 = -1;
    AGGraphSetOutputValue();
    v18(v17, v5);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v15, v4);
  }
  else
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v22(v12, v8, v4);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v19 = *(void (**)(char *, uint64_t))(v9 + 8);
      v19(v12, v4);
      v19(v15, v4);
      return;
    }
    AGGraphClearUpdate();
    v20 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    v23 = v20;
    AGGraphSetOutputValue();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
    v22(v17, v15, v4);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ValueTransactionSeed<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueTransactionSeed<A>, a1);
  return static AsyncAttribute.flags.getter();
}

_DWORD *ChildTransaction.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  _DWORD *result;
  uint64_t v6;

  v0 = *(_QWORD *)AGGraphGetValue();
  v6 = v0;
  v1 = swift_retain_n();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_release_n();
  if ((v2 & 1) != 0)
    return (_DWORD *)v0;
  AGGraphClearUpdate();
  v3 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)AGGraphGetValue() != v3)
    return (_DWORD *)v0;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Animation?, (uint64_t)&type metadata for Animation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = *(_QWORD *)AGGraphGetValue();
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v6, v4);
  swift_release_n();
  swift_release();
  result = (_DWORD *)AGGraphGetValue();
  if (*result == v3)
    return (_DWORD *)v6;
  __break(1u);
  return result;
}

_DWORD *protocol witness for Rule.value.getter in conformance ChildTransaction@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = ChildTransaction.value.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for _AnimationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnimationView);
}

uint64_t type metadata completion function for _AnimationModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _AnimationModifier(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_235024E8C + 4 * byte_2352BDF60[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _AnimationModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for _AnimationView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _AnimationView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235025208 + 4 * byte_2352BDF6E[v10]))();
  }
}

void storeEnumTagSinglePayload for _AnimationView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_235025388()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23502540CLL);
}

void sub_235025390(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235025398);
  JUMPOUT(0x23502540CLL);
}

void sub_2350253E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23502540CLL);
}

void sub_2350253E8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23502540CLL);
}

uint64_t sub_2350253F0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x2350253FCLL);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x23502540CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_235025424(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _AnimationModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _AnimationModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

_UNKNOWN **sub_235025484()
{
  return &protocol witness table for _AnimationView<A>;
}

uint64_t type metadata completion function for ValueTransactionSeed()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueTransactionSeed(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  void *v15;
  const void *v16;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 8) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (void *)(((unint64_t)v13 + v7 + 4) & ~v7);
    v16 = (const void *)(((unint64_t)v14 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for ValueTransactionSeed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_DWORD *initializeWithCopy for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_DWORD *assignWithCopy for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

_DWORD *initializeWithTake for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_DWORD *assignWithTake for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueTransactionSeed(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = v7 + ((v8 + 8) & ~v8);
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_7;
    v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_14;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_21;
LABEL_7:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_21;
LABEL_14:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_14;
    }
  }
LABEL_21:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ValueTransactionSeed(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_16;
      goto LABEL_23;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_16:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_23:
      __asm { BR              X13 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_16;
  goto LABEL_23;
}

void sub_235025DA0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_235025DA8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for ValueTransactionSeed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueTransactionSeed);
}

uint64_t instantiation function for generic protocol witness table for ValueTransactionSeed<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueTransactionSeed<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ValueTransactionSeed<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in static _AnimationView._makeInputs(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static _AnimationView._makeInputs(view:inputs:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction;
  if (!lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildTransaction, &unk_250620820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction;
  if (!lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildTransaction, &unk_2506208B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction);
  }
  return result;
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Animation?, (uint64_t)&type metadata for Animation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ArchivedAnimationTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivedAnimationTrait);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata accessor for ArchivedAnimationModifier.Effect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivedAnimationModifier.Effect);
}

uint64_t type metadata accessor for ArchivedAnimationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivedAnimationModifier);
}

uint64_t assignWithCopy for ArchivedAnimationModifier.Effect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ArchivedAnimationModifier.Effect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ArchivedAnimationTraitKey()
{
  return &type metadata for ArchivedAnimationTraitKey;
}

void *type metadata accessor for ChildTransaction()
{
  return &unk_250620820;
}

{
  return &unk_2506208B8;
}

unint64_t instantiation function for generic protocol witness table for ChildTransaction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ArchivedAnimationTrait<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedAnimationTrait<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ArchivedAnimationModifier<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedAnimationModifier<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ArchivedAnimationModifier<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ArchivedAnimationTrait<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_235026134()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16) != 1)
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_235026160()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t property wrapper backing initializer of StoredLocationBase.data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = type metadata accessor for StoredLocationBase.Data(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v15 - v10, a1, v7, v9);
  AtomicBox.init(wrappedValue:)((uint64_t)v11, v7, v12, v13, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
}

uint64_t type metadata accessor for StoredLocationBase.Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoredLocationBase.Data);
}

uint64_t StoredLocationBase.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v3 = *v1;
  swift_beginAccess();
  v4 = (os_unfair_lock_s *)v1[2];
  v7 = type metadata accessor for StoredLocationBase.Data(0, *(_QWORD *)(v3 + 168), v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (char *)v4 + ((*(unsigned __int8 *)(v8 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a1, v9, v7);
  $defer #1 <A>() in AtomicBox.wrappedValue.getter(v4 + 4);
  return swift_release();
}

uint64_t StoredLocationBase.$data.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  swift_beginAccess();
  v6 = type metadata accessor for StoredLocationBase.Data(255, *(_QWORD *)(v3 + 168), v4, v5);
  type metadata accessor for AtomicBox(0, v6, v7, v8);
  return AtomicBox.projectedValue.getter(a1);
}

uint64_t StoredLocationBase.__allocating_init(initialValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  swift_allocObject();
  v4 = specialized StoredLocationBase.init(initialValue:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 168) - 8) + 8))(a1);
  return v4;
}

uint64_t StoredLocationBase.init(initialValue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = specialized StoredLocationBase.init(initialValue:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 168) - 8) + 8))(a1);
  return v4;
}

Swift::Void __swiftcall StoredLocationBase.invalidate()()
{
  uint64_t *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = *v0;
  swift_beginAccess();
  v2 = (os_unfair_lock_s *)v0[2];
  v5 = type metadata accessor for StoredLocationBase.Data(0, *(_QWORD *)(v1 + 168), v3, v4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (char *)v2 + ((v6 + 20) & ~v6);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  v8 = *(int *)(v5 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v8] = MEMORY[0x24BEE4B00];
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v2 + 4);
  swift_release();
}

uint64_t StoredLocationBase.wasRead.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t StoredLocationBase.wasRead.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

_BYTE *(*StoredLocationBase.wasRead.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 24);
  return StoredLocationBase.wasRead.modify;
}

_BYTE *StoredLocationBase.wasRead.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 24) = result[8];
  return result;
}

uint64_t StoredLocationBase.get()@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 168);
  v6 = type metadata accessor for StoredLocationBase.Data(0, v5, a1, a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  StoredLocationBase.data.getter((uint64_t)&v11 - v8);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v9, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void StoredLocationBase.projecting<A>(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  swift_beginAccess();
  v4 = (os_unfair_lock_s *)v1[2];
  v5 = *(_QWORD *)(v3 + 168);
  type metadata accessor for StoredLocationBase.Data(0, v5, v6, v7);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  v10 = type metadata accessor for StoredLocationBase(0, v5, v8, v9);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for StoredLocationBase<A>, v10);
  LocationProjectionCache.reference<A, B>(for:on:)(a1);
}

uint64_t sub_235026680(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  os_unfair_lock_s *v22;

  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v22);
  swift_release();
  return a1;
}

uint64_t StoredLocationBase.updateValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v12;

  v3 = *v1;
  StoredLocationBase.$data.getter(&v12);
  v4 = v12;
  v5 = v12 + 4;
  v6 = *(_QWORD *)(v3 + 168);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StoredLocationBase.Data(0, v6, v7, v8) - 8) + 80);
  v10 = (uint64_t)v4 + ((v9 + 20) & ~v9);
  swift_retain();
  os_unfair_lock_lock(v5);
  closure #1 in StoredLocationBase.updateValue.getter(v10, v6, a1);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v5);
  return swift_release_n();
}

uint64_t closure #1 in StoredLocationBase.updateValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v15 - v8;
  v15[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for StoredLocationBase.Data(0, a2, v10, v11) + 28));
  v12 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v12);
  Collection.first.getter();
  v13 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, a2) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v9, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a3, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void StoredLocationBase.set(_:transaction:)(uint64_t a1, _QWORD *value)
{
  uint64_t *v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  Class isa;
  void *v38;
  _QWORD aBlock[6];
  os_unfair_lock_s *v40;
  char v41[9];

  v5 = *v2;
  if (((*(uint64_t (**)(void))(*v2 + 208))() & 1) != 0)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    os_log(_:dso:log:_:_:)();
  }
  else if (((*(uint64_t (**)(void))(*v2 + 200))() & 1) != 0)
  {
    StoredLocationBase.$data.getter(&v40);
    v6 = v40;
    v7 = v40 + 4;
    v8 = *(_QWORD *)(v5 + 168);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StoredLocationBase.Data(0, v8, v9, v10) - 8)
                             + 80);
    v12 = (uint64_t)v6 + ((v11 + 20) & ~v11);
    swift_retain();
    os_unfair_lock_lock(v7);
    closure #2 in StoredLocationBase.set(_:transaction:)(v12, a1, v8, v41);
    $defer #1 <A>() in AtomicBox.wrappedValue.modify(v7);
    swift_release_n();
    if (v41[0] == 1)
    {
      swift_retain();
      if (_threadTransactionData())
      {
        type metadata accessor for PropertyList.Element();
        swift_unknownObjectRetain();
        v13 = swift_dynamicCastClassUnconditional();
        v17 = v13;
        if (value)
        {
          if (v13)
          {
            if (value[3])
            {
              type metadata accessor for TypedElement<EmptyKey>(0, v14, v15, v16);
              swift_allocObject();
              value = (_QWORD *)PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v17, (uint64_t)value).value;
            }
            else
            {
              v25 = value[4];
              v26 = *(uint64_t (**)(uint64_t, uint64_t))(*value + 216);
              swift_retain();
              v27 = swift_retain();
              v28 = v26(v27, v25);
              swift_release();
              swift_release_n();
              swift_release();
              value = (_QWORD *)v28;
            }
          }
        }
        else
        {
          value = (_QWORD *)v13;
        }
      }
      v29 = _threadTransactionID();
      v30 = swift_allocObject();
      swift_weakInit();
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v8;
      *(_QWORD *)(v31 + 24) = v30;
      *(_QWORD *)(v31 + 32) = value;
      *(_DWORD *)(v31 + 40) = v29;
      v32 = (void *)objc_opt_self();
      swift_retain_n();
      swift_retain();
      swift_retain();
      if ((objc_msgSend(v32, sel_isMainThread) & 1) != 0)
      {
        closure #3 in StoredLocationBase.set(_:transaction:)(v30, (uint64_t)value, v29, v8);
        swift_release_n();
        swift_release_n();
        swift_release();
      }
      else
      {
        v33 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
        type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = xmmword_23527E860;
        v35 = (void *)*MEMORY[0x24BDBCB80];
        *(_QWORD *)(v34 + 32) = *MEMORY[0x24BDBCB80];
        type metadata accessor for NSRunLoopMode(0);
        v36 = v35;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        aBlock[4] = partial apply for closure #3 in StoredLocationBase.set(_:transaction:);
        aBlock[5] = v31;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_27;
        v38 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v33, sel_performInModes_block_, isa, v38);
        _Block_release(v38);
        swift_release_n();
        swift_release_n();
        swift_release();

      }
    }
  }
  else
  {
    StoredLocationBase.$data.getter(aBlock);
    v18 = aBlock[0];
    v19 = (os_unfair_lock_s *)(aBlock[0] + 16);
    v20 = *(_QWORD *)(v5 + 168);
    v23 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StoredLocationBase.Data(0, v20, v21, v22) - 8)
                             + 80);
    v24 = v18 + ((v23 + 20) & ~v23);
    swift_retain();
    os_unfair_lock_lock(v19);
    closure #1 in StoredLocationBase.set(_:transaction:)(v24, a1, v20);
    $defer #1 <A>() in AtomicBox.wrappedValue.modify(v19);
    swift_release_n();
  }
}

void closure #1 in StoredLocationBase.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 24))();
  type metadata accessor for StoredLocationBase.Data(0, a3, v4, v5);
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(0);
}

uint64_t closure #2 in StoredLocationBase.set(_:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = v12;
  v21 = v11;
  v22 = 3;
  result = _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v13, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)v19, a3, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v14);
  if ((v23 & 1) != 0)
  {
    v16 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
    type metadata accessor for StoredLocationBase.Data(0, a3, v17, v18);
    type metadata accessor for Array();
    Array.append(_:)();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, a3);
    v16 = 1;
  }
  *a4 = v16;
  return result;
}

uint64_t closure #3 in StoredLocationBase.set(_:transaction:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[12];
  int v13;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    v13 = a3;
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    (*(void (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)v8 + 216))(a2, &v13, v12);
    swift_release();
    v11 = type metadata accessor for StoredLocationBase.BeginUpdate(0, a4, v9, v10);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v12, v11);
  }
  return result;
}

uint64_t StoredLocationBase.BeginUpdate.apply()()
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    StoredLocationBase.beginUpdate()(result);
    return swift_release();
  }
  return result;
}

uint64_t StoredLocationBase.beginUpdate()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(*v1 + 168);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v6 = (os_unfair_lock_s *)v1[2];
  type metadata accessor for StoredLocationBase.Data(0, v2, v7, v8);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  v9 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E8], v9);
  RangeReplaceableCollection.removeFirst()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v6 + 4);
  v10 = swift_release();
  return (*(uint64_t (**)(uint64_t))(*v1 + 224))(v10);
}

uint64_t StoredLocationBase.BeginUpdate.combine<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[8];

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, double))(v10 + 16))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v25 = 0;
    v11 = *(_QWORD *)(a2 - 8);
    (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v11 + 32))(v26, &v24, a2);
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v13 = Strong;
      v14 = swift_weakLoadStrong();
      if (v14)
      {
        v15 = v14;
        swift_release();
        if (v15 == v13)
        {
          swift_beginAccess();
          v18 = *(os_unfair_lock_s **)(v13 + 16);
          v23 = v18 + 4;
          v22 = type metadata accessor for StoredLocationBase.Data(0, v3, v19, v20);
          swift_retain();
          os_unfair_lock_lock(v18 + 4);
          v21 = type metadata accessor for Array();
          MEMORY[0x23B7C9C04](MEMORY[0x24BEE12B0], v21);
          MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E8], v21);
          RangeReplaceableCollection<>.removeLast()();
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          $defer #1 <A>() in AtomicBox.wrappedValue.modify(v23);
          swift_release();
          swift_release();
          (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v26, a2);
          return 1;
        }
      }
      (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v26, a2);
      swift_release();
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v26, a2);
    }
  }
  else
  {
    v24 = 0;
    v25 = 1;
    v16 = type metadata accessor for Optional();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(&v24, v16);
  }
  return 0;
}

uint64_t protocol witness for GraphMutation.combine<A>(with:) in conformance StoredLocationBase<A>.BeginUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StoredLocationBase.BeginUpdate.combine<A>(with:)(a1, a4);
}

uint64_t StoredLocationBase.update()(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = 1;
  StoredLocationBase.updateValue.getter(a1);
  return 1;
}

uint64_t StoredLocationBase.binding.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  StoredLocationBase.updateValue.getter((uint64_t)v5);
  Binding.init(value:location:)((uint64_t)v5, v2, v6, v7, a2);
  return swift_retain();
}

void StoredLocationBase.isUpdating.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void StoredLocationBase.commit(transaction:id:mutation:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void StoredLocationBase.notifyObservers()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void StoredLocationBase.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void StoredLocationBase.init()()
{
  specialized StoredLocationBase.init()();
}

uint64_t StoredLocationBase.deinit()
{
  uint64_t v0;

  v0 = AnyLocation.deinit();
  swift_release();
  return v0;
}

uint64_t StoredLocationBase.__deallocating_deinit()
{
  AnyLocation.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Location.wasRead.getter in conformance StoredLocationBase<A>()
{
  return StoredLocationBase.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance StoredLocationBase<A>(uint64_t a1)
{
  return StoredLocationBase.wasRead.setter(a1);
}

void (*protocol witness for Location.wasRead.modify in conformance StoredLocationBase<A>(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = StoredLocationBase.wasRead.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for Location.get() in conformance StoredLocationBase<A>@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return StoredLocationBase.get()(a1, a2, a3);
}

void protocol witness for Location.set(_:transaction:) in conformance StoredLocationBase<A>(uint64_t a1, _QWORD *a2)
{
  StoredLocationBase.set(_:transaction:)(a1, a2);
}

uint64_t protocol witness for Location.update() in conformance StoredLocationBase<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))() & 1;
}

uint64_t StoredLocation.__allocating_init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  v5 = specialized StoredLocation.__allocating_init(initialValue:host:signal:)(a1, a2, a3);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 232) - 8) + 8))(a1);
  return v5;
}

uint64_t StoredLocation.init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *v3;
  v6 = specialized StoredLocation.init(initialValue:host:signal:)(a1, a2, a3);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 232) - 8) + 8))(a1);
  return v6;
}

uint64_t StoredLocation.update()(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;

  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
  {
    v4 = 1;
    *(_BYTE *)(v1 + 24) = 1;
  }
  else
  {
    AGGraphGetValue();
    v4 = v3 & 1;
  }
  StoredLocationBase.updateValue.getter(a1);
  return v4;
}

uint64_t StoredLocation.isValid.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 16);
    swift_release();
    return v2 != 0;
  }
  return result;
}

uint64_t StoredLocation.isUpdating.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t Counter;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    if (*(_QWORD *)(v1 + 16))
    {
      Counter = AGGraphGetCounter();
      swift_release();
      return Counter != 0;
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t StoredLocation.commit(transaction:id:mutation:)(unint64_t a1, int *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;

  v4 = v3;
  v7 = *v4;
  v8 = *a2;
  result = swift_weakLoadStrong();
  if (result)
  {
    v14 = v8;
    v13 = 1;
    v12 = type metadata accessor for StoredLocationBase.BeginUpdate(0, *(_QWORD *)(v7 + 232), v10, v11);
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, (uint64_t)&v14, a3, (uint64_t)&v13, 1, v12, (uint64_t)&protocol witness table for StoredLocationBase<A>.BeginUpdate);
    return swift_release();
  }
  return result;
}

uint64_t StoredLocation.notifyObservers()()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
    return AGGraphInvalidateValue();
  return result;
}

void StoredLocation.__allocating_init(initialValue:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void StoredLocation.init(initialValue:)()
{
  specialized StoredLocation.init(initialValue:)();
}

uint64_t StoredLocation.__ivar_destroyer()
{
  return swift_weakDestroy();
}

uint64_t StoredLocation.deinit()
{
  uint64_t v0;

  v0 = AnyLocation.deinit();
  swift_release();
  swift_weakDestroy();
  return v0;
}

uint64_t StoredLocation.__deallocating_deinit()
{
  StoredLocation.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObservableLocation.addObserver(host:signal:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_retain();
  swift_weakInit();
  swift_release();
  swift_beginAccess();
  type metadata accessor for ObservableLocation.Observer(255, v1, v2, v3);
  type metadata accessor for Array();
  Array.append(_:)();
  return swift_endAccess();
}

uint64_t ObservableLocation.removeObserver(signal:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  _QWORD v8[3];

  v1 = *v0;
  swift_beginAccess();
  v8[0] = v0[4];
  v4 = type metadata accessor for ObservableLocation.Observer(255, *(_QWORD *)(v1 + 232), v2, v3);
  v5 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v5);
  Collection.firstIndex(where:)();
  result = swift_bridgeObjectRelease();
  if (v7 != 1)
  {
    swift_beginAccess();
    Array.remove(at:)();
    swift_endAccess();
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v8, v4);
  }
  return result;
}

BOOL ObservableLocation.isUpdating.getter()
{
  if (one-time initialization token for sharedGraph != -1)
    swift_once();
  return AGGraphGetCounter() != 0;
}

uint64_t ObservableLocation.commit(transaction:id:mutation:)(unint64_t a1, int *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t *v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;

  v6 = *v3;
  v7 = *a2;
  type metadata accessor for GraphHost();
  v12 = v7;
  v10 = type metadata accessor for StoredLocationBase.BeginUpdate(0, *(_QWORD *)(v6 + 232), v8, v9);
  return static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)(a1, (uint64_t)&v12, a3, (uint64_t)v3, (uint64_t)&protocol witness table for ObservableLocation<A>, v10, (uint64_t)&protocol witness table for StoredLocationBase<A>.BeginUpdate);
}

uint64_t ObservableLocation.mutationHost.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *v0;
  swift_beginAccess();
  type metadata accessor for ObservableLocation.Observer(255, *(_QWORD *)(v1 + 232), v2, v3);
  v4 = type metadata accessor for Array();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for GraphHost?, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  swift_bridgeObjectRetain();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v4);
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t closure #1 in ObservableLocation.mutationHost.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_BYTE *, uint64_t);
  uint64_t result;
  _BYTE v12[16];

  Strong = *a1;
  v8 = type metadata accessor for ObservableLocation.Observer(0, a3, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  if (Strong)
  {
    v10 = *(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8);
    swift_retain();
  }
  else
  {
    Strong = swift_weakLoadStrong();
    v10 = *(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8);
  }
  result = v10(v12, v8);
  *a5 = Strong;
  return result;
}

uint64_t ObservableLocation.notifyObservers()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  void (*v12)(uint64_t *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = *v0;
  swift_beginAccess();
  v4 = type metadata accessor for ObservableLocation.Observer(0, *(_QWORD *)(v1 + 232), v2, v3);
  v5 = swift_bridgeObjectRetain();
  v6 = MEMORY[0x23B7C6268](v5, v4);
  result = swift_bridgeObjectRelease();
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = *MEMORY[0x24BE096C0];
    v10 = MEMORY[0x24BEE12B8];
    do
    {
      while (1)
      {
        swift_beginAccess();
        Array.subscript.getter();
        v11 = AGWeakAttributeGetAttribute() == v9;
        v12 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v12(&v14, v4);
        if (v11)
          break;
        swift_endAccess();
        result = AGGraphInvalidateValue();
        if (++v8 >= v6)
          return result;
      }
      swift_endAccess();
      if (v8 != --v6)
      {
        v14 = v8;
        swift_beginAccess();
        v13 = type metadata accessor for Array();
        MEMORY[0x23B7C9C04](v10, v13);
        MutableCollection.swapAt(_:_:)();
        swift_endAccess();
      }
      swift_beginAccess();
      type metadata accessor for Array();
      Array.remove(at:)();
      swift_endAccess();
      result = ((uint64_t (*)(uint64_t *, uint64_t))v12)(&v14, v4);
    }
    while (v8 < v6);
  }
  return result;
}

uint64_t ObservableLocation.__allocating_init(initialValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  swift_allocObject();
  v7 = specialized ObservableLocation.init(initialValue:)(a1, v4, v5, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 232) - 8) + 8))(a1);
  return v7;
}

uint64_t ObservableLocation.init(initialValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v6 = *v4;
  v7 = specialized ObservableLocation.init(initialValue:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 232) - 8) + 8))(a1);
  return v7;
}

uint64_t ObservableLocation.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t ObservableLocation.deinit()
{
  uint64_t v0;

  v0 = AnyLocation.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ObservableLocation.__deallocating_deinit()
{
  ObservableLocation.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized StoredLocationBase.init(initialValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StoredLocationBase.Data(0, v3, v7, v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  *(_BYTE *)(v1 + 24) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, v3, v10);
  swift_retain();
  v13 = Array.init()();
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v6, v3);
  *(_QWORD *)&v12[*(int *)(v9 + 28)] = v13;
  *(_QWORD *)&v12[*(int *)(v9 + 32)] = v14;
  swift_beginAccess();
  property wrapper backing initializer of StoredLocationBase.data((uint64_t)v12, v3, v15, v16, (uint64_t *)(v1 + 16));
  swift_endAccess();
  swift_release();
  return AnyLocation.init()();
}

uint64_t type metadata accessor for StoredLocationBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoredLocationBase);
}

uint64_t sub_23502827C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2350282A0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in StoredLocationBase.set(_:transaction:)()
{
  uint64_t v0;

  return closure #3 in StoredLocationBase.set(_:transaction:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t specialized StoredLocation.init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_weakInit();
  *(_QWORD *)(v3 + 40) = 0;
  swift_weakAssign();
  *(_QWORD *)(v3 + 40) = a3;
  return specialized StoredLocationBase.init(initialValue:)(a1);
}

uint64_t specialized StoredLocation.__allocating_init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return specialized StoredLocation.init(initialValue:host:signal:)(a1, a2, a3);
}

void specialized StoredLocationBase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void specialized StoredLocation.init(initialValue:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for ObservableLocation.Observer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableLocation.Observer);
}

uint64_t partial apply for closure #1 in ObservableLocation.removeObserver(signal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for ObservableLocation.Observer(0, *(_QWORD *)(v4 + 16), a3, a4);
  return static WeakAttribute.== infix(_:_:)() & 1;
}

uint64_t partial apply for closure #1 in ObservableLocation.mutationHost.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return closure #1 in ObservableLocation.mutationHost.getter(a1, a2, *(_QWORD *)(v4 + 16), a3, a4);
}

uint64_t specialized ObservableLocation.init(initialValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  type metadata accessor for ObservableLocation.Observer(0, *(_QWORD *)(*v4 + 232), a3, a4);
  swift_retain();
  v4[4] = Array.init()();
  swift_release();
  return specialized StoredLocationBase.init(initialValue:)(a1);
}

uint64_t instantiation function for generic protocol witness table for StoredLocationBase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyLocation<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for StoredLocationBase()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for StoredLocationBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StoredLocationBase.__allocating_init(initialValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t type metadata completion function for StoredLocation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for StoredLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoredLocation);
}

uint64_t method lookup function for StoredLocation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StoredLocation.__allocating_init(initialValue:host:signal:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t type metadata completion function for ObservableLocation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObservableLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableLocation);
}

uint64_t initializeWithCopy for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t initializeWithTake for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

double assignWithTake for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = swift_weakTakeAssign();
  result = *(double *)(a2 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

uint64_t type metadata completion function for StoredLocationBase.Data()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StoredLocationBase.Data(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for StoredLocationBase.Data(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StoredLocationBase.Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StoredLocationBase.Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StoredLocationBase.Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredLocationBase.Data(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235028A48 + 4 * byte_2352BE460[v10]))();
  }
}

void storeEnumTagSinglePayload for StoredLocationBase.Data(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_235028BC8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235028C3CLL);
}

void sub_235028BD0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235028BD8);
  JUMPOUT(0x235028C3CLL);
}

void sub_235028C18()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235028C3CLL);
}

void sub_235028C20()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235028C3CLL);
}

uint64_t sub_235028C28(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x235028C3CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x235028C38);
    JUMPOUT(0x235028C34);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for StoredLocationBase.BeginUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoredLocationBase.BeginUpdate);
}

uint64_t _GraphInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return PropertyList.subscript.getter(a1, *v3, a2, *(_QWORD *)(a3 + 8));
}

{
  uint64_t *v3;

  return PropertyList.subscript.getter(a1, *v3, a2, *(_QWORD *)(a3 + 8));
}

uint64_t _GraphInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _ViewListCountInputs.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t _GraphInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _GraphInputs.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t _GraphInputs.environment.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  return *(unsigned int *)(v1 + 16);
}

uint64_t _GraphInputs.environment.setter(int a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(_QWORD *)(v5 + 88) = v4;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v5;
  v7 = *(_DWORD *)(v1 + 32);
  if ((v7 & 0x20) == 0)
    *(_DWORD *)(v1 + 32) = v7 | 0x20;
  return result;
}

uint64_t _GraphInputs.phase.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  *(_DWORD *)(v1 + 24) = result;
  v2 = *(_DWORD *)(v1 + 32);
  if ((v2 & 0x40) == 0)
    *(_DWORD *)(v1 + 32) = v2 | 0x40;
  return result;
}

void static _GraphInputs.Options.viewRequestsLayoutComputer.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _GraphInputs.Options.viewNeedsGeometry.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static _GraphInputs.Options.viewDisplayListAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _GraphInputs.Options.viewNeedsGeometryAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static _GraphInputs.Options.viewNeedsRespondersAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static _GraphInputs.Options.viewStackOrientationIsDefined.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _GraphInputs.Options.viewStackOrientationIsHorizontal.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _GraphInputs.Options.supportsVariableFrameDuration.getter(_DWORD *a1@<X8>)
{
  *a1 = 1024;
}

uint64_t _GraphInputs.mapEnvironment<A>(_:)(_QWORD *a1)
{
  uint64_t v2;

  swift_beginAccess();
  v2 = CachedEnvironment.attribute<A>(keyPath:)(a1);
  swift_endAccess();
  return v2;
}

uint64_t _GraphInputs.intern<A>(_:id:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v5;
  id v6;
  void *v7;
  id v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v5 = *a2;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v6 = (id)AGSubgraphGetCurrent();
    if (!v6)
      goto LABEL_8;
    v7 = v6;
    v8 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v8 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v12 = v5;
    v9 = default argument 1 of GraphHost.intern<A>(_:for:id:)(a3);
    v10 = GraphHost.intern<A>(_:for:id:)(a1, v9, &v12, a3);
    swift_release();
    return v10;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall _GraphInputs.copyCaches()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v10 = *(_OWORD *)(v1 + 48);
  v11 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 81);
  v8 = *(_QWORD *)(v1 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 64) = v4;
  *(_QWORD *)(v9 + 72) = v5;
  *(_BYTE *)(v9 + 80) = v6;
  *(_BYTE *)(v9 + 81) = v7;
  *(_QWORD *)(v9 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v0 + 16) = v9;
}

Swift::Void __swiftcall _GraphInputs.resetCaches()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(_QWORD *)(v5 + 88) = v4;
  swift_release();
  *(_QWORD *)(v0 + 16) = v5;
}

uint64_t _GraphInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = v5;
  v10 = *(_QWORD *)(a5 + 8);
  PropertyList.subscript.getter(a3, *v6, a3, v10);
  v13 = type metadata accessor for Stack(0, a4, v11, v12);
  Stack.push(_:)(a1, v13);
  v15[0] = v15[1];
  specialized PropertyList.subscript.setter((uint64_t)v15, a3, a3, v10);
  return swift_release();
}

uint64_t _GraphInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;

  v7 = v6;
  v12 = type metadata accessor for Stack(255, a4, a3, a4);
  v17 = a6;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Stack<A>, v12, &v17);
  _GraphInputs.recordReusableInput<A>(_:)(a3, a3, a5);
  v13 = *(_QWORD *)(a5 + 8);
  PropertyList.subscript.getter(a3, *v7, a3, v13);
  v14 = swift_checkMetadataState();
  Stack.push(_:)(a1, v14);
  v16[0] = v16[1];
  return PropertyList.subscript.setter((uint64_t)v16, a3, a3, v13);
}

uint64_t _GraphInputs.popLast<A, B>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v5 = v4;
  v9 = *(_QWORD *)(a3 + 8);
  PropertyList.subscript.getter(a1, *v5, a1, v9);
  v12 = type metadata accessor for Stack(0, a2, v10, v11);
  Stack.pop()(v12, a4);
  v14[0] = v14[1];
  return PropertyList.subscript.setter((uint64_t)v14, a1, a1, v9);
}

uint64_t static GraphInput.isTriviallyReusable.getter()
{
  return 0;
}

void static GraphInput.makeReusable(indirectMap:value:)()
{
  protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance DisplayList.Options();
}

uint64_t static GraphInput.tryToReuse(_:by:indirectMap:testOnly:)()
{
  return 0;
}

uint64_t _GraphInputs.Phase.resetSeed.getter()
{
  _DWORD *v0;

  return *v0 >> 1;
}

uint64_t _GraphInputs.Phase.resetSeed.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = *v1 & 1 | (2 * result);
  return result;
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance DisplayList.Options()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static _GraphInputs.Options.needsStableDisplayListIDs.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t _GraphInputs.needsStableDisplayListIDs.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 37) & 1;
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance BodyInput<A>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>();
  return static GraphInput<>.isTriviallyReusable.getter(a1, a2, v4) & 1;
}

uint64_t static GraphInput<>.isTriviallyReusable.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(void))(a3 + 8))() & 1;
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance BodyInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>();
  return static GraphInput<>.makeReusable(indirectMap:value:)(a1, a2, a3, a4, v8);
}

uint64_t static GraphInput<>.makeReusable(indirectMap:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v7(a1, AssociatedTypeWitness, a5);
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance BodyInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>();
  return static GraphInput<>.tryToReuse(_:by:indirectMap:testOnly:)(a1, a2, a3, a4, a5, a6, v12) & 1;
}

uint64_t static GraphInput<>.tryToReuse(_:by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;

  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v11(a2, a3, a4, AssociatedTypeWitness, a7) & 1;
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance BodyCountInput<A>()
{
  protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance DisplayList.Options();
}

BOOL _GraphInputs.Phase.isInserted.getter()
{
  _BYTE *v0;

  return (*v0 & 1) == 0;
}

uint64_t _GraphInputs.animationsDisabled.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 36) & 1;
}

uint64_t _GraphInputs.Phase.isBeingRemoved.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = *v1 & 0xFFFFFFFE | result & 1;
  return result;
}

void static _GraphInputs.Options.needsDynamicLayout.getter(_DWORD *a1@<X8>)
{
  *a1 = 2048;
}

double static _GraphInputs.invalid.getter@<D0>(uint64_t a1@<X8>)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  double result;

  v2 = *MEMORY[0x24BE096C0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 40) = MEMORY[0x24BEE4B08];
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(_QWORD *)(v5 + 88) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 28) = v2;
  return result;
}

uint64_t _GraphInputs.merge(_:)(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v1 = *((_DWORD *)a1 + 2);
  v2 = a1[2];
  v3 = a1[5];
  v5 = *a1;
  v6 = v1;
  v7 = v2;
  v8 = *(_OWORD *)(a1 + 3);
  v9 = v3;
  return _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v5, 0);
}

void static _GraphInputs.Options.doNotScrape.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void _GraphInputs.Phase.init()(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

double _GraphInputs.init(time:phase:environment:transaction:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double result;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 32) = 0xFFFFFFFFLL;
  *(_QWORD *)(a5 + 40) = MEMORY[0x24BEE4B08];
  *(_DWORD *)(a5 + 8) = a1;
  *(_DWORD *)(a5 + 24) = a2;
  v8 = MEMORY[0x24BEE4AF8];
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = v8;
  result = 0.0;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_WORD *)(v10 + 80) = 256;
  *(_QWORD *)(v10 + 88) = v9;
  *(_QWORD *)(a5 + 16) = v10;
  *(_DWORD *)(a5 + 28) = a4;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ReusableInputs@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = qword_254287C00;
  *a1 = static ReusableInputs.defaultValue;
  a1[1] = v2;
  return swift_retain();
}

uint64_t _GraphInputs.customInputs.getter()
{
  return swift_retain();
}

uint64_t _GraphInputs.customInputs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_GraphInputs.customInputs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void (*_GraphInputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  size_t v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  *v9 = a2;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 + 8);
  v9[2] = v4;
  v9[3] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  PropertyList.subscript.getter(a2, *v4, a3, v10);
  return _ViewListCountInputs.subscript.modify;
}

uint64_t _GraphInputs.recordReusableInput<A>(_:)(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  BloomFilter.init(hashValue:)(a1);
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = (uint64_t *)(v7 + 72);
    v9 = (uint64_t *)(v7 + 80);
  }
  else
  {
    v8 = &static ReusableInputs.defaultValue;
    v9 = &qword_254287C00;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v10 = *v9;
  v11 = *v8;
  swift_retain();
  swift_release();
  if (v10 && *(_QWORD *)(v10 + 16) == a2)
    return swift_release();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = v10;
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v3, v11 | v14, (uint64_t)v12);
  swift_release_n();
  return swift_release();
}

void (*_GraphInputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(Swift::Int **a1, char a2)
{
  uint64_t *v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  size_t v15;

  v11 = malloc(0x50uLL);
  *a1 = v11;
  v11[2] = a4;
  v11[3] = a5;
  *v11 = a2;
  v11[1] = a3;
  v12 = *(_QWORD *)(a4 + 8);
  v11[4] = v5;
  v11[5] = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[6] = AssociatedTypeWitness;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[7] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v11[8] = malloc(v15);
  v11[9] = malloc(v15);
  PropertyList.subscript.getter(a2, *v5, a3, v12);
  return _GraphInputs.subscript.modify;
}

void _GraphInputs.subscript.modify(Swift::Int **a1, char a2)
{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  void (*v10)(void *, Swift::Int);
  uint64_t v11;

  v2 = *a1;
  v3 = (void *)(*a1)[8];
  v4 = (void *)(*a1)[9];
  v5 = (*a1)[6];
  v6 = (*a1)[7];
  v11 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void *, void *, Swift::Int))(v6 + 16))(v3, v4, v5);
    _GraphInputs.recordReusableInput<A>(_:)(v8, v8, v7);
    specialized PropertyList.subscript.setter((uint64_t)v3, v9, v8, v11);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    _GraphInputs.recordReusableInput<A>(_:)(v2[1], v2[1], v2[2]);
    specialized PropertyList.subscript.setter((uint64_t)v4, v9, v8, v11);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t _GraphInputs.time.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t _GraphInputs.time.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_GraphInputs.time.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.Phase.init(value:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t (*_GraphInputs.Phase.resetSeed.modify(uint64_t a1))(uint64_t result)
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1 >> 1;
  return _GraphInputs.Phase.resetSeed.modify;
}

uint64_t _GraphInputs.Phase.resetSeed.modify(uint64_t result)
{
  **(_DWORD **)result = **(_DWORD **)result & 1 | (2 * *(_DWORD *)(result + 8));
  return result;
}

uint64_t _GraphInputs.Phase.isBeingRemoved.getter()
{
  _DWORD *v0;

  return *v0 & 1;
}

uint64_t (*_GraphInputs.Phase.isBeingRemoved.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1 & 1;
  return _GraphInputs.Phase.isBeingRemoved.modify;
}

uint64_t _GraphInputs.Phase.isBeingRemoved.modify(uint64_t result)
{
  **(_DWORD **)result = **(_DWORD **)result & 0xFFFFFFFE | *(unsigned __int8 *)(result + 8);
  return result;
}

_DWORD *_GraphInputs.Phase.merge(_:)(_DWORD *result)
{
  unsigned int *v1;

  *v1 = ((*v1 & 0xFFFFFFFE) + *result) | *v1 & 1;
  return result;
}

void static _GraphInputs.Phase.invalid.getter(_DWORD *a1@<X8>)
{
  *a1 = -16;
}

BOOL static _GraphInputs.Phase.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t _GraphInputs.cachedEnvironment.getter()
{
  return swift_retain();
}

void (*_GraphInputs.environment.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 16);
  return _ViewInputs.environment.modify;
}

uint64_t _GraphInputs.phase.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t (*_GraphInputs.phase.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return _GraphInputs.phase.modify;
}

uint64_t _GraphInputs.phase.modify(uint64_t result, char a2)
{
  int v2;

  if ((a2 & 1) == 0)
  {
    v2 = *(_DWORD *)(*(_QWORD *)result + 32);
    if ((v2 & 0x40) == 0)
      *(_DWORD *)(*(_QWORD *)result + 32) = v2 | 0x40;
  }
  return result;
}

uint64_t _GraphInputs.transaction.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

uint64_t _GraphInputs.transaction.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t (*_GraphInputs.transaction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _GraphInputs.changedDebugProperties.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 32);
}

_DWORD *_GraphInputs.changedDebugProperties.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*_GraphInputs.changedDebugProperties.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.Options.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _GraphInputs.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _GraphInputs.Options.animationsDisabled.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static _GraphInputs.Options.needsAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 4096;
}

void _GraphInputs.options.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 36);
}

_DWORD *_GraphInputs.options.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = *result;
  return result;
}

uint64_t (*_GraphInputs.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.animationsDisabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFFE | result & 1;
  return result;
}

unsigned __int8 *(*_GraphInputs.animationsDisabled.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 36) & 1;
  return _GraphInputs.animationsDisabled.modify;
}

unsigned __int8 *_GraphInputs.animationsDisabled.modify(unsigned __int8 *result)
{
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFFFFE | result[8];
  return result;
}

uint64_t _GraphInputs.mergedInputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _GraphInputs.mergedInputs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*_GraphInputs.mergedInputs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.import(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;

  v3 = *a1;
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 8);
  v6 = a1[5];
  swift_retain();
  swift_release();
  *(_QWORD *)v1 = v3;
  swift_beginAccess();
  v7 = *(_DWORD *)(v4 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v8;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_WORD *)(v10 + 80) = 256;
  *(_QWORD *)(v10 + 88) = v9;
  swift_release();
  *(_QWORD *)(v1 + 16) = v10;
  v11 = *(_DWORD *)(v1 + 32) | v5;
  *(_QWORD *)(v1 + 24) = a1[3];
  *(_DWORD *)(v1 + 32) = v11 | 0x60;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = v6;
  return result;
}

uint64_t _GraphInputs.merge(_:ignoringPhase:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v3 = v2;
  v24 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 24);
  v7 = *(unsigned int *)(a1 + 28);
  LODWORD(v8) = *(_DWORD *)(a1 + 36);
  v21 = *(_DWORD *)(a1 + 32);
  PropertyList.merge(_:)(*(_QWORD *)a1);
  swift_beginAccess();
  v9 = *(unsigned int *)(v5 + 16);
  v10 = *(_QWORD *)(v2 + 16);
  swift_beginAccess();
  v11 = *(_DWORD *)(v10 + 16);
  if ((_DWORD)v9 != v11 && (specialized Set._Variant.insert(_:)(&v22, v9) & 1) != 0)
  {
    v22 = AGCreateWeakAttribute();
    v23 = v11;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type MergedEnvironment and conformance MergedEnvironment();
    v12 = Attribute.init<A>(body:value:flags:update:)();
    v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
    v14 = v8;
    v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = v12;
    *(_QWORD *)(v8 + 24) = MEMORY[0x24BEE4AF8];
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_WORD *)(v8 + 80) = 256;
    *(_QWORD *)(v8 + 88) = v13;
    swift_release();
    *(_QWORD *)(v3 + 16) = v8;
    LOBYTE(v8) = v14;
    v15 = *(_DWORD *)(v3 + 32);
    if ((v15 & 0x20) == 0)
      *(_DWORD *)(v3 + 32) = v15 | 0x20;
  }
  v16 = *(_DWORD *)(v3 + 28);
  if ((_DWORD)v7 != v16 && (specialized Set._Variant.insert(_:)(&v22, v7) & 1) != 0)
  {
    v22 = AGCreateWeakAttribute();
    v23 = v16;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type MergedTransaction and conformance MergedTransaction();
    *(_DWORD *)(v3 + 28) = Attribute.init<A>(body:value:flags:update:)();
  }
  if ((a2 & 1) == 0)
  {
    v17 = *(_DWORD *)(v3 + 24);
    if ((_DWORD)v6 != v17 && (specialized Set._Variant.insert(_:)(&v22, v6) & 1) != 0)
    {
      v22 = AGCreateWeakAttribute();
      v23 = v17;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type MergedPhase and conformance MergedPhase();
      *(_DWORD *)(v3 + 24) = Attribute.init<A>(body:value:flags:update:)();
      v18 = *(_DWORD *)(v3 + 32);
      if ((v18 & 0x40) == 0)
        *(_DWORD *)(v3 + 32) = v18 | 0x40;
    }
  }
  *(_DWORD *)(v3 + 32) |= v21;
  v19 = swift_bridgeObjectRetain();
  result = specialized Set.formUnion<A>(_:)(v19);
  *(_DWORD *)(v3 + 36) |= v8 & 1;
  return result;
}

uint64_t MergedEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t *WeakValue;
  uint64_t v6;
  uint64_t result;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v6 = *WeakValue;
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    PropertyList.merge(_:)(v6);
    swift_release();
    if (v4)
      swift_release();
    swift_release();
    result = swift_release();
  }
  else
  {
    swift_retain();
    result = swift_retain();
  }
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MergedEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return MergedEnvironment.value.getter(a1);
}

uint64_t MergedTransaction.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)AGGraphGetValue();
  if (AGGraphGetWeakValue())
  {
    swift_retain();
    v1 = swift_retain();
    PropertyList.merge(_:)(v1);
    swift_release();
  }
  else
  {
    swift_retain();
  }
  return v0;
}

uint64_t protocol witness for Rule.value.getter in conformance MergedTransaction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MergedTransaction.value.getter();
  *a1 = result;
  return result;
}

_DWORD *MergedPhase.value.getter@<X0>(unsigned int *a1@<X8>)
{
  unsigned int v2;
  _DWORD *result;

  v2 = *(_DWORD *)AGGraphGetValue();
  result = (_DWORD *)AGGraphGetWeakValue();
  if (result)
    v2 = (*result + (v2 & 0xFFFFFFFE)) | v2 & 1;
  *a1 = v2;
  return result;
}

_DWORD *protocol witness for Rule.value.getter in conformance MergedPhase@<X0>(unsigned int *a1@<X8>)
{
  return MergedPhase.value.getter(a1);
}

uint64_t specialized _GraphInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  _GraphInputs.recordReusableInput<A>(_:)(a3, a3, a4);
  return specialized PropertyList.subscript.setter(a1, a2, a3, *(_QWORD *)(a4 + 8));
}

unint64_t lazy protocol witness table accessor for type MergedPhase and conformance MergedPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MergedPhase and conformance MergedPhase;
  if (!lazy protocol witness table cache variable for type MergedPhase and conformance MergedPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MergedPhase, &unk_250611258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergedPhase and conformance MergedPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MergedTransaction and conformance MergedTransaction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MergedTransaction and conformance MergedTransaction;
  if (!lazy protocol witness table cache variable for type MergedTransaction and conformance MergedTransaction)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MergedTransaction, &unk_250625FF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergedTransaction and conformance MergedTransaction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MergedEnvironment and conformance MergedEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MergedEnvironment and conformance MergedEnvironment;
  if (!lazy protocol witness table cache variable for type MergedEnvironment and conformance MergedEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MergedEnvironment, &unk_250625F60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergedEnvironment and conformance MergedEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.Options and conformance _GraphInputs.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GraphInputs.Options, &type metadata for _GraphInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GraphInputs.Options, &type metadata for _GraphInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GraphInputs.Options, &type metadata for _GraphInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GraphInputs.Options, &type metadata for _GraphInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

_DWORD *sub_23502A924@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result >> 1;
  return result;
}

_DWORD *sub_23502A934(_DWORD *result, int *a2)
{
  *a2 = *a2 & 1 | (2 * *result);
  return result;
}

_BYTE *sub_23502A948@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

unsigned __int8 *sub_23502A958(unsigned __int8 *result, unsigned int *a2)
{
  *a2 = *a2 & 0xFFFFFFFE | *result;
  return result;
}

uint64_t sub_23502A970@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 16);
  return result;
}

uint64_t sub_23502A9B8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 24);
  return result;
}

_DWORD *sub_23502A9C4(_DWORD *result, uint64_t a2)
{
  int v2;

  *(_DWORD *)(a2 + 24) = *result;
  v2 = *(_DWORD *)(a2 + 32);
  if ((v2 & 0x40) == 0)
    *(_DWORD *)(a2 + 32) = v2 | 0x40;
  return result;
}

uint64_t sub_23502A9E0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 36) & 1;
  return result;
}

unsigned __int8 *sub_23502A9F0(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFFE | *result;
  return result;
}

uint64_t dispatch thunk of static GraphInput.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static GraphInput.makeReusable(indirectMap:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static GraphInput.tryToReuse(_:by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t destroy for _GraphInputs()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _GraphInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _GraphInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _GraphInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _GraphInputs()
{
  return &type metadata for _GraphInputs;
}

ValueMetadata *type metadata accessor for _GraphInputs.Phase()
{
  return &type metadata for _GraphInputs.Phase;
}

ValueMetadata *type metadata accessor for _GraphInputs.Options()
{
  return &type metadata for _GraphInputs.Options;
}

uint64_t dispatch thunk of static _GraphInputsModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

void *type metadata accessor for MergedEnvironment()
{
  return &unk_250625F60;
}

void *type metadata accessor for MergedTransaction()
{
  return &unk_250625FF0;
}

void *type metadata accessor for MergedPhase()
{
  return &unk_250611258;
}

unint64_t instantiation function for generic protocol witness table for MergedPhase(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MergedPhase and conformance MergedPhase();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MergedTransaction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MergedTransaction and conformance MergedTransaction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MergedEnvironment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MergedEnvironment and conformance MergedEnvironment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>;
  if (!lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Stack);
    v2 = &protocol witness table for BodyInputElement;
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Stack<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>;
  if (!lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Stack);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type BodyInputElement and conformance BodyInputElement();
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Stack<A>, v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>);
  }
  return result;
}

uint64_t sub_23502AD04()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ReusableInputStorage()
{
  return &type metadata for ReusableInputStorage;
}

ValueMetadata *type metadata accessor for ReusableInputs()
{
  return &type metadata for ReusableInputs;
}

uint64_t EnvironmentValues.watchDisplayVariant.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

void _DeviceVariant.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static _DeviceVariant.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DeviceVariant.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance _DeviceVariant()
{
  Hasher.init(_seed:)();
  _diagnoseUnavailableCodeReached()();
}

void EnvironmentValues._deviceVariant.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._deviceVariant.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._deviceVariant.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL WatchDisplayVariant.isH430Compatible.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  return v1 == 4 || v1 == 7;
}

BOOL WatchDisplayVariant.isH484Compatible.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  return v1 == 5 || v1 == 8;
}

uint64_t key path getter for EnvironmentValues.watchDisplayVariant : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.watchDisplayVariant.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.watchDisplayVariant.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 1;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.watchDisplayVariant.modify;
}

uint64_t EnvironmentValues.watchDisplayVariant.modify(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

SwiftUI::WatchDisplayVariant_optional __swiftcall WatchDisplayVariant.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if ((unint64_t)rawValue >= 9)
    v2 = 1;
  else
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::WatchDisplayVariant_optional)rawValue;
}

uint64_t WatchDisplayVariant.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::WatchDisplayVariant_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WatchDisplayVariant(Swift::Int *a1)
{
  return WatchDisplayVariant.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WatchDisplayVariant()
{
  lazy protocol witness table accessor for type WatchDisplayVariant and conformance WatchDisplayVariant();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WatchDisplayVariant()
{
  lazy protocol witness table accessor for type WatchDisplayVariant and conformance WatchDisplayVariant();
  return RawRepresentable<>.encode(to:)();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, a4);
    if (!v5)
      atomic_store(v4, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _DeviceVariant and conformance _DeviceVariant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DeviceVariant and conformance _DeviceVariant;
  if (!lazy protocol witness table cache variable for type _DeviceVariant and conformance _DeviceVariant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DeviceVariant, &type metadata for _DeviceVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DeviceVariant and conformance _DeviceVariant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchDisplayVariant and conformance WatchDisplayVariant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant;
  if (!lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WatchDisplayVariant, &type metadata for WatchDisplayVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant;
  if (!lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WatchDisplayVariant, &type metadata for WatchDisplayVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant);
  }
  return result;
}

void sub_23502B300()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_23502B324()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_23502B338(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.watchDisplayVariant.setter(&v2);
}

uint64_t storeEnumTagSinglePayload for _DeviceVariant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23502B3B8 + 4 * byte_2352BEAC5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23502B3EC + 4 * byte_2352BEAC0[v4]))();
}

uint64_t sub_23502B3EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23502B3F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23502B3FCLL);
  return result;
}

uint64_t sub_23502B408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23502B410);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23502B414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23502B41C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _DeviceVariant()
{
  return &type metadata for _DeviceVariant;
}

uint64_t storeEnumTagSinglePayload for WatchDisplayVariant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23502B484 + 4 * byte_2352BEACF[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23502B4B8 + 4 * byte_2352BEACA[v4]))();
}

uint64_t sub_23502B4B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23502B4C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23502B4C8);
  return result;
}

uint64_t sub_23502B4D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23502B4DCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23502B4E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23502B4E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WatchDisplayVariant()
{
  return &type metadata for WatchDisplayVariant;
}

ValueMetadata *type metadata accessor for EnvironmentValues.WatchDisplayVariantKey()
{
  return &type metadata for EnvironmentValues.WatchDisplayVariantKey;
}

uint64_t TimeDataFormatting.FormatTransition.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClosedRange();
  MEMORY[0x23B7C5D28](a1, v4, *(_QWORD *)(a2 + 48));
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static TimeDataFormatting.FormatTransition.== infix(_:_:)()
{
  if ((static ClosedRange.== infix(_:_:)() & 1) != 0)
    type metadata accessor for TimeDataFormatting.FormatTransition();
  return 0;
}

uint64_t TimeDataFormatting.FormatTransition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x66666F646E6168 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t TimeDataFormatting.FormatTransition.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x66666F646E6168;
  else
    return 0x65676E6172;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  char *v0;

  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(uint64_t a1)
{
  char *v1;

  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  char *v0;

  return TimeDataFormatting.FormatTransition.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TimeDataFormatting.FormatTransition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.FormatTransition<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.FormatTransition<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void TimeDataFormatting.FormatTransition.encode(to:)()
{
  type metadata accessor for TimeDataFormatting.FormatTransition.CodingKeys();
}

uint64_t sub_23502B94C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.FormatTransition<A>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  *(_QWORD *)(v2 - 136) = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v2 - 120) = 0;
  v6 = type metadata accessor for ClosedRange();
  *(_QWORD *)(v2 - 72) = *(_QWORD *)(v2 - 160);
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE08E0], v6, v2 - 72);
  v7 = *(_QWORD *)(v2 - 128);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v7)
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v5, v3);
  v9 = *(_QWORD *)(v2 - 136);
  *(_BYTE *)(v2 - 120) = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v5, v3);
}

Swift::Int TimeDataFormatting.FormatTransition.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  TimeDataFormatting.FormatTransition.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

void TimeDataFormatting.FormatTransition.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v14[1] = a7;
  v14[0] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14[4] = (char *)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ClosedRange();
  v14[3] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v14[6] = (char *)v14 - v13;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  type metadata accessor for TimeDataFormatting.FormatTransition.CodingKeys();
}

void sub_23502BBC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 - 136) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.FormatTransition<A>.CodingKeys, a1);
  v7 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v6 - 144) = v7;
  *(_QWORD *)(v6 - 208) = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v6 - 184) = v3;
  *(_QWORD *)(v6 - 120) = v3;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 168) = v1;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v5;
  *(_QWORD *)(v6 - 88) = v2;
  type metadata accessor for TimeDataFormatting.FormatTransition();
}

uint64_t sub_23502BC38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 152) = v1;
  v8 = *(_QWORD *)(v3 - 128);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v3 - 128) = v5;
  v9 = (uint64_t)v2;
  v10 = v7;
  v12 = *(_QWORD *)(v3 - 208);
  v11 = *(_QWORD *)(v3 - 200);
  v14 = *(_QWORD *)(v3 - 192);
  v13 = *(_QWORD *)(v3 - 184);
  *(_BYTE *)(v3 - 120) = 0;
  v15 = *(_QWORD *)(v3 - 160);
  *(_QWORD *)(v3 - 72) = *(_QWORD *)(v3 - 168);
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE0900], v15, v3 - 72);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, _QWORD, _QWORD))(v11 + 32))(v10, *(_QWORD *)(v3 - 176), *(_QWORD *)(v3 - 160));
  *(_BYTE *)(v3 - 120) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 144));
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 224) + 32))(&v10[*(int *)(a1 + 60)], v14, v13);
  v16 = *(_QWORD *)(v3 - 128);
  (*(void (**)(_QWORD, char *, uint64_t))(v16 + 16))(*(_QWORD *)(v3 - 216), v10, a1);
  __swift_destroy_boxed_opaque_existential_1(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v10, a1);
}

void protocol witness for Decodable.init(from:) in conformance TimeDataFormatting.FormatTransition<A>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  TimeDataFormatting.FormatTransition.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

void protocol witness for Encodable.encode(to:) in conformance TimeDataFormatting.FormatTransition<A>()
{
  TimeDataFormatting.FormatTransition.encode(to:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.FormatTransition<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  TimeDataFormatting.FormatTransition.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.FormatTransition<A>()
{
  return static TimeDataFormatting.FormatTransition.== infix(_:_:)();
}

double AnyInterfaceIdiom.reducedLuminanceBudget(for:)(_BYTE *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;

  v2 = 0.0;
  if (*a1)
  {
    if (*a1 != 1)
    {
      v5 = 0x7FF0000000000000;
      return *(double *)&v5;
    }
    v3 = *(_QWORD *)(v1 + 8);
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>, (uint64_t)&type metadata for ComplicationInterfaceIdiom, (uint64_t)&protocol witness table for ComplicationInterfaceIdiom);
    v4 = *(void (**)(void))(v3 + 8);
    if ((((uint64_t (*)(void))v4)() & 1) == 0)
    {
      type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WidgetInterfaceIdiom>, (uint64_t)&type metadata for WidgetInterfaceIdiom, (uint64_t)&protocol witness table for WidgetInterfaceIdiom);
      if ((((uint64_t (*)(void))v4)() & 1) == 0)
      {
        type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>, (uint64_t)&type metadata for WatchInterfaceIdiom, (uint64_t)&protocol witness table for WatchInterfaceIdiom);
        v4();
      }
      v5 = 0x404E000000000000;
      return *(double *)&v5;
    }
  }
  return v2;
}

void type metadata accessor for TimeDataFormatting.FormatTransition()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for TimeDataFormatting.FormatTransition.CodingKeys()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void base witness table accessor for Equatable in TimeDataFormatting.FormatTransition<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t dispatch thunk of VariablePrecisionDiscreteFormatStyle.precisionTransition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata completion function for TimeDataFormatting.FormatTransition()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ClosedRange();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.FormatTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = v7 + v8 + ((v7 + v8) & ~v8);
  v12 = (v11 & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v12 > 0x18)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, *(_QWORD *)(a3 + 16));
    v16((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
    v16((uint64_t *)(((unint64_t)v4 + v11) & v9), (uint64_t *)(((unint64_t)a2 + v11) & v9), v5);
  }
  return v4;
}

uint64_t destroy for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = v5 + v6 + a1;
  v10(v8 & ~v6, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v8 + (v7 & ~v6)) & ~v6, v3);
}

uint64_t initializeWithCopy for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.FormatTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64)
       + *(unsigned __int8 *)(v4 + 80)
       + ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23502C4EC + 4 * byte_2352BECD0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TimeDataFormatting.FormatTransition(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t storeEnumTagSinglePayload for TimeDataFormatting.FormatTransition.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23502C750 + 4 * byte_2352BECE3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23502C784 + 4 * byte_2352BECDE[v4]))();
}

uint64_t sub_23502C784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23502C78C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23502C794);
  return result;
}

uint64_t sub_23502C7A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23502C7A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23502C7AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23502C7B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t Color.resolve(in:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v3);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance Color(uint64_t a1)
{
  uint64_t *v1;

  return Color._apply(to:)(a1, *v1);
}

uint64_t Color._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  float (*v8)(uint64_t, _QWORD *);
  float v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];

  if (*(_BYTE *)(a1 + 24) != 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 112))(a2, a1);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 56);
  if (*(uint64_t *)a1 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v10 = a2;
  }
  else
  {
    v12[0] = *(_QWORD *)(a1 + 48);
    v12[1] = v7;
    v8 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v5, v6);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v9 = v8(v4, v12);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.OpacityColor>(0);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = a2;
    *(double *)(v10 + 24) = v9;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 3;
  return result;
}

void protocol witness for ShapeStyle.resolve(in:) in conformance Color(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  __int128 v8;

  v4 = *v2;
  v8 = *a1;
  *(float *)a2 = (*(float (**)(__int128 *))(*(_QWORD *)v4 + 104))(&v8);
  *(_DWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v7;
}

uint64_t Color.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for ColorBox(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 160) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 176), a1);
  return v5;
}

uint64_t ColorProvider.staticColor.getter()
{
  return 0;
}

uint64_t ColorProvider.kitColor.getter()
{
  return 0;
}

uint64_t ColorProvider.colorDescription.getter(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return String.init<A>(describing:)();
}

uint64_t static Color.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a2) & 1;
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.DisplayP3()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.opacity(at:environment:) in conformance Color.DisplayP3(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = *a2;
  v4 = a2[1];
  EnvironmentValues.systemColorDefinition.getter();
  v7[0] = v3;
  v7[1] = v4;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(v5 + 16))(a1, v7);
}

uint64_t type metadata accessor for ColorBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColorBox);
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance ContentStyle.ID()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.BackgroundColorProvider()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance GradientColorProvider()
{
  uint64_t v0;

  outlined copy of EitherGradient(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
  return String.init<A>(describing:)();
}

uint64_t Color.provider.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Color.provider.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ColorBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 160) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 176), a1);
  return v2;
}

uint64_t Color.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = type metadata accessor for CustomColorProvider(0, a2, a3, a4);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - v8;
  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CustomColorProvider<A>, v6, v7);
  type metadata accessor for ColorBox(0, v6, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v9, a1, a2);
  v12 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 160) - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)v12 + 176), v9);
  return v12;
}

uint64_t Color.cgColor.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 120))();
}

uint64_t Color.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 136))();
}

uint64_t Color.description.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 144))();
}

Swift::Int Color.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 136))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

void Color.body(environment:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  __int128 v7;

  v7 = *a1;
  *(float *)a3 = (*(float (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v7);
  *(_DWORD *)(a3 + 4) = v4;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v6;
}

uint64_t AnyColorBox.apply(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  float (*v7)(uint64_t, _QWORD *);
  float v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];

  if (*(_BYTE *)(a1 + 24) == 2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_BYTE *)(a1 + 40);
    if (*(uint64_t *)a1 < 1)
    {
      swift_retain();
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 56);
      v13[0] = *(_QWORD *)(a1 + 48);
      v13[1] = v6;
      v7 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
      swift_retain();
      outlined copy of _ShapeStyle_Shape.Result(v4, v5);
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      v8 = v7(v3, v13);
      swift_release();
      swift_release();
      type metadata accessor for ColorBox<Color.OpacityColor>(0);
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v1;
      *(double *)(v9 + 24) = v8;
      outlined consume of _ShapeStyle_Shape.Result(v4, v5);
      swift_release();
      swift_release();
      swift_release();
      v1 = v9;
    }
    result = outlined consume of _ShapeStyle_Shape.Result(v4, v5);
    *(_QWORD *)(a1 + 32) = v1;
    *(_BYTE *)(a1 + 40) = 3;
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 112);
    v11 = swift_retain();
    v10(v11, a1);
    return swift_release();
  }
  return result;
}

void AnyColorBox.resolve(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyColorBox.apply(color:to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyColorBox.staticColor.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyColorBox.kitColor.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyColorBox.hash(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyColorBox.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyColorBox.opacity(at:environment:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyColorBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyColorBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

float CustomColorProvider.resolve(in:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a1;
  (*(void (**)(uint64_t *__return_ptr, __int128 *, _QWORD))(*(_QWORD *)(a2 + 32) + 48))(&v4, &v3, *(_QWORD *)(a2 + 16));
  return *(float *)&v4;
}

uint64_t CustomColorProvider.colorDescription.getter(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return String.init<A>(describing:)();
}

uint64_t CustomColorProvider.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static CustomColorProvider.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int CustomColorProvider.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomColorProvider<A>()
{
  Hasher.init(_seed:)();
  CustomColorProvider.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CustomColorProvider<A>()
{
  return static CustomColorProvider.== infix(_:_:)();
}

uint64_t ColorBox.resolve(in:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  v5 = *a1;
  return (*(uint64_t (**)(__int128 *, _QWORD))(v3 + 16))(&v5, *(_QWORD *)(v2 + 160));
}

uint64_t ColorBox.apply(color:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v2 + 168) + 24))(a1, a2, *(_QWORD *)(*(_QWORD *)v2 + 160));
}

uint64_t ColorBox.staticColor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 168) + 32))(*(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t ColorBox.kitColor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 168) + 40))(*(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t ColorBox.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t ColorBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t ColorBox.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 168) + 48))(*(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t ColorBox.opacity(at:environment:)(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  v6 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(v4 + 56))(a1, &v6, *(_QWORD *)(v3 + 160));
}

uint64_t ColorBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 160) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
}

uint64_t ColorBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 160) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  return swift_deallocClassInstance();
}

uint64_t ObjcColor.color.getter()
{
  return swift_retain();
}

id ObjcColor.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI9ObjcColor_color] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ObjcColor.init(_:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI9ObjcColor_color] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t ObjcColor.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  char *v8;
  _BYTE v9[24];
  uint64_t v10;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    v6 = 0;
    return v6 & 1;
  }
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI9ObjcColor_color);
  if (v3 == *(_QWORD *)&v8[OBJC_IVAR____TtC7SwiftUI9ObjcColor_color])
  {

    v6 = 1;
  }
  else
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
    v5 = swift_retain();
    v6 = v4(v5);

    swift_release();
  }
  return v6 & 1;
}

Swift::Int ObjcColor.hash.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI9ObjcColor_color);
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v3);
  return Hasher._finalize()();
}

id ObjcColor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ObjcColor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ObjcColor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.NamedColor()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  swift_bridgeObjectRetain();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.OpacityColor()
{
  swift_retain();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.HierarchicalOpacityColor()
{
  swift_retain();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.DestinationOverProvider()
{
  swift_retain();
  swift_retain();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.MixProvider()
{
  swift_retain();
  swift_retain();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.SettingOpacityProvider()
{
  swift_retain();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.TintAdjustmentProvider()
{
  swift_retain();
  return String.init<A>(describing:)();
}

uint64_t type metadata accessor for CustomColorProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomColorProvider);
}

_UNKNOWN **associated type witness table accessor for EnvironmentalView.EnvironmentBody : View in Color()
{
  return &protocol witness table for ColorView;
}

ValueMetadata *type metadata accessor for Color()
{
  return &type metadata for Color;
}

uint64_t dispatch thunk of ColorProvider.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ColorProvider.apply(color:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ColorProvider.staticColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ColorProvider.kitColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ColorProvider.colorDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ColorProvider.opacity(at:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t type metadata accessor for AnyColorBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyColorBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyColorBox.resolve(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AnyColorBox.apply(color:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AnyColorBox.staticColor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AnyColorBox.kitColor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AnyColorBox.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AnyColorBox.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AnyColorBox.opacity(at:environment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t type metadata completion function for ColorBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ObjcColor()
{
  return objc_opt_self();
}

uint64_t method lookup function for ObjcColor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ObjcColor.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t getEnumTagSinglePayload for CustomColorProvider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23502DF24 + 4 * byte_2352BEF38[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CustomColorProvider(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void base witness table accessor for Equatable in CustomColorProvider<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for CustomColorProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CustomColorProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t View._onBindingChange<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a6;
  v26 = a4;
  v12 = type metadata accessor for Binding(0, a5, a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - v14;
  v17 = type metadata accessor for _BindingActionModifier(0, a5, a7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v25 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, v12, v19);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v21, v15, v12);
  v22 = &v21[*(int *)(v17 + 36)];
  *(_QWORD *)v22 = a2;
  *((_QWORD *)v22 + 1) = a3;
  View.modifier<A>(_:)(v21, v26, v17, v27);
  v23 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  swift_retain();
  return v23(v21, v17);
}

uint64_t type metadata accessor for _BindingActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BindingActionModifier);
}

uint64_t _BindingActionModifier.init(binding:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v12 = type metadata accessor for Binding(0, a4, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  result = type metadata accessor for _BindingActionModifier(0, a4, a5, v13);
  v15 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t _BindingActionModifier.binding.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for Binding(0, *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v4, v6);
}

uint64_t _BindingActionModifier.binding.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for Binding(0, *(_QWORD *)(a2 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
}

uint64_t (*_BindingActionModifier.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _BindingActionModifier.action : <A>_BindingActionModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)(uint64_t a1)@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);

  v6 = *(_QWORD *)(a3 + a2 - 16);
  v7 = *(_QWORD *)(a3 + a2 - 8);
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for _BindingActionModifier(0, v6, v7, a4) + 36));
  v10 = *v8;
  v9 = v8[1];
  v11 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((_QWORD *)v11 + 2) = v6;
  *((_QWORD *)v11 + 3) = v7;
  *((_QWORD *)v11 + 4) = v10;
  *((_QWORD *)v11 + 5) = v9;
  *a5 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  a5[1] = v11;
  return swift_retain();
}

uint64_t key path setter for _BindingActionModifier.action : <A>_BindingActionModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((_QWORD *)v9 + 2) = v5;
  *((_QWORD *)v9 + 3) = v6;
  *((_QWORD *)v9 + 4) = v8;
  *((_QWORD *)v9 + 5) = v7;
  v11 = (uint64_t (**)(uint64_t))(a2
                                         + *(int *)(type metadata accessor for _BindingActionModifier(0, v5, v6, v10)
                                                  + 36));
  swift_retain();
  result = swift_release();
  *v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  v11[1] = v9;
  return result;
}

uint64_t _BindingActionModifier.action.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t _BindingActionModifier.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_BindingActionModifier.action.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _BindingActionModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t *);
  uint64_t v36;
  int v37;
  char v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  v34 = a4;
  v35 = a3;
  v33 = a7;
  v52 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - v12;
  v15 = type metadata accessor for BindingActionDispatcher(0, a5, a6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v28 - v17;
  LODWORD(a1) = *a1;
  v19 = *a2;
  v20 = *((_DWORD *)a2 + 2);
  v31 = a2[2];
  v32 = *((_DWORD *)a2 + 20);
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v42);
  v36 = v42;
  v37 = v43;
  v38 = v44;
  v21 = ((__n128 (*)(char *, uint64_t, uint64_t, uint64_t))*(_QWORD *)(*(_QWORD *)(a5 - 8) + 56))(v13, 1, 1, a5);
  v21.n128_u64[0] = a2[3];
  v30 = v21;
  BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((int)a1, v21.n128_i32[0], (uint64_t)&v36, (uint64_t)v13, 0, 0, 0, a5, (uint64_t)v18, a6);
  v40 = v15;
  v41 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BindingActionDispatcher<A>, v15);
  type metadata accessor for Attribute<()>();
  v29 = *(_OWORD *)(a2 + 5);
  v22 = a2[4];
  v28 = *(_OWORD *)(a2 + 7);
  v23 = a2[9];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)v39, v15, MEMORY[0x24BEE4078], v24, MEMORY[0x24BEE40A8], v25);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v26 = AGGraphSetFlags();
  v42 = v19;
  v43 = v20;
  v45 = v31;
  v46 = v30.n128_u64[0];
  v47 = v22;
  v48 = v29;
  v49 = v28;
  v50 = v23;
  v51 = v32;
  return v35(v26, &v42);
}

uint64_t type metadata accessor for BindingActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BindingActionDispatcher);
}

uint64_t default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  uint64_t Context;
  uint64_t v6;
  int v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v6 = Context;
    swift_retain();

    swift_beginAccess();
    v7 = *(_DWORD *)(v6 + 64);
    result = swift_release();
    *(_DWORD *)a1 = v7;
    *(_QWORD *)(a1 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v15;
  char v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;

  v15 = *(_DWORD *)(a3 + 8);
  v16 = *(_BYTE *)(a3 + 12);
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_QWORD *)(a9 + 8) = *(_QWORD *)a3;
  *(_DWORD *)(a9 + 16) = v15;
  *(_BYTE *)(a9 + 20) = v16;
  v17 = (int *)type metadata accessor for BindingActionDispatcher(0, a8, a10, a4);
  v18 = a9 + v17[11];
  v19 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a4, v19);
  v21 = (_QWORD *)(a9 + v17[12]);
  *v21 = a5;
  v21[1] = a6;
  *(_DWORD *)(a9 + v17[13]) = a7;
  return result;
}

uint64_t static _BindingActionModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v46 = a3;
  v47 = a4;
  v45 = a7;
  v65 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v32 - v12;
  v15 = type metadata accessor for BindingActionDispatcher(0, a5, a6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v32 - v17;
  v19 = *a1;
  v33 = *a2;
  v34 = *((_DWORD *)a2 + 2);
  v35 = a2[2];
  v20 = *((_DWORD *)a2 + 6);
  v36 = *((_DWORD *)a2 + 7);
  v37 = *((_DWORD *)a2 + 8);
  v38 = *((_DWORD *)a2 + 9);
  v39 = a2[5];
  v40 = a2[6];
  v41 = a2[7];
  v42 = *((_DWORD *)a2 + 16);
  v43 = a2[9];
  v44 = *((unsigned __int8 *)a2 + 80);
  if (one-time initialization token for v3 != -1)
    swift_once();
  v21 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v23 = type metadata accessor for _BindingActionModifier(0, a5, a6, v22);
      LODWORD(v48) = v19;
      v51 = v33;
      v52 = v34;
      v54 = v35;
      v55 = v20;
      v56 = v36;
      v57 = v37;
      v58 = v38;
      v59 = v39;
      v60 = v40;
      v61 = v41;
      v62 = v42;
      v63 = v43;
      v64 = v44;
      return static ViewModifier.makeMultiViewList(modifier:inputs:body:)((int *)&v48, (uint64_t)&v51, v46, v47, v23, (uint64_t)&protocol witness table for _BindingActionModifier<A>);
    }
  }
  else if (static Semantics.forced < v21)
  {
    goto LABEL_7;
  }
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v51);
  v48 = v51;
  v49 = v52;
  v50 = v53;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v13, 1, 1, a5);
  v25 = BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)(v19, v20, (uint64_t)&v48, (uint64_t)v13, 0, 0, 0, a5, (uint64_t)v18, a6);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v30 = v15;
  v31 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BindingActionDispatcher<A>, v15, v26);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)(&v32 - 4), v15, MEMORY[0x24BEE4078], v27, MEMORY[0x24BEE40A8], v28);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v29 = AGGraphSetFlags();
  v51 = v33;
  v52 = v34;
  v54 = v35;
  v55 = v20;
  v56 = v36;
  v57 = v37;
  v58 = v38;
  v59 = v39;
  v60 = v40;
  v61 = v41;
  v62 = v42;
  v63 = v43;
  v64 = v44;
  return ((uint64_t (*)(uint64_t, uint64_t *))v46)(v29, &v51);
}

uint64_t BindingActionDispatcher.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for _BindingActionModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BindingActionModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _BindingActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BindingActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _BindingActionModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t BindingActionDispatcher.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t result;
  int v40;
  int v41;
  int v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;

  v2 = v1;
  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v69 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v7 = (char *)&v60 - v6;
  v64 = *(_QWORD *)(v3 + 24);
  v9 = type metadata accessor for _BindingActionModifier(0, v4, v64, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v60 - v11;
  v68 = *(_QWORD *)(v4 - 8);
  v13 = *(_QWORD *)(v68 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v63 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v67 = (char *)&v60 - v16;
  v18 = *(_DWORD *)AGGraphGetValue() >> 1;
  v19 = *(int *)(v3 + 52);
  if (v18 != *(_DWORD *)(v1 + v19))
  {
    *(_DWORD *)(v1 + v19) = v18;
    v20 = v1 + *(int *)(v3 + 44);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2 + *(int *)(v3 + 44), v69);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v20, 1, 1, v4);
    *(_QWORD *)(v2 + 12) = 0xFFFFFFFFLL;
    *(_BYTE *)(v2 + 20) = 0;
  }
  BindingActionDispatcher.modifier.getter(v3, v17, (uint64_t)v12);
  v21 = *((_QWORD *)v12 + 1);
  v22 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  swift_retain();
  v65 = v12;
  v66 = v22;
  v22((uint64_t)v12, v9);
  v23 = v67;
  LOBYTE(v22) = (*(uint64_t (**)(char *))(*(_QWORD *)v21 + 144))(v67);
  swift_release();
  if ((v22 & 1) == 0)
  {
    v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30 = v66;
    goto LABEL_7;
  }
  v62 = v9;
  v60 = v3;
  v24 = v4;
  v25 = v69;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(v3 + 44), v69);
  MEMORY[0x24BDAC7A8](v26);
  v61 = (void (*)(char *, uint64_t))v24;
  v27 = v64;
  *(&v60 - 4) = v24;
  *(&v60 - 3) = v27;
  *(&v60 - 2) = (uint64_t)v23;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ChangedCallbacks.dispatch(phase:state:), (uint64_t)(&v60 - 6), MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v28, (uint64_t)&v72);
  v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v7, v25);
  if ((v72 & 1) == 0)
  {
    v4 = (uint64_t)v61;
    v9 = v62;
    v30 = v66;
    v23 = v67;
    v3 = v60;
    goto LABEL_7;
  }
  AGGraphClearUpdate();
  v40 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  v30 = v66;
  if (*(_DWORD *)(v2 + 12) == v40)
  {
    v41 = *(_DWORD *)(v2 + 16);
    v4 = (uint64_t)v61;
    v9 = v62;
    v23 = v67;
    v3 = v60;
    if (!v41 || (v42 = v41 - 1, (*(_DWORD *)(v2 + 16) = v42) == 0))
    {
      if ((*(_BYTE *)(v2 + 20) & 1) == 0)
      {
        v70 = 0;
        v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(44);
        v70 = 0;
        v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        v70 = 0x3C676E69646E6942;
        v71 = 0xE800000000000000;
        v43._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        v44._countAndFlagsBits = 0x6E6F69746361203ELL;
        v44._object = (void *)0xE800000000000000;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._object = (void *)0x80000002352E12C0;
        v45._countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v45);
        specialized static Log.externalWarning(_:)(v70, v71);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v2 + 20) = 1;
      }
      goto LABEL_7;
    }
  }
  else
  {
    *(_DWORD *)(v2 + 12) = v40;
    *(_DWORD *)(v2 + 16) = 2;
    v4 = (uint64_t)v61;
    v9 = v62;
    v23 = v67;
    v3 = v60;
  }
  v46 = (uint64_t *)(v2 + *(int *)(v3 + 48));
  v62 = *v46;
  if (v62)
  {
    v61 = v29;
    v47 = v46[1];
    v48 = v68;
    v49 = v63;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v63, v23, v4);
    v50 = (*(unsigned __int8 *)(v48 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    v51 = (char *)swift_allocObject();
    v52 = v64;
    *((_QWORD *)v51 + 2) = v4;
    *((_QWORD *)v51 + 3) = v52;
    v53 = v62;
    *((_QWORD *)v51 + 4) = v62;
    *((_QWORD *)v51 + 5) = v47;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v51[v50], v49, v4);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v53);
    v64 = v47;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v53);
    specialized static Update.begin()();
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = partial apply for closure #2 in BindingActionDispatcher.updateValue();
    *(_QWORD *)(v54 + 24) = v51;
    v55 = one-time initialization token for actions;
    swift_retain();
    if (v55 != -1)
      swift_once();
    v56 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
    v30 = v66;
    v58 = v56[2];
    v57 = v56[3];
    if (v58 >= v57 >> 1)
      v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v56);
    v56[2] = v58 + 1;
    v59 = &v56[2 * v58];
    v59[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v59[5] = v54;
    static Update.actions = v56;
    swift_bridgeObjectRelease();
    static Update.end()();
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v62);
    swift_release();
    v23 = v67;
    v29 = v61;
  }
LABEL_7:
  v31 = (char *)(v2 + *(int *)(v3 + 44));
  v29(v31, v69);
  v32 = v68;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v31, v23, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v31, 0, 1, v4);
  v33 = (uint64_t)v65;
  BindingActionDispatcher.modifier.getter(v3, v34, (uint64_t)v65);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v4);
  v35 = (uint64_t *)(v33 + *(int *)(v9 + 36));
  v37 = *v35;
  v36 = v35[1];
  swift_retain();
  v30(v33, v9);
  v38 = (uint64_t *)(v2 + *(int *)(v3 + 48));
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v38);
  *v38 = v37;
  v38[1] = v36;
  return result;
}

void type metadata accessor for Attribute<()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<()>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>);
  }
}

uint64_t sub_23502F548()
{
  return 16;
}

__n128 sub_23502F554(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _BindingActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Binding(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _BindingActionModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
    v18 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    v20 = (_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v18;
    v20[1] = v19;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for _BindingActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

_QWORD *initializeWithCopy for _BindingActionModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v14 = (unint64_t)a1 + v13;
  v15 = (uint64_t *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v15;
  v16 = v15[1];
  v18 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  *v18 = v17;
  v18[1] = v16;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _BindingActionModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = (_QWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for _BindingActionModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v8 + 8) & ~v8, ((unint64_t)v6 + v8 + 8) & ~v8);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  *(_OWORD *)(((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for _BindingActionModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  *(_OWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _BindingActionModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v12 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v12 + v7 + 8) & ~v7);
    }
    else
    {
      v13 = *v12;
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23502FB08 + 4 * byte_2352BF160[v10]))();
  }
}

void storeEnumTagSinglePayload for _BindingActionModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23502FC98()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23502FD08);
}

void sub_23502FCA0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23502FCA8);
  JUMPOUT(0x23502FD08);
}

void sub_23502FCC0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23502FD08);
}

void sub_23502FCC8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23502FD08);
}

void sub_23502FCD0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x23502FD04);
      JUMPOUT(0x23502FD00);
    }
    JUMPOUT(0x23502FCDCLL);
  }
  JUMPOUT(0x23502FD08);
}

uint64_t sub_23502FD20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _BindingActionModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _BindingActionModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t type metadata completion function for BindingActionDispatcher()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BindingActionDispatcher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((v8 + 7 + ((v7 + 21) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = (_QWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v18 = *v17;
    *(_QWORD *)((char *)v16 + 5) = *(uint64_t *)((char *)v17 + 5);
    *v16 = v18;
    v19 = (void *)(((unint64_t)v16 + v7 + 13) & ~v7);
    v20 = (const void *)(((unint64_t)v17 + v7 + 13) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v20, 1, v4))
    {
      memcpy(v19, v20, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    }
    v21 = ((unint64_t)v19 + v9) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)v20 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v22 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    else
    {
      v23 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_QWORD *)(v21 + 8) = v23;
      swift_retain();
    }
    *(_DWORD *)((v21 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v22 + 19) & 0xFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t destroy for BindingActionDispatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 13) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  v6 = v4 + *(_QWORD *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84))
    ++v6;
  if (*(_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

_DWORD *initializeWithCopy for BindingActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_QWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (uint64_t *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = *v7;
  *(_QWORD *)((char *)v6 + 5) = *(uint64_t *)((char *)v7 + 5);
  *v6 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v6 + v11 + 13) & ~v11);
  v13 = (const void *)(((unint64_t)v7 + v11 + 13) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = ((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)(v18 + 8) = v20;
    swift_retain();
  }
  *(_DWORD *)((v18 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v19 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithCopy for BindingActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v6 = *(_DWORD *)v7;
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(v7 + 4);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 + 8);
  *(_BYTE *)(v6 + 12) = *(_BYTE *)(v7 + 12);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v10 + 13 + v6) & ~v10);
  v12 = (void *)((v10 + 13 + v7) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = (_QWORD *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v22 = v19[1];
      *v18 = v20;
      v18[1] = v22;
      swift_retain();
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_20;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_19;
  }
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  swift_retain();
  swift_release();
LABEL_20:
  *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for BindingActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_QWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (uint64_t *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = *v7;
  *(_QWORD *)((char *)v6 + 5) = *(uint64_t *)((char *)v7 + 5);
  *v6 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v6 + v11 + 13) & ~v11);
  v13 = (const void *)(((unint64_t)v7 + v11 + 13) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = ((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)(v18 + 8) = v20;
  }
  *(_DWORD *)((v18 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v19 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for BindingActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v6 = *(_DWORD *)v7;
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(v7 + 4);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 + 8);
  *(_BYTE *)(v6 + 12) = *(_BYTE *)(v7 + 12);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v10 + 13 + v6) & ~v10);
  v12 = (void *)((v10 + 13 + v7) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = (_QWORD *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v22 = v19[1];
      *v18 = v20;
      v18[1] = v22;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_20;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_19;
  }
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  swift_release();
LABEL_20:
  *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindingActionDispatcher(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2
    && *((_BYTE *)a1 + ((((v10 + ((v9 + 21) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v7 + *a1 + 1;
  }
  v12 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 13) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v14 = *(_QWORD *)((v10 + v12) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((v14 + 1) >= 2)
      return v14;
    else
      return 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v12);
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for BindingActionDispatcher(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  unsigned int v13;
  void *v14;
  int v15;
  _QWORD *v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  if (v8 <= 0x7FFFFFFE)
    v9 = 2147483646;
  else
    v9 = v8;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v11;
  v12 = (((v11 + 7 + ((v10 + 21) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v9 >= a2)
  {
    if (v9 < a3)
      a1[v12] = 0;
    if (a2)
    {
      v14 = (void *)((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 13) & ~v10);
      if (v8 < 0x7FFFFFFE)
      {
        v16 = (_QWORD *)(((unint64_t)v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *v16 = 0;
          v16[1] = 0;
          *(_DWORD *)v16 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *v16 = a2;
        }
      }
      else if (v8 >= a2)
      {
        (*(void (**)(unint64_t, _QWORD))(v6 + 56))((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 13) & ~v10, a2 + 1);
      }
      else if ((_DWORD)v11)
      {
        if (v11 <= 3)
          v15 = v11;
        else
          v15 = 4;
        bzero(v14, v11);
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    v13 = ~v9 + a2;
    bzero(a1, v12);
    *(_DWORD *)a1 = v13;
    if (v9 < a3)
      a1[v12] = 1;
  }
}

void sub_235030978()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x235030964);
}

void sub_235030980()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x235030964);
}

void sub_235030990()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x235030964);
}

void base witness table accessor for _AttributeBody in BindingActionDispatcher<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_2350309A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in BindingActionDispatcher.updateValue()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 32))(v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_235030A50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_235030A74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t PlacementContext.proposedSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  BOOL v10;
  BOOL v11;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v7 = *(unsigned __int8 *)(v1 + 48);
  if (one-time initialization token for v3 != -1)
    swift_once();
  v8 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  result = swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    result = dyld_program_sdk_at_least();
    if ((result & 1) == 0)
      goto LABEL_7;
  }
  else if (static Semantics.forced < v8)
  {
LABEL_7:
    if (v7)
    {
      result = AGGraphGetInputValue();
      v10 = 0;
      v11 = 0;
      v3 = *(_QWORD *)result;
      v4 = *(_QWORD *)(result + 8);
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    goto LABEL_19;
  }
  if (v7)
  {
    result = AGGraphGetInputValue();
    v6 = *(_QWORD *)(result + 16);
    v5 = *(_QWORD *)(result + 24);
  }
  v10 = (~v6 & 0x7FF0000000000000) == 0 && (v6 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v10)
    v3 = 0;
  else
    v3 = v6;
  v11 = (~v5 & 0x7FF0000000000000) == 0 && (v5 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v11)
    v4 = 0;
  else
    v4 = v5;
LABEL_19:
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v11;
  return result;
}

double PlacementContext.size.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    return *(double *)AGGraphGetInputValue();
  else
    return *(double *)(v0 + 16);
}

double SizeAndSpacingContext.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

uint64_t SizeAndSpacingContext.subscript.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  _QWORD *v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_DWORD *)(v4 + 4);
  v11 = *(_DWORD *)(v4 + 8);
  v12 = a1;
  v7 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + v5 + 8);
  v8 = type metadata accessor for EnvironmentFetch(0, v7, a3, a4);
  v14 = v8;
  v15 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>, v8);
  v16 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>, v8);
  v17 = 1;
  v18 = v6;
  v19 = 0;
  v20 = &v11;
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v11, (uint64_t)partial apply for closure #1 in Rule<>.cachedValue(options:owner:), (uint64_t)v13, v8, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v9);
  return swift_release();
}

uint64_t _PositionAwarePlacementContext.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t InputValue;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;

  InputValue = AGGraphGetInputValue();
  v3 = *(double *)(InputValue + 8);
  v4 = *(double *)(InputValue + 16);
  v5 = *(double *)(InputValue + 24);
  v6 = *(double *)(InputValue + 32);
  *(_QWORD *)a1 = *(_QWORD *)InputValue;
  v7 = AGGraphGetInputValue();
  v8 = *(double *)v7;
  v9 = *(double *)(v7 + 8);
  *(double *)(a1 + 24) = v5 - (*(double *)v7 - v3);
  *(double *)(a1 + 32) = v6 - (v9 - v4);
  *(double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;
  return swift_retain();
}

uint64_t SizeAndSpacingContext.init(context:owner:environment:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  int v4;

  if ((a2 & 0x100000000) != 0)
    v4 = result;
  else
    v4 = a2;
  *a4 = result;
  a4[1] = v4;
  a4[2] = a3;
  return result;
}

uint64_t _PositionAwarePlacementContext.init(context:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = result;
  a7[2] = a2;
  a7[3] = a3;
  a7[4] = a4;
  a7[5] = a5;
  a7[6] = a6;
  return result;
}

__n128 PlacementContext.init(base:parentSize:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __n128 result;
  __int128 v5;

  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_DWORD *)(a3 + 8) = v3;
  result = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 32) = v5;
  *(_BYTE *)(a3 + 48) = 0;
  return result;
}

uint64_t ViewTransformable.convert(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t InputValue;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  _QWORD v18[5];

  InputValue = AGGraphGetInputValue();
  v8 = *(_QWORD *)InputValue;
  v9 = *(double *)(InputValue + 8);
  v10 = *(double *)(InputValue + 16);
  v11 = *(double *)(InputValue + 24);
  v12 = *(double *)(InputValue + 32);
  v13 = AGGraphGetInputValue();
  v14 = *(double *)v13;
  v15 = *(double *)(v13 + 8);
  v16 = v11 - (*(double *)v13 - v9);
  v18[0] = v8;
  *(double *)&v18[1] = v14;
  *(double *)&v18[2] = v15;
  *(double *)&v18[3] = v16;
  *(double *)&v18[4] = v12 - (v15 - v10);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(a4 + 8))(a2, v18, a3, a4);
}

{
  uint64_t InputValue;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  _QWORD v18[5];

  InputValue = AGGraphGetInputValue();
  v8 = *(_QWORD *)InputValue;
  v9 = *(double *)(InputValue + 8);
  v10 = *(double *)(InputValue + 16);
  v11 = *(double *)(InputValue + 24);
  v12 = *(double *)(InputValue + 32);
  v13 = AGGraphGetInputValue();
  v14 = *(double *)v13;
  v15 = *(double *)(v13 + 8);
  v16 = v11 - (*(double *)v13 - v9);
  v18[0] = v8;
  *(double *)&v18[1] = v14;
  *(double *)&v18[2] = v15;
  *(double *)&v18[3] = v16;
  *(double *)&v18[4] = v12 - (v15 - v10);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(a4 + 16))(a1, v18, a3, a4);
}

uint64_t SizeAndSpacingContext.context.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t SizeAndSpacingContext.context.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*SizeAndSpacingContext.context.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SizeAndSpacingContext.update<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = &v18[-v14];
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, double))(v16 + 56))(&v18[-v14], 1, 1, a3, v13);
  v19 = a3;
  v20 = v15;
  v21 = a1;
  v22 = a2;
  AGGraphWithUpdate();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v11, v15, v8);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v11, 1, a3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v16 + 32))(a4, v11, a3);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v15, v8);
  }
  return result;
}

uint64_t closure #1 in SizeAndSpacingContext.update<A>(_:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v13 - v10;
  a2(v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v11, 0, 1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(a1, v11, v7);
}

uint64_t PlacementContext.init(context:owner:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5;

  if ((a2 & 0x100000000) != 0)
    v5 = result;
  else
    v5 = a2;
  *(_DWORD *)a5 = result;
  *(_DWORD *)(a5 + 4) = v5;
  *(_DWORD *)(a5 + 8) = a4;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 1;
  return result;
}

uint64_t PlacementContext.init(context:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = result;
  *(_DWORD *)(a4 + 4) = result;
  *(_DWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 1;
  return result;
}

uint64_t PlacementContext.subscript.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  _QWORD *v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_DWORD *)(v4 + 4);
  v11 = *(_DWORD *)(v4 + 8);
  v12 = a1;
  v7 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + v5 + 8);
  v8 = type metadata accessor for EnvironmentFetch(0, v7, a3, a4);
  v14 = v8;
  v15 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>, v8);
  v16 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>, v8);
  v17 = 1;
  v18 = v6;
  v19 = 0;
  v20 = &v11;
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v11, (uint64_t)partial apply for closure #1 in Rule<>.cachedValue(options:owner:), (uint64_t)v13, v8, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v9);
  return swift_release();
}

uint64_t _PositionAwarePlacementContext.init(context:owner:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, _DWORD *a8@<X8>)
{
  int v8;

  if ((a2 & 0x100000000) != 0)
    v8 = result;
  else
    v8 = a2;
  *a8 = result;
  a8[1] = v8;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

double _PositionAwarePlacementContext.size.getter()
{
  return *(double *)AGGraphGetInputValue();
}

uint64_t *_PositionAwarePlacementContext.proposedSize.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2;
  uint64_t *result;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (one-time initialization token for v3 != -1)
    swift_once();
  v2 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      result = (uint64_t *)AGGraphGetInputValue();
      v4 = 0;
      v5 = 0;
      v6 = *result;
      v7 = result[1];
      goto LABEL_13;
    }
  }
  else if (static Semantics.forced < v2)
  {
    goto LABEL_7;
  }
  result = (uint64_t *)AGGraphGetInputValue();
  v6 = result[2];
  v7 = result[3];
  v4 = (~v6 & 0x7FF0000000000000) == 0 && (v6 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v4)
    v6 = 0;
  v5 = (~v7 & 0x7FF0000000000000) == 0 && (v7 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v5)
    v7 = 0;
LABEL_13:
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

void _PositionAwarePlacementContext.unadjustedSafeAreaInsets.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *InputValue;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(v1 + 24) == *MEMORY[0x24BE096C0])
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    InputValue = (uint64_t *)AGGraphGetInputValue();
    v4 = *InputValue;
    v5 = InputValue[1];
    v6 = InputValue[2];
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v6;
    swift_retain();
    swift_bridgeObjectRetain();
  }
}

uint64_t _PositionAwarePlacementContext.subscript.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  _QWORD *v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_DWORD *)(v4 + 4);
  v11 = *(_DWORD *)(v4 + 12);
  v12 = a1;
  v7 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + v5 + 8);
  v8 = type metadata accessor for EnvironmentFetch(0, v7, a3, a4);
  v14 = v8;
  v15 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>, v8);
  v16 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>, v8);
  v17 = 1;
  v18 = v6;
  v19 = 0;
  v20 = &v11;
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v11, (uint64_t)partial apply for closure #1 in Rule<>.cachedValue(options:owner:), (uint64_t)v13, v8, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v9);
  return swift_release();
}

uint64_t EnvironmentFetch.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t EnvironmentFetch.value.getter()
{
  uint64_t v1;

  EnvironmentFetch.environment.getter(&v1);
  swift_getAtKeyPath();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentFetch.hash(into:)(int a1, Swift::UInt32 a2)
{
  Hasher._combine(_:)(a2);
  type metadata accessor for KeyPath();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static EnvironmentFetch.== infix(_:_:)(int a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1 != a3)
    return 0;
  type metadata accessor for AnyKeyPath();
  return MEMORY[0x23B7C6B38](a2, a4) & 1;
}

Swift::Int EnvironmentFetch.hashValue.getter(Swift::UInt32 a1)
{
  char v3;

  Hasher.init(_seed:)();
  EnvironmentFetch.hash(into:)((int)&v3, a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Rule.value.getter in conformance EnvironmentFetch<A>()
{
  return EnvironmentFetch.value.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EnvironmentFetch<A>()
{
  Swift::UInt32 *v0;

  return EnvironmentFetch.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EnvironmentFetch<A>(int a1)
{
  Swift::UInt32 *v1;

  return EnvironmentFetch.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EnvironmentFetch<A>()
{
  Swift::UInt32 *v0;
  char v2;

  Hasher.init(_seed:)();
  EnvironmentFetch.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EnvironmentFetch<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EnvironmentFetch<A>(uint64_t a1, uint64_t a2)
{
  return static EnvironmentFetch.== infix(_:_:)(*(_DWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t closure #1 in Rule<>.cachedValue(options:owner:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  dispatch thunk of Hashable.hashValue.getter();
  v2 = static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v2, AssociatedTypeWitness);
}

uint64_t type metadata accessor for EnvironmentFetch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentFetch);
}

uint64_t partial apply for closure #1 in Rule<>.cachedValue(options:owner:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in Rule<>.cachedValue(options:owner:)(a1);
}

{
  return closure #1 in Rule<>.cachedValue(options:owner:)(a1);
}

uint64_t partial apply for closure #1 in SizeAndSpacingContext.update<A>(_:)()
{
  uint64_t v0;

  return closure #1 in SizeAndSpacingContext.update<A>(_:)(*(_QWORD *)(v0 + 24), *(void (**)(double))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
}

ValueMetadata *type metadata accessor for SizeAndSpacingContext()
{
  return &type metadata for SizeAndSpacingContext;
}

uint64_t getEnumTagSinglePayload for PlacementContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlacementContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlacementContext()
{
  return &type metadata for PlacementContext;
}

ValueMetadata *type metadata accessor for _PositionAwarePlacementContext()
{
  return &type metadata for _PositionAwarePlacementContext;
}

ValueMetadata *type metadata accessor for PlacementContext.ParentSize()
{
  return &type metadata for PlacementContext.ParentSize;
}

uint64_t instantiation function for generic protocol witness table for EnvironmentFetch<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentFetch<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in EnvironmentFetch<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in EnvironmentFetch<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t (*partial apply for closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_allocObject();
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 32) = v1;
  *(_QWORD *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

uint64_t implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v18[16];
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = &v18[-v14];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a4, v13);
  dispatch thunk of Rule.value.getter();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a4);
  v20 = a4;
  v21 = a5;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)_s14AttributeGraph4RulePAAE14_updateDefaultyySvFZySPy5ValueQzGXEfU_TA_0, (uint64_t)v19, AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
}

uint64_t sub_235031DC4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)(a1, a2, v2[5], v2[2], v2[3]);
}

void specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(void *a1, uint64_t a2, void *a3, id a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  unint64_t v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  void (*v32)(char *, uint64_t);
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  CC_LONG h4;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v54[2];
  id v55;
  unint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for OSSignpostID();
  v56 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v54 - v13;
  v15 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a2;
  *(_QWORD *)&into.state.h4 = v15;
  v59 = a2;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a2 + 24);
  v16 = ProtobufEncoder.archiveWriter.getter();
  if (v16)
  {
    v17 = v16;
    v57 = a3;
    v60 = v4;
    v58 = a4;
    *(_QWORD *)&c.h0 = a1;
    v18 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
    v19 = lazy protocol witness table accessor for type RBShader and conformance NSObject();
    v20 = a1;
    AnyHashable.init<A>(_:)();
    v21 = (uint64_t *)(v17 + 152);
    swift_beginAccess();
    v22 = *(_QWORD *)(v17 + 152);
    if (*(_QWORD *)(v22 + 16))
    {
      v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into);
      if ((v24 & 1) != 0)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
        swift_endAccess();
        outlined destroy of AnyHashable((uint64_t)&into);
        lazy protocol witness table accessor for type Int and conformance Int();
        default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v26);
        static OSSignpostID.exclusive.getter();
        v27 = OSSignposter.logHandle.getter();
        v28 = static os_signpost_type_t.event.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          LODWORD(v55) = v28;
          v29 = v56;
          (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v11, v14, v9);
          v30 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v30 = 134217984;
          *(_QWORD *)&into.state.h0 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v31 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_2349C4000, v27, (os_signpost_type_t)v55, v31, "addAttachment.cacheHit", "index=%{name=index}ld", v30, 0xCu);
          MEMORY[0x23B7C9D54](v30, -1, -1);

          v32 = *(void (**)(char *, uint64_t))(v29 + 8);
          v32(v14, v9);
          v32(v11, v9);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v56 + 8))(v14, v9);
        }
        a4 = v58;
        v48 = v57;
        if ((v25 & 0x8000000000000000) == 0)
          goto LABEL_16;
        goto LABEL_22;
      }
    }
    v55 = v20;
    v56 = v19;
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)&into);
    v33 = v57;
    v34 = v58;
    v35 = v60;
    v36 = closure #1 in closure #1 in Shader.ResolvedShader.encode(to:)(v57, (uint64_t)v58);
    if (v35)
    {

LABEL_8:
      swift_release();
      return;
    }
    v40 = (uint64_t)v36;
    v41 = v37;
    v54[1] = v18;
    v60 = 0;
    memset(&c, 0, sizeof(c));
    outlined copy of Data._Representation((uint64_t)v36, v37);
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v40, v41);
    h4 = c.h4;
    v43 = *(_QWORD *)&c.h0;
    v44 = *(_QWORD *)&c.h2;
    swift_beginAccess();
    v45 = specialized Collection<>.firstIndex(of:)(v43, v44, h4, *(_QWORD *)(v17 + 32));
    if ((v46 & 1) != 0)
    {
      *(_QWORD *)&into.state.h0 = v43;
      *(_QWORD *)&into.state.h2 = v44;
      into.state.h4 = h4;
      LOBYTE(into.state.Nl) = 0;
      outlined copy of Data._Representation(v40, v41);
      v51 = v60;
      v25 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&into, v17, v40, v41);
      outlined consume of Data._Representation(v40, v41);
      outlined consume of Data._Representation(v40, v41);
      if (v51)
      {

        goto LABEL_8;
      }
      a4 = v58;
      v48 = v57;
    }
    else
    {
      v47 = v45;
      outlined consume of Data._Representation(v40, v41);
      a4 = v58;
      v48 = v57;
      v25 = v47;
    }
    v62 = v55;
    v52 = v55;
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v61 = *v21;
    *v21 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
    *v21 = v61;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&into);
    swift_endAccess();
    if ((v25 & 0x8000000000000000) == 0)
    {
LABEL_16:
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(v25);

      swift_release();
      goto LABEL_17;
    }
LABEL_22:

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v38 = closure #1 in closure #1 in Shader.ResolvedShader.encode(to:)(a3, (uint64_t)a4);
  if (v4)
  {

    return;
  }
  v49 = (uint64_t)v38;
  v50 = v39;
  ProtobufEncoder.dataField(_:_:)(2, (uint64_t)v38, v39);
  outlined consume of Data._Representation(v49, v50);

LABEL_17:
}

void specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(void *a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_signpost_type_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint8_t *v34;
  os_signpost_id_t v35;
  void (*v36)(char *, _QWORD *);
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  CC_LONG h4;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v59 = (_QWORD *)type metadata accessor for OSSignpostID();
  v58 = *(v59 - 1);
  MEMORY[0x24BDAC7A8](v59);
  v57 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)&v56 - v9;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v56 - v15;
  v17 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a2;
  *(_QWORD *)&into.state.h4 = v17;
  v63 = a2;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a2 + 24);
  v18 = ProtobufEncoder.archiveWriter.getter();
  if (v18)
  {
    v19 = v18;
    v62 = a3;
    v60 = v3;
    *(_QWORD *)&c.h0 = a1;
    v20 = lazy protocol witness table accessor for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:)();
    v21 = a1;
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    v22 = *(_QWORD *)(v19 + 152);
    if (*(_QWORD *)(v22 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into), (v24 & 1) != 0))
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&into);
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v26);
      v27 = v61;
      static OSSignpostID.exclusive.getter();
      v28 = OSSignposter.logHandle.getter();
      v29 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v30 = v58;
        v31 = v57;
        v32 = v27;
        v33 = v59;
        (*(void (**)(char *, char *, _QWORD *))(v58 + 16))(v57, v32, v59);
        v34 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v34 = 134217984;
        *(_QWORD *)&into.state.h0 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v35 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v28, v29, v35, "addAttachment.cacheHit", "index=%{name=index}ld", v34, 0xCu);
        MEMORY[0x23B7C9D54](v34, -1, -1);

        v36 = *(void (**)(char *, _QWORD *))(v30 + 8);
        v36(v61, v33);
        v36(v31, v33);
      }
      else
      {

        (*(void (**)(char *, _QWORD *))(v58 + 8))(v27, v59);
      }
      v37 = v62;
      if ((v25 & 0x8000000000000000) == 0)
        goto LABEL_16;
    }
    else
    {
      v59 = v21;
      v61 = (char *)v20;
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&into);
      v37 = v62;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      v38 = v60;
      v39 = Data.init(contentsOf:options:)();
      if (v38)
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_17:

        swift_release();
        return;
      }
      v43 = v39;
      v44 = v40;
      v60 = (_QWORD *)(v19 + 152);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      memset(&c, 0, sizeof(c));
      outlined copy of Data._Representation(v43, v44);
      CC_SHA1_Init(&c);
      into.state = c;
      Data.hash(into:)(&into);
      memset(&c, 0, 20);
      CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
      outlined consume of Data._Representation(v43, v44);
      h4 = c.h4;
      v46 = v19;
      v47 = *(_QWORD *)&c.h0;
      v48 = *(_QWORD *)&c.h2;
      swift_beginAccess();
      v49 = specialized Collection<>.firstIndex(of:)(v47, v48, h4, *(_QWORD *)(v46 + 32));
      if ((v50 & 1) != 0)
      {
        *(_QWORD *)&into.state.h0 = v47;
        *(_QWORD *)&into.state.h2 = v48;
        into.state.h4 = h4;
        LOBYTE(into.state.Nl) = 0;
        outlined copy of Data._Representation(v43, v44);
        v25 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&into, v46, v43, v44);
        outlined consume of Data._Representation(v43, v44);
      }
      else
      {
        v25 = v49;
      }
      outlined consume of Data._Representation(v43, v44);
      v37 = v62;
      v65 = v59;
      v53 = v59;
      AnyHashable.init<A>(_:)();
      v54 = v60;
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v64 = *v54;
      *v54 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
      *v54 = v64;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&into);
      swift_endAccess();
      if ((v25 & 0x8000000000000000) == 0)
      {
LABEL_16:
        ProtobufEncoder.encodeVarint(_:)(8uLL);
        ProtobufEncoder.encodeVarint(_:)(v25);
        goto LABEL_17;
      }
    }

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v41 = Data.init(contentsOf:options:)();
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  else
  {
    v51 = v41;
    v52 = v42;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    ProtobufEncoder.dataField(_:_:)(2, v51, v52);
    outlined consume of Data._Representation(v51, v52);
  }

}

Class specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1)
{
  uint64_t v1;
  Class v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  objc_class *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  unint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  const __CFData *isa;
  CGImageSource *v45;
  CGImageRef ImageAtIndex;
  Class v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  objc_class *v59;
  _BYTE *v61;
  _BYTE *v62;
  id v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _OWORD v69[2];
  objc_class *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = type metadata accessor for CodingUserInfoKey();
  v68 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  MEMORY[0x24BDAC7A8](v4);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 < v8)
  {
    v66 = v6;
    v67 = (char *)v63 - v5;
    v2 = 0;
    v65 = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(a1 + 32);
        if (v7 < v11)
          goto LABEL_14;
        if (v11 < v7)
          goto LABEL_72;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v10 = ProtobufDecoder.decodeVarint()();
      if (v1)
        goto LABEL_73;
      if (v10 < 8)
        goto LABEL_72;
LABEL_14:
      if (v10 >> 3 != 1)
      {
        if (v10 >> 3 != 2)
        {
          switch(v10 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_73;
              goto LABEL_7;
            case 1uLL:
              v9 = *(_QWORD *)(a1 + 8) + 8;
              if (v8 >= v9)
                goto LABEL_6;
              goto LABEL_72;
            case 2uLL:
              v48 = ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_73;
              if (v48 < 0)
                goto LABEL_84;
              v9 = *(_QWORD *)(a1 + 8) + v48;
              if (v8 < v9)
                goto LABEL_72;
LABEL_6:
              *(_QWORD *)(a1 + 8) = v9;
              break;
            case 5uLL:
              v9 = *(_QWORD *)(a1 + 8) + 4;
              if (v8 < v9)
                goto LABEL_72;
              goto LABEL_6;
            default:
              goto LABEL_72;
          }
          goto LABEL_7;
        }
        if ((v10 & 7) != 2)
          goto LABEL_72;
        v12 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_73;
        v13 = v12;
        if (v12 < 0)
        {
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          JUMPOUT(0x235033330);
        }
        v14 = *(_QWORD *)(a1 + 8);
        if (v8 < v14 + v12)
          goto LABEL_72;
        *(_QWORD *)(a1 + 8) = v14 + v12;
        if (v12)
        {
          v15 = v14 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v18 = v17;
          if (__OFADD__(v15, v13))
            goto LABEL_81;
          if (v15 + v13 < v15)
            goto LABEL_82;
          v19 = v16;
          v20 = Data._Representation.subscript.getter();
          v22 = v21;
          outlined consume of Data._Representation(v19, v18);
        }
        else
        {
          v20 = 0;
          v22 = 0xC000000000000000;
        }
        isa = Data._bridgeToObjectiveC()().super.isa;
        v45 = CGImageSourceCreateWithData(isa, 0);

        if (!v45)
        {
          lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
          swift_allocError();
          *v61 = 0;
          swift_willThrow();
LABEL_79:

          outlined consume of Data._Representation(v20, v22);
          return v2;
        }
        ImageAtIndex = CGImageSourceCreateImageAtIndex(v45, 0, 0);
        if (!ImageAtIndex)
        {
          lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
          swift_allocError();
          *v62 = 0;
          swift_willThrow();

          goto LABEL_79;
        }
        v47 = ImageAtIndex;

        outlined consume of Data._Representation(v20, v22);
LABEL_53:
        v2 = v47;
        goto LABEL_7;
      }
      if ((v10 & 7) != 0)
      {
        if ((v10 & 7) != 2)
          goto LABEL_72;
        v23 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_73;
        if (v23 < 0)
          goto LABEL_83;
        v24 = *(_QWORD *)(a1 + 8) + v23;
        if (v8 < v24)
        {
LABEL_72:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_73:

          return v2;
        }
        *(_QWORD *)(a1 + 24) = 8;
        *(_QWORD *)(a1 + 32) = v24;
      }
      v25 = ProtobufDecoder.decodeVarint()();
      if (v1)
        goto LABEL_73;
      v64 = v25;
      v26 = v2;
      v27 = *(_QWORD *)(a1 + 48);
      v28 = one-time initialization token for readerKey;
      v29 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28 != -1)
        swift_once();
      v30 = v73;
      v31 = __swift_project_value_buffer(v73, (uint64_t)static ArchiveReader.readerKey);
      v32 = (uint64_t)v67;
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
      v33(v67, v31, v30);
      if (*(_QWORD *)(v27 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v35 & 1) != 0))
      {
        v2 = v26;
        outlined init with copy of Any(*(_QWORD *)(v27 + 56) + 32 * v34, (uint64_t)&v71);
      }
      else
      {
        v2 = v26;
        v71 = 0u;
        v72 = 0u;
      }
      v36 = *(void (**)(char *, uint64_t))(v68 + 8);
      v36(v67, v73);
      if (*((_QWORD *)&v72 + 1))
      {
        type metadata accessor for ArchiveReader();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v63[1] = *(id *)&v69[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v37 = *(_QWORD *)(a1 + 48);
          v38 = one-time initialization token for cacheKey;
          v63[0] = *(id *)a1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v38 != -1)
            swift_once();
          v39 = v73;
          v40 = __swift_project_value_buffer(v73, (uint64_t)static ArchiveReader.cacheKey);
          v41 = v66;
          v33((char *)v66, v40, v39);
          if (*(_QWORD *)(v37 + 16) && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41), (v43 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v37 + 56) + 32 * v42, (uint64_t)&v71);
          }
          else
          {
            v71 = 0u;
            v72 = 0u;
          }
          v36((char *)v66, v73);
          if (!*((_QWORD *)&v72 + 1))
          {
            outlined destroy of Any?((uint64_t)&v71);
LABEL_70:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_7;
          }
          type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
          if ((swift_dynamicCast() & 1) == 0)
            goto LABEL_70;
          v49 = *(_QWORD *)&v69[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v50 = v64;
          if (v64 < 0)
            goto LABEL_85;
          swift_beginAccess();
          v51 = *(_QWORD *)(v49 + 16);
          if (*(_QWORD *)(v51 + 16))
          {
            v52 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
            if ((v53 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v51 + 56) + 32 * v52, (uint64_t)v69);
              outlined init with take of Any(v69, &v71);
              swift_endAccess();
              swift_release();
              swift_release();

              outlined init with take of Any(&v71, v69);
              type metadata accessor for CGImageRef(0);
              if (swift_dynamicCast())
                v2 = v70;
              else
                v2 = 0;
              goto LABEL_7;
            }
          }
          swift_endAccess();
          ArchiveReader.subscript.getter(v50);
          v55 = v54;
          v57 = v56;
          v47 = specialized static CodableCGImage.import(from:)();

          outlined consume of Data._Representation(v55, v57);
          type metadata accessor for CGImageRef(0);
          *((_QWORD *)&v72 + 1) = v58;
          *(_QWORD *)&v71 = v47;
          swift_beginAccess();
          v59 = v47;
          specialized Dictionary.subscript.setter((uint64_t)&v71, v50);
          swift_endAccess();
          swift_release();
          swift_release();
          goto LABEL_53;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v71);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
      if (v7 >= v8)
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (v2)
          return v2;
        goto LABEL_4;
      }
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return v2;
}

uint64_t specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  unint64_t v38;
  char v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v3 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for CodingUserInfoKey();
  v75 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  MEMORY[0x24BDAC7A8](v6);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v9 < v10)
  {
    v73 = 0;
    v74 = (char *)v68 - v7;
    v71 = v8;
    v11 = 0;
    v70 = MEMORY[0x24BEE4AD8] + 8;
    v72 = v5;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14)
      {
        v15 = *(_QWORD *)(a1 + 32);
        if (v9 < v15)
          goto LABEL_14;
        if (v15 < v9)
          goto LABEL_75;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v14 = ProtobufDecoder.decodeVarint()();
      if (v1)
        return swift_bridgeObjectRelease();
      if (v14 < 8)
        goto LABEL_75;
LABEL_14:
      if (v14 >> 3 != 1)
      {
        if (v14 >> 3 == 2)
        {
          if ((v14 & 7) != 2)
            goto LABEL_75;
          v16 = ProtobufDecoder.decodeVarint()();
          if (v1)
            return swift_bridgeObjectRelease();
          v17 = v16;
          if (v16 < 0)
          {
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
            JUMPOUT(0x235033BBCLL);
          }
          v18 = *(_QWORD *)(a1 + 8);
          if (v10 < v18 + v16)
            goto LABEL_75;
          *(_QWORD *)(a1 + 8) = v18 + v16;
          if (v16)
          {
            v19 = v18 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v22 = v21;
            if (__OFADD__(v19, v17))
              goto LABEL_82;
            if (v19 + v17 < v19)
              goto LABEL_83;
            v23 = v20;
            v24 = Data._Representation.subscript.getter();
            v26 = v25;
            outlined consume of Data._Representation(v23, v22);
          }
          else
          {
            v24 = 0;
            v26 = 0xC000000000000000;
          }
          static String.Encoding.utf8.getter();
          v49 = String.init(data:encoding:)();
          if (!v50)
          {
            lazy protocol witness table accessor for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error();
            swift_allocError();
            swift_willThrow();
            swift_bridgeObjectRelease();
            return outlined consume of Data._Representation(v24, v26);
          }
          v51 = v50;
          v73 = v49;
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v24, v26);
          v11 = v51;
        }
        else
        {
          switch(v14 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1)
                return swift_bridgeObjectRelease();
              goto LABEL_7;
            case 1uLL:
              v13 = *(_QWORD *)(a1 + 8) + 8;
              if (v10 >= v13)
                goto LABEL_6;
              goto LABEL_75;
            case 2uLL:
              v52 = ProtobufDecoder.decodeVarint()();
              if (v1)
                return swift_bridgeObjectRelease();
              if (v52 < 0)
                goto LABEL_85;
              v13 = *(_QWORD *)(a1 + 8) + v52;
              if (v10 < v13)
                goto LABEL_75;
LABEL_6:
              *(_QWORD *)(a1 + 8) = v13;
              break;
            case 5uLL:
              v13 = *(_QWORD *)(a1 + 8) + 4;
              if (v10 < v13)
                goto LABEL_75;
              goto LABEL_6;
            default:
              goto LABEL_75;
          }
        }
        goto LABEL_7;
      }
      if ((v14 & 7) != 0)
      {
        if ((v14 & 7) != 2)
          goto LABEL_75;
        v27 = ProtobufDecoder.decodeVarint()();
        if (v1)
          return swift_bridgeObjectRelease();
        if (v27 < 0)
          goto LABEL_84;
        v28 = *(_QWORD *)(a1 + 8) + v27;
        if (v10 < v28)
        {
LABEL_75:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
        *(_QWORD *)(a1 + 24) = 8;
        *(_QWORD *)(a1 + 32) = v28;
      }
      v29 = ProtobufDecoder.decodeVarint()();
      if (v1)
        return swift_bridgeObjectRelease();
      v69 = v29;
      v30 = v11;
      v31 = *(_QWORD *)(a1 + 48);
      v32 = one-time initialization token for readerKey;
      v33 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v32 != -1)
        swift_once();
      v34 = v81;
      v35 = __swift_project_value_buffer(v81, (uint64_t)static ArchiveReader.readerKey);
      v36 = (uint64_t)v74;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
      v37(v74, v35, v34);
      if (*(_QWORD *)(v31 + 16) && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(v36), (v39 & 1) != 0))
      {
        v40 = v30;
        outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v38, (uint64_t)&v79);
      }
      else
      {
        v40 = v30;
        v79 = 0u;
        v80 = 0u;
      }
      v41 = *(void (**)(char *, uint64_t))(v75 + 8);
      v41(v74, v81);
      if (*((_QWORD *)&v80 + 1))
      {
        type metadata accessor for ArchiveReader();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v68[1] = *(id *)&v76[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v42 = *(_QWORD *)(a1 + 48);
          v43 = one-time initialization token for cacheKey;
          v68[0] = *(id *)a1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v43 != -1)
            swift_once();
          v44 = v81;
          v45 = __swift_project_value_buffer(v81, (uint64_t)static ArchiveReader.cacheKey);
          v46 = v71;
          v37((char *)v71, v45, v44);
          if (*(_QWORD *)(v42 + 16) && (v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46), (v48 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v42 + 56) + 32 * v47, (uint64_t)&v79);
          }
          else
          {
            v79 = 0u;
            v80 = 0u;
          }
          v41((char *)v71, v81);
          if (*((_QWORD *)&v80 + 1))
          {
            type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
            v11 = v40;
            if ((swift_dynamicCast() & 1) != 0)
            {
              v53 = *(_QWORD **)&v76[0];
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              v54 = v69;
              if (v69 < 0)
                goto LABEL_86;
              swift_beginAccess();
              v55 = v53[2];
              if (*(_QWORD *)(v55 + 16) && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54), (v57 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v55 + 56) + 32 * v56, (uint64_t)v76);
                outlined init with take of Any(v76, &v79);
                swift_endAccess();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                outlined init with take of Any(&v79, v76);
                v58 = swift_dynamicCast();
                v59 = v77;
                if (v58)
                  v11 = v78;
                else
                  v11 = 0;
                if (!v58)
                  v59 = 0;
                v73 = v59;
              }
              else
              {
                v68[0] = v53;
                swift_endAccess();
                ArchiveReader.subscript.getter(v54);
                v61 = v60;
                v63 = v62;
                static String.Encoding.utf8.getter();
                v64 = String.init(data:encoding:)();
                if (!v65)
                {
                  lazy protocol witness table accessor for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error();
                  swift_allocError();
                  swift_willThrow();
                  swift_release();
                  swift_bridgeObjectRelease();
                  outlined consume of Data._Representation(v61, v63);
                  return swift_release();
                }
                v66 = v65;
                v67 = v64;
                swift_bridgeObjectRelease();
                outlined consume of Data._Representation(v61, v63);
                *((_QWORD *)&v80 + 1) = &type metadata for Image.Location.BundlePath;
                v73 = v67;
                *(_QWORD *)&v79 = v67;
                *((_QWORD *)&v79 + 1) = v66;
                swift_beginAccess();
                swift_bridgeObjectRetain();
                specialized Dictionary.subscript.setter((uint64_t)&v79, v54);
                swift_endAccess();
                swift_release();
                swift_release();
                v11 = v66;
              }
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

            }
            goto LABEL_7;
          }
          outlined destroy of Any?((uint64_t)&v79);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_49;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v79);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_49:
      v11 = v40;
LABEL_7:
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      if (v9 >= v10)
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (!v11)
          goto LABEL_4;
        return v73;
      }
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return swift_bridgeObjectRelease_n();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  unint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  const __CFData *isa;
  CGDataProvider *v46;
  CGFontRef v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const __CFData *v58;
  CGDataProvider *v59;
  CGFontRef v60;
  uint64_t v61;
  CGFont *v62;
  _QWORD *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = type metadata accessor for CodingUserInfoKey();
  v70 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  MEMORY[0x24BDAC7A8](v3);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 < v7)
  {
    v68 = v5;
    v69 = (char *)&v64 - v4;
    v8 = 1;
    v67 = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(a1 + 32);
        if (v6 < v11)
          goto LABEL_14;
        if (v11 < v6)
          goto LABEL_71;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v10 = ProtobufDecoder.decodeVarint()();
      if (v1)
        goto LABEL_72;
      if (v10 <= 7)
        goto LABEL_71;
LABEL_14:
      if (v10 >> 3 != 1)
      {
        if (v10 >> 3 == 2)
        {
          if ((v10 & 7) != 2)
            goto LABEL_71;
          v12 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_72;
          v13 = v12;
          if (v12 < 0)
          {
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            JUMPOUT(0x235035C44);
          }
          v14 = *(_QWORD *)(a1 + 8);
          if (v7 < v14 + v12)
            goto LABEL_71;
          *(_QWORD *)(a1 + 8) = v14 + v12;
          if (v12)
          {
            v15 = v14 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v18 = v17;
            if (__OFADD__(v15, v13))
              goto LABEL_77;
            if (v15 + v13 < v15)
              goto LABEL_78;
            v19 = v16;
            v13 = Data._Representation.subscript.getter();
            v21 = v20;
            outlined consume of Data._Representation(v19, v18);
          }
          else
          {
            v21 = 0xC000000000000000;
          }
          isa = Data._bridgeToObjectiveC()().super.isa;
          v46 = CGDataProviderCreateWithCFData(isa);

          if (!v46)
            goto LABEL_82;
          v47 = CGFontCreateWithDataProvider(v46);

          outlined consume of Shader.ResolvedShader?((id)v8);
          outlined consume of Data._Representation(v13, v21);
          v8 = (uint64_t)v47;
        }
        else
        {
          switch(v10 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_72;
              goto LABEL_7;
            case 1uLL:
              v9 = *(_QWORD *)(a1 + 8) + 8;
              if (v7 >= v9)
                goto LABEL_6;
              goto LABEL_71;
            case 2uLL:
              v48 = ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_72;
              if (v48 < 0)
                goto LABEL_80;
              v9 = *(_QWORD *)(a1 + 8) + v48;
              if (v7 < v9)
                goto LABEL_71;
LABEL_6:
              *(_QWORD *)(a1 + 8) = v9;
              break;
            case 5uLL:
              v9 = *(_QWORD *)(a1 + 8) + 4;
              if (v7 < v9)
                goto LABEL_71;
              goto LABEL_6;
            default:
              goto LABEL_71;
          }
        }
        goto LABEL_7;
      }
      if ((v10 & 7) != 0)
      {
        if ((v10 & 7) != 2)
          goto LABEL_71;
        v22 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_72;
        if (v22 < 0)
          goto LABEL_79;
        v23 = *(_QWORD *)(a1 + 8) + v22;
        if (v7 < v23)
        {
LABEL_71:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_72;
        }
        *(_QWORD *)(a1 + 24) = 8;
        *(_QWORD *)(a1 + 32) = v23;
      }
      v24 = ProtobufDecoder.decodeVarint()();
      if (v1)
        goto LABEL_72;
      v66 = v24;
      v25 = v8;
      v26 = *(_QWORD *)(a1 + 48);
      v27 = one-time initialization token for readerKey;
      v28 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27 != -1)
        swift_once();
      v29 = v75;
      v30 = __swift_project_value_buffer(v75, (uint64_t)static ArchiveReader.readerKey);
      v31 = (uint64_t)v69;
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
      v32(v69, v30, v29);
      if (*(_QWORD *)(v26 + 16) && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v34 & 1) != 0))
      {
        v8 = v25;
        outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v33, (uint64_t)&v73);
      }
      else
      {
        v8 = v25;
        v73 = 0u;
        v74 = 0u;
      }
      v35 = *(void (**)(char *, uint64_t))(v70 + 8);
      v35(v69, v75);
      if (!*((_QWORD *)&v74 + 1))
      {
        outlined destroy of Any?((uint64_t)&v73);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_7;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v37 = *(_QWORD **)(a1 + 40);
      v36 = *(_QWORD *)(a1 + 48);
      v38 = one-time initialization token for cacheKey;
      v39 = *(id *)a1;
      v64 = v37;
      v65 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v38 != -1)
        swift_once();
      v40 = v75;
      v41 = __swift_project_value_buffer(v75, (uint64_t)static ArchiveReader.cacheKey);
      v42 = v68;
      v32((char *)v68, v41, v40);
      if (*(_QWORD *)(v36 + 16) && (v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42), (v44 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v36 + 56) + 32 * v43, (uint64_t)&v73);
      }
      else
      {
        v73 = 0u;
        v74 = 0u;
      }
      v35((char *)v68, v75);
      if (*((_QWORD *)&v74 + 1))
      {
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v49 = *(_QWORD **)&v71[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v50 = v66;
          if (v66 < 0)
            goto LABEL_81;
          swift_beginAccess();
          v51 = v49[2];
          if (*(_QWORD *)(v51 + 16) && (v52 = specialized __RawDictionaryStorage.find<A>(_:)(v50), (v53 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v51 + 56) + 32 * v52, (uint64_t)v71);
            outlined init with take of Any(v71, &v73);
            swift_endAccess();
            swift_release();
            swift_release();
            outlined consume of Shader.ResolvedShader?((id)v8);
            outlined init with take of Any(&v73, v71);
            type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            if (swift_dynamicCast())
              v8 = v72;
            else
              v8 = 1;
          }
          else
          {
            v64 = v49 + 2;
            v65 = v49;
            swift_endAccess();
            ArchiveReader.subscript.getter(v50);
            v55 = v54;
            v57 = v56;
            v58 = Data._bridgeToObjectiveC()().super.isa;
            v59 = CGDataProviderCreateWithCFData(v58);

            if (!v59)
              goto LABEL_83;
            v60 = CGFontCreateWithDataProvider(v59);

            outlined consume of Shader.ResolvedShader?((id)v8);
            outlined consume of Data._Representation(v55, v57);
            type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            *((_QWORD *)&v74 + 1) = v61;
            *(_QWORD *)&v73 = v60;
            swift_beginAccess();
            v62 = v60;
            specialized Dictionary.subscript.setter((uint64_t)&v73, v50);
            swift_endAccess();
            swift_release();
            swift_release();
            v8 = (uint64_t)v60;
          }
          goto LABEL_7;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v73);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(a1 + 16);
      if (v6 >= v7)
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (v8 != 1)
          return v8;
        goto LABEL_4;
      }
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  v8 = 1;
  outlined consume of Shader.ResolvedShader?((id)1);
LABEL_72:
  outlined consume of Shader.ResolvedShader?((id)v8);
  return v8;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  unint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  Class isa;
  uint64_t CGFontWithData;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Class v55;
  void *v56;
  uint64_t v57;
  id v58;
  id v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = type metadata accessor for CodingUserInfoKey();
  v65 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  MEMORY[0x24BDAC7A8](v3);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 < v7)
  {
    v63 = v5;
    v64 = (char *)v60 - v4;
    v8 = 1;
    v62 = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(a1 + 32);
        if (v6 < v11)
          goto LABEL_14;
        if (v11 < v6)
          goto LABEL_69;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v10 = ProtobufDecoder.decodeVarint()();
      if (v1)
        goto LABEL_70;
      if (v10 <= 7)
        goto LABEL_69;
LABEL_14:
      if (v10 >> 3 != 1)
      {
        if (v10 >> 3 == 2)
        {
          if ((v10 & 7) != 2)
            goto LABEL_69;
          v12 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_70;
          v13 = v12;
          if (v12 < 0)
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
            JUMPOUT(0x2350363D0);
          }
          v14 = *(_QWORD *)(a1 + 8);
          if (v7 < v14 + v12)
            goto LABEL_69;
          *(_QWORD *)(a1 + 8) = v14 + v12;
          if (v12)
          {
            v15 = v14 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v18 = v17;
            if (__OFADD__(v15, v13))
              goto LABEL_75;
            if (v15 + v13 < v15)
              goto LABEL_76;
            v19 = v16;
            v13 = Data._Representation.subscript.getter();
            v21 = v20;
            outlined consume of Data._Representation(v19, v18);
          }
          else
          {
            v21 = 0xC000000000000000;
          }
          isa = Data._bridgeToObjectiveC()().super.isa;
          CGFontWithData = RBDecoderCreateCGFontWithData();

          outlined consume of Shader.ResolvedShader?((id)v8);
          outlined consume of Data._Representation(v13, v21);
          v8 = CGFontWithData;
        }
        else
        {
          switch(v10 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_70;
              goto LABEL_7;
            case 1uLL:
              v9 = *(_QWORD *)(a1 + 8) + 8;
              if (v7 >= v9)
                goto LABEL_6;
              goto LABEL_69;
            case 2uLL:
              v45 = ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_70;
              if (v45 < 0)
                goto LABEL_78;
              v9 = *(_QWORD *)(a1 + 8) + v45;
              if (v7 < v9)
                goto LABEL_69;
LABEL_6:
              *(_QWORD *)(a1 + 8) = v9;
              break;
            case 5uLL:
              v9 = *(_QWORD *)(a1 + 8) + 4;
              if (v7 < v9)
                goto LABEL_69;
              goto LABEL_6;
            default:
              goto LABEL_69;
          }
        }
        goto LABEL_7;
      }
      if ((v10 & 7) != 0)
      {
        if ((v10 & 7) != 2)
          goto LABEL_69;
        v22 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_70;
        if (v22 < 0)
          goto LABEL_77;
        v23 = *(_QWORD *)(a1 + 8) + v22;
        if (v7 < v23)
        {
LABEL_69:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_70;
        }
        *(_QWORD *)(a1 + 24) = 8;
        *(_QWORD *)(a1 + 32) = v23;
      }
      v24 = ProtobufDecoder.decodeVarint()();
      if (v1)
        goto LABEL_70;
      v61 = v24;
      v25 = v8;
      v26 = *(_QWORD *)(a1 + 48);
      v27 = one-time initialization token for readerKey;
      v28 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27 != -1)
        swift_once();
      v29 = v70;
      v30 = __swift_project_value_buffer(v70, (uint64_t)static ArchiveReader.readerKey);
      v31 = (uint64_t)v64;
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      v32(v64, v30, v29);
      if (*(_QWORD *)(v26 + 16) && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v34 & 1) != 0))
      {
        v8 = v25;
        outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v33, (uint64_t)&v68);
      }
      else
      {
        v8 = v25;
        v68 = 0u;
        v69 = 0u;
      }
      v35 = *(void (**)(char *, uint64_t))(v65 + 8);
      v35(v64, v70);
      if (!*((_QWORD *)&v69 + 1))
      {
        outlined destroy of Any?((uint64_t)&v68);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_7;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_48;
      v60[1] = *(id *)&v66[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v36 = *(_QWORD *)(a1 + 48);
      v37 = one-time initialization token for cacheKey;
      v60[0] = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37 != -1)
        swift_once();
      v38 = v70;
      v39 = __swift_project_value_buffer(v70, (uint64_t)static ArchiveReader.cacheKey);
      v40 = v63;
      v32((char *)v63, v39, v38);
      if (*(_QWORD *)(v36 + 16) && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v40), (v42 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v36 + 56) + 32 * v41, (uint64_t)&v68);
      }
      else
      {
        v68 = 0u;
        v69 = 0u;
      }
      v35((char *)v63, v70);
      if (*((_QWORD *)&v69 + 1))
      {
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v46 = *(_QWORD **)&v66[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v47 = v61;
          if (v61 < 0)
            goto LABEL_79;
          swift_beginAccess();
          v48 = v46[2];
          if (*(_QWORD *)(v48 + 16) && (v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47), (v50 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v48 + 56) + 32 * v49, (uint64_t)v66);
            outlined init with take of Any(v66, &v68);
            swift_endAccess();
            swift_release();
            swift_release();
            outlined consume of Shader.ResolvedShader?((id)v8);
            outlined init with take of Any(&v68, v66);
            type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            if (swift_dynamicCast())
              v8 = v67;
            else
              v8 = 1;
          }
          else
          {
            swift_endAccess();
            ArchiveReader.subscript.getter(v47);
            v52 = v51;
            v60[0] = v46;
            v54 = v53;
            v55 = Data._bridgeToObjectiveC()().super.isa;
            v56 = (void *)RBDecoderCreateCGFontWithData();

            outlined consume of Shader.ResolvedShader?((id)v8);
            outlined consume of Data._Representation(v52, v54);
            type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            *((_QWORD *)&v69 + 1) = v57;
            *(_QWORD *)&v68 = v56;
            swift_beginAccess();
            v58 = v56;
            specialized Dictionary.subscript.setter((uint64_t)&v68, v47);
            swift_endAccess();
            swift_release();
            swift_release();
            v8 = (uint64_t)v56;
          }
          goto LABEL_7;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v68);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(a1 + 16);
      if (v6 >= v7)
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (v8 != 1)
          return v8;
        goto LABEL_4;
      }
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  v8 = 1;
  outlined consume of Shader.ResolvedShader?((id)1);
LABEL_70:
  outlined consume of Shader.ResolvedShader?((id)v8);
  return v8;
}

void *specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  unint64_t v37;
  char v38;
  void *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  void *v49;
  Class isa;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[2];
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for CodingUserInfoKey();
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (v10 < v11)
  {
    v71 = (char *)&v65 - v8;
    v68 = v9;
    v3 = 0;
    v67 = MEMORY[0x24BEE4AD8] + 8;
    v70 = a2;
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v13)
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (v10 < v14)
          goto LABEL_14;
        if (v14 < v10)
          goto LABEL_73;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v13 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_74;
      if (v13 < 8)
        goto LABEL_73;
LABEL_14:
      if (v13 >> 3 != 1)
      {
        if (v13 >> 3 == 2)
        {
          if ((v13 & 7) != 2)
            goto LABEL_73;
          v15 = ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_74;
          v16 = v15;
          if (v15 < 0)
          {
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
          }
          v17 = *(_QWORD *)(a1 + 8);
          if (v11 < v17 + v15)
            goto LABEL_73;
          *(_QWORD *)(a1 + 8) = v17 + v15;
          if (v15)
          {
            v18 = v17 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v21 = v20;
            if (__OFADD__(v18, v16))
              goto LABEL_80;
            if (v18 + v16 < v18)
              goto LABEL_81;
            v22 = v19;
            v23 = Data._Representation.subscript.getter();
            v25 = v24;
            outlined consume of Data._Representation(v22, v21);
          }
          else
          {
            v23 = 0;
            v25 = 0xC000000000000000;
          }
          v49 = (void *)objc_opt_self();
          isa = Data._bridgeToObjectiveC()().super.isa;
          *(_QWORD *)&v76 = 0;
          v51 = objc_msgSend(v49, sel_decodedObjectWithData_delegate_error_, isa, a2, &v76);

          if (!v51)
          {
            v64 = (id)v76;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            outlined consume of Data._Representation(v23, v25);

            return v3;
          }
          v52 = (id)v76;

          outlined consume of Data._Representation(v23, v25);
          v3 = v51;
        }
        else
        {
          switch(v13 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v2)
                goto LABEL_74;
              goto LABEL_7;
            case 1uLL:
              v12 = *(_QWORD *)(a1 + 8) + 8;
              if (v11 >= v12)
                goto LABEL_6;
              goto LABEL_73;
            case 2uLL:
              v53 = ProtobufDecoder.decodeVarint()();
              if (v2)
                goto LABEL_74;
              if (v53 < 0)
                goto LABEL_83;
              v12 = *(_QWORD *)(a1 + 8) + v53;
              if (v11 < v12)
                goto LABEL_73;
LABEL_6:
              *(_QWORD *)(a1 + 8) = v12;
              break;
            case 5uLL:
              v12 = *(_QWORD *)(a1 + 8) + 4;
              if (v11 < v12)
                goto LABEL_73;
              goto LABEL_6;
            default:
              goto LABEL_73;
          }
        }
        goto LABEL_7;
      }
      if ((v13 & 7) != 0)
      {
        if ((v13 & 7) != 2)
          goto LABEL_73;
        v26 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_74;
        if (v26 < 0)
          goto LABEL_82;
        v27 = *(_QWORD *)(a1 + 8) + v26;
        if (v11 < v27)
        {
LABEL_73:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_74:

          return v3;
        }
        *(_QWORD *)(a1 + 24) = 8;
        *(_QWORD *)(a1 + 32) = v27;
      }
      v28 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_74;
      v69 = v28;
      v29 = v3;
      v30 = *(_QWORD *)(a1 + 48);
      v31 = one-time initialization token for readerKey;
      v32 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v31 != -1)
        swift_once();
      v33 = v73;
      v34 = __swift_project_value_buffer(v73, (uint64_t)static ArchiveReader.readerKey);
      v35 = (uint64_t)v71;
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
      v36(v71, v34, v33);
      if (*(_QWORD *)(v30 + 16) && (v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35), (v38 & 1) != 0))
      {
        v39 = v29;
        outlined init with copy of Any(*(_QWORD *)(v30 + 56) + 32 * v37, (uint64_t)&v76);
      }
      else
      {
        v39 = v29;
        v76 = 0u;
        v77 = 0u;
      }
      v40 = *(void (**)(char *, uint64_t))(v72 + 8);
      v40(v71, v73);
      if (!*((_QWORD *)&v77 + 1))
      {
        outlined destroy of Any?((uint64_t)&v76);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_49;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_48;
      v65 = *(_QWORD *)&v74[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v41 = *(_QWORD *)(a1 + 48);
      v42 = one-time initialization token for cacheKey;
      v66 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v42 != -1)
        swift_once();
      v43 = v73;
      v44 = __swift_project_value_buffer(v73, (uint64_t)static ArchiveReader.cacheKey);
      v45 = v68;
      v36((char *)v68, v44, v43);
      if (*(_QWORD *)(v41 + 16))
      {
        v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
        v47 = v69;
        if ((v48 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v41 + 56) + 32 * v46, (uint64_t)&v76);
        }
        else
        {
          v76 = 0u;
          v77 = 0u;
        }
      }
      else
      {
        v76 = 0u;
        v77 = 0u;
        v47 = v69;
      }
      v40((char *)v68, v73);
      if (*((_QWORD *)&v77 + 1))
      {
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        v3 = v39;
        if ((swift_dynamicCast() & 1) != 0)
        {
          v54 = *(_QWORD *)&v74[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          a2 = v70;
          if (v47 < 0)
            goto LABEL_84;
          swift_beginAccess();
          v55 = *(_QWORD *)(v54 + 16);
          if (*(_QWORD *)(v55 + 16) && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(v47), (v57 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v55 + 56) + 32 * v56, (uint64_t)v74);
            outlined init with take of Any(v74, &v76);
            swift_endAccess();
            swift_release();
            swift_release();

            outlined init with take of Any(&v76, v74);
            type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
            if (swift_dynamicCast())
              v3 = v75;
            else
              v3 = 0;
          }
          else
          {
            v69 = v54;
            swift_endAccess();
            ArchiveReader.subscript.getter(v47);
            v59 = v58;
            v61 = v60;
            closure #1 in closure #1 in Shader.ResolvedShader.init(from:)((uint64_t)a2, &v76);

            outlined consume of Data._Representation(v59, v61);
            v3 = (void *)v76;
            if (!(_QWORD)v76)
            {
              __break(1u);
              JUMPOUT(0x235034454);
            }
            *((_QWORD *)&v77 + 1) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
            *(_QWORD *)&v76 = v3;
            swift_beginAccess();
            v62 = v3;
            specialized Dictionary.subscript.setter((uint64_t)&v76, v47);
            swift_endAccess();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          a2 = v70;
        }
        goto LABEL_7;
      }
      outlined destroy of Any?((uint64_t)&v76);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_49:
      v3 = v39;
      a2 = v70;
LABEL_7:
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      if (v10 >= v11)
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (!v3)
          goto LABEL_4;

        return v3;
      }
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();

  return v3;
}

_QWORD *specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(id *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  _BYTE *v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  unint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  _OWORD v67[2];
  void *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = a2;
  v5 = type metadata accessor for CodingUserInfoKey();
  v65 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v9 = a1[1];
  v10 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v10)
  {
    v63 = v8;
    v64 = (char *)&v58 - v7;
    v66 = 0;
    v62 = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      v12 = (unint64_t)a1[3];
      if (v12)
      {
        v13 = a1[4];
        if (v9 < v13)
          goto LABEL_14;
        if (v13 < v9)
          goto LABEL_69;
        a1[3] = 0;
      }
      v2 = a1;
      v12 = ProtobufDecoder.decodeVarint()();
      if (v3)
        goto LABEL_70;
      if (v12 < 8)
        goto LABEL_69;
LABEL_14:
      if (v12 >> 3 != 1)
      {
        if (v12 >> 3 == 2)
        {
          if ((v12 & 7) != 2)
            goto LABEL_69;
          v2 = a1;
          v14 = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_70;
          v2 = (_QWORD *)v14;
          if (v14 < 0)
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
            JUMPOUT(0x235034CD4);
          }
          v15 = a1[1];
          if (v10 < (unint64_t)&v15[v14])
            goto LABEL_69;
          a1[1] = &v15[v14];
          if (v14)
          {
            v16 = v15 - (_BYTE *)objc_msgSend(objc_retainAutorelease(*a1), sel_bytes);
            v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v19 = v18;
            if (__OFADD__(v16, v2))
              goto LABEL_75;
            if ((uint64_t)v2 + v16 < v16)
              goto LABEL_76;
            v20 = v17;
            v21 = Data._Representation.subscript.getter();
            v2 = v22;
            outlined consume of Data._Representation(v20, v19);
          }
          else
          {
            v21 = 0;
            v2 = (_QWORD *)0xC000000000000000;
          }
          outlined copy of Data._Representation(v21, (unint64_t)v2);
          ProtobufDecoder.init(_:)(v21, (uint64_t)v2);
          v40 = v72;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v71 = v40;
          v41 = (void *)specialized CodablePlatformFont.init(from:)((uint64_t)&v69);
          v42 = (void *)v69;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          outlined consume of Data._Representation(v21, (unint64_t)v2);
          v66 = v41;
        }
        else
        {
          switch(v12 & 7)
          {
            case 0uLL:
              v2 = a1;
              ProtobufDecoder.decodeVarint()();
              if (v3)
                goto LABEL_70;
              goto LABEL_7;
            case 1uLL:
              v11 = (unint64_t)a1[1] + 8;
              if (v10 >= v11)
                goto LABEL_6;
              goto LABEL_69;
            case 2uLL:
              v2 = a1;
              v43 = ProtobufDecoder.decodeVarint()();
              if (v3)
                goto LABEL_70;
              if (v43 < 0)
                goto LABEL_78;
              v11 = (unint64_t)a1[1] + v43;
              if (v10 < v11)
                goto LABEL_69;
LABEL_6:
              a1[1] = (id)v11;
              break;
            case 5uLL:
              v11 = (unint64_t)a1[1] + 4;
              if (v10 < v11)
                goto LABEL_69;
              goto LABEL_6;
            default:
              goto LABEL_69;
          }
        }
        goto LABEL_7;
      }
      if ((v12 & 7) != 0)
      {
        if ((v12 & 7) != 2)
          goto LABEL_69;
        v2 = a1;
        v23 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_70;
        if (v23 < 0)
          goto LABEL_77;
        v24 = (unint64_t)a1[1] + v23;
        if (v10 < v24)
        {
LABEL_69:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_70:
          swift_bridgeObjectRelease();

          return v2;
        }
        a1[3] = (id)8;
        a1[4] = (id)v24;
      }
      v2 = a1;
      v25 = ProtobufDecoder.decodeVarint()();
      if (v3)
        goto LABEL_70;
      v26 = v25;
      v2 = a1[6];
      v27 = one-time initialization token for readerKey;
      v28 = *a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27 != -1)
        swift_once();
      v29 = __swift_project_value_buffer(v5, (uint64_t)static ArchiveReader.readerKey);
      v30 = (uint64_t)v64;
      v31 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      v31(v64, v29, v5);
      if (v2[2] && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30), (v33 & 1) != 0))
      {
        outlined init with copy of Any(v2[7] + 32 * v32, (uint64_t)&v69);
      }
      else
      {
        v69 = 0u;
        v70 = 0u;
      }
      v34 = *(void (**)(char *, uint64_t))(v65 + 8);
      v34(v64, v5);
      if (!*((_QWORD *)&v70 + 1))
      {
        outlined destroy of Any?((uint64_t)&v69);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_7;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_48;
      v61 = *(_QWORD *)&v67[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v2 = a1[6];
      v35 = one-time initialization token for cacheKey;
      v60 = *a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35 != -1)
        swift_once();
      v36 = __swift_project_value_buffer(v5, (uint64_t)static ArchiveReader.cacheKey);
      v37 = v63;
      v31((char *)v63, v36, v5);
      if (v2[2] && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(v37), (v39 & 1) != 0))
      {
        outlined init with copy of Any(v2[7] + 32 * v38, (uint64_t)&v69);
      }
      else
      {
        v69 = 0u;
        v70 = 0u;
      }
      v34((char *)v63, v5);
      if (*((_QWORD *)&v70 + 1))
      {
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v44 = *(_QWORD **)&v67[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v26 < 0)
            goto LABEL_79;
          swift_beginAccess();
          v2 = (_QWORD *)v44[2];
          if (v2[2] && (v45 = specialized __RawDictionaryStorage.find<A>(_:)(v26), (v46 & 1) != 0))
          {
            outlined init with copy of Any(v2[7] + 32 * v45, (uint64_t)v67);
            outlined init with take of Any(v67, &v69);
            swift_endAccess();
            swift_release();
            swift_release();

            outlined init with take of Any(&v69, v67);
            v47 = swift_dynamicCast();
            v48 = v68;
            if (!v47)
              v48 = 0;
            v66 = v48;
          }
          else
          {
            v59 = v44 + 2;
            v60 = v44;
            swift_endAccess();
            ArchiveReader.subscript.getter(v26);
            v50 = v49;
            v52 = v51;
            outlined copy of Data._Representation(v49, v51);
            ProtobufDecoder.init(_:)(v50, v52);
            v53 = v72;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v71 = v53;
            v54 = (void *)specialized CodablePlatformFont.init(from:)((uint64_t)&v69);
            v55 = (void *)v69;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            outlined consume of Data._Representation(v50, v52);
            *((_QWORD *)&v70 + 1) = &type metadata for CodablePlatformFont;
            *(_QWORD *)&v69 = v54;
            v2 = v59;
            swift_beginAccess();
            v56 = v54;
            specialized Dictionary.subscript.setter((uint64_t)&v69, v26);
            swift_endAccess();
            swift_release();
            swift_release();
            v66 = v54;
          }
          goto LABEL_7;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v69);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      v9 = a1[1];
      v10 = (unint64_t)a1[2];
      if ((unint64_t)v9 >= v10)
      {
        a1[3] = 0;
        v2 = v66;
        if (v66)
          goto LABEL_73;
        goto LABEL_4;
      }
    }
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_73:
  swift_bridgeObjectRelease();
  return v2;
}

void specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD v62[2];
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = type metadata accessor for CodingUserInfoKey();
  v71 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  MEMORY[0x24BDAC7A8](v5);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v8 >= v9)
  {
    v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v11 = 0xF000000000000000;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    outlined consume of Data?(v10, v11);
LABEL_75:
    outlined consume of Data?(v10, v11);
    return;
  }
  v70 = (char *)v62 - v6;
  v66 = v7;
  v63 = a2;
  v10 = 0;
  v65 = MEMORY[0x24BEE4AD8] + 8;
  v11 = 0xF000000000000000;
  do
  {
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v13)
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (v8 < v14)
          goto LABEL_14;
        if (v14 < v8)
          goto LABEL_74;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v13 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_75;
      if (v13 < 8)
        goto LABEL_74;
LABEL_14:
      if (v13 >> 3 == 1)
        break;
      if (v13 >> 3 != 2)
      {
        switch(v13 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_75;
            goto LABEL_7;
          case 1uLL:
            v12 = *(_QWORD *)(a1 + 8) + 8;
            if (v9 >= v12)
              goto LABEL_6;
            goto LABEL_74;
          case 2uLL:
            v49 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_75;
            if (v49 < 0)
              goto LABEL_82;
            v12 = *(_QWORD *)(a1 + 8) + v49;
            if (v9 < v12)
              goto LABEL_74;
LABEL_6:
            *(_QWORD *)(a1 + 8) = v12;
            break;
          case 5uLL:
            v12 = *(_QWORD *)(a1 + 8) + 4;
            if (v9 < v12)
              goto LABEL_74;
            goto LABEL_6;
          default:
            goto LABEL_74;
        }
        goto LABEL_7;
      }
      if ((v13 & 7) != 2)
        goto LABEL_74;
      v15 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_75;
      v16 = v15;
      if (v15 < 0)
      {
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        JUMPOUT(0x235035488);
      }
      v17 = *(_QWORD *)(a1 + 8);
      if (v9 < v17 + v15)
        goto LABEL_74;
      *(_QWORD *)(a1 + 8) = v17 + v15;
      if (v15)
      {
        v18 = v17 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
        v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v21 = v20;
        if (__OFADD__(v18, v16))
          goto LABEL_79;
        if (v18 + v16 < v18)
          goto LABEL_80;
        v22 = v19;
        v23 = Data._Representation.subscript.getter();
        v25 = v24;
        outlined consume of Data._Representation(v22, v21);
        outlined consume of Data?(v10, v11);
        v10 = v23;
        v11 = v25;
        goto LABEL_7;
      }
      outlined consume of Data?(v10, v11);
      v10 = 0;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      v11 = 0xC000000000000000;
      if (v8 >= v9)
      {
        v10 = 0;
        *(_QWORD *)(a1 + 24) = 0;
        goto LABEL_77;
      }
    }
    if ((v13 & 7) != 0)
    {
      if ((v13 & 7) != 2)
        goto LABEL_74;
      v26 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_75;
      if (v26 < 0)
        goto LABEL_81;
      v27 = *(_QWORD *)(a1 + 8) + v26;
      if (v9 < v27)
      {
LABEL_74:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_75;
      }
      *(_QWORD *)(a1 + 24) = 8;
      *(_QWORD *)(a1 + 32) = v27;
    }
    v67 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_75;
    v28 = v10;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = one-time initialization token for readerKey;
    v69 = *(id *)a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30 != -1)
      swift_once();
    v31 = v77;
    v32 = __swift_project_value_buffer(v77, (uint64_t)static ArchiveReader.readerKey);
    v33 = (uint64_t)v70;
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
    v34(v70, v32, v31);
    v35 = *(_QWORD *)(v29 + 16);
    v68 = v11;
    if (v35 && (v36 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v37 & 1) != 0))
    {
      v38 = v28;
      outlined init with copy of Any(*(_QWORD *)(v29 + 56) + 32 * v36, (uint64_t)&v75);
    }
    else
    {
      v38 = v28;
      v75 = 0u;
      v76 = 0u;
    }
    v39 = *(void (**)(char *, uint64_t))(v71 + 8);
    v39(v70, v77);
    if (!*((_QWORD *)&v76 + 1))
    {
      outlined destroy of Any?((uint64_t)&v75);
LABEL_48:
      swift_bridgeObjectRelease();
LABEL_49:
      swift_bridgeObjectRelease();

      v10 = v38;
LABEL_50:
      v11 = v68;
      goto LABEL_7;
    }
    type metadata accessor for ArchiveReader();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_48;
    v40 = *(_QWORD *)&v72[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v42 = *(_QWORD *)(a1 + 40);
    v41 = *(_QWORD *)(a1 + 48);
    v43 = one-time initialization token for cacheKey;
    v69 = *(id *)a1;
    v64 = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v43 != -1)
      swift_once();
    v44 = v77;
    v45 = __swift_project_value_buffer(v77, (uint64_t)static ArchiveReader.cacheKey);
    v46 = v66;
    v34((char *)v66, v45, v44);
    if (*(_QWORD *)(v41 + 16) && (v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46), (v48 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v41 + 56) + 32 * v47, (uint64_t)&v75);
    }
    else
    {
      v75 = 0u;
      v76 = 0u;
    }
    v39((char *)v66, v77);
    if (!*((_QWORD *)&v76 + 1))
    {
      outlined destroy of Any?((uint64_t)&v75);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
    v10 = v38;
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_50;
    }
    v50 = v40;
    v51 = *(_QWORD *)&v72[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v53 = v67;
    v52 = v68;
    if (v67 < 0)
      goto LABEL_83;
    swift_beginAccess();
    v54 = *(_QWORD *)(v51 + 16);
    if (*(_QWORD *)(v54 + 16) && (v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53), (v56 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v54 + 56) + 32 * v55, (uint64_t)v72);
      outlined init with take of Any(v72, &v75);
      swift_endAccess();
      swift_release();
      swift_release();
      outlined consume of Data?(v10, v52);
      outlined init with take of Any(&v75, v72);
      v57 = swift_dynamicCast();
      if (v57)
        v11 = v74;
      else
        v11 = 0xF000000000000000;
      if (v57)
        v10 = v73;
      else
        v10 = 0;
    }
    else
    {
      swift_endAccess();
      v62[1] = v50;
      ArchiveReader.subscript.getter(v53);
      v59 = v58;
      v11 = v60;
      outlined consume of Data?(v10, v52);
      *((_QWORD *)&v76 + 1) = MEMORY[0x24BDCDDE8];
      *(_QWORD *)&v75 = v59;
      *((_QWORD *)&v75 + 1) = v11;
      swift_beginAccess();
      outlined copy of Data._Representation(v59, v11);
      specialized Dictionary.subscript.setter((uint64_t)&v75, v53);
      swift_endAccess();
      swift_release();
      swift_release();
      v10 = v59;
    }
LABEL_7:
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
  }
  while (v8 < v9);
  *(_QWORD *)(a1 + 24) = 0;
  if (v11 >> 60 == 15)
    goto LABEL_4;
LABEL_77:
  v61 = v63;
  *v63 = v10;
  v61[1] = v11;
}

uint64_t ProtobufEncoder.archiveWriter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;

  v1 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 32);
  if (one-time initialization token for writerKey != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchiveWriter.writerKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(_QWORD *)(v5 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((_QWORD *)&v12 + 1))
  {
    type metadata accessor for ArchiveWriter(0);
    if (swift_dynamicCast())
      return v10[1];
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
    return 0;
  }
}

uint64_t ArchiveWriter.addAttachment(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  CC_LONG h4;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  CC_SHA1_CTX v11;
  SwiftUI::StrongHasher into;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(&v11, 0, sizeof(v11));
  outlined copy of Data._Representation(a1, a2);
  CC_SHA1_Init(&v11);
  into.state = v11;
  Data.hash(into:)(&into);
  memset(&v11, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&v11, &into.state);
  outlined consume of Data._Representation(a1, a2);
  h4 = v11.h4;
  v6 = *(_OWORD *)&v11.h0;
  swift_beginAccess();
  v7 = specialized Collection<>.firstIndex(of:)(v6, *((uint64_t *)&v6 + 1), h4, *(_QWORD *)(v2 + 32));
  if ((v8 & 1) == 0)
    return v7;
  *(_OWORD *)&v11.h0 = v6;
  v11.h4 = h4;
  LOBYTE(v11.Nl) = 0;
  outlined copy of Data._Representation(a1, a2);
  v9 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&v11, v2, a1, a2);
  outlined consume of Data._Representation(a1, a2);
  return v9;
}

uint64_t ProtobufDecoder.archiveReader.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;

  v1 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 48);
  if (one-time initialization token for readerKey != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchiveReader.readerKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(_QWORD *)(v5 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((_QWORD *)&v12 + 1))
  {
    type metadata accessor for ArchiveReader();
    if (swift_dynamicCast())
      return v10[1];
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
    return 0;
  }
}

uint64_t ProtobufEncoder.binaryPlistData<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  v6 = *(_QWORD *)(a2 - 8);
  swift_allocObject();
  v7 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  v12[2] = v7;
  v9 = type metadata accessor for Array();
  v12[0] = a3;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12A0], v9, v12);
  v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  type metadata accessor for ContiguousBytes();
  swift_bridgeObjectRetain();
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of ContiguousBytes?((uint64_t)v14);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = _StringObject.sharedUTF8.getter();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = specialized Data._Representation.init(_:)(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = specialized Data._Representation.init(count:)(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
    __asm { BR              X12 }
  }
  outlined init with take of ScrollStateRequest(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t ProtobufDecoder.value<A>(fromBinaryPlist:type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;

  v14[1] = a1;
  v14[0] = a4;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v14 - v8;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  v10 = type metadata accessor for Array();
  v15 = a3;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D0], v10, &v15);
  v11 = v14[2];
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v11)
    return swift_release();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v10);
  Collection.first.getter();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v12 + 32))(v14[0], v9, a2);
}

uint64_t one-time initialization function for writerKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveWriter.writerKey);
}

uint64_t static ArchiveWriter.writerKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for writerKey, (uint64_t)static ArchiveWriter.writerKey, a1);
}

uint64_t ArchiveWriter.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_BYTE *)(v0 + 144) = 1;
  *(_QWORD *)(v0 + 152) = MEMORY[0x24BEE4B00];
  v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1)
    swift_once();
  v3 = type metadata accessor for OSSignposter();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

uint64_t ArchiveWriter.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v0 + 16) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_BYTE *)(v0 + 144) = 1;
  *(_QWORD *)(v0 + 152) = MEMORY[0x24BEE4B00];
  v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1)
    swift_once();
  v3 = type metadata accessor for OSSignposter();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ArchiveWriter.finalize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];

  v2 = v1;
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    swift_beginAccess();
    v3 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0 + 160);
    type metadata accessor for (offset: UInt64, size: UInt64)();
    v7 = v6;
    swift_bridgeObjectRetain();
    v5(v3 + 32, v4, v7);
    swift_bridgeObjectRelease();
    if (!v2)
    {
      if (HIDWORD(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)))
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        v8[0] = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
        v8[1] = -782886287;
        v5((uint64_t)v8, 2, MEMORY[0x24BEE44F0]);
        *(_BYTE *)(v0 + 16) = 1;
      }
    }
  }
}

uint64_t ArchiveWriter.addAttachment(hash:from:)(unint64_t *a1, void (*a2)(const char *), char **a3)
{
  const char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  NSObject *v17;
  os_signpost_type_t v18;
  char v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  void (*v25)(char *, char *, uint64_t);
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char **v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t result;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(const char *);
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  char isUniquelyReferenced_nonNull_native;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_signpost_type_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  os_signpost_id_t v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  unint64_t v93;
  unint64_t v94;
  char **v95;
  void (*v96)(const char *);
  unint64_t v97;
  __int128 v98;
  const char *v99;
  unsigned __int8 md[8];
  uint64_t v101;
  int v102;
  CC_SHA1_CTX c;
  uint64_t v104;

  v95 = a3;
  v96 = a2;
  v104 = *MEMORY[0x24BDAC8D0];
  v88 = type metadata accessor for OSSignpostError();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v90 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v79 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v79 - v14;
  v94 = *a1;
  v93 = a1[1];
  LODWORD(v91) = *((_DWORD *)a1 + 4);
  LODWORD(v97) = *((unsigned __int8 *)a1 + 20);
  v99 = v3;
  v16 = &v3[OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter];
  static OSSignpostID.exclusive.getter();
  v89 = v16;
  v17 = OSSignposter.logHandle.getter();
  v18 = static os_signpost_type_t.begin.getter();
  v19 = OS_os_log.signpostsEnabled.getter();
  v92 = v9;
  if ((v19 & 1) != 0)
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v20(v12, v15, v6);
    v21 = v6;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_2349C4000, v17, v18, v23, "addAttachment", "", v22, 2u);
    v24 = v22;
    v6 = v21;
    MEMORY[0x23B7C9D54](v24, -1, -1);

    v25 = v20;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v21);
  }
  else
  {

    v25 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  }
  v26 = (unint64_t)v12;
  v25(v12, v15, v6);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v27 = OSSignpostIntervalState.init(id:isOpen:)();
  v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  v28(v15, v6);
  v29 = v99;
  v30 = v98;
  if (!*((_QWORD *)v99 + 5))
  {
    v35 = MEMORY[0x24BEE4260];
    v36 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v36[2] = 16;
    v29 = v99;
    v36[5] = 0;
    v36[4] = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)v29 + 160))(v36 + 4, 16, v35);
    if (v30)
      goto LABEL_10;
    swift_bridgeObjectRelease();
  }
  if ((_DWORD)v97)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    v98 = *(_OWORD *)&c.h0;
    v86 = *(_OWORD *)&c.h4;
    v85 = *(_OWORD *)&c.data[1];
    v84 = *(_OWORD *)&c.data[5];
    v83 = *(_OWORD *)&c.data[9];
    v31 = *(_QWORD *)&c.data[13];
    v32 = *(_QWORD *)&c.data[15];
    swift_beginAccess();
    *((_OWORD *)v99 + 3) = v98;
    *((_OWORD *)v99 + 4) = v86;
    *((_OWORD *)v99 + 5) = v85;
    *((_OWORD *)v99 + 6) = v84;
    *((_OWORD *)v99 + 7) = v83;
    *((_QWORD *)v99 + 16) = v31;
    v29 = v99;
    *((_QWORD *)v99 + 17) = v32;
    *((_BYTE *)v29 + 144) = 0;
  }
  v33 = *((_QWORD *)v29 + 5);
  v34 = v95;
  v96(v29);
  if (v30)
  {
    swift_release();
    return v6;
  }
  v37 = *((_QWORD *)v29 + 5);
  v96 = (void (*)(const char *))(v37 - v33);
  if (v37 < v33)
  {
    __break(1u);
LABEL_40:
    v25 = (void (*)(char *, char *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    *v95 = (char *)v25;
LABEL_20:
    v48 = *((_QWORD *)v25 + 2);
    v47 = *((_QWORD *)v25 + 3);
    if (v48 >= v47 >> 1)
    {
      v25 = (void (*)(char *, char *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v25);
      *v95 = (char *)v25;
    }
    v49 = v96;
    v50 = (unint64_t)v96 + 15;
    *((_QWORD *)v25 + 2) = v48 + 1;
    v51 = (_QWORD *)((char *)v25 + 16 * v48);
    v51[4] = v27;
    v51[5] = v49;
    swift_endAccess();
    swift_beginAccess();
    v52 = *v34;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v34 = v52;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
      *v34 = v52;
    }
    v54 = v94;
    v6 = v93;
    v55 = v50 & 0xFFFFFFFFFFFFFFF0;
    v57 = *((_QWORD *)v52 + 2);
    v56 = *((_QWORD *)v52 + 3);
    v58 = v97;
    if (v57 >= v56 >> 1)
    {
      v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v52);
      v58 = v97;
      v52 = v78;
      *v34 = v78;
    }
    *((_QWORD *)v52 + 2) = v57 + 1;
    v59 = &v52[20 * v57];
    *((_DWORD *)v59 + 8) = v54;
    *((_DWORD *)v59 + 9) = v58;
    *((_DWORD *)v59 + 10) = v6;
    *((_DWORD *)v59 + 11) = v26;
    *((_DWORD *)v59 + 12) = (_DWORD)v28;
    swift_endAccess();
    if ((void (*)(const char *))v55 == v96)
    {
      v60 = v92;
      v61 = v81;
      goto LABEL_33;
    }
    v60 = v92;
    v61 = v81;
    if (v55 < (unint64_t)v96)
      __break(1u);
    v62 = specialized Array.init(repeating:count:)(0, v55 - (_QWORD)v96);
    v63 = v98;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v99 + 160))(v62 + 32, *(_QWORD *)(v62 + 16), MEMORY[0x24BEE4260]);
    if (!v63)
    {
      *(_QWORD *)&v98 = 0;
      swift_bridgeObjectRelease();
LABEL_33:
      v6 = *((_QWORD *)*v95 + 2) - 1;
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v64);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
      v66 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v67 = static os_signpost_type_t.end.getter();
      v68 = OS_os_log.signpostsEnabled.getter();
      v69 = v90;
      if ((v68 & 1) != 0)
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v70 = v87;
        v71 = v88;
        if ((*(unsigned int (**)(char *, uint64_t))(v87 + 88))(v69, v88) == *MEMORY[0x24BEE7810])
        {
          v72 = 0;
          v99 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v71);
          v99 = "index=%{name=index}ld size=%{xcode:size-in-bytes, name=size}llu";
          v72 = 2;
        }
        v73 = v79;
        v74 = v80;
        v91(v79, v60, v80);
        v75 = swift_slowAlloc();
        *(_BYTE *)v75 = 0;
        *(_BYTE *)(v75 + 1) = v72;
        *(_WORD *)(v75 + 2) = 2048;
        *(_QWORD *)md = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v75 + 12) = 2048;
        *(_QWORD *)md = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v76 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v66, v67, v76, "addAttachment", v99, (uint8_t *)v75, 0x16u);
        MEMORY[0x23B7C9D54](v75, -1, -1);

        v77 = v81;
        v81(v60, v74);
        swift_release();
        v77(v73, v74);
      }
      else
      {

        v61(v60, v80);
        swift_release();
      }
      return v6;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    return v6;
  }
  v79 = (char *)v26;
  v80 = v6;
  v82 = v27;
  v81 = v28;
  *(_QWORD *)&v86 = v33;
  if ((v97 & 1) == 0)
  {
    v39 = v94;
    v41 = v93;
    v26 = HIDWORD(v93);
    v40 = HIDWORD(v94);
    LODWORD(v28) = (_DWORD)v91;
LABEL_17:
    v34 = (char **)(v29 + 32);
    swift_beginAccess();
    v42 = *((_QWORD *)v29 + 4);
    v94 = v39;
    v97 = v40;
    v93 = v41;
    v43 = specialized Collection<>.firstIndex(of:)(v39 | (v40 << 32), v41 | (v26 << 32), (int)v28, v42);
    if ((v44 & 1) == 0)
    {
      v6 = v43;
      v45 = v86;
      (*(void (**)(_QWORD))(*(_QWORD *)v29 + 168))(v86);
      swift_release();
      *((_QWORD *)v29 + 5) = v45;
      return v6;
    }
    v91 = v25;
    v95 = (char **)(v29 + 24);
    swift_beginAccess();
    v25 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v29 + 3);
    v46 = swift_isUniquelyReferenced_nonNull_native();
    *((_QWORD *)v29 + 3) = v25;
    v27 = v86;
    *(_QWORD *)&v98 = 0;
    if ((v46 & 1) != 0)
      goto LABEL_20;
    goto LABEL_40;
  }
  result = swift_beginAccess();
  if ((v29[144] & 1) == 0)
  {
    *(_QWORD *)md = 0;
    v101 = 0;
    v102 = 0;
    CC_SHA1_Final(md, (CC_SHA1_CTX *)(v29 + 48));
    v39 = *(unsigned int *)md;
    v40 = *(unsigned int *)&md[4];
    v41 = v101;
    v26 = HIDWORD(v101);
    LODWORD(v28) = v102;
    swift_endAccess();
    *((_OWORD *)v29 + 7) = 0u;
    *((_OWORD *)v29 + 8) = 0u;
    *((_OWORD *)v29 + 5) = 0u;
    *((_OWORD *)v29 + 6) = 0u;
    *((_OWORD *)v29 + 3) = 0u;
    *((_OWORD *)v29 + 4) = 0u;
    *((_BYTE *)v29 + 144) = 1;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

void ArchiveWriter.append(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ArchiveWriter.append<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ArchiveWriter.rewind(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ArchiveWriter.didAppendBytes(ptr:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  const void *v7;

  if (a2 >= 1)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = __CFADD__(v4, a2);
    v6 = v4 + a2;
    if (v5)
    {
      __break(1u);
    }
    else
    {
      v7 = (const void *)result;
      *(_QWORD *)(v2 + 40) = v6;
      swift_beginAccess();
      if ((*(_BYTE *)(v2 + 144) & 1) != 0)
        return swift_endAccess();
      if (v7)
      {
        if (!HIDWORD(a2))
        {
          CC_SHA1_Update((CC_SHA1_CTX *)(v2 + 48), v7, a2);
          return swift_endAccess();
        }
LABEL_11:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t ArchiveWriter.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ArchiveWriter.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t FileArchiveWriter.__allocating_init(file:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file) = a1;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 136) = 0;
  v4 = MEMORY[0x24BEE4B00];
  *(_BYTE *)(v2 + 144) = 1;
  *(_QWORD *)(v2 + 152) = v4;
  v5 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v6 = one-time initialization token for archiving;
  v7 = a1;
  if (v6 != -1)
    swift_once();
  v8 = v2 + v5;
  v9 = type metadata accessor for OSSignposter();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v10, v9);

  return v2;
}

uint64_t FileArchiveWriter.init(file:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file) = a1;
  *(_BYTE *)(v1 + 16) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
  v3 = MEMORY[0x24BEE4B00];
  *(_BYTE *)(v1 + 144) = 1;
  *(_QWORD *)(v1 + 152) = v3;
  v4 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v5 = one-time initialization token for archiving;
  v6 = a1;
  if (v5 != -1)
    swift_once();
  v7 = type metadata accessor for OSSignposter();
  v8 = __swift_project_value_buffer(v7, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v1 + v4, v8, v7);

  return v1;
}

uint64_t FileArchiveWriter.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  URL.path.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v4 = open(_:_:_:)();
  swift_release();
  if ((v4 & 0x80000000) != 0)
  {
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    *(_QWORD *)v13 = 0;
    *(_BYTE *)(v13 + 8) = 1;
    swift_willThrow();
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1578]), sel_initWithFileDescriptor_closeOnDealloc_, v4, 1);
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file) = v5;
    *(_BYTE *)(v2 + 16) = 0;
    v6 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v2 + 32) = v6;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_QWORD *)(v2 + 136) = 0;
    *(_BYTE *)(v2 + 144) = 1;
    *(_QWORD *)(v2 + 152) = MEMORY[0x24BEE4B00];
    v7 = v2 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
    v8 = one-time initialization token for archiving;
    v9 = v5;
    if (v8 != -1)
      swift_once();
    v10 = type metadata accessor for OSSignposter();
    v11 = __swift_project_value_buffer(v10, (uint64_t)static Signpost.archiving);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v11, v10);

    v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FileArchiveWriter.finalize()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    ArchiveWriter.finalize()();
    if (!v1)
    {
      v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file);
      v6[0] = 0;
      if (objc_msgSend(v2, sel_closeAndReturnError_, v6))
      {
        v3 = v6[0];
      }
      else
      {
        v4 = v6[0];
        v5 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

void FileArchiveWriter.append(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id FileArchiveWriter.appendBytes(_:size:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  int v6;
  int64_t v7;
  char *v8;
  ssize_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  result = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file), sel_fileDescriptor);
  if (a2 >= 1)
  {
    v6 = (int)result;
    v7 = a2;
    v8 = a1;
    do
    {
      while (1)
      {
        v9 = write(v6, v8, v7);
        if ((v9 & 0x8000000000000000) == 0)
          break;
        if (MEMORY[0x23B7C5764]() != 35)
        {
          v10 = (int)MEMORY[0x23B7C5764]();
          lazy protocol witness table accessor for type Error and conformance Error();
          swift_allocError();
          *(_QWORD *)v11 = v10;
          *(_BYTE *)(v11 + 8) = 0;
          return (id)swift_willThrow();
        }
      }
      v7 -= v9;
      v8 += v9;
    }
    while (v7 > 0);
    v12 = *(_QWORD *)(v2 + 40);
    v13 = __CFADD__(v12, a2);
    v14 = v12 + a2;
    if (v13)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v2 + 40) = v14;
      swift_beginAccess();
      if (*(_BYTE *)(v2 + 144) == 1)
        return (id)swift_endAccess();
      if (!HIDWORD(a2))
      {
        CC_SHA1_Update((CC_SHA1_CTX *)(v2 + 48), a1, a2);
        return (id)swift_endAccess();
      }
    }
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void FileArchiveWriter.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;

  if (a2)
  {
    v5 = (char *)UnsafeBufferPointer.baseAddress.getter();
    if (v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72);
      if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
      {
        FileArchiveWriter.appendBytes(_:size:)(v5, a2 * v6);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FileArchiveWriter.rewind(to:)(Swift::UInt64 to)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file);
  v6[0] = 0;
  if (objc_msgSend(v3, sel_truncateAtOffset_error_, to, v6))
  {
    v4 = v6[0];
  }
  else
  {
    v5 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void FileArchiveWriter.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FileArchiveWriter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FileArchiveWriter.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t FileArchiveWriter.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t FileArchiveWriter.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t DataArchiveWriter.finalizeData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  ArchiveWriter.finalize()();
  if (!v1)
  {
    v2 = v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data;
    swift_beginAccess();
    v0 = *(_QWORD *)v2;
    outlined copy of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  }
  return v0;
}

void DataArchiveWriter.append(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  __asm { BR              X10 }
}

uint64_t sub_235038B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  swift_retain();
  closure #1 in DataArchiveWriter.append(_:)((uint64_t)&v5, (uint64_t)&v5 + BYTE6(v3), v0);
  if (v1)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x235038D24);
  }
  return swift_release();
}

uint64_t closure #1 in DataArchiveWriter.append(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  const void *v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  if (result)
  {
    v3 = (const void *)result;
    v4 = a2 - result;
    if (a2 - result >= 1)
    {
      v6 = *(_QWORD *)(a3 + 40);
      v7 = __CFADD__(v6, v4);
      v8 = v6 + v4;
      if (v7)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(a3 + 40) = v8;
        swift_beginAccess();
        if ((*(_BYTE *)(a3 + 144) & 1) != 0)
          return swift_endAccess();
        if (!HIDWORD(v4))
        {
          CC_SHA1_Update((CC_SHA1_CTX *)(a3 + 48), v3, v4);
          return swift_endAccess();
        }
      }
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t DataArchiveWriter.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  swift_beginAccess();
  Data.append<A>(_:)();
  swift_endAccess();
  result = UnsafeBufferPointer.baseAddress.getter();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
    return ArchiveWriter.didAppendBytes(ptr:count:)(result, a2 * v6);
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataArchiveWriter.rewind(to:)(Swift::UInt64 to)
{
  uint64_t v1;
  uint64_t v2;

  if ((to & 0x8000000000000000) == 0)
  {
    v2 = v1 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data;
    swift_beginAccess();
    __asm { BR              X12 }
  }
  __break(1u);
  JUMPOUT(0x235038FE4);
}

uint64_t DataArchiveWriter.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = swift_allocObject();
  *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data) = xmmword_23527E880;
  *(_BYTE *)(v0 + 16) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_BYTE *)(v0 + 144) = 1;
  *(_QWORD *)(v0 + 152) = MEMORY[0x24BEE4B00];
  v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1)
    swift_once();
  v3 = type metadata accessor for OSSignposter();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

uint64_t DataArchiveWriter.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data) = xmmword_23527E880;
  *(_BYTE *)(v0 + 16) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_BYTE *)(v0 + 144) = 1;
  *(_QWORD *)(v0 + 152) = MEMORY[0x24BEE4B00];
  v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1)
    swift_once();
  v3 = type metadata accessor for OSSignposter();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

uint64_t DataArchiveWriter.__ivar_destroyer()
{
  uint64_t v0;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data + 8));
}

uint64_t DataArchiveWriter.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data + 8));
  return v0;
}

uint64_t DataArchiveWriter.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data + 8));
  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for readerKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveReader.readerKey);
}

uint64_t one-time initialization function for writerKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for CodingUserInfoKey?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE2CC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  v8 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  __break(1u);
  return result;
}

uint64_t static ArchiveReader.readerKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for readerKey, (uint64_t)static ArchiveReader.readerKey, a1);
}

uint64_t one-time initialization function for cacheKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveReader.cacheKey);
}

uint64_t static ArchiveReader.cacheKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for cacheKey, (uint64_t)static ArchiveReader.cacheKey, a1);
}

uint64_t one-time initialization function for namedImagesKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveReader.namedImagesKey);
}

uint64_t static ArchiveReader.namedImagesKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for namedImagesKey, (uint64_t)static ArchiveReader.namedImagesKey, a1);
}

uint64_t ArchiveReader.init(buffer:)(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (a2 < 1 || (a2 & 7) != 0)
    goto LABEL_5;
  if (a1)
  {
    v3 = a1 + a2;
    v4 = (_DWORD *)(a1 + a2 - 4);
    if ((unint64_t)v4 < a1)
    {
LABEL_5:
      lazy protocol witness table accessor for type Error and conformance Error();
      swift_allocError();
      v6 = 1;
LABEL_6:
      *(_QWORD *)v5 = v6;
      *(_BYTE *)(v5 + 8) = 1;
      swift_willThrow();
      type metadata accessor for ArchiveReader();
      swift_deallocPartialClassInstance();
      return (uint64_t)v2;
    }
    if (*v4 != -782886287)
    {
      lazy protocol witness table accessor for type Error and conformance Error();
      swift_allocError();
      v6 = 2;
      goto LABEL_6;
    }
    v8 = *(unsigned int *)(v3 - 8);
    v9 = -16 * v8;
    v10 = (uint64_t *)(v3 - 8 - 16 * v8);
    v11 = (char *)v10 - a1;
    if ((unint64_t)v10 < a1)
    {
      lazy protocol witness table accessor for type Error and conformance Error();
      swift_allocError();
      v6 = 3;
      goto LABEL_6;
    }
    if ((uint64_t)((uint64_t)v10 - a1) >= 0)
    {
      v2[2] = a1;
      v2[3] = a2;
      v2[4] = v10;
      v2[5] = v8;
      if ((_DWORD)v8)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = __CFADD__(v13, v12);
        v15 = v13 + v12;
        if (v14 || (unint64_t)v11 < v15)
        {
LABEL_19:
          lazy protocol witness table accessor for type Error and conformance Error();
          swift_allocError();
          *(_QWORD *)v19 = 4;
          *(_BYTE *)(v19 + 8) = 1;
          swift_willThrow();
          swift_release();
        }
        else
        {
          while (v9 != -16)
          {
            v17 = *(_QWORD *)(v3 + v9 + 8);
            v16 = *(_QWORD *)(v3 + v9 + 16);
            v14 = __CFADD__(v16, v17);
            v18 = v16 + v17;
            if (!v14)
            {
              v9 += 16;
              if ((unint64_t)v11 >= v18)
                continue;
            }
            goto LABEL_19;
          }
        }
      }
      return (uint64_t)v2;
    }
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ArchiveReader.startIndex.getter()
{
  return 0;
}

uint64_t ArchiveReader.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

void ArchiveReader.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD);
  uint64_t v15;

  v3 = type metadata accessor for Data.Deallocator();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t (**)())((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(v1 + 16);
  if (!v7)
    goto LABEL_10;
  v8 = (uint64_t *)(*(_QWORD *)(v1 + 32) + 16 * a1);
  v9 = *v8;
  if (*v8 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v8[1];
  swift_retain();
  if (v10 < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v11 = v7 + v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v1;
  *v6 = OptionalAnchorBox.__ivar_destroyer;
  v6[1] = (uint64_t (*)())v12;
  (*(void (**)(uint64_t (**)(), _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCDBA8], v3);
  Data.Deallocator._deallocator.getter();
  if (v10)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    specialized Data._Representation.init(_:count:)(v13, v10);
  }
  else
  {
    v14 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter();
    v14(v11, 0);
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t (**)(), uint64_t))(v4 + 8))(v6, v3);
}

uint64_t closure #1 in ArchiveReader.subscript.getter()
{
  return swift_release();
}

uint64_t ArchiveReader.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ArchiveReader.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance ArchiveReader@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(_QWORD *)(*(_QWORD *)v2 + 40))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ArchiveReader(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(_QWORD *)(*(_QWORD *)v1 + 40))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance ArchiveReader(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 40);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ArchiveReader(_QWORD *a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  ArchiveReader.subscript.getter(*a2);
  a1[2] = v3;
  a1[3] = v4;
  *a1 = v3;
  a1[1] = v4;
  return protocol witness for Collection.subscript.read in conformance ArchiveReader;
}

uint64_t protocol witness for Collection.subscript.read in conformance ArchiveReader(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for Collection.subscript.getter in conformance ArchiveReader@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *v2;
  v5 = *(_QWORD *)(*v2 + 40);
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = *a1;
  if (*a1 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v7 = a1[1];
  if (v5 >= v7)
  {
    *a2 = v6;
    a2[1] = v7;
    a2[2] = result;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance ArchiveReader(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ArchiveReader@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(_QWORD *)(*(_QWORD *)v3 + 40) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance ArchiveReader@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance ArchiveReader(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  if (v4 >= *a2)
  {
    v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5)
      return (uint64_t *)(v3 - v5);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance ArchiveReader@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result;
  if (*result < 0 || v3 >= *(_QWORD *)(*(_QWORD *)v2 + 40))
    __break(1u);
  else
    *a2 = v3 + 1;
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance ArchiveReader(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result;
  if (*result < 0 || v2 >= *(_QWORD *)(*(_QWORD *)v1 + 40))
    __break(1u);
  else
    *result = v2 + 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ArchiveReader(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchiveReader, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t *protocol witness for Sequence._copyToContiguousArray() in conformance ArchiveReader()
{
  uint64_t **v0;
  uint64_t *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ArchiveReader(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ArchiveReader()
{
  type metadata accessor for ArchiveReader();
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

void *FileArchiveReader.UnmapBuffer.__deallocating_deinit()
{
  uint64_t v0;
  void *result;

  result = *(void **)(v0 + 16);
  if (result)
  {
    munmap(result, *(_QWORD *)(v0 + 24));
    return (void *)swift_deallocClassInstance();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id FileArchiveReader.__allocating_init(file:)(void *a1)
{
  swift_allocObject();
  return FileArchiveReader.init(file:)(a1);
}

id FileArchiveReader.init(file:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id result;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSData v18;
  id v19[2];

  v3 = v1;
  v19[1] = *(id *)MEMORY[0x24BDAC8D0];
  swift_retain();
  v5 = (size_t)objc_msgSend(a1, sel_seekToEndOfFile);
  if ((v5 & 0x8000000000000000) != 0)
    __break(1u);
  v6 = (id)v5;
  if (v5 >= 0x8000)
    v7 = (uint64_t)mmap(0, v5, 1, 2, (int)objc_msgSend(a1, sel_fileDescriptor), 0);
  else
    v7 = MAP_FAILED.getter();
  v8 = (id)v7;
  result = (id)MAP_FAILED.getter();
  if (v8)
  {
    if (!result || v8 != result)
    {
      *(_QWORD *)(v3 + 48) = 0;
      type metadata accessor for FileArchiveReader.UnmapBuffer();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = v6;
      *(_QWORD *)(v3 + 56) = v10;
LABEL_9:
      swift_release();
      v3 = ArchiveReader.init(buffer:)((unint64_t)v8, (uint64_t)v6);

      return (id)v3;
    }
  }
  else if (result)
  {
    *(_QWORD *)(v3 + 48) = 0;
    __break(1u);
    goto LABEL_24;
  }
  v19[0] = 0;
  if (!objc_msgSend(a1, sel_seekToOffset_error_, 0, v19))
  {
    v14 = v19[0];
    swift_release();
    _convertNSErrorToError(_:)();

LABEL_15:
    swift_willThrow();

    goto LABEL_16;
  }
  v11 = v19[0];
  v12 = NSFileHandle.readToEnd()();
  if (v2)
  {

    swift_release();
LABEL_16:
    swift_deallocPartialClassInstance();
    return (id)v3;
  }
  v15 = v13;
  if (v13 >> 60 == 15)
  {
    swift_release();
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    *(_QWORD *)v16 = 5;
    *(_BYTE *)(v16 + 8) = 1;
    goto LABEL_15;
  }
  v17 = v12;
  v18.super.isa = Data._bridgeToObjectiveC()().super.isa;
  *(NSData *)(v3 + 48) = v18;
  v8 = -[objc_class bytes](objc_retainAutorelease(v18.super.isa), sel_bytes);
  result = *(id *)(v3 + 48);
  if (result)
  {
    v6 = objc_msgSend(result, sel_length);
    outlined consume of Data?(v17, v15);
    *(_QWORD *)(v3 + 56) = 0;
    goto LABEL_9;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t FileArchiveReader.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;

  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSFileHandle);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = (uint64_t)v6;
  v9 = v7;
  v10 = @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(v8);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  else
  {
    v11 = v10;
    swift_allocObject();
    v9 = (uint64_t)FileArchiveReader.init(file:)(v11);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return v9;
}

id @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  NSURL *v13;

  v13 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v13);
  v3 = v2;
  v12 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  v5 = v12;
  if (v4)
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t FileArchiveReader.__ivar_destroyer()
{
  uint64_t v0;

  return swift_release();
}

uint64_t FileArchiveReader.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t FileArchiveReader.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t DataArchiveReader.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSData v5;
  id v6;
  id v7;
  uint64_t v8;

  v4 = swift_allocObject();
  swift_retain();
  v5.super.isa = Data._bridgeToObjectiveC()().super.isa;
  *(NSData *)(v4 + 48) = v5;
  v6 = -[objc_class bytes](objc_retainAutorelease(v5.super.isa), sel_bytes);
  v7 = objc_msgSend(*(id *)(v4 + 48), sel_length);
  swift_release();
  v8 = ArchiveReader.init(buffer:)((unint64_t)v6, (uint64_t)v7);
  outlined consume of Data._Representation(a1, a2);
  return v8;
}

uint64_t DataArchiveReader.init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  NSData v5;
  id v6;
  id v7;
  uint64_t v8;

  swift_retain();
  v5.super.isa = Data._bridgeToObjectiveC()().super.isa;
  *(NSData *)(v2 + 48) = v5;
  v6 = -[objc_class bytes](objc_retainAutorelease(v5.super.isa), sel_bytes);
  v7 = objc_msgSend(*(id *)(v2 + 48), sel_length);
  swift_release();
  v8 = ArchiveReader.init(buffer:)((unint64_t)v6, (uint64_t)v7);
  outlined consume of Data._Representation(a1, a2);
  return v8;
}

void DataArchiveReader.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t DataArchiveReader.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DataArchiveReader.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void ArchiveWriter.withDataConsumer(do:)(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  CGDataConsumerRef v4;
  CGDataConsumerRef v5;
  id v6;
  id v7;
  CGDataConsumerCallbacks cbks;
  uint64_t info;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  info = v1;
  v10 = 0;
  cbks.putBytes = (CGDataConsumerPutBytesCallback)@objc closure #1 in closure #1 in ArchiveWriter.withDataConsumer(do:);
  cbks.releaseConsumer = 0;
  swift_retain();
  v4 = CGDataConsumerCreate(&info, &cbks);
  if (!v4)
    __break(1u);
  v5 = v4;
  a1();

  if (v2)
  {
    swift_release();

  }
  else
  {
    v6 = v10;
    if (v10)
    {
      v7 = v10;
      swift_willThrow();
      swift_release();

    }
    else
    {
      swift_release();
    }
  }
}

uint64_t closure #1 in closure #1 in ArchiveWriter.withDataConsumer(do:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, _QWORD);

  if (result)
  {
    v5 = *(void (**)(uint64_t, uint64_t, _QWORD))(**(_QWORD **)result + 160);
    swift_retain();
    v5(a2, a3, MEMORY[0x24BEE4260]);
    swift_release();
    return a3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = __DataStorage._bytes.getter();
  v8 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = v8 + v12;
  if (v8)
    v14 = v13;
  else
    v14 = 0;
  closure #1 in DataArchiveWriter.append(_:)(v8, v14, a4);
  return swift_release();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = __DataStorage._bytes.getter();
  v5 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_11;
  }
  result = __DataStorage._length.getter();
  if (!v5)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result >= v7)
    v8 = v7;
  else
    v8 = result;
  FileArchiveWriter.appendBytes(_:size:)(v5, v8);
  return swift_release();
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X11 }
}

_QWORD *sub_23503A5C4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data._Representation.init(_:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    type metadata accessor for Data.RangeReference();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      v5 = __DataStorage._length.getter();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = specialized Data.InlineData.init(_:)(v4, v8);
      swift_release();
      return v3;
    }
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized ArchiveWriter.addAttachment(hash:from:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  char v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  uint8_t *v26;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t result;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  char isUniquelyReferenced_nonNull_native;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  int v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  os_signpost_id_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  const char *v100;
  __int128 v101;
  uint64_t v102;
  unsigned __int8 md[8];
  uint64_t v104;
  int v105;
  CC_SHA1_CTX c;
  uint64_t v107;

  v99 = a4;
  v98 = a3;
  v107 = *MEMORY[0x24BDAC8D0];
  v90 = type metadata accessor for OSSignpostError();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v93 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignpostID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v81 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v81 - v15;
  v97 = *a1;
  v96 = a1[1];
  v17 = *((_DWORD *)a1 + 4);
  LODWORD(v100) = *((unsigned __int8 *)a1 + 20);
  v102 = a2;
  v18 = a2 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  static OSSignpostID.exclusive.getter();
  v92 = v18;
  v19 = OSSignposter.logHandle.getter();
  v20 = static os_signpost_type_t.begin.getter();
  v21 = OS_os_log.signpostsEnabled.getter();
  v94 = v10;
  v95 = v17;
  if ((v21 & 1) != 0)
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v22(v13, v16, v7);
    v23 = v7;
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_2349C4000, v19, v20, v25, "addAttachment", "", v24, 2u);
    v26 = v24;
    v7 = v23;
    MEMORY[0x23B7C9D54](v26, -1, -1);

    v27 = v22;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v23);
  }
  else
  {

    v27 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  }
  v28 = (unint64_t)v13;
  v27(v13, v16, v7);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v29 = OSSignpostIntervalState.init(id:isOpen:)();
  v91 = *(void (**)(char *, uint64_t))(v8 + 8);
  v91(v16, v7);
  v30 = v102;
  v31 = v101;
  if (!*(_QWORD *)(v102 + 40))
  {
    v35 = MEMORY[0x24BEE4260];
    v36 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v36[2] = 16;
    v30 = v102;
    v36[5] = 0;
    v36[4] = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)v30 + 160))(v36 + 4, 16, v35);
    if (v31)
      goto LABEL_10;
    swift_bridgeObjectRelease();
  }
  if ((_DWORD)v100)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    v101 = *(_OWORD *)&c.h0;
    v88 = *(_OWORD *)&c.h4;
    v87 = *(_OWORD *)&c.data[1];
    v86 = *(_OWORD *)&c.data[5];
    v85 = *(_OWORD *)&c.data[9];
    v32 = *(_QWORD *)&c.data[13];
    v33 = *(_QWORD *)&c.data[15];
    swift_beginAccess();
    *(_OWORD *)(v102 + 48) = v101;
    *(_OWORD *)(v102 + 64) = v88;
    *(_OWORD *)(v102 + 80) = v87;
    *(_OWORD *)(v102 + 96) = v86;
    *(_OWORD *)(v102 + 112) = v85;
    *(_QWORD *)(v102 + 128) = v32;
    v30 = v102;
    *(_QWORD *)(v102 + 136) = v33;
    *(_BYTE *)(v30 + 144) = 0;
  }
  v34 = *(char ***)(v30 + 40);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 152))(v98, v99);
  if (v31)
  {
    swift_release();
    return v7;
  }
  v37 = *(_QWORD *)(v30 + 40);
  v38 = v37 >= (unint64_t)v34;
  v39 = v37 - (_QWORD)v34;
  if (!v38)
  {
    __break(1u);
LABEL_40:
    v27 = (void (*)(char *, char *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    *(_QWORD *)v98 = v27;
LABEL_20:
    v50 = v99;
    v52 = *((_QWORD *)v27 + 2);
    v51 = *((_QWORD *)v27 + 3);
    if (v52 >= v51 >> 1)
    {
      v27 = (void (*)(char *, char *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v27);
      *(_QWORD *)v98 = v27;
    }
    *((_QWORD *)v27 + 2) = v52 + 1;
    v53 = (_QWORD *)((char *)v27 + 16 * v52);
    v53[4] = v30;
    v53[5] = v50;
    swift_endAccess();
    swift_beginAccess();
    v54 = *v34;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v34 = v54;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v54 + 2) + 1, 1, v54);
      *v34 = v54;
    }
    v56 = v97;
    v7 = v96;
    v57 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0;
    v59 = *((_QWORD *)v54 + 2);
    v58 = *((_QWORD *)v54 + 3);
    v60 = (int)v100;
    if (v59 >= v58 >> 1)
    {
      v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v54);
      v60 = (int)v100;
      v54 = v80;
      *v34 = v80;
    }
    *((_QWORD *)v54 + 2) = v59 + 1;
    v61 = &v54[20 * v59];
    *((_DWORD *)v61 + 8) = v56;
    *((_DWORD *)v61 + 9) = v60;
    *((_DWORD *)v61 + 10) = v7;
    *((_DWORD *)v61 + 11) = v28;
    *((_DWORD *)v61 + 12) = v95;
    swift_endAccess();
    if (v57 == v50)
    {
      v62 = v94;
      goto LABEL_33;
    }
    v62 = v94;
    if (v57 < v50)
      __break(1u);
    v63 = specialized Array.init(repeating:count:)(0, v57 - v50);
    v64 = v101;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v102 + 160))(v63 + 32, *(_QWORD *)(v63 + 16), MEMORY[0x24BEE4260]);
    if (!v64)
    {
      *(_QWORD *)&v101 = 0;
      swift_bridgeObjectRelease();
LABEL_33:
      v7 = *(_QWORD *)(*(_QWORD *)v98 + 16) - 1;
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v66);
      v67 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v68 = static os_signpost_type_t.end.getter();
      v69 = OS_os_log.signpostsEnabled.getter();
      v70 = v93;
      if ((v69 & 1) != 0)
      {
        LODWORD(v102) = v68;
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v71 = v89;
        v72 = v90;
        v73 = v50;
        if ((*(unsigned int (**)(char *, uint64_t))(v89 + 88))(v70, v90) == *MEMORY[0x24BEE7810])
        {
          v74 = 0;
          v100 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
          v100 = "index=%{name=index}ld size=%{xcode:size-in-bytes, name=size}llu";
          v74 = 2;
        }
        v75 = v82;
        v76 = v83;
        ((void (*)(char *, char *, uint64_t))v87)(v82, v62, v83);
        v77 = swift_slowAlloc();
        *(_BYTE *)v77 = 0;
        *(_BYTE *)(v77 + 1) = v74;
        *(_WORD *)(v77 + 2) = 2048;
        *(_QWORD *)md = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v77 + 12) = 2048;
        *(_QWORD *)md = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v78 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v67, (os_signpost_type_t)v102, v78, "addAttachment", v100, (uint8_t *)v77, 0x16u);
        MEMORY[0x23B7C9D54](v77, -1, -1);

        v79 = v91;
        v91(v62, v76);
        swift_release();
        v79(v75, v76);
      }
      else
      {

        v91(v62, v83);
        swift_release();
      }
      return v7;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  v82 = (char *)v28;
  v83 = v7;
  v84 = v29;
  v99 = v39;
  *(_QWORD *)&v88 = v34;
  if ((v100 & 1) == 0)
  {
    v41 = v97;
    v43 = v96;
    v28 = HIDWORD(v96);
    v42 = HIDWORD(v97);
    v44 = v95;
LABEL_17:
    v34 = (char **)(v30 + 32);
    swift_beginAccess();
    v45 = *(_QWORD *)(v30 + 32);
    v97 = v41;
    v100 = (const char *)v42;
    v96 = v43;
    v46 = specialized Collection<>.firstIndex(of:)(v41 | (v42 << 32), v43 | (v28 << 32), v44, v45);
    if ((v47 & 1) == 0)
    {
      v7 = v46;
      v48 = v88;
      (*(void (**)(_QWORD))(*(_QWORD *)v30 + 168))(v88);
      swift_release();
      *(_QWORD *)(v30 + 40) = v48;
      return v7;
    }
    v95 = v44;
    *(_QWORD *)&v87 = v27;
    v98 = v30 + 24;
    swift_beginAccess();
    v27 = *(void (**)(char *, char *, uint64_t))(v30 + 24);
    v49 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v30 + 24) = v27;
    v30 = v88;
    *(_QWORD *)&v101 = 0;
    if ((v49 & 1) != 0)
      goto LABEL_20;
    goto LABEL_40;
  }
  result = swift_beginAccess();
  if ((*(_BYTE *)(v30 + 144) & 1) == 0)
  {
    *(_QWORD *)md = 0;
    v104 = 0;
    v105 = 0;
    CC_SHA1_Final(md, (CC_SHA1_CTX *)(v30 + 48));
    v41 = *(unsigned int *)md;
    v42 = *(unsigned int *)&md[4];
    v43 = v104;
    v28 = HIDWORD(v104);
    v44 = v105;
    swift_endAccess();
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 128) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_BYTE *)(v30 + 144) = 1;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void type metadata accessor for (offset: UInt64, size: UInt64)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: UInt64, size: UInt64))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: UInt64, size: UInt64));
  }
}

uint64_t sub_23503B7C0()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for FileArchiveReader.UnmapBuffer()
{
  return objc_opt_self();
}

uint64_t lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (uint64_t (*)(uint64_t))type metadata accessor for ArchiveReader, (uint64_t)&protocol conformance descriptor for ArchiveReader);
}

{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (uint64_t (*)(uint64_t))type metadata accessor for ArchiveReader, (uint64_t)&protocol conformance descriptor for ArchiveReader);
}

uint64_t type metadata accessor for ArchiveReader()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ArchiveReader()
{
  return lazy protocol witness table accessor for type Slice<ArchiveReader> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<ArchiveReader> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader, MEMORY[0x24BEE4230]);
}

void type metadata accessor for Slice<ArchiveReader>(uint64_t a1)
{
  type metadata accessor for Slice<ArchiveReader>(a1, &lazy cache variable for type metadata for Slice<ArchiveReader>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
}

uint64_t base witness table accessor for Collection in ArchiveReader(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (uint64_t (*)(uint64_t))type metadata accessor for ArchiveReader, (uint64_t)&protocol conformance descriptor for ArchiveReader);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ArchiveReader()
{
  return lazy protocol witness table accessor for type Slice<ArchiveReader> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<ArchiveReader> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<ArchiveReader> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<ArchiveReader>(255);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Sequence in ArchiveReader(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (uint64_t (*)(uint64_t))type metadata accessor for ArchiveReader, (uint64_t)&protocol conformance descriptor for ArchiveReader);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in ArchiveReader()
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type Slice<ArchiveReader> and conformance Slice<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for Slice<ArchiveReader>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ArchiveReader()
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type IndexingIterator<ArchiveReader> and conformance IndexingIterator<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for IndexingIterator<ArchiveReader>, MEMORY[0x24BEE2C18]);
}

void type metadata accessor for IndexingIterator<ArchiveReader>(uint64_t a1)
{
  type metadata accessor for Slice<ArchiveReader>(a1, &lazy cache variable for type metadata for IndexingIterator<ArchiveReader>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
}

void type metadata accessor for Slice<ArchiveReader>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v6 = type metadata accessor for ArchiveReader();
    v8 = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, v7, (uint64_t (*)(uint64_t))type metadata accessor for ArchiveReader, (uint64_t)&protocol conformance descriptor for ArchiveReader);
    v9 = a3(a1, v6, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t ObjC metadata update function for ArchiveWriter()
{
  return type metadata accessor for ArchiveWriter(0);
}

uint64_t type metadata accessor for ArchiveWriter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, type metadata singleton initialization cache for ArchiveWriter);
}

uint64_t type metadata completion function for ArchiveWriter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ArchiveWriter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ArchiveWriter.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ArchiveWriter.finalize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ArchiveWriter.append(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ArchiveWriter.append<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t ObjC metadata update function for FileArchiveWriter()
{
  return type metadata accessor for FileArchiveWriter(0);
}

uint64_t type metadata accessor for FileArchiveWriter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for FileArchiveWriter);
}

uint64_t type metadata completion function for FileArchiveWriter()
{
  return type metadata completion function for FileArchiveWriter();
}

{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FileArchiveWriter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FileArchiveWriter.__allocating_init(file:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t ObjC metadata update function for DataArchiveWriter()
{
  return type metadata accessor for DataArchiveWriter(0);
}

uint64_t type metadata accessor for DataArchiveWriter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DataArchiveWriter);
}

uint64_t type metadata completion function for DataArchiveWriter()
{
  return type metadata completion function for FileArchiveWriter();
}

uint64_t method lookup function for ArchiveReader()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for FileArchiveReader()
{
  return objc_opt_self();
}

uint64_t method lookup function for FileArchiveReader()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FileArchiveReader.__allocating_init(file:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for DataArchiveReader()
{
  return objc_opt_self();
}

uint64_t method lookup function for DataArchiveReader()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DataArchiveReader.__allocating_init(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

_BYTE *specialized Data._Representation.init(_:)(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  Swift::UInt v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v28;
  uint64_t v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  void (*v32)(_BYTE *, uint64_t);
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  CC_LONG h4;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v48[4];
  int v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v52 = type metadata accessor for OSSignpostID();
  v53 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v51 = &v48[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v48[-v13];
  v15 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a3;
  *(_QWORD *)&into.state.h4 = v15;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a3 + 24);
  v16 = ProtobufEncoder.archiveWriter.getter();
  if (!v16)
  {
    swift_bridgeObjectRetain();
    v41 = specialized Data.init<A>(_:)(a4, a5);
    v43 = v42;
    ProtobufEncoder.dataField(_:_:)(2, v41, v42);
    return outlined consume of Data._Representation(v41, v43);
  }
  v17 = v16;
  v50 = a5;
  v54 = v5;
  *(_QWORD *)&c.h0 = a1;
  *(_QWORD *)&c.h2 = a2;
  v18 = lazy protocol witness table accessor for type Image.Location.BundlePath and conformance Image.Location.BundlePath();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  v19 = (uint64_t *)(v17 + 152);
  swift_beginAccess();
  v20 = *(_QWORD *)(v17 + 152);
  if (*(_QWORD *)(v20 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into), (v22 & 1) != 0))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)&into);
    lazy protocol witness table accessor for type Int and conformance Int();
    default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v24);
    static OSSignpostID.exclusive.getter();
    v25 = OSSignposter.logHandle.getter();
    v26 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v53 + 16);
      v28 = v51;
      v49 = v26;
      v29 = v52;
      v27(v51, v14, v52);
      v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v30 = 134217984;
      *(_QWORD *)&into.state.h0 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v31 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_2349C4000, v25, (os_signpost_type_t)v49, v31, "addAttachment.cacheHit", "index=%{name=index}ld", v30, 0xCu);
      MEMORY[0x23B7C9D54](v30, -1, -1);

      v32 = *(void (**)(_BYTE *, uint64_t))(v53 + 8);
      v32(v14, v29);
      v32(v28, v29);
    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v14, v52);
    }
  }
  else
  {
    v51 = (_BYTE *)v18;
    v52 = a1;
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)&into);
    v33 = v50;
    swift_bridgeObjectRetain();
    v34 = specialized Data.init<A>(_:)(a4, v33);
    v36 = v35;
    memset(&c, 0, sizeof(c));
    outlined copy of Data._Representation(v34, v35);
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v34, v36);
    h4 = c.h4;
    v38 = *(_QWORD *)&c.h0;
    v39 = *(_QWORD *)&c.h2;
    swift_beginAccess();
    v53 = specialized Collection<>.firstIndex(of:)(v38, v39, h4, *(_QWORD *)(v17 + 32));
    if ((v40 & 1) != 0)
    {
      *(_QWORD *)&into.state.h0 = v38;
      *(_QWORD *)&into.state.h2 = v39;
      into.state.h4 = h4;
      LOBYTE(into.state.Nl) = 0;
      outlined copy of Data._Representation(v34, v36);
      v45 = v54;
      v46 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&into, v17, v34, v36);
      outlined consume of Data._Representation(v34, v36);
      outlined consume of Data._Representation(v34, v36);
      v54 = v45;
      if (v45)
        return swift_release();
      v53 = v46;
    }
    else
    {
      outlined consume of Data._Representation(v34, v36);
    }
    v56 = v52;
    v57 = a2;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v55 = *v19;
    *v19 = 0x8000000000000000;
    v23 = v53;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v53, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
    *v19 = v55;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&into);
    swift_endAccess();
  }
  if ((v23 & 0x8000000000000000) != 0)
  {
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v23);
    return swift_release();
  }
  return result;
}

uint64_t specialized ArchiveWriter.addAttachment(hash:from:)(uint64_t *a1, uint64_t a2, void (*a3)(void), unint64_t a4)
{
  return specialized ArchiveWriter.addAttachment(hash:from:)(a1, a2, a3, a4);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  char v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  uint8_t *v26;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t result;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  char isUniquelyReferenced_nonNull_native;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  int v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  os_signpost_id_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  void (*v98)(void);
  unint64_t v99;
  const char *v100;
  __int128 v101;
  uint64_t v102;
  unsigned __int8 md[8];
  uint64_t v104;
  int v105;
  CC_SHA1_CTX c;
  uint64_t v107;

  v99 = a4;
  v98 = a3;
  v107 = *MEMORY[0x24BDAC8D0];
  v90 = type metadata accessor for OSSignpostError();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v93 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignpostID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v81 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v81 - v15;
  v97 = *a1;
  v96 = a1[1];
  v17 = *((_DWORD *)a1 + 4);
  LODWORD(v100) = *((unsigned __int8 *)a1 + 20);
  v102 = a2;
  v18 = a2 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  static OSSignpostID.exclusive.getter();
  v92 = v18;
  v19 = OSSignposter.logHandle.getter();
  v20 = static os_signpost_type_t.begin.getter();
  v21 = OS_os_log.signpostsEnabled.getter();
  v94 = v10;
  v95 = v17;
  if ((v21 & 1) != 0)
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v22(v13, v16, v7);
    v23 = v7;
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_2349C4000, v19, v20, v25, "addAttachment", "", v24, 2u);
    v26 = v24;
    v7 = v23;
    MEMORY[0x23B7C9D54](v26, -1, -1);

    v27 = v22;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v23);
  }
  else
  {

    v27 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  }
  v28 = (unint64_t)v13;
  v27(v13, v16, v7);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v29 = OSSignpostIntervalState.init(id:isOpen:)();
  v91 = *(void (**)(char *, uint64_t))(v8 + 8);
  v91(v16, v7);
  v30 = v102;
  v31 = v101;
  if (!*(_QWORD *)(v102 + 40))
  {
    v35 = MEMORY[0x24BEE4260];
    v36 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v36[2] = 16;
    v30 = v102;
    v36[5] = 0;
    v36[4] = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)v30 + 160))(v36 + 4, 16, v35);
    if (v31)
      goto LABEL_10;
    swift_bridgeObjectRelease();
  }
  if ((_DWORD)v100)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    v101 = *(_OWORD *)&c.h0;
    v88 = *(_OWORD *)&c.h4;
    v87 = *(_OWORD *)&c.data[1];
    v86 = *(_OWORD *)&c.data[5];
    v85 = *(_OWORD *)&c.data[9];
    v32 = *(_QWORD *)&c.data[13];
    v33 = *(_QWORD *)&c.data[15];
    swift_beginAccess();
    *(_OWORD *)(v102 + 48) = v101;
    *(_OWORD *)(v102 + 64) = v88;
    *(_OWORD *)(v102 + 80) = v87;
    *(_OWORD *)(v102 + 96) = v86;
    *(_OWORD *)(v102 + 112) = v85;
    *(_QWORD *)(v102 + 128) = v32;
    v30 = v102;
    *(_QWORD *)(v102 + 136) = v33;
    *(_BYTE *)(v30 + 144) = 0;
  }
  v34 = *(char ***)(v30 + 40);
  ArchiveWriter.withDataConsumer(do:)(v98);
  if (v31)
  {
    swift_release();
    return v7;
  }
  v37 = *(_QWORD *)(v30 + 40);
  v38 = v37 >= (unint64_t)v34;
  v39 = v37 - (_QWORD)v34;
  if (!v38)
  {
    __break(1u);
LABEL_40:
    v27 = (void (*)(char *, char *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    *(_QWORD *)v98 = v27;
LABEL_20:
    v50 = v99;
    v52 = *((_QWORD *)v27 + 2);
    v51 = *((_QWORD *)v27 + 3);
    if (v52 >= v51 >> 1)
    {
      v27 = (void (*)(char *, char *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v27);
      *(_QWORD *)v98 = v27;
    }
    *((_QWORD *)v27 + 2) = v52 + 1;
    v53 = (_QWORD *)((char *)v27 + 16 * v52);
    v53[4] = v30;
    v53[5] = v50;
    swift_endAccess();
    swift_beginAccess();
    v54 = *v34;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v34 = v54;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v54 + 2) + 1, 1, v54);
      *v34 = v54;
    }
    v56 = v97;
    v7 = v96;
    v57 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0;
    v59 = *((_QWORD *)v54 + 2);
    v58 = *((_QWORD *)v54 + 3);
    v60 = (int)v100;
    if (v59 >= v58 >> 1)
    {
      v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v54);
      v60 = (int)v100;
      v54 = v80;
      *v34 = v80;
    }
    *((_QWORD *)v54 + 2) = v59 + 1;
    v61 = &v54[20 * v59];
    *((_DWORD *)v61 + 8) = v56;
    *((_DWORD *)v61 + 9) = v60;
    *((_DWORD *)v61 + 10) = v7;
    *((_DWORD *)v61 + 11) = v28;
    *((_DWORD *)v61 + 12) = v95;
    swift_endAccess();
    if (v57 == v50)
    {
      v62 = v94;
      goto LABEL_33;
    }
    v62 = v94;
    if (v57 < v50)
      __break(1u);
    v63 = specialized Array.init(repeating:count:)(0, v57 - v50);
    v64 = v101;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v102 + 160))(v63 + 32, *(_QWORD *)(v63 + 16), MEMORY[0x24BEE4260]);
    if (!v64)
    {
      *(_QWORD *)&v101 = 0;
      swift_bridgeObjectRelease();
LABEL_33:
      v7 = *(_QWORD *)(*(_QWORD *)v98 + 16) - 1;
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v66);
      v67 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v68 = static os_signpost_type_t.end.getter();
      v69 = OS_os_log.signpostsEnabled.getter();
      v70 = v93;
      if ((v69 & 1) != 0)
      {
        LODWORD(v102) = v68;
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v71 = v89;
        v72 = v90;
        v73 = v50;
        if ((*(unsigned int (**)(char *, uint64_t))(v89 + 88))(v70, v90) == *MEMORY[0x24BEE7810])
        {
          v74 = 0;
          v100 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
          v100 = "index=%{name=index}ld size=%{xcode:size-in-bytes, name=size}llu";
          v74 = 2;
        }
        v75 = v82;
        v76 = v83;
        ((void (*)(char *, char *, uint64_t))v87)(v82, v62, v83);
        v77 = swift_slowAlloc();
        *(_BYTE *)v77 = 0;
        *(_BYTE *)(v77 + 1) = v74;
        *(_WORD *)(v77 + 2) = 2048;
        *(_QWORD *)md = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v77 + 12) = 2048;
        *(_QWORD *)md = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v78 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v67, (os_signpost_type_t)v102, v78, "addAttachment", v100, (uint8_t *)v77, 0x16u);
        MEMORY[0x23B7C9D54](v77, -1, -1);

        v79 = v91;
        v91(v62, v76);
        swift_release();
        v79(v75, v76);
      }
      else
      {

        v91(v62, v83);
        swift_release();
      }
      return v7;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  v82 = (char *)v28;
  v83 = v7;
  v84 = v29;
  v99 = v39;
  *(_QWORD *)&v88 = v34;
  if ((v100 & 1) == 0)
  {
    v41 = v97;
    v43 = v96;
    v28 = HIDWORD(v96);
    v42 = HIDWORD(v97);
    v44 = v95;
LABEL_17:
    v34 = (char **)(v30 + 32);
    swift_beginAccess();
    v45 = *(_QWORD *)(v30 + 32);
    v97 = v41;
    v100 = (const char *)v42;
    v96 = v43;
    v46 = specialized Collection<>.firstIndex(of:)(v41 | (v42 << 32), v43 | (v28 << 32), v44, v45);
    if ((v47 & 1) == 0)
    {
      v7 = v46;
      v48 = v88;
      (*(void (**)(_QWORD))(*(_QWORD *)v30 + 168))(v88);
      swift_release();
      *(_QWORD *)(v30 + 40) = v48;
      return v7;
    }
    v95 = v44;
    *(_QWORD *)&v87 = v27;
    v98 = (void (*)(void))(v30 + 24);
    swift_beginAccess();
    v27 = *(void (**)(char *, char *, uint64_t))(v30 + 24);
    v49 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v30 + 24) = v27;
    v30 = v88;
    *(_QWORD *)&v101 = 0;
    if ((v49 & 1) != 0)
      goto LABEL_20;
    goto LABEL_40;
  }
  result = swift_beginAccess();
  if ((*(_BYTE *)(v30 + 144) & 1) == 0)
  {
    *(_QWORD *)md = 0;
    v104 = 0;
    v105 = 0;
    CC_SHA1_Final(md, (CC_SHA1_CTX *)(v30 + 48));
    v41 = *(unsigned int *)md;
    v42 = *(unsigned int *)&md[4];
    v43 = v104;
    v28 = HIDWORD(v104);
    v44 = v105;
    swift_endAccess();
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 128) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_BYTE *)(v30 + 144) = 1;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

unint64_t type metadata accessor for ContiguousBytes()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ContiguousBytes;
  if (!lazy cache variable for type metadata for ContiguousBytes)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContiguousBytes);
  }
  return result;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for ContiguousBytes?, (uint64_t (*)(uint64_t))type metadata accessor for ContiguousBytes, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error;
  if (!lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableCGImage.Error, &type metadata for CodableCGImage.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error;
  if (!lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableCGImage.Error, &type metadata for CodableCGImage.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RBShader and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RBShader and conformance NSObject;
  if (!lazy protocol witness table cache variable for type RBShader and conformance NSObject)
  {
    v1 = type metadata accessor for CAPresentationModifier(255, &lazy cache variable for type metadata for RBShader);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RBShader and conformance NSObject);
  }
  return result;
}

uint64_t View.onChange<A>(of:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a6;
  v25 = a4;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _ValueActionModifier(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a5);
  v21 = &v20[*(int *)(v16 + 36)];
  *(_QWORD *)v21 = a2;
  *((_QWORD *)v21 + 1) = a3;
  View.modifier<A>(_:)(v20, v25, v16, v26);
  v22 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  swift_retain();
  return v22(v20, v16);
}

uint64_t type metadata accessor for _ValueActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ValueActionModifier);
}

uint64_t _ValueActionModifier.init(value:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueActionModifier.init(value:action:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, a6);
}

uint64_t _ValueActionModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ValueActionModifier.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ValueActionModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ValueActionModifier.action.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t _ValueActionModifier.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_ValueActionModifier.action.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ValueActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>, a7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8);
}

uint64_t type metadata accessor for ValueActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueActionDispatcher);
}

uint64_t ValueActionDispatcher.init(modifier:phase:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  int *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t Context;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t result;

  v9 = (int *)type metadata accessor for ValueActionDispatcher(0, a3, a4, a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(&a5[v9[10]], 1, 1, a3);
  *(_DWORD *)&a5[v9[11]] = 0;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v10 = (id)AGSubgraphGetCurrent();
    if (!v10)
      goto LABEL_8;
    v11 = v10;
    v12 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v12 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v14 = Context;
    v15 = &a5[v9[12]];
    swift_retain();

    swift_beginAccess();
    v16 = *(_DWORD *)(v14 + 64);
    result = swift_release();
    *(_DWORD *)v15 = v16;
    *(_QWORD *)(v15 + 4) = 0xFFFFFFFFLL;
    v15[12] = 0;
    *(_DWORD *)a5 = a1;
    *((_DWORD *)a5 + 1) = a2;
    return result;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static _ValueActionModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[12];
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v39 = a3;
  v40 = a4;
  v38 = a7;
  v55 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for _ValueActionModifier(255, a5, a6, a4);
  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ValueActionModifier<A>, v9);
  v12 = type metadata accessor for ValueActionDispatcher(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v26[-v14];
  v16 = *a1;
  v17 = *a2;
  v27 = *((_DWORD *)a2 + 2);
  v28 = a2[2];
  v18 = *((_DWORD *)a2 + 6);
  v29 = *((_DWORD *)a2 + 7);
  v30 = *((_DWORD *)a2 + 8);
  v31 = *((_DWORD *)a2 + 9);
  v32 = a2[5];
  v33 = a2[6];
  v34 = a2[7];
  v35 = *((_DWORD *)a2 + 16);
  v36 = a2[9];
  v37 = *((unsigned __int8 *)a2 + 80);
  if (one-time initialization token for v3 != -1)
    swift_once();
  v19 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v41 = v16;
      v42 = v17;
      v43 = v27;
      v44 = v28;
      v45 = v18;
      v46 = v29;
      v47 = v30;
      v48 = v31;
      v49 = v32;
      v50 = v33;
      v51 = v34;
      v52 = v35;
      v53 = v36;
      v54 = v37;
      return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v41, (uint64_t)&v42, v39, v40, v9, (uint64_t)&protocol witness table for _ValueActionModifier<A>);
    }
  }
  else if (static Semantics.forced < v19)
  {
    goto LABEL_7;
  }
  v21 = ValueActionDispatcher.init(modifier:phase:)(v16, v18, v9, v10, v15);
  v22 = MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)&v26[-16] = v12;
  *(_QWORD *)&v26[-8] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher<A>, v12, v22);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v26[-32], v12, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v25 = AGGraphSetFlags();
  v42 = v17;
  v43 = v27;
  v44 = v28;
  v45 = v18;
  v46 = v29;
  v47 = v30;
  v48 = v31;
  v49 = v32;
  v50 = v33;
  v51 = v34;
  v52 = v35;
  v53 = v36;
  v54 = v37;
  return ((uint64_t (*)(uint64_t, uint64_t *))v39)(v25, &v42);
}

uint64_t _ValueActionModifier.sendAction(old:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(uint64_t);
  uint64_t v20;

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - v7;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, v5, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v2, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a2) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v12, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v12, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v8, a2);
  }
  v18 = *(void (**)(uint64_t))&v16[*(int *)(a2 + 36)];
  swift_retain();
  v17(v16, a2);
  v18(v2);
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

Swift::Void __swiftcall ValueActionDispatcher.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, char *, uint64_t);
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67[2];
  char v68;

  v2 = v1;
  v3 = v0;
  v4 = *(_QWORD *)(v0 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v61 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)&v55 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v55 - v11;
  v13 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v59 = v15;
  v60 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v66 = (char *)&v55 - v17;
  v18 = *(_DWORD *)AGGraphGetValue() >> 1;
  v19 = *(int *)(v3 + 44);
  if (v18 != *(_DWORD *)(v2 + v19))
  {
    *(_DWORD *)(v2 + v19) = v18;
    v20 = v2 + *(int *)(v3 + 40);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, 1, 1, v4);
    v21 = v2 + *(int *)(v3 + 48);
    *(_QWORD *)(v21 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(v21 + 12) = 0;
  }
  Value = AGGraphGetValue();
  v65 = v13;
  v23 = v66;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v58(v66, Value, v4);
  v24 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v64 = (char *)(v2 + *(int *)(v3 + 40));
  v57 = v24;
  v25 = ((uint64_t (*)(char *))v24)(v12);
  MEMORY[0x24BDAC7A8](v25);
  v26 = *(_QWORD *)(v3 + 24);
  *(&v55 - 4) = v4;
  *(&v55 - 3) = v26;
  v62 = v26;
  *(&v55 - 2) = (uint64_t)v23;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ValueActionDispatcher.updateValue(), (uint64_t)(&v55 - 6), MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v27, (uint64_t)&v68);
  v28 = v12;
  v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v28, v5);
  if ((v68 & 1) != 0)
  {
    v56 = v29;
    v30 = v2 + *(int *)(v3 + 48);
    AGGraphClearUpdate();
    v31 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    if (*(_DWORD *)(v30 + 4) == v31)
    {
      v32 = *(_DWORD *)(v30 + 8);
      if (!v32 || (v33 = v6, v34 = v32 - 1, (*(_DWORD *)(v30 + 8) = v34) == 0))
      {
        v29 = v56;
        if ((*(_BYTE *)(v30 + 12) & 1) == 0)
        {
          v67[0] = 0;
          v67[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(44);
          v67[0] = 0;
          v67[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          strcpy((char *)v67, "onChange(of: ");
          HIWORD(v67[1]) = -4864;
          swift_getAssociatedTypeWitness();
          v35._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v36._countAndFlagsBits = 0x6E6F697463612029;
          v36._object = (void *)0xE800000000000000;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          v37._object = (void *)0x80000002352E12C0;
          v37._countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v37);
          specialized static Log.externalWarning(_:)(v67[0], v67[1]);
          v29 = v56;
          swift_bridgeObjectRelease();
          *(_BYTE *)(v30 + 12) = 1;
        }
        goto LABEL_17;
      }
    }
    else
    {
      *(_DWORD *)(v30 + 4) = v31;
      *(_DWORD *)(v30 + 8) = 2;
      v33 = v6;
    }
    v38 = v63;
    v39 = v57;
    v57(v63, v64, v5);
    v40 = v60;
    v58(v60, (uint64_t)v66, v4);
    v41 = v61;
    v39(v61, v38, v5);
    v42 = v65;
    v43 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    v44 = (v59 + *(unsigned __int8 *)(v33 + 80) + v43) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    v45 = swift_allocObject();
    v46 = v62;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v46;
    (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v45 + v43, v40, v4);
    (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v45 + v44, v41, v5);
    specialized static Update.begin()();
    v47 = swift_allocObject();
    *(_QWORD *)(v47 + 16) = partial apply for closure #2 in ValueActionDispatcher.updateValue();
    *(_QWORD *)(v47 + 24) = v45;
    v48 = one-time initialization token for actions;
    swift_retain();
    if (v48 != -1)
      swift_once();
    v49 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
    v51 = v49[2];
    v50 = v49[3];
    if (v51 >= v50 >> 1)
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, v49);
    v49[2] = v51 + 1;
    v52 = &v49[2 * v51];
    v52[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v52[5] = v47;
    static Update.actions = v49;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    v29 = v56;
    v56(v63, v5);
  }
LABEL_17:
  v53 = v64;
  v29(v64, v5);
  v54 = v65;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v53, v66, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v53, 0, 1, v4);
}

uint64_t closure #1 in ValueActionDispatcher.updateValue()@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, uint64_t, double);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t result;
  uint64_t v17;
  BOOL *v18;

  v18 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - v11;
  v13 = *(void (**)(uint64_t, uint64_t, double))(a2 + 24);
  v13(a1, a2, v10);
  ((void (*)(uint64_t, uint64_t))v13)(a1, a2);
  swift_getAssociatedConformanceWitness();
  v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, AssociatedTypeWitness);
  result = ((uint64_t (*)(char *, uint64_t))v15)(v12, AssociatedTypeWitness);
  *v18 = (v14 & 1) == 0;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ValueActionDispatcher<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t View.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t (*v34)();
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(char *, uint64_t, uint64_t);
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[5];

  v50 = a7;
  v52 = a2;
  v55 = a8;
  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v46 = v14;
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v16;
  v19 = type metadata accessor for _ValueActionModifier2(0, v18, v16, v17);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v43 - v21;
  v24 = type metadata accessor for ModifiedContent(0, a5, v19, v23);
  v25 = *(_QWORD *)(v24 - 8);
  v53 = v24;
  v54 = v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v45 = a1;
  v28 = a1;
  v30 = (char *)&v43 - v29;
  v43 = v27;
  ((void (*)(char *, uint64_t, uint64_t, double))v27)(v15, v28, a6, v26);
  v44 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v44(v22, v15, a6);
  v31 = &v22[*(int *)(v19 + 36)];
  v47 = a5;
  v48 = a3;
  *(_QWORD *)v31 = a3;
  *((_QWORD *)v31 + 1) = a4;
  v32 = v50;
  View.modifier<A>(_:)(v22, a5, v19, v50);
  v33 = *(void (**)(char *, uint64_t))(v20 + 8);
  v51 = a4;
  swift_retain();
  v33(v22, v19);
  v34 = 0;
  v35 = 0;
  if ((v52 & 1) != 0)
  {
    v43(v15, v45, a6);
    v36 = (*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v35 = (_QWORD *)swift_allocObject();
    v35[2] = v47;
    v35[3] = a6;
    v37 = v49;
    v35[4] = v32;
    v35[5] = v37;
    v38 = (char *)v35 + v36;
    v39 = v51;
    v35[6] = v48;
    v35[7] = v39;
    v44(v38, v15, a6);
    swift_retain();
    v34 = partial apply for closure #1 in View.onChange<A>(of:initial:_:);
  }
  v57[0] = v34;
  v57[1] = v35;
  v57[2] = 0;
  v57[3] = 0;
  v56[0] = v32;
  v56[1] = &protocol witness table for _ValueActionModifier2<A>;
  v40 = v53;
  v41 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v53, v56);
  View.modifier<A>(_:)(v57, v40, &type metadata for _AppearanceActionModifier, v41);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v34);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v30, v40);
}

uint64_t _ValueActionModifier2.init(value:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueActionModifier.init(value:action:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, a6);
}

uint64_t _ValueActionModifier.init(value:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  result = a6(0, a4, a5);
  v14 = (_QWORD *)(a7 + *(int *)(result + 36));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t View.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t (**v33)();
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[4];

  v42 = a4;
  v39 = a8;
  v41 = a7;
  v43 = a2;
  v45 = a9;
  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for _ValueActionModifier2(0, v17, v18, v16);
  v40 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v39 - v20;
  v23 = type metadata accessor for ModifiedContent(0, a5, v19, v22);
  v44 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v39 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, a6, v24);
  v27 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v27 + 2) = a5;
  *((_QWORD *)v27 + 3) = a6;
  v28 = v41;
  v29 = v39;
  *((_QWORD *)v27 + 4) = v41;
  *((_QWORD *)v27 + 5) = v29;
  v39 = a3;
  *((_QWORD *)v27 + 6) = a3;
  v30 = v42;
  *((_QWORD *)v27 + 7) = v42;
  v31 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v32 = v28;
  v31(v21, v15, a6);
  v33 = (uint64_t (**)())&v21[*(int *)(v19 + 36)];
  *v33 = partial apply for closure #1 in View.onChange<A>(of:initial:_:);
  v33[1] = v27;
  View.modifier<A>(_:)(v21, a5, v19, v32);
  v34 = *(void (**)(char *, uint64_t))(v40 + 8);
  swift_retain();
  v34(v21, v19);
  v35 = 0;
  v36 = 0;
  if ((v43 & 1) != 0)
  {
    swift_retain();
    v35 = v39;
    v36 = v30;
  }
  v47[0] = v35;
  v47[1] = v36;
  v47[2] = 0;
  v47[3] = 0;
  v46[0] = v32;
  v46[1] = &protocol witness table for _ValueActionModifier2<A>;
  v37 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v23, v46);
  View.modifier<A>(_:)(v47, v23, &type metadata for _AppearanceActionModifier, v37);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v35);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v26, v23);
}

uint64_t _ValueActionModifier2.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t (*_ValueActionModifier2.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ValueActionModifier2.action.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ValueActionModifier2.sendAction(old:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, double);
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v27 = a1;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - v7;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - v14;
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(char *, uint64_t, double))(v6 + 16);
  v26 = v23;
  v22(v8, v27, v19);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v27 = v3;
  v24(v12, v3, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a2) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v12, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v8, a2);
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, a2);
  (*(void (**)(char *))(v27 + *(int *)(a2 + 36)))(v21);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v16);
}

uint64_t static _ValueActionModifier2._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, (uint64_t)&protocol conformance descriptor for _ValueActionModifier2<A>, a7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t static _ValueActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t *);
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v36 = a4;
  v37 = a3;
  v35 = a9;
  v50 = *MEMORY[0x24BDAC8D0];
  v13 = a7(255, a5, a6);
  v14 = MEMORY[0x23B7C9C04](a8, v13);
  v16 = type metadata accessor for ValueActionDispatcher(0, v13, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v31 - v18;
  v20 = *a1;
  v21 = *a2;
  v22 = *((_DWORD *)a2 + 2);
  v23 = a2[2];
  v34 = *((_DWORD *)a2 + 20);
  v33 = *(_OWORD *)(a2 + 5);
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v33 + 1);
  *(_QWORD *)&v24 = a2[3];
  v25 = a2[4];
  v31 = v24;
  v32 = *(_OWORD *)(a2 + 7);
  v26 = a2[9];
  ValueActionDispatcher.init(modifier:phase:)(v20, v24, v13, v14, (char *)&v31 - v18);
  v39 = v16;
  v40 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher<A>, v16);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, a10, (uint64_t)v38, v16, MEMORY[0x24BEE4078], v27, MEMORY[0x24BEE40A8], v28);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v29 = AGGraphSetFlags();
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v31;
  v45 = v25;
  v46 = v33;
  v47 = v32;
  v48 = v26;
  v49 = v34;
  return v37(v29, &v41);
}

uint64_t static _ValueActionModifier2._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t *);
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v32 = a4;
  v33 = a3;
  v31 = a7;
  v47 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for _ValueActionModifier2(255, a5, a6, a4);
  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ValueActionModifier2<A>, v9);
  v12 = type metadata accessor for ValueActionDispatcher(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - v14;
  v16 = *a1;
  v17 = *a2;
  v18 = *((_DWORD *)a2 + 2);
  v19 = a2[2];
  v30 = *(_OWORD *)(a2 + 5);
  *((_QWORD *)&v20 + 1) = *((_QWORD *)&v30 + 1);
  v29 = a2[7];
  v28 = *((_DWORD *)a2 + 16);
  v27 = a2[9];
  *(_QWORD *)&v20 = a2[3];
  v21 = a2[4];
  v26 = v20;
  LOBYTE(a1) = *((_BYTE *)a2 + 80);
  ValueActionDispatcher.init(modifier:phase:)(v16, v20, v9, v10, (char *)&v26 - v14);
  v35 = v12;
  v36 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher<A>, v12);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v34, v12, MEMORY[0x24BEE4078], v22, MEMORY[0x24BEE40A8], v23);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v24 = AGGraphSetFlags();
  v37 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v26;
  v41 = v21;
  v42 = v30;
  v43 = v29;
  v44 = v28;
  v45 = v27;
  v46 = (char)a1;
  return v33(v24, &v37);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueActionModifier2<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueActionModifier2<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier2._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t View._transactionalOnChange<A>(of:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a6;
  v25 = a4;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _ValueActionModifier3(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a5);
  v21 = &v20[*(int *)(v16 + 36)];
  *(_QWORD *)v21 = a2;
  *((_QWORD *)v21 + 1) = a3;
  View.modifier<A>(_:)(v20, v25, v16, v26);
  v22 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  swift_retain();
  return v22(v20, v16);
}

uint64_t (*_ValueActionModifier3.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, uint64_t)@<X3>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = *(_QWORD *)(a3 + a2 - 16);
  v9 = *(_QWORD *)(a3 + a2 - 8);
  v10 = (uint64_t *)(a1 + *(int *)(a4(0, v8, v9) + 36));
  v12 = *v10;
  v11 = v10[1];
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v9;
  v13[4] = v12;
  v13[5] = v11;
  *a6 = a5;
  a6[1] = v13;
  return swift_retain();
}

uint64_t key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t result;

  v10 = *(_QWORD *)(a4 + a3 - 16);
  v11 = *(_QWORD *)(a4 + a3 - 8);
  v13 = *a1;
  v12 = a1[1];
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v10;
  v14[3] = v11;
  v14[4] = v13;
  v14[5] = v12;
  v15 = (_QWORD *)(a2 + *(int *)(a6(0, v10, v11) + 36));
  swift_retain();
  result = swift_release();
  *v15 = a7;
  v15[1] = v14;
  return result;
}

uint64_t _ValueActionModifier2.action.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t _ValueActionModifier2.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_ValueActionModifier3.action.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ValueActionModifier3._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t *);
  uint64_t v38;
  int v39;
  char v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  v36 = a4;
  v37 = a3;
  v35 = a7;
  v55 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - v12;
  v15 = type metadata accessor for ValueActionDispatcher3(0, a5, a6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (_DWORD *)((char *)&v28 - v18);
  v20 = *a1;
  v21 = *(_QWORD *)a2;
  v32 = *(_DWORD *)(a2 + 8);
  v31 = *(_QWORD *)(a2 + 16);
  LODWORD(a1) = *(_DWORD *)(a2 + 24);
  v33 = *(_DWORD *)(a2 + 36);
  v34 = *(_DWORD *)(a2 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a5 - 8) + 56))(v13, 1, 1, a5, v17);
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v44);
  v38 = v44;
  v39 = v45;
  v40 = v46;
  *(_QWORD *)&v22 = *(_QWORD *)(a2 + 28);
  v30 = v22;
  ValueActionDispatcher3.init(modifier:phase:transaction:oldValue:lastResetSeed:cycleDetector:)(v20, (int)a1, v22, (uint64_t)v13, 0, &v38, a5, a6, v19);
  v42 = v15;
  v43 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher3<A>, v15);
  type metadata accessor for Attribute<()>();
  v29 = *(_OWORD *)(a2 + 40);
  v28 = *(_OWORD *)(a2 + 56);
  v23 = *(_QWORD *)(a2 + 72);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v41, v15, MEMORY[0x24BEE4078], v24, MEMORY[0x24BEE40A8], v25);
  (*(void (**)(_DWORD *, uint64_t))(v16 + 8))(v19, v15);
  v26 = AGGraphSetFlags();
  v44 = v21;
  v45 = v32;
  v47 = v31;
  v48 = (int)a1;
  v49 = v30;
  v50 = v33;
  v51 = v29;
  v52 = v28;
  v53 = v23;
  v54 = v34;
  return v37(v26, &v44);
}

uint64_t ValueActionDispatcher3.init(modifier:phase:transaction:oldValue:lastResetSeed:cycleDetector:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _DWORD *a9@<X8>)
{
  int v13;
  char v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;

  v13 = *((_DWORD *)a6 + 2);
  v14 = *((_BYTE *)a6 + 12);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  v15 = (int *)type metadata accessor for ValueActionDispatcher3(0, a7, a8, a4);
  v16 = (char *)a9 + v15[11];
  v17 = type metadata accessor for Optional();
  v18 = *a6;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a4, v17);
  *(_DWORD *)((char *)a9 + v15[12]) = a5;
  v20 = (char *)a9 + v15[13];
  *(_QWORD *)v20 = v18;
  *((_DWORD *)v20 + 2) = v13;
  v20[12] = v14;
  return result;
}

uint64_t static _ValueActionModifier3._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t *);
  uint64_t v38;
  int v39;
  char v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v36 = a4;
  v37 = a3;
  v35 = a7;
  v56 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - v12;
  v15 = type metadata accessor for ValueActionDispatcher3(0, a5, a6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (_DWORD *)((char *)&v26 - v17);
  v19 = *a1;
  v20 = *(_QWORD *)a2;
  v28 = *(_DWORD *)(a2 + 8);
  v27 = *(_QWORD *)(a2 + 16);
  LODWORD(a1) = *(_DWORD *)(a2 + 24);
  v34 = *(_DWORD *)(a2 + 36);
  v33 = *(_OWORD *)(a2 + 40);
  v32 = *(_QWORD *)(a2 + 56);
  v31 = *(_DWORD *)(a2 + 64);
  v30 = *(_QWORD *)(a2 + 72);
  v29 = *(unsigned __int8 *)(a2 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v13, 1, 1, a5);
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v44);
  v38 = v44;
  v39 = v45;
  v40 = v46;
  *(_QWORD *)&v21 = *(_QWORD *)(a2 + 28);
  v26 = v21;
  ValueActionDispatcher3.init(modifier:phase:transaction:oldValue:lastResetSeed:cycleDetector:)(v19, (int)a1, v21, (uint64_t)v13, 0, &v38, a5, a6, v18);
  v42 = v15;
  v43 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher3<A>, v15);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v41, v15, MEMORY[0x24BEE4078], v22, MEMORY[0x24BEE40A8], v23);
  (*(void (**)(_DWORD *, uint64_t))(v16 + 8))(v18, v15);
  v24 = AGGraphSetFlags();
  v44 = v20;
  v45 = v28;
  v47 = v27;
  v48 = (int)a1;
  v49 = v26;
  v50 = v34;
  v51 = v33;
  v52 = v32;
  v53 = v31;
  v54 = v30;
  v55 = v29;
  return v37(v24, &v44);
}

uint64_t ValueActionDispatcher3.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for _ValueActionModifier3(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueActionModifier3<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier3._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueActionModifier3<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier3._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t ValueActionDispatcher3.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *);
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v61;
  void (*v62)(unint64_t, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75[2];

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v71 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v61 - v9;
  v11 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v65 = v13;
  v66 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v15 = *(_QWORD *)(a1 + 24);
  v68 = (char *)&v61 - v16;
  v69 = v15;
  v18 = type metadata accessor for _ValueActionModifier3(0, v4, v15, v17);
  v72 = *(_QWORD *)(v18 - 8);
  v73 = v18;
  v19 = *(_QWORD *)(v72 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v67 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v61 - v21;
  v24 = *(_DWORD *)AGGraphGetValue() >> 1;
  v25 = *(int *)(a1 + 48);
  v26 = *(_DWORD *)(v1 + v25);
  v74 = v22;
  if (v24 != v26)
  {
    *(_DWORD *)(v1 + v25) = v24;
    v27 = v1 + *(int *)(a1 + 44);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2 + *(int *)(a1 + 44), v5);
    v22 = v74;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v27, 1, 1, v4);
    v28 = v2 + *(int *)(a1 + 52);
    *(_QWORD *)(v28 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(v28 + 12) = 0;
  }
  ValueActionDispatcher3.modifier.getter(a1, v23, (uint64_t)v22);
  v29 = *(void (**)(char *))(v6 + 16);
  v70 = v2 + *(int *)(a1 + 44);
  v29(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v4) != 1)
  {
    v63 = v5;
    v64 = v6;
    v30 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v31 = v68;
    v30(v68, v10, v4);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
LABEL_6:
      (*(void (**)(char *, uint64_t))(v11 + 8))(v31, v4);
LABEL_20:
      v5 = v63;
      v6 = v64;
      goto LABEL_21;
    }
    v32 = v2 + *(int *)(a1 + 52);
    AGGraphClearUpdate();
    v33 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    if (*(_DWORD *)(v32 + 4) == v33)
    {
      v34 = *(_DWORD *)(v32 + 8);
      if (!v34 || (v35 = v34 - 1, (*(_DWORD *)(v32 + 8) = v35) == 0))
      {
        if ((*(_BYTE *)(v32 + 12) & 1) == 0)
        {
          v75[0] = 0;
          v75[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(44);
          v75[0] = 0;
          v75[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          strcpy((char *)v75, "onChange(of: ");
          HIWORD(v75[1]) = -4864;
          v36._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          v37._countAndFlagsBits = 0x6E6F697463612029;
          v37._object = (void *)0xE800000000000000;
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          v38._object = (void *)0x80000002352E12C0;
          v38._countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v38);
          specialized static Log.externalWarning(_:)(v75[0], v75[1]);
          swift_bridgeObjectRelease();
          *(_BYTE *)(v32 + 12) = 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      *(_DWORD *)(v32 + 4) = v33;
      *(_DWORD *)(v32 + 8) = 2;
    }
    AGGraphClearUpdate();
    closure #1 in ValueActionDispatcher3.updateValue()(v4, v69, v39, v75);
    AGGraphSetUpdate();
    v40 = v31;
    v41 = v75[0];
    v42 = v72;
    v43 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
    v62 = (void (*)(unint64_t, char *, uint64_t))v30;
    v44 = v73;
    v43(v67, v74, v73);
    v45 = v66;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v40, v4);
    v46 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    v47 = (v19 + *(unsigned __int8 *)(v11 + 80) + v46) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v48 = (v65 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = swift_allocObject();
    v50 = v69;
    *(_QWORD *)(v49 + 16) = v4;
    *(_QWORD *)(v49 + 24) = v50;
    (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v49 + v46, v67, v44);
    v62(v49 + v47, v45, v4);
    *(_QWORD *)(v49 + v48) = v41;
    swift_retain();
    specialized static Update.begin()();
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = partial apply for closure #2 in ValueActionDispatcher3.updateValue();
    *(_QWORD *)(v51 + 24) = v49;
    v52 = one-time initialization token for actions;
    swift_retain();
    if (v52 != -1)
      swift_once();
    v53 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
    v55 = v53[2];
    v54 = v53[3];
    if (v55 >= v54 >> 1)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
    v53[2] = v55 + 1;
    v56 = &v53[2 * v55];
    v56[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    v56[5] = v51;
    static Update.actions = v53;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v68, v4);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
LABEL_21:
  v58 = v70;
  v57 = v71;
  v59 = v74;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v71, v74, v4);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v59, v73);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v57, 0, 1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 40))(v58, v57, v5);
}

uint64_t closure #1 in ValueActionDispatcher3.updateValue()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  type metadata accessor for ValueActionDispatcher3(0, a1, a2, a3);
  *a4 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ValueActionDispatcher3<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher3<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t partial apply for closure #1 in ValueActionDispatcher.updateValue()@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ValueActionDispatcher.updateValue()(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23503FE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  v6 = (v3 + v4 + v5) & ~v5;
  v7 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v7(v0 + v3, v1);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v6, 1, v1))
    v7(v0 + v6, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ValueActionDispatcher.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v0 + ((v4 + v5 + v6) & ~v6), v1, v2);
}

uint64_t sub_23503FF94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for _ValueActionModifier2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ValueActionModifier2);
}

uint64_t sub_23503FFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onChange<A>(of:initial:_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 48))(v0 + ((v1 + 64) & ~v1), v0 + ((v1 + 64) & ~v1));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_235040070()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for _ValueActionModifier3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ValueActionModifier3);
}

uint64_t type metadata accessor for ValueActionDispatcher3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueActionDispatcher3);
}

void base witness table accessor for _AttributeBody in ValueActionDispatcher<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for ValueActionDispatcher<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_235040108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ()), a4);
}

uint64_t sub_235040134(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_25066E9C8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ()));
}

uint64_t sub_235040160()
{
  return 16;
}

__n128 sub_23504016C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_235040178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ()), a4);
}

uint64_t sub_2350401A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_25066E978, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ()));
}

uint64_t sub_2350401D0()
{
  return 16;
}

__n128 sub_2350401DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2350401E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @guaranteed Transaction) -> (), a4);
}

uint64_t sub_235040214(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_25066E928, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @in_guaranteed Transaction) -> (@out ()));
}

uint64_t sub_235040240()
{
  return 16;
}

__n128 sub_23504024C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of ValueActionModifierProtocol.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ValueActionModifierProtocol.sendAction(old:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata completion function for ValueActionDispatcher()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueActionDispatcher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  void *v16;
  const void *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 3;
  v10 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7
    || v10 != 0
    || ((((v8 + 3 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 13 > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = (void *)(((unint64_t)v14 + v7 + 4) & ~v7);
    v17 = (const void *)(((unint64_t)v15 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
    }
    v18 = (_DWORD *)(((unint64_t)v16 + v9) & 0xFFFFFFFFFFFFFCLL);
    v19 = (_DWORD *)(((unint64_t)v17 + v9) & 0xFFFFFFFFFFFFFFFCLL);
    *v18 = *v19;
    v20 = (uint64_t *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v21 = *v20;
    v22 = (_QWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *(_QWORD *)((char *)v22 + 5) = *(uint64_t *)((char *)v20 + 5);
    *v22 = v21;
  }
  return v3;
}

_DWORD *initializeWithCopy for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = (_DWORD *)(((unint64_t)v9 + v14 + 3) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v10 + v14 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (uint64_t *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = *v17;
  v19 = (_QWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(_QWORD *)((char *)v19 + 5) = *(uint64_t *)((char *)v17 + 5);
  *v19 = v18;
  return a1;
}

_DWORD *assignWithCopy for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = (_DWORD *)(((unint64_t)v9 + v15 + 3) & 0xFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)(((unint64_t)v10 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = ((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_DWORD *)(v18 + 4) = *(_DWORD *)(v19 + 4);
  *(_DWORD *)(v18 + 8) = *(_DWORD *)(v19 + 8);
  *(_BYTE *)(v18 + 12) = *(_BYTE *)(v19 + 12);
  return a1;
}

_DWORD *initializeWithTake for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = (_DWORD *)(((unint64_t)v9 + v14 + 3) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v10 + v14 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (uint64_t *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = *v17;
  v19 = (_QWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(_QWORD *)((char *)v19 + 5) = *(uint64_t *)((char *)v17 + 5);
  *v19 = v18;
  return a1;
}

_DWORD *assignWithTake for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = (_DWORD *)(((unint64_t)v9 + v15 + 3) & 0xFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)(((unint64_t)v10 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = ((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_DWORD *)(v18 + 4) = *(_DWORD *)(v19 + 4);
  *(_DWORD *)(v18 + 8) = *(_DWORD *)(v19 + 8);
  *(_BYTE *)(v18 + 12) = *(_BYTE *)(v19 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueActionDispatcher(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 3;
  if (v7 < a2)
  {
    v11 = ((((v10 + ((v9 + 8) & ~(_DWORD)v9)) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 13;
    v12 = (a2 - v7 + 255) >> (8 * v11);
    if (v11 < 4)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X17 }
  }
  v16 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v6 < 0xFE)
  {
    v19 = *(unsigned __int8 *)(((((v10 + v16) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL) + 0xC);
    if (v19 >= 2)
      return ((v19 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v16);
  if (v17 >= 2)
    return v17 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ValueActionDispatcher(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((((v11 + 3 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + 13;
  if (v10 < a3)
  {
    v13 = (a3 - v10 + 255) >> (8 * v12);
    if (v12 <= 3)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    if (v12 >= 4)
      v16 = ~v10 + a2;
    else
      v16 = (~(_BYTE)v10 + a2);
    bzero(a1, v12);
    if ((_DWORD)v12 == 1)
      *a1 = v16;
    else
      *(_DWORD *)a1 = v16;
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_235040C40()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235040D44);
}

void sub_235040C48(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235040C50);
  JUMPOUT(0x235040D44);
}

void sub_235040CCC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x235040D44);
}

void sub_235040CF8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235040D44);
}

void sub_235040D00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235040D44);
}

void sub_235040D08(unsigned int a1@<W1>, size_t a2@<X8>)
{
  void *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (a1)
  {
    v2 = (void *)((((v7 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 4) & v4);
    if (v5 < 0xFE)
      JUMPOUT(0x235040CD4);
    if (v5 >= a1)
      JUMPOUT(0x235040D14);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v2, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x235040D44);
}

void sub_235040D58()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x235040D44);
}

void sub_235040D68()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x235040D44);
}

void sub_235040D70()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x235040D44);
}

uint64_t type metadata completion function for _ValueActionModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ValueActionModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235040E70 + 4 * byte_2352BF893[v10]))();
  }
}

void storeEnumTagSinglePayload for _ValueActionModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_235040FE8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235041060);
}

void sub_235040FF0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235040FF8);
  JUMPOUT(0x235041060);
}

void sub_235041038()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235041060);
}

void sub_235041040()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235041060);
}

uint64_t sub_235041048(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x235041060);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x23504105CLL);
    JUMPOUT(0x235041054);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_235041078(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, (uint64_t)&protocol witness table for _ValueActionModifier<A>);
}

uint64_t sub_23504108C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _ValueActionModifier2(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10 = type metadata accessor for ModifiedContent(255, v8, (uint64_t)&type metadata for _AppearanceActionModifier, v9);
  v13[0] = v5;
  v13[1] = &protocol witness table for _ValueActionModifier2<A>;
  v12[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v13);
  v12[1] = &protocol witness table for _AppearanceActionModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v10, v12);
}

uint64_t sub_235041130(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier3, (uint64_t)&protocol witness table for _ValueActionModifier3<A>);
}

uint64_t type metadata completion function for ValueActionDispatcher3()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueActionDispatcher3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  const void *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 3;
  v10 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7
    || v10 != 0
    || ((((v8 + 3 + ((v7 + 12) & ~v7)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 13 > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v16 = *v17;
    v18 = (void *)(((unint64_t)v16 + v7 + 4) & ~v7);
    v19 = (const void *)(((unint64_t)v17 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v19, 1, v4))
    {
      memcpy(v18, v19, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v18, v19, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
    }
    v20 = (_DWORD *)(((unint64_t)v18 + v9) & 0xFFFFFFFFFFFFFCLL);
    v21 = (_DWORD *)(((unint64_t)v19 + v9) & 0xFFFFFFFFFFFFFFFCLL);
    *v20 = *v21;
    v22 = (uint64_t *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v23 = *v22;
    v24 = (_QWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *(_QWORD *)((char *)v24 + 5) = *(uint64_t *)((char *)v22 + 5);
    *v24 = v23;
  }
  return v3;
}

uint64_t destroy for ValueActionDispatcher3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_DWORD *initializeWithCopy for ValueActionDispatcher3(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 4) & ~v10);
  v12 = (const void *)(((unint64_t)v7 + v10 + 4) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = (_DWORD *)(((unint64_t)v11 + v16 + 3) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v12 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (uint64_t *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v20 = *v19;
  v21 = (_QWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(_QWORD *)((char *)v21 + 5) = *(uint64_t *)((char *)v19 + 5);
  *v21 = v20;
  return a1;
}

_DWORD *assignWithCopy for ValueActionDispatcher3(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 4) & ~v10);
  v12 = (void *)(((unint64_t)v7 + v10 + 4) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = (_DWORD *)(((unint64_t)v11 + v17 + 3) & 0xFFFFFFFFFFFFFCLL);
  v19 = (_DWORD *)(((unint64_t)v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_DWORD *)(v20 + 4) = *(_DWORD *)(v21 + 4);
  *(_DWORD *)(v20 + 8) = *(_DWORD *)(v21 + 8);
  *(_BYTE *)(v20 + 12) = *(_BYTE *)(v21 + 12);
  return a1;
}

_DWORD *initializeWithTake for ValueActionDispatcher3(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 4) & ~v10);
  v12 = (const void *)(((unint64_t)v7 + v10 + 4) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = (_DWORD *)(((unint64_t)v11 + v16 + 3) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v12 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (uint64_t *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v20 = *v19;
  v21 = (_QWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(_QWORD *)((char *)v21 + 5) = *(uint64_t *)((char *)v19 + 5);
  *v21 = v20;
  return a1;
}

_DWORD *assignWithTake for ValueActionDispatcher3(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 4) & ~v10);
  v12 = (void *)(((unint64_t)v7 + v10 + 4) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = (_DWORD *)(((unint64_t)v11 + v17 + 3) & 0xFFFFFFFFFFFFFCLL);
  v19 = (_DWORD *)(((unint64_t)v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_DWORD *)(v20 + 4) = *(_DWORD *)(v21 + 4);
  *(_DWORD *)(v20 + 8) = *(_DWORD *)(v21 + 8);
  *(_BYTE *)(v20 + 12) = *(_BYTE *)(v21 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueActionDispatcher3(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 3;
  if (v7 < a2)
  {
    v11 = ((((v10 + ((v9 + 12) & ~(_DWORD)v9)) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 13;
    v12 = (a2 - v7 + 255) >> (8 * v11);
    if (v11 < 4)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X17 }
  }
  v16 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v6 < 0xFE)
  {
    v19 = *(unsigned __int8 *)(((((v10 + v16) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL) + 0xC);
    if (v19 >= 2)
      return ((v19 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v16);
  if (v17 >= 2)
    return v17 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ValueActionDispatcher3(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((((v11 + 3 + ((*(unsigned __int8 *)(v7 + 80) + 12) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + 13;
  if (v10 < a3)
  {
    v13 = (a3 - v10 + 255) >> (8 * v12);
    if (v12 <= 3)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    if (v12 >= 4)
      v16 = ~v10 + a2;
    else
      v16 = (~(_BYTE)v10 + a2);
    bzero(a1, v12);
    if ((_DWORD)v12 == 1)
      *a1 = v16;
    else
      *(_DWORD *)a1 = v16;
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_235041BE8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235041CF4);
}

void sub_235041BF0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235041BF8);
  JUMPOUT(0x235041CF4);
}

void sub_235041C7C()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x235041CF4);
}

void sub_235041CA8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235041CF4);
}

void sub_235041CB0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235041CF4);
}

void sub_235041CB8(unsigned int a1@<W1>, size_t a2@<X8>)
{
  void *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (a1)
  {
    v2 = (void *)((((((v7 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 4) & v4);
    if (v5 < 0xFE)
      JUMPOUT(0x235041C84);
    if (v5 >= a1)
      JUMPOUT(0x235041CC4);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v2, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x235041CF4);
}

void sub_235041D08()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x235041CF4);
}

void sub_235041D18()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x235041CF4);
}

void sub_235041D20()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x235041CF4);
}

uint64_t instantiation function for generic protocol witness table for ValueActionDispatcher3<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueActionDispatcher3<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ValueActionDispatcher3<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_235041D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t, uint64_t);

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(type metadata accessor for _ValueActionModifier3(0, v5, *(_QWORD *)(v4 + 24), a4) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = (v7 + *(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
  v10(v4 + v7, v5);
  swift_release();
  v10(v4 + v9, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ValueActionDispatcher3.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for _ValueActionModifier3(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return (*(uint64_t (**)(unint64_t))(v4 + v8 + *(int *)(v6 + 36)))(v4+ ((v8 + *(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)));
}

uint64_t sub_235041EBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @in_guaranteed Transaction) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t *);
  uint64_t v6;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v3 + 32);
  v6 = a3;
  return v4(a1, a2, &v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @guaranteed Transaction) -> ()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 32))(a1, a2, *a3);
}

uint64_t AnimationState.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _OWORD v11[2];
  _OWORD v12[2];

  v7 = *v4;
  if (!*(_QWORD *)(v7 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v9 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)v11);
  outlined init with take of Any(v11, v12);
  outlined init with take of Any(v12, v11);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

uint64_t AnimationState.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized AnimationState.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

unint64_t AnimationState.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

void (*AnimationState.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  v11[2] = a4;
  *v11 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[5] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[7] = malloc(v14);
  v15 = malloc(v14);
  v11[8] = v15;
  AnimationState.subscript.getter((uint64_t)v15, v16, a4, a5);
  return AnimationState.subscript.modify;
}

void AnimationState.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[7];
  v4 = (void *)(*a1)[8];
  v5 = (*a1)[5];
  v6 = (*a1)[6];
  v8 = (*a1)[1];
  v7 = (*a1)[2];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[7], v4, v5);
    specialized AnimationState.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized AnimationState.subscript.setter((*a1)[8], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t specialized AnimationState.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, a1, AssociatedTypeWitness);
  return specialized Dictionary.subscript.setter((uint64_t)v9, a4);
}

uint64_t type metadata accessor for AnimationState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimationState);
}

uint64_t dispatch thunk of static AnimationStateKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t Transaction.animation.setter(uint64_t a1)
{
  uint64_t *v1;

  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release_n();
  return swift_release();
}

uint64_t Transaction.isAnimated.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (!v1)
  {
    swift_release();
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v1 + 72);
  swift_release();
  if (!v2)
  {
LABEL_5:
    v5 = 0;
    return v5 & 1;
  }
  v3 = swift_retain();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_release();
  v5 = v4 ^ 1;
  return v5 & 1;
}

uint64_t Transaction.animationIgnoringTransitionPhase.getter(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  v2 = swift_retain();
  v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  v4 = swift_release();
  if ((v3 & 1) != 0)
  {
    v11 = 0;
    MEMORY[0x24BDAC7A8](v4);
    v10[2] = &v11;
    specialized Transaction.forEach<A>(keyType:_:)((uint64_t)partial apply for closure #1 in Transaction.animationIgnoringTransitionPhase.getter, (uint64_t)v10, a1, v5);
    return v11;
  }
  else
  {
    v7 = swift_retain();
    v8 = specialized find<A>(_:key:)(v7);
    if (v8)
    {
      v6 = *(_QWORD *)(v8 + 72);
      swift_retain();
    }
    else
    {
      v6 = 0;
    }
    swift_release();
  }
  return v6;
}

uint64_t Transaction.disablesAnimations.getter()
{
  uint64_t v0;
  char v1;

  v0 = swift_retain();
  v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1 & 1;
}

uint64_t Transaction.animation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 72);
    swift_retain();
  }
  else
  {
    v2 = 0;
  }
  swift_release();
  return v2;
}

uint64_t specialized Transaction.forEach<A>(keyType:_:)(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  Swift::Int v5;
  _QWORD v6[5];
  uint64_t v7;

  v6[2] = result;
  v6[3] = a2;
  if (a3)
  {
    type metadata accessor for TransactionPropertyKey<AnimationKey>(0, a2, (uint64_t)a3, a4);
    BloomFilter.init(hashValue:)(v5);
    return _s7SwiftUI12PropertyListV7ElementC7forEach6filter_SbAA11BloomFilterV_ys9UnmanagedVyAEG_SbztXEtF03_s7a4UI12cd54V7forEach7keyType_yxm_y5ValueQz_SbztXEtAA0C3KeyRzlFys9k5VyAC7e3CG_U121XEfU_AA011TransactioncJ033_B2543BCA257433E04979186A1DC2B6BCLLVyAA09AnimationJ033_D98E9A1069CEEADA58829ED440E36F30LLVG_Tg5xSbRi_zRi0_zlyAA9AnimationVSgIsgnl_Tf1ncn_nTf4nng_n(&v7, a3, (void (*)(uint64_t *, BOOL *))partial apply for specialized closure #1 in Transaction.forEach<A>(keyType:_:), (uint64_t)v6);
  }
  return result;
}

Swift::Void __swiftcall Transaction.disableAnimations()()
{
  uint64_t *v0;
  SwiftUI::BloomFilter v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v1.value = *v0;
  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (!v3 || *(_QWORD *)(v3 + 72))
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = 0;
    type metadata accessor for TransactionPropertyKey<AnimationKey>(0, v4, v5, v6);
    *(SwiftUI::BloomFilter *)v0 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v1.value);
  }
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, 1);
  swift_release();
}

uint64_t Transaction.effectiveAnimation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 72);
    swift_retain();
    swift_release();
    if (v2)
      return v2;
  }
  else
  {
    swift_release();
  }
  v3 = swift_retain();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_release();
  if ((v4 & 1) == 0)
    return 0;
  if (one-time initialization token for velocityTracking != -1)
    swift_once();
  v2 = static Animation.velocityTracking;
  swift_retain();
  return v2;
}

uint64_t Transaction._animationFrameInterval.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (v1)
    v2 = *(_QWORD *)(v1 + 72);
  else
    v2 = 0;
  swift_release();
  return v2;
}

unint64_t Transaction._animationReason.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 + 72);
    v3 = *(_BYTE *)(v1 + 76);
  }
  else
  {
    v2 = 0;
    v3 = 1;
  }
  swift_release();
  return v2 | ((unint64_t)v3 << 32);
}

uint64_t Transaction.init(animation:)(uint64_t a1)
{
  uint64_t v3;

  v3 = 0;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v3, a1);
  swift_release_n();
  return v3;
}

uint64_t key path getter for Transaction.animation : Transaction@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 72);
    swift_retain();
  }
  else
  {
    v4 = 0;
  }
  result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t key path setter for Transaction.animation : Transaction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  swift_release_n();
  return swift_release();
}

uint64_t (*Transaction.animation.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  a1[3] = v1;
  v3 = swift_retain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    swift_retain();
  }
  else
  {
    v5 = 0;
  }
  swift_release();
  *a1 = v5;
  return Transaction.animation.modify;
}

uint64_t Transaction.animation.modify(uint64_t *a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)a1[3];
  v4 = *a1;
  swift_retain();
  swift_retain();
  if ((a2 & 1) != 0)
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v4);
    swift_release();
    swift_release_n();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for Transaction._animationFrameInterval : Transaction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 72);
    v5 = *(_BYTE *)(v3 + 80);
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  result = swift_release();
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t key path setter for Transaction._animationFrameInterval : Transaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t Transaction._animationFrameInterval.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  char v4;

  v4 = a2 & 1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, v4);
  return swift_release();
}

void (*Transaction._animationFrameInterval.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = swift_retain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_BYTE *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  swift_release();
  *v3 = v6;
  *((_BYTE *)v3 + 8) = v7;
  return Transaction._animationFrameInterval.modify;
}

void Transaction._animationFrameInterval.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = *((_BYTE *)*a1 + 8);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

uint64_t key path getter for Transaction._animationReason : Transaction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 72);
    v5 = *(_BYTE *)(v3 + 76);
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  result = swift_release();
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v5;
  return result;
}

uint64_t key path setter for Transaction._animationReason : Transaction(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 4);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3 | ((unint64_t)v4 << 32));
  return swift_release();
}

uint64_t Transaction._animationReason.setter(unint64_t a1)
{
  uint64_t *v1;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1 | ((HIDWORD(a1) & 1) << 32));
  return swift_release();
}

uint64_t (*Transaction._animationReason.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = swift_retain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 72);
    v6 = *(_BYTE *)(v4 + 76);
  }
  else
  {
    v5 = 0;
    v6 = 1;
  }
  swift_release();
  *(_DWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 28) = v6;
  return Transaction._animationReason.modify;
}

uint64_t Transaction._animationReason.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned __int8 v3;

  v1 = *(unsigned int *)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 28);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v1 | ((unint64_t)v3 << 32));
  return swift_release();
}

uint64_t key path getter for Transaction.disablesAnimations : Transaction@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  result = swift_release();
  *a1 = v3 & 1;
  return result;
}

uint64_t Transaction.disablesAnimations.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*Transaction.disablesAnimations.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((_BYTE *)v3 + 40) = v5 & 1;
  return Transaction.disablesAnimations.modify;
}

void Transaction.disablesAnimations.modify(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  char v3;

  v1 = *(void **)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  free(v1);
}

uint64_t Transaction.disablesContentTransitions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 72);
  else
    v2 = 0;
  swift_release();
  return v2;
}

uint64_t key path getter for Transaction.disablesContentTransitions : Transaction@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
    v4 = *(_BYTE *)(v3 + 72);
  else
    v4 = 0;
  result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t Transaction.disablesContentTransitions.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t (*Transaction.disablesContentTransitions.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = (_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = swift_retain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
    v5 = *(_BYTE *)(v4 + 72);
  else
    v5 = 0;
  swift_release();
  *v2 = v5;
  return Transaction.disablesContentTransitions.modify;
}

uint64_t Transaction.disablesContentTransitions.modify(uint64_t a1)
{
  uint64_t *v1;
  char v2;

  v1 = *(uint64_t **)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 24);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  return swift_release();
}

uint64_t closure #1 in Transaction.animationIgnoringTransitionPhase.getter(uint64_t *a1, _BYTE *a2, uint64_t *a3)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a3 = result;
    swift_retain();
    result = swift_release();
    *a2 = 1;
  }
  return result;
}

void type metadata accessor for TransactionPropertyKey<AnimationKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>)
  {
    v4 = type metadata accessor for TransactionPropertyKey(0, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>);
  }
}

uint64_t sub_2350431A8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_2350431C8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

ValueMetadata *type metadata accessor for AnimationKey()
{
  return &type metadata for AnimationKey;
}

uint64_t partial apply for specialized closure #1 in Transaction.forEach<A>(keyType:_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = *a1;
  return v2(&v4);
}

ValueMetadata *type metadata accessor for DisablesAnimationsKey()
{
  return &type metadata for DisablesAnimationsKey;
}

ValueMetadata *type metadata accessor for AnimationFrameIntervalKey()
{
  return &type metadata for AnimationFrameIntervalKey;
}

ValueMetadata *type metadata accessor for AnimationReasonKey()
{
  return &type metadata for AnimationReasonKey;
}

ValueMetadata *type metadata accessor for DisablesContentTransitionsKey()
{
  return &type metadata for DisablesContentTransitionsKey;
}

uint64_t EventBindingBridge.eventBindingManager.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t key path getter for EventBindingBridge.responderWasBoundHandler : EventBindingBridge@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ResponderNode) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v4);
}

uint64_t key path setter for EventBindingBridge.responderWasBoundHandler : EventBindingBridge(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ResponderNode) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v7 + 32) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
}

uint64_t EventBindingBridge.responderWasBoundHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t EventBindingBridge.responderWasBoundHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t (*EventBindingBridge.responderWasBoundHandler.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

_QWORD *EventBindingBridge.__allocating_init(eventBindingManager:)()
{
  _QWORD *v0;

  v0 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

_QWORD *EventBindingBridge.init(eventBindingManager:)()
{
  _QWORD *v0;

  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

_QWORD *EventBindingBridge.__allocating_init()()
{
  _QWORD *v0;

  v0 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x24BEE4B00];
  return v0;
}

_QWORD *EventBindingBridge.init()()
{
  _QWORD *v0;

  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x24BEE4B00];
  return v0;
}

uint64_t EventBindingBridge.eventSources.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t EventBindingBridge.send(_:source:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::UInt v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  Swift::UInt *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unsigned __int8 v66;
  _QWORD *v67;
  uint64_t v68;
  Swift::UInt *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  Swift::UInt *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t *v93;
  __int128 v94[2];
  uint64_t v95;
  _QWORD v96[3];
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[5];
  __int128 v100[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _QWORD v105[2];
  __int128 v106[3];

  v3 = a1;
  v90 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  swift_bridgeObjectRetain();
  v93 = (uint64_t *)(v2 + 40);
  swift_beginAccess();
  v7 = 0;
  v8 = (unint64_t)(v4 + 63) >> 6;
  v86 = v8 - 1;
  v92 = v8;
  v88 = v8 - 5;
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  v87 = v3 + 104;
  v91 = v3;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v7 << 6);
LABEL_9:
      v13 = *(_QWORD *)(v3 + 56);
      v14 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v12);
      v16 = *v14;
      v15 = v14[1];
      *(_QWORD *)&v101 = v16;
      *((_QWORD *)&v101 + 1) = v15;
      outlined init with copy of AnyTrackedValue(v13 + 40 * v12, (uint64_t)&v102);
      goto LABEL_16;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_91;
    if (v17 >= v92)
    {
      v19 = v7;
    }
    else
    {
      v18 = *(_QWORD *)(v90 + 8 * v17);
      if (v18)
        goto LABEL_13;
      v19 = v7 + 1;
      if ((uint64_t)(v7 + 2) < v92)
      {
        v18 = *(_QWORD *)(v90 + 8 * (v7 + 2));
        if (v18)
        {
          v17 = v7 + 2;
LABEL_13:
          v6 = (v18 - 1) & v18;
          v12 = __clz(__rbit64(v18)) + (v17 << 6);
          v7 = v17;
          goto LABEL_9;
        }
        v19 = v7 + 2;
        if ((uint64_t)(v7 + 3) < v92)
        {
          v18 = *(_QWORD *)(v90 + 8 * (v7 + 3));
          if (v18)
          {
            v17 = v7 + 3;
            goto LABEL_13;
          }
          v17 = v7 + 4;
          v19 = v7 + 3;
          if ((uint64_t)(v7 + 4) < v92)
          {
            v18 = *(_QWORD *)(v90 + 8 * v17);
            if (v18)
              goto LABEL_13;
            while (v88 != v7)
            {
              v18 = *(_QWORD *)(v87 + 8 * v7++);
              if (v18)
              {
                v17 = v7 + 4;
                goto LABEL_13;
              }
            }
            v19 = v86;
          }
        }
      }
    }
    v6 = 0;
    v104 = 0;
    v102 = 0u;
    v103 = 0u;
    v7 = v19;
    v101 = 0u;
LABEL_16:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v101, (uint64_t)v105);
    v20 = v105[0];
    if (!v105[0])
    {
      swift_release();
      if (!v9[2] || (swift_beginAccess(), !swift_weakLoadStrong()))
      {
        swift_bridgeObjectRelease();
        return MEMORY[0x24BEE4B08];
      }
      swift_weakInit();
      if (one-time initialization token for _lock == -1)
      {
LABEL_84:
        v83 = static Update._lock;
        _MovableLockLock(static Update._lock);
        specialized static Update.begin()();
        swift_beginAccess();
        if (swift_weakLoadStrong())
        {
          v84 = EventBindingManager.sendDownstream(_:)((uint64_t)v9);
          swift_release();
        }
        else
        {
          v84 = MEMORY[0x24BEE4B08];
        }
        static Update.end()();
        _MovableLockUnlock(v83);
        swift_weakDestroy();
        swift_release();
        swift_bridgeObjectRelease();
        return v84;
      }
LABEL_97:
      swift_once();
      goto LABEL_84;
    }
    v21 = v105[1];
    outlined init with take of ScrollStateRequest(v106, (uint64_t)&v101);
    outlined init with copy of AnyTrackedValue((uint64_t)&v101, (uint64_t)v100);
    outlined init with copy of AnyTrackedValue((uint64_t)v100, (uint64_t)v96);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for NonGestureEventType);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v94, (uint64_t)v99);
      outlined init with copy of AnyTrackedValue((uint64_t)v99, (uint64_t)v96);
      v22 = v97;
      v23 = v98;
      __swift_project_boxed_opaque_existential_1(v96, v97);
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v94, v22);
      v24 = v97;
      v25 = v98;
      __swift_project_boxed_opaque_existential_1(v96, v97);
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v25 + 8) + 16))(v94, v24);
      v26 = v97;
      v27 = v98;
      __swift_project_boxed_opaque_existential_1(v96, v97);
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v27 + 8) + 24))(v94, v26);
      swift_retain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
      swift_release();
      outlined init with copy of AnyTrackedValue((uint64_t)&v101, (uint64_t)v100);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v99[0] = v9;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      v31 = v9[2];
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (!__OFADD__(v31, v32))
      {
        v34 = v29;
        if (v9[3] >= v33)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v9 = (_QWORD *)v99[0];
            if ((v29 & 1) != 0)
              goto LABEL_4;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v9 = (_QWORD *)v99[0];
            if ((v34 & 1) != 0)
              goto LABEL_4;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
          v35 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          if ((v34 & 1) != (v36 & 1))
            goto LABEL_98;
          v30 = v35;
          v9 = (_QWORD *)v99[0];
          if ((v34 & 1) != 0)
            goto LABEL_4;
        }
        v9[(v30 >> 6) + 8] |= 1 << v30;
        v55 = (Swift::UInt *)(v9[6] + 16 * v30);
        *v55 = v20;
        v55[1] = v21;
        outlined init with take of ScrollStateRequest(v100, v9[7] + 40 * v30);
        v56 = v9[2];
        v57 = __OFADD__(v56, 1);
        v58 = v56 + 1;
        if (v57)
          goto LABEL_93;
LABEL_63:
        v9[2] = v58;
        goto LABEL_5;
      }
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    v95 = 0;
    memset(v94, 0, sizeof(v94));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
    outlined destroy of NonGestureEventType?((uint64_t)v94);
    v37 = *v93;
    if (*(_QWORD *)(*v93 + 16))
    {
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      if ((v39 & 1) != 0)
      {
        v40 = *(_BYTE *)(*(_QWORD *)(v37 + 56) + 16 * v38 + 8);
        v41 = v40;
        goto LABEL_38;
      }
    }
    v42 = *((_QWORD *)&v102 + 1);
    v43 = v103;
    __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v43 + 8))(v100, v42, v43);
    if (LOBYTE(v100[0]) == 1)
      break;
    v40 = 0;
    v41 = 2;
LABEL_38:
    v59 = *((_QWORD *)&v102 + 1);
    v60 = v103;
    __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v60 + 8))(v100, v59, v60);
    if (LOBYTE(v100[0]) != 1)
    {
      swift_beginAccess();
      v61 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      if ((v62 & 1) != 0)
      {
        v63 = v61;
        v64 = swift_isUniquelyReferenced_nonNull_native();
        v65 = *v93;
        v99[0] = *v93;
        *v93 = 0x8000000000000000;
        if ((v64 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v65 = v99[0];
        }
        specialized _NativeDictionary._delete(at:)(v63, v65);
        *v93 = v65;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
    }
    if (v41 == 2)
      v66 = 0;
    else
      v66 = v40;
    v3 = v91;
    if ((v66 & 1) == 0)
      goto LABEL_55;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v101);
  }
  swift_beginAccess();
  v44 = swift_isUniquelyReferenced_nonNull_native();
  v99[0] = *v93;
  v45 = v99[0];
  *v93 = 0x8000000000000000;
  v47 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  v48 = *(_QWORD *)(v45 + 16);
  v49 = (v46 & 1) == 0;
  v50 = v48 + v49;
  if (__OFADD__(v48, v49))
    goto LABEL_94;
  v51 = v46;
  if (*(_QWORD *)(v45 + 24) >= v50)
  {
    v54 = v93;
    if ((v44 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_31;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, v44);
    v52 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
    if ((v51 & 1) != (v53 & 1))
      goto LABEL_98;
    v47 = v52;
LABEL_31:
    v54 = v93;
  }
  v67 = (_QWORD *)v99[0];
  if ((v51 & 1) != 0)
  {
    v68 = *(_QWORD *)(v99[0] + 56) + 16 * v47;
    *(_QWORD *)v68 = a2;
    *(_BYTE *)(v68 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(v99[0] + 8 * (v47 >> 6) + 64) |= 1 << v47;
    v69 = (Swift::UInt *)(v67[6] + 16 * v47);
    *v69 = v20;
    v69[1] = v21;
    v70 = v67[7] + 16 * v47;
    *(_QWORD *)v70 = a2;
    *(_BYTE *)(v70 + 8) = 0;
    v71 = v67[2];
    v57 = __OFADD__(v71, 1);
    v72 = v71 + 1;
    if (v57)
      goto LABEL_96;
    v67[2] = v72;
  }
  *v54 = (uint64_t)v67;
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_55:
  outlined init with copy of AnyTrackedValue((uint64_t)&v101, (uint64_t)v100);
  v73 = swift_isUniquelyReferenced_nonNull_native();
  v99[0] = v9;
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  v75 = v9[2];
  v76 = (v74 & 1) == 0;
  v77 = v75 + v76;
  if (__OFADD__(v75, v76))
    goto LABEL_92;
  v78 = v74;
  if (v9[3] >= v77)
  {
    if ((v73 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = (_QWORD *)v99[0];
      if ((v78 & 1) == 0)
        goto LABEL_62;
      goto LABEL_4;
    }
    v9 = (_QWORD *)v99[0];
    if ((v74 & 1) != 0)
      goto LABEL_4;
LABEL_62:
    v9[(v30 >> 6) + 8] |= 1 << v30;
    v81 = (Swift::UInt *)(v9[6] + 16 * v30);
    *v81 = v20;
    v81[1] = v21;
    outlined init with take of ScrollStateRequest(v100, v9[7] + 40 * v30);
    v82 = v9[2];
    v57 = __OFADD__(v82, 1);
    v58 = v82 + 1;
    if (v57)
      goto LABEL_95;
    goto LABEL_63;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, v73);
  v79 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if ((v78 & 1) == (v80 & 1))
  {
    v30 = v79;
    v9 = (_QWORD *)v99[0];
    if ((v78 & 1) == 0)
      goto LABEL_62;
LABEL_4:
    v10 = v9[7] + 40 * v30;
    __swift_destroy_boxed_opaque_existential_1(v10);
    outlined init with take of ScrollStateRequest(v100, v10);
LABEL_5:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_98:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t EventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::UInt *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  char v29;
  uint64_t v30;

  v5 = (uint64_t *)(v3 + 40);
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 40);
  v7 = v6 + 64;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v6 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v29 = 0;
  v13 = 0;
  if (v10)
    goto LABEL_7;
LABEL_8:
  v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  if (v16 < v11)
  {
    v17 = *(_QWORD *)(v7 + 8 * v16);
    ++v13;
    if (v17)
      goto LABEL_21;
    v13 = v16 + 1;
    if (v16 + 1 >= v11)
      goto LABEL_28;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (v17)
      goto LABEL_21;
    v13 = v16 + 2;
    if (v16 + 2 >= v11)
      goto LABEL_28;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (v17)
    {
LABEL_21:
      v10 = (v17 - 1) & v17;
      for (i = __clz(__rbit64(v17)) + (v13 << 6); ; i = v14 | (v13 << 6))
      {
        v19 = *(_QWORD *)(v6 + 56);
        if (*(_QWORD *)(v19 + 16 * i) == a1)
        {
          v20 = (Swift::UInt *)(*(_QWORD *)(v6 + 48) + 16 * i);
          v21 = *v20;
          v22 = v20[1];
          swift_beginAccess();
          v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
          if ((v24 & 1) != 0)
          {
            v25 = v23;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v27 = *v5;
            v30 = *v5;
            *v5 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v27 = v30;
            }
            specialized _NativeDictionary._delete(at:)(v25, v27);
            *v5 = v27;
            swift_bridgeObjectRelease();
          }
          result = swift_endAccess();
          if (!v10)
            goto LABEL_8;
        }
        else
        {
          v29 |= *(_BYTE *)(v19 + 16 * i + 8) ^ 1;
          if (!v10)
            goto LABEL_8;
        }
LABEL_7:
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
      }
    }
    v18 = v16 + 3;
    if (v18 < v11)
    {
      v17 = *(_QWORD *)(v7 + 8 * v18);
      if (v17)
      {
        v13 = v18;
        goto LABEL_21;
      }
      while (1)
      {
        v13 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_33;
        if (v13 >= v11)
          break;
        v17 = *(_QWORD *)(v7 + 8 * v13);
        ++v18;
        if (v17)
          goto LABEL_21;
      }
    }
  }
LABEL_28:
  result = swift_release();
  if ((v29 & 1) == 0)
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (result)
    {
      EventBindingManager.reset(resetForwardedEventDispatchers:)(a3 & 1);
      return swift_release();
    }
  }
  return result;
}

uint64_t EventBindingBridge.resetEvents()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  Swift::UInt *v15;
  Swift::UInt v16;
  Swift::UInt v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  Swift::UInt *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v1 = (_QWORD *)(v0 + 40);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 + 64);
  v36 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & v3;
  v37 = (unint64_t)(v4 + 63) >> 6;
  v38 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v7 << 6);
    }
    else
    {
      v11 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_36;
      if (v11 >= v37)
        return swift_release();
      v12 = *(_QWORD *)(v36 + 8 * v11);
      ++v7;
      if (!v12)
      {
        v7 = v11 + 1;
        if (v11 + 1 >= v37)
          return swift_release();
        v12 = *(_QWORD *)(v36 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 2;
          if (v11 + 2 >= v37)
            return swift_release();
          v12 = *(_QWORD *)(v36 + 8 * v7);
          if (!v12)
          {
            v13 = v11 + 3;
            if (v13 >= v37)
              return swift_release();
            v12 = *(_QWORD *)(v36 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                v7 = v13 + 1;
                if (__OFADD__(v13, 1))
                  goto LABEL_37;
                if (v7 >= v37)
                  return swift_release();
                v12 = *(_QWORD *)(v36 + 8 * v7);
                ++v13;
                if (v12)
                  goto LABEL_21;
              }
            }
            v7 = v13;
          }
        }
      }
LABEL_21:
      v6 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v7 << 6);
    }
    v14 = 16 * v10;
    v15 = (Swift::UInt *)(*(_QWORD *)(v38 + 48) + v14);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + v14);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = (_QWORD *)*v1;
    v39 = (_QWORD *)*v1;
    *v1 = 0x8000000000000000;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    v23 = v20[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (v20[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v29 = v39;
        if ((v21 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v29 = v39;
        if ((v26 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_38;
      v22 = v27;
      v29 = v39;
      if ((v26 & 1) != 0)
      {
LABEL_4:
        v8 = v29[7] + 16 * v22;
        *(_QWORD *)v8 = v18;
        *(_BYTE *)(v8 + 8) = 1;
        goto LABEL_5;
      }
    }
    v29[(v22 >> 6) + 8] |= 1 << v22;
    v30 = (Swift::UInt *)(v29[6] + 16 * v22);
    *v30 = v17;
    v30[1] = v16;
    v31 = v29[7] + 16 * v22;
    *(_QWORD *)v31 = v18;
    *(_BYTE *)(v31 + 8) = 1;
    v32 = v29[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_35;
    v29[2] = v34;
LABEL_5:
    *v1 = v29;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall EventBindingBridge.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  unint64_t v8;
  _QWORD v9[3];

  v1 = *(_QWORD *)a1.rawValue;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    v4 = Strong + 16;
    swift_beginAccess();
    if (MEMORY[0x23B7C9E44](v4))
    {
      v5 = *(_QWORD *)(v3 + 24);
      if (one-time initialization token for _lock != -1)
        swift_once();
      v6 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      ObjectType = swift_getObjectType();
      v9[0] = v1;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 40))(v9, ObjectType, v5);
      v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      swift_weakInit();
      _MovableLockLock(v6);
      specialized static Update.begin()();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        EventBindingManager.sendDownstream(_:)(v8);
        swift_release();
      }
      static Update.end()();
      _MovableLockUnlock(v6);
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static Update.end()();
      _MovableLockUnlock(v6);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t EventBindingBridge.source(for:)()
{
  return 0;
}

uint64_t EventBindingBridge.deinit()
{
  uint64_t v0;

  swift_weakDestroy();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EventBindingBridge.__deallocating_deinit()
{
  uint64_t v0;

  swift_weakDestroy();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t EventBindingBridge.didBind(to:id:)(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t ObjectType;
  void (*v21)(uint64_t *, _QWORD *, _QWORD *, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;

  v3 = v2;
  v4 = *a1;
  v5 = *a2;
  v6 = a2[1];
  v7 = swift_beginAccess();
  v8 = v2[3];
  if (v8)
  {
    v9 = v3[4];
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = v4;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
    swift_retain();
    specialized static Update.begin()();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = partial apply for closure #1 in EventBindingBridge.didBind(to:id:);
    *(_QWORD *)(v11 + 24) = v10;
    v12 = one-time initialization token for actions;
    swift_retain();
    if (v12 != -1)
      swift_once();
    v13 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v15 = v13[2];
    v14 = v13[3];
    if (v15 >= v14 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
    v13[2] = v15 + 1;
    v16 = &v13[2 * v15];
    v16[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v16[5] = v11;
    static Update.actions = v13;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    v7 = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
  }
  v23 = (*(uint64_t (**)(uint64_t))(*v3 + 192))(v7);
  v17 = *(_QWORD *)(v23 + 16);
  if (v17)
  {
    v18 = (uint64_t *)(v23 + 40);
    do
    {
      v19 = *v18;
      ObjectType = swift_getObjectType();
      v24[1] = v6;
      v25 = v4;
      v24[0] = v5;
      v21 = *(void (**)(uint64_t *, _QWORD *, _QWORD *, uint64_t, uint64_t))(v19 + 40);
      swift_unknownObjectRetain();
      v21(&v25, v24, v3, ObjectType, v19);
      swift_unknownObjectRelease();
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_235044924()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EventBindingBridge.didBind(to:id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t specialized EventBindingBridge.didUpdate(phase:in:)(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _BYTE v12[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 40);
    do
    {
      v7 = *v6;
      ObjectType = swift_getObjectType();
      v12[0] = v2;
      v12[1] = v3;
      v9 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 24);
      swift_unknownObjectRetain();
      v9(v12, v1, ObjectType, v7);
      swift_unknownObjectRelease();
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  result = swift_bridgeObjectRelease();
  if (v3 == 2)
    return EventBindingBridge.resetEvents()();
  if (v3 == 3 && v2 == 0)
    return EventBindingBridge.resetEvents()();
  return result;
}

uint64_t specialized EventBindingBridge.didUpdate(gestureCategory:in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v2 = *a1;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 40);
    do
    {
      v6 = *v5;
      ObjectType = swift_getObjectType();
      v10 = v2;
      v8 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 32);
      swift_unknownObjectRetain();
      v8(&v10, v1, ObjectType, v6);
      swift_unknownObjectRelease();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_235044B18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_235044B64()
{
  swift_beginAccess();
  return swift_weakAssign();
}

uint64_t type metadata accessor for EventBindingBridge()
{
  return objc_opt_self();
}

uint64_t method lookup function for EventBindingBridge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EventBindingBridge.eventBindingManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of EventBindingBridge.responderWasBoundHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of EventBindingBridge.responderWasBoundHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of EventBindingBridge.responderWasBoundHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of EventBindingBridge.__allocating_init(eventBindingManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of EventBindingBridge.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of EventBindingBridge.eventSources.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of EventBindingBridge.send(_:source:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of EventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of EventBindingBridge.setInheritedPhase(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of EventBindingBridge.source(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

ValueMetadata *type metadata accessor for EventBindingBridge.TrackedEventState()
{
  return &type metadata for EventBindingBridge.TrackedEventState;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ResponderNode) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_235044CA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ResponderNode) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void (*specialized AtomicBox.wrappedValue.modify(os_unfair_lock_s **a1, os_unfair_lock_s *a2))(os_unfair_lock_s **a1)
{
  *a1 = a2;
  os_unfair_lock_lock(a2 + 4);
  return AtomicBox.wrappedValue.modifyspecialized ;
}

void AtomicBox.wrappedValue.modifyspecialized (os_unfair_lock_s **a1)
{
  os_unfair_lock_unlock(*a1 + 4);
}

uint64_t CUIDesignLibraryCacheKey.init(name:in:allowsBlendMode:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  _BYTE v15[8];
  uint64_t v16;

  v7 = *a2;
  if (a2[1])
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v7, (uint64_t)v15);
    swift_release_n();
  }
  else
  {
    v14[0] = *a2;
    v14[1] = 0;
    swift_retain_n();
    static CUIDesignLibraryCacheKey.Props.value(in:)(v14, (uint64_t)v15);
  }
  result = swift_release_n();
  v9 = v15[0];
  v10 = v15[1];
  v11 = v15[2];
  v12 = v16;
  v13 = 2;
  if (v16 != 1)
    v13 = v16;
  if ((a3 & 1) == 0)
    v12 = v13;
  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = v9;
  *(_BYTE *)(a4 + 9) = v10;
  *(_BYTE *)(a4 + 10) = v11;
  *(_QWORD *)(a4 + 16) = v12;
  return result;
}

double CUIDesignLibraryCacheKey.fetch()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  _QWORD *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  double result;
  id v19;
  void *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  char v32;
  CGBlendMode v33;
  id *v34;
  os_unfair_lock_s *v35;
  char isUniquelyReferenced_nonNull_native;
  int v37;
  int v38;
  int v39;
  Swift::UInt v40;
  __int128 v41;
  Swift::UInt v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  uint64_t v48;
  id v49[2];

  v49[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)v1;
  v4 = *(unsigned __int8 *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v1 + 9);
  v6 = *(unsigned __int8 *)(v1 + 10);
  v7 = *(_QWORD *)(v1 + 16);
  if (one-time initialization token for _cache != -1)
    swift_once();
  v8 = static CUIDesignLibraryCacheKey._cache;
  v9 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
  swift_retain();
  os_unfair_lock_lock(v9);
  v10 = v8[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v9);
  swift_release();
  if (*(_QWORD *)(v10 + 16)
    && (!(_DWORD)v5 ? (v11 = 0) : (v11 = 256),
        (v12 = v11 | v4, !(_DWORD)v6) ? (v13 = 0) : (v13 = 0x10000),
        v14 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v12 | v13, v7),
        (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(v10 + 56) + 20 * v14;
    v17 = *(_BYTE *)(v16 + 16);
    v41 = *(_OWORD *)v16;
    swift_bridgeObjectRelease();
    result = *(double *)&v41;
    *(_OWORD *)a1 = v41;
    *(_BYTE *)(a1 + 16) = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    v48 = v6;
    v49[0] = 0;
    v43 = v3;
    v44 = 0;
    v45 = v4;
    v46 = v5;
    v47 = v7;
    v19 = objc_msgSend((id)objc_opt_self(), sel_colorWithTraits_error_, &v43, v49);
    v42 = v7;
    if (v19)
    {
      v20 = v19;
      v40 = v3;
      v21 = v49[0];
      v22 = specialized Color.Resolved.init(failableCGColor:)(objc_msgSend(v20, sel_cgColor));
      if ((v24 & 1) != 0)
      {
        v27 = a1;
        v25 = 0;
        LODWORD(v28) = 0;
        v26 = 0;
        LODWORD(v29) = 0;
      }
      else
      {
        v25 = v22;
        v26 = v23;
        v27 = a1;
        v28 = HIDWORD(v22);
        v29 = HIDWORD(v23);
      }
      v33 = objc_msgSend(v20, sel_blendMode);

      BlendMode.init(_:)(v33);
      v32 = v43;
      a1 = v27;
      v3 = v40;
    }
    else
    {
      v30 = v49[0];
      v31 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);

      v32 = 0;
      v25 = 0;
      LODWORD(v28) = 0;
      v26 = 0;
      LODWORD(v29) = 0;
    }
    *(_QWORD *)&v43 = __PAIR64__(v28, v25);
    *((_QWORD *)&v43 + 1) = __PAIR64__(v29, v26);
    LOBYTE(v44) = v32;
    v34 = (id *)static CUIDesignLibraryCacheKey._cache;
    v35 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
    swift_retain();
    os_unfair_lock_lock(v35);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49[0] = v34[3];
    v34[3] = (id)0x8000000000000000;
    if ((_DWORD)v5)
      v37 = 256;
    else
      v37 = 0;
    v38 = v37 | v4;
    if ((_DWORD)v6)
      v39 = 0x10000;
    else
      v39 = 0;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v43, v3, v38 | v39, v42, isUniquelyReferenced_nonNull_native);
    v34[3] = v49[0];
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v35);
    swift_release();
    result = *(double *)&v43;
    *(_OWORD *)a1 = v43;
    *(_BYTE *)(a1 + 16) = v44;
  }
  return result;
}

float CUIDesignLibraryCacheKey.Entry.color.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void CUIDesignLibraryCacheKey.Entry.color.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*CUIDesignLibraryCacheKey.Entry.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.Entry.blendMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *CUIDesignLibraryCacheKey.Entry.blendMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Entry.blendMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

char *CUIDesignLibraryCacheKey.Entry.init(color:blendMode:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  char v6;

  v6 = *result;
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float *)(a2 + 12) = a6;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

void CUIDesignLibraryCacheKey.Entry.hash(into:)()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  Swift::UInt32 v7;
  Swift::UInt32 v8;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 12);
  v4 = *(unsigned __int8 *)(v0 + 16);
  if ((*(_DWORD *)v0 & 0x7FFFFFFF) != 0)
    v5 = *(_DWORD *)v0;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v1 & 0x7FFFFFFF) != 0)
    v6 = v1;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v2 & 0x7FFFFFFF) != 0)
    v7 = v2;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v3 & 0x7FFFFFFF) != 0)
    v8 = v3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v4);
}

Swift::Int CUIDesignLibraryCacheKey.Entry.hashValue.getter()
{
  Hasher.init(_seed:)();
  CUIDesignLibraryCacheKey.Entry.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CUIDesignLibraryCacheKey.Entry()
{
  Hasher.init(_seed:)();
  CUIDesignLibraryCacheKey.Entry.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CUIDesignLibraryCacheKey.Entry()
{
  Hasher.init(_seed:)();
  CUIDesignLibraryCacheKey.Entry.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static CUIDesignLibraryCacheKey.cache.getter()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  if (one-time initialization token for _cache != -1)
    swift_once();
  v0 = static CUIDesignLibraryCacheKey._cache;
  v1 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
  swift_retain();
  os_unfair_lock_lock(v1);
  v2 = v0[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  swift_release();
  return v2;
}

uint64_t static CUIDesignLibraryCacheKey.cache.setter(uint64_t a1)
{
  _QWORD *v2;
  os_unfair_lock_s *v3;

  if (one-time initialization token for _cache != -1)
    swift_once();
  v2 = static CUIDesignLibraryCacheKey._cache;
  v3 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
  swift_retain();
  os_unfair_lock_lock(v3);
  v2[3] = a1;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v3);
  return swift_release();
}

void (*static CUIDesignLibraryCacheKey.cache.modify(os_unfair_lock_s ***a1))(_QWORD *a1)
{
  os_unfair_lock_s **v2;
  os_unfair_lock_s *v3;

  v2 = (os_unfair_lock_s **)malloc(0x30uLL);
  *a1 = v2;
  if (one-time initialization token for _cache != -1)
    swift_once();
  v3 = (os_unfair_lock_s *)static CUIDesignLibraryCacheKey._cache;
  v2[4] = (os_unfair_lock_s *)static CUIDesignLibraryCacheKey._cache;
  swift_retain();
  v2[5] = (os_unfair_lock_s *)specialized AtomicBox.wrappedValue.modify(v2, v3);
  return static CUIDesignLibraryCacheKey.cache.modify;
}

void static CUIDesignLibraryCacheKey.cache.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_release();
  free(v1);
}

uint64_t one-time initialization function for _cache()
{
  uint64_t result;

  type metadata accessor for AtomicBuffer<[CUIDesignLibraryCacheKey : CUIDesignLibraryCacheKey.Entry]>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  static CUIDesignLibraryCacheKey._cache = (_UNKNOWN *)result;
  return result;
}

uint64_t static CUIDesignLibraryCacheKey.$cache.getter@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for _cache != -1)
    swift_once();
  *a1 = static CUIDesignLibraryCacheKey._cache;
  return swift_retain();
}

void CUIDesignLibraryCacheKey.Props.scheme.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *CUIDesignLibraryCacheKey.Props.scheme.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.scheme.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.Props.contrast.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *CUIDesignLibraryCacheKey.Props.contrast.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.contrast.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.Props.gamut.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *CUIDesignLibraryCacheKey.Props.gamut.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.gamut.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CUIDesignLibraryCacheKey.Props.styling.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CUIDesignLibraryCacheKey.Props.styling.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.styling.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t static CUIDesignLibraryCacheKey.Props.value(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t result;
  char v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v27);
    swift_release_n();
    swift_release_n();
    v4 = v27;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v27);
    swift_release_n();
    swift_release_n();
    v5 = v27;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v26);
    swift_release_n();
    swift_release_n();
    v6 = v26;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v25);
    swift_release_n();
    swift_release_n();
    v7 = v25;
    result = outlined consume of Material?(v25);
    if (v7 != 8)
    {
      swift_retain_n();
      swift_retain_n();
      v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
      swift_release_n();
      goto LABEL_19;
    }
LABEL_17:
    v22 = 0;
    goto LABEL_23;
  }
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
  BloomFilter.init(hashValue:)(v10);
  v11 = swift_retain_n();
  v12 = specialized find1<A>(_:key:filter:)(v11, v25);
  if (v12)
    v4 = *(_BYTE *)(v12 + 72);
  else
    v4 = 0;
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey);
  BloomFilter.init(hashValue:)(v13);
  v14 = swift_retain_n();
  v15 = specialized find1<A>(_:key:filter:)(v14, v25);
  if (v15)
    v5 = *(_BYTE *)(v15 + 72);
  else
    v5 = 0;
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey);
  BloomFilter.init(hashValue:)(v16);
  v17 = swift_retain_n();
  v18 = specialized find1<A>(_:key:filter:)(v17, v25);
  if (v18)
    v6 = *(_BYTE *)(v18 + 72);
  else
    v6 = 0;
  swift_release_n();
  v19 = swift_retain_n();
  v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 72);
    outlined copy of Material?(v21);
  }
  else
  {
    v21 = 8;
  }
  swift_release_n();
  result = outlined consume of Material?(v21);
  if (v21 == 8)
    goto LABEL_17;
  v23 = swift_retain_n();
  v9 = specialized closure #1 in PropertyList.subscript.getter(v23, (uint64_t)&v24);
LABEL_19:
  result = swift_release_n();
  if (v9 == 2)
  {
    v22 = 1;
  }
  else
  {
    v22 = 1;
    if ((v9 & 1) == 0)
      v22 = 2;
  }
LABEL_23:
  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = v5;
  *(_BYTE *)(a2 + 2) = v6;
  *(_QWORD *)(a2 + 8) = v22;
  return result;
}

void CUIDesignLibraryCacheKey.Props.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int CUIDesignLibraryCacheKey.Props.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CUIDesignLibraryCacheKey.Props()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CUIDesignLibraryCacheKey.Props()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CUIDesignLibraryCacheKey.Props()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  Hasher.init(_seed:)();
  v1 = v0[1];
  v2 = v0[2];
  v3 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t CUIDesignLibraryCacheKey.name.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CUIDesignLibraryCacheKey.name.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.props.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v1 + 9);
  v3 = *(_BYTE *)(v1 + 10);
  v4 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_QWORD *)(a1 + 8) = v4;
}

uint64_t CUIDesignLibraryCacheKey.props.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 1);
  v3 = *(_BYTE *)(result + 2);
  v4 = *(_QWORD *)(result + 8);
  *(_BYTE *)(v1 + 8) = *(_BYTE *)result;
  *(_BYTE *)(v1 + 9) = v2;
  *(_BYTE *)(v1 + 10) = v3;
  *(_QWORD *)(v1 + 16) = v4;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.props.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CUIDesignLibraryCacheKey.cuiDisplayGamut.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

void CUIDesignLibraryCacheKey.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v1 = *(unsigned __int8 *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 9);
  v3 = *(unsigned __int8 *)(v0 + 10);
  v4 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

BOOL static CUIDesignLibraryCacheKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  result = 0;
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 10) ^ *(unsigned __int8 *)(a2 + 10)) & 1) == 0)
  {
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  }
  return result;
}

Swift::Int CUIDesignLibraryCacheKey.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  v4 = *(unsigned __int8 *)(v0 + 10);
  v5 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CUIDesignLibraryCacheKey()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  v4 = *(unsigned __int8 *)(v0 + 10);
  v5 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CUIDesignLibraryCacheKey()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v1 = *(unsigned __int8 *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 9);
  v3 = *(unsigned __int8 *)(v0 + 10);
  v4 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CUIDesignLibraryCacheKey()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  Hasher.init(_seed:)();
  v1 = *(unsigned __int8 *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 9);
  v3 = *(unsigned __int8 *)(v0 + 10);
  v4 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CUIDesignLibraryCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v11[8];
  uint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v2 = *(_QWORD *)(a2 + 16);
    v3 = *(_BYTE *)(a2 + 10);
    v4 = *(_BYTE *)(a2 + 9);
    v5 = *(_BYTE *)(a2 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_BYTE *)(a1 + 10);
    v8 = *(_BYTE *)(a1 + 9);
    v13[0] = *(_BYTE *)(a1 + 8);
    v13[1] = v8;
    v13[2] = v7;
    v14 = v6;
    v11[0] = v5;
    v11[1] = v4;
    v11[2] = v3;
    v12 = v2;
    return specialized static CUIDesignLibraryCacheKey.Props.== infix(_:_:)(v13, v11);
  }
  else
  {
    return 0;
  }
}

BOOL specialized static CUIDesignLibraryCacheKey.Entry.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1) != 0
      && a1[1].u8[0] == a2[1].u8[0];
}

BOOL specialized static CUIDesignLibraryCacheKey.Props.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 result;

  result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0 && ((a1[2] ^ a2[2]) & 1) == 0)
    return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
  return result;
}

unint64_t lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CUIDesignLibraryCacheKey.Entry, &type metadata for CUIDesignLibraryCacheKey.Entry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CUIDesignLibraryCacheKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIDesignLibraryCacheKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIDesignLibraryCacheKey()
{
  return &type metadata for CUIDesignLibraryCacheKey;
}

uint64_t getEnumTagSinglePayload for CUIDesignLibraryCacheKey.Entry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xEC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 236);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 0x15;
  v5 = v3 - 21;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIDesignLibraryCacheKey.Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 236;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xEC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xEC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 20;
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIDesignLibraryCacheKey.Entry()
{
  return &type metadata for CUIDesignLibraryCacheKey.Entry;
}

uint64_t getEnumTagSinglePayload for CUIDesignLibraryCacheKey.Props(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for CUIDesignLibraryCacheKey.Props()
{
  return &type metadata for CUIDesignLibraryCacheKey.Props;
}

ValueMetadata *type metadata accessor for CoreUIDefaultSystemColorDefinition()
{
  return &type metadata for CoreUIDefaultSystemColorDefinition;
}

void specialized static CoreUIDefaultSystemColorDefinition.value(for:environment:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_235046324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v3 = a1;
  swift_retain();
  swift_retain();
  CUIDesignLibraryCacheKey.init(name:in:allowsBlendMode:)(0, &v2, 0, (uint64_t)&v5);
  v2 = v5;
  LOWORD(v3) = v6;
  BYTE2(v3) = v7;
  v4 = v8;
  CUIDesignLibraryCacheKey.fetch()((uint64_t)&v9);
}

void sub_2350465BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a9 = 18;
  a13 = a1;
  specialized static DefaultSystemColorDefinition_PhoneTV.value(for:environment:)(&a9, &a12);
  JUMPOUT(0x2350465A0);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ZStack<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for ZStack<A>, a4);
}

uint64_t static UnaryView._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  v9 = *((_DWORD *)a2 + 16);
  v10 = a2[9];
  v11 = *((_BYTE *)a2 + 80);
  v22 = *a1;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = *(_OWORD *)(a2 + 3);
  v17 = v8;
  v18 = *((_OWORD *)a2 + 3);
  v19 = v9;
  v20 = v10;
  v21 = v11;
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)((uint64_t)&v13, a3, *(_QWORD *)(a4 + 8), a5);
}

uint64_t static UnaryView._viewListCount(inputs:)()
{
  return 1;
}

void protocol witness for View.body.getter in conformance ZStack<A>()
{
  specialized PrimitiveView.body.getter();
}

void PrimitiveView.body.getter()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Image.Resolved@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Image.Resolved>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance Image.Resolved()
{
  specialized View.bodyError()(0x6465766C6F736552, (void *)0xE800000000000000);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance VStack<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for VStack<A>, a4);
}

void protocol witness for View.body.getter in conformance VStack<A>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance _ViewModifier_Content<A>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance PlaceholderContentView<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance KeyframeAnimator<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for KeyframeAnimator<A, B, C>, a4);
}

void protocol witness for View.body.getter in conformance KeyframeAnimator<A, B, C>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance TupleView<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <A> Group<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Group<A>, a3, &v11);
  return static MultiView._makeView(view:inputs:)(a1, a2, a3, v9, a5);
}

uint64_t static MultiView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 80);
  v19 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a2 + 40);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = v8;
  return static View.makeImplicitRoot(view:inputs:)(&v19, &v11, a3, *(_QWORD *)(a4 + 8), a5);
}

void protocol witness for View.body.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  protocol witness for View.body.getter in conformance <A> Group<A>(a1, a2, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
}

uint64_t _UnaryViewAdaptor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Spacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Spacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Spacer>, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance Spacer()
{
  specialized View.bodyError()(0x726563617053, (void *)0xE600000000000000);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _TextBaselineRelativeSpacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_TextBaselineRelativeSpacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_TextBaselineRelativeSpacer>, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _TextBaselineRelativeSpacer()
{
  specialized View.bodyError()(0xD00000000000001BLL, (void *)0x80000002352E64F0);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _HSpacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_HSpacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_HSpacer>, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _HSpacer()
{
  specialized View.bodyError()(0x726563617053485FLL, (void *)0xE800000000000000);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _VSpacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_VSpacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_VSpacer>, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _VSpacer()
{
  specialized View.bodyError()(0x726563617053565FLL, (void *)0xE800000000000000);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HStack<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for HStack<A>, a4);
}

void protocol witness for View.body.getter in conformance HStack<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _PreferenceReadingView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for _PreferenceReadingView<A, B>, a4);
}

void protocol witness for View.body.getter in conformance _PreferenceReadingView<A, B>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Text@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Text>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Text>, (uint64_t)&type metadata for Text, (uint64_t)&protocol witness table for Text);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance Text()
{
  specialized View.bodyError()(1954047316, (void *)0xE400000000000000);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StyledTextContentView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<StyledTextContentView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance StyledTextContentView()
{
  specialized View.bodyError()(0xD000000000000015, (void *)0x80000002352E64D0);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DynamicTextView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<DynamicTextView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<DynamicTextView>, (uint64_t)&type metadata for DynamicTextView, (uint64_t)&protocol witness table for DynamicTextView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance DynamicTextView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static MultiView._viewListCount(inputs:)()
{
  return 0;
}

void protocol witness for View.body.getter in conformance MaterialView<A>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance <> _VariadicView.Tree<A, B>(uint64_t a1, uint64_t a2)
{
  protocol witness for View.body.getter in conformance <> _VariadicView.Tree<A, B>(a1, a2, (uint64_t)&protocol conformance descriptor for <> _VariadicView.Tree<A, B>);
}

uint64_t specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  int ShouldRecordTree;
  __int128 v16;
  int v19;
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;

  v3 = a1[3];
  *(_OWORD *)&v21[16] = a1[2];
  v22 = v3;
  v23 = a1[4];
  v24 = *((_DWORD *)a1 + 20);
  v4 = a1[1];
  v20 = *a1;
  *(_OWORD *)v21 = v4;
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v25);
  v5 = v25;
  v6 = v26;
  v7 = v27;
  v16 = v28;
  v8 = v29;
  v9 = v30;
  v10 = v31;
  v11 = v32;
  v12 = v33;
  v13 = v34;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v19 = a2;
  *(_QWORD *)&v20 = v5;
  DWORD2(v20) = v6;
  *(_QWORD *)v21 = v7;
  *(_OWORD *)&v21[8] = v16;
  *(_QWORD *)&v21[24] = v8;
  *(_QWORD *)&v22 = v9;
  *((_QWORD *)&v22 + 1) = v10;
  LODWORD(v23) = v11;
  *((_QWORD *)&v23 + 1) = v12;
  LOBYTE(v24) = v13;
  off_25619D6D0((uint64_t)&v20, a3);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  _BYTE v5[88];

  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)v5);
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    specialized static ForEach<>._makeViewList(view:inputs:)(a1, (uint64_t)v5, a2);
    AGSubgraphEndTreeElement();
  }
  else
  {
    specialized static ForEach<>._makeViewList(view:inputs:)(a1, (uint64_t)v5, a2);
  }
  return outlined release of _ViewListInputs((uint64_t)v5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GeometryReader<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for GeometryReader<A>, a4);
}

void protocol witness for View.body.getter in conformance GeometryReader<A>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance EnvironmentReader<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DelayedPreferenceView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for _DelayedPreferenceView<A, B>, a4);
}

void protocol witness for View.body.getter in conformance _DelayedPreferenceView<A, B>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DetachedView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for _DetachedView<A, B, C>, a4);
}

void protocol witness for View.body.getter in conformance _DetachedView<A, B, C>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DetachedPlaceholder<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for _DetachedPlaceholder<A>, a4);
}

void protocol witness for View.body.getter in conformance _DetachedPlaceholder<A>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance _AnimationView<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Color@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Color>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Color>, (uint64_t)&type metadata for Color, (uint64_t)&protocol witness table for Color);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance Color()
{
  specialized View.bodyError()(0x726F6C6F43, (void *)0xE500000000000000);
}

void specialized View.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = 0x73694C776569565FLL;
  v0._object = (void *)0xEE00776569565F74;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = 0x746E656D656C45;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x80000002352E64B0;
  v0._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void View.bodyError()()
{
  specialized View.bodyError()();
}

uint64_t _UnaryViewAdaptor.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _UnaryViewAdaptor.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_UnaryViewAdaptor.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _UnaryViewAdaptor.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

double static _UnaryViewAdaptor._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int ShouldRecordTree;
  void (*v18)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v20 = *((_DWORD *)a2 + 7);
  v21 = *((_DWORD *)a2 + 6);
  v29 = *((_DWORD *)a2 + 9);
  v30 = *((_DWORD *)a2 + 8);
  v11 = a2[5];
  v12 = a2[6];
  v27 = *((_DWORD *)a2 + 15);
  v28 = *((_DWORD *)a2 + 14);
  v25 = *((_DWORD *)a2 + 17);
  v26 = *((_DWORD *)a2 + 16);
  v23 = *((_DWORD *)a2 + 19);
  v24 = *((_DWORD *)a2 + 18);
  v22 = *((_DWORD *)a2 + 20);
  v35 = a3;
  v36 = a4;
  LODWORD(v37) = v7;
  v13 = type metadata accessor for _UnaryViewAdaptor(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v13, v14, v15);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:), a3, &v53);
  v16 = v53;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v53 = v8;
  v55 = v10;
  v54 = v9;
  v56 = v21;
  v57 = v20;
  v59 = v29;
  v60 = v11;
  v61 = v12;
  v62 = v28;
  v63 = v27;
  v64 = v26;
  v65 = v25;
  v66 = v24;
  v67 = v23;
  v68 = v22;
  v32 = v16;
  v37 = v8;
  v38 = v9;
  v39 = v10;
  v40 = v21;
  v41 = v20;
  v42 = 0;
  v43 = v29;
  v44 = v11;
  v45 = v12;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v51 = v23;
  v52 = v22;
  v18 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(&v33, &v32, &v37, a3, a4);
  v58 = v30;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v33, (uint64_t)&v53);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a5 = v33;
  result = v34;
  a5[1] = v34;
  return result;
}

uint64_t closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _UnaryViewAdaptor(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

double protocol witness for static View._makeView(view:inputs:) in conformance _UnaryViewAdaptor<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static _UnaryViewAdaptor._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _UnaryViewAdaptor<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for _UnaryViewAdaptor<A>, a4);
}

void protocol witness for View.body.getter in conformance _UnaryViewAdaptor<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t static ViewDescriptor.typeCache.getter()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ViewDescriptor.typeCache.setter(void *a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static ViewDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ViewDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void one-time initialization function for conditionalCache()
{
  static ViewDescriptor.conditionalCache = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

uint64_t static ViewDescriptor.fetchConditionalType(key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  if (one-time initialization token for conditionalCache != -1)
    swift_once();
  swift_beginAccess();
  v4 = static ViewDescriptor.conditionalCache;
  if (*((_QWORD *)static ViewDescriptor.conditionalCache + 2)
    && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    v7 = v4[7] + 24 * v5;
    v8 = *(_QWORD *)v7;
    *(_QWORD *)a2 = *(_QWORD *)v7;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v7 + 8);
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v8);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0xF000000000000007;
  }
  return swift_endAccess();
}

uint64_t static ViewDescriptor.insertConditionalType(key:value:)(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  void *v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  if (one-time initialization token for conditionalCache != -1)
    swift_once();
  swift_beginAccess();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = static ViewDescriptor.conditionalCache;
  static ViewDescriptor.conditionalCache = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v5, a1, isUniquelyReferenced_nonNull_native);
  static ViewDescriptor.conditionalCache = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance ViewDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance ViewDescriptor(void *a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static ViewDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance ViewDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for static ConditionalProtocolDescriptor.insertConditionalType(key:value:) in conformance ViewDescriptor(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  void *v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  if (one-time initialization token for conditionalCache != -1)
    swift_once();
  swift_beginAccess();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = static ViewDescriptor.conditionalCache;
  static ViewDescriptor.conditionalCache = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v5, a1, isUniquelyReferenced_nonNull_native);
  static ViewDescriptor.conditionalCache = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void protocol witness for View.body.getter in conformance EmptyView()
{
  specialized View.bodyError()(0x6569567974706D45, (void *)0xE900000000000077);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = *a1;
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 20);
  v11 = *a2;
  v12 = v5;
  v13 = v6;
  v8 = *(_OWORD *)(a2 + 5);
  v14 = *(_OWORD *)(a2 + 3);
  v15 = v8;
  v16 = *(_OWORD *)(a2 + 7);
  v17 = a2[9];
  v18 = v7;
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v4;
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v11, (uint64_t)partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:), v9, a3);
  return swift_release();
}

void protocol witness for View.body.getter in conformance _VariadicView_Children()
{
  specialized View.bodyError()();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _VariadicView_Children.Element@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_VariadicView_Children.Element>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_VariadicView_Children.Element>, (uint64_t)&type metadata for _VariadicView_Children.Element, (uint64_t)&protocol witness table for _VariadicView_Children.Element);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _VariadicView_Children.Element()
{
  specialized View.bodyError()();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ViewList_View@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ViewList_View>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ViewList_View>, (uint64_t)&type metadata for _ViewList_View, (uint64_t)&protocol witness table for _ViewList_View);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _ViewList_View()
{
  specialized View.bodyError()();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for PhaseAnimator<A, B>.StateTransitioningContainer, a4);
}

void protocol witness for View.body.getter in conformance PhaseAnimator<A, B>.StateTransitioningContainer()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance AnyView()
{
  specialized View.bodyError()(0x77656956796E41, (void *)0xE700000000000000);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _BackdropEffectPlaceholder@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_BackdropEffectPlaceholder>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_BackdropEffectPlaceholder>, (uint64_t)&type metadata for _BackdropEffectPlaceholder, (uint64_t)&protocol witness table for _BackdropEffectPlaceholder);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _BackdropEffectPlaceholder()
{
  specialized View.bodyError()(0xD00000000000001ALL, (void *)0x80000002352E6490);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MeshGradient@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<MeshGradient>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  protocol witness for View.body.getter in conformance <A> Group<A>(a1, a2, (uint64_t)&protocol conformance descriptor for <A> A?);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TestIDView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for TestIDView<A, B>, a4);
}

void protocol witness for View.body.getter in conformance TestIDView<A, B>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2)
{
  protocol witness for View.body.getter in conformance <> _VariadicView.Tree<A, B>(a1, a2, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
}

void protocol witness for View.body.getter in conformance <> _VariadicView.Tree<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v3;

  v3 = vextq_s8(*(int8x16_t *)(a2 - 16), *(int8x16_t *)(a2 - 16), 8uLL);
  MEMORY[0x23B7C9C04](a3, a1, &v3);
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance <> ForEach<A, B, C>(uint64_t a1, uint64_t a2)
{
  protocol witness for View.body.getter in conformance <A> Group<A>(a1, a2, (uint64_t)"Q&:\x1B j\t");
}

void protocol witness for View.body.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x23B7C9C04](a3, a1, &v3);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Canvas<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for Canvas<A>, a4);
}

void protocol witness for View.body.getter in conformance Canvas<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ColorView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<ColorView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance ColorView()
{
  specialized View.bodyError()(0x656956726F6C6F43, (void *)0xE900000000000077);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for _ShapeView<A, B>, a4);
}

void protocol witness for View.body.getter in conformance _ShapeView<A, B>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnimatedShape<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for AnimatedShape<A>, a4);
}

void protocol witness for View.body.getter in conformance AnimatedShape<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FillShapeView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for FillShapeView<A, B, C>, a4);
}

void protocol witness for View.body.getter in conformance FillShapeView<A, B, C>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StrokeShapeView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for StrokeShapeView<A, B, C>, a4);
}

void protocol witness for View.body.getter in conformance StrokeShapeView<A, B, C>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StrokeBorderShapeView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for StrokeBorderShapeView<A, B, C>, a4);
}

void protocol witness for View.body.getter in conformance StrokeBorderShapeView<A, B, C>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BackdropView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<BackdropView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance BackdropView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Image@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[6];

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Image>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Image>, (uint64_t)&type metadata for Image, (uint64_t)&protocol witness table for Image);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(_QWORD *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(_QWORD *)(v14 + 64) = v9;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance Image()
{
  specialized View.bodyError()(0x6567616D49, (void *)0xE500000000000000);
}

void specialized PrimitiveView.body.getter()
{
  specialized View.bodyError()();
}

uint64_t partial apply for closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for _UnaryViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UnaryViewAdaptor);
}

uint64_t dispatch thunk of static View._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static View._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static View._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of View.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t getEnumTagSinglePayload for _UnaryViewAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_235049504 + 4 * byte_2352BFFB0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _UnaryViewAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t dispatch thunk of ViewVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ViewTypeVisitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for ViewDescriptor()
{
  return &type metadata for ViewDescriptor;
}

uint64_t sub_235049740()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v7[5];
  int v8;

  v3 = *(_DWORD *)(v2 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_DWORD *)(a1 + 80);
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  return specialized closure #1 in static View.makeImplicitRoot(view:inputs:)(v7, v3, a2);
}

void specialized View.bodyError()(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnimatablePair.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_2350498C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for AnimatablePair()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t AnimatablePair.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))(a2, v3 + *(int *)(a3 + 52));
}

void static AnimatablePair.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  static AnimatablePair.-= infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))MEMORY[0x24BEE2F80]);
}

void static AnimatablePair.zero.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[4];

  MEMORY[0x24BDAC7A8](a1);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of IteratorProtocol.next()();
  dispatch thunk of IteratorProtocol.next()();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a1);
  v14[0] = a1;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  type metadata accessor for AnimatablePair();
}

uint64_t sub_235049A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void static AnimatablePair.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  static AnimatablePair.-= infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))MEMORY[0x24BEE2F78]);
}

void static AnimatablePair.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  a7();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_235049AD0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return v1(v5 + *(int *)(a1 + 52), v4 + *(int *)(a1 + 52), v3, *(_QWORD *)(v2 + 8));
}

Swift::Void __swiftcall AnimatablePair.scale(by:)(Swift::Double by)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 32) + 16))(*(_QWORD *)(v1 + 16));
  (*(void (**)(_QWORD, double))(*(_QWORD *)(v2 + 40) + 16))(*(_QWORD *)(v2 + 24), by);
}

double AnimatablePair.magnitudeSquared.getter(_QWORD *a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(a1[4] + 24))(a1[2]);
  return v2 + (*(double (**)(_QWORD))(a1[5] + 24))(a1[3]);
}

uint64_t Array<A>.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  char *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[6];

  v10[5] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v5 = type metadata accessor for Array();
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v5);
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Array<A>.animatableData.getter, (uint64_t)v10, v5, AssociatedTypeWitness, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  *a4 = result;
  return result;
}

uint64_t Array<A>.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  _QWORD v17[2];

  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)v17 - v7;
  v9 = swift_bridgeObjectRetain();
  v10 = MEMORY[0x23B7C6268](v9, v5);
  swift_bridgeObjectRelease();
  v11 = swift_bridgeObjectRetain();
  v12 = MEMORY[0x23B7C6268](v11, AssociatedTypeWitness);
  result = swift_bridgeObjectRelease();
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  if (v14 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v14)
    {
      v15 = 0;
      v17[0] = *(_QWORD *)(a3 + 32);
      v17[1] = a2;
      do
      {
        v16 = v14;
        swift_bridgeObjectRetain();
        Array.subscript.getter();
        swift_bridgeObjectRelease();
        Array._makeMutableAndUnique()();
        Array._checkSubscript_mutating(_:)(v15);
        _swift_isClassOrObjCExistentialType();
        ((void (*)(char *, uint64_t, uint64_t))v17[0])(v8, v5, a3);
        v14 = v16;
        ++v15;
      }
      while (v16 != v15);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void static AnimatablePair.- infix(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  static AnimatablePair.- infix(_:_:)(a1, a2, a3, a4, a5, a6);
}

{
  uint64_t v9;
  double v10;
  void (*v11)(double);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = a5;
  v13 = a6;
  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11(v10);
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = v12;
  type metadata accessor for AnimatablePair();
}

uint64_t static AnimatablePair.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for AnimatablePair();
  return 0;
}

uint64_t AnimatablePair.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AnimatablePair.first.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AnimatablePair.first.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimatablePair.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t AnimatablePair.second.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*AnimatablePair.second.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void key path getter for AnimatablePair.subscript() : <A, B>AnimatablePair<A, B>AB()
{
  uint64_t TupleTypeMetadata2;
  uint64_t v1;
  uint64_t v2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_23504A05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  AnimatablePair.subscript.getter(v7, v6, a1);
  v10 = v5 + *(int *)(v4 + 48);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v11(v5, v7, v3);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v12(v10, v6, v1);
  v13 = v2 + *(int *)(v4 + 48);
  v11(v2, v5, v3);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v13, v10, v1);
}

void key path setter for AnimatablePair.subscript() : <A, B>AnimatablePair<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a4 + a3 - 32);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v16 = *(_OWORD *)(a4 + a3 - 24);
  v7 = v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v16 - v10;
  v13 = *(int *)(v12 + 48);
  v14 = &v11[v13];
  v15 = a1 + v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(v5 - 8) + 16))(v11, a1, v5, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v14, v15, v7);
  v17 = v5;
  v18 = v16;
  v19 = v6;
  type metadata accessor for AnimatablePair();
}

uint64_t sub_23504A1BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return AnimatablePair.subscript.setter(v1, v2, a1);
}

uint64_t AnimatablePair.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, double);
  void (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a3;
  v23 = a2;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - v11;
  v14 = (char *)&v22 + *(int *)(v13 + 48) - v11;
  v15 = *(_QWORD *)(v5 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 32);
  v16((char *)&v22 - v11, a1, v5, v10);
  v22 = *(_QWORD *)(v4 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  v17(v14, v23, v4);
  v18 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v16)(v8, v12, v5);
  v17(v18, (uint64_t)v14, v4);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 40);
  v20 = v25;
  v19(v25, v8, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 40))(v20 + *(int *)(v24 + 52), v18, v4);
}

void (*AnimatablePair.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(void);
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);

  v5 = malloc(0x58uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v5[2] = v6;
  v5[3] = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[4] = TupleTypeMetadata2;
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v5[5] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[6] = malloc(v10);
  v11 = (char *)malloc(v10);
  v5[7] = v11;
  v12 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v5 + 20) = v12;
  v13 = &v11[v12];
  v14 = *(void (**)(void))(*(_QWORD *)(v6 - 8) + 16);
  v5[8] = v14;
  v14();
  v15 = v2 + *(int *)(a2 + 52);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v5[9] = v16;
  v16(v13, v15, v7);
  return AnimatablePair.subscript.modify;
}

void AnimatablePair.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, char *, uint64_t);
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 72);
    v5 = *(void **)(v2 + 48);
    v4 = *(char **)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 32);
    v11 = *(_QWORD *)(v2 + 40);
    v7 = *(_QWORD *)(v2 + 24);
    v8 = *(_QWORD *)v2;
    v9 = &v4[*(int *)(v2 + 80)];
    v10 = (uint64_t)v5 + *(int *)(v6 + 48);
    (*(void (**)(void *, char *, _QWORD))(v2 + 64))(v5, v4, *(_QWORD *)(v2 + 16));
    v3(v10, v9, v7);
    AnimatablePair.subscript.setter((uint64_t)v5, v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v6);
  }
  else
  {
    v5 = *(void **)(v2 + 48);
    v4 = *(char **)(v2 + 56);
    AnimatablePair.subscript.setter((uint64_t)v4, (uint64_t)&v4[*(int *)(v2 + 80)], *(_QWORD *)v2);
  }
  free(v4);
  free(v5);
  free((void *)v2);
}

void static AnimatablePair.+ infix(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  static AnimatablePair.- infix(_:_:)(a1, a2, a3, a4, a5, a6);
}

void sub_23504A5D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4(v9 + *(int *)(a1 + 52), v8 + *(int *)(a1 + 52), v1, *(_QWORD *)(v2 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v10 - 128), v3, v6);
  *(_QWORD *)(v10 - 112) = v6;
  *(_QWORD *)(v10 - 104) = v1;
  *(_QWORD *)(v10 - 96) = v5;
  *(_QWORD *)(v10 - 88) = v2;
  type metadata accessor for AnimatablePair();
}

uint64_t sub_23504A620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 120) + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

uint64_t protocol witness for VectorArithmetic.scale(by:) in conformance AnimatablePair<A, B>(_QWORD *a1, double a2)
{
  (*(void (**)(_QWORD))(a1[4] + 16))(a1[2]);
  return (*(uint64_t (**)(_QWORD, double))(a1[5] + 16))(a1[3], a2);
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance AnimatablePair<A, B>(_QWORD *a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(a1[4] + 24))(a1[2]);
  return v2 + (*(double (**)(_QWORD))(a1[5] + 24))(a1[3]);
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance AnimatablePair<A, B>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  MEMORY[0x24BDAC7A8](a1);
  v4 = *(_QWORD *)(v3 + 16);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of IteratorProtocol.next()();
  dispatch thunk of IteratorProtocol.next()();
  AnimatablePair.init(_:_:)((uint64_t)v6, v4, a2);
}

void protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE2F68], a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, a4, (void (*)(void))MEMORY[0x24BEE2F78]);
}

void protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE2F70], a4);
}

void protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t, _QWORD)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  uint64_t v17;
  uint64_t v18;

  v18 = a5;
  v9 = *(_QWORD *)(a3 + 24);
  MEMORY[0x24BDAC7A8](a1);
  v11 = *(_QWORD *)(v10 + 16);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v13);
  a4(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52), v9, *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8));
  AnimatablePair.init(_:_:)((uint64_t)v15, v11, v18);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, a4, (void (*)(void))MEMORY[0x24BEE2F80]);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  return ((uint64_t (*)(uint64_t, uint64_t))a5)(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatablePair<A, B>()
{
  return static AnimatablePair.== infix(_:_:)();
}

uint64_t AnimatableArray.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnimatableArray.elements.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AnimatableArray.elements.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimatableArray.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static AnimatableArray.zero.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Array._allocateUninitialized(_:)();
  *a1 = result;
  return result;
}

uint64_t static AnimatableArray.+= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatableArray.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(unint64_t, char *, uint64_t, _QWORD))MEMORY[0x24BEE2F78]);
}

uint64_t static AnimatableArray.-= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatableArray.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(unint64_t, char *, uint64_t, _QWORD))MEMORY[0x24BEE2F80]);
}

uint64_t static AnimatableArray.+= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unint64_t, char *, uint64_t, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(unint64_t, char *, uint64_t, _QWORD);
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t, _QWORD);
  uint64_t v23;
  char isClassOrObjCExistentialType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  v14 = swift_bridgeObjectRetain();
  v15 = MEMORY[0x23B7C6268](v14, a3);
  swift_bridgeObjectRelease();
  result = MEMORY[0x23B7C6268](v13, a3);
  if (result >= v15)
    v17 = v15;
  else
    v17 = result;
  if (v17 < 0)
  {
    __break(1u);
  }
  else
  {
    v27 = a4;
    if (v17)
    {
      v18 = a5;
      v19 = 0;
      do
      {
        v20 = v19 + 1;
        v21 = v13;
        Array.subscript.getter();
        type metadata accessor for Array();
        v22 = v18;
        Array._makeMutableAndUnique()();
        v23 = *a1;
        Array._checkSubscript_mutating(_:)(v19);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        v25 = v23 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0)
          v25 = v23;
        v22(v25+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v19, v11, a3, *(_QWORD *)(v27 + 8));
        v18 = v22;
        result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
        v13 = v21;
        ++v19;
      }
      while (v17 != v20);
    }
  }
  return result;
}

uint64_t static AnimatableArray.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return static AnimatableArray.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.+= infix(_:_:), a5);
}

uint64_t static AnimatableArray.- infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return static AnimatableArray.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.-= infix(_:_:), a5);
}

uint64_t static AnimatableArray.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD *, uint64_t *, uint64_t, uint64_t)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v12;

  v10 = *a2;
  *a6 = *a1;
  v12 = v10;
  swift_bridgeObjectRetain();
  return a5(a6, &v12, a3, a4);
}

Swift::Void __swiftcall AnimatableArray.scale(by:)(Swift::Double by)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, double);
  Swift::Int v9;
  Swift::Int v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D8], v5);
  RandomAccessCollection<>.indices.getter();
  v6 = v9;
  if (v9 != v10)
  {
    if (v10 < v9)
    {
      __break(1u);
    }
    else if (v9 < v10)
    {
      v7 = *(_QWORD *)(v2 + 24);
      v8 = *(void (**)(uint64_t, uint64_t, double))(v7 + 16);
      do
      {
        Array._makeMutableAndUnique()();
        Array._checkSubscript_mutating(_:)(v6);
        _swift_isClassOrObjCExistentialType();
        v8(v4, v7, by);
        ++v6;
      }
      while (v10 != v6);
      return;
    }
    __break(1u);
  }
}

double AnimatableArray.magnitudeSquared.getter()
{
  uint64_t v0;
  double v2;

  v0 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v0);
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static AnimatableArray.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance AnimatableArray<A>@<X0>(uint64_t *a1@<X8>)
{
  return static AnimatableArray.zero.getter(a1);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.+= infix(_:_:), a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatableArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static AnimatableArray.+= infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance AnimatableArray<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.-= infix(_:_:), a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD *, uint64_t *, uint64_t, uint64_t)@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v7 = *a2;
  *a5 = *a1;
  v11 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  swift_bridgeObjectRetain();
  return a4(a5, &v11, v8, v9);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance AnimatableArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static AnimatableArray.-= infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatableArray<A>()
{
  return static AnimatableArray.== infix(_:_:)();
}

uint64_t key path setter for Array<A>.animatableData : <A>[A](uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  v5 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  return Array<A>.animatableData.setter((uint64_t)&v7, v5, v4);
}

uint64_t partial apply for closure #1 in Array<A>.animatableData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 24))(*(_QWORD *)(v0 + 16));
}

uint64_t (*Array<A>.animatableData.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t *v3;

  a1[2] = a3;
  a1[3] = (uint64_t)v3;
  a1[1] = a2;
  Array<A>.animatableData.getter(*v3, *(_QWORD *)(a2 + 16), a3, a1);
  return Array<A>.animatableData.modify;
}

uint64_t Array<A>.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[2];
  v3 = a1[1];
  v5 = *a1;
  if ((a2 & 1) == 0)
    return Array<A>.animatableData.setter((uint64_t)&v5, v3, v2);
  swift_bridgeObjectRetain();
  Array<A>.animatableData.setter((uint64_t)&v5, v3, v2);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  char isClassOrObjCExistentialType;
  uint64_t v5;

  v2 = v1;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v5 = v2 & 0xFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v5 = v2;
  if (*(_QWORD *)(v5 + 16) <= (unint64_t)a1)
    goto LABEL_7;
}

double partial apply for closure #1 in AnimatableArray.magnitudeSquared.getter@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v4;
  double result;

  v4 = *a1;
  result = v4
         + (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 24) + 24))(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnimatablePair<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in AnimatablePair<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for AnimatableArray<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableArray<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in AnimatableArray<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_23504B13C()
{
  return 32;
}

__n128 sub_23504B148(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_23504B154@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = Array<A>.animatableData.getter(*a1, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_23504B198()
{
  return 16;
}

__n128 sub_23504B1A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimatablePair(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23504B28C + 4 * byte_2352C00B8[v17 - 1]))();
}

void storeEnumTagSinglePayload for AnimatablePair(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for AnimatableArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatableArray);
}

uint64_t key path getter for _ViewInputs.environment : _ViewInputs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 16);
  return result;
}

double _GestureInputs.init(_:viewSubgraph:events:time:resetSeed:inheritedPhase:gesturePreferenceKeys:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  double result;
  uint64_t v12;

  v8 = *a1;
  v9 = a1[2];
  v10 = *((_DWORD *)a1 + 20);
  *(_DWORD *)(a8 + 116) = a6;
  *(_DWORD *)(a8 + 120) = 0;
  *(_QWORD *)a8 = v8;
  *(_QWORD *)(a8 + 16) = v9;
  *(_OWORD *)(a8 + 24) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a8 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a8 + 56) = *(_OWORD *)(a1 + 7);
  result = *((double *)a1 + 9);
  *(double *)(a8 + 72) = result;
  *(_DWORD *)(a8 + 80) = v10;
  *(_DWORD *)(a8 + 8) = a4;
  *(_DWORD *)(a8 + 112) = a5;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a8 + 88) = a2;
  *(_QWORD *)(a8 + 96) = v12;
  *(_DWORD *)(a8 + 104) = a7;
  *(_DWORD *)(a8 + 108) = a3;
  return result;
}

void static _GestureInputs.Options.gestureGraph.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _GestureInputs.Options.skipCombiners.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _GestureInputs.Options.includeDebugOutput.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

unint64_t _GestureOutputs.debugData.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  LODWORD(v1) = *(_DWORD *)(v0 + 4);
  v2 = (_DWORD)v1 == *MEMORY[0x24BE096C0];
  if ((_DWORD)v1 == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = v1;
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t _GestureOutputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;

  v4 = PreferencesOutputs.subscript.getter(a1, a3, a4, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t _GestureOutputs.init(phase:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *MEMORY[0x24BE096C0];
  *(_QWORD *)(a2 + 8) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)a2 = result;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

void protocol witness for Gesture.body.getter in conformance SimultaneousGesture<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for SimultaneousGesture<A, B>, a1);
  specialized PrimitiveGesture.body.getter();
}

void PrimitiveGesture.body.getter()
{
  specialized PrimitiveGesture.body.getter();
}

void protocol witness for Gesture.body.getter in conformance ExclusiveGesture<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExclusiveGesture<A, B>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t _GestureInputs.time.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

unint64_t _GestureInputs.animatedPosition()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v1 = *(_QWORD *)v0;
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_DWORD *)(v0 + 80);
  AGGraphClearUpdate();
  v7 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v8 = *(_QWORD *)(v0 + 32);
  v14 = *(_QWORD *)(v0 + 24);
  v15 = v8;
  v16 = v4;
  v17 = v5;
  v18 = *(_OWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 72);
  v20 = v6;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = CachedEnvironment.animatedPosition(for:)(&v11);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v9;
}

uint64_t _GestureInputs.transform.getter()
{
  id v0;
  uint64_t IndirectAttribute2;
  _OWORD v3[2];
  uint64_t v4;

  memset(v3, 0, sizeof(v3));
  v4 = 0;
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v3, 0);
  AGGraphClearUpdate();
  v0 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return IndirectAttribute2;
}

void static _GestureInputs.Options.preconvertedEventLocations.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for Gesture.body.getter in conformance ModifierGesture<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t _GestureInputs.position.getter()
{
  id v0;
  uint64_t IndirectAttribute2;

  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v0 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return IndirectAttribute2;
}

uint64_t _GestureInputs.size.getter()
{
  id v0;
  uint64_t IndirectAttribute2;

  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v0 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return IndirectAttribute2;
}

uint64_t _GestureOutputs.debugData.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  v2 = *MEMORY[0x24BE096C0];
  if ((result & 0x100000000) == 0)
    v2 = result;
  *(_DWORD *)(v1 + 4) = v2;
  return result;
}

void static _GestureInputs.Options.allowsIncompleteEventSequences.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void protocol witness for Gesture.body.getter in conformance EventListener<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListener<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

void protocol witness for Gesture.body.getter in conformance _EndedGesture<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EndedGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

void protocol witness for Gesture.body.getter in conformance _ChangedGesture<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ChangedGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t _GestureOutputs.withPhase<A>(_:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v4 = *(_DWORD *)(v2 + 4);
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_DWORD *)(v2 + 16);
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = v4;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance OpenURLGesture<A>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Gesture<>._makeGesture(gesture:inputs:)(a1, a2, a3, a4, a5);
}

uint64_t specialized static Gesture<>._makeGesture(gesture:inputs:)@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t result;
  int v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  static DynamicPropertyCache.fields(of:)(v5, (uint64_t)&v27);
  v6 = v27;
  v7 = v28;
  v8 = BYTE4(v28);
  v9 = a2[5];
  v31 = a2[4];
  v32 = v9;
  v33[0] = a2[6];
  *(_OWORD *)((char *)v33 + 12) = *(__int128 *)((char *)a2 + 108);
  v10 = a2[1];
  v27 = *a2;
  v28 = v10;
  v11 = a2[3];
  v29 = a2[2];
  v30 = v11;
  outlined retain of _GestureInputs((uint64_t)a2);
  v12 = a1;
  if ((v8 & 1) != 0)
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v20 + 8, v6, *((uint64_t *)&v6 + 1), v7, a1, (uint64_t)&v27);
  else
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v20 + 8, v6, *((uint64_t *)&v6 + 1), v7, a1, (uint64_t)&v27);
  v13 = *((_QWORD *)&v20 + 1);
  v14 = v21;
  v15 = BYTE8(v21);
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)a2, (uint64_t)&v20);
  v16 = v20;
  v18 = v21;
  if ((v15 & 1) == 0)
  {
    LOBYTE(v20) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v12, v6, *((uint64_t *)&v6 + 1), v7, v13, v14);
  }
  v24 = v31;
  v25 = v32;
  v26[0] = v33[0];
  *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)((char *)v33 + 12);
  v20 = v27;
  v21 = v28;
  v22 = v29;
  v23 = v30;
  outlined release of _GestureInputs((uint64_t)&v20);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_OWORD *)a3 = v16;
  *(_DWORD *)(a3 + 16) = v18;
  return result;
}

{
  __int128 v5;
  char v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t result;
  int v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)((uint64_t)&type metadata for DistanceGesture, (uint64_t)&v26);
  v5 = v26;
  v6 = v27;
  v7 = BYTE4(v27);
  v8 = a2[5];
  v30 = a2[4];
  v31 = v8;
  v32[0] = a2[6];
  *(_OWORD *)((char *)v32 + 12) = *(__int128 *)((char *)a2 + 108);
  v9 = a2[1];
  v26 = *a2;
  v27 = v9;
  v10 = a2[3];
  v28 = a2[2];
  v29 = v10;
  outlined retain of _GestureInputs((uint64_t)a2);
  v11 = a1;
  if ((v7 & 1) != 0)
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v19, (uint64_t)&v19 + 8, v5, *((uint64_t *)&v5 + 1), v6, a1, (uint64_t)&v26);
  else
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v19, (uint64_t)&v19 + 8, v5, *((uint64_t *)&v5 + 1), v6, a1, (uint64_t)&v26);
  v12 = *((_QWORD *)&v19 + 1);
  v13 = v20;
  v14 = BYTE8(v20);
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)a2, (uint64_t)&v19);
  v15 = v19;
  v17 = v20;
  if ((v14 & 1) == 0)
  {
    LOBYTE(v19) = v6;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v11, v5, *((uint64_t *)&v5 + 1), v6, v12, v13);
  }
  v23 = v30;
  v24 = v31;
  v25[0] = v32[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v32 + 12);
  v19 = v26;
  v20 = v27;
  v21 = v28;
  v22 = v29;
  outlined release of _GestureInputs((uint64_t)&v19);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_OWORD *)a3 = v15;
  *(_DWORD *)(a3 + 16) = v17;
  return result;
}

void specialized static Gesture<>._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  _BYTE v8[20];
  _BYTE v9[4];
  _QWORD v10[2];
  unsigned __int8 v11;
  unsigned int v12;

  static DynamicPropertyCache.fields(of:)(MEMORY[0x24BEE4078], (uint64_t)v10);
  v4 = v10[0];
  v5 = v10[1];
  v6 = v11;
  v7 = v12;
  outlined retain of _GestureInputs(a2);
  LOBYTE(v10[0]) = v6;
  specialized BodyAccessor.makeBody(container:inputs:fields:)(v9, v8, a1, v10, v4, v5, v6 | ((unint64_t)v7 << 32));
}

void sub_23504BFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v14;

  specialized static Gesture<>._makeGesture(gesture:inputs:)(a14, v14);
}

uint64_t sub_23504BFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if ((*(_BYTE *)(v2 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? v1 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v9 = 2;
    else
      v9 = 1;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v9, 0x100000000, v2);
  }
  if ((v7 & 1) == 0)
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v6, v3, v4, v5, v12, v11);
  outlined release of _GestureInputs(v2);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)v0 = v13;
  *(_QWORD *)(v0 + 8) = v14;
  *(_DWORD *)(v0 + 16) = v15;
  return result;
}

uint64_t static Gesture<>._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  __int128 v33;
  int v34;
  int v35;
  char v36;
  char v37;
  int v38;
  __int128 v39;
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[28];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = a2[5];
  v61 = a2[4];
  v62 = v9;
  *(_OWORD *)v63 = a2[6];
  *(_OWORD *)&v63[12] = *(__int128 *)((char *)a2 + 108);
  v10 = a2[1];
  v57 = *a2;
  v58 = v10;
  v11 = a2[3];
  v59 = a2[2];
  v60 = v11;
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v50);
  v12 = v50;
  v13 = v51;
  v14 = DWORD1(v51);
  v54 = v61;
  v55 = v62;
  v56[0] = *(_OWORD *)v63;
  *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)&v63[12];
  v50 = v57;
  v51 = v58;
  v52 = v59;
  v53 = v60;
  v34 = v14;
  v35 = v8;
  LODWORD(v42) = v8;
  v43 = v12;
  v37 = v13;
  LOBYTE(v44) = v13;
  DWORD1(v44) = v14;
  outlined retain of _GestureInputs((uint64_t)&v57);
  v16 = type metadata accessor for GestureBodyAccessor(0, a3, a4, v15);
  v17 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureBodyAccessor<A>, v16);
  BodyAccessor.makeBody(container:inputs:fields:)(&v38, (uint64_t)&v39, (uint64_t)&v42, (uint64_t)&v50, (uint64_t)&v43, v16, v17);
  v33 = v39;
  v36 = v40;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = v61;
  v48 = v62;
  v49[0] = *(_OWORD *)v63;
  *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)&v63[12];
  v43 = v57;
  v44 = v58;
  v45 = v59;
  v46 = v60;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(__int128 *__return_ptr, int *, __int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v39, &v38, &v43, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v63[24] & 8) != 0 && !(swift_conformsToProtocol2() ? AssociatedTypeWitness : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v21 = 2;
    else
      v21 = 1;
    LOBYTE(v42) = v21;
    v47 = v61;
    v48 = v62;
    v49[0] = *(_OWORD *)v63;
    *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)&v63[12];
    v43 = v57;
    v44 = v58;
    v45 = v59;
    v46 = v60;
    v22 = DWORD1(v39);
    v23 = swift_getAssociatedTypeWitness();
    v26 = type metadata accessor for _GestureOutputs(0, v23, v24, v25);
    v27 = v22 == *MEMORY[0x24BE096C0];
    if (v22 == *MEMORY[0x24BE096C0])
      v28 = 0;
    else
      v28 = v22;
    LOBYTE(v38) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(AssociatedTypeWitness, (char *)&v42, 0x100000000, &v43, v28 | ((unint64_t)v27 << 32), 0x100000000, v26);
  }
  v29 = *((_QWORD *)&v39 + 1);
  v30 = v39;
  v31 = v40;
  if ((v36 & 1) == 0)
  {
    v42 = v33;
    v38 = v35;
    v39 = v12;
    LOBYTE(v40) = v37;
    v41 = v34;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v38, (uint64_t *)&v39, a3);
  }
  v47 = v54;
  v48 = v55;
  v49[0] = v56[0];
  *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)((char *)v56 + 12);
  v43 = v50;
  v44 = v51;
  v45 = v52;
  v46 = v53;
  outlined release of _GestureInputs((uint64_t)&v43);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v30;
  *(_QWORD *)(a5 + 8) = v29;
  *(_DWORD *)(a5 + 16) = v31;
  return result;
}

uint64_t _GestureInputs.makeDefaultOutputs<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v4 + 96);
  v7 = *(_DWORD *)(v4 + 104);
  v8 = *(_DWORD *)(v4 + 120);
  v9 = type metadata accessor for GesturePhase(0, a1, a2, a3);
  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GesturePhase<A>, v9);
  DefaultRule.init()(&v22);
  v20 = v22;
  v26 = v9;
  v12 = type metadata accessor for DefaultRule(0, v9, v10, v11);
  v27 = v12;
  v28 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultRule<A>, v12);
  v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v20, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v25, v12, MEMORY[0x24BEE4078], v13, MEMORY[0x24BEE40A8], v14);
  v15 = v24;
  v16 = *MEMORY[0x24BE096C0];
  if ((v8 & 8) != 0)
  {
    v22 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>();
    v16 = Attribute.init<A>(body:value:flags:update:)();
  }
  v20 = v6;
  v21 = v7;
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v22);
  v17 = v22;
  v18 = v23;
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a4 = v15;
  *(_DWORD *)(a4 + 4) = v16;
  *(_QWORD *)(a4 + 8) = v17;
  *(_DWORD *)(a4 + 16) = v18;
  return result;
}

void _GestureInputs.mergeViewInputs(_:viewSubgraph:)(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;

  v4 = *a1;
  v5 = a1[2];
  v6 = a1[5];
  v7 = a1[6];
  v19 = *((_DWORD *)a1 + 20);
  v21 = *(_DWORD *)(v2 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)v2 = v4;
  *(_QWORD *)(v2 + 16) = v5;
  v8 = a1[4];
  *(_QWORD *)(v2 + 24) = a1[3];
  *(_QWORD *)(v2 + 32) = v8;
  *(_QWORD *)(v2 + 40) = v6;
  *(_QWORD *)(v2 + 48) = v7;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 7);
  *(_QWORD *)(v2 + 72) = a1[9];
  *(_DWORD *)(v2 + 80) = v19;
  *(_DWORD *)(v2 + 8) = v21;
  swift_beginAccess();
  LODWORD(v6) = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v20 = *(_OWORD *)(v5 + 48);
  v22 = *(_OWORD *)(v5 + 32);
  v10 = *(_QWORD *)(v5 + 64);
  v11 = *(_QWORD *)(v5 + 72);
  v12 = *(_BYTE *)(v5 + 80);
  v13 = *(_BYTE *)(v5 + 81);
  v14 = *(_QWORD *)(v5 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v15, v16, v17);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = v6;
  *(_QWORD *)(v18 + 24) = v9;
  *(_OWORD *)(v18 + 32) = v22;
  *(_OWORD *)(v18 + 48) = v20;
  *(_QWORD *)(v18 + 64) = v10;
  *(_QWORD *)(v18 + 72) = v11;
  *(_BYTE *)(v18 + 80) = v12;
  *(_BYTE *)(v18 + 81) = v13;
  *(_QWORD *)(v18 + 88) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v2 + 16) = v18;
  objc_storeStrong((id *)(v2 + 88), a2);
}

uint64_t _GestureOutputs.overrideDefaultValues(_:)(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;

  v6 = *a1;
  v5 = a1[1];
  v7 = *((_QWORD *)a1 + 1);
  v8 = a1[4];
  v9 = *v4;
  v10 = v4[1];
  v11 = *((_QWORD *)v4 + 1);
  v12 = v4[4];
  v13 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a2 + 16), a3, a4);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GesturePhase<A>, v13);
  LOBYTE(v20) = 0;
  v15 = Attribute.overrideDefaultValue<A>(_:type:)(v6, v13, v9, v13, v13, v14);
  if (v10 != *MEMORY[0x24BE096C0] && v5 != *MEMORY[0x24BE096C0])
  {
    MEMORY[0x24BDAC7A8](v15);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    MEMORY[0x24BDAC7A8](v16);
    AGGraphMutateAttribute();
  }
  v20 = v11;
  v21 = v12;
  v18 = v7;
  v19 = v8;
  return PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v18);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DistanceGesture@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v8[6];
  _OWORD v9[2];

  v3 = *a1;
  v4 = a2[5];
  v8[4] = a2[4];
  v8[5] = v4;
  v9[0] = a2[6];
  *(_OWORD *)((char *)v9 + 12) = *(__int128 *)((char *)a2 + 108);
  v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  v6 = a2[3];
  v8[2] = a2[2];
  v8[3] = v6;
  return specialized static Gesture<>._makeGesture(gesture:inputs:)(v3, v8, a3);
}

uint64_t _GestureInputs.intern<A>(_:id:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v5;
  id v6;
  void *v7;
  id v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v5 = *a2;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v6 = (id)AGSubgraphGetCurrent();
    if (!v6)
      goto LABEL_8;
    v7 = v6;
    v8 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v8 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v12 = v5;
    v9 = default argument 1 of GraphHost.intern<A>(_:for:id:)(a3);
    v10 = GraphHost.intern<A>(_:for:id:)(a1, v9, &v12, a3);
    swift_release();
    return v10;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for Gesture.body.getter in conformance _MapGesture<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _MapGesture<A, B>, a1);
  specialized PrimitiveGesture.body.getter();
}

void protocol witness for Gesture.body.getter in conformance EmptyGesture<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t _GestureInputs.makeIndirectOutputs<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int IndirectAttribute2;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  int v25;
  _OWORD v26[10];

  v7 = type metadata accessor for GesturePhase(0, a1, a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v22 - v9;
  v11 = *(_QWORD *)(v4 + 96);
  v12 = *(_DWORD *)(v4 + 104);
  v13 = *(_DWORD *)(v4 + 120);
  static GesturePhase.defaultValue.getter(a1, v14, v15, v16);
  LOBYTE(v26[0]) = 0;
  _GestureInputs.intern<A>(_:id:)((uint64_t)v10, (char *)v26, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  v18 = *MEMORY[0x24BE096C0];
  if ((v13 & 8) != 0)
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v26[6] = xmmword_2561B4810;
    v26[7] = xmmword_2561B4820;
    v26[8] = xmmword_2561B4830;
    v26[2] = xmmword_2561B47D0;
    v26[3] = xmmword_2561B47E0;
    v26[4] = xmmword_2561B47F0;
    v26[5] = xmmword_2561B4800;
    v26[0] = static GestureDebug.Data.defaultValue;
    v26[1] = xmmword_2561B47C0;
    outlined retain of GestureDebug.Data((uint64_t)v26);
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v26, 0);
    outlined release of GestureDebug.Data((uint64_t)v26);
    v18 = AGGraphCreateIndirectAttribute2();
  }
  v22[2] = v11;
  v23 = v12;
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v24);
  v19 = v24;
  v20 = v25;
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a4 = IndirectAttribute2;
  *(_DWORD *)(a4 + 4) = v18;
  *(_QWORD *)(a4 + 8) = v19;
  *(_DWORD *)(a4 + 16) = v20;
  return result;
}

uint64_t _GestureOutputs.setIndirectDependency(_:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *MEMORY[0x24BE096C0];
  result = AGGraphSetIndirectDependency();
  if (v1 != v3)
    result = AGGraphSetIndirectDependency();
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v6 += 24;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void protocol witness for Gesture.body.getter in conformance AnyGesture<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

Swift::Void __swiftcall _GestureInputs.copyCaches()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v13 = *(_OWORD *)(v1 + 48);
  v14 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 81);
  v8 = *(_QWORD *)(v1 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v9, v10, v11);
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = v2;
  *(_QWORD *)(v12 + 24) = v3;
  *(_OWORD *)(v12 + 32) = v14;
  *(_OWORD *)(v12 + 48) = v13;
  *(_QWORD *)(v12 + 64) = v4;
  *(_QWORD *)(v12 + 72) = v5;
  *(_BYTE *)(v12 + 80) = v6;
  *(_BYTE *)(v12 + 81) = v7;
  *(_QWORD *)(v12 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v0 + 16) = v12;
}

uint64_t _GestureOutputs.attachIndirectOutputs(_:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(v1 + 4);
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(_DWORD *)(v1 + 16);
  AGGraphSetIndirectAttribute();
  if (v5 != *MEMORY[0x24BE096C0] && v2 != *MEMORY[0x24BE096C0])
    AGGraphSetIndirectAttribute();
  v11 = v6;
  v12 = v7;
  v9 = v3;
  v10 = v4;
  return PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v9);
}

Swift::Void __swiftcall _GestureOutputs.detachIndirectOutputs()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *MEMORY[0x24BE096C0];
  AGGraphSetIndirectAttribute();
  if (v1 != v3)
    AGGraphSetIndirectAttribute();
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (_DWORD *)(v2 + 48);
    do
    {
      v6 = *((_QWORD *)v5 - 1);
      v7 = *v5;
      v5 += 6;
      v8 = v7;
      (*(void (**)(int *, ValueMetadata *, _UNKNOWN **))(v6 + 16))(&v8, &type metadata for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs(), &protocol witness table for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs());
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t _GestureInputs.failedPhase.getter()
{
  return specialized _GestureInputs.intern<A>(_:id:)(768, 4);
}

void protocol witness for Gesture.body.getter in conformance SubviewsGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Gesture.body.getter in conformance A?<A>.Empty(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for A?<A>.Empty, a1);
  specialized PrimitiveGesture.body.getter();
}

void protocol witness for Gesture.body.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 - 8);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, a1, &v2);
  specialized PrimitiveGesture.body.getter();
}

uint64_t specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t *a1)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

double static PubliclyPrimitiveGesture._makeGesture(gesture:inputs:)@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)(a1, a2, a3);
}

double static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t AssociatedTypeWitness;
  _QWORD *KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD v35[2];
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v5 = a1[5];
  v41 = a1[4];
  v42 = v5;
  v43 = a1[6];
  v44 = *((_QWORD *)a1 + 14);
  v6 = a1[1];
  v37 = *a1;
  v38 = v6;
  v7 = a1[3];
  v39 = a1[2];
  v40 = v7;
  v8 = *((_DWORD *)a1 + 30);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  KeyPath = (_QWORD *)swift_getKeyPath();
  type metadata accessor for _GraphValue(0, a2, v11, v12);
  _GraphValue.subscript.getter(KeyPath, &v34);
  swift_release();
  v29 = v41;
  v30 = v42;
  v31 = v43;
  v32 = v44;
  v25 = v37;
  v26 = v38;
  v27 = v39;
  v28 = v40;
  v33 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_QWORD *__return_ptr, int *, __int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v35, &v34, &v25, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v8 & 8) != 0 && !(swift_conformsToProtocol2() ? AssociatedTypeWitness : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v15 = 2;
    else
      v15 = 1;
    LOBYTE(v34) = v15;
    v29 = v41;
    v30 = v42;
    v31 = v43;
    v32 = v44;
    v25 = v37;
    v26 = v38;
    v27 = v39;
    v28 = v40;
    v33 = v8;
    v16 = HIDWORD(v35[0]);
    v17 = swift_getAssociatedTypeWitness();
    v20 = type metadata accessor for _GestureOutputs(0, v17, v18, v19);
    if (v16 == *MEMORY[0x24BE096C0])
      v21 = 0;
    else
      v21 = v16;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(AssociatedTypeWitness, (char *)&v34, 0x100000000, &v25, v21 | ((unint64_t)(v16 == *MEMORY[0x24BE096C0]) << 32), 0x100000000, v20);
  }
  v22 = v35[1];
  v23 = v36;
  result = *(double *)v35;
  *(_QWORD *)a3 = v35[0];
  *(_QWORD *)(a3 + 8) = v22;
  *(_DWORD *)(a3 + 16) = v23;
  return result;
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance Never(unsigned int *a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v6[6];
  _OWORD v7[2];

  v2 = *a1;
  v3 = a2[5];
  v6[4] = a2[4];
  v6[5] = v3;
  v7[0] = a2[6];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 108);
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v5 = a2[3];
  v6[2] = a2[2];
  v6[3] = v5;
  specialized static Gesture<>._makeGesture(gesture:inputs:)(v2, (uint64_t)v6);
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance GestureBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  specialized GestureBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t _GestureInputs.viewInputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_DWORD *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double _GestureInputs.viewInputs.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double result;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  v7 = a1[4];
  *(_QWORD *)(v1 + 24) = a1[3];
  *(_QWORD *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(a1 + 7);
  result = *((double *)a1 + 9);
  *(double *)(v1 + 72) = result;
  *(_DWORD *)(v1 + 80) = v6;
  return result;
}

uint64_t (*_GestureInputs.viewInputs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id _GestureInputs.viewSubgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 88);
}

void _GestureInputs.viewSubgraph.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = a1;
}

uint64_t (*_GestureInputs.viewSubgraph.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 96);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _GestureInputs.preferences.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = v2;
  *(_DWORD *)(v1 + 104) = v3;
  return result;
}

uint64_t (*_GestureInputs.preferences.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.events.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 108);
}

uint64_t _GestureInputs.events.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 108) = result;
  return result;
}

uint64_t (*_GestureInputs.events.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.resetSeed.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 112);
}

uint64_t _GestureInputs.resetSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 112) = result;
  return result;
}

uint64_t (*_GestureInputs.resetSeed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.InheritedPhase.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::_GestureInputs::InheritedPhase __swiftcall _GestureInputs.InheritedPhase.init(rawValue:)(SwiftUI::_GestureInputs::InheritedPhase rawValue)
{
  SwiftUI::_GestureInputs::InheritedPhase *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static _GestureInputs.InheritedPhase.active.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _GestureInputs.InheritedPhase.defaultValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _GestureInputs.inheritedPhase.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 116);
}

uint64_t _GestureInputs.inheritedPhase.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 116) = result;
  return result;
}

uint64_t (*_GestureInputs.inheritedPhase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _GestureInputs.options.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 120);
}

_DWORD *_GestureInputs.options.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 120) = *result;
  return result;
}

uint64_t (*_GestureInputs.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_GestureInputs.platformInputs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.mapEnvironment<A>(_:)(_QWORD *a1)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id v6;
  unsigned int v8;
  _OWORD v9[6];
  _OWORD v10[2];

  v3 = v1[5];
  v9[4] = v1[4];
  v9[5] = v3;
  v10[0] = v1[6];
  *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v1 + 108);
  v4 = v1[1];
  v9[0] = *v1;
  v9[1] = v4;
  v5 = v1[3];
  v9[2] = v1[2];
  v9[3] = v5;
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in _GestureInputs.mapEnvironment<A>(_:)((uint64_t)v9, a1, &v8);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v8;
}

uint64_t closure #1 in _GestureInputs.mapEnvironment<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[5];
  int v9;

  v5 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  v9 = *(_DWORD *)(a1 + 80);
  outlined retain of _ViewInputs((uint64_t)v8);
  LODWORD(a2) = _ViewInputs.mapEnvironment<A>(_:)(a2);
  result = outlined release of _ViewInputs((uint64_t)v8);
  *a3 = (_DWORD)a2;
  return result;
}

uint64_t _GestureInputs.environment.getter()
{
  void (*v0)(uint64_t *);
  void *v1;
  id v2;
  uint64_t IndirectAttribute2;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v1 = static CoreGlue2.shared;
  v0(&v5);

  specialized _GestureInputs.intern<A>(_:id:)(v5, v6, 0);
  AGGraphClearUpdate();
  v2 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  swift_beginAccess();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_release();
  swift_release();
  return IndirectAttribute2;
}

uint64_t _GestureInputs.Options.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _GestureInputs.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _GestureOutputs.phase.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _GestureOutputs.phase.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_GestureOutputs.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureOutputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _GestureOutputs.preferences.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*_GestureOutputs.preferences.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t key path getter for _GestureOutputs.debugData : <A>_GestureOutputs<A>@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = _GestureOutputs.debugData.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for _GestureOutputs.debugData : <A>_GestureOutputs<A>(unsigned int *a1)
{
  return _GestureOutputs.debugData.setter(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t (*_GestureOutputs.debugData.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  char v5;

  *(_QWORD *)a1 = v1;
  v2 = *(_DWORD *)(v1 + 4);
  v3 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x24BE096C0];
  v4 = v2 == v3;
  if (v2 == v3)
    v2 = 0;
  *(_DWORD *)(a1 + 8) = v2;
  v5 = v4;
  *(_BYTE *)(a1 + 12) = v5;
  return _GestureOutputs.debugData.modify;
}

uint64_t _GestureOutputs.debugData.modify(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 8);
  if (*(_BYTE *)(result + 12))
    v1 = *(_DWORD *)(result + 16);
  *(_DWORD *)(*(_QWORD *)result + 4) = v1;
  return result;
}

unint64_t _GestureOutputs.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned __int8 v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (unsigned int *)(v2 + 48);
    while (*((_QWORD *)v4 - 2) != a1)
    {
      v4 += 6;
      if (!--v3)
        goto LABEL_5;
    }
    v5 = 0;
    v3 = *v4;
  }
  else
  {
LABEL_5:
    v5 = 1;
  }
  return v3 | ((unint64_t)v5 << 32);
}

void _GestureOutputs.subscript.setter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4);
}

void (*_GestureOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v7;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (_DWORD *)(v4 + 48);
    while (*((_QWORD *)v6 - 2) != a2)
    {
      v6 += 6;
      if (!--v5)
        goto LABEL_5;
    }
    v7 = 0;
    LODWORD(v5) = *v6;
  }
  else
  {
LABEL_5:
    v7 = 1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 28) = v7;
  return _GestureOutputs.subscript.modify;
}

void _GestureOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  PreferencesOutputs.subscript.setter(*(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4);
}

void _GestureOutputs.subscript.setter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a4, a5);
}

void (*_GestureOutputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;

  v10 = malloc(0x28uLL);
  *a1 = v10;
  v10[2] = a5;
  v10[3] = v5;
  *v10 = a2;
  v10[1] = a4;
  v12 = PreferencesOutputs.subscript.getter(a2, a4, a5, v11);
  *((_DWORD *)v10 + 8) = v12;
  *((_BYTE *)v10 + 36) = BYTE4(v12) & 1;
  return _GestureOutputs.subscript.modify;
}

void _GestureOutputs.subscript.modify(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  PreferencesOutputs.subscript.setter(*((unsigned int *)*a1 + 8) | ((unint64_t)*((unsigned __int8 *)*a1 + 36) << 32), **a1, (*a1)[1], (*a1)[2]);
  free(v1);
}

uint64_t _GestureOutputs.appendPreference<A>(key:value:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PreferencesOutputs.appendPreference<A>(key:value:)(a1, a2, a4, a5);
}

uint64_t _GestureOutputs.forEachPreference(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, _QWORD);
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (void (*)(uint64_t, uint64_t, _QWORD))result;
    swift_bridgeObjectRetain();
    v5 = (_DWORD *)(v2 + 48);
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      v5 += 6;
      v4(v6, v7, v8);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t GestureCategory.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static GestureCategory.drag.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static GestureCategory.select.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static GestureCategory.longPress.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t static GestureCategory.Key._includesRemovedValues.getter()
{
  return 1;
}

void static GestureCategory.Key.defaultValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *static GestureCategory.Key.reduce(value:nextValue:)(_QWORD *a1, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _QWORD *result;
  uint64_t v4;

  result = a2(&v4);
  *a1 |= v4;
  return result;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance GestureCategory.Key(_QWORD *a1, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _QWORD *result;
  uint64_t v4;

  result = a2(&v4);
  *a1 |= v4;
  return result;
}

uint64_t static GestureDescriptor.typeCache.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for typeCache);
}

uint64_t static GestureDescriptor.typeCache.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for typeCache, &static GestureDescriptor.typeCache);
}

uint64_t (*static GestureDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(uint64_t a1, uint64_t a2)
{
  return protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(a1, a2, &one-time initialization token for typeCache);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(a1, a2, a3, &one-time initialization token for typeCache, &static GestureDescriptor.typeCache);
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance GestureDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static GestureModifierDescriptor.typeCache.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for typeCache);
}

uint64_t static GestureModifierDescriptor.typeCache.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for typeCache, &static GestureModifierDescriptor.typeCache);
}

uint64_t (*static GestureModifierDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureModifierDescriptor(uint64_t a1, uint64_t a2)
{
  return protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(a1, a2, &one-time initialization token for typeCache);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*a3 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureModifierDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(a1, a2, a3, &one-time initialization token for typeCache, &static GestureModifierDescriptor.typeCache);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  if (*a4 != -1)
    swift_once();
  swift_beginAccess();
  *a5 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance GestureModifierDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

void protocol witness for Gesture.body.getter in conformance SizeGesture<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for SizeGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

void protocol witness for Gesture.body.getter in conformance DefaultLayoutGesture()
{
  specialized PrimitiveGesture.body.getter(0xD000000000000014, (void *)0x80000002352E65B0);
}

void protocol witness for Gesture.body.getter in conformance TapGesture()
{
  specialized PrimitiveGesture.body.getter(0x7574736547706154, (void *)0xEA00000000006572);
}

void specialized PrimitiveGesture.body.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for GestureBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureBodyAccessor);
}

uint64_t type metadata accessor for _GestureOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _GestureOutputs);
}

unint64_t lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>;
  if (!lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultRule<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t *a1)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t sub_23504E3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 32))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_23504E3D4()
{
  return 16;
}

__n128 sub_23504E3E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void specialized PrimitiveGesture.body.getter(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized GestureBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)&v37 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
  {
    v44 = a1;
    v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
      AGGraphSetUpdate();
      v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x24BDAC7A8](v33);
      v35 = type metadata accessor for GestureBodyAccessor(0, a3, a4, v34);
      *(&v37 - 2) = v35;
      *(&v37 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureBodyAccessor<A>, v35);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v37 - 4), AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v36);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    v39 = v17;
    v40 = v16;
    v41 = v14;
    v42 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v19 = AGTypeID.description.getter();
    v21 = v20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v19;
    v23 = (_QWORD *)(inited + 32);
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v21;
    v43 = a3;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v24 = inited + 72;
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v10, v46, v8);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_initStackObject();
    v47 = xmmword_235283260;
    *(_OWORD *)(v26 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v37 = inited;
        v38 = a4;
        LODWORD(inited) = v39 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v24, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(_QWORD *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v48);
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v48);
          swift_bridgeObjectRelease();
          v32 = *(void (**)(char *, uint64_t))(v45 + 8);
          v32(v46, v8);
          v32(v10, v8);
          a4 = v38;
          AssociatedTypeWitness = v42;
          a3 = v43;
          v16 = v40;
          v14 = v41;
          goto LABEL_15;
        }
        outlined destroy of CVarArg?((uint64_t)v48);
        v23 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 24);
          while (1)
          {
            v29(v10, v28, v8);
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v47;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v48);
            swift_bridgeObjectRelease();
            if (!v49)
              break;
            outlined destroy of CVarArg?((uint64_t)v48);
            if (v23[291] != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

_UNKNOWN **associated type witness table accessor for Gesture.Body : Gesture in Never()
{
  return &protocol witness table for Never;
}

unint64_t lazy protocol witness table accessor for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.InheritedPhase, &type metadata for _GestureInputs.InheritedPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.InheritedPhase, &type metadata for _GestureInputs.InheritedPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.InheritedPhase, &type metadata for _GestureInputs.InheritedPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.InheritedPhase, &type metadata for _GestureInputs.InheritedPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GestureInputs.Options and conformance _GestureInputs.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.Options, &type metadata for _GestureInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.Options, &type metadata for _GestureInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.Options, &type metadata for _GestureInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GestureInputs.Options, &type metadata for _GestureInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureCategory and conformance GestureCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureCategory, &type metadata for GestureCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureCategory, &type metadata for GestureCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureCategory, &type metadata for GestureCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureCategory, &type metadata for GestureCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

uint64_t sub_23504ED0C()
{
  return 8;
}

_QWORD *sub_23504ED18(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t dispatch thunk of static Gesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of Gesture.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PubliclyPrimitiveGesture.internalBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t destroy for _GestureInputs(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _GestureInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v5 = *(void **)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _GestureInputs(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(void **)(a2 + 88);
  v5 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for _GestureInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);

  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for _GestureInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 124))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _GestureInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 124) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 124) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _GestureInputs()
{
  return &type metadata for _GestureInputs;
}

ValueMetadata *type metadata accessor for _GestureInputs.InheritedPhase()
{
  return &type metadata for _GestureInputs.InheritedPhase;
}

ValueMetadata *type metadata accessor for _GestureInputs.Options()
{
  return &type metadata for _GestureInputs.Options;
}

uint64_t initializeBufferWithCopyOfBuffer for _GestureOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _GestureOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for _GestureOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _GestureOutputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _GestureOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureCategory()
{
  return &type metadata for GestureCategory;
}

ValueMetadata *type metadata accessor for GestureCategory.Key()
{
  return &type metadata for GestureCategory.Key;
}

ValueMetadata *type metadata accessor for GestureDescriptor()
{
  return &type metadata for GestureDescriptor;
}

ValueMetadata *type metadata accessor for GestureModifierDescriptor()
{
  return &type metadata for GestureModifierDescriptor;
}

ValueMetadata *type metadata accessor for PlatformGestureInputs()
{
  return &type metadata for PlatformGestureInputs;
}

uint64_t Color.Resolved.cgColor.getter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for cache != -1)
    swift_once();
  return specialized ObjectCache.subscript.getter(a1, a2, a3, a4);
}

unint64_t Color.Resolved.init(failableCGColor:)(void *a1)
{
  return specialized Color.Resolved.init(failableCGColor:)(a1);
}

float Color.Resolved.init(_:)(void *a1)
{
  float result;
  char v2;

  LODWORD(result) = specialized Color.Resolved.init(failableCGColor:)(a1);
  if ((v2 & 1) != 0)
    return 0.0;
  return result;
}

uint64_t Color.init(cgColor:)(uint64_t a1)
{
  uint64_t result;

  type metadata accessor for ColorBox<CGColorRef>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

float CGColorRef.resolve(in:)()
{
  void *v0;
  float result;
  char v2;

  LODWORD(result) = specialized Color.Resolved.init(failableCGColor:)(v0);
  if ((v2 & 1) != 0)
    return 0.0;
  return result;
}

void *CGColorRef.staticColor.getter()
{
  void *v0;
  id v1;

  v1 = v0;
  return v0;
}

float protocol witness for ColorProvider.resolve(in:) in conformance CGColorRef()
{
  id *v0;
  float v1;
  float result;
  char v3;

  LODWORD(v1) = specialized Color.Resolved.init(failableCGColor:)(*v0);
  result = 0.0;
  if ((v3 & 1) == 0)
    return v1;
  return result;
}

id protocol witness for ColorProvider.staticColor.getter in conformance CGColorRef()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

CGColorSpaceRef one-time initialization function for srgb(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x24BDBF318], (CGColorSpaceRef *)&static Color.Resolved.srgb);
}

id static Color.Resolved.srgb.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgb, (id *)&static Color.Resolved.srgb);
}

CGColorSpaceRef one-time initialization function for srgbExtended(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x24BDBF278], (CGColorSpaceRef *)&static Color.Resolved.srgbExtended);
}

id static Color.Resolved.srgbExtended.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgbExtended, (id *)&static Color.Resolved.srgbExtended);
}

CGColorSpaceRef one-time initialization function for srgbLinear(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x24BDBF308], (CGColorSpaceRef *)&static Color.Resolved.srgbLinear);
}

id static Color.Resolved.srgbLinear.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgbLinear, (id *)&static Color.Resolved.srgbLinear);
}

CGColorSpaceRef one-time initialization function for srgbExtendedLinear(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x24BDBF270], (CGColorSpaceRef *)&static Color.Resolved.srgbExtendedLinear);
}

id static Color.Resolved.srgbExtendedLinear.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgbExtendedLinear, (id *)&static Color.Resolved.srgbExtendedLinear);
}

CGColorSpaceRef one-time initialization function for displayP3(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x24BDBF228], (CGColorSpaceRef *)&static Color.Resolved.displayP3);
}

CGColorSpaceRef one-time initialization function for srgb(uint64_t a1, CFStringRef *a2, CGColorSpaceRef *a3)
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName(*a2);
  if (result)
    *a3 = result;
  else
    __break(1u);
  return result;
}

id static Color.Resolved.displayP3.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for displayP3, (id *)&static Color.Resolved.displayP3);
}

CGColorRef closure #1 in variable initialization expression of static Color.Resolved.cache@<X0>(float *a1@<X0>, CGColorRef *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  CGColorRef result;
  CGFloat v17[4];

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = -*a1;
  if (*a1 > 0.0)
    v7 = *a1;
  if (v7 <= 0.0031308)
  {
    v8 = v7 * 12.92;
  }
  else
  {
    v8 = 1.0;
    if (v7 != 1.0)
      v8 = (float)(powf(v7, 0.41667) * 1.055) + -0.055;
  }
  v9 = -v8;
  if (v4 > 0.0)
    v9 = v8;
  v17[0] = v9;
  v10 = -v3;
  if (v3 > 0.0)
    v10 = v3;
  if (v10 <= 0.0031308)
  {
    v11 = v10 * 12.92;
  }
  else
  {
    v11 = 1.0;
    if (v10 != 1.0)
      v11 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
  }
  v12 = -v11;
  if (v3 > 0.0)
    v12 = v11;
  v17[1] = v12;
  v13 = -v6;
  if (v6 > 0.0)
    v13 = v6;
  if (v13 <= 0.0031308)
  {
    v14 = v13 * 12.92;
  }
  else
  {
    v14 = 1.0;
    if (v13 != 1.0)
      v14 = (float)(powf(v13, 0.41667) * 1.055) + -0.055;
  }
  v15 = -v14;
  if (v6 > 0.0)
    v15 = v14;
  v17[2] = v15;
  v17[3] = v5;
  if (one-time initialization token for srgbExtended != -1)
    swift_once();
  result = CGColorCreate((CGColorSpaceRef)static Color.Resolved.srgbExtended, v17);
  if (result)
    *a2 = result;
  else
    __break(1u);
  return result;
}

CGGradientRef ResolvedGradient.cgGradient.getter()
{
  uint64_t *v0;
  uint64_t v1;
  CGColorSpace *v2;
  int64_t v3;
  float *v4;
  int64_t v5;
  NSArray v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  CGGradientRef v12;
  uint64_t v14;

  v1 = *v0;
  if (one-time initialization token for srgbExtended != -1)
    swift_once();
  v2 = (CGColorSpace *)static Color.Resolved.srgbExtended;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    if (one-time initialization token for cache != -1)
      swift_once();
    v4 = (float *)(v1 + 44);
    v5 = v3;
    do
    {
      specialized ObjectCache.subscript.getter(*(v4 - 3), *(v4 - 2), *(v4 - 1), *v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 12;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CGColorRef(0);
  v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v7 = v14;
    v8 = *(_QWORD *)(v14 + 16);
    v9 = 48;
    do
    {
      v10 = *(_QWORD *)(v1 + v9);
      v11 = *(_QWORD *)(v14 + 24);
      if (v8 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v8 + 1, 1);
      *(_QWORD *)(v14 + 16) = v8 + 1;
      *(_QWORD *)(v14 + 8 * v8 + 32) = v10;
      v9 += 48;
      ++v8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v12 = CGGradientCreateWithColors(v2, v6.super.isa, (const CGFloat *)(v7 + 32));

  swift_bridgeObjectRelease();
  return v12;
}

unint64_t specialized Color.Resolved.init(failableCGColor:)(void *a1)
{
  CGColor *v1;
  CGColorSpace *v2;
  uint64_t v3;
  CGColorSpace *v4;
  CGColorSpace *v5;
  uint64_t v6;
  uint64_t v7;
  CGColorSpace *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  CGColorSpace *v12;
  uint64_t v13;
  uint64_t v14;
  CGColorRef CopyByMatchingToColorSpace;
  uint64_t v16;
  uint64_t v17;
  CGColor *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  double v24;
  float v25;
  float v26;
  float v27;

  v1 = a1;
  v2 = CGColorGetColorSpace(v1);
  v3 = one-time initialization token for srgb;
  v4 = v2;
  v5 = v4;
  if (v3 == -1)
  {
    if (!v4)
      goto LABEL_4;
  }
  else
  {
    swift_once();
    if (!v5)
    {
LABEL_4:
      v7 = one-time initialization token for srgbExtended;
      v8 = v5;
      if (v7 == -1)
      {
        if (v5)
          goto LABEL_6;
      }
      else
      {
        swift_once();
        if (v5)
        {
LABEL_6:
          v9 = static Color.Resolved.srgbExtended;

          if (v8 == (CGColorSpace *)v9)
            goto LABEL_7;
LABEL_12:
          v11 = one-time initialization token for displayP3;
          v12 = v8;
          if (v11 == -1)
          {
            if (!v2)
              goto LABEL_15;
          }
          else
          {
            swift_once();
            if (!v2)
              goto LABEL_15;
          }
          v13 = static Color.Resolved.displayP3;

          if ((CGColorSpace *)v13 == v2)
          {
            v10 = 2;
            goto LABEL_25;
          }
LABEL_15:
          v14 = one-time initialization token for srgbLinear;
          CopyByMatchingToColorSpace = v12;
          if (v14 != -1)
            goto LABEL_42;
          if (!v5)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      v2 = 0;
      goto LABEL_12;
    }
  }
  v6 = static Color.Resolved.srgb;

  if (v5 != (CGColorSpace *)v6)
    goto LABEL_4;
LABEL_7:
  v10 = 0;
LABEL_25:
  CopyByMatchingToColorSpace = v1;
  while (1)
  {
    CopyByMatchingToColorSpace = CopyByMatchingToColorSpace;
    v20 = CGColorRef.components.getter();

    if (!v20)
    {
LABEL_33:

      return 0;
    }
    v21 = *(_QWORD *)(v20 + 16);
    if (!v21)
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v21 == 1)
      goto LABEL_40;
    if (v21 >= 3)
      break;
LABEL_41:
    __break(1u);
LABEL_42:
    swift_once();
    if (v5)
    {
LABEL_17:
      v16 = static Color.Resolved.srgbLinear;

      if (CopyByMatchingToColorSpace == (CGColorRef)v16)
        goto LABEL_23;
    }
LABEL_18:
    v17 = one-time initialization token for srgbExtendedLinear;
    v18 = CopyByMatchingToColorSpace;
    if (v17 == -1)
    {
      if (!v5)
        goto LABEL_21;
    }
    else
    {
      swift_once();
      if (!v5)
        goto LABEL_21;
    }
    v19 = static Color.Resolved.srgbExtendedLinear;

    if (v18 == (CGColor *)v19)
    {
LABEL_23:
      v10 = 1;
      goto LABEL_25;
    }
LABEL_21:
    CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.Resolved.srgbExtended, kCGRenderingIntentDefault, v1, 0);

    if (!CopyByMatchingToColorSpace)
      goto LABEL_33;
    v10 = 0;
  }
  v22 = *(double *)(v20 + 32);
  v23 = *(double *)(v20 + 40);
  v24 = *(double *)(v20 + 48);
  swift_bridgeObjectRelease();
  v25 = v24;
  CGColorGetAlpha(v1);
  if (v10)
  {
    if (v10 != 1)
    {
      v26 = specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v22, v23, v25);
      goto LABEL_35;
    }
  }
  else
  {
    v26 = specialized Color.Resolved.init(red:green:blue:opacity:)(v22, v23, v25);
LABEL_35:
    v22 = v26;
    v23 = v27;
  }

  return LODWORD(v22) | ((unint64_t)LODWORD(v23) << 32);
}

uint64_t instantiation function for generic protocol witness table for CGColorRef(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGColorRef(255);
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>)
  {
    type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(255, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Data, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Data);
    v5 = type metadata accessor for AtomicBuffer(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>);
  }
}

void type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for CGColorRef(255);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    v9 = a3(a1, &type metadata for Color.Resolved, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

Swift::Bool __swiftcall LayoutComputer.ignoresAutomaticPadding()()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::Bool result;

  v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))() & 1;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))() & 1;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StatefulRule<>.update<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a1;
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a5;
  v6[6] = a1;
  return StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v7, (void (*)(void))partial apply for closure #2 in StatefulRule<>.update<A>(to:), (uint64_t)v6, a2, a3, a4, a5);
}

Swift::Double __swiftcall LayoutEngine.layoutPriority()()
{
  return 0.0;
}

Swift::Bool __swiftcall LayoutEngine.ignoresAutomaticPadding()()
{
  return 0;
}

Swift::Bool __swiftcall LayoutEngine.requiresSpacingProjection()()
{
  return 0;
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance ResolvedImageLayoutEngine(uint64_t *a1, char a2, double a3, double a4, __n128 a5, __n128 a6, __n128 a7)
{
  __int128 *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  double result;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  v11 = a1[2];
  v12 = *((_BYTE *)a1 + 24);
  v13 = v7[9];
  v32 = v7[8];
  v33 = v13;
  v34[0] = v7[10];
  *(_DWORD *)((char *)v34 + 15) = *(_DWORD *)((char *)v7 + 175);
  v14 = v7[5];
  v28 = v7[4];
  v29 = v14;
  v15 = v7[7];
  v30 = v7[6];
  v31 = v15;
  v16 = v7[1];
  v24 = *v7;
  v25 = v16;
  v17 = (__n128)v7[3];
  v26 = (__n128)v7[2];
  v27 = v17;
  v20 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  Image.Resolved.sizeThatFits(in:)((uint64_t)&v20, v26, v17, a5, a6, a7);
  if ((a2 & 1) != 0)
    return v19;
  return result;
}

double LayoutEngine.lengthThatFits(_:in:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  char v5;
  uint64_t v6;
  char v7;
  double result;
  double v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v5 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  v10 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(&v10, a3, a4);
  if ((a2 & 1) != 0)
    return v9;
  return result;
}

{
  return LayoutEngine.lengthThatFits(_:in:)(a1, a2 & 1, a3, a4);
}

void protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance ResolvedImageLayoutEngine()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void LayoutEngine.childGeometries(at:origin:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LayoutEngine.debugContentDescription.getter()
{
  return 0;
}

BOOL static LayoutComputer.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t LayoutComputer.explicitAlignment(_:at:)(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  BOOL IsOwner;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  v4 = *a2;
  v5 = a2[1];
  v6 = *v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
  {
    v10 = a2[1];
    v12 = *a2;
    swift_once();
    v5 = v10;
    v4 = v12;
  }
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  v9 = v5;
  v11 = v4;
  if (one-time initialization token for _lock != -1)
    swift_once();
  IsOwner = _MovableLockIsOwner(static Update._lock);
  v5 = v9;
  v4 = v11;
  if (!IsOwner)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v13[0] = v4;
    v13[1] = v5;
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 144))(a1, v13);
  }
  return result;
}

uint64_t LayoutEngine.explicitAlignment(_:at:)()
{
  return 0;
}

uint64_t LayoutComputer.sizeThatFits(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = *((_BYTE *)a1 + 24);
  v6 = *v1;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v8 = v2;
    v9 = v3;
    v10 = v4;
    v11 = v5;
    return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v6 + 120))(&v8);
  }
  return result;
}

SwiftUI::Spacing __swiftcall LayoutComputer.spacing()()
{
  uint64_t *v0;
  uint64_t v1;
  SwiftUI::Spacing result;

  v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    return (SwiftUI::Spacing)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
    return (SwiftUI::Spacing)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  result.minima._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LayoutComputer.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  v8 = *v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v10 = v4;
    v11 = v5;
    v12 = v6;
    v13 = v7;
    return (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)v8 + 128))(&v10, a2 & 1);
  }
  return result;
}

Swift::Double __swiftcall LayoutComputer.layoutPriority()()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::Double result;

  v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v1 + 88))();
  }
  return result;
}

Swift::Bool __swiftcall LayoutComputer.requiresSpacingProjection()()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::Bool result;

  v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 104))() & 1;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 104))() & 1;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LayoutComputer.withMutableEngine<A, B>(type:do:)(uint64_t IsOwner, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  double v7;
  uint64_t result;

  v6 = *v4;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    IsOwner = swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  IsOwner = _MovableLockIsOwner(static Update._lock);
  if ((IsOwner & 1) == 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v7 = MEMORY[0x24BDAC7A8](IsOwner);
    return (*(uint64_t (**)(uint64_t, uint64_t (*)(), double))(*(_QWORD *)v6 + 80))(a4, partial apply for closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:), v7);
  }
  return result;
}

SwiftUI::Spacing protocol witness for LayoutEngine.spacing() in conformance UnaryPositionAwareLayoutEngine<A>()
{
  return LayoutEngine.spacing()();
}

uint64_t LayoutComputer.childGeometries(at:origin:)(__int128 *a1, double a2, double a3)
{
  uint64_t *v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL IsOwner;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  v6 = *a1;
  v7 = a1[1];
  v8 = *v3;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
  {
    v12 = a1[1];
    v14 = *a1;
    swift_once();
    v7 = v12;
    v6 = v14;
  }
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  v11 = v7;
  v13 = v6;
  if (one-time initialization token for _lock != -1)
    swift_once();
  IsOwner = _MovableLockIsOwner(static Update._lock);
  v7 = v11;
  v6 = v13;
  if (!IsOwner)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v15[0] = v6;
    v15[1] = v7;
    return (*(uint64_t (**)(_OWORD *, double, double))(*(_QWORD *)v8 + 136))(v15, a2, a3);
  }
  return result;
}

uint64_t StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  char *v16;
  uint64_t *OutputValue;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (OutputValue)
  {
    v19 = OutputValue[1];
    v23 = *OutputValue;
    v18 = v23;
    v24 = v19;
    MEMORY[0x24BDAC7A8](OutputValue);
    v22[-6] = a5;
    v22[-5] = a6;
    v22[-4] = a7;
    v22[-3] = a8;
    v22[-2] = a1;
    v22[-1] = a2;
    v20 = swift_retain_n();
    LayoutComputer.withMutableEngine<A, B>(type:do:)(v20, (uint64_t)partial apply for closure #1 in View.onChange<A>(of:initial:_:), (uint64_t)&v22[-8], a6);
    swift_release();
    v23 = v18;
    v24 = v19 + 1;
  }
  else
  {
    a3();
    LayoutComputer.init<A>(_:)((uint64_t)v16, a6, a8, &v23);
    v22[1] = v23;
    v22[2] = v24;
  }
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t LayoutComputer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    type metadata accessor for TracingLayoutEngineBox(0, a2, a3, v11);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
    swift_allocObject();
    v12 = (uint64_t)TracingLayoutEngineBox.init(_:)(v10);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for LayoutEngineBox(0, a2, a3, v11);
    v12 = swift_allocObject();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 160) - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)v12 + 176), a1);
  }
  *a4 = v12;
  a4[1] = 0;
  return result;
}

uint64_t *TracingLayoutEngineBox.__allocating_init(_:)(_BYTE *a1)
{
  swift_allocObject();
  return TracingLayoutEngineBox.init(_:)(a1);
}

double LayoutComputer.DefaultEngine.sizeThatFits(_:)(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  if (*(_BYTE *)(a1 + 8))
    return 10.0;
  return result;
}

uint64_t LayoutComputer.DefaultEngine.childGeometries(at:origin:)()
{
  return MEMORY[0x24BEE4AF8];
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance LayoutComputer.DefaultEngine(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  if (*(_BYTE *)(a1 + 8))
    return 10.0;
  return result;
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance LayoutComputer.DefaultEngine(uint64_t a1, char a2)
{
  double result;
  double v3;

  result = *(double *)a1;
  v3 = *(double *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    result = 10.0;
  if (*(_BYTE *)(a1 + 24))
    v3 = 10.0;
  if ((a2 & 1) != 0)
    return v3;
  return result;
}

uint64_t static LayoutComputer.defaultValue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *((_QWORD *)&static LayoutComputer.defaultValue + 1);
  *a1 = static LayoutComputer.defaultValue;
  a1[1] = v2;
  return swift_retain();
}

uint64_t protocol witness for static Defaultable.defaultValue.getter in conformance LayoutComputer@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *((_QWORD *)&static LayoutComputer.defaultValue + 1);
  *a1 = static LayoutComputer.defaultValue;
  a1[1] = v2;
  return swift_retain();
}

void AnyLayoutEngineBox.mutateEngine<A, B>(as:do:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.layoutPriority()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.ignoresAutomaticPadding()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.requiresSpacingProjection()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.spacing()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.sizeThatFits(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.lengthThatFits(_:in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.childGeometries(at:origin:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutEngineBox.explicitAlignment(_:at:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LayoutEngineBox.mutateEngine<A, B>(as:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[9];

  if (*(_QWORD *)(*(_QWORD *)v4 + 160) == a4)
  {
    MEMORY[0x24BDAC7A8](a1);
    v16[2] = v5;
    v16[3] = v5;
    v7 = *(_QWORD *)(v6 + 168);
    v8 = *(_QWORD *)(v6 + 176);
    v16[4] = v9;
    v16[5] = v7;
    v16[6] = v11;
    v16[7] = v10;
    v16[8] = v12;
    return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4 + v8, (uint64_t)partial apply for closure #1 in LayoutEngineBox.mutateEngine<A, B>(as:do:), (uint64_t)v16, v5, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v13);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double LayoutEngineBox.layoutPriority()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 176), v3);
  v7 = (*(double (**)(uint64_t))(*(_QWORD *)(v2 + 168) + 8))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t LayoutEngineBox.ignoresAutomaticPadding()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 176), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 168) + 16))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t LayoutEngineBox.requiresSpacingProjection()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 176), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 168) + 24))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t LayoutEngineBox.spacing()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 168) + 32))(*(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t LayoutEngineBox.sizeThatFits(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v2 = *v1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = *((_BYTE *)a1 + 24);
  v7 = *a1;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(v2 + 168) + 40))(&v7, *(_QWORD *)(v2 + 160));
}

uint64_t LayoutEngineBox.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v3 = *v2;
  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[2];
  v6 = *((_BYTE *)a1 + 24);
  v8 = *a1;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  return (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(v3 + 168) + 48))(&v8, a2 & 1, *(_QWORD *)(v3 + 160));
}

uint64_t LayoutEngineBox.childGeometries(at:origin:)(_OWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];

  v2 = *v1;
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return (*(uint64_t (**)(_OWORD *, _QWORD))(*(_QWORD *)(v2 + 168) + 56))(v5, *(_QWORD *)(v2 + 160));
}

uint64_t LayoutEngineBox.explicitAlignment(_:at:)(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *v2;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)(v3 + 168) + 64))(a1, v6, *(_QWORD *)(v3 + 160));
}

uint64_t *TracingLayoutEngineBox.init(_:)(_BYTE *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int CurrentAttribute;
  BOOL v14;
  int v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t);
  unsigned int *v22;
  uint64_t v23;
  unsigned __int8 v24;
  _BYTE v26[8];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 192);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v26[-v10];
  v12 = (uint64_t)v2 + *(_QWORD *)(v4 + 208);
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v14 = CurrentAttribute == *MEMORY[0x24BE096C0];
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
    v15 = 0;
  else
    v15 = CurrentAttribute;
  *(_DWORD *)v12 = v15;
  *(_BYTE *)(v12 + 4) = v14;
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16);
  v16(v11, a1, v5);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)(*v2 + 160) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 176), v11);
  v16(v8, (_BYTE *)v2 + *(_QWORD *)(*v2 + 176), v5);
  v17 = *(_QWORD *)(v4 + 200);
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 72);
  swift_retain();
  v18(v5, v17);
  v20 = v19;
  v21 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v21(v8, v5);
  if (v20)
  {
    v22 = (unsigned int *)((char *)v2 + *(_QWORD *)(*v2 + 208));
    v23 = *v22;
    v24 = *((_BYTE *)v22 + 4);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      swift_retain();
      v26[4] = v24;
      LayoutTrace.Recorder.traceContentDescription(_:_:)(v23 | ((unint64_t)v24 << 32));
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    v21(a1, v5);
  }
  else
  {
    v21(a1, v5);
    swift_release();
  }
  return v2;
}

uint64_t TracingLayoutEngineBox.sizeThatFits(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = *((_BYTE *)a1 + 24);
  v6 = (unsigned int *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 208));
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 4);
  result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    v10 = v2;
    v11 = v3;
    v12 = v4;
    v13 = v5;
    swift_retain();
    LayoutTrace.Recorder.traceSizeThatFits(_:proposal:_:)(v7 | ((unint64_t)v8 << 32), (uint64_t)&v10, (double (*)(uint64_t))partial apply for closure #1 in TracingLayoutEngineBox.sizeThatFits(_:));
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TracingLayoutEngineBox.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v3 = a2 & 1;
  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  v8 = (unsigned int *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 208));
  v9 = *v8;
  v10 = *((_BYTE *)v8 + 4);
  result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    v12 = v4;
    v13 = v5;
    v14 = v6;
    v15 = v7;
    swift_retain();
    LayoutTrace.Recorder.traceLengthThatFits(_:proposal:in:_:)(v9 | ((unint64_t)v10 << 32), (uint64_t)&v12, v3, (double (*)(uint64_t))partial apply for closure #1 in TracingLayoutEngineBox.lengthThatFits(_:in:));
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TracingLayoutEngineBox.childGeometries(at:origin:)(void **a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t result;
  void *v15;
  int v16;
  void *v17;
  _QWORD *v18;
  void (*v19)(void **);
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void (*v24)(void **);
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  int v33;

  v4 = v3;
  v7 = *a1;
  v8 = (uint64_t)a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = (char *)v3 + *(_QWORD *)(*v3 + 208);
  v12 = *(_DWORD *)v11;
  v13 = v11[4];
  result = swift_beginAccess();
  v15 = static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_retain();
    LayoutTrace.Recorder.activateFrameIfNeeded()();
    if (one-time initialization token for shared != -1)
      swift_once();
    if (v13)
      v16 = 0;
    else
      v16 = v12;
    swift_beginAccess();
    v17 = static CoreGlue.shared;
    v26 = v15;
    v27 = (uint64_t)v7;
    v28 = v8;
    v29 = v9;
    v30 = v10;
    v31 = a2;
    v32 = a3;
    v33 = v16;
    v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v19 = *(void (**)(void **))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x90);
    swift_retain();
    v20 = v17;
    v19(&v26);

    swift_release();
    v21 = *v4;
    v26 = v7;
    v27 = v8;
    v28 = (uint64_t)v9;
    v29 = v10;
    v22 = (*(uint64_t (**)(void **, _QWORD, double, double))(*(_QWORD *)(v21 + 168) + 56))(&v26, *(_QWORD *)(v21 + 160), a2, a3);
    v23 = static CoreGlue.shared;
    v26 = v15;
    v27 = v22;
    v24 = *(void (**)(void **))((*v18 & *(_QWORD *)static CoreGlue.shared) + 0xA0);
    swift_retain();
    v25 = v23;
    swift_bridgeObjectRetain();
    v24(&v26);

    swift_bridgeObjectRelease();
    swift_release_n();
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v4, v3);
}

uint64_t partial apply for closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 16))(a1, *(_QWORD *)(v1 + 48));
}

uint64_t partial apply for closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t StatefulRule<>.updateIfNotEqual<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *OutputValue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (OutputValue)
  {
    v14 = *OutputValue;
    v15 = OutputValue[1];
    type metadata accessor for LayoutEngineBox(0, a3, a6, v13);
    v16 = swift_dynamicCastClassUnconditional();
    v17 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 176);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, a3);
    swift_retain();
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
    if ((v18 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v17, a1, a3);
      v21 = v14;
      v22 = v15 + 1;
      AGGraphSetOutputValue();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
    LayoutComputer.init<A>(_:)((uint64_t)v11, a3, a6, &v21);
    v20[1] = v21;
    v20[2] = v22;
    AGGraphSetOutputValue();
  }
  return swift_release();
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance InsetLayoutComputer.Engine(uint64_t *a1, char a2)
{
  char v3;
  uint64_t v4;
  char v5;
  double result;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = *((_BYTE *)a1 + 24);
  v8 = *a1;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  InsetLayoutComputer.Engine.sizeThatFits(_:)((uint64_t)&v8);
  if ((a2 & 1) != 0)
    return v7;
  return result;
}

uint64_t closure #1 in StatefulRule.value.setter()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t type metadata accessor for LayoutEngineBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutEngineBox);
}

uint64_t type metadata accessor for TracingLayoutEngineBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TracingLayoutEngineBox);
}

_QWORD *assignWithCopy for LayoutComputer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for LayoutComputer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for LayoutComputer()
{
  return &type metadata for LayoutComputer;
}

ValueMetadata *type metadata accessor for LayoutComputer.DefaultEngine()
{
  return &type metadata for LayoutComputer.DefaultEngine;
}

uint64_t dispatch thunk of LayoutEngine.layoutPriority()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LayoutEngine.ignoresAutomaticPadding()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LayoutEngine.requiresSpacingProjection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LayoutEngine.spacing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of LayoutEngine.lengthThatFits(_:in:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 48))(a1, a2 & 1);
}

uint64_t dispatch thunk of LayoutEngine.childGeometries(at:origin:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of LayoutEngine.explicitAlignment(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of LayoutEngine.debugContentDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t type metadata accessor for AnyLayoutEngineBox()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for TracingLayoutEngineBox()
{
  return swift_initClassMetadata2();
}

uint64_t partial apply for closure #1 in TracingLayoutEngineBox.lengthThatFits(_:in:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v1 = *(_BYTE *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_BYTE *)(v0 + 48);
  v4 = *(unsigned __int8 *)(v0 + 49);
  v5 = **(_QWORD **)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = v1;
  v9 = v2;
  v10 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(v5 + 168) + 48))(&v7, v4, *(_QWORD *)(v5 + 160));
}

uint64_t partial apply for closure #1 in TracingLayoutEngineBox.sizeThatFits(_:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v1 = *(_BYTE *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_BYTE *)(v0 + 48);
  v4 = **(_QWORD **)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = v1;
  v8 = v2;
  v9 = v3;
  return (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(v4 + 168) + 40))(&v6, *(_QWORD *)(v4 + 160));
}

uint64_t partial apply for closure #1 in LayoutEngineBox.mutateEngine<A, B>(as:do:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

void type metadata accessor for LayoutEngineBox<LayoutComputer.DefaultEngine>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for LayoutComputer.DefaultEngine, &protocol witness table for LayoutComputer.DefaultEngine);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t specialized RangeSet.insert(contentsOf:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  void (*v14)(char *, uint64_t);
  char *v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(_QWORD *, _QWORD);
  _QWORD v23[4];
  _QWORD v24[4];

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v23 - v3;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  v6 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v23 - v10;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v23[0] = v12;
  RangeSet.ranges.getter();
  v13 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v13(v8, v4, v1);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
  dispatch thunk of Collection.startIndex.getter();
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v4, v1);
  *(_QWORD *)&v8[*(int *)(v6 + 36)] = v24[0];
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  v15 = &v11[*(int *)(v6 + 36)];
  while (1)
  {
    v16 = *(_QWORD *)v15;
    dispatch thunk of Collection.endIndex.getter();
    if (v16 == v24[0])
      return outlined destroy of TypesettingConfiguration((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    v17 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v19 = *v18;
    v20 = v18[1];
    v17(v24, 0);
    v13(v4, v11, v1);
    dispatch thunk of Collection.formIndex(after:)();
    result = ((uint64_t (*)(char *, uint64_t))v14)(v4, v1);
    v23[2] = v19;
    v23[3] = v20;
    if (__OFSUB__(v20, v19))
      break;
    if (v20 != v19)
    {
      v22 = (void (*)(_QWORD *, _QWORD))RangeSet._ranges.modify();
      RangeSet.Ranges._insert(contentsOf:)();
      v22(v24, 0);
    }
  }
  __break(1u);
  return result;
}

void specialized EnumeratedSequence.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  const __CFArray *v3;
  const __CTLine *v4;
  uint64_t v5;
  int v6;
  int v7;
  const __CTLine *v8;
  const __CTLine *v9;
  const __CFArray *RunCount;
  const __CTLine *v11;
  const __CTLine *v12;
  const __CTLine *v13;
  const __CFArray *v14;
  const __CTLine *v15;
  const __CFArray *v16;
  uint64_t v17;
  int v18;
  __int128 v19;

  v3 = *(const __CFArray **)(v1 + 48);
  v4 = *(const __CTLine **)v1;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(unsigned __int8 *)(v1 + 16);
  v19 = *(_OWORD *)(v1 + 24);
  v7 = *(_DWORD *)(v1 + 40);
  v8 = *(const __CTLine **)v1;
  if ((v6 & 1) != 0)
  {
    v9 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v8);
    if (!v9)
    {
      if (!v3)
        goto LABEL_7;
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v8, v5, 0);
    swift_release();
    v9 = v4;
  }
  RunCount = _CTLineGetRunCount(v9);

  if (v3 == RunCount)
  {
LABEL_7:
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if (!v6)
  {
    v18 = v7;
    outlined copy of Text.Layout.Line.Line(v4, v5, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v4, v5, 0);

    outlined copy of Text.Layout.Line.Line(v4, v5, 0);
    outlined copy of Text.Layout.Line.Line(v4, v5, 0);
    swift_release();
    v15 = v4;
    v12 = v4;
    v14 = (const __CFArray *)v5;
    goto LABEL_13;
  }
LABEL_9:
  v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
  if (!v11)
    goto LABEL_21;
  v12 = v11;
  outlined copy of Text.Layout.Line.Line(v4, v5, 1);
  v13 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
  v14 = 0;
  v18 = v7;
  if (v13)
  {
    v15 = v13;
LABEL_13:
    v16 = v14;
    v14 = _CTLineGetRunCount(v15);

    goto LABEL_15;
  }
  LOBYTE(v6) = 1;
  v16 = 0;
LABEL_15:
  outlined consume of Text.Layout.Line.Line(v4, v5, v6);
  if (((unint64_t)v3 & 0x8000000000000000) != 0 || (uint64_t)v3 >= (uint64_t)v14)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 48) = (char *)v3 + 1;
    v17 = *(_QWORD *)(v1 + 56);
    if (!__OFADD__(v17, 1))
    {
      *(_QWORD *)(v1 + 56) = v17 + 1;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = v3;
      *(_OWORD *)(a1 + 24) = v19;
      *(_DWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 48) = v16;
      return;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v2 = v1[3];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 255;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 48 * v2;
    v5 = *(void **)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_BYTE *)(v4 + 48);
    v8 = *(_OWORD *)(v4 + 56);
    v9 = *(_DWORD *)(v4 + 72);
    v1[3] = v2 + 1;
    v10 = v1[4];
    if (!__OFADD__(v10, 1))
    {
      v1[4] = v10 + 1;
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v6;
      *(_BYTE *)(a1 + 24) = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 48) = v9;
      outlined copy of Text.Layout.Line.Line(v5, v6, v7);
      return;
    }
  }
  __break(1u);
}

uint64_t Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt64 *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unsigned __int8 v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt64 v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char v80;
  uint64_t v81;
  Swift::UInt64 v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;
  Swift::UInt64 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t i;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Swift::UInt64 *v113;
  uint64_t v114;
  Swift::UInt64 v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  _QWORD *v122;
  char v123;
  _QWORD *v124;
  char v125;
  unint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  char v132;
  char v133;
  _QWORD *v134;
  Swift::UInt64 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t result;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t *v144;
  uint64_t v145;
  int64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  Swift::UInt64 v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  void *v158;
  id v159;
  unint64_t v160;
  _QWORD *v161;
  _QWORD v162[4];
  uint64_t v163;

  v9 = v8;
  v141 = a7;
  v140 = a6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v153 = *(_QWORD *)(v15 - 8);
  v154 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v152 = (char *)&v140 - v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v149 = a5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Text.Effect.Keyframes.Storage();
    swift_allocObject();
    v18 = (_QWORD *)swift_retain();
    v19 = specialized Text.Effect.Keyframes.Storage.init(_:)(v18);
    a5 = v149;
    swift_release();
    *v9 = (uint64_t)v19;
    swift_release();
  }
  v20 = *v9;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v21 = swift_isUniquelyReferenced_nonNull_native();
  v162[0] = *(_QWORD *)(v20 + 16);
  *(_QWORD *)(v20 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v21, v162, specialized LazyMapSequence.Iterator.next(), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  *(_QWORD *)(v20 + 16) = v162[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  v22 = *v9;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v162[0] = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v22 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v23, v162, specialized LazyMapSequence.Iterator.next(), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  *(_QWORD *)(v22 + 24) = v162[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  v24 = *v9;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v25 = swift_isUniquelyReferenced_nonNull_native();
  v162[0] = *(_QWORD *)(v24 + 32);
  *(_QWORD *)(v24 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v25, v162, specialized LazyMapSequence.Iterator.next(), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  *(_QWORD *)(v24 + 32) = v162[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v26 = swift_bridgeObjectRetain();
  specialized Set.formUnion<A>(_:)(v26);
  swift_endAccess();
  v27 = *(_QWORD *)(a5 + 64);
  v142 = a5 + 64;
  v28 = 1 << *(_BYTE *)(a5 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v143 = (unint64_t)(v28 + 63) >> 6;
  swift_bridgeObjectRetain();
  v31 = 0;
  v155 = a8;
  v32 = v9;
  v144 = v9;
  while (1)
  {
    if (v30)
    {
      v145 = (v30 - 1) & v30;
      v146 = v31;
      v34 = __clz(__rbit64(v30)) | (v31 << 6);
      goto LABEL_25;
    }
    v35 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_86;
    if (v35 >= v143)
      break;
    v36 = *(_QWORD *)(v142 + 8 * v35);
    v37 = v31 + 1;
    if (!v36)
    {
      v37 = v31 + 2;
      if (v31 + 2 >= v143)
        break;
      v36 = *(_QWORD *)(v142 + 8 * v37);
      if (!v36)
      {
        v37 = v31 + 3;
        if (v31 + 3 >= v143)
          break;
        v36 = *(_QWORD *)(v142 + 8 * v37);
        if (!v36)
        {
          v38 = v31 + 4;
          if (v31 + 4 >= v143)
            break;
          v36 = *(_QWORD *)(v142 + 8 * v38);
          if (!v36)
          {
            while (1)
            {
              v37 = v38 + 1;
              if (__OFADD__(v38, 1))
                goto LABEL_90;
              if (v37 >= v143)
                goto LABEL_49;
              v36 = *(_QWORD *)(v142 + 8 * v37);
              ++v38;
              if (v36)
                goto LABEL_24;
            }
          }
          v37 = v31 + 4;
        }
      }
    }
LABEL_24:
    v145 = (v36 - 1) & v36;
    v146 = v37;
    v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_25:
    v39 = 16 * v34;
    v40 = *(_QWORD *)(a5 + 56);
    v41 = (Swift::UInt64 *)(*(_QWORD *)(a5 + 48) + v39);
    v42 = v41[1];
    v150 = *v41;
    v43 = (uint64_t *)(v40 + v39);
    v44 = *v43;
    v147 = *((unsigned __int8 *)v43 + 8);
    v45 = *(_QWORD *)(v44 + 16);
    v151 = v42;
    v148 = v44;
    if (v45)
    {
      v163 = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      v46 = (uint64_t *)(v44 + 32);
      do
      {
        v47 = *v46;
        v48 = *(_QWORD *)(a8 + 8);
        v49 = *(_QWORD *)(*v46 + 88);
        swift_retain();
        if (v48 != v49)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage();
            v50 = swift_allocObject();
            *(_OWORD *)(v50 + 16) = *(_OWORD *)(v47 + 16);
            v51 = *(void **)(v47 + 32);
            v157 = *(_QWORD *)(v47 + 40);
            v52 = v157;
            v158 = v51;
            v53 = *(_BYTE *)(v47 + 48);
            v156 = v53;
            v54 = *(_DWORD *)(v47 + 72);
            v55 = *(_OWORD *)(v47 + 56);
            *(_QWORD *)(v50 + 32) = v51;
            *(_QWORD *)(v50 + 40) = v52;
            *(_BYTE *)(v50 + 48) = v53;
            *(_OWORD *)(v50 + 56) = v55;
            *(_DWORD *)(v50 + 72) = v54;
            v159 = *(id *)(v47 + 80);
            *(_QWORD *)(v50 + 80) = v159;
            *(_QWORD *)(v50 + 88) = *(_QWORD *)(v47 + 88);
            *(_QWORD *)(v50 + 96) = *(_QWORD *)(v47 + 96);
            v56 = *(_QWORD *)(v47 + 112);
            v160 = *(_QWORD *)(v47 + 104);
            *(_QWORD *)(v50 + 104) = v160;
            *(_QWORD *)(v50 + 112) = v56;
            v57 = *(_OWORD *)(v47 + 136);
            *(_OWORD *)(v50 + 120) = *(_OWORD *)(v47 + 120);
            *(_OWORD *)(v50 + 136) = v57;
            v58 = *(_OWORD *)(v47 + 168);
            *(_OWORD *)(v50 + 152) = *(_OWORD *)(v47 + 152);
            *(_OWORD *)(v50 + 168) = v58;
            v59 = *(_OWORD *)(v47 + 200);
            *(_OWORD *)(v50 + 184) = *(_OWORD *)(v47 + 184);
            *(_OWORD *)(v50 + 200) = v59;
            v60 = v152;
            v61 = v153;
            v62 = v154;
            (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v152, v47+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v154);
            (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v50+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v60, v62);
            outlined copy of Text.Layout.Line.Line(v158, v157, v156);
            v63 = v159;
            a8 = v155;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_release();
            v47 = v50;
          }
          *(_QWORD *)(v47 + 88) = v48;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v46;
        --v45;
      }
      while (v45);
      v64 = v163;
      v32 = v144;
      a5 = v149;
      v42 = v151;
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v64 = MEMORY[0x24BEE4AF8];
    }
    v65 = *v32;
    swift_beginAccess();
    v66 = *(_QWORD *)(v65 + 48);
    if (!*(_QWORD *)(v66 + 16))
      goto LABEL_38;
    swift_retain();
    v67 = v150;
    v68 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v42);
    if ((v69 & 1) == 0)
    {
      swift_release();
LABEL_38:
      swift_endAccess();
      v77 = *v32;
      swift_retain();
      swift_bridgeObjectRelease();
      v78 = v42;
      v79 = (_QWORD *)(v77 + 48);
      swift_beginAccess();
      v80 = swift_isUniquelyReferenced_nonNull_native();
      v162[0] = *(_QWORD *)(v77 + 48);
      v81 = v162[0];
      *(_QWORD *)(v77 + 48) = 0x8000000000000000;
      v82 = v150;
      v84 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v78);
      v85 = *(_QWORD *)(v81 + 16);
      v86 = (v83 & 1) == 0;
      v87 = v85 + v86;
      if (!__OFADD__(v85, v86))
      {
        v88 = v83;
        if (*(_QWORD *)(v81 + 24) >= v87)
        {
          if ((v80 & 1) != 0)
          {
            v91 = (_QWORD *)v162[0];
            if ((v83 & 1) == 0)
              goto LABEL_45;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v91 = (_QWORD *)v162[0];
            if ((v88 & 1) == 0)
              goto LABEL_45;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, v80);
          v89 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v151);
          if ((v88 & 1) != (v90 & 1))
            goto LABEL_92;
          v84 = v89;
          v91 = (_QWORD *)v162[0];
          if ((v88 & 1) == 0)
          {
LABEL_45:
            v91[(v84 >> 6) + 8] |= 1 << v84;
            v92 = 16 * v84;
            v93 = (Swift::UInt64 *)(v91[6] + 16 * v84);
            v94 = v151;
            *v93 = v82;
            v93[1] = v94;
            v95 = v91[7] + v92;
            *(_QWORD *)v95 = v64;
            *(_BYTE *)(v95 + 8) = v147;
            v96 = v91[2];
            v97 = __OFADD__(v96, 1);
            v98 = v96 + 1;
            if (v97)
              goto LABEL_88;
            v91[2] = v98;
            swift_retain();
            goto LABEL_7;
          }
        }
        v33 = v91[7] + 16 * v84;
        swift_bridgeObjectRelease();
        *(_QWORD *)v33 = v64;
        *(_BYTE *)(v33 + 8) = v147;
LABEL_7:
        *v79 = v91;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        a5 = v149;
        goto LABEL_8;
      }
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    v70 = *(_QWORD *)(v66 + 56) + 16 * v68;
    v71 = *(_QWORD *)v70;
    v72 = *(_BYTE *)(v70 + 8);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    v73 = v72 | v147;
    v74 = *v144;
    v163 = v71;
    swift_retain();
    specialized Array.append<A>(contentsOf:)(v64);
    v75 = v163;
    swift_beginAccess();
    v76 = swift_isUniquelyReferenced_nonNull_native();
    v162[0] = *(_QWORD *)(v74 + 48);
    *(_QWORD *)(v74 + 48) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v75, v73, v67, v151, v76);
    *(_QWORD *)(v74 + 48) = v162[0];
    v32 = v144;
    swift_release();
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_8:
    v31 = v146;
    v30 = v145;
    swift_release();
  }
LABEL_49:
  swift_release();
  v99 = *v32;
  swift_beginAccess();
  v100 = *(_QWORD *)(v99 + 48);
  v101 = *(_QWORD *)(v100 + 64);
  v157 = v100 + 64;
  v102 = 1 << *(_BYTE *)(v100 + 32);
  v103 = -1;
  if (v102 < 64)
    v103 = ~(-1 << v102);
  v104 = v103 & v101;
  v158 = (void *)((unint64_t)(v102 + 63) >> 6);
  v159 = (id)v100;
  swift_bridgeObjectRetain();
  v105 = 0;
  if (v104)
    goto LABEL_55;
LABEL_56:
  v109 = v105 + 1;
  if (__OFADD__(v105, 1))
    goto LABEL_87;
  if (v109 >= (uint64_t)v158)
    goto LABEL_83;
  v110 = *(_QWORD *)(v157 + 8 * v109);
  ++v105;
  if (v110)
  {
LABEL_69:
    v104 = (v110 - 1) & v110;
    for (i = __clz(__rbit64(v110)) + (v105 << 6); ; i = v107 | (v105 << 6))
    {
      v112 = 16 * i;
      v113 = (Swift::UInt64 *)(*((_QWORD *)v159 + 6) + v112);
      v115 = *v113;
      v114 = v113[1];
      v116 = *((_QWORD *)v159 + 7) + v112;
      v117 = *(_QWORD *)v116;
      v118 = *(_BYTE *)(v116 + 8);
      v119 = *(_QWORD *)(a5 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v119 && (specialized __RawDictionaryStorage.find<A>(_:)(v115, v114), (v120 & 1) != 0))
      {
        swift_release();
        swift_bridgeObjectRelease();
        if (!v104)
          goto LABEL_56;
      }
      else
      {
        v160 = v104;
        v121 = *v144;
        v122 = (_QWORD *)(*v144 + 48);
        swift_beginAccess();
        swift_retain();
        v123 = swift_isUniquelyReferenced_nonNull_native();
        v161 = *(_QWORD **)(v121 + 48);
        v124 = v161;
        *(_QWORD *)(v121 + 48) = 0x8000000000000000;
        v126 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v114);
        v127 = v124[2];
        v128 = (v125 & 1) == 0;
        v129 = v127 + v128;
        if (__OFADD__(v127, v128))
          goto LABEL_85;
        v130 = v125;
        if (v124[3] >= v129)
        {
          if ((v123 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v129, v123);
          v131 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v114);
          if ((v130 & 1) != (v132 & 1))
            goto LABEL_92;
          v126 = v131;
        }
        v133 = v118 | 2;
        v134 = v161;
        if ((v130 & 1) != 0)
        {
          v106 = v161[7] + 16 * v126;
          swift_bridgeObjectRelease();
          *(_QWORD *)v106 = v117;
          *(_BYTE *)(v106 + 8) = v133;
        }
        else
        {
          v161[(v126 >> 6) + 8] |= 1 << v126;
          v135 = (Swift::UInt64 *)(v134[6] + 16 * v126);
          *v135 = v115;
          v135[1] = v114;
          v136 = v134[7] + 16 * v126;
          *(_QWORD *)v136 = v117;
          *(_BYTE *)(v136 + 8) = v133;
          v137 = v134[2];
          v97 = __OFADD__(v137, 1);
          v138 = v137 + 1;
          if (v97)
            goto LABEL_89;
          v134[2] = v138;
          swift_retain();
        }
        *v122 = v134;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        a5 = v149;
        v104 = v160;
        if (!v160)
          goto LABEL_56;
      }
LABEL_55:
      v107 = __clz(__rbit64(v104));
      v104 &= v104 - 1;
    }
  }
  v105 = v109 + 1;
  if (v109 + 1 >= (uint64_t)v158)
  {
LABEL_83:
    swift_release();
    return specialized Text.Effect.BaseFragmentIdentifierMap.updateKeyframes(_:)(v140, v141);
  }
  v110 = *(_QWORD *)(v157 + 8 * v105);
  if (v110)
    goto LABEL_69;
  v105 = v109 + 2;
  if (v109 + 2 >= (uint64_t)v158)
    goto LABEL_83;
  v110 = *(_QWORD *)(v157 + 8 * v105);
  if (v110)
    goto LABEL_69;
  v111 = v109 + 3;
  if (v111 >= (uint64_t)v158)
    goto LABEL_83;
  v110 = *(_QWORD *)(v157 + 8 * v111);
  if (v110)
  {
    v105 = v111;
    goto LABEL_69;
  }
  while (1)
  {
    v105 = v111 + 1;
    if (__OFADD__(v111, 1))
      break;
    if (v105 >= (uint64_t)v158)
      goto LABEL_83;
    v110 = *(_QWORD *)(v157 + 8 * v105);
    ++v111;
    if (v110)
      goto LABEL_69;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *Text.Effect.Keyframes.validAnimation(_:)(Swift::UInt64 a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;

  swift_beginAccess();
  v4 = 0;
  if (!specialized Set.contains(_:)(a1, *(_QWORD *)(a2 + 40)))
  {
    swift_beginAccess();
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
    {
      v4 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v6);
      v8 = v4;
    }
    else
    {
      v4 = 0;
    }
    swift_endAccess();
  }
  return v4;
}

void *Text.Effect.Keyframes.validTransform(_:)(Swift::UInt64 a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;

  swift_beginAccess();
  v4 = 0;
  if (!specialized Set.contains(_:)(a1, *(_QWORD *)(a2 + 40)))
  {
    swift_beginAccess();
    v5 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
    {
      v4 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v6);
      v8 = v4;
    }
    else
    {
      v4 = 0;
    }
    swift_endAccess();
  }
  return v4;
}

void *Text.Effect.Keyframes.validFilter(_:)(Swift::UInt64 a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;

  swift_beginAccess();
  v4 = 0;
  if (!specialized Set.contains(_:)(a1, *(_QWORD *)(a2 + 40)))
  {
    swift_beginAccess();
    v5 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
    {
      v4 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v6);
      v8 = v4;
    }
    else
    {
      v4 = 0;
    }
    swift_endAccess();
  }
  return v4;
}

Swift::Int_optional __swiftcall Text.Effect.VisualOrderCollection.Iterator.next()()
{
  Swift::Int v0;
  Swift::Int *v1;
  Swift::Int v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  Swift::Int *v9;
  Swift::Int v10;
  Swift::Int v11;
  BOOL v12;
  Swift::Int v13;
  Swift::Bool v14;
  Swift::Int_optional result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 < v3)
  {
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *v1 + 24 * v2;
      v5 = *(_QWORD *)(v4 + 32);
      v6 = *(_QWORD *)(v4 + 40);
      v7 = *(unsigned __int8 *)(v4 + 48);
      if (!v7)
        goto LABEL_12;
      if (v7 != 1)
        goto LABEL_17;
      v8 = v6 - 1;
      if (!__OFSUB__(v6, 1))
      {
        v9 = v1 + 2;
        v10 = v1[2];
        v0 = v8 - v10;
        if (!__OFSUB__(v8, v10))
        {
          v11 = v10 + 1;
          if (!__OFADD__(v10, 1))
          {
            *v9 = v11;
            v12 = __OFSUB__(v6, v5);
            v5 = v6 - v5;
            if (!v12)
              goto LABEL_15;
            __break(1u);
LABEL_12:
            v9 = v1 + 2;
            v13 = v1[2];
            v0 = v5 + v13;
            if (!__OFADD__(v5, v13))
            {
              v12 = __OFADD__(v13, 1);
              v11 = v13 + 1;
              if (!v12)
              {
                *v9 = v11;
                v12 = __OFSUB__(v6, v5);
                v5 = v6 - v5;
                if (!v12)
                {
LABEL_15:
                  if (v11 < v5)
                    goto LABEL_18;
                  *v9 = 0;
                  v5 = v0;
LABEL_17:
                  v1[1] = v2 + 1;
                  v0 = v5;
                  goto LABEL_18;
                }
LABEL_25:
                __break(1u);
                goto LABEL_26;
              }
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  v0 = 0;
LABEL_18:
  v14 = v2 >= v3;
LABEL_26:
  result.value = v0;
  result.is_nil = v14;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance Text.Effect.VisualOrderCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3;

  v3 = Text.Effect.VisualOrderCollection.Iterator.next()();
  *(_QWORD *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.VisualOrderCollection(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.VisualOrderCollection()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.VisualOrderCollection(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t Text.Effect.Keyframes.Storage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.Keyframes.Storage()
{
  return objc_opt_self();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Key()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 88))(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Text.Effect.Key(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v3;

  v3 = v1[1];
  Hasher._combine(_:)(*v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Key()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 88))(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Key(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(a2[1]) & 1;
  else
    return 0;
}

double Text.Layout.Cluster.xrange.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  double TypographicBounds;
  double v12;
  double v13;
  double v14;
  double v15;
  double MinX;
  double MaxX;
  void *v18;
  CFIndex v19;
  uint64_t v20;
  double v21;
  double v22;
  CFIndex v23;
  const __CTLine *v24;
  const __CTRun *v25;
  BOOL v26;
  CFIndex v27;
  const __CTRun *v28;
  CGFloat v29;
  CGFloat v30;
  CGPoint v32;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint buffer;
  uint64_t v37;
  CFRange v38;
  CFRange v39;
  CFRange v40;
  CGRect v41;
  CGRect v42;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return 0.0;
  swift_bridgeObjectRetain();
  v5 = a3 + 48;
  v6 = INFINITY;
  v7 = -INFINITY;
  do
  {
    v18 = *(void **)(v5 - 16);
    v19 = *(_QWORD *)(v5 + 32);
    v20 = *(_QWORD *)(v5 + 40);
    if (v19 == v20)
    {
      swift_retain();
      v8 = v18;
      v9 = 0.0;
      v10 = 0.0;
      TypographicBounds = 0.0;
      v12 = 0.0;
      v13 = 0.0;
    }
    else
    {
      v21 = *(double *)v5;
      v22 = *(double *)(v5 + 8);
      v23 = *(_QWORD *)(v5 - 8);
      swift_retain_n();
      v24 = v18;
      v25 = (id)_CTLineGetRunAtIndex(v24, v23);
      v26 = __OFSUB__(v20, v19);
      v27 = v20 - v19;
      if (v26)
        __break(1u);
      v28 = v25;
      buffer.x = 0.0;
      buffer.y = 0.0;
      descent = 0.0;
      ascent = 0.0;
      v32.y = 0.0;
      leading = 0.0;
      v32.x = 0.0;
      v38.location = v19;
      v38.length = 1;
      CTRunGetPositions(v25, v38, &buffer);
      v39.location = v19;
      v39.length = 1;
      CTRunGetBaseAdvancesAndOrigins(v28, v39, 0, &v32);
      v29 = buffer.x - v32.x;
      v30 = buffer.y - v32.y;
      v40.location = v19;
      v40.length = v27;
      TypographicBounds = CTRunGetTypographicBounds(v28, v40, &ascent, &descent, &leading);
      swift_release();

      v13 = fabs(descent);
      v12 = ascent;
      v9 = v21 + v29;
      v10 = v22 - v30;
    }
    v5 += 64;
    v14 = v10 - v12;
    v15 = v12 + v13;
    v41.origin.x = v9;
    v41.origin.y = v14;
    v41.size.width = TypographicBounds;
    v41.size.height = v15;
    MinX = CGRectGetMinX(v41);
    if (MinX < v6)
      v6 = MinX;
    v42.origin.x = v9;
    v42.origin.y = v14;
    v42.size.width = TypographicBounds;
    v42.size.height = v15;
    MaxX = CGRectGetMaxX(v42);
    swift_release();

    if (v7 <= MaxX)
      v7 = MaxX;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (v6 > v7)
  {
    __break(1u);
    return 0.0;
  }
  return v6;
}

uint64_t Text.Effect.KeyframeLayout.Fragment.Storage.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined consume of Text.Layout.Line.Line(*(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0
     + OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for Text.Effect.KeyframeLayout.Fragment.Storage()
{
  return type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage();
}

uint64_t type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Text.Effect.KeyframeLayout.Fragment.Storage;
  if (!type metadata singleton initialization cache for Text.Effect.KeyframeLayout.Fragment.Storage)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for Text.Effect.KeyframeLayout.Fragment.Storage()
{
  unint64_t v0;

  type metadata accessor for FontBox<Font.SystemProvider>(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

_QWORD *assignWithCopy for Text.Effect.VisualOrderCollection(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for Text.Effect.VisualOrderCollection(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.VisualOrderCollection()
{
  return &type metadata for Text.Effect.VisualOrderCollection;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeLayout()
{
  return &type metadata for Text.Effect.KeyframeLayout;
}

_QWORD *assignWithCopy for Text.Effect.Key(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for Text.Effect.Key(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Key()
{
  return &type metadata for Text.Effect.Key;
}

ValueMetadata *type metadata accessor for Text.Effect.Keyframes()
{
  return &type metadata for Text.Effect.Keyframes;
}

ValueMetadata *type metadata accessor for Text.Effect.Keyframes.Version()
{
  return &type metadata for Text.Effect.Keyframes.Version;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.KeyframeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, (uint64_t)&type metadata for Text.Effect.KeyframeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout, &type metadata for Text.Effect.KeyframeLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout, &type metadata for Text.Effect.KeyframeLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout, &type metadata for Text.Effect.KeyframeLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout, &type metadata for Text.Effect.KeyframeLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

BOOL Text.Effect.KeyframeLayout.Fragment.isTooComplex.getter(uint64_t a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v15;

  v1 = objc_msgSend(*(id *)(a1 + 80), sel_string);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  swift_bridgeObjectRetain();
  v5 = specialized RangeReplaceableCollection.filter(_:)(v2, v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5;
  if (((v7 >> 60) & ((v5 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  else
    v9 = 7;
  v10 = v9 | (v8 << 16);
  v11 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, v5, v7);
  v12 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v12 = v2;
  if (((v4 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  else
    v13 = 7;
  if ((double)v11 / (double)(uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v13 | (v12 << 16), v2, v4) <= 0.9)
  {
    v15 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v15 > 500;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
}

id Text.Effect.KeyframeLayout.Fragment.runIndices(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  __int128 v23;
  id result;
  CFIndex v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  CFRange StringRange;
  CFIndex v33;
  uint64_t v34;
  char v35;
  uint64_t (*v36)(_QWORD *, _QWORD);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[7];

  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908];
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - v6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, v4);
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - v9;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968];
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v37 - v13;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, v11);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v37 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v37 - v19, a2+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v16, v18);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>();
  v45 = a1;
  LOBYTE(v11) = dispatch thunk of static Equatable.== infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v17 + 8);
  v42 = v16;
  v21(v20, v16);
  if ((v11 & 1) != 0)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
    v22 = swift_allocObject();
    v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v22 + 16) = xmmword_23527E860;
    *(_OWORD *)(v22 + 32) = v23;
    return (id)v22;
  }
  v37 = v7;
  result = (id)RangeSet.init()();
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)(a2 + 24);
  if (v25 == v26)
  {
LABEL_4:
    v27 = v39;
    RangeSet.ranges.getter();
    lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
    v22 = dispatch thunk of Sequence._copyToContiguousArray()();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v27);
    return (id)v22;
  }
  if (v26 >= v25)
  {
    v41 = v14;
    while (v25 < v26)
    {
      v29 = *(void **)(a2 + 32);
      v28 = *(_QWORD *)(a2 + 40);
      if ((*(_BYTE *)(a2 + 48) & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(a2 + 32), *(_QWORD *)(a2 + 40), 1);
        result = (id)_NSTextLineFragmentGetCTLine(v29);
        if (!result)
          goto LABEL_22;
        v30 = result;
        outlined consume of Text.Layout.Line.Line(v29, v28, 1);
        v29 = v30;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v29, v28, 0);

        swift_release();
      }
      v31 = (id)_CTLineGetRunAtIndex((const __CTLine *)v29, v25);
      StringRange = CTRunGetStringRange((CTRunRef)v31);

      result = (id)swift_release();
      if (__OFADD__(StringRange.location, StringRange.length))
        goto LABEL_19;
      if (StringRange.location + StringRange.length < StringRange.location)
        goto LABEL_20;
      v33 = v25 + 1;
      v46[0] = StringRange.location;
      v46[1] = StringRange.location + StringRange.length;
      v34 = RangeSet.ranges.getter();
      MEMORY[0x24BDAC7A8](v34);
      *(&v37 - 2) = (char *)v46;
      v35 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in RangeSet.overlaps(_:), (uint64_t)(&v37 - 4));
      result = (id)(*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v10, v44);
      v14 = v41;
      if ((v35 & 1) != 0)
      {
        v46[4] = v25;
        v46[5] = v25 + 1;
        v36 = (uint64_t (*)(_QWORD *, _QWORD))RangeSet._ranges.modify();
        RangeSet.Ranges._insert(contentsOf:)();
        result = (id)v36(v46, 0);
      }
      v25 = v33;
      if (v26 == v33)
        goto LABEL_4;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 >= *(_QWORD *)(*(_QWORD *)v2 + 16) && v3 < *(_QWORD *)(*(_QWORD *)v2 + 24))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.KeyframeLayout.Fragment(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >= *(_QWORD *)(*(_QWORD *)v1 + 16) && v2 < *(_QWORD *)(*(_QWORD *)v1 + 24))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Effect.KeyframeLayout.Fragment(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 24);
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.KeyframeLayout.Fragment(_QWORD *a1, uint64_t *a2))(_QWORD *a1)
{
  uint64_t *v2;
  _QWORD *v5;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = Text.Effect.KeyframeLayout.Fragment.subscript.read(v5, *a2, *v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*Text.Effect.KeyframeLayout.Fragment.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))(id **a1)
{
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(id **);
  int v9;
  void (*result)(id **);
  void (*v11)(id **);
  __int128 v12;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v8 = *(void (**)(id **))(a3 + 32);
  v7 = *(_QWORD *)(a3 + 40);
  v12 = *(_OWORD *)(a3 + 56);
  v9 = *(_DWORD *)(a3 + 72);
  if ((*(_BYTE *)(a3 + 48) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v8, v7, 0);
    outlined copy of Text.Layout.Line.Line(v8, v7, 0);

    swift_release();
    goto LABEL_5;
  }
  outlined copy of Text.Layout.Line.Line(v8, v7, 1);
  result = (void (*)(id **))(id)_NSTextLineFragmentGetCTLine(v8);
  if (result)
  {
    v11 = result;
    outlined consume of Text.Layout.Line.Line(v8, v7, 1);
    v7 = 0;
    v8 = v11;
LABEL_5:
    *v6 = v8;
    v6[1] = a2;
    *((_OWORD *)v6 + 1) = v12;
    *((_DWORD *)v6 + 8) = v9;
    v6[5] = v7;
    return Text.Layout.Line.subscript.read;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = *v2;
  v6 = *(_QWORD *)(*v2 + 16);
  v5 = *(_QWORD *)(*v2 + 24);
  if (v5 < v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = *a1;
  if (*a1 < v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = a1[1];
  if (v5 >= v8)
  {
    *a2 = v7;
    a2[1] = v8;
    a2[2] = result;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Effect.KeyframeLayout.Fragment(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (v3 < v2)
  {
    __break(1u);
  }
  else
  {
    *a1 = v2;
    a1[1] = v3;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Effect.KeyframeLayout.Fragment()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == *(_QWORD *)(*(_QWORD *)v0 + 24);
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 >= *(_QWORD *)(*(_QWORD *)v3 + 16) && *(_QWORD *)(*(_QWORD *)v3 + 24) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Effect.KeyframeLayout.Fragment(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *result;
  v4 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (v5 < *a2 || v4 < v6 || v3 < v6 || v5 < v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  result = (uint64_t *)(v4 - v3);
  if (__OFSUB__(v4, v3))
LABEL_14:
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  v3 = *result;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (*result >= *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v6 = __OFSUB__(v3, v4);
    v5 = v3 - v4 < 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v5 != v6)
    *a2 = v3 + 1;
  else
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance Text.Effect.KeyframeLayout.Fragment(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (*result >= *(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 != v5)
    *result = v2 + 1;
  else
    __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.KeyframeLayout.Fragment(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
}

uint64_t protocol witness for Collection.count.getter in conformance Text.Effect.KeyframeLayout.Fragment()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  result = v1 - v2;
  if (v1 < v2)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v1, v2))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.KeyframeLayout.Fragment()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.KeyframeLayout.Fragment(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, void *a5)
{
  void **v10;
  char *v11;
  void (*v12)(_QWORD *@<X8>);
  _QWORD *v13;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t result;
  _QWORD *v36;
  __int128 v37;
  _OWORD v38[2];

  v10 = (void **)(a1 + 16);
  swift_beginAccess();
  v11 = *(char **)(a1 + 16);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_14;
  }
  swift_beginAccess();
  v12 = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_14:
    swift_beginAccess();
    v34 = *v10;
    *v10 = 0;

    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v12);
  }
  v13 = (_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
  v17 = a4[1];
  v37 = *a4;
  v38[0] = v17;
  *(_OWORD *)((char *)v38 + 12) = *(__int128 *)((char *)a4 + 28);
  type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage();
  swift_allocObject();
  v18 = v11;
  outlined retain of Text.Layout.Line((uint64_t)a4);
  v19 = a5;
  specialized Text.Effect.KeyframeLayout.Fragment.Storage.init(line:runIndices:attributedString:)((uint64_t)&v37, v15, v14, v19);

  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = (_QWORD *)*v13;
  v36 = (_QWORD *)*v13;
  *v13 = 0x8000000000000000;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
LABEL_16:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_13:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    swift_beginAccess();
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    v12 = protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.AnimatableData;
    *(_BYTE *)(a2 + 32) = 1;
    goto LABEL_14;
  }
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v21 = v36;
    }
LABEL_10:
    v19 = v18;
    *v13 = v21;
    swift_bridgeObjectRelease();
    v30 = (_QWORD *)*v13;
    swift_bridgeObjectRetain();
    if ((v27 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v23, v16, MEMORY[0x24BEE4AF8], v30);
    v31 = v30[7];
    v32 = swift_bridgeObjectRelease();
    v33 = v31 + 8 * v23;
    MEMORY[0x23B7C61A8](v32);
    v18 = (char *)(a2 + 16);
    if (*(_QWORD *)(*(_QWORD *)v33 + 16) < *(_QWORD *)(*(_QWORD *)v33 + 24) >> 1)
      goto LABEL_13;
    goto LABEL_16;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
  v21 = v36;
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    goto LABEL_10;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.subscript.read in conformance Text.Effect.KeyframeLayout(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    *result = *(_QWORD *)(*(_QWORD *)v2 + 8 * v3 + 32);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.KeyframeLayout@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *(uint64_t **)v2, *(_QWORD *)(*(_QWORD *)v2 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = v2[8];
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 24) = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.KeyframeLayout@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  unint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.KeyframeLayout(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.KeyframeLayout()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD **)v0, *(_BYTE *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.KeyframeLayout(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *(_QWORD **)v3, *(_BYTE *)(v3 + 8));
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>, MEMORY[0x24BEE1BD8]);
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, (uint64_t)&type metadata for Text.Effect.KeyframeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>, MEMORY[0x24BEE1BA8]);
}

uint64_t lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Range<Text.Effect.FragmentIdentifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
    v7[1] = lazy protocol witness table accessor for type Int and conformance Int();
    result = MEMORY[0x23B7C9C04](a2, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, (uint64_t)&type metadata for Text.Effect.KeyframeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator;
  if (!lazy protocol witness table cache variable for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.VisualOrderCollection.Iterator, &type metadata for Text.Effect.VisualOrderCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator);
  }
  return result;
}

uint64_t implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:)(uint64_t *a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;

  _StringGuts.grow(_:)(41);
  v2._object = (void *)0x80000002352E68A0;
  v2._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 44;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 657961;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v8 = *a1;
  v7 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B7C5F5C](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unint64_t lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>;
  if (!lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4988], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t (*a6)(void), void (*a7)(void), void (*a8)(void))
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  char v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  void (*v55)(void);

  swift_bridgeObjectRetain();
  v13 = swift_retain();
  v14 = ((uint64_t (*)(uint64_t))a6)(v13);
  if (!v15)
    goto LABEL_23;
  v16 = v14;
  v17 = v15;
  v55 = a7;
  v18 = (_QWORD *)*a5;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  v21 = v18[2];
  v22 = (v19 & 1) == 0;
  if (__OFADD__(v21, v22))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v23 = v19;
  if (v18[3] >= v21 + v22)
  {
    if ((a4 & 1) != 0)
    {
      v26 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      v55();
      v26 = (_QWORD *)*a5;
      if ((v23 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v26[(v20 >> 6) + 8] |= 1 << v20;
    v30 = 8 * v20;
    *(_QWORD *)(v26[6] + v30) = v16;
    *(_QWORD *)(v26[7] + v30) = v17;
    v31 = v26[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v26[2] = v33;
LABEL_13:
    v34 = a6();
    if (v35)
    {
      v36 = v34;
      v37 = v35;
      do
      {
        v42 = (_QWORD *)*a5;
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
        v45 = v42[2];
        v46 = (v44 & 1) == 0;
        v32 = __OFADD__(v45, v46);
        v47 = v45 + v46;
        if (v32)
          goto LABEL_24;
        v48 = v44;
        if (v42[3] < v47)
        {
          ((void (*)(uint64_t, uint64_t))a8)(v47, 1);
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
          if ((v48 & 1) != (v49 & 1))
            goto LABEL_26;
        }
        v50 = (_QWORD *)*a5;
        if ((v48 & 1) != 0)
        {
          v38 = 8 * v43;
          v39 = *(id *)(v50[7] + 8 * v43);

          v40 = v50[7];
          *(_QWORD *)(v40 + v38) = v39;
        }
        else
        {
          v50[(v43 >> 6) + 8] |= 1 << v43;
          v51 = 8 * v43;
          *(_QWORD *)(v50[6] + v51) = v36;
          *(_QWORD *)(v50[7] + v51) = v37;
          v52 = v50[2];
          v32 = __OFADD__(v52, 1);
          v53 = v52 + 1;
          if (v32)
            goto LABEL_25;
          v50[2] = v53;
        }
        v36 = a6();
        v37 = v41;
      }
      while (v41);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  a8();
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
  if ((v23 & 1) == (v25 & 1))
  {
    v20 = v24;
    v26 = (_QWORD *)*a5;
    if ((v23 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v27 = 8 * v20;
    v28 = *(id *)(v26[7] + 8 * v20);

    v29 = v26[7];
    *(_QWORD *)(v29 + v27) = v28;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v3 = (void *)a1[1];
  *a2 = v2;
  a2[1] = v3;
  return v3;
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v10 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 != v9)
          goto LABEL_9;
      }
      return v5 << 16;
    }
    v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v8)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

unint64_t String.UnicodeScalarView.distance(from:to:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  result = _StringGuts.validateInclusiveScalarIndex(_:)(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(before:)();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO14KeyframeLayoutV_Sis5NeverOTg503_s7d3UI4f5VAAE6g44O10PartialMapV8validate9keyframes4sizeyAE0e8h23F0V_So6CGSizeVtFSiAE0J6I16V8FragmentVXEfU_Tf1cn_nTf4x_nTm(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v8;
    v4 = a1 + 32;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 96) + 16);
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *specialized Text.Effect.VisualOrderCollection.init(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = 0;
  v4 = a1 + 32;
  v5 = a1 + 48;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v3 >= (uint64_t)v2)
      goto LABEL_67;
    v10 = v3 + 1;
    v1 = *(_QWORD *)(v4 + 8 * v3);
    if (v3 + 1 == v2)
      break;
    if (v3 + 1 >= v2)
      goto LABEL_68;
    v11 = v1 + 1;
    if (__OFADD__(v1, 1))
      goto LABEL_69;
    v12 = *(_QWORD *)(v4 + 8 * v10);
    if (v11 == v12)
    {
      v13 = v2;
      v14 = v3;
      if (v3 + 2 != v2)
      {
        while (1)
        {
          v15 = v14 + 3;
          if (__OFADD__(v14 + 2, 1))
            break;
          v16 = v15 - v10;
          if (__OFSUB__(v15, v10))
            goto LABEL_60;
          v17 = __OFADD__(v1, v16);
          v18 = v1 + v16;
          if (v17)
            goto LABEL_61;
          if (v14 + 2 >= v2)
            goto LABEL_62;
          if (v18 != *(_QWORD *)(v5 + 8 * v14))
          {
            v13 = v14 + 2;
            goto LABEL_34;
          }
          ++v14;
          if (v15 == v2)
          {
            v13 = v2;
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
LABEL_34:
      if (v13 <= v3)
        goto LABEL_71;
      if (v13 < 1)
        goto LABEL_72;
      if (v13 > (uint64_t)v2)
        goto LABEL_73;
      v26 = *(_QWORD *)(v4 + 8 * (v13 - 1));
      v11 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_74;
      if (v11 < v1)
        goto LABEL_75;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v28 = v6[2];
      v27 = v6[3];
      if (v28 >= v27 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v6);
      v7 = 0;
      v6[2] = v28 + 1;
      v8 = &v6[3 * v28];
      v8[4] = v1;
      v9 = v8 + 4;
    }
    else
    {
      if (__OFSUB__(v1, 1))
        goto LABEL_70;
      if (v1 - 1 == v12)
      {
        v13 = v2;
        v19 = v3;
        if (v3 + 2 != v2)
        {
          while (1)
          {
            v20 = v19 + 3;
            if (__OFADD__(v19 + 2, 1))
              goto LABEL_63;
            v21 = v20 - v10;
            if (__OFSUB__(v20, v10))
              goto LABEL_64;
            v17 = __OFSUB__(v1, v21);
            v22 = v1 - v21;
            if (v17)
              goto LABEL_65;
            if (v19 + 2 >= v2)
              goto LABEL_66;
            if (v22 != *(_QWORD *)(v5 + 8 * v19))
            {
              v13 = v19 + 2;
              break;
            }
            ++v19;
            if (v20 == v2)
            {
              v13 = v2;
              break;
            }
          }
        }
        if (v13 <= v3)
          goto LABEL_76;
        if (v13 < 1)
          goto LABEL_77;
        if (v13 > (uint64_t)v2)
          goto LABEL_78;
        v1 = *(_QWORD *)(v4 + 8 * (v13 - 1));
        if (v11 < v1)
          goto LABEL_79;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v30 = v6[2];
        v29 = v6[3];
        if (v30 >= v29 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v6);
        v6[2] = v30 + 1;
        v31 = &v6[3 * v30];
        v31[4] = v1;
        v9 = v31 + 4;
        v7 = 1;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v24 = v6[2];
        v23 = v6[3];
        if (v24 >= v23 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v6);
        v11 = 0;
        v6[2] = v24 + 1;
        v25 = &v6[3 * v24];
        v25[4] = v1;
        v9 = v25 + 4;
        v7 = 2;
        v13 = v10;
      }
    }
    v9[1] = v11;
    *((_BYTE *)v9 + 16) = v7;
    v3 = v13;
    if (v13 == v2)
      return v6;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_55;
LABEL_80:
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
LABEL_55:
  v33 = v6[2];
  v32 = v6[3];
  if (v33 >= v32 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v6);
  v6[2] = v33 + 1;
  v34 = &v6[3 * v33];
  v34[4] = v1;
  v34[5] = 0;
  *((_BYTE *)v34 + 48) = 2;
  return v6;
}

uint64_t specialized Text.Effect.KeyframeLayout.Fragment.Storage.init(line:runIndices:attributedString:)(uint64_t a1, CFIndex a2, CFIndex a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  CGFloat v14;
  int v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  CGFloat x;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CFIndex v29;
  double v30;
  double v31;
  const __CTLine *v32;
  CFIndex v33;
  void *v34;
  CGFloat v35;
  CGFloat v36;
  double TypographicBounds;
  double v38;
  double v39;
  double v40;
  CGFloat v41;
  const __CTLine *v42;
  double *v43;
  CGFloat v44;
  CGFloat v45;
  char *v46;
  int64_t v47;
  CGFloat a;
  uint64_t *v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const __CTLine *v64;
  void *v65;
  CGFloat v66;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  id v78;
  CGFloat *v79;
  uint64_t result;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  char *v86;
  uint64_t v87;
  double v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  double v93;
  double v94;
  CGFloat v95;
  CGFloat v96;
  CGPoint originsBuffer;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGAffineTransform buffer;
  uint64_t v102;
  CFRange v103;
  CFRange v104;
  CFRange v105;
  CFRange v106;
  CGRect v107;
  CGRect v108;
  CGRect ImageBounds;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;

  v102 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  MEMORY[0x24BDAC7A8](v9);
  v86 = (char *)&v81 - v12;
  if (a2 == a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
    return result;
  }
  v13 = *(void **)a1;
  v14 = *(double *)(a1 + 8);
  v15 = *(unsigned __int8 *)(a1 + 16);
  v16 = *(double *)(a1 + 24);
  v17 = *(double *)(a1 + 32);
  v18 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)a1;
  *(CGFloat *)(v4 + 40) = v14;
  *(_BYTE *)(v4 + 48) = v15;
  v96 = v16;
  *(double *)(v4 + 56) = v16;
  *(double *)(v4 + 64) = v17;
  v95 = v17;
  *(_DWORD *)(v4 + 72) = v18;
  *(_QWORD *)(v4 + 80) = a4;
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  v87 = v4;
  if (a3 < a2)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  v81 = v11;
  v82 = v10;
  v20 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v19 = *(double *)(MEMORY[0x24BDBF070] + 24);
  x = *MEMORY[0x24BDBF070];
  v21 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v88 = *MEMORY[0x24BDBF070];
  outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, v15);
  v23 = a4;
  v24 = 0.0;
  v83 = v21;
  v25 = v21;
  v84 = v20;
  v26 = v20;
  v85 = v19;
  v27 = v19;
  v28 = 0.0;
  v29 = a2;
  v30 = 0.0;
  v31 = 0.0;
  do
  {
    if (v29 >= a3)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v89 = v27;
    v90 = v26;
    v91 = v25;
    v94 = v24;
    v93 = v28;
    v92 = x;
    if ((v15 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
      v42 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v13);
      if (!v42)
        goto LABEL_34;
      v32 = v42;
      outlined consume of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);

      swift_release();
      v32 = (const __CTLine *)v13;
    }
    v33 = v29 + 1;
    v34 = (id)_CTLineGetRunAtIndex(v32, v29);
    buffer.a = 0.0;
    buffer.b = 0.0;
    descent = 0.0;
    ascent = 0.0;
    originsBuffer.y = 0.0;
    leading = 0.0;
    originsBuffer.x = 0.0;
    v103.location = 0;
    v103.length = 1;
    CTRunGetPositions((CTRunRef)v34, v103, (CGPoint *)&buffer);
    v104.location = 0;
    v104.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v34, v104, 0, &originsBuffer);
    v35 = buffer.a - originsBuffer.x;
    v36 = buffer.b - originsBuffer.y;
    v105.location = 0;
    v105.length = 0;
    TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v34, v105, &ascent, &descent, &leading);

    swift_release();
    v38 = ascent;
    v39 = fabs(descent);
    v40 = leading;
    v116.origin.x = v96 + v35;
    v116.origin.y = v95 - v36 - ascent;
    v116.size.height = v39 + ascent;
    v107.origin.x = v92;
    v107.origin.y = v91;
    v107.size.width = v90;
    v107.size.height = v89;
    v116.size.width = TypographicBounds;
    *(CGRect *)(&v25 - 1) = CGRectUnion(v107, v116);
    x = v108.origin.x;
    if (v31 <= v38)
      v31 = v38;
    if (v30 <= v39)
      v30 = v39;
    v28 = v93;
    if (v93 <= v40)
      v28 = v40;
    v24 = v94 + TypographicBounds;
    v29 = v33;
    v41 = v88;
  }
  while (a3 != v33);
  v43 = (double *)v87;
  *(CGFloat *)(v87 + 120) = v108.origin.x;
  v43[16] = v25;
  v43[17] = v26;
  v43[18] = v27;
  v43[23] = v31;
  v43[24] = v30;
  v43[25] = v28;
  v43[26] = v24;
  *(_QWORD *)&buffer.a = v13;
  buffer.b = v14;
  LOBYTE(buffer.c) = v15;
  v44 = v96;
  v45 = v95;
  buffer.d = v96;
  buffer.tx = v95;
  LODWORD(buffer.ty) = v18;
  Text.Layout.Line.characterRanges(runIndices:)(a2, a3);
  *(_QWORD *)&buffer.a = v13;
  buffer.b = v14;
  LOBYTE(buffer.c) = v15;
  buffer.d = v44;
  buffer.tx = v45;
  LODWORD(buffer.ty) = v18;
  v46 = Text.Layout.Line.clusters(for:)();
  v47 = *((_QWORD *)v46 + 2);
  a = MEMORY[0x24BEE4AF8];
  LODWORD(v94) = v15;
  if (v47)
  {
    *(_QWORD *)&buffer.a = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47, 0);
    a = buffer.a;
    v49 = (uint64_t *)(v46 + 48);
    v50 = v85;
    v51 = v84;
    v52 = v83;
    do
    {
      v53 = *v49;
      v54 = swift_bridgeObjectRetain();
      v56 = Text.Layout.Cluster.xrange.getter(v54, v55, v53);
      swift_bridgeObjectRelease();
      buffer.a = a;
      v58 = *(_QWORD *)(*(_QWORD *)&a + 16);
      v57 = *(_QWORD *)(*(_QWORD *)&a + 24);
      if (v58 >= v57 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
        a = buffer.a;
      }
      *(_QWORD *)(*(_QWORD *)&a + 16) = v58 + 1;
      *(double *)(*(_QWORD *)&a + 8 * v58 + 32) = v56;
      v49 += 3;
      --v47;
    }
    while (v47);
    LOBYTE(v15) = LOBYTE(v94);
  }
  else
  {
    v50 = v85;
    v51 = v84;
    v52 = v83;
  }
  v59 = v87;
  *(_QWORD *)(v87 + 96) = v46;
  *(_QWORD *)&buffer.a = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((_QWORD *)v46 + 2));
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&buffer, *(uint64_t *)&a);
  swift_bridgeObjectRelease_n();
  v60 = specialized Text.Effect.VisualOrderCollection.init(_:)(*(uint64_t *)&buffer.a);
  v62 = v61;
  swift_release();
  *(_QWORD *)(v59 + 104) = v60;
  *(_QWORD *)(v59 + 112) = v62;
  do
  {
    if (a2 >= a3)
      goto LABEL_32;
    if ((v15 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
      v78 = (id)_NSTextLineFragmentGetCTLine(v13);
      if (!v78)
        goto LABEL_35;
      v63 = v78;
      outlined consume of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);

      swift_release();
      v63 = v13;
    }
    swift_retain();
    v64 = v63;
    v65 = (id)_CTLineGetRunAtIndex(v64, a2);
    v106.location = 0;
    v106.length = 0;
    ImageBounds = CTRunGetImageBounds((CTRunRef)v65, 0, v106);
    v66 = ImageBounds.origin.x;
    y = ImageBounds.origin.y;
    width = ImageBounds.size.width;
    height = ImageBounds.size.height;

    buffer.b = 0.0;
    buffer.c = 0.0;
    buffer.a = 1.0;
    buffer.d = -1.0;
    buffer.tx = v96;
    buffer.ty = v95;
    v110.origin.x = v66;
    v110.origin.y = y;
    v110.size.width = width;
    v110.size.height = height;
    v111 = CGRectApplyAffineTransform(v110, &buffer);
    v70 = v111.origin.x;
    v71 = v111.origin.y;
    v72 = v111.size.width;
    v73 = v111.size.height;
    swift_release();

    v112.origin.x = v70;
    v112.origin.y = v71;
    v112.size.width = v72;
    v112.size.height = v73;
    v113 = CGRectInset(v112, -1.0, -1.0);
    v74 = v113.origin.x;
    v75 = v113.origin.y;
    v76 = v113.size.width;
    v77 = v113.size.height;
    swift_release();

    v114.origin.x = v41;
    v114.origin.y = v52;
    v114.size.width = v51;
    v114.size.height = v50;
    v117.origin.x = v74;
    v117.origin.y = v75;
    v117.size.width = v76;
    v117.size.height = v77;
    v115 = CGRectUnion(v114, v117);
    v41 = v115.origin.x;
    v52 = v115.origin.y;
    v51 = v115.size.width;
    v50 = v115.size.height;
    ++a2;
    LOBYTE(v15) = LOBYTE(v94);
  }
  while (a3 != a2);
  outlined consume of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, SLOBYTE(v94));
  v79 = (CGFloat *)v87;
  *(CGFloat *)(v87 + 152) = v41;
  v79[20] = v52;
  v79[21] = v51;
  v79[22] = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))((uint64_t)v79+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v86, v82);
  v79[11] = 0.0;
  return (uint64_t)v79;
}

uint64_t specialized static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(_QWORD *a1, uint64_t a2, uint64_t *a3, const __CFAttributedString *a4, uint64_t a5, uint64_t a6, uint64_t a7, CFIndex a8, unsigned __int8 a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const __CFAttributedString *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  void **v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  CFIndex v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  void *v41;
  const __CFDictionary *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  id v51;
  const __CTLine *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  const __CFDictionary *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  _QWORD *v96;
  id v97;
  uint64_t (*v98)(void);
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t inited;
  CFIndex v112;
  char v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v123;
  char v124;
  unint64_t v125;
  char v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  _QWORD *v135;
  char v136;
  _QWORD *v137;
  char v138;
  unint64_t v139;
  uint64_t v140;
  _BOOL8 v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t result;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  void **v161;
  void **v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  CFIndex Length;
  uint64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  const __CFAttributedString *v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  _QWORD *v182;
  void *v183;
  CFIndex v184;
  uint64_t v185;
  __int128 v186;
  char v187[32];
  uint64_t v188;
  __int128 v189;
  _OWORD v190[3];

  Length = a8;
  v166 = a7;
  *(_QWORD *)&v167 = a6;
  v178 = a4;
  v157 = a2;
  v165 = a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v155 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v154 = (char *)&v151 - v12;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v168 = v13;
  v156 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v153 = (char *)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v152 = (char *)&v151 - v16;
  v17 = *a3;
  v18 = swift_allocObject();
  v177 = v18;
  *(_QWORD *)(v18 + 16) = MEMORY[0x24BEE4B00];
  v151 = v18 + 16;
  v19 = *(_QWORD *)(v17 + 16);
  v163 = a5;
  v160 = v17;
  if (!v19)
  {
LABEL_65:
    Length = CFAttributedStringGetLength(v178);
    if (Length < 0)
      goto LABEL_139;
    v72 = v151;
    swift_beginAccess();
    v73 = *(_QWORD *)v72;
    v74 = *(_QWORD *)v72 + 64;
    v75 = 1 << *(_BYTE *)(*(_QWORD *)v72 + 32);
    v76 = -1;
    if (v75 < 64)
      v76 = ~(-1 << v75);
    v77 = v76 & *(_QWORD *)(*(_QWORD *)v72 + 64);
    v78 = (unint64_t)(v75 + 63) >> 6;
    swift_bridgeObjectRetain();
    v79 = v77;
    v80 = 0;
    v167 = xmmword_23527E860;
    v81 = v157;
    v82 = v152;
    v166 = v73;
    v170 = v74;
    v171 = v78;
    while (1)
    {
      while (!v79)
      {
        v85 = v80 + 1;
        if (__OFADD__(v80, 1))
          goto LABEL_125;
        if (v85 >= v78)
        {
LABEL_123:
          swift_release();
          return swift_release();
        }
        v86 = *(_QWORD *)(v74 + 8 * v85);
        ++v80;
        if (!v86)
        {
          v80 = v85 + 1;
          if (v85 + 1 >= v78)
            goto LABEL_123;
          v86 = *(_QWORD *)(v74 + 8 * v80);
          if (!v86)
          {
            v80 = v85 + 2;
            if (v85 + 2 >= v78)
              goto LABEL_123;
            v86 = *(_QWORD *)(v74 + 8 * v80);
            if (!v86)
            {
              v87 = v85 + 3;
              if (v87 >= v78)
                goto LABEL_123;
              v86 = *(_QWORD *)(v74 + 8 * v87);
              if (!v86)
              {
                while (1)
                {
                  v80 = v87 + 1;
                  if (__OFADD__(v87, 1))
                    goto LABEL_130;
                  if (v80 >= v78)
                    goto LABEL_123;
                  v86 = *(_QWORD *)(v74 + 8 * v80);
                  ++v87;
                  if (v86)
                    goto LABEL_87;
                }
              }
              v80 = v87;
            }
          }
        }
LABEL_87:
        v79 = (v86 - 1) & v86;
        v84 = __clz(__rbit64(v86)) + (v80 << 6);
        if (*(_QWORD *)(a5 + 16))
          goto LABEL_88;
      }
      v83 = __clz(__rbit64(v79));
      v79 &= v79 - 1;
      v84 = v83 | (v80 << 6);
      if (*(_QWORD *)(a5 + 16))
      {
LABEL_88:
        v88 = 8 * v84;
        v176 = (id)v79;
        v89 = *(_QWORD *)(*(_QWORD *)(v73 + 48) + v88);
        v90 = *(_QWORD *)(*(_QWORD *)(v73 + 56) + v88);
        v178 = (const __CFAttributedString *)v80;
        v179 = v89;
        v91 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
        v79 = (unint64_t)v176;
        v80 = (uint64_t)v178;
        if ((v92 & 1) != 0)
        {
          v174 = *(_QWORD **)(*(_QWORD *)(a5 + 56) + 8 * v91);
          if (*(_QWORD *)(v81 + 16) && (v93 = specialized __RawDictionaryStorage.find<A>(_:)(v179), (v94 & 1) != 0))
          {
            v95 = *(_QWORD *)(*(_QWORD *)(v81 + 56) + 8 * v93);
            swift_bridgeObjectRetain();
            v96 = v174;
            v175 = v95;
            swift_retain();
          }
          else
          {
            v97 = v174;
            v98 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v174) + 0xA0);
            swift_bridgeObjectRetain();
            v99 = v97;
            v175 = v98();
          }
          v100 = v168;
          v101 = *(_QWORD *)(v17 + 16);
          v172 = *(_QWORD *)(v90 + 16);
          if (v172 == v101)
          {
            lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
            RangeSet.init()();
            v102 = *(_QWORD *)(v90 + 16);
            if (v102)
            {
              swift_bridgeObjectRetain();
              v103 = 0;
              v104 = v156;
              v105 = *(void (**)(char *, uint64_t, uint64_t))(v156 + 16);
              v106 = v82;
              v107 = v153;
              do
              {
                v108 = *(_QWORD *)(v90 + 8 * v103++ + 32);
                v105(v107, v108+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v100);
                specialized RangeSet.insert(contentsOf:)();
                v100 = v168;
                (*(void (**)(char *, uint64_t))(v104 + 8))(v107, v168);
              }
              while (v102 != v103);
              swift_bridgeObjectRelease();
              v82 = v106;
              v17 = v160;
              v73 = v166;
            }
            v109 = v100;
            RangeSet.ranges.getter();
            lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
            v110 = dispatch thunk of Sequence._copyToContiguousArray()();
            type metadata accessor for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>();
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v167;
            v112 = Length;
            *(_QWORD *)(inited + 32) = 0;
            *(_QWORD *)(inited + 40) = v112;
            v113 = specialized static Array<A>.== infix(_:_:)(v110, (_QWORD *)inited);
            swift_setDeallocating();
            swift_release();
            if ((v113 & 1) != 0)
              v114 = 0;
            else
              v114 = 3;
            LODWORD(v173) = v114;
            (*(void (**)(char *, uint64_t))(v156 + 8))(v82, v109);
          }
          else
          {
            LODWORD(v173) = 3;
          }
          v115 = v175;
          swift_retain();
          v116 = v165;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v182 = (_QWORD *)*v116;
          v118 = v182;
          *v116 = 0x8000000000000000;
          v120 = specialized __RawDictionaryStorage.find<A>(_:)(v179, v115);
          v121 = v118[2];
          v122 = (v119 & 1) == 0;
          v123 = v121 + v122;
          if (__OFADD__(v121, v122))
            goto LABEL_126;
          v124 = v119;
          if (v118[3] >= v123)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v127 = v182;
              if ((v119 & 1) != 0)
                goto LABEL_110;
            }
            else
            {
              specialized _NativeDictionary.copy()();
              v127 = v182;
              if ((v124 & 1) != 0)
                goto LABEL_110;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v123, isUniquelyReferenced_nonNull_native);
            v125 = specialized __RawDictionaryStorage.find<A>(_:)(v179, v175);
            if ((v124 & 1) != (v126 & 1))
              goto LABEL_140;
            v120 = v125;
            v127 = v182;
            if ((v124 & 1) != 0)
            {
LABEL_110:
              v128 = v127[7] + 16 * v120;
              swift_bridgeObjectRelease();
              *(_QWORD *)v128 = v90;
              *(_BYTE *)(v128 + 8) = v173;
              goto LABEL_114;
            }
          }
          v127[(v120 >> 6) + 8] |= 1 << v120;
          v129 = (_QWORD *)(v127[6] + 16 * v120);
          v130 = v175;
          *v129 = v179;
          v129[1] = v130;
          v131 = v127[7] + 16 * v120;
          *(_QWORD *)v131 = v90;
          *(_BYTE *)(v131 + 8) = v173;
          v132 = v127[2];
          v133 = __OFADD__(v132, 1);
          v134 = v132 + 1;
          if (v133)
            goto LABEL_128;
          v127[2] = v134;
          swift_retain();
LABEL_114:
          v135 = v165;
          *v165 = v127;
          swift_release();
          swift_bridgeObjectRelease();
          v136 = swift_isUniquelyReferenced_nonNull_native();
          v182 = (_QWORD *)v135[1];
          v137 = v182;
          v135[1] = 0x8000000000000000;
          v139 = specialized __RawDictionaryStorage.find<A>(_:)(v179);
          v140 = v137[2];
          v141 = (v138 & 1) == 0;
          v142 = v140 + v141;
          v78 = v171;
          if (__OFADD__(v140, v141))
            goto LABEL_127;
          v143 = v138;
          if (v137[3] >= v142)
          {
            if ((v136 & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v142, v136);
            v144 = specialized __RawDictionaryStorage.find<A>(_:)(v179);
            if ((v143 & 1) != (v145 & 1))
              goto LABEL_141;
            v139 = v144;
          }
          v81 = v157;
          v146 = v182;
          if ((v143 & 1) != 0)
          {
            *(_QWORD *)(v182[7] + 8 * v139) = v172;
          }
          else
          {
            v182[(v139 >> 6) + 8] |= 1 << v139;
            v147 = 8 * v139;
            *(_QWORD *)(v146[6] + v147) = v179;
            *(_QWORD *)(v146[7] + v147) = v172;
            v148 = v146[2];
            v133 = __OFADD__(v148, 1);
            v149 = v148 + 1;
            if (v133)
              goto LABEL_129;
            v146[2] = v149;
          }
          v165[1] = v146;

          swift_release();
          swift_bridgeObjectRelease();
          a5 = v163;
          v74 = v170;
          v80 = (uint64_t)v178;
          v79 = (unint64_t)v176;
        }
      }
    }
  }
  LODWORD(v171) = a9;
  v158 = &v188;
  v159 = v17 + 32;
  swift_bridgeObjectRetain();
  v20 = 0;
  v170 = MEMORY[0x24BEE4AD8] + 8;
  while (v20 < v19)
  {
    v164 = v20;
    v23 = (__int128 *)(v159 + 48 * v20);
    v24 = *v23;
    v25 = v23[1];
    *(_OWORD *)((char *)v190 + 12) = *(__int128 *)((char *)v23 + 28);
    v189 = v24;
    v190[0] = v25;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 16) = 0;
    v175 = v26;
    *(_BYTE *)(v26 + 32) = 1;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 16) = 0;
    v174 = (_QWORD *)v27;
    *(_BYTE *)(v27 + 32) = 1;
    v28 = swift_allocObject();
    v173 = v28;
    *(_QWORD *)(v28 + 16) = 0;
    v29 = (void **)(v28 + 16);
    v30 = swift_allocObject();
    v172 = v30;
    *(_QWORD *)(v30 + 16) = 0;
    v31 = (void **)(v30 + 16);
    v186 = v189;
    *(_OWORD *)v187 = v190[0];
    *(_OWORD *)&v187[12] = *(_OWORD *)((char *)v190 + 12);
    v32 = v158;
    *v158 = 0;
    v32[1] = 0;
    outlined retain of Text.Layout.Line((uint64_t)&v189);
    outlined retain of Text.Layout.Line((uint64_t)&v189);
    v162 = v29;
    swift_beginAccess();
    swift_beginAccess();
    v161 = v31;
    swift_beginAccess();
    swift_beginAccess();
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v182);
    v33 = v183;
    if (v183)
    {
      v34 = (uint64_t)v182;
      v35 = v184;
      while (1)
      {
        v179 = v34;
        v36 = one-time initialization token for _textAnimation;
        v37 = v33;
        swift_retain();
        if (v36 != -1)
          swift_once();
        v38 = v37;
        swift_retain();
        v176 = v38;
        v39 = (id)_CTLineGetRunAtIndex((const __CTLine *)v38, v35);
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v41 = (void *)MEMORY[0x23B7C5DAC](v40);
        swift_bridgeObjectRelease();
        v42 = _CTRunGetAttributeValueForKey((const __CTRun *)v39, v41);

        if (v42)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v180 = 0u;
          v181 = 0u;
        }
        v43 = v175;
        v44 = v179;
        outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v180, (uint64_t)&v182, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v44, v33);
        if (!v185)
          break;
        type metadata accessor for AnyTextEffect();
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_24;
        v45 = v44;
        v46 = (char *)v180;
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v45, v33);
        v47 = *(_QWORD *)&v46[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
        if (((v171 & 1) != 0 || v47 == Length)
          && *(_QWORD *)(v167 + 16)
          && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47), (v49 & 1) != 0)
          && *(char **)(*(_QWORD *)(v167 + 56) + 8 * v48) == v46)
        {
          v64 = (char *)*v162;
          if (!*v162 || v46 != v64)
          {
            v65 = v173;
            flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v173, v43, v177, &v189, v178);
            v64 = *(char **)(v65 + 16);
          }
          *v162 = v46;

          v66 = v179 + 1;
          v67 = __OFADD__(v179, 1);
          if ((*(_BYTE *)(v43 + 32) & 1) != 0)
          {
            if (v67)
              goto LABEL_131;
            if (v66 < v179)
              goto LABEL_135;
            *(_QWORD *)(v43 + 16) = v179;
          }
          else
          {
            if (v67)
              goto LABEL_132;
            if (v66 < *(_QWORD *)(v43 + 16))
              goto LABEL_136;
          }
          *(_QWORD *)(v43 + 24) = v66;
          *(_BYTE *)(v43 + 32) = 0;
        }
        else
        {
          flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v173, v43, v177, &v189, v178);

        }
LABEL_25:
        v50 = one-time initialization token for _textFilterAnimation;
        v51 = v176;
        swift_retain();
        if (v50 != -1)
          swift_once();
        v52 = (const __CTLine *)v51;
        swift_retain();
        v53 = (id)_CTLineGetRunAtIndex(v52, v35);
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v55 = (void *)MEMORY[0x23B7C5DAC](v54);
        swift_bridgeObjectRelease();
        v56 = _CTRunGetAttributeValueForKey((const __CTRun *)v53, v55);

        if (v56)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v180 = 0u;
          v181 = 0u;
        }
        v57 = v174;
        v58 = v179;
        outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v180, (uint64_t)&v182, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v58, v33);
        if (!v185)
        {
          outlined destroy of TypesettingConfiguration((uint64_t)&v182, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_8:
          outlined consume of (offset: Int, element: Text.Layout.Run)?(v58, v33);
          flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v172, (uint64_t)v57, v177, &v189, v178);
          outlined consume of (offset: Int, element: Text.Layout.Run)?(v58, v33);
          goto LABEL_9;
        }
        type metadata accessor for AnyTextFilterEffect();
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_8;
        v59 = v58;
        v60 = (char *)v180;
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v59, v33);
        v61 = *(_QWORD *)&v60[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
        if (((v171 & 1) != 0 || v61 == Length)
          && *(_QWORD *)(v166 + 16)
          && (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61), (v63 & 1) != 0)
          && *(char **)(*(_QWORD *)(v166 + 56) + 8 * v62) == v60)
        {
          if (!*v161 || v60 != *v161)
            flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v172, (uint64_t)v57, v177, &v189, v178);
          v68 = v179;
          outlined consume of (offset: Int, element: Text.Layout.Run)?(v179, v33);
          v69 = *v161;
          *v161 = v60;

          v70 = v68 + 1;
          v71 = __OFADD__(v68, 1);
          if ((v57[4] & 1) != 0)
          {
            if (v71)
              goto LABEL_133;
            if (v70 < v68)
              goto LABEL_137;
            v57[2] = v68;
          }
          else
          {
            if (v71)
              goto LABEL_134;
            if (v70 < v57[2])
              goto LABEL_138;
          }
          v57[3] = v70;
          *((_BYTE *)v57 + 32) = 0;
        }
        else
        {
          flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v172, (uint64_t)v57, v177, &v189, v178);
          outlined consume of (offset: Int, element: Text.Layout.Run)?(v179, v33);

        }
LABEL_9:
        specialized EnumeratedSequence.Iterator.next()((uint64_t)&v182);
        v34 = (uint64_t)v182;
        v33 = v183;
        v35 = v184;
        if (!v183)
          goto LABEL_3;
      }
      outlined destroy of TypesettingConfiguration((uint64_t)&v182, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_24:
      outlined consume of (offset: Int, element: Text.Layout.Run)?(v44, v33);
      flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v173, v43, v177, &v189, v178);
      goto LABEL_25;
    }
LABEL_3:
    v20 = v164 + 1;
    outlined consume of Text.Layout.Line.Line((void *)v186, *((uint64_t *)&v186 + 1), v187[0]);
    v21 = v177;
    v22 = v178;
    flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v173, v175, v177, &v189, v178);
    flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v172, (uint64_t)v174, v21, &v189, v22);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Text.Layout.Line((uint64_t)&v189);
    v17 = v160;
    v19 = *(_QWORD *)(v160 + 16);
    a5 = v163;
    if (v20 == v19)
    {
      swift_bridgeObjectRelease();
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_141:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.filter(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v23 = type metadata accessor for Unicode.Scalar.Properties();
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = 0;
  v22 = 0xE000000000000000;
  v17 = a1 & 0xFFFFFFFFFFFFLL;
  v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a2) & 0xF;
  else
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v8)
    return 0;
  v9 = a1;
  v10 = 0;
  v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  v15[1] = v2;
  v15[2] = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  do
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v19 = v9;
        v20 = v16;
      }
      else if ((v9 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    v12 = v11;
    Unicode.Scalar.properties.getter();
    v13 = Unicode.Scalar.Properties.isDiacritic.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
    if ((v13 & 1) != 0)
      String.UnicodeScalarView.append(_:)();
    v10 += v12;
  }
  while (v10 < v8);
  return v21;
}

uint64_t specialized Text.Effect.PartialMap.validate(id:keyframes:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t (*v56)(void);
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;

  if (!*(_QWORD *)(a3 + 16))
    return 1;
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v7 & 1) == 0)
    return 1;
  v8 = *(_QWORD **)(*(_QWORD *)(a3 + 56) + 8 * v6);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v8) + 0xA0);
  v11 = v8;
  v12 = v10();

  if (!*(_QWORD *)(a2 + 16))
  {

    swift_release();
    return 2;
  }
  swift_retain();
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v12);
  if ((v14 & 1) == 0)
  {

    v25 = 2;
    swift_release_n();
    return v25;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v13);
  swift_bridgeObjectRetain();
  swift_release_n();
  v16 = *(uint64_t (**)(void))((*v9 & *v11) + 0x98);
  v17 = v11;
  v18 = v16();

  if (!v18)
  {
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
  v19 = *(_QWORD *)(v15 + 16);
  if (v19)
  {
    v75 = v18;
    v78 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    v20 = 0;
    v21 = v78;
    v22 = v78[2];
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8 * v20 + 32) + 96) + 16);
      v24 = v78[3];
      if (v22 >= v24 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v22 + 1, 1);
      ++v20;
      v78[2] = v22 + 1;
      v78[v22++ + 4] = v23;
    }
    while (v19 != v20);
    result = swift_bridgeObjectRelease();
    v18 = v75;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v27 = v18 & 0xFFFFFFFFFFFFFF8;
  if (!(v18 >> 62))
  {
    v28 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v28)
      goto LABEL_20;
    goto LABEL_75;
  }
LABEL_74:
  swift_bridgeObjectRetain();
  v28 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_75:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
LABEL_76:
    v56 = *(uint64_t (**)(void))((*v9 & *v17) + 0xA8);
    v57 = v17;
    v58 = v56();

    if (*(_QWORD *)(a2 + 16) && (v59 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v58), (v60 & 1) != 0))
    {
      v61 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v59);
      swift_bridgeObjectRetain();
      swift_release();
      v62 = *(_QWORD *)(v61 + 16);
      if (v62)
      {
        swift_bridgeObjectRetain();
        v63 = 0;
        while (1)
        {
          v64 = swift_retain();
          v65 = Text.Effect.KeyframeLayout.Fragment.isTooComplex.getter(v64);
          swift_release();
          if (v65)
            break;
          if (v62 == ++v63)
          {

            swift_bridgeObjectRelease_n();
            return 0;
          }
        }

        swift_bridgeObjectRelease_n();
        return 7;
      }
      swift_bridgeObjectRelease();

    }
    else
    {

      swift_release();
    }
    return 0;
  }
LABEL_20:
  v29 = v18 & 0xC000000000000001;
  if ((v18 & 0xC000000000000001) != 0)
  {
LABEL_88:
    v30 = MEMORY[0x23B7C6D9C](0, v18);
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_23;
    goto LABEL_89;
  }
  if (*(_QWORD *)(v27 + 16))
  {
    v30 = *(_QWORD *)(v18 + 32);
    swift_retain();
    if (*(_QWORD *)(a2 + 16))
    {
LABEL_23:
      swift_retain_n();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v30);
      if ((v32 & 1) != 0)
      {
        v72 = v21[2];
        v66 = v18 + 32;
        v67 = v72 - 2;
        v70 = 1;
        v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v71 = v29;
        do
        {
          v34 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v31);
          swift_bridgeObjectRetain();
          swift_release_n();
          v35 = *(_QWORD *)(v34 + 16);
          v74 = v34;
          if (v35)
          {
            v68 = v28;
            v69 = v27;
            v76 = v18;
            v77 = v17;
            v73 = *(_QWORD *)(v34 + 16);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
            v36 = v72;
            v35 = v73;
            v37 = v34 + 32;
            v38 = v33[2];
            v39 = v73;
            do
            {
              v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 96) + 16);
              v41 = v33[3];
              v42 = v38 + 1;
              if (v38 >= v41 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v38 + 1, 1);
                v36 = v72;
                v35 = v73;
              }
              v33[2] = v42;
              v33[v38 + 4] = v40;
              v37 += 8;
              ++v38;
              --v39;
            }
            while (v39);
            v18 = v76;
            v17 = v77;
            v28 = v68;
            v27 = v69;
          }
          else
          {
            v42 = v33[2];
            v36 = v72;
          }
          if (v42 != v36)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();

            swift_bridgeObjectRelease();
            return 4;
          }
          if (v36)
          {
            result = (uint64_t)v21;
            v29 = v71;
            if (v33 != v21)
            {
              v43 = v21[2];
              if (!v43)
                goto LABEL_95;
              if (v33[4] != v21[4])
                goto LABEL_71;
              if (v36 != 1)
              {
                v44 = v43 >= 2;
                v45 = v43 - 2;
                if (!v44)
                  goto LABEL_96;
                if (v33[5] != v21[5])
                {
LABEL_71:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();

                  return 5;
                }
                if (v36 != 2)
                {
                  v46 = 0;
                  while (v67 != v46)
                  {
                    if (v45 == v46)
                      goto LABEL_93;
                    if (v33[v46 + 6] != v21[v46 + 6])
                      goto LABEL_71;
                    if (v67 == ++v46)
                      goto LABEL_49;
                  }
                  goto LABEL_92;
                }
              }
            }
          }
          else
          {
            v29 = v71;
          }
LABEL_49:
          v47 = v35;
          swift_bridgeObjectRelease();
          if (v47)
          {
            v48 = 0;
            while (1)
            {
              if (v48 == *(_QWORD *)(v74 + 16))
              {
                __break(1u);
                goto LABEL_88;
              }
              v49 = *(_QWORD *)(*(_QWORD *)(v74 + 32 + 8 * v48) + 96);
              v50 = *(_QWORD *)(v49 + 16);
              if (v50)
              {
                if (!*(_QWORD *)(*(_QWORD *)(v49 + 48) + 16))
                {
LABEL_70:
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  return 6;
                }
                if (v50 != 1)
                  break;
              }
LABEL_51:
              if (v47 == ++v48)
                goto LABEL_61;
            }
            v51 = v49 + 72;
            v52 = 1;
            while (1)
            {
              v53 = v52 + 1;
              if (__OFADD__(v52, 1))
                break;
              if (!*(_QWORD *)(*(_QWORD *)v51 + 16))
                goto LABEL_70;
              v51 += 24;
              ++v52;
              if (v53 == v50)
                goto LABEL_51;
            }
            __break(1u);
            goto LABEL_74;
          }
LABEL_61:
          swift_bridgeObjectRelease();
          result = swift_release();
          if (v70 == v28)
            goto LABEL_75;
          if (v29)
          {
            result = MEMORY[0x23B7C6D9C](v70, v18);
            v54 = result;
          }
          else
          {
            if (v70 >= *(_QWORD *)(v27 + 16))
              goto LABEL_97;
            v54 = *(_QWORD *)(v66 + 8 * v70);
            result = swift_retain();
          }
          if (__OFADD__(v70, 1))
            goto LABEL_94;
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_89;
          ++v70;
          swift_retain_n();
          v31 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v54);
          v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        while ((v55 & 1) != 0);
      }

      swift_bridgeObjectRelease();
      swift_release_n();
      goto LABEL_90;
    }
LABEL_89:

    swift_bridgeObjectRelease();
LABEL_90:
    swift_bridgeObjectRelease();
    swift_release();
    return 3;
  }
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.PartialKeyframeMap.subscript.getter(Swift::UInt64 a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  swift_retain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v6);
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = 0;
  }
  swift_release();
  return v8;
}

void specialized Text.Effect.PartialMap.validate(keyframes:size:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt64 v12;
  char v13;
  unint64_t v15;
  int64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;
  _QWORD *v20;
  void *v21;
  Swift::String v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(void);
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t (*v60)(void);
  _QWORD *v61;
  uint64_t v62;
  unsigned __int8 v63;
  Swift::String v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  v65 = 0;
  v66 = 0xE000000000000000;
  v67 = MEMORY[0x24BEE4B08];
  v3 = *(_QWORD *)(v1 + 8);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v63 = 0;
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return;
    }
    if (v9 >= v8)
      goto LABEL_45;
    v15 = *(_QWORD *)(v4 + 8 * v9);
    if (!v15)
      break;
LABEL_21:
    v7 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11);
    v13 = specialized Text.Effect.PartialMap.validate(id:keyframes:)(v12, a1, v3);
    if (v13)
    {
      v17 = v13;
      v48 = v1;
      specialized Set._Variant.insert(_:)((Swift::UInt64 *)&v64, v12);
      v63 |= v17 != 7;
      v64._countAndFlagsBits = 0;
      v64._object = (void *)0xE000000000000000;
      v18._countAndFlagsBits = 4023401;
      v18._object = (void *)0xE300000000000000;
      String.append(_:)(v18);
      _print_unlocked<A, B>(_:_:)();
      v19._countAndFlagsBits = 32;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v20 = specialized Dictionary.subscript.getter(v12, v3);
      if (v20)
      {
        v64._countAndFlagsBits = 0x3D74636566666520;
        v64._object = (void *)0xE800000000000000;
        v58 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v20) + 0x70);
        v56 = v20;
        v59 = v58();
        v54 = v21;

        v22._countAndFlagsBits = v59;
        v22._object = v54;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v60 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v56) + 0xA0);
        v23 = v56;
        v24 = v60();

        v55._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 96))();
        v55._object = v25;
        swift_release();
        v26 = v23;
        v27 = v60();
        v61 = v26;

        v28 = specialized Text.Effect.PartialKeyframeMap.subscript.getter(v12, v27, a1);
        swift_release();
        if (v28)
        {
          v52 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO14KeyframeLayoutV_Sis5NeverOTg503_s7d3UI4f5VAAE6g44O10PartialMapV8validate9keyframes4sizeyAE0e8h23F0V_So6CGSizeVtFSiAE0J6I16V8FragmentVXEfU_Tf1cn_nTf4x_nTm(v28);
          swift_bridgeObjectRelease();
          v64._countAndFlagsBits = 0;
          v64._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          v64._countAndFlagsBits = 2108682;
          v64._object = (void *)0xE300000000000000;
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          v29._countAndFlagsBits = 0xD000000000000010;
          v29._object = (void *)0x80000002352E6880;
          String.append(_:)(v29);
          v30._countAndFlagsBits = MEMORY[0x23B7C61E4](v52, MEMORY[0x24BEE1768]);
          String.append(_:)(v30);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v64._countAndFlagsBits = 0;
          v64._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(28);
          swift_bridgeObjectRelease();
          v64._countAndFlagsBits = 2108682;
          v64._object = (void *)0xE300000000000000;
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          v31._countAndFlagsBits = 0xD000000000000017;
          v31._object = (void *)0x80000002352E6860;
          String.append(_:)(v31);
        }
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v32 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v61) + 0x98);
        v33 = v61;
        v34 = v32();
        v47 = v33;

        if (v34)
        {
          if (v34 >> 62)
          {
            swift_bridgeObjectRetain();
            v35 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v35)
            {
LABEL_33:
              if (v35 < 1)
                goto LABEL_50;
              v49 = v34 & 0xC000000000000001;
              v50 = v35;
              v36 = 0;
              v51 = v34;
              do
              {
                v57 = v36;
                if (v49)
                {
                  v62 = MEMORY[0x23B7C6D9C](v36, v34);
                }
                else
                {
                  v62 = *(_QWORD *)(v34 + 8 * v36 + 32);
                  swift_retain();
                }
                v41 = specialized Text.Effect.PartialKeyframeMap.subscript.getter(v12, v62, a1);
                if (v41)
                {
                  v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO14KeyframeLayoutV_Sis5NeverOTg503_s7d3UI4f5VAAE6g44O10PartialMapV8validate9keyframes4sizeyAE0e8h23F0V_So6CGSizeVtFSiAE0J6I16V8FragmentVXEfU_Tf1cn_nTf4x_nTm(v41);
                  v37 = swift_bridgeObjectRelease();
                  v64._countAndFlagsBits = 2108682;
                  v64._object = (void *)0xE300000000000000;
                  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 96))(v37);
                  String.append(_:)(v38);
                  swift_bridgeObjectRelease();
                  v39._countAndFlagsBits = 32;
                  v39._object = (void *)0xE100000000000000;
                  String.append(_:)(v39);
                  v40._countAndFlagsBits = MEMORY[0x23B7C61E4](v53, MEMORY[0x24BEE1768]);
                  String.append(_:)(v40);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v64._countAndFlagsBits = 2108682;
                  v64._object = (void *)0xE300000000000000;
                  v42._countAndFlagsBits = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v62 + 96))(0);
                  String.append(_:)(v42);
                  swift_bridgeObjectRelease();
                  v43._countAndFlagsBits = 0x474E495353494D20;
                  v43._object = (void *)0xE800000000000000;
                  String.append(_:)(v43);
                }
                String.append(_:)(v64);
                ++v36;
                swift_release();
                swift_bridgeObjectRelease();
                v34 = v51;
              }
              while (v50 != v57 + 1);
            }
          }
          else
          {
            v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v35)
              goto LABEL_33;
          }
          swift_bridgeObjectRelease();
        }
        v44._countAndFlagsBits = 10;
        v44._object = (void *)0xE100000000000000;
        String.append(_:)(v44);

        v1 = v48;
      }
    }
  }
  v16 = v9 + 1;
  if (v9 + 1 >= v8)
    goto LABEL_45;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_20;
  v16 = v9 + 2;
  if (v9 + 2 >= v8)
    goto LABEL_45;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_20;
  v16 = v9 + 3;
  if (v9 + 3 >= v8)
    goto LABEL_45;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_20;
  v16 = v9 + 4;
  if (v9 + 4 >= v8)
    goto LABEL_45;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_20:
    v9 = v16;
    goto LABEL_21;
  }
  v16 = v9 + 5;
  if (v9 + 5 < v8)
  {
    v15 = *(_QWORD *)(v4 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v9 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_49;
        if (v9 >= v8)
          goto LABEL_45;
        v15 = *(_QWORD *)(v4 + 8 * v9);
        ++v16;
        if (v15)
          goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
LABEL_45:
  v45 = swift_release();
  v46 = v67;
  if (((*(_QWORD *)(v67 + 16) != 0) & v63) == 1)
  {
    MEMORY[0x24BDAC7A8](v45);
    specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, partial apply for implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:));
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v46;
  swift_bridgeObjectRelease();
}

_QWORD *specialized Text.Effect.Keyframes.Storage.init(_:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v1[5] = MEMORY[0x24BEE4B08];
  v1[6] = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  v1[2] = a1[2];
  swift_beginAccess();
  v1[3] = a1[3];
  swift_beginAccess();
  v1[4] = a1[4];
  swift_beginAccess();
  v3 = a1[5];
  swift_beginAccess();
  v1[5] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v4 = a1[6];
  swift_beginAccess();
  v1[6] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[7] = a1[7];
  return v1;
}

uint64_t partial apply for implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:)()
{
  uint64_t v0;

  return implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:)(*(uint64_t **)(v0 + 32));
}

uint64_t sub_235059530()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_235059554()
{
  return swift_deallocObject();
}

uint64_t sub_235059564()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for Text.Effect.PartialMap.ValidationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23505963C + 4 * byte_2352C0AD5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_235059670 + 4 * byte_2352C0AD0[v4]))();
}

uint64_t sub_235059670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235059678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235059680);
  return result;
}

uint64_t sub_23505968C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235059694);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_235059698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350596A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Text.Effect.PartialMap.ValidationResult()
{
  return &unk_250647188;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.VisualOrderCollection.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.VisualOrderCollection.Iterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Text.Effect.VisualOrderCollection.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.VisualOrderCollection.Iterator()
{
  return &type metadata for Text.Effect.VisualOrderCollection.Iterator;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeLayout.Flags()
{
  return &type metadata for Text.Effect.KeyframeLayout.Flags;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeLayout.Fragment()
{
  return &type metadata for Text.Effect.KeyframeLayout.Fragment;
}

uint64_t destructiveInjectEnumTag for Text.Effect.VisualOrderCollection.Run(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.VisualOrderCollection.Run()
{
  return &type metadata for Text.Effect.VisualOrderCollection.Run;
}

_QWORD *initializeBufferWithCopyOfBuffer for Text.Effect.PartialKeyframeMap(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.PartialKeyframeMap(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Text.Effect.PartialKeyframeMap(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.PartialKeyframeMap()
{
  return &type metadata for Text.Effect.PartialKeyframeMap;
}

ValueMetadata *type metadata accessor for Text.Effect.PartialMap()
{
  return &type metadata for Text.Effect.PartialMap;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.KeyframeLayout.Fragment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Fragment, &type metadata for Text.Effect.KeyframeLayout.Fragment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Fragment, &type metadata for Text.Effect.KeyframeLayout.Fragment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Fragment, &type metadata for Text.Effect.KeyframeLayout.Fragment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Fragment, &type metadata for Text.Effect.KeyframeLayout.Fragment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout.Fragment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.KeyframeLayout.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.KeyframeLayout.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout.Fragment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Flags, &type metadata for Text.Effect.KeyframeLayout.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Flags, &type metadata for Text.Effect.KeyframeLayout.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Flags, &type metadata for Text.Effect.KeyframeLayout.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.KeyframeLayout.Flags, &type metadata for Text.Effect.KeyframeLayout.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult;
  if (!lazy protocol witness table cache variable for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.PartialMap.ValidationResult, &unk_250647188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult);
  }
  return result;
}

uint64_t static DynamicView.traitKeysDependOnView.getter()
{
  return 1;
}

uint64_t static DynamicView<>.makeID()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

uint64_t static DynamicView.makeDynamicView(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t AssociatedTypeWitness;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  char v63[16];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;

  v54 = a1;
  v59 = a6;
  v83 = *MEMORY[0x24BDAC8D0];
  v55 = a5;
  v56 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v49 = (char *)&v39 - v10;
  v57 = type metadata accessor for DynamicViewContainer(0, a4, a5, v11);
  v58 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v53 = (uint64_t)&v39 - v12;
  v52 = *a2;
  v13 = *(_QWORD *)a3;
  v14 = *(_DWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_DWORD *)(a3 + 24);
  v48 = *(_DWORD *)(a3 + 28);
  v17 = *(_DWORD *)(a3 + 32);
  v47 = *(_DWORD *)(a3 + 36);
  v18 = *(_QWORD *)(a3 + 48);
  v39 = *(_QWORD *)(a3 + 40);
  v19 = *(_DWORD *)(a3 + 60);
  v46 = *(_DWORD *)(a3 + 56);
  v45 = v19;
  v20 = *(_DWORD *)(a3 + 68);
  v44 = *(_DWORD *)(a3 + 64);
  v43 = v20;
  v21 = *(_DWORD *)(a3 + 76);
  v42 = *(_DWORD *)(a3 + 72);
  v41 = v21;
  v40 = *(_DWORD *)(a3 + 80);
  v67 = v13;
  v68 = v14;
  v69 = v15;
  v70 = v16;
  v71 = v48;
  v72 = v17;
  v73 = v47;
  v74 = v39;
  v75 = v18;
  v76 = v46;
  v77 = v19;
  v78 = v44;
  v79 = v20;
  v80 = v42;
  v81 = v21;
  v82 = v40;
  _ViewInputs.makeIndirectOutputs()((uint64_t)&v60);
  v22 = v60;
  v23 = v61;
  v24 = v62;
  v25 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v54, AssociatedTypeWitness);
  v67 = v13;
  v68 = v14;
  v69 = v15;
  v70 = v16;
  v71 = v48;
  v72 = v17;
  v73 = v47;
  v74 = v39;
  v75 = v18;
  v76 = v46;
  v77 = v45;
  v78 = v44;
  v79 = v43;
  v80 = v42;
  v81 = v41;
  v82 = v40;
  v60 = v22;
  v61 = v23;
  v62 = v24;
  v26 = v53;
  v27 = (uint64_t)v25;
  v28 = v56;
  v29 = v55;
  DynamicViewContainer.init(metadata:view:inputs:outputs:)(v27, v52, &v67, &v60, v56, v55, v53);
  v31 = type metadata accessor for DynamicViewContainer.Value(0, v28, v29, v30);
  v32 = v57;
  v64 = v31;
  v65 = v57;
  v66 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewContainer<A>, v57);
  v33 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v26, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v63, v32, MEMORY[0x24BEE4078], v33, MEMORY[0x24BEE40A8], v34);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v26, v32);
  result = AGGraphSetFlags();
  v36 = *(_QWORD *)(v22 + 16);
  if (v36)
  {
    swift_bridgeObjectRetain();
    v37 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v37 += 24;
      --v36;
    }
    while (v36);
    result = swift_bridgeObjectRelease();
  }
  if (v24 != *MEMORY[0x24BE096C0])
    result = AGGraphSetIndirectDependency();
  v38 = v59;
  *v59 = v22;
  *((_DWORD *)v38 + 2) = v23;
  *((_DWORD *)v38 + 3) = v24;
  return result;
}

uint64_t type metadata accessor for DynamicViewContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicViewContainer);
}

id DynamicViewContainer.init(metadata:view:inputs:outputs:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  _QWORD *v25;
  id result;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v14 = *a3;
  v15 = *((_DWORD *)a3 + 2);
  v16 = a3[2];
  v29 = *((_DWORD *)a3 + 20);
  v30 = *a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = a4[1];
  v19 = a3[3];
  v20 = a3[4];
  v27 = *(_OWORD *)(a3 + 7);
  v28 = *(_OWORD *)(a3 + 5);
  v21 = a3[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a7, a1, AssociatedTypeWitness);
  v23 = (int *)type metadata accessor for DynamicViewContainer(0, a5, a6, v22);
  *(_DWORD *)(a7 + v23[9]) = a2;
  v24 = a7 + v23[10];
  *(_QWORD *)v24 = v14;
  *(_DWORD *)(v24 + 8) = v15;
  *(_QWORD *)(v24 + 16) = v16;
  *(_QWORD *)(v24 + 24) = v19;
  *(_QWORD *)(v24 + 32) = v20;
  *(_OWORD *)(v24 + 40) = v28;
  *(_OWORD *)(v24 + 56) = v27;
  *(_QWORD *)(v24 + 72) = v21;
  *(_DWORD *)(v24 + 80) = v29;
  v25 = (_QWORD *)(a7 + v23[11]);
  *v25 = v30;
  v25[1] = v18;
  result = (id)AGSubgraphGetCurrent();
  if (result)
    *(_QWORD *)(a7 + v23[12]) = result;
  else
    __break(1u);
  return result;
}

uint64_t static DynamicView.makeDynamicViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _DWORD *v28;
  __int128 v29;
  int v30;
  int v31;
  char *v32;
  uint64_t AssociatedTypeWitness;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v36 = a1;
  v40 = a6;
  v54 = *MEMORY[0x24BDAC8D0];
  v37 = a5;
  v38 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v32 = (char *)&v29 - v11;
  v13 = type metadata accessor for DynamicViewList(0, a4, a5, v12);
  v39 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v35 = (uint64_t)&v29 - v14;
  v34 = *a2;
  v15 = *(_QWORD *)a3;
  v16 = *(_DWORD *)(a3 + 8);
  v17 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(a3 + 40);
  v18 = *(_QWORD *)(a3 + 48);
  v20 = *(_QWORD *)(a3 + 56);
  v31 = *(_DWORD *)(a3 + 64);
  v21 = *(_QWORD *)(a3 + 72);
  v30 = *(unsigned __int8 *)(a3 + 80);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v29 = *(_OWORD *)(a3 + 24);
  v23 = (uint64_t)v32;
  v22(v32, v36, AssociatedTypeWitness);
  v44 = v15;
  v45 = v16;
  v46 = v17;
  v47 = v29;
  v48 = v19;
  v49 = v18;
  v50 = v20;
  v51 = v31;
  v52 = v21;
  v53 = v30;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = v35;
  DynamicViewList.init(metadata:view:inputs:lastItem:)(v23, v34, &v44, 0, v38, v37, v35);
  v42 = v13;
  v43 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>, v13);
  type metadata accessor for Attribute<ViewList>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v24, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v41, v13, MEMORY[0x24BEE4078], v25, MEMORY[0x24BEE40A8], v26);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v24, v13);
  v28 = v40;
  *v40 = v44;
  *((_QWORD *)v28 + 1) = 0;
  *((_BYTE *)v28 + 40) = 1;
  *((_QWORD *)v28 + 6) = v18;
  *((_QWORD *)v28 + 7) = 0;
  *((_BYTE *)v28 + 64) = 1;
  return result;
}

uint64_t DynamicViewList.init(metadata:view:inputs:lastItem:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v35;

  v13 = *a3;
  v14 = *((_DWORD *)a3 + 2);
  v15 = a3[2];
  v33 = *(_OWORD *)(a3 + 5);
  v16 = a3[7];
  v32 = *((_DWORD *)a3 + 16);
  v31 = a3[9];
  v30 = *((_BYTE *)a3 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = a3[3];
  v19 = a3[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a7, a1, AssociatedTypeWitness);
  v21 = (int *)type metadata accessor for DynamicViewList(0, a5, a6, v20);
  *(_DWORD *)(a7 + v21[9]) = a2;
  v22 = a7 + v21[10];
  *(_QWORD *)v22 = v13;
  *(_DWORD *)(v22 + 8) = v14;
  *(_QWORD *)(v22 + 16) = v15;
  *(_QWORD *)(v22 + 24) = v18;
  *(_QWORD *)(v22 + 32) = v19;
  *(_OWORD *)(v22 + 40) = v33;
  *(_QWORD *)(v22 + 56) = v16;
  *(_DWORD *)(v22 + 64) = v32;
  *(_QWORD *)(v22 + 72) = v31;
  *(_BYTE *)(v22 + 80) = v30;
  v23 = (id)AGSubgraphGetCurrent();
  if (v23)
  {
    *(_QWORD *)(a7 + v21[11]) = v23;
    v25 = v21[12];
    type metadata accessor for DynamicViewList.Item(255, a5, a6, v24);
    type metadata accessor for Unmanaged();
    v26 = type metadata accessor for Array();
    type metadata accessor for MutableBox(0, v26, v27, v28);
    v35 = Array.init()();
    result = MutableBox.__allocating_init(_:)(&v35);
    *(_QWORD *)(a7 + v25) = result;
    *(_QWORD *)(a7 + v21[13]) = a4;
  }
  else
  {
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t DynamicViewContainer.Value.matches(type:id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = v3;
  v22 = a2;
  v23 = a1;
  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v22 - v15;
  v17 = *v4;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v22 - v15, v22, v12, v14);
  v18 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v6 + 16))(v8, v4, a3);
  if (v17 == v23)
  {
    MEMORY[0x24BDAC7A8](v18);
    *(&v22 - 4) = v11;
    *(&v22 - 3) = v10;
    *(&v22 - 2) = (uint64_t)v8;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:), (uint64_t)(&v22 - 6), MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v20, (uint64_t)&v24);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v19 = (v24 == 2) | v24;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v19 = 0;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a3);
  return v19 & 1;
}

uint64_t closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t result;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  uint64_t v42;

  v40 = a5;
  v42 = a4;
  v38 = a1;
  v39 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v36[0] = (char *)v36 - v8;
  v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v37 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)v36 - v11;
  v13 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v41 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v36 - v17;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v36 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)v36 - v21, v38, AssociatedTypeWitness, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, AssociatedTypeWitness);
  v36[1] = a3;
  v24 = type metadata accessor for DynamicViewContainer.Value(0, a3, v42, v23);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v25(v18, v39 + *(int *)(v24 + 36), v9);
  v39 = TupleTypeMetadata2;
  v26 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v25(v12, (uint64_t)v22, v9);
  v25(v26, (uint64_t)v18, v9);
  v38 = v7;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v27(v12, 1, AssociatedTypeWitness) != 1)
  {
    v25(v41, (uint64_t)v12, v9);
    if (v27(v26, 1, AssociatedTypeWitness) != 1)
    {
      v32 = v38;
      v33 = v36[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v38 + 32))(v36[0], v26, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v34 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v34(v33, AssociatedTypeWitness);
      v35 = *(void (**)(char *, uint64_t))(v13 + 8);
      v35(v18, v9);
      v35(v22, v9);
      v34((uint64_t)v41, AssociatedTypeWitness);
      result = ((uint64_t (*)(char *, uint64_t))v35)(v12, v9);
      goto LABEL_8;
    }
    v31 = *(void (**)(char *, uint64_t))(v13 + 8);
    v31(v18, v9);
    v31(v22, v9);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v41, AssociatedTypeWitness);
    goto LABEL_6;
  }
  v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v18, v9);
  v28(v22, v9);
  if (v27(v26, 1, AssociatedTypeWitness) != 1)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v12, v39);
    v30 = 0;
    goto LABEL_8;
  }
  result = ((uint64_t (*)(char *, uint64_t))v28)(v12, v9);
  v30 = 1;
LABEL_8:
  *v40 = v30 & 1;
  return result;
}

uint64_t DynamicViewContainer.Value.init(type:id:subgraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  *a6 = a1;
  v9 = type metadata accessor for DynamicViewContainer.Value(0, a4, a5, a4);
  v10 = (char *)a6 + *(int *)(v9 + 36);
  swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_QWORD *)((char *)a6 + *(int *)(v9 + 40)) = a3;
  return result;
}

uint64_t DynamicViewContainer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t Value;
  uint64_t (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OutputValue;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;

  v5 = v4;
  v76 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for DynamicViewContainer.Value(0, v8, v7, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v67 = (uint64_t *)((char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v62 = (char *)&v60 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v70 = v14;
  v71 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v63 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v60 - v18;
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v24 = type metadata accessor for Optional();
  v68 = *(_QWORD *)(v24 - 8);
  v69 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v60 - v25;
  v66 = a1;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, Value, v8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v72 = v26;
  v29 = v26;
  v30 = v7;
  v31 = v9;
  v65 = v5;
  v32 = v28(v29, v5, v8, v30);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v8);
  OutputValue = AGGraphGetOutputValue();
  if (OutputValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v19, OutputValue, v9);
    v34 = 0;
  }
  else
  {
    v34 = 1;
  }
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v19, v34, 1, v9);
  v36 = v10;
  MEMORY[0x24BDAC7A8](v35);
  *(&v60 - 4) = v8;
  *(&v60 - 3) = v30;
  v64 = v32;
  *(&v60 - 2) = v32;
  v37 = (uint64_t)v72;
  *(&v60 - 1) = (uint64_t)v72;
  v38 = v70;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in DynamicViewContainer.updateValue(), (uint64_t)(&v60 - 6), MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v39, (uint64_t)&v75);
  if ((v75 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v38);
  }
  else
  {
    v60 = 0;
    v40 = v71;
    v41 = v63;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v63, v19, v38);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v41, 1, v9);
    v61 = v36;
    if (v42 == 1)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v38);
      v43 = v65;
      v44 = v66;
    }
    else
    {
      v45 = v62;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v62, v41, v31);
      v44 = v66;
      v46 = *(int *)(v66 + 44);
      v63 = v19;
      v47 = v65;
      v48 = (uint64_t *)(v65 + v46);
      v73 = *v48;
      v74 = v48[1];
      _ViewOutputs.detachIndirectOutputs()();
      MEMORY[0x24BDAC7A8](v49);
      *((_BYTE *)&v60 - 16) = 1;
      v51 = v50;
      AGSubgraphApply();

      v43 = v47;
      v19 = v63;
      AGSubgraphInvalidate();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v31);
    }
    v52 = (id)AGSubgraphGetGraph();
    v53 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v54 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v55 = v67;
    closure #2 in DynamicViewContainer.updateValue()(v43, v64, (uint64_t)v72, v53, v8, v30, v67);
    AGSubgraphSetCurrent();

    v56 = AGGraphSetUpdate();
    v57 = MEMORY[0x24BDAC7A8](v56);
    *(&v60 - 2) = v44;
    *(&v60 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewContainer<A>, v44, v57);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v55, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v60 - 4), v31, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v58);

    (*(void (**)(_QWORD *, uint64_t))(v61 + 8))(v55, v31);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v70);
    v37 = (uint64_t)v72;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v37, v69);
}

id closure #2 in DynamicViewContainer.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Value;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t AssociatedTypeWitness;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;

  v77 = a4;
  v73 = a3;
  v75 = a2;
  v8 = a1;
  v59 = a1;
  v74 = a7;
  swift_getAssociatedTypeWitness();
  v72 = type metadata accessor for Optional();
  v70 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v71 = (char *)&v56 - v10;
  v58 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v67 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v66 = (char *)&v56 - v11;
  v12 = *(_QWORD *)(a5 - 8);
  v60 = a5;
  v69 = v12;
  MEMORY[0x24BDAC7A8](v13);
  v64 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DynamicViewContainer(0, v15, a6, v16);
  v61 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v56 - v18;
  v21 = (uint64_t *)(v8 + *(int *)(v20 + 40));
  v76 = *v21;
  v63 = *((_DWORD *)v21 + 2);
  v22 = v21[2];
  v79 = v21[5];
  v78 = v21[6];
  v65 = *((_DWORD *)v21 + 20);
  v23 = v21[3];
  v24 = v21[4];
  v62 = *(_OWORD *)(v21 + 7);
  v25 = v21[9];
  swift_beginAccess();
  v26 = *(_DWORD *)(v22 + 16);
  v27 = *(_QWORD *)(v22 + 24);
  v57 = *(_OWORD *)(v22 + 32);
  v56 = *(_OWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v22 + 64);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_BYTE *)(v22 + 80);
  LOBYTE(v8) = *(_BYTE *)(v22 + 81);
  v31 = *(_QWORD *)(v22 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v32, v33, v34);
  v35 = swift_allocObject();
  *(_DWORD *)(v35 + 16) = v26;
  v36 = v76;
  *(_QWORD *)(v35 + 24) = v27;
  v37 = v56;
  *(_OWORD *)(v35 + 32) = v57;
  *(_OWORD *)(v35 + 48) = v37;
  *(_QWORD *)(v35 + 64) = v28;
  *(_QWORD *)(v35 + 72) = v29;
  *(_BYTE *)(v35 + 80) = v30;
  *(_BYTE *)(v35 + 81) = v8;
  v38 = v58;
  *(_QWORD *)(v35 + 88) = v31;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = v61;
  v40 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v19, v59, v17);
  v41 = *(_QWORD *)(v17 + 16);
  Value = AGGraphGetValue();
  v43 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v64, Value, v41);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v17);
  v44 = v67;
  v45 = v66;
  v46 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v40, AssociatedTypeWitness);
  v47 = *(unsigned int *)(v40 + *(int *)(v17 + 36));
  v48 = v40;
  v80 = v36;
  v81 = v63;
  v82 = v35;
  v83 = v23;
  v84 = v24;
  v85 = v79;
  v86 = v78;
  v87 = v62;
  v88 = v25;
  v89 = v65;
  v49 = v43;
  v50 = v60;
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t *, uint64_t, uint64_t))(v38 + 64))(&v90, v45, v47, &v80, v60, v38);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v49, v50);
  v51 = v91;
  v52 = (uint64_t *)(v48 + *(int *)(v17 + 44));
  v53 = *((_DWORD *)v52 + 2);
  LODWORD(v17) = *((_DWORD *)v52 + 3);
  v80 = *v52;
  v81 = v53;
  swift_bridgeObjectRetain();
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v90);
  if ((_DWORD)v17 != *MEMORY[0x24BE096C0] && v51 != *MEMORY[0x24BE096C0])
    AGGraphSetIndirectAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v54 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v71, v73, v72);
  DynamicViewContainer.Value.init(type:id:subgraph:)(v75, v54, (uint64_t)v77, v50, v38, v74);
  return v77;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance DynamicViewContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for DynamicViewContainer.Value(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicViewContainer<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewContainer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t DynamicViewList.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t Value;
  uint64_t (*v23)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  void *v36;
  int IsValid;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Bool IsNativeType;
  BOOL v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  int v56;
  char v57;
  int CurrentAttribute;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_BYTE *, uint64_t);
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v80[12];
  int v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98[2];
  uint64_t v99[3];
  ValueMetadata *v100;
  _UNKNOWN **v101;
  uint64_t v102;

  v2 = v1;
  v102 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v94 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v88 = &v80[-v7];
  v8 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v80[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v96 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v89 = &v80[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v86 = &v80[-v15];
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v80[-v17];
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v80[-v20];
  Value = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, Value, v5);
  v23 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v95 = v4;
  v24 = v23(v21, v2, v5, v4);
  v25 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v26 = v5;
  v25(v11, v5);
  v90 = a1;
  v27 = *(int *)(a1 + 52);
  v28 = v96;
  v29 = v2;
  v92 = v27;
  v30 = *(uint64_t **)(v2 + v27);
  v93 = v12;
  v91 = v18;
  v87 = AssociatedTypeWitness;
  if (v30)
  {
    v31 = v94;
    (*(void (**)(_BYTE *, char *, uint64_t))(v94 + 16))(v18, (char *)v30 + *(_QWORD *)(*v30 + 136), AssociatedTypeWitness);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, AssociatedTypeWitness);
    swift_retain();
    v32 = v26;
    v33 = v24;
    if ((DynamicViewList.Item.matches(type:id:)(v24, (uint64_t)v21) & 1) != 0)
    {
      swift_beginAccess();
      if (*((_DWORD *)v30 + 6))
      {
        if ((AGSubgraphIsValid() & 1) != 0)
        {
          swift_release();
LABEL_31:
          v72 = v93;
          goto LABEL_34;
        }
      }
    }
    v34 = v30 + 3;
    swift_beginAccess();
    v35 = *((_DWORD *)v30 + 6);
    if (v35)
    {
      v36 = (void *)v30[2];
      IsValid = AGSubgraphIsValid();
      v38 = v29;
      v39 = v90;
      if (IsValid)
      {
        v40 = v36;
        AGSubgraphApply();

        AGSubgraphRemoveChild();
        v35 = *((_DWORD *)v30 + 6);
      }
      *v34 = v35 - 1;
      if (v35 == 1)
      {
        DynamicViewList.Item.invalidate()();
        v41 = AGSubgraphIsValid();
        if ((_DWORD)v41)
        {
          MEMORY[0x24BDAC7A8](v41);
          v80[-16] = 0;
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
      }
    }
    else
    {
      *v34 = -1;
      v38 = v29;
      v39 = v90;
    }
    swift_release();
    v42 = v92;
    swift_release();
    *(_QWORD *)(v38 + v42) = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v18, 1, 1, AssociatedTypeWitness);
    v38 = v2;
    v32 = v26;
    v33 = v24;
    v39 = v90;
  }
  v90 = *(int *)(v39 + 48);
  v43 = *(_QWORD *)(v38 + v90);
  swift_beginAccess();
  v44 = *(_QWORD *)(v43 + 16);
  v85 = type metadata accessor for DynamicViewList.Item(255, v32, v95, v45);
  v46 = type metadata accessor for Unmanaged();
  v47 = swift_bridgeObjectRetain();
  if (!MEMORY[0x23B7C6298](v47, v46))
    goto LABEL_25;
  v48 = 4;
  while (1)
  {
    v49 = v48 - 4;
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType)
      break;
    v30 = *(uint64_t **)(v44 + 8 * v48);
    v51 = __OFADD__(v49, 1);
    v52 = v48 - 3;
    if (v51)
      goto LABEL_24;
LABEL_19:
    swift_retain();
    if ((DynamicViewList.Item.matches(type:id:)(v33, (uint64_t)v21) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_beginAccess();
      ++*((_DWORD *)v30 + 6);
      v70 = (void *)v30[2];
      AGSubgraphAddChild();
      v71 = v70;
      AGSubgraphApply();

      *(_QWORD *)(v38 + v92) = v30;
      v28 = v96;
      goto LABEL_31;
    }
    swift_release();
    ++v48;
    if (v52 == MEMORY[0x23B7C6298](v44, v46))
      goto LABEL_25;
  }
  v30 = (uint64_t *)_ArrayBuffer._getElementSlowPath(_:)();
  swift_unknownObjectRelease();
  v51 = __OFADD__(v49, 1);
  v52 = v48 - 3;
  if (!v51)
    goto LABEL_19;
LABEL_24:
  __break(1u);
LABEL_25:
  swift_bridgeObjectRelease();
  if (AGSubgraphIsValid())
  {
    v53 = (id)AGSubgraphGetGraph();
    v54 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v55 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in DynamicViewList.updateValue()(v38, v32, v95, v99);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    v56 = v99[0];
    v57 = BYTE4(v99[0]);
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v59 = v96;
    v60 = v93;
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v81 = CurrentAttribute;
      v82 = v33;
      v84 = v32;
      v61 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 16);
      v62 = v86;
      v83 = v21;
      v61(v86, v21, v96);
      v63 = v94;
      v64 = v87;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v94 + 48))(v62, 1, v87) == 1)
      {
        v65 = (uint64_t)v88;
        (*(void (**)(void))(v95 + 48))();
        v63 = v94;
        (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v62, v59);
      }
      else
      {
        v65 = (uint64_t)v88;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v63 + 32))(v88, v62, v64);
      }
      v73 = *(_QWORD *)(v38 + v90);
      swift_allocObject();
      swift_retain();
      v30 = specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(v82, v81, v56, v65, v57, v54, v73);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
      v74 = v92;
      swift_release();
      *(_QWORD *)(v38 + v74) = v30;
      v28 = v96;
      v72 = v93;
      v21 = v83;
      v32 = v84;
LABEL_34:
      DynamicViewList.Item.list.getter((uint64_t)v98);
      v75 = (uint64_t)v89;
      v76 = v91;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v72 + 16))(v89, v91, v28);
      if (AGGraphGetCurrentAttribute() != *MEMORY[0x24BE096C0])
      {
        type metadata accessor for ViewList();
        swift_retain_n();
        TransactionID.init<A>(context:)(&v97);
        v100 = (ValueMetadata *)type metadata accessor for DynamicViewList.WrappedList(0, v32, v95, v77);
        v101 = &protocol witness table for DynamicViewList<A>.WrappedList;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v99);
        DynamicViewList.WrappedList.init(base:item:lastID:lastTransaction:)(v98, v30, v75, &v97, (uint64_t)boxed_opaque_existential_1);
        AGGraphSetOutputValue();
        swift_release();
        v66 = *(void (**)(_BYTE *, uint64_t))(v72 + 8);
        v66(v76, v28);
        v68 = v21;
        v69 = v28;
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
  }
  v100 = &type metadata for EmptyViewList;
  v101 = &protocol witness table for EmptyViewList;
  type metadata accessor for ViewList();
  AGGraphSetOutputValue();
  v66 = *(void (**)(_BYTE *, uint64_t))(v93 + 8);
  v67 = v96;
  v66(v91, v96);
  v68 = v21;
  v69 = v67;
LABEL_36:
  v66(v68, v69);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
}

uint64_t DynamicViewList.Item.matches(type:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v14[15];
  char v15;

  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = &v14[-v8];
  v10 = *(_QWORD *)(v2 + 32);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v6 + 16))(&v14[-v8], a2, v5, v7);
  if (v10 == a1)
  {
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:), v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v11, (uint64_t)&v15);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v12 = (v15 == 2) | v15;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t closure #1 in DynamicViewList.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unsigned int (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Value;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t result;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  int v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  _QWORD v81[8];
  char v82;

  v4 = a3;
  v6 = a1;
  v48 = a1;
  v58 = a4;
  v59 = a3;
  v60 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v54 = (char *)&v44 - v7;
  v57 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DynamicViewList(0, a2, v4, v10);
  v50 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v49 = (char *)&v44 - v12;
  v14 = v6 + *(int *)(v13 + 40);
  v46 = *(_QWORD *)v14;
  v62 = *(_DWORD *)(v14 + 8);
  v15 = *(_QWORD *)(v14 + 16);
  v66 = *(_DWORD *)(v14 + 24);
  v65 = *(_DWORD *)(v14 + 28);
  v64 = *(_DWORD *)(v14 + 32);
  v63 = *(_DWORD *)(v14 + 36);
  v61 = *(_QWORD *)(v14 + 40);
  v47 = *(_QWORD *)(v14 + 56);
  v52 = *(_DWORD *)(v14 + 64);
  v67 = *(_QWORD *)(v14 + 72);
  v51 = *(unsigned __int8 *)(v14 + 80);
  swift_beginAccess();
  LODWORD(v6) = *(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)(v15 + 24);
  v45 = *(_OWORD *)(v15 + 32);
  v44 = *(_OWORD *)(v15 + 48);
  v17 = *(_QWORD *)(v15 + 64);
  v18 = *(_QWORD *)(v15 + 72);
  v19 = *(_BYTE *)(v15 + 80);
  LOBYTE(v4) = *(_BYTE *)(v15 + 81);
  v20 = *(_QWORD *)(v15 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v21, v22, v23);
  v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = v6;
  *(_QWORD *)(v24 + 24) = v16;
  v25 = v44;
  *(_OWORD *)(v24 + 32) = v45;
  *(_OWORD *)(v24 + 48) = v25;
  *(_QWORD *)(v24 + 64) = v17;
  *(_QWORD *)(v24 + 72) = v18;
  *(_BYTE *)(v24 + 80) = v19;
  *(_BYTE *)(v24 + 81) = v4;
  *(_QWORD *)(v24 + 88) = v20;
  v26 = *(unsigned int (**)(void))(v59 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = v46;
  swift_retain();
  v28 = v47 | v26() & ((v47 & 1) == 0);
  v47 = v28;
  v29 = v50;
  v30 = v49;
  v31 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v48, v11);
  v32 = *(_QWORD *)(v11 + 16);
  Value = AGGraphGetValue();
  v34 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v53, Value, v32);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v11);
  v35 = v55;
  v36 = v54;
  v37 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v31, AssociatedTypeWitness);
  v38 = *(unsigned int *)(v31 + *(int *)(v11 + 36));
  v39 = v27;
  v68 = v27;
  v69 = v62;
  v70 = v24;
  v71 = v66;
  v72 = v65;
  v73 = v64;
  v74 = v63;
  v75 = v61;
  v76 = 0;
  v77 = v28;
  LODWORD(v17) = v52;
  v78 = v52;
  v79 = v67;
  LOBYTE(v28) = v51;
  v80 = v51;
  v40 = v60;
  (*(void (**)(_QWORD *__return_ptr, char *, uint64_t, uint64_t *, uint64_t))(v59 + 72))(v81, v36, v38, &v68, v60);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v40);
  v68 = v39;
  v69 = v62;
  v70 = v24;
  v71 = v66;
  v72 = v65;
  v73 = v64;
  v74 = v63;
  v75 = v61;
  v76 = 0;
  v77 = v47;
  v78 = v17;
  v79 = v67;
  v80 = v28;
  LODWORD(v36) = _ViewListOutputs.makeAttribute(inputs:)(&v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v41 = v58;
  *v58 = (_DWORD)v36;
  v42 = v81[7];
  LOBYTE(v36) = v82;
  result = outlined destroy of _ViewListOutputs((uint64_t)v81);
  *((_BYTE *)v41 + 4) = (v42 == 1) & ~(_BYTE)v36;
  return result;
}

uint64_t DynamicViewList.Item.list.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  return outlined init with copy of AnyTrackedValue(Value, a1);
}

uint64_t DynamicViewList.WrappedList.init(base:item:lastID:lastTransaction:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = *a2;
  v9 = *a4;
  outlined init with take of ScrollStateRequest(a1, a5);
  *(_QWORD *)(a5 + 40) = a2;
  v11 = type metadata accessor for DynamicViewList.WrappedList(0, *(_QWORD *)(v8 + 112), *(_QWORD *)(v8 + 120), v10);
  v12 = a5 + *(int *)(v11 + 40);
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a3, v13);
  *(_QWORD *)(a5 + *(int *)(v11 + 44)) = v9;
  return result;
}

uint64_t DynamicViewList.Item.invalidate()()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  swift_beginAccess();
  type metadata accessor for Unmanaged();
  v0 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v0);
  Collection.firstIndex(where:)();
  result = swift_bridgeObjectRelease();
  if (v2 != 1)
  {
    swift_beginAccess();
    Array.remove(at:)();
    return swift_endAccess();
  }
  return result;
}

uint64_t closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t DynamicViewList.Item.bindID(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v1 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v2 = *(_DWORD *)((char *)v0 + *(_QWORD *)(*v0 + 144));
  v3 = *((_BYTE *)v0 + *(_QWORD *)(*v0 + 160));
  v4 = v0[4];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(v1, v2, v3, v4, AssociatedTypeWitness, AssociatedConformanceWitness);
}

void DynamicViewList.Item.__allocating_init(subgraph:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DynamicViewList.Item.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_release();
}

id *DynamicViewList.Item.deinit()
{
  id *v0;
  char *v1;
  uint64_t AssociatedTypeWitness;

  v1 = (char *)v0 + *((_QWORD *)*v0 + 17);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_release();
  return v0;
}

uint64_t DynamicViewList.Item.__deallocating_deinit()
{
  DynamicViewList.Item.deinit();
  return swift_deallocClassInstance();
}

uint64_t DynamicViewList.WrappedList.traitKeys.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  char v9;
  uint64_t v10;
  char v11;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 24))(&v10, v5, v6);
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 40))();
  v8 = v11;
  if (v10)
    v9 = 1;
  else
    v9 = v11;
  if ((result & 1) != 0)
    v8 = v9;
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

uint64_t DynamicViewList.WrappedList.viewIDs.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  if (result)
  {
    v7 = result;
    closure #1 in DynamicViewList.WrappedList.viewIDs.getter(&v7, (uint64_t)v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v6);
    swift_release();
    return v6;
  }
  return result;
}

_BYTE *closure #1 in DynamicViewList.WrappedList.viewIDs.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *result;
  _QWORD v13[2];

  v7 = *a1;
  v8 = type metadata accessor for DynamicViewList.WrappedIDs(255, a3, a4, a4);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, v8);
  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, v8);
  type metadata accessor for _ViewList_ID._Views(0, v8, v9, v10);
  v11 = *(_QWORD *)(a2 + 40);
  v13[0] = v7;
  v13[1] = v11;
  result = specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)((uint64_t)v13, 1);
  *a5 = result;
  return result;
}

uint64_t DynamicViewList.WrappedList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v8 = v7;
  v14 = *a2;
  v19 = v7[5];
  v15 = type metadata accessor for DynamicViewList.Transform(0, *(_QWORD *)(a7 + 16), *(_QWORD *)(a7 + 24), (uint64_t)a4);
  swift_retain();
  _ViewList_SublistTransform.push<A>(_:)((uint64_t)&v19, v15, (uint64_t)&protocol witness table for DynamicViewList<A>.Transform);
  swift_release();
  v16 = v8[3];
  v17 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v16);
  v19 = v14;
  LOBYTE(v15) = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 48))(a1, &v19, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v16, v17);
  $defer #1 () in SubgraphList.applyNodes(from:style:list:transform:to:)(a4);
  return v15 & 1;
}

uint64_t DynamicViewList.WrappedList.edit(forID:since:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  char *v41;
  char *v42;
  char v43;
  _BYTE *v44;
  void (*v45)(uint64_t, uint64_t);
  char v46;
  void (*v47)(uint64_t, uint64_t);
  _BYTE *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _BYTE *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v5 = v4;
  v10 = *(_QWORD *)(a3 + 24);
  v59 = *(_QWORD *)(a3 + 16);
  v60 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8]((char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (char *)&v49 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v17);
  v24 = MEMORY[0x24BDAC7A8](v18);
  v26 = *a1;
  v25 = a1[1];
  v27 = *((_QWORD *)a1 + 1);
  v28 = *a2;
  if (v28 < *(_QWORD *)&v5[*(int *)(a3 + 44)])
    goto LABEL_9;
  v54 = v19;
  v55 = (char *)&v49 - v20;
  v52 = v22;
  v57 = v25;
  v58 = v26;
  v56 = a4;
  v29 = v21;
  v30 = v23;
  (*(void (**)(char *, char *, uint64_t, double))(v23 + 16))(v15, &v5[*(int *)(a3 + 40)], v21, v24);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v31(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v29);
    v25 = v57;
    v26 = v58;
    goto LABEL_9;
  }
  v50 = v30;
  v51 = v29;
  v53 = v27;
  v32 = v16;
  v33 = v55;
  v49 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v49(v55, v15, AssociatedTypeWitness);
  v34 = *((_QWORD *)v5 + 5);
  v35 = v34 + *(_QWORD *)(*(_QWORD *)v34 + 136);
  swift_getAssociatedConformanceWitness();
  v60 = v35;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, AssociatedTypeWitness);
    v25 = v57;
    v26 = v58;
LABEL_8:
    v27 = v53;
    goto LABEL_9;
  }
  v59 = v32;
  v25 = v57;
  v62 = v58;
  v63 = v57;
  v64 = v53;
  v36 = *(_DWORD *)(v34 + *(_QWORD *)(*(_QWORD *)v34 + 144));
  v37 = v54;
  _ViewList_ID.explicitID<A>(owner:)(v36, AssociatedTypeWitness, v54);
  if (v31((char *)v37, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v55, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v37, v51);
    v26 = v58;
    goto LABEL_8;
  }
  v41 = v52;
  v49(v52, (char *)v37, AssociatedTypeWitness);
  v42 = v55;
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v44 = v56;
  if ((v43 & 1) != 0)
  {
    v45 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v45((uint64_t)v41, AssociatedTypeWitness);
    result = ((uint64_t (*)(char *, uint64_t))v45)(v42, AssociatedTypeWitness);
    *v44 = 1;
    return result;
  }
  v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  v47 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v47((uint64_t)v41, AssociatedTypeWitness);
  result = ((uint64_t (*)(char *, uint64_t))v47)(v42, AssociatedTypeWitness);
  v48 = v44;
  v26 = v58;
  v27 = v53;
  if ((v46 & 1) != 0)
  {
    *v48 = 0;
    return result;
  }
LABEL_9:
  v38 = *((_QWORD *)v5 + 3);
  v39 = *((_QWORD *)v5 + 4);
  __swift_project_boxed_opaque_existential_1(v5, v38);
  v62 = v26;
  v63 = v25;
  v64 = v27;
  v61 = v28;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(v39 + 56))(&v62, &v61, v38, v39);
}

uint64_t DynamicViewList.WrappedList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  char v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  char v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v36 = a5;
  v8 = *(_QWORD *)(a3 + 24);
  v34[0] = *(_QWORD *)(a3 + 16);
  v34[1] = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v34 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v34 - v20;
  v22 = *a2;
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16);
  v35 = a1;
  v24(v16, a1, a4, v19);
  v25 = swift_dynamicCast();
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v27 = v22;
  if ((v25 & 1) != 0)
  {
    v26(v13, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v13, AssociatedTypeWitness);
    v28 = v37;
    swift_getAssociatedConformanceWitness();
    v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
    v30 = v28;
    if ((v29 & 1) != 0)
      return 0;
  }
  else
  {
    v26(v13, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v30 = v37;
  }
  v32 = v30[3];
  v33 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v32);
  v38 = v27;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 64))(v35, &v38, a4, v36, v32, v33);
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance DynamicViewList<A>.WrappedList(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return DynamicViewList.WrappedList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, a7);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance DynamicViewList<A>.WrappedList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DynamicViewList.WrappedList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

uint64_t DynamicViewList.WrappedIDs.endIndex.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 88))();
}

uint64_t static DynamicViewList.WrappedIDs.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a3) & 1;
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t *a1, uint64_t *a2)
{
  return static DynamicViewList.WrappedIDs.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance DynamicViewList<A>.WrappedIDs()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance DynamicViewList<A>.WrappedIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = DynamicViewList.WrappedIDs.endIndex.getter(*v1);
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance DynamicViewList<A>.WrappedIDs(_QWORD *a1, uint64_t *a2))(_QWORD *a1)
{
  uint64_t *v2;
  _QWORD *v5;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = DynamicViewList.WrappedIDs.subscript.read((uint64_t)v5, *a2, *v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*DynamicViewList.WrappedIDs.subscript.read(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 96))(a2);
  DynamicViewList.Item.bindID(_:)();
  return destroy for HostPreferencesCombiner;
}

uint64_t protocol witness for Collection.indices.getter in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance DynamicViewList<A>.WrappedIDs()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance DynamicViewList<A>.WrappedIDs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance DynamicViewList<A>.WrappedIDs@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t DynamicViewList.Transform.apply(sublist:)(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;

  DynamicViewList.Item.bindID(_:)();
  a1 += 32;
  v6 = &type metadata for SubgraphElements;
  v7 = &protocol witness table for SubgraphElements;
  *(_QWORD *)&v5 = swift_allocObject();
  outlined init with copy of AnyTrackedValue(a1, v5 + 16);
  *(_QWORD *)(v5 + 56) = a2;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return outlined init with take of ScrollStateRequest(&v5, a1);
}

uint64_t DynamicViewList.Transform.bindID(_:)()
{
  return DynamicViewList.Item.bindID(_:)();
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.apply(sublist:) in conformance DynamicViewList<A>.Transform(uint64_t a1)
{
  uint64_t *v1;

  return DynamicViewList.Transform.apply(sublist:)(a1, *v1);
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.bindID(_:) in conformance DynamicViewList<A>.Transform()
{
  return DynamicViewList.Transform.bindID(_:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicViewList<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static DynamicView.makeID() in conformance AnyView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static DynamicView.makeID() in conformance <A> A?@<X0>(uint64_t *a1@<X8>)
{
  return static DynamicView<>.makeID()(a1);
}

uint64_t type metadata accessor for DynamicViewContainer.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicViewContainer.Value);
}

uint64_t type metadata accessor for DynamicViewList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicViewList);
}

uint64_t dispatch thunk of static DynamicView.canTransition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static DynamicView.traitKeysDependOnView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static DynamicView.makeID()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of DynamicView.childInfo(metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of DynamicView.makeChildView(metadata:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of DynamicView.makeChildViewList(metadata:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t type metadata completion function for DynamicViewList.Item()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DynamicViewList.Item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicViewList.Item);
}

uint64_t type metadata completion function for DynamicViewList()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicViewList(_QWORD *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 99) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = v9;
    a1 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a1 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *v11 = *v10;
    v12 = ((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
    *(_DWORD *)(v12 + 36) = *(_DWORD *)(v13 + 36);
    *(_QWORD *)(v12 + 40) = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
    *(_DWORD *)(v12 + 64) = *(_DWORD *)(v13 + 64);
    *(_QWORD *)(v12 + 72) = *(_QWORD *)(v13 + 72);
    *(_BYTE *)(v12 + 80) = *(_BYTE *)(v13 + 80);
    v14 = (_QWORD *)(((unint64_t)v11 + 99) & 0xFFFFFFFFFFFFF8);
    v15 = (void **)(((unint64_t)v10 + 99) & 0xFFFFFFFFFFFFF8);
    v16 = *v15;
    *v14 = *v15;
    v17 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
    *v17 = *v18;
    *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v16;
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t destroy for DynamicViewList(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  id v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = v6 + a1;
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *v8;
  v9 = (v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_QWORD *)(v9 + 72) = *(_QWORD *)(v10 + 72);
  *(_BYTE *)(v9 + 80) = *(_BYTE *)(v10 + 80);
  v11 = (_QWORD *)((v7 + 99) & 0xFFFFFFFFFFFFF8);
  v12 = (void **)(((unint64_t)v8 + 99) & 0xFFFFFFFFFFFFF8);
  v13 = *v12;
  *v11 = *v12;
  v14 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = v13;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 + 11;
  v10 = *(_DWORD *)v8;
  v8 += 99;
  *v7 = v10;
  v11 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v12 = v9 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
  *(_DWORD *)(v11 + 28) = *(_DWORD *)(v12 + 28);
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(v12 + 32);
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(v12 + 36);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
  *(_DWORD *)(v11 + 64) = *(_DWORD *)(v12 + 64);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 80) = *(_BYTE *)(v12 + 80);
  v13 = ((unint64_t)v7 + 99) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 & 0xFFFFFFFFFFFFF8) + 15;
  v14 = *(void **)(v8 & 0xFFFFFFFFFFFFF8);
  v16 = *(void **)v13;
  *(_QWORD *)v13 = v14;
  v13 += 15;
  v17 = v14;

  v15 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)v15;
  swift_retain();
  swift_release();
  *(_QWORD *)(((v13 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v15 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = v6 + a1;
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *v8;
  v9 = (v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  v12 = *(_BYTE *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 48);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v14;
  *(_OWORD *)(v9 + 64) = v13;
  *(_BYTE *)(v9 + 80) = v12;
  v15 = (_QWORD *)((v7 + 99) & 0xFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v8 + 99) & 0xFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  *v17 = *v18;
  *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_QWORD *)(v9 + 72) = *(_QWORD *)(v10 + 72);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v9 + 80) = *(_BYTE *)(v10 + 80);
  v11 = (void **)(((unint64_t)v7 + 99) & 0xFFFFFFFFFFFFFFF8);
  v12 = (void **)(((unint64_t)v8 + 99) & 0xFFFFFFFFFFFFF8);
  v13 = *v11;
  *v11 = *v12;

  v14 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_release();
  *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewList(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((((((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 99) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)(((((a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for DynamicViewList(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 99) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 99) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 99) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23505E72C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23505E7CCLL);
}

void sub_23505E734()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23505E73CLL);
  JUMPOUT(0x23505E7CCLL);
}

void sub_23505E78C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23505E7CCLL);
}

void sub_23505E794()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23505E7CCLL);
}

uint64_t sub_23505E79C@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v4 + v6) = 0;
  if (!(_DWORD)v5)
    goto LABEL_6;
  if (a1 < 0x7FFFFFFF)
  {
    if ((v5 & 0x80000000) != 0)
      JUMPOUT(0x23505E7A8);
    *(_QWORD *)(((((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 16) = (v5 - 1);
LABEL_6:
    JUMPOUT(0x23505E7CCLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v4, v5);
}

uint64_t type metadata completion function for DynamicViewContainer.Value()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicViewContainer.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  const void *v18;
  void *v19;
  id v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  v11 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v10 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = ~v7;
    v15 = (char *)a1 + v7;
    v16 = (char *)a2 + v7;
    v17 = (void *)((unint64_t)(v15 + 8) & v14);
    v18 = (const void *)((unint64_t)(v16 + 8) & v14);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v18, 1, AssociatedTypeWitness))
    {
      memcpy(v17, v18, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v17, v18, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, AssociatedTypeWitness);
    }
    v19 = *(void **)(((unint64_t)v18 + v9) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v17 + v9) & 0xFFFFFFFFFFFFF8) = v19;
    v20 = v19;
  }
  return a1;
}

void destroy for DynamicViewContainer.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84))
    ++v5;

}

_QWORD *initializeWithCopy for DynamicViewContainer.Value(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  void *v14;
  id v15;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, AssociatedTypeWitness))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = (_QWORD *)(((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFF8);
  v14 = *(void **)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFF8);
  *v13 = v14;
  v15 = v14;
  return a1;
}

_QWORD *assignWithCopy for DynamicViewContainer.Value(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void *v16;
  id v17;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, AssociatedTypeWitness);
  v11 = v9(v8, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = (void **)(((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v15 = *(void **)(((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFF8);
  v16 = *v14;
  *v14 = v15;
  v17 = v15;

  return a1;
}

_QWORD *initializeWithTake for DynamicViewContainer.Value(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, AssociatedTypeWitness))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  *(_QWORD *)(((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for DynamicViewContainer.Value(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  void **v14;
  void *v15;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, AssociatedTypeWitness);
  v11 = v9(v8, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = (void **)(((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  *v14 = *(void **)(((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewContainer.Value(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  else
  {
    v14 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
}

void storeEnumTagSinglePayload for DynamicViewContainer.Value(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  if (v10 < a3)
  {
    if ((((_DWORD)v12 + (((_DWORD)v11 + 8) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = a3 - v10 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v12 + (((_DWORD)v11 + 8) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_23505F1F4@<X0>(size_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t result;

  *((_BYTE *)v5 + v7) = 0;
  if (v6)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v9 = (void *)(((unint64_t)v5 + v3 + 8) & v4);
      if (a2 >= v6)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v2 + 56))(v9, v6 + 1);
      }
      else if ((_DWORD)a1)
      {
        if (a1 <= 3)
          v10 = a1;
        else
          v10 = 4;
        bzero(v9, a1);
        __asm { BR              X10 }
      }
    }
    else
    {
      if ((v6 & 0x80000000) != 0)
        v8 = v6 ^ 0x80000000;
      else
        v8 = v6 - 1;
      *v5 = v8;
    }
  }
  return result;
}

void sub_23505F2E0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23505F2E8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23505F2F8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata completion function for DynamicViewContainer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicViewContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  void *v17;
  id v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_DWORD *)(((unint64_t)a1 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    v12 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
    *(_DWORD *)(v12 + 36) = *(_DWORD *)(v13 + 36);
    *(_QWORD *)(v12 + 40) = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
    *(_DWORD *)(v12 + 56) = *(_DWORD *)(v13 + 56);
    *(_DWORD *)(v12 + 60) = *(_DWORD *)(v13 + 60);
    *(_DWORD *)(v12 + 64) = *(_DWORD *)(v13 + 64);
    *(_DWORD *)(v12 + 68) = *(_DWORD *)(v13 + 68);
    *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
    *(_DWORD *)(v12 + 76) = *(_DWORD *)(v13 + 76);
    *(_DWORD *)(v12 + 80) = *(_DWORD *)(v13 + 80);
    v14 = (v12 + 91) & 0xFFFFFFFFFFFFFFF8;
    v15 = (v13 + 91) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
    *(_DWORD *)(v14 + 12) = *(_DWORD *)(v15 + 12);
    v16 = (void **)((v15 + 23) & 0xFFFFFFFFFFFFF8);
    v17 = *v16;
    *(_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8) = *v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = v17;
  }
  return a1;
}

void destroy for DynamicViewContainer(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = (((a1 + *(_QWORD *)(v3 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  id v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  v13 = (void **)((v12 + 23) & 0xFFFFFFFFFFFFF8);
  v14 = *v13;
  *(_QWORD *)((v11 + 23) & 0xFFFFFFFFFFFFF8) = *v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v14;
  return a1;
}

uint64_t assignWithCopy for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  id v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_retain();
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  v13 = (void **)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *(void **)((v12 + 23) & 0xFFFFFFFFFFFFF8);
  v15 = *v13;
  *v13 = v14;
  v16 = v14;

  return a1;
}

uint64_t initializeWithTake for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = v6 + a1;
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *v8;
  v9 = (v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  v12 = *(_DWORD *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 48);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v14;
  *(_OWORD *)(v9 + 64) = v13;
  *(_DWORD *)(v9 + 80) = v12;
  v15 = (_OWORD *)((v9 + 91) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_OWORD *)((v10 + 91) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  *(_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  v13 = (void **)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *v13 = *(void **)((v12 + 23) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewContainer(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((((((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)(((((a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for DynamicViewContainer(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 91) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 91) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23505FE24()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23505FEC4);
}

void sub_23505FE2C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23505FE34);
  JUMPOUT(0x23505FEC4);
}

void sub_23505FE84()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23505FEC4);
}

void sub_23505FE8C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23505FEC4);
}

uint64_t sub_23505FE94@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v4 + v6) = 0;
  if (!(_DWORD)v5)
    goto LABEL_6;
  if (a1 < 0x7FFFFFFF)
  {
    if ((v5 & 0x80000000) != 0)
      JUMPOUT(0x23505FEA0);
    *(_QWORD *)(((((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 16) = (v5 - 1);
LABEL_6:
    JUMPOUT(0x23505FEC4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v4, v5);
}

uint64_t instantiation function for generic protocol witness table for DynamicViewContainer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewContainer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for DynamicViewList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in DynamicViewList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in DynamicViewContainer<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in DynamicViewContainer.updateValue()@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = v2[2];
  v5 = v2[3];
  v7 = v2[4];
  v6 = v2[5];
  v8 = type metadata accessor for DynamicViewContainer.Value(0, v4, v5, a1);
  result = DynamicViewContainer.Value.matches(type:id:)(v7, v6, v8);
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:)(a1, v2[4], v2[2], v2[3], a2);
}

_QWORD *specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(uint64_t a1, int a2, int a3, uint64_t a4, char a5, void *a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  id v16;

  v8 = v7;
  v13 = *v8;
  v8[4] = a1;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v13 + 144)) = a2;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 + 152)) = a3;
  v14 = (char *)v8 + *(_QWORD *)(*v8 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v14, a4, AssociatedTypeWitness);
  *((_BYTE *)v8 + *(_QWORD *)(*v8 + 160)) = a5;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 + 168)) = a7;
  *((_DWORD *)v8 + 6) = 1;
  v8[2] = a6;
  swift_beginAccess();
  type metadata accessor for Unmanaged();
  type metadata accessor for Array();
  swift_retain();
  v16 = a6;
  swift_retain();
  Array.append(_:)();
  swift_endAccess();
  swift_release();
  return v8;
}

uint64_t type metadata accessor for DynamicViewList.WrappedList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicViewList.WrappedList);
}

uint64_t partial apply for closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:)@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:)(a1);
}

BOOL partial apply for closure #1 in DynamicViewList.Item.invalidate()(uint64_t *a1)
{
  uint64_t v1;

  return static Unmanaged.== infix(_:_:)(*a1, v1);
}

uint64_t type metadata completion function for DynamicViewList.WrappedList()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicViewList.WrappedList(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  const void *v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v8 + 7 + ((v7 + 48) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    v14 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v14;
    (**(void (***)(uint64_t, uint64_t *))(v14 - 8))(a1, a2);
    v15 = (_QWORD *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)a2 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = (void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    v18 = (const void *)(((unint64_t)v16 + v7 + 8) & ~v7);
    v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v19(v18, 1, v13))
    {
      memcpy(v17, v18, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v17, v18, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v13);
    }
    *(_QWORD *)(((unint64_t)v17 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for DynamicViewList.WrappedList(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (((a1 + 47) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return result;
}

uint64_t initializeWithCopy for DynamicViewList.WrappedList(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (_QWORD *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v12(v11, 1, AssociatedTypeWitness))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v14 + 1;
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  *(_QWORD *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *assignWithCopy for DynamicViewList.WrappedList(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  size_t v13;
  uint64_t v14;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = (_QWORD *)(((unint64_t)a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  swift_retain();
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v4) = v11(v9, 1, AssociatedTypeWitness);
  v12 = v11(v10, 1, AssociatedTypeWitness);
  if ((_DWORD)v4)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v7 + 84))
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v13);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  *(_QWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for DynamicViewList.WrappedList(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = (_QWORD *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, AssociatedTypeWitness))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, AssociatedTypeWitness);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  *(_QWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicViewList.WrappedList(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  size_t v14;
  uint64_t v15;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = (_QWORD *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v5) = v12(v10, 1, AssociatedTypeWitness);
  v13 = v12(v11, 1, AssociatedTypeWitness);
  if ((_DWORD)v5)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v14);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  *(_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewList.WrappedList(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unsigned int v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 48) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 47) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9);
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
}

void storeEnumTagSinglePayload for DynamicViewList.WrappedList(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  if (v10 < a3)
  {
    if ((((_DWORD)v12 + (((_DWORD)v11 + 48) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = a3 - v10 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v12 + (((_DWORD)v11 + 48) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v12 + ((v11 + 48) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_235060C64@<X0>(size_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t result;

  *(_BYTE *)(v6 + v7) = 0;
  if (v5)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v8 = (void *)((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + v3 + 8) & v4);
      if (a2 >= v5)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v2 + 56))(v8, v5 + 1);
      }
      else if ((_DWORD)a1)
      {
        if (a1 <= 3)
          v9 = a1;
        else
          v9 = 4;
        bzero(v8, a1);
        __asm { BR              X10 }
      }
    }
    else if ((v5 & 0x80000000) != 0)
    {
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_QWORD *)v6 = v5 ^ 0x80000000;
    }
    else
    {
      *(_QWORD *)(v6 + 24) = v5 - 1;
    }
  }
  return result;
}

void sub_235060D68()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_235060D70()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_235060D80()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t type metadata accessor for DynamicViewList.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicViewList.Transform);
}

uint64_t type metadata accessor for DynamicViewList.WrappedIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicViewList.WrappedIDs);
}

void base witness table accessor for Sequence in DynamicViewList<A>.WrappedIDs()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Collection in DynamicViewList<A>.WrappedIDs()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in DynamicViewList<A>.WrappedIDs(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in DynamicViewList<A>.WrappedIDs()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in DynamicViewList<A>.WrappedIDs(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>.WrappedIDs);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], a1, &v3);
}

uint64_t sub_235060E64()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t EventBindingManager.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 48) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  return v0;
}

uint64_t EventBindingManager.send(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_weakInit();
  if (one-time initialization token for _lock != -1)
    swift_once();
  v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v3 = EventBindingManager.sendDownstream(_:)(a1);
    swift_release();
  }
  else
  {
    v3 = MEMORY[0x24BEE4B08];
  }
  static Update.end()();
  _MovableLockUnlock(v2);
  swift_weakDestroy();
  return v3;
}

Swift::Void __swiftcall EventBindingManager.reset(resetForwardedEventDispatchers:)(Swift::Bool resetForwardedEventDispatchers)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  int64_t v42;
  _QWORD *v43;
  __int128 v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v2 = v1;
  LOBYTE(v1) = resetForwardedEventDispatchers;
  v3 = swift_allocObject();
  v40 = v2;
  swift_weakInit();
  swift_retain();
  specialized static Update.begin()();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:);
  *(_QWORD *)(v4 + 24) = v3;
  v5 = one-time initialization token for actions;
  swift_retain();
  if (v5 != -1)
LABEL_53:
    swift_once();
  v6 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[2 * v8];
  v9[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v9[5] = v4;
  static Update.actions = v6;
  swift_bridgeObjectRelease();
  static Update.end()();
  swift_release_n();
  if ((v1 & 1) == 0)
  {
LABEL_46:
    v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_beginAccess();
    v40[7] = v37;
    swift_bridgeObjectRelease();
    v38 = (void *)v40[9];
    if (v38)
    {
      objc_msgSend(v38, sel_invalidate);
      v39 = (void *)v40[9];
    }
    else
    {
      v39 = 0;
    }
    v40[9] = 0;

    swift_beginAccess();
    *((_BYTE *)v40 + 64) = 0;
    return;
  }
  v10 = v40 + 6;
  swift_beginAccess();
  v4 = v40[6];
  v41 = v4 + 64;
  v11 = 1 << *(_BYTE *)(v4 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v4 + 64);
  v42 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  v14 = 0;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v14 << 6);
LABEL_14:
      v18 = *(_QWORD *)(v4 + 56);
      *(_QWORD *)&v45 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      outlined init with copy of AnyTrackedValue(v18 + 40 * v17, (uint64_t)&v45 + 8);
      goto LABEL_33;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_52;
    if (v19 < v42)
    {
      v20 = *(_QWORD *)(v41 + 8 * v19);
      if (v20)
        goto LABEL_18;
      v21 = v14 + 2;
      ++v14;
      if (v19 + 1 < v42)
      {
        v20 = *(_QWORD *)(v41 + 8 * v21);
        if (v20)
          goto LABEL_21;
        v14 = v19 + 1;
        if (v19 + 2 < v42)
        {
          v20 = *(_QWORD *)(v41 + 8 * (v19 + 2));
          if (v20)
          {
            v19 += 2;
            goto LABEL_18;
          }
          v21 = v19 + 3;
          v14 = v19 + 2;
          if (v19 + 3 < v42)
            break;
        }
      }
    }
LABEL_32:
    v13 = 0;
    v46 = 0u;
    v47 = 0u;
    v45 = 0u;
LABEL_33:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v45, (uint64_t)&v48, (uint64_t (*)(_QWORD))type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?);
    if (!v50)
    {
      swift_release();
      goto LABEL_46;
    }
    v22 = v48;
    outlined init with take of ScrollStateRequest(&v49, (uint64_t)&v45);
    v23 = *((_QWORD *)&v46 + 1);
    v24 = v47;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v45, *((uint64_t *)&v46 + 1));
    (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v23, v24);
    swift_beginAccess();
    outlined init with copy of AnyTrackedValue((uint64_t)&v45, (uint64_t)v44);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1 = (_QWORD *)*v10;
    v43 = (_QWORD *)*v10;
    *v10 = 0x8000000000000000;
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    v28 = v1[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v31 = v26;
    if (v1[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v1 = v43;
        if ((v26 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v1 = v43;
        if ((v31 & 1) != 0)
          goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_55;
      v27 = v32;
      v1 = v43;
      if ((v31 & 1) != 0)
      {
LABEL_10:
        v15 = v1[7] + 40 * v27;
        __swift_destroy_boxed_opaque_existential_1(v15);
        outlined init with take of ScrollStateRequest(v44, v15);
        goto LABEL_11;
      }
    }
    v1[(v27 >> 6) + 8] |= 1 << v27;
    *(_QWORD *)(v1[6] + 8 * v27) = v22;
    outlined init with take of ScrollStateRequest(v44, v1[7] + 40 * v27);
    v34 = v1[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_51;
    v1[2] = v36;
LABEL_11:
    *v10 = v1;
    swift_bridgeObjectRelease();
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
  }
  v20 = *(_QWORD *)(v41 + 8 * v21);
  if (v20)
  {
LABEL_21:
    v19 = v21;
LABEL_18:
    v13 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    v14 = v19;
    goto LABEL_14;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v19 >= v42)
    {
      v14 = v42 - 1;
      goto LABEL_32;
    }
    v20 = *(_QWORD *)(v41 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_18;
  }
  __break(1u);
LABEL_55:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t EventBindingManager.willRemoveResponder(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t i;
  unint64_t v15;
  Swift::UInt *v16;
  Swift::UInt v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  char v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 88))();
  v31 = (uint64_t *)(v1 + 56);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v4 + 64);
  v29 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v30 = (unint64_t)(v6 + 63) >> 6;
  v32 = *(_QWORD *)(v1 + 56);
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (v8)
    goto LABEL_20;
LABEL_6:
  v11 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v11 < v30)
    {
      v12 = *(_QWORD *)(v29 + 8 * v11);
      ++v10;
      if (v12)
        goto LABEL_19;
      v10 = v11 + 1;
      if (v11 + 1 >= v30)
        goto LABEL_41;
      v12 = *(_QWORD *)(v29 + 8 * v10);
      if (v12)
        goto LABEL_19;
      v10 = v11 + 2;
      if (v11 + 2 >= v30)
        goto LABEL_41;
      v12 = *(_QWORD *)(v29 + 8 * v10);
      if (v12)
      {
LABEL_19:
        v8 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v10 << 6); ; i = v15 | (v10 << 6))
        {
          v16 = (Swift::UInt *)(*(_QWORD *)(v32 + 48) + 16 * i);
          v18 = *v16;
          v17 = v16[1];
          v19 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * i);
          swift_retain_n();
          if (!v19)
            goto LABEL_5;
          if (v19 == a1)
            break;
          swift_release();
          if (!v3 || v19 != v3)
          {
            v20 = v19;
            while (1)
            {
              v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 88);
              v22 = swift_retain();
              v20 = v21(v22);
              swift_retain();
              swift_release_n();
              if (!v20)
                break;
              if (v20 == a1)
                goto LABEL_31;
              swift_release();
              if (v3 && v20 == v3)
                goto LABEL_30;
            }
LABEL_5:
            result = swift_release();
            if (!v8)
              goto LABEL_6;
            goto LABEL_20;
          }
LABEL_30:
          swift_release();
LABEL_39:
          result = swift_release();
          if (!v8)
            goto LABEL_6;
LABEL_20:
          v15 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
LABEL_31:
        swift_beginAccess();
        if (v3)
        {
          swift_retain_n();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v33 = *v31;
          *v31 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v18, v17, isUniquelyReferenced_nonNull_native);
          *v31 = v33;
        }
        else
        {
          v24 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
          if ((v25 & 1) == 0)
          {
LABEL_38:
            swift_endAccess();
            swift_release();
            swift_release_n();
            goto LABEL_39;
          }
          v26 = v24;
          v27 = swift_isUniquelyReferenced_nonNull_native();
          v28 = *v31;
          v34 = *v31;
          *v31 = 0x8000000000000000;
          if (!v27)
          {
            specialized _NativeDictionary.copy()();
            v28 = v34;
          }
          specialized _NativeDictionary._delete(at:)(v26, v28);
          *v31 = v28;
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      v13 = v11 + 3;
      if (v13 < v30)
      {
        v12 = *(_QWORD *)(v29 + 8 * v13);
        if (v12)
        {
          v10 = v13;
          goto LABEL_19;
        }
        while (1)
        {
          v10 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_43;
          if (v10 >= v30)
            break;
          v12 = *(_QWORD *)(v29 + 8 * v10);
          ++v13;
          if (v12)
            goto LABEL_19;
        }
      }
    }
LABEL_41:
    swift_release();
    return swift_release();
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

Swift::Void __swiftcall EventBindingManager.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  unint64_t v7;
  _QWORD v8[3];

  v2 = v1;
  v3 = *(_QWORD *)a1.rawValue;
  swift_beginAccess();
  if (MEMORY[0x23B7C9E44](v2 + 16))
  {
    v4 = *(_QWORD *)(v2 + 24);
    if (one-time initialization token for _lock != -1)
      swift_once();
    v5 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    ObjectType = swift_getObjectType();
    v8[0] = v3;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 40))(v8, ObjectType, v4);
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_weakInit();
    _MovableLockLock(v5);
    specialized static Update.begin()();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      EventBindingManager.sendDownstream(_:)(v7);
      swift_release();
    }
    static Update.end()();
    _MovableLockUnlock(v5);
    swift_weakDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Update.end()();
    _MovableLockUnlock(v5);
    swift_unknownObjectRelease();
  }
}

uint64_t EventBinding.responder.getter()
{
  return swift_retain();
}

uint64_t EventBinding.responder.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*EventBinding.responder.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t EventBinding.init(responder:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static EventBinding.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t EventBindingManager.host.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x23B7C9E44](v0 + 16);
}

uint64_t EventBindingManager.host.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*EventBindingManager.host.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x23B7C9E44](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return EventBindingManager.host.modify;
}

void EventBindingManager.host.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t EventBindingManager.delegate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x23B7C9E44](v0 + 32);
}

uint64_t EventBindingManager.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*EventBindingManager.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x23B7C9E44](v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v3[3] = v4;
  v3[4] = v5;
  return EventBindingManager.delegate.modify;
}

void EventBindingManager.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 40) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t EventBindingManager.isActive.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t static EventBindingManager.current.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = specialized static ViewGraph.current.getter() + 200;
  swift_beginAccess();
  v1 = MEMORY[0x23B7C9E44](v0);
  swift_release();
  if (v1)
  {
    swift_getObjectType();
    v2 = swift_conformsToProtocol2();
    if (v2)
      v3 = v2;
    else
      v3 = 0;
    if (v2)
      v4 = v1;
    else
      v4 = 0;
    if (v4)
    {
      ObjectType = swift_getObjectType();
      v6 = type metadata accessor for AnyPreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8) + 16))(v10, v6, v6, ObjectType);
      swift_unknownObjectRelease();
      if (v10[0])
      {
        v7 = v10[1];
        v8 = swift_getObjectType();
        v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v7);
        swift_unknownObjectRelease();
        return v1;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
    return 0;
  }
  return v1;
}

uint64_t EventBindingManager.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 48) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  return v0;
}

uint64_t EventBindingManager.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  if (v1)
    objc_msgSend(v1, sel_invalidate);
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  outlined destroy of weak GestureGraphDelegate?(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t EventBindingManager.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  if (v1)
    objc_msgSend(v1, sel_invalidate);
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  outlined destroy of weak GestureGraphDelegate?(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t EventBindingManager.addForwardedEventDispatcher(_:)(_QWORD *a1)
{
  uint64_t v2;
  _BYTE v4[40];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_getDynamicType();
  v2 = (*(uint64_t (**)(void))(a1[4] + 8))();
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v4);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v4, v2);
  return swift_endAccess();
}

uint64_t EventBindingManager.rebindEvent(_:to:)@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  Swift::UInt v6;
  Swift::UInt v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;

  v6 = *a1;
  v7 = a1[1];
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 56);
  if (!*(_QWORD *)(v8 + 16) || (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7), (v10 & 1) == 0))
  {
    result = swift_endAccess();
LABEL_7:
    a2 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
  result = swift_endAccess();
  if (a2 && v11 == a2)
    goto LABEL_7;
  swift_beginAccess();
  swift_retain_n();
  swift_retain();
  specialized Dictionary.subscript.setter(a2, v6, v7);
  result = swift_endAccess();
LABEL_8:
  *a3 = v11;
  a3[1] = a2;
  return result;
}

uint64_t EventBindingManager.sendDownstream(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t result;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  Swift::UInt v26;
  Swift::UInt v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(__int128 *, uint64_t, uint64_t);
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(__int128 *);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(__int128 *, uint64_t, uint64_t);
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  int v57;
  double v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::UInt *v70;
  Swift::UInt v71;
  Swift::UInt v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _BYTE *v81;
  int64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  __int128 v88[2];
  uint64_t v89;
  unsigned __int8 v90[24];
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  CFTimeInterval v97;
  Swift::UInt v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;

  v2 = v1;
  v4 = v1 + 2;
  swift_beginAccess();
  if (!MEMORY[0x23B7C9E44](v1 + 2))
    return MEMORY[0x24BEE4B08];
  v78 = v1[3];
  if (MEMORY[0x23B7C9E44](v1 + 2))
  {
    v5 = v1[3];
    ObjectType = swift_getObjectType();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  if (one-time initialization token for _eventDebugTriggers != -1)
LABEL_93:
    swift_once();
  swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 2) != 0)
  {
    specialized static Log.eventDebug(_:)(0x45444E4F50534552, 0xEA00000000005352);
    if (v7)
    {
      type metadata accessor for ViewResponder();
      if (swift_dynamicCastClass())
      {
        v9 = default argument 0 of ViewResponder.printTree(depth:)();
        swift_retain();
        ViewResponder.printTree(depth:)(v9);
        swift_release();
      }
    }
    specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
  }
  printEvents(_:)((Swift::OpaquePointer)a1);
  v8 = EventBindingManager.dispatchNonGestureEvents(_:)(a1);
  v101 = v8;
  swift_retain();
  v10 = specialized Dictionary.optimisticFilter(_:)(a1, (uint64_t)v2);
  swift_release();
  v100 = v10;
  v81 = v2 + 8;
  swift_beginAccess();
  if ((v2[8] & 1) == 0 && !*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    return v8;
  }
  v79 = v10 + 64;
  a1 = 1 << *(_BYTE *)(v10 + 32);
  v11 = -1;
  if (a1 < 64)
    v11 = ~(-1 << a1);
  v12 = v10;
  v13 = v11 & *(_QWORD *)(v10 + 64);
  v14 = v2 + 7;
  v84 = v2;
  v86 = v12;
  swift_bridgeObjectRetain();
  v80 = v2 + 4;
  result = swift_beginAccess();
  v87 = 0;
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v82 = (unint64_t)(a1 + 63) >> 6;
  v83 = v4;
  v85 = v7;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v87 << 6);
LABEL_21:
      v19 = *(_QWORD *)(v86 + 56);
      v20 = (uint64_t *)(*(_QWORD *)(v86 + 48) + 16 * v18);
      v22 = *v20;
      v21 = v20[1];
      *(_QWORD *)&v93 = v22;
      *((_QWORD *)&v93 + 1) = v21;
      outlined init with copy of AnyTrackedValue(v19 + 40 * v18, (uint64_t)&v94);
      goto LABEL_40;
    }
    v23 = v87 + 1;
    if (__OFADD__(v87, 1))
    {
      __break(1u);
      goto LABEL_93;
    }
    if (v23 < v82)
    {
      v24 = *(_QWORD *)(v79 + 8 * v23);
      if (v24)
        goto LABEL_25;
      v25 = v87 + 2;
      ++v87;
      if (v23 + 1 < v82)
      {
        v24 = *(_QWORD *)(v79 + 8 * v25);
        if (v24)
          goto LABEL_28;
        v87 = v23 + 1;
        if (v23 + 2 < v82)
        {
          v24 = *(_QWORD *)(v79 + 8 * (v23 + 2));
          if (v24)
          {
            v23 += 2;
            goto LABEL_25;
          }
          v25 = v23 + 3;
          v87 = v23 + 2;
          if (v23 + 3 < v82)
            break;
        }
      }
    }
LABEL_39:
    v13 = 0;
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    v93 = 0u;
LABEL_40:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v93, (uint64_t)&v97, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType)?);
    v26 = *(_QWORD *)&v97;
    if (v97 == 0.0)
    {
      swift_release();
      swift_beginAccess();
      v55 = swift_bridgeObjectRetain();
      printEventBindings(_:)((Swift::OpaquePointer)v55);
      swift_bridgeObjectRelease();
      if (one-time initialization token for infinity != -1)
        swift_once();
      v56 = 0.0;
      LOBYTE(v57) = 0;
      v58 = *(double *)&static Time.infinity;
      LOBYTE(v59) = 3;
      if (*v81 == 1 && v85)
      {
        v60 = swift_getObjectType();
        v61 = v100;
        swift_retain();
        swift_bridgeObjectRetain();
        v97 = CACurrentMediaTime();
        v62 = v78;
        (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t, CFTimeInterval *, uint64_t, uint64_t))(v78 + 48))(v90, v61, v85, &v97, v60, v78);
        swift_bridgeObjectRelease();
        v57 = v90[0];
        v59 = v90[1];
        (*(void (**)(CFTimeInterval *__return_ptr, uint64_t, uint64_t))(v62 + 32))(&v97, v60, v62);
        v58 = v97;
        (*(void (**)(CFTimeInterval *__return_ptr, uint64_t, uint64_t))(v62 + 64))(&v97, v60, v62);
        swift_release();
        if ((_BYTE)v98)
          v56 = 0.0;
        else
          v56 = v97;
        if (v59 != 3 || v57)
        {
          v63 = swift_bridgeObjectRetain();
          specialized Set.formUnion<A>(_:)(v63);
        }
        else
        {
          LOBYTE(v59) = 3;
        }
      }
      if ((_eventDebugTriggers.rawValue & 0x10) != 0 && v85)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
        *((_QWORD *)&v99 + 1) = v64;
        LOBYTE(v97) = v57;
        BYTE1(v97) = v59;
        swift_retain();
        ResponderNode.log(action:data:)(0x6168702D746F6F72, 0xEA00000000006573, (uint64_t)&v97);
        swift_release();
        outlined destroy of Any?((uint64_t)&v97);
      }
      if (MEMORY[0x23B7C9E44](v80))
      {
        v65 = v84[5];
        v66 = swift_getObjectType();
        LOBYTE(v97) = v57;
        BYTE1(v97) = v59;
        (*(void (**)(CFTimeInterval *, _QWORD *, uint64_t, uint64_t))(v65 + 16))(&v97, v84, v66, v65);
        swift_unknownObjectRelease();
      }
      if (MEMORY[0x23B7C9E44](v80))
      {
        v67 = v84[5];
        v68 = swift_getObjectType();
        v97 = v56;
        (*(void (**)(CFTimeInterval *, _QWORD *, uint64_t, uint64_t))(v67 + 24))(&v97, v84, v68, v67);
        swift_unknownObjectRelease();
      }
      if (*v81 == 1 && v58 < *(double *)&static Time.infinity)
      {
        v97 = v58;
        EventBindingManager.scheduleNextEventUpdate(time:)(&v97);
      }
      v69 = v2[2];
      if (v69)
      {
        v70 = v2 + 5;
        do
        {
          v71 = *(v70 - 1);
          v72 = *v70;
          swift_beginAccess();
          v73 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v72);
          if ((v74 & 1) != 0)
          {
            v75 = v73;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v77 = *v14;
            *(_QWORD *)v90 = *v14;
            *v14 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              v77 = *(_QWORD *)v90;
            }
            specialized _NativeDictionary._delete(at:)(v75, v77);
            *v14 = v77;
            swift_release();
            swift_bridgeObjectRelease();
          }
          v70 += 2;
          swift_endAccess();
          --v69;
        }
        while (v69);
      }
      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v101;
    }
    v27 = v98;
    outlined init with take of ScrollStateRequest(&v99, (uint64_t)&v93);
    swift_beginAccess();
    v28 = *v14;
    if (*(_QWORD *)(*v14 + 16))
    {
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
      if ((v30 & 1) != 0)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
        swift_endAccess();
        outlined init with copy of AnyTrackedValue((uint64_t)&v93, (uint64_t)v90);
        v32 = v91;
        v33 = v92;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v90, v91);
        *(_QWORD *)&v88[0] = v31;
        v34 = *(void (**)(__int128 *, uint64_t, uint64_t))(v33 + 32);
        swift_retain_n();
        v35 = v33;
        v7 = v85;
        v34(v88, v32, v35);
        v4 = v83;
        swift_beginAccess();
        swift_retain();
        v36 = swift_isUniquelyReferenced_nonNull_native();
        v89 = *v14;
        *v14 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v26, v27, v36);
        *v14 = v89;
        swift_bridgeObjectRelease();
        swift_endAccess();
        outlined init with copy of AnyTrackedValue((uint64_t)v90, (uint64_t)v88);
        v37 = v100;
        v38 = swift_isUniquelyReferenced_nonNull_native();
        v89 = v37;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v88, v26, v27, v38);
        v100 = v89;
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_55;
      }
    }
    swift_endAccess();
    if (MEMORY[0x23B7C9E44](v4))
    {
      v39 = v84[3];
      v40 = swift_getObjectType();
      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 24))(v40, v39);
      swift_unknownObjectRelease();
      if (v41)
      {
        v42 = *((_QWORD *)&v94 + 1);
        v43 = v95;
        __swift_project_boxed_opaque_existential_1(&v93, *((uint64_t *)&v94 + 1));
        if (EventType.isFocusEvent.getter(v42, v43))
        {
          v44 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v41 + 96))(&v93);
          if (v44)
          {
            v45 = v44;
            swift_release();
            v41 = v45;
          }
LABEL_52:
          swift_retain();
          outlined init with copy of AnyTrackedValue((uint64_t)&v93, (uint64_t)v90);
          v47 = v91;
          v48 = v92;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v90, v91);
          *(_QWORD *)&v88[0] = v41;
          v49 = *(void (**)(__int128 *, uint64_t, uint64_t))(v48 + 32);
          swift_retain_n();
          v49(v88, v47, v48);
          swift_beginAccess();
          swift_retain();
          v50 = swift_isUniquelyReferenced_nonNull_native();
          v89 = *v14;
          *v14 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v41, v26, v27, v50);
          *v14 = v89;
          swift_bridgeObjectRelease();
          swift_endAccess();
          outlined init with copy of AnyTrackedValue((uint64_t)v90, (uint64_t)v88);
          specialized Dictionary.subscript.setter((uint64_t)v88, v26, v27);
          *v81 = 1;
          if (MEMORY[0x23B7C9E44](v80))
          {
            v51 = v84[5];
            v52 = swift_getObjectType();
            v89 = v41;
            *(_QWORD *)&v88[0] = v26;
            *((_QWORD *)&v88[0] + 1) = v27;
            (*(void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))(v51 + 8))(&v89, v88, v52, v51);
            swift_unknownObjectRelease();
          }
          swift_release_n();
          swift_release();
          v7 = v85;
          v4 = v83;
LABEL_55:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
          goto LABEL_56;
        }
        swift_release();
      }
    }
    if (v7)
    {
      v46 = *(uint64_t (**)(__int128 *))(*(_QWORD *)v7 + 96);
      swift_retain();
      v41 = v46(&v93);
      swift_release();
      if (v41)
        goto LABEL_52;
    }
LABEL_56:
    a1 = *((_QWORD *)&v94 + 1);
    v53 = v95;
    __swift_project_boxed_opaque_existential_1(&v93, *((uint64_t *)&v94 + 1));
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(v53 + 8))(v90, a1, v53);
    if (v90[0] - 2 < 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
      a1 = v2[2];
      v54 = v2[3];
      if (a1 >= v54 >> 1)
        v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), a1 + 1, 1, v2);
      v2[2] = a1 + 1;
      v16 = &v2[2 * a1];
      v16[4] = v26;
      v16[5] = v27;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
  }
  v24 = *(_QWORD *)(v79 + 8 * v25);
  if (v24)
  {
LABEL_28:
    v23 = v25;
LABEL_25:
    v13 = (v24 - 1) & v24;
    v18 = __clz(__rbit64(v24)) + (v23 << 6);
    v87 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v82)
    {
      v87 = v82 - 1;
      goto LABEL_39;
    }
    v24 = *(_QWORD *)(v79 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t EventBindingManager.send<A>(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v10;
  uint64_t v11;

  type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = a3;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 72) = a3;
  *(_QWORD *)(inited + 80) = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  v10 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for (EventID, EventType)();
  swift_arrayDestroy();
  swift_weakInit();
  if (one-time initialization token for _lock != -1)
    swift_once();
  v11 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    EventBindingManager.sendDownstream(_:)(v10);
    swift_release();
  }
  static Update.end()();
  _MovableLockUnlock(v11);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t EventBindingManager.rootResponder.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  swift_beginAccess();
  if (!MEMORY[0x23B7C9E44](v0 + 16))
    return 0;
  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t EventBindingManager.focusedResponder.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  swift_beginAccess();
  if (!MEMORY[0x23B7C9E44](v0 + 16))
    return 0;
  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t EventBindingManager.dispatchNonGestureEvents(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = MEMORY[0x24BEE4B08];
  v33 = MEMORY[0x24BEE4B08];
  v4 = (uint64_t *)(v1 + 48);
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 48);
  v24 = v5 + 64;
  v6 = 1 << *(_BYTE *)(v5 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v5 + 64);
  v25 = (unint64_t)(v6 + 63) >> 6;
  v26 = v1;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
    swift_beginAccess();
    v17 = *v4;
    if (*(_QWORD *)(*v4 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) != 0))
    {
      outlined init with copy of AnyTrackedValue(*(_QWORD *)(v17 + 56) + 40 * v18, (uint64_t)&v27);
    }
    else
    {
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
    }
    result = swift_endAccess();
    if (!*((_QWORD *)&v28 + 1))
      goto LABEL_39;
    outlined init with take of ScrollStateRequest(&v27, (uint64_t)v30);
    v20 = specialized Dictionary.optimisticFilter(_:)(a1, (uint64_t)v30);
    if (*(_QWORD *)(v20 + 16))
    {
      v21 = v31;
      v22 = v32;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
      v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v22 + 32))(v20, v26, v21, v22);
      swift_bridgeObjectRelease();
      outlined init with copy of AnyTrackedValue((uint64_t)v30, (uint64_t)&v27);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)&v27, v16);
      swift_endAccess();
      specialized Set.formUnion<A>(_:)(v23);
      v3 = v33;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v3 + 16) == *(_QWORD *)(a1 + 16))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      return v3;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v13 >= v25)
      goto LABEL_35;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v10;
    if (v14)
      goto LABEL_22;
    v10 = v13 + 1;
    if (v13 + 1 >= v25)
      goto LABEL_35;
    v14 = *(_QWORD *)(v24 + 8 * v10);
    if (v14)
      goto LABEL_22;
    v10 = v13 + 2;
    if (v13 + 2 >= v25)
      goto LABEL_35;
    v14 = *(_QWORD *)(v24 + 8 * v10);
    if (v14)
      goto LABEL_22;
    v10 = v13 + 3;
    if (v13 + 3 >= v25)
      goto LABEL_35;
    v14 = *(_QWORD *)(v24 + 8 * v10);
    if (v14)
      goto LABEL_22;
    v10 = v13 + 4;
    if (v13 + 4 >= v25)
      goto LABEL_35;
    v14 = *(_QWORD *)(v24 + 8 * v10);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 5;
    if (v15 >= v25)
    {
LABEL_35:
      swift_release();
      return v3;
    }
    v14 = *(_QWORD *)(v24 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v10 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_38;
        if (v10 >= v25)
          goto LABEL_35;
        v14 = *(_QWORD *)(v24 + 8 * v10);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v10 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

void EventBindingManager.scheduleNextEventUpdate(time:)(double *a1)
{
  uint64_t v1;
  double v2;
  void *v3;
  void *v4;
  double v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  _QWORD v14[6];

  v2 = *a1;
  v3 = *(void **)(v1 + 72);
  if (v3)
  {
    objc_msgSend(v3, sel_invalidate);
    v4 = *(void **)(v1 + 72);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v1 + 72) = 0;

  v5 = v2 - CACurrentMediaTime();
  if (v5 > 0.0 && (*(_QWORD *)&v5 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    v7 = swift_allocObject();
    swift_weakInit();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = partial apply for closure #1 in EventBindingManager.scheduleNextEventUpdate(time:);
    *(_QWORD *)(v8 + 24) = v7;
    v14[4] = partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:);
    v14[5] = v8;
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
    v14[3] = &block_descriptor_28;
    v9 = _Block_copy(v14);
    v10 = (void *)objc_opt_self();
    swift_retain_n();
    v11 = objc_msgSend(v10, sel_timerWithTimeInterval_repeats_block_, 0, v9, v5);
    _Block_release(v9);
    swift_release();
    v12 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    objc_msgSend(v12, sel_addTimer_forMode_, v11, *MEMORY[0x24BDBCB80]);
    swift_release_n();

    v13 = *(void **)(v1 + 72);
    *(_QWORD *)(v1 + 72) = v11;

  }
}

uint64_t closure #1 in EventBindingManager.scheduleNextEventUpdate(time:)()
{
  uint64_t result;
  void *v1;
  unint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(void **)(result + 72);
    *(_QWORD *)(result + 72) = 0;

    v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_weakInit();
    if (one-time initialization token for _lock != -1)
      swift_once();
    v3 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      EventBindingManager.sendDownstream(_:)(v2);
      swift_release();
    }
    static Update.end()();
    _MovableLockUnlock(v3);
    swift_weakDestroy();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + 16;
    swift_beginAccess();
    v3 = MEMORY[0x23B7C9E44](v2);
    v4 = *(_QWORD *)(v1 + 24);
    result = swift_release();
    if (v3)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t EventBindingManager.isActive<A>(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 48);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v3 + 56) + 40 * i, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v19);
    __swift_project_boxed_opaque_existential_1(v19, v20);
    swift_getDynamicType();
    if ((*(uint64_t (**)(void))(v21 + 8))() == a1)
    {
      v16 = v20;
      v17 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return v18 & 1;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    if (v7)
      goto LABEL_4;
LABEL_5:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v13 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (v14)
      goto LABEL_20;
    v10 = v13 + 1;
    if (v13 + 1 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    if (v14)
      goto LABEL_20;
    v10 = v13 + 2;
    if (v13 + 2 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    if (v14)
      goto LABEL_20;
    v10 = v13 + 3;
    if (v13 + 3 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    if (v14)
      goto LABEL_20;
    v15 = v13 + 4;
    if (v15 >= v8)
    {
LABEL_25:
      swift_release();
      swift_beginAccess();
      v18 = *(_BYTE *)(v1 + 64);
      return v18 & 1;
    }
    v14 = *(_QWORD *)(v4 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v10 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_28;
        if (v10 >= v8)
          goto LABEL_25;
        v14 = *(_QWORD *)(v4 + 8 * v10);
        ++v15;
        if (v14)
          goto LABEL_20;
      }
    }
    v10 = v15;
LABEL_20:
    v7 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t EventBindingManager.binds<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t DynamicType;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  char v23;
  uint64_t v25[5];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  __int128 v29[2];

  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 48);
  v7 = v6 + 64;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v6 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v6 + 56) + 40 * i, (uint64_t)v29);
    outlined init with take of ScrollStateRequest(v29, (uint64_t)v26);
    DynamicType = swift_getDynamicType();
    __swift_project_boxed_opaque_existential_1(v26, v27);
    swift_getDynamicType();
    if (DynamicType == (*(uint64_t (**)(void))(v28 + 8))())
    {
      v20 = v27;
      v21 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      v25[3] = a2;
      v25[4] = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v21 + 24))(v25, v3, v20, v21);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      return v23 & 1;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    if (v10)
      goto LABEL_4;
LABEL_5:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v16 >= v11)
      goto LABEL_25;
    v17 = *(_QWORD *)(v7 + 8 * v16);
    ++v13;
    if (v17)
      goto LABEL_20;
    v13 = v16 + 1;
    if (v16 + 1 >= v11)
      goto LABEL_25;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (v17)
      goto LABEL_20;
    v13 = v16 + 2;
    if (v16 + 2 >= v11)
      goto LABEL_25;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (v17)
      goto LABEL_20;
    v13 = v16 + 3;
    if (v16 + 3 >= v11)
      goto LABEL_25;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (v17)
      goto LABEL_20;
    v18 = v16 + 4;
    if (v18 >= v11)
    {
LABEL_25:
      swift_release();
      v23 = 0;
      return v23 & 1;
    }
    v17 = *(_QWORD *)(v7 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        v13 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_28;
        if (v13 >= v11)
          goto LABEL_25;
        v17 = *(_QWORD *)(v7 + 8 * v13);
        ++v18;
        if (v17)
          goto LABEL_20;
      }
    }
    v13 = v18;
LABEL_20:
    v10 = (v17 - 1) & v17;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ForwardedEventDispatcher.isActive.getter()
{
  return 0;
}

uint64_t ForwardedEventDispatcher.wantsEvent(_:manager:)()
{
  return 1;
}

uint64_t specialized closure #1 in sequence<A>(first:next:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
  {
    *((_BYTE *)a1 + 8) = 0;
    swift_retain();
  }
  else if (v3)
  {
    v7 = *a1;
    swift_retain();
    a2(&v8, &v7);
    swift_release();
    v5 = v8;
    swift_retain();
    swift_release();
    *a1 = v5;
    return v5;
  }
  return v3;
}

uint64_t specialized closure #1 in sequence<A>(first:next:)@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized closure #1 in sequence<A>(first:next:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_235063AD8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:)()
{
  return closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:)();
}

uint64_t sub_235063B04()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?)
  {
    type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)(255, &lazy cache variable for type metadata for (key: ObjectIdentifier, value: ForwardedEventDispatcher), &lazy cache variable for type metadata for ForwardedEventDispatcher);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>)
  {
    type metadata accessor for (EventID, EventType)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>);
  }
}

uint64_t sub_235063BF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x23B7C9E44](v4);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_235063C48(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_235063CA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 32;
  swift_beginAccess();
  result = MEMORY[0x23B7C9E44](v4);
  v6 = *(_QWORD *)(v3 + 40);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_235063CF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 40) = v2;
  return swift_unknownObjectWeakAssign();
}

ValueMetadata *type metadata accessor for EventBinding()
{
  return &type metadata for EventBinding;
}

uint64_t type metadata accessor for EventBindingManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for EventBindingManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EventBindingManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static ForwardedEventDispatcher.eventType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.isActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.wantsEvent(_:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.reset()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventBindingManagerDelegate.didBind(to:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of EventBindingManagerDelegate.didUpdate(phase:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EventBindingManagerDelegate.didUpdate(gestureCategory:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

void type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for AnyPreferenceKey(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t partial apply for closure #1 in EventBindingManager.scheduleNextEventUpdate(time:)()
{
  return closure #1 in EventBindingManager.scheduleNextEventUpdate(time:)();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

SwiftUI::UniqueSeedGenerator __swiftcall UniqueSeedGenerator.init()()
{
  _QWORD *v0;
  SwiftUI::UniqueSeedGenerator result;

  *v0 = 0;
  return result;
}

Swift::Int __swiftcall UniqueSeedGenerator.generate()()
{
  _QWORD *v0;

  return (*v0)++;
}

ValueMetadata *type metadata accessor for UniqueSeedGenerator()
{
  return &type metadata for UniqueSeedGenerator;
}

uint64_t key path getter for _ViewInputs.size : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 72);
  return result;
}

uint64_t SizeGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t key path getter for SizeGesture.content : <A>SizeGesture<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(double *a1)@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 + a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@out A);
  a4[1] = (uint64_t (*)(double *))v8;
  return swift_retain();
}

uint64_t key path setter for SizeGesture.content : <A>SizeGesture<A>(uint64_t *a1, uint64_t (**a2)(double a1, double a2), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = a4 + a3;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out A);
  a2[1] = (uint64_t (*)(double, double))v8;
  return result;
}

uint64_t SizeGesture.content.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t SizeGesture.content.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SizeGesture.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static SizeGesture._makeGesture(gesture:inputs:)(unsigned int *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  id v10;
  unsigned int IndirectAttribute2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[6];
  _BYTE v17[28];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  v6 = *a1;
  v7 = a2[5];
  v23 = a2[4];
  v24 = v7;
  v25[0] = a2[6];
  *(_OWORD *)((char *)v25 + 12) = *(__int128 *)((char *)a2 + 108);
  v8 = a2[1];
  v19 = *a2;
  v20 = v8;
  v9 = a2[3];
  v21 = a2[2];
  v22 = v9;
  outlined retain of _GestureInputs((uint64_t)&v19);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)&v19);
  *(_QWORD *)&v16[0] = __PAIR64__(IndirectAttribute2, v6);
  v13 = type metadata accessor for SizeGestureChild(0, a3, a4, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SizeGestureChild<A>, v13);
  _GraphValue.init<A>(_:)((uint64_t)v16, a3, v13, v14, &v18);
  v16[4] = v23;
  v16[5] = v24;
  *(_OWORD *)v17 = v25[0];
  *(_OWORD *)&v17[12] = *(_OWORD *)((char *)v25 + 12);
  v16[0] = v19;
  v16[1] = v20;
  v16[2] = v21;
  v16[3] = v22;
  return (*(uint64_t (**)(int *, _OWORD *, uint64_t, uint64_t))(a4 + 32))(&v18, v16, a3, a4);
}

uint64_t SizeGestureChild.gesture.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for SizeGesture(0, a1, a2, a3);
  Value = (uint64_t *)AGGraphGetValue();
  v7 = *Value;
  v6 = Value[1];
  *a4 = v7;
  a4[1] = v6;
  return swift_retain();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SizeGesture<A>(unsigned int *a1, __int128 *a2, uint64_t a3)
{
  return static SizeGesture._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SizeGestureChild.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(double, double);
  double *Value;
  void (*v7)(double, double);

  SizeGestureChild.gesture.getter(a2, a3, a4, &v7);
  v4 = v7;
  Value = (double *)AGGraphGetValue();
  v4(*Value, Value[1]);
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance SizeGestureChild<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return SizeGestureChild.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t type metadata accessor for SizeGestureChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeGestureChild);
}

uint64_t instantiation function for generic protocol witness table for SizeGesture<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SizeGesture<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_235064268()
{
  return 16;
}

__n128 sub_235064274(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for SizeGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeGesture);
}

void base witness table accessor for _AttributeBody in SizeGestureChild<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_23506429C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out A)(double a1, double a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD v5[2];

  v3 = *(uint64_t (**)(_QWORD *))(v2 + 32);
  *(double *)v5 = a1;
  *(double *)&v5[1] = a2;
  return v3(v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@out A)(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double, double))(v1 + 32))(*a1, a1[1]);
}

uint64_t combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, double *a3, uint64_t a4, double *a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double *v41;
  uint64_t result;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;

  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CombinedAnimationState.Entry(0, v20, v21, v19);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v65 - v24;
  if (a6 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, *a3, a8, *a5);
  v70 = v23;
  v72 = a2;
  if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == a6)
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, v72, a4, *a3, a3[1], a3[2], a3[3], a8, *a5, a5[1], a5[2], a5[3]);
  v71 = a4;
  v69 = a1;
  v26 = *a1;
  type metadata accessor for AnimationBox<DefaultCombiningAnimation>(0);
  v28 = v27;
  v29 = swift_dynamicCastClass();
  v68 = v28;
  if (v29)
  {
    v30 = *(_QWORD **)(v29 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    MEMORY[0x23B7C7090](a3, a5, a6, *(_QWORD *)(a7 + 8));
    AnimationState.init()((unint64_t *)&v74);
    v31 = v74;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v18, a6);
    *(_QWORD *)&v25[*(int *)(v70 + 36)] = v31;
    v74 = *v72;
    v33 = type metadata accessor for AnimationState(0, a6, a7, v32);
    v74 = AnimationState.combinedState.getter(v33, v34, v35, v36);
    type metadata accessor for Array();
    Array.append(_:)();
    specialized AnimationState.combinedState.setter(v74, v33, v37, v38);
    swift_bridgeObjectRelease();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    v40 = v30[2];
    v39 = v30[3];
    if (v40 >= v39 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v30);
    v30[2] = v40 + 1;
    v41 = (double *)&v30[2 * v40];
    *((_QWORD *)v41 + 4) = v71;
    v41[5] = a8;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v30;
    *v69 = result;
  }
  else
  {
    AnimationState.init()((unint64_t *)&v74);
    (*(void (**)(char *, double *, uint64_t))(v16 + 16))(v18, a3, a6);
    v67 = v26;
    v43 = *v72;
    v66 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v66(v25, v18, a6);
    v44 = v70;
    *(_QWORD *)&v25[*(int *)(v70 + 36)] = v43;
    v73 = v74;
    v46 = type metadata accessor for AnimationState(0, a6, a7, v45);
    swift_bridgeObjectRetain();
    v73 = AnimationState.combinedState.getter(v46, v47, v48, v49);
    v65 = type metadata accessor for Array();
    Array.append(_:)();
    specialized AnimationState.combinedState.setter(v73, v46, v50, v51);
    swift_bridgeObjectRelease();
    MEMORY[0x23B7C7090](a3, a5, a6, *(_QWORD *)(a7 + 8));
    AnimationState.init()((unint64_t *)&v73);
    v52 = v73;
    v66(v25, v18, a6);
    *(_QWORD *)&v25[*(int *)(v44 + 36)] = v52;
    v73 = v74;
    v73 = AnimationState.combinedState.getter(v46, v53, v54, v55);
    Array.append(_:)();
    specialized AnimationState.combinedState.setter(v73, v46, v56, v57);
    swift_bridgeObjectRelease();
    *v72 = v74;
    v58 = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v59 = swift_dynamicCastClass();
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v60 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v60 + 16) + 1, 1, (_QWORD *)v60);
      v62 = *(_QWORD *)(v60 + 16);
      v61 = *(_QWORD *)(v60 + 24);
      if (v62 >= v61 >> 1)
        v60 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v62 + 1, 1, (_QWORD *)v60);
      *(_QWORD *)(v60 + 16) = v62 + 1;
      v63 = v60 + 16 * v62;
      *(_QWORD *)(v63 + 32) = v71;
      *(double *)(v63 + 40) = a8;
      swift_release();
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>();
      v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v60 + 32) = v58;
      *(_QWORD *)(v60 + 40) = 0;
      *(_QWORD *)(v60 + 48) = v71;
      *(double *)(v60 + 56) = a8;
      swift_retain();
    }
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = v60;
    result = swift_bridgeObjectRelease();
    *v69 = v64;
  }
  return result;
}

uint64_t DefaultCombiningAnimation.animate<A>(value:time:context:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  double *v44;
  uint64_t *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  __n128 v71;
  char *v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  char v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[2];
  char v123;
  char v124;
  uint64_t v125;

  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v118 = v12;
  v119 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v108 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v114 = (uint64_t)&v103 - v16;
  v111 = a4;
  v18 = type metadata accessor for CombinedAnimationState.Entry(0, a3, a4, v17);
  v120 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v117 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v113 = (char *)&v103 - v21;
  v22 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v112 = (char *)&v103 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v103 - v29;
  if (a3 == MEMORY[0x24BEE13C8])
  {
    result = specialized DefaultCombiningAnimation.animate<A>(value:time:context:)(a1, a2, a6);
    *(_QWORD *)a5 = result;
    *(_BYTE *)(a5 + 8) = v97 & 1;
    return result;
  }
  if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == a3)
  {
    specialized DefaultCombiningAnimation.animate<A>(value:time:context:)(a1, a2, (uint64_t)v122, a6);
    return outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)v122, a5);
  }
  v122[0] = *a1;
  v32 = type metadata accessor for AnimationState(0, a3, v111, v31);
  v105 = a1;
  v33 = v32;
  AnimationState.combinedState.getter(v32, v34, v35, v36);
  v37 = MEMORY[0x23B7C6268]();
  swift_bridgeObjectRelease();
  if (v37 != *(_QWORD *)(a2 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a5, 1, 1, a3);
  v103 = a5;
  v38 = *(_QWORD *)(v111 + 8);
  v116 = v30;
  v110 = a3;
  v107 = v38;
  dispatch thunk of IteratorProtocol.next()();
  v121 = v22;
  if (v37)
  {
    v42 = v37;
    v115 = v33;
    v104 = v25;
    v43 = 0;
    v44 = (double *)(a2 + 40);
    v106 = v42 - 1;
    v45 = v105;
    v109 = v42;
    while (1)
    {
      v122[0] = *v45;
      v54 = v115;
      AnimationState.combinedState.getter(v115, v39, v40, v41);
      v55 = v113;
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      v56 = *(_QWORD *)&v55[*(int *)(v18 + 36)];
      swift_bridgeObjectRetain();
      v57 = *(void (**)(char *, uint64_t))(v120 + 8);
      v57(v55, v18);
      if (v56)
      {
        v61 = *((_BYTE *)v45 + 17);
        v123 = *((_BYTE *)v45 + 16);
        v124 = v61;
        v63 = *v45;
        v62 = v45[1];
        v122[0] = v56;
        v122[1] = v62;
        v125 = v63;
        AnimationState.combinedState.getter(v54, v58, v59, v60);
        v64 = v117;
        Array.subscript.getter();
        swift_bridgeObjectRelease();
        v65 = v121;
        v66 = (uint64_t)v112;
        v67 = v110;
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v112, v64, v110);
        v57(v64, v18);
        dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
        v68 = *((_QWORD *)v44 - 1);
        v69 = a6 - *v44;
        swift_retain();
        v70 = v114;
        v71.n128_f64[0] = v69;
        Animation.animate<A>(value:time:context:)(v66, (uint64_t)v122, v68, v67, v111, v114, v71);
        swift_release();
        v72 = v108;
        (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v108, v70, v118);
        v73 = *(uint64_t **)(v65 + 48);
        v74 = ((uint64_t (*)(char *, uint64_t, uint64_t))v73)(v72, 1, v67);
        v105 = v73;
        if (v74 == 1)
        {
          (*(void (**)(char *, uint64_t))(v119 + 8))(v72, v118);
          v125 = *v45;
          v75 = v115;
          v125 = AnimationState.combinedState.getter(v115, v76, v77, v78);
          v79 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          v80 = v125;
          Array._checkSubscript_mutating(_:)(v43);
          *(_QWORD *)(v80
                    + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))
                    + *(_QWORD *)(v120 + 72) * v43
                    + *(int *)(v18 + 36)) = 0;
          swift_bridgeObjectRelease();
          _ViewInputs.base.modify(v79, v81);
          specialized AnimationState.combinedState.setter(v125, v75, v82, v83);
          swift_bridgeObjectRelease();
          dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
          v47 = *(void (**)(char *, uint64_t))(v121 + 8);
        }
        else
        {
          v84 = v104;
          (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v104, v72, v67);
          v85 = v122[0];
          v86 = *v45;
          swift_bridgeObjectRetain();
          v125 = v86;
          v87 = v115;
          v125 = AnimationState.combinedState.getter(v115, v88, v89, v90);
          v91 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          v92 = v125;
          Array._checkSubscript_mutating(_:)(v43);
          *(_QWORD *)(v92
                    + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))
                    + *(_QWORD *)(v120 + 72) * v43
                    + *(int *)(v18 + 36)) = v85;
          swift_bridgeObjectRelease();
          _ViewInputs.base.modify(v91, v93);
          specialized AnimationState.combinedState.setter(v125, v87, v94, v95);
          swift_bridgeObjectRelease();
          dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
          v47 = *(void (**)(char *, uint64_t))(v121 + 8);
          v66 = (uint64_t)v112;
          v47(v84, v67);
        }
        v53 = v109;
        v47((char *)v66, v67);
        if (v106 == v43)
        {
          *((_BYTE *)v45 + 17) = v124;
          v99 = v114;
          v100 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v105)(v114, 1, v67);
          (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v99, v118);
          if (v100 == 1)
          {
            v47(v116, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v103, 1, 1, v67);
          }
          else
          {
            v101 = v121;
            v102 = v103;
            (*(void (**)(uint64_t, char *, uint64_t))(v121 + 32))(v103, v116, v67);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v102, 0, 1, v67);
          }
          return swift_bridgeObjectRelease();
        }
        (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v114, v118);
        swift_bridgeObjectRelease();
      }
      else
      {
        v122[0] = *v45;
        AnimationState.combinedState.getter(v54, v58, v59, v60);
        Array.subscript.getter();
        swift_bridgeObjectRelease();
        v46 = v121;
        v47 = *(void (**)(char *, uint64_t))(v121 + 8);
        v48 = v116;
        v49 = v18;
        v50 = v110;
        v47(v116, v110);
        v51 = v117;
        v52 = v50;
        v18 = v49;
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v48, v117, v52);
        v57(v51, v49);
        v53 = v109;
      }
      ++v43;
      v44 += 2;
      if (v53 == v43)
        goto LABEL_18;
    }
  }
  v47 = *(void (**)(char *, uint64_t))(v22 + 8);
LABEL_18:
  v98 = v110;
  v47(v116, v110);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v103, 1, 1, v98);
}

uint64_t AnimationState.combinedState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = type metadata accessor for CombinedAnimationState(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedAnimationState<A>, v5);
  AnimationState.subscript.getter(v5, a1, v5, v6);
  return v8;
}

uint64_t protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance DefaultCombiningAnimation@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v5;

  return DefaultCombiningAnimation.animate<A>(value:time:context:)(a1, *v5, a2, a3, a4, a5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultCombiningAnimation()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DefaultCombiningAnimation(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  void (*v7)(uint64_t);
  Swift::UInt64 v8;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(v3 + 40);
    do
    {
      v6 = *v5;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)*(v5 - 1) + 112);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = v6;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultCombiningAnimation()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DefaultCombiningAnimation(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultCombiningAnimation.Entry()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DefaultCombiningAnimation.Entry()
{
  _QWORD *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = v0[1];
  (*(void (**)(void))(*(_QWORD *)*v0 + 112))();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultCombiningAnimation.Entry()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DefaultCombiningAnimation.Entry(double *a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = a1[1];
  v3 = *(double *)(a2 + 8);
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a2) & (v2 == v3);
}

uint64_t static CombinedAnimationState.defaultValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CombinedAnimationState.Entry(0, a1, a2, a4);
  return static Array._allocateUninitialized(_:)();
}

uint64_t protocol witness for static AnimationStateKey.defaultValue.getter in conformance CombinedAnimationState<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = static CombinedAnimationState.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
  *a4 = result;
  return result;
}

uint64_t specialized AnimationState.combinedState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v5 = type metadata accessor for CombinedAnimationState(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedAnimationState<A>, v5);
  return specialized AnimationState.subscript.setter((uint64_t)&v7, v5, a2, v5);
}

uint64_t specialized DefaultCombiningAnimation.animate<A>(value:time:context:)(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  void (*v37)(__int128 *__return_ptr, _OWORD *, _QWORD *, _QWORD, _UNKNOWN **, double);
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD v55[2];
  char v56;
  char v57;
  _OWORD v58[2];
  __int128 v59;
  uint64_t v60;

  v6 = swift_bridgeObjectRetain();
  v7 = specialized AnimationState.subscript.getter(v6);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 16);
  if (v8 != v12 || v12 == 0)
  {
LABEL_6:
    v14 = 0.0;
    return *(_QWORD *)&v14;
  }
  else
  {
    type metadata accessor for CombinedAnimationState<Double>(0, v9, v10, v11);
    v17 = v16;
    v18 = 0;
    v53 = v8 - 1;
    v19 = 0.0;
    v20 = 5;
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v52 = v8;
    while (1)
    {
      v22 = *a1;
      if (*(_QWORD *)(*a1 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v24 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v22 + 56) + 32 * v23, (uint64_t)v58);
        outlined init with take of Any(v58, &v59);
        outlined init with take of Any(&v59, v58);
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v25 = (_QWORD *)v55[0];
      }
      else
      {
        v55[0] = v21;
        swift_bridgeObjectRetain();
        v25 = v21;
      }
      result = swift_bridgeObjectRelease();
      if (v18 >= v25[2])
        break;
      v26 = v25[v20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v26)
      {
        v28 = *a1;
        v27 = a1[1];
        v29 = *((_BYTE *)a1 + 17);
        v56 = *((_BYTE *)a1 + 16);
        v57 = v29;
        v55[0] = v26;
        v55[1] = v27;
        if (*(_QWORD *)(v28 + 16) && (v30 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v31 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v30, (uint64_t)v58);
          outlined init with take of Any(v58, &v59);
          outlined init with take of Any(&v59, v58);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v32 = v54;
        }
        else
        {
          v54 = v21;
          swift_bridgeObjectRetain();
          v32 = v21;
        }
        result = swift_bridgeObjectRelease();
        if (v18 >= v32[2])
          goto LABEL_48;
        v33 = *(double *)&v32[v20 - 1];
        swift_bridgeObjectRelease();
        v34 = v33 - v19;
        v35 = *(_QWORD *)(a2 + v20 * 8 - 8);
        v36 = a3 - *(double *)(a2 + v20 * 8);
        *(double *)v58 = v34;
        v37 = *(void (**)(__int128 *__return_ptr, _OWORD *, _QWORD *, _QWORD, _UNKNOWN **, double))(*(_QWORD *)v35 + 120);
        swift_retain();
        v37(&v59, v58, v55, MEMORY[0x24BEE13C8], &protocol witness table for Double, v36);
        swift_release();
        v14 = *(double *)&v59;
        if ((BYTE8(v59) & 1) != 0)
        {
          if (*(_QWORD *)(v28 + 16) && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v39 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v38, (uint64_t)v58);
            outlined init with take of Any(v58, &v59);
            outlined init with take of Any(&v59, v58);
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v40 = v54;
          }
          else
          {
            swift_bridgeObjectRetain();
            v40 = v21;
          }
          swift_bridgeObjectRelease();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
            v40 = (_QWORD *)result;
          }
          if (v18 >= v40[2])
            goto LABEL_50;
          v40[v20] = 0;
          swift_bridgeObjectRelease();
          v60 = v17;
          *(_QWORD *)&v59 = v40;
          outlined init with take of Any(&v59, v58);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v54 = (_QWORD *)*a1;
          *a1 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v17, isUniquelyReferenced_nonNull_native);
          *a1 = (uint64_t)v54;
          swift_bridgeObjectRelease();
          if (v53 == v18)
          {
            *((_BYTE *)a1 + 17) = v57;
            swift_bridgeObjectRelease();
            return *(_QWORD *)&v14;
          }
          v19 = v19 + v34;
        }
        else
        {
          v45 = a2;
          v46 = v55[0];
          if (*(_QWORD *)(v28 + 16) && (v47 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v48 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v47, (uint64_t)v58);
            outlined init with take of Any(v58, &v59);
            outlined init with take of Any(&v59, v58);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v49 = v54;
          }
          else
          {
            v49 = v21;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v49);
            v49 = (_QWORD *)result;
          }
          if (v18 >= v49[2])
            goto LABEL_51;
          v49[v20] = v46;
          swift_bridgeObjectRelease();
          v60 = v17;
          *(_QWORD *)&v59 = v49;
          outlined init with take of Any(&v59, v58);
          v51 = swift_isUniquelyReferenced_nonNull_native();
          v54 = (_QWORD *)*a1;
          *a1 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v17, v51);
          *a1 = (uint64_t)v54;
          swift_bridgeObjectRelease();
          v19 = v19 + v14;
          if (v53 == v18)
          {
            *((_BYTE *)a1 + 17) = v57;
            v14 = v19;
            swift_bridgeObjectRelease();
            return *(_QWORD *)&v14;
          }
          a2 = v45;
          v8 = v52;
        }
      }
      else
      {
        v41 = *a1;
        if (*(_QWORD *)(*a1 + 16) && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v43 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v41 + 56) + 32 * v42, (uint64_t)v58);
          outlined init with take of Any(v58, &v59);
          outlined init with take of Any(&v59, v58);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v44 = (_QWORD *)v55[0];
        }
        else
        {
          v55[0] = v21;
          swift_bridgeObjectRetain();
          v44 = v21;
        }
        result = swift_bridgeObjectRelease();
        if (v18 >= v44[2])
          goto LABEL_49;
        v19 = *(double *)&v44[v20 - 1];
      }
      swift_bridgeObjectRelease();
      ++v18;
      v20 += 2;
      if (v8 == v18)
        goto LABEL_6;
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  return result;
}

uint64_t specialized DefaultCombiningAnimation.animate<A>(value:time:context:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  float64x2_t v14;
  char v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  double v35;
  void (*v36)(float64x2_t *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  char isUniquelyReferenced_nonNull_native;
  float64x2_t v52;
  float64x2_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  char v68;
  _QWORD *v69;
  _QWORD v70[2];
  char v71;
  char v72;
  _OWORD v73[3];

  v8 = swift_bridgeObjectRetain();
  v9 = specialized AnimationState.subscript.getter(v8);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v9 + 16);
  result = swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 16);
  if (v10 != v12 || v12 == 0)
  {
    v14 = 0uLL;
    v15 = 1;
    v16 = 0uLL;
LABEL_49:
    *(float64x2_t *)a3 = v14;
    *(float64x2_t *)(a3 + 16) = v16;
    *(_BYTE *)(a3 + 32) = v15;
  }
  else
  {
    v55 = a3;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
    v18 = v17;
    v19 = 0;
    v20 = (double *)(a2 + 40);
    v57 = v10 - 1;
    v65 = 0u;
    v21 = 8;
    v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v56 = v10;
    v64 = 0u;
    while (1)
    {
      v23 = *a1;
      if (*(_QWORD *)(*a1 + 16) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v25 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v23 + 56) + 32 * v24, (uint64_t)v73);
        outlined init with take of Any(v73, &v66);
        outlined init with take of Any(&v66, v73);
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v26 = (_QWORD *)v70[0];
      }
      else
      {
        v70[0] = v22;
        swift_bridgeObjectRetain();
        v26 = v22;
      }
      result = swift_bridgeObjectRelease();
      if (v19 >= v26[2])
        break;
      v27 = v26[v21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v27)
      {
        v29 = *a1;
        v28 = a1[1];
        v30 = *((_BYTE *)a1 + 17);
        v71 = *((_BYTE *)a1 + 16);
        v72 = v30;
        v70[0] = v27;
        v70[1] = v28;
        if (*(_QWORD *)(v29 + 16) && (v31 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v32 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v29 + 56) + 32 * v31, (uint64_t)v73);
          outlined init with take of Any(v73, &v66);
          outlined init with take of Any(&v66, v73);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v33 = v69;
        }
        else
        {
          v69 = v22;
          swift_bridgeObjectRetain();
          v33 = v22;
        }
        result = swift_bridgeObjectRelease();
        if (v19 >= v33[2])
          goto LABEL_51;
        v60 = *(float64x2_t *)&v33[v21 - 2];
        v62 = *(float64x2_t *)&v33[v21 - 4];
        swift_bridgeObjectRelease();
        v34 = *((_QWORD *)v20 - 1);
        v35 = a4 - *v20;
        v58 = vsubq_f64(v62, v65);
        v59 = vsubq_f64(v60, v64);
        v73[0] = v58;
        v73[1] = v59;
        v36 = *(void (**)(float64x2_t *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v34 + 120);
        v37 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
        v38 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
        swift_retain();
        v36(&v66, v73, v70, v37, v38, v35);
        swift_release();
        v61 = v67;
        v63 = v66;
        v39 = v68;
        if ((v68 & 1) != 0)
        {
          if (*(_QWORD *)(v29 + 16) && (v40 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v41 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v29 + 56) + 32 * v40, (uint64_t)v73);
            outlined init with take of Any(v73, &v66);
            outlined init with take of Any(&v66, v73);
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v42 = v69;
            v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
          }
          else
          {
            v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
            v69 = (_QWORD *)MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            v42 = v22;
          }
          swift_bridgeObjectRelease();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v42);
            v42 = (_QWORD *)result;
          }
          if (v19 >= v42[2])
            goto LABEL_53;
          v42[v21] = 0;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v67.f64[1] = v18;
          *(_QWORD *)&v66.f64[0] = v42;
          outlined init with take of Any(&v66, v73);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v69 = (_QWORD *)*a1;
          *a1 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73, v18, isUniquelyReferenced_nonNull_native);
          *a1 = (uint64_t)v69;
          swift_bridgeObjectRelease();
          v53 = v58;
          v52 = v59;
        }
        else
        {
          v47 = v70[0];
          if (*(_QWORD *)(v29 + 16) && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v49 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v29 + 56) + 32 * v48, (uint64_t)v73);
            outlined init with take of Any(v73, &v66);
            outlined init with take of Any(&v66, v73);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v50 = v69;
          }
          else
          {
            v50 = (_QWORD *)MEMORY[0x24BEE4AF8];
            v69 = (_QWORD *)MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v50);
            v50 = (_QWORD *)result;
          }
          if (v19 >= v50[2])
            goto LABEL_54;
          v50[v21] = v47;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v67.f64[1] = v18;
          *(_QWORD *)&v66.f64[0] = v50;
          outlined init with take of Any(&v66, v73);
          v54 = swift_isUniquelyReferenced_nonNull_native();
          v69 = (_QWORD *)*a1;
          *a1 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73, v18, v54);
          *a1 = (uint64_t)v69;
          swift_bridgeObjectRelease();
          v52 = v61;
          v53 = v63;
          v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        v64 = vaddq_f64(v64, v52);
        v65 = vaddq_f64(v65, v53);
        if (v57 == v19)
        {
          *((_BYTE *)a1 + 17) = v72;
          if ((v39 & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v15 = 1;
            a3 = v55;
            v16 = v61;
            v14 = v63;
            goto LABEL_49;
          }
          result = swift_bridgeObjectRelease();
          v15 = 0;
          v16 = v64;
          v14 = v65;
          goto LABEL_48;
        }
        result = swift_bridgeObjectRelease();
        v10 = v56;
      }
      else
      {
        v43 = *a1;
        if (*(_QWORD *)(*a1 + 16) && (v44 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v45 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v43 + 56) + 32 * v44, (uint64_t)v73);
          outlined init with take of Any(v73, &v66);
          outlined init with take of Any(&v66, v73);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v46 = (_QWORD *)v70[0];
        }
        else
        {
          v70[0] = v22;
          swift_bridgeObjectRetain();
          v46 = v22;
        }
        result = swift_bridgeObjectRelease();
        if (v19 >= v46[2])
          goto LABEL_52;
        v64 = *(float64x2_t *)&v46[v21 - 2];
        v65 = *(float64x2_t *)&v46[v21 - 4];
        result = swift_bridgeObjectRelease();
      }
      ++v19;
      v21 += 5;
      v20 += 2;
      if (v10 == v19)
      {
        v14 = 0uLL;
        v15 = 1;
        v16 = 0uLL;
LABEL_48:
        a3 = v55;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  type metadata accessor for AnimationBox<DefaultCombiningAnimation>(0);
  v6 = swift_dynamicCastClass();
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1, (_QWORD *)v7);
    v9 = *(_QWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 24);
    if (v9 >= v8 >> 1)
      v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, (_QWORD *)v7);
    *(_QWORD *)(v7 + 16) = v9 + 1;
    v10 = v7 + 16 * v9;
    *(_QWORD *)(v10 + 32) = a2;
    *(double *)(v10 + 40) = a3;
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>();
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v7 + 32) = a1;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = a2;
    *(double *)(v7 + 56) = a3;
  }
  return v7;
}

void type metadata accessor for AnimationBox<DefaultCombiningAnimation>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>)
  {
    v2 = lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation();
    v4 = type metadata accessor for AnimationBox(a1, (uint64_t)&type metadata for DefaultCombiningAnimation, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>);
  }
}

uint64_t type metadata accessor for CombinedAnimationState.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for CombinedAnimationState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CombinedAnimationState);
}

uint64_t type metadata completion function for CombinedAnimationState.Entry()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CombinedAnimationState.Entry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235066368 + 4 * byte_2352C1B80[v10]))();
  }
}

void storeEnumTagSinglePayload for CombinedAnimationState.Entry(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2350664E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23506656CLL);
}

void sub_2350664F0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2350664F8);
  JUMPOUT(0x23506656CLL);
}

void sub_235066540()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23506656CLL);
}

void sub_235066548()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23506656CLL);
}

uint64_t sub_235066550(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x23506655CLL);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x23506656CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

ValueMetadata *type metadata accessor for DefaultCombiningAnimation.Entry()
{
  return &type metadata for DefaultCombiningAnimation.Entry;
}

ValueMetadata *type metadata accessor for DefaultCombiningAnimation()
{
  return &type metadata for DefaultCombiningAnimation;
}

unint64_t lazy protocol witness table accessor for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultCombiningAnimation.Entry, &type metadata for DefaultCombiningAnimation.Entry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DefaultCombiningAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for CombinedAnimationState<Double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for CombinedAnimationState<Double>)
  {
    v4 = type metadata accessor for CombinedAnimationState(0, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<Double>);
  }
}

BOOL specialized static Comparable.<= infix(_:_:)(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = *a1;
  v3 = a2[1] - *a2;
  v4 = -*a2;
  if (v3 != INFINITY)
    v4 = 0.0;
  v5 = a1[1] - v2;
  v6 = -v2;
  if (v5 != INFINITY)
    v6 = 0.0;
  if (v3 == v5)
    return v4 >= v6;
  else
    return v3 >= v5;
}

BOOL specialized static Comparable.>= infix(_:_:)(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = *a2;
  v3 = a1[1] - *a1;
  v4 = -*a1;
  if (v3 != INFINITY)
    v4 = 0.0;
  v5 = a2[1] - v2;
  v6 = -v2;
  if (v5 != INFINITY)
    v6 = 0.0;
  if (v3 == v5)
    return v4 >= v6;
  else
    return v3 >= v5;
}

BOOL specialized static Comparable.> infix(_:_:)(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = *a1;
  v3 = a2[1] - *a2;
  v4 = -*a2;
  if (v3 != INFINITY)
    v4 = 0.0;
  v5 = a1[1] - v2;
  v6 = -v2;
  if (v5 != INFINITY)
    v6 = 0.0;
  if (v3 == v5)
    return v4 < v6;
  else
    return v3 < v5;
}

void _LayoutTraits.Dimension.init(min:ideal:max:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  _LayoutTraits.Dimension._checkInvariant()();
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

void _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

BOOL static _LayoutTraits.FlexibilityEstimate.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

double _LayoutTraits.Dimension.min.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void _LayoutTraits.Dimension.min.setter(double a1)
{
  double *v1;

  *v1 = a1;
  _LayoutTraits.Dimension._checkInvariant()();
}

void _LayoutTraits.Dimension._checkInvariant()()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL;
  if ((*(uint64_t *)v0 <= -1 || (unint64_t)(v4 - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)v0 - 1) >= 0xFFFFFFFFFFFFFLL
    && v4 != 0
    || v2 >= INFINITY)
  {
LABEL_22:
    v10 = v3;
    v11 = v1;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    if (v11 == v10)
    {
      v12 = Double.description.getter();
      v14 = v13;
    }
    else
    {
      v21 = Double.description.getter();
      v22 = v15;
      v16._countAndFlagsBits = 3026478;
      v16._object = (void *)0xE300000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 3026478;
      v18._object = (void *)0xE300000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v12 = v21;
      v14 = v22;
    }
    v20 = v14;
    String.append(_:)(*(Swift::String *)&v12);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v1 > v3)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v1 > v2 || v2 > v3)
    goto LABEL_22;
}

uint64_t (*_LayoutTraits.Dimension.min.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return _LayoutTraits.Dimension.min.modify;
}

double _LayoutTraits.Dimension.ideal.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void _LayoutTraits.Dimension.ideal.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
  _LayoutTraits.Dimension._checkInvariant()();
}

uint64_t (*_LayoutTraits.Dimension.ideal.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return _LayoutTraits.Dimension.min.modify;
}

void _LayoutTraits.Dimension.min.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    _LayoutTraits.Dimension._checkInvariant()();
}

double _LayoutTraits.Dimension.max.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void _LayoutTraits.Dimension.max.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
  _LayoutTraits.Dimension._checkInvariant()();
}

void (*_LayoutTraits.Dimension.max.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return _LayoutTraits.Dimension.min.modify;
}

void static _LayoutTraits.Dimension.fixed(_:)(double *a1@<X8>, double a2@<D0>)
{
  _LayoutTraits.Dimension._checkInvariant()();
  *a1 = a2;
  a1[1] = a2;
  a1[2] = a2;
}

BOOL static _LayoutTraits.Dimension.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

double _LayoutTraits.width.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

double _LayoutTraits.width.setter(uint64_t a1)
{
  uint64_t v1;
  double result;

  result = *(double *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(double *)(v1 + 16) = result;
  return result;
}

uint64_t (*_LayoutTraits.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _LayoutTraits.height.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(double *)(a1 + 16) = result;
  return result;
}

double _LayoutTraits.height.setter(uint64_t a1)
{
  uint64_t v1;
  double result;

  result = *(double *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*_LayoutTraits.height.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _LayoutTraits.init()(_QWORD *a1@<X8>)
{
  _LayoutTraits.Dimension._checkInvariant()();
  _LayoutTraits.Dimension._checkInvariant()();
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x7FF0000000000000;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0x7FF0000000000000;
}

__n128 _LayoutTraits.init(width:height:)@<Q0>(__int128 *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;

  v4 = *((_QWORD *)a1 + 2);
  v7 = *a2;
  v8 = *a1;
  v5 = a2[1].n128_u64[0];
  _LayoutTraits.Dimension._checkInvariant()();
  _LayoutTraits.Dimension._checkInvariant()();
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v4;
  result = v7;
  *(__n128 *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 40) = v5;
  return result;
}

double _LayoutTraits.subscript.getter@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double *v3;
  double result;
  int32x2_t v5;
  int64x2_t v6;

  v3 = (double *)(v2 + 16);
  if ((a1 & 1) != 0)
    v3 = (double *)(v2 + 40);
  result = *v3;
  v5 = vdup_n_s32((a1 & 1) == 0);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), *(int8x16_t *)v2, *(int8x16_t *)(v2 + 24));
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t *_LayoutTraits.subscript.setter(uint64_t *result, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *result;
  v3 = result[1];
  v5 = result[2];
  if ((a2 & 1) != 0)
  {
    v2[3] = v4;
    v2[4] = v3;
    v2[5] = v5;
  }
  else
  {
    *v2 = v4;
    v2[1] = v3;
    v2[2] = v5;
  }
  return result;
}

void (*_LayoutTraits.subscript.modify(int8x16_t **a1, __int8 a2))(void **a1)
{
  uint64_t v2;
  int8x16_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int32x2_t v8;
  int64x2_t v9;

  v5 = (int8x16_t *)malloc(0x28uLL);
  *a1 = v5;
  v5[1].i64[1] = v2;
  v5[2].i8[0] = a2;
  v6 = (uint64_t *)(v2 + 16);
  if ((a2 & 1) != 0)
    v6 = (uint64_t *)(v2 + 40);
  v7 = *v6;
  v8 = vdup_n_s32((a2 & 1) == 0);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *v5 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL)), *(int8x16_t *)v2, *(int8x16_t *)(v2 + 24));
  v5[1].i64[0] = v7;
  return _LayoutTraits.subscript.modify;
}

void _LayoutTraits.subscript.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = v1[3];
  v3 = v1[1];
  v4 = v1[2];
  v5 = (v1[4] & 1) == 0;
  v6 = 24;
  if ((v1[4] & 1) == 0)
    v6 = 0;
  v7 = 32;
  if ((v1[4] & 1) == 0)
    v7 = 8;
  *(_QWORD *)(v2 + v6) = *v1;
  if (v5)
    v8 = 16;
  else
    v8 = 40;
  *(_QWORD *)(v2 + v7) = v3;
  *(_QWORD *)(v2 + v8) = v4;
  free(v1);
}

void _LayoutTraits.init(width:height:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  _LayoutTraits.Dimension._checkInvariant()();
  _LayoutTraits.Dimension._checkInvariant()();
  _LayoutTraits.Dimension._checkInvariant()();
  _LayoutTraits.Dimension._checkInvariant()();
  *a1 = a2;
  a1[1] = a2;
  a1[2] = a2;
  a1[3] = a3;
  a1[4] = a3;
  a1[5] = a3;
}

uint64_t _LayoutTraits.description.getter()
{
  double *v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0[3];
  v2 = v0[5];
  if (*v0 == v0[2])
  {
    v3 = Double.description.getter();
    v5 = v4;
  }
  else
  {
    v24 = Double.description.getter();
    v26 = v6;
    v7._countAndFlagsBits = 3026478;
    v7._object = (void *)0xE300000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 3026478;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v3 = v24;
    v5 = v26;
  }
  v11 = v5;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  if (v1 == v2)
  {
    v13 = Double.description.getter();
    v15 = v14;
  }
  else
  {
    v25 = Double.description.getter();
    v27 = v16;
    v17._countAndFlagsBits = 3026478;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 3026478;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v13 = v25;
    v15 = v27;
  }
  v21 = v15;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 40;
}

uint64_t _LayoutTraits.Dimension.description.getter()
{
  double *v0;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;

  if (*v0 == v0[2])
    return Double.description.getter();
  v6 = Double.description.getter();
  v2._countAndFlagsBits = 3026478;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 3026478;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v6;
}

double _LayoutTraits.idealSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void key path setter for _LayoutTraits.idealSize : _LayoutTraits(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[2];
  _LayoutTraits.Dimension._checkInvariant()();
  *a2 = v5;
  a2[1] = v3;
  a2[2] = v6;
  v7 = a2[3];
  v8 = a2[5];
  _LayoutTraits.Dimension._checkInvariant()();
  a2[3] = v7;
  a2[4] = v4;
  a2[5] = v8;
}

void _LayoutTraits.idealSize.setter(double a1, double a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)v2;
  v6 = *((_QWORD *)v2 + 2);
  _LayoutTraits.Dimension._checkInvariant()();
  *(_QWORD *)v2 = v5;
  v2[1] = a1;
  *((_QWORD *)v2 + 2) = v6;
  v7 = *((_QWORD *)v2 + 3);
  v8 = *((_QWORD *)v2 + 5);
  _LayoutTraits.Dimension._checkInvariant()();
  *((_QWORD *)v2 + 3) = v7;
  v2[4] = a2;
  *((_QWORD *)v2 + 5) = v8;
}

void (*_LayoutTraits.idealSize.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = v1;
  v2 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return _LayoutTraits.idealSize.modify;
}

void _LayoutTraits.idealSize.modify(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (uint64_t *)a1[2];
  v3 = *a1;
  v2 = a1[1];
  v4 = *v1;
  v5 = v1[2];
  _LayoutTraits.Dimension._checkInvariant()();
  *v1 = v4;
  v1[1] = v3;
  v1[2] = v5;
  v6 = v1[3];
  v7 = v1[5];
  _LayoutTraits.Dimension._checkInvariant()();
  v1[3] = v6;
  v1[4] = v2;
  v1[5] = v7;
}

double _LayoutTraits.minSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void key path setter for _LayoutTraits.minSize : _LayoutTraits(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = a2[1];
  v6 = a2[2];
  _LayoutTraits.Dimension._checkInvariant()();
  *a2 = v3;
  a2[1] = v5;
  a2[2] = v6;
  v7 = a2[4];
  v8 = a2[5];
  _LayoutTraits.Dimension._checkInvariant()();
  a2[3] = v4;
  a2[4] = v7;
  a2[5] = v8;
}

void _LayoutTraits.minSize.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  _LayoutTraits.Dimension._checkInvariant()();
  *(double *)v2 = a1;
  *(_QWORD *)(v2 + 8) = v5;
  *(_QWORD *)(v2 + 16) = v6;
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  _LayoutTraits.Dimension._checkInvariant()();
  *(double *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = v7;
  *(_QWORD *)(v2 + 40) = v8;
}

void (*_LayoutTraits.minSize.modify(_QWORD *a1))(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;

  a1[2] = v1;
  v2 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  return _LayoutTraits.minSize.modify;
}

void _LayoutTraits.minSize.modify(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)a1[2];
  v3 = *a1;
  v2 = a1[1];
  v5 = v1[1];
  v4 = v1[2];
  _LayoutTraits.Dimension._checkInvariant()();
  *v1 = v3;
  v1[1] = v5;
  v1[2] = v4;
  v6 = v1[4];
  v7 = v1[5];
  _LayoutTraits.Dimension._checkInvariant()();
  v1[3] = v2;
  v1[4] = v6;
  v1[5] = v7;
}

double _LayoutTraits.maxSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void key path setter for _LayoutTraits.maxSize : _LayoutTraits(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  _LayoutTraits.Dimension._checkInvariant()();
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v3;
  v7 = a2[3];
  v8 = a2[4];
  _LayoutTraits.Dimension._checkInvariant()();
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v4;
}

void _LayoutTraits.maxSize.setter(double a1, double a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)v2;
  v6 = *((_QWORD *)v2 + 1);
  _LayoutTraits.Dimension._checkInvariant()();
  *(_QWORD *)v2 = v5;
  *((_QWORD *)v2 + 1) = v6;
  v2[2] = a1;
  v7 = *((_QWORD *)v2 + 3);
  v8 = *((_QWORD *)v2 + 4);
  _LayoutTraits.Dimension._checkInvariant()();
  *((_QWORD *)v2 + 3) = v7;
  *((_QWORD *)v2 + 4) = v8;
  v2[5] = a2;
}

void (*_LayoutTraits.maxSize.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = v1;
  v2 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return _LayoutTraits.maxSize.modify;
}

void _LayoutTraits.maxSize.modify(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (uint64_t *)a1[2];
  v3 = *a1;
  v2 = a1[1];
  v5 = *v1;
  v4 = v1[1];
  _LayoutTraits.Dimension._checkInvariant()();
  *v1 = v5;
  v1[1] = v4;
  v1[2] = v3;
  v6 = v1[3];
  v7 = v1[4];
  _LayoutTraits.Dimension._checkInvariant()();
  v1[3] = v6;
  v1[4] = v7;
  v1[5] = v2;
}

double *CGSize.clamped(to:)(double *result)
{
  double v1;
  double v2;

  v1 = result[2];
  if (*result > v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = result[3];
  if (v2 > result[5])
LABEL_5:
    __break(1u);
  return result;
}

BOOL specialized static _LayoutTraits.== infix(_:_:)(double *a1, double *a2)
{
  _BOOL4 v5;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v5 = a1[3] == a2[3];
  if (a1[4] != a2[4])
    v5 = 0;
  return a1[5] == a2[5] && v5;
}

BOOL specialized static _LayoutTraits.FlexibilityEstimate.< infix(_:_:)(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = *a2;
  v3 = a1[1] - *a1;
  v4 = -*a1;
  if (v3 != INFINITY)
    v4 = 0.0;
  v5 = a2[1] - v2;
  v6 = -v2;
  if (v5 != INFINITY)
    v6 = 0.0;
  if (v3 == v5)
    return v4 < v6;
  else
    return v3 < v5;
}

unint64_t lazy protocol witness table accessor for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate;
  if (!lazy protocol witness table cache variable for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _LayoutTraits.FlexibilityEstimate, &type metadata for _LayoutTraits.FlexibilityEstimate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate);
  }
  return result;
}

double sub_235067720@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_23506772C(_QWORD *a1, _QWORD *a2)
{
  double result;

  *a2 = *a1;
  _LayoutTraits.Dimension._checkInvariant()();
  return result;
}

double sub_235067768@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_235067774(_QWORD *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a2 + 8) = *a1;
  _LayoutTraits.Dimension._checkInvariant()();
  return result;
}

double sub_2350677B4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16);
  *a2 = result;
  return result;
}

double sub_2350677C0(_QWORD *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a2 + 16) = *a1;
  _LayoutTraits.Dimension._checkInvariant()();
  return result;
}

double sub_2350677FC@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  double *v3;
  double result;
  int32x2_t v5;
  int64x2_t v6;

  v3 = (double *)(a1 + 16);
  if (*a2)
    v3 = (double *)(a1 + 40);
  result = *v3;
  v5 = vdup_n_s32(*a2);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  *(int8x16_t *)a3 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), *(int8x16_t *)(a1 + 24), *(int8x16_t *)a1);
  *(double *)(a3 + 16) = result;
  return result;
}

uint64_t *sub_23506783C(uint64_t *result, _QWORD *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *result;
  v3 = result[1];
  v5 = result[2];
  if ((*a3 & 1) != 0)
  {
    a2[3] = v4;
    a2[4] = v3;
    a2[5] = v5;
  }
  else
  {
    *a2 = v4;
    a2[1] = v3;
    a2[2] = v5;
  }
  return result;
}

uint64_t sub_23506786C()
{
  return 0;
}

double sub_23506787C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v3;

  result = *(double *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

double sub_235067890@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;
  uint64_t v3;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 24);
  *a2 = *(_QWORD *)a1;
  a2[1] = v3;
  return result;
}

double sub_2350678A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v3;

  result = *(double *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _LayoutTraits()
{
  return &type metadata for _LayoutTraits;
}

ValueMetadata *type metadata accessor for _LayoutTraits.FlexibilityEstimate()
{
  return &type metadata for _LayoutTraits.FlexibilityEstimate;
}

ValueMetadata *type metadata accessor for _LayoutTraits.Dimension()
{
  return &type metadata for _LayoutTraits.Dimension;
}

uint64_t static GestureUtilities.requestUpdate(by:useGestureGraph:)(double *a1, char a2)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v6;
  double v7;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = specialized static GestureGraph.current.getter();
    v4 = *(double *)(v3 + 264);
    if (v2 < v4)
      v4 = v2;
    *(double *)(v3 + 264) = v4;
    return swift_release();
  }
  else
  {
    v6 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    v7 = *(double *)(v6 + 400);
    if (v2 < v7)
      v7 = v2;
    *(double *)(v6 + 400) = v7;
    return swift_release();
  }
}

ValueMetadata *type metadata accessor for GestureUtilities()
{
  return &type metadata for GestureUtilities;
}

uint64_t static ViewModifier<>._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v20;
  int v21;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  int v37;

  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 24);
  v14 = *(_DWORD *)(a2 + 28);
  v15 = *(_DWORD *)(a2 + 32);
  v16 = *(_DWORD *)(a2 + 36);
  v21 = *(_DWORD *)(a2 + 80);
  v37 = *a1;
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  v30 = v14;
  v31 = v15;
  v32 = v16;
  v20 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)&v33 = *(_QWORD *)(a2 + 40);
  v17 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v37, &v26, a5, a6);
  _GraphValue.init(_:)(v17, &v37);
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  v30 = v14;
  v31 = v15;
  v32 = v16;
  v18 = *(_OWORD *)(a2 + 56);
  v33 = v20;
  v34 = v18;
  v35 = *(_QWORD *)(a2 + 72);
  v36 = v21;
  return static ViewModifier.makeView(modifier:inputs:body:)(&v37, &v26, a3, a4, a5, a7, a8);
}

uint64_t static ViewModifier<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39[3];

  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v14 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 48);
  v20 = *(_DWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a2 + 72);
  v18 = *(_BYTE *)(a2 + 80);
  v39[0] = *a1;
  v26 = v8;
  v27 = v9;
  v28 = v10;
  v29 = v12;
  v30 = v11;
  v31 = v13;
  v32 = v14;
  v33 = v15;
  v16 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)v39, &v26, a5, a6);
  _GraphValue.init(_:)(v16, v39);
  v26 = v8;
  v27 = v9;
  v28 = v10;
  v29 = v12;
  v30 = v11;
  v31 = v13;
  v32 = v14;
  v33 = v15;
  v34 = v22;
  v35 = v21;
  v36 = v20;
  v37 = v19;
  v38 = v18;
  return static ViewModifier.makeViewList(modifier:inputs:body:)(v39, &v26, a3, a4, a5, a7);
}

void static EmptyView._makeView(view:inputs:)(uint64_t a1@<X8>)
{
  int v1;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  v1 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v1;
}

uint64_t static EmptyView._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  _BYTE v29[24];
  ValueMetadata *v30;
  _UNKNOWN **v31;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 32);
  v7 = *(_DWORD *)(a1 + 36);
  v10 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  if ((v11 & 0x10) != 0)
  {
    v16 = *(_QWORD *)a1;
    v17 = v3;
    v18 = v4;
    v19 = v5;
    v20 = v6;
    v21 = v8;
    v22 = v7;
    v23 = v10;
    v24 = v9;
    v25 = v11;
    v26 = v12;
    v27 = v13;
    v28 = v14;
    return static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v16, a2);
  }
  else
  {
    v30 = &type metadata for EmptyViewListElements;
    v31 = &protocol witness table for EmptyViewListElements;
    v16 = v2;
    v17 = v3;
    v18 = v4;
    v19 = v5;
    v20 = v6;
    v21 = v8;
    v22 = v7;
    v23 = v10;
    v24 = v9;
    v25 = v11;
    v26 = v12;
    v27 = v13;
    v28 = v14;
    static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v29, &v16, 0, a2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
}

uint64_t static EmptyView._viewListCount(inputs:)(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 4) & 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance EmptyView(uint64_t a1@<X8>)
{
  int v1;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  v1 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v1;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EmptyView(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 4) & 1;
}

ValueMetadata *type metadata accessor for EmptyView()
{
  return &type metadata for EmptyView;
}

__n128 _ViewList_Backing.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  return result;
}

void static _VariadicView_Children._makeViewList(view:inputs:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  int v5;
  _OWORD v6[5];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  v5 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v6, a2);
}

void specialized static ForEach<>._makeViewList(view:inputs:)(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  __int128 v7;
  __int128 v8;
  void (*v9)(_OWORD *__return_ptr, unint64_t *, __int128 *, ValueMetadata *, _QWORD, ValueMetadata *, unint64_t, _QWORD, _UNKNOWN **);
  unint64_t v10;
  id v11;
  _DWORD *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  id v23;
  void *v24;
  id v25;
  uint64_t Context;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  char v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v6 = static CoreGlue.shared;
  LODWORD(v30) = a1;
  v7 = *(_OWORD *)(a2 + 48);
  v36 = *(_OWORD *)(a2 + 32);
  v37 = v7;
  v38 = *(_OWORD *)(a2 + 64);
  v39 = *(_BYTE *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 16);
  v34 = *(_OWORD *)a2;
  v35 = v8;
  v9 = *(void (**)(_OWORD *__return_ptr, unint64_t *, __int128 *, ValueMetadata *, _QWORD, ValueMetadata *, unint64_t, _QWORD, _UNKNOWN **))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xD0);
  v10 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
  v11 = v6;
  v9(v40, &v30, &v34, &type metadata for _VariadicView_Children, MEMORY[0x24BEE23D0], &type metadata for _VariadicView_Children.Element, v10, MEMORY[0x24BEE23D8], &protocol witness table for _VariadicView_Children.Element);

  if (BYTE8(v41) != 0xFF)
  {
    v19 = v42;
    *(_OWORD *)(a3 + 32) = v41;
    *(_OWORD *)(a3 + 48) = v19;
    *(_BYTE *)(a3 + 64) = v43;
    v20 = v40[1];
    *(_OWORD *)a3 = v40[0];
    *(_OWORD *)(a3 + 16) = v20;
    return;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v40, &lazy cache variable for type metadata for _ViewListOutputs?, (uint64_t)&type metadata for _ViewListOutputs);
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState);
  swift_allocObject();
  v12 = specialized ForEachState.init(inputs:)(a2);
  LODWORD(v34) = a1;
  *((_QWORD *)&v34 + 1) = v12;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info);
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info.Init);
  lazy protocol witness table accessor for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init and conformance ForEachState<A, B, C>.Info.Init();
  v13 = Attribute.init<A>(body:value:flags:update:)();
  v12[28] = v13;
  *((_BYTE *)v12 + 116) = 0;
  v14 = *(_OWORD *)(a2 + 16);
  v34 = *(_OWORD *)a2;
  v35 = v14;
  v36 = *(_OWORD *)(a2 + 32);
  v15 = v34;
  v44[0] = v34;
  outlined retain of _GraphInputs((uint64_t)&v34);
  outlined retain of ViewTransform((uint64_t)v44);
  v16 = specialized find<A>(_:key:)(v15);
  if (v16)
  {
    v17 = (uint64_t *)(v16 + 72);
    v18 = (int *)(v16 + 76);
  }
  else
  {
    v17 = &static ForEachEvictionInput.defaultValue;
    v18 = (int *)&static ForEachEvictionInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v21 = *v18;
  v22 = *(_DWORD *)v17;
  outlined release of ViewTransform((uint64_t)v44);
  outlined release of _GraphInputs((uint64_t)&v34);
  if ((static WeakAttribute.== infix(_:_:)() & 1) != 0)
  {
    if (one-time initialization token for evictByDefault != -1)
      swift_once();
    if (static ForEachEvictionInput.evictByDefault != 1)
      goto LABEL_19;
  }
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v23 = (id)AGSubgraphGetCurrent();
    if (!v23)
      goto LABEL_21;
    v24 = v23;
    v25 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v25 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v27 = Context;
    swift_retain();

    swift_beginAccess();
    v28 = *(_DWORD *)(v27 + 64);
    swift_release();
    v30 = (unint64_t)v12;
    v31 = v22;
    v32 = v21;
    v33 = v28;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Evictor);
    lazy protocol witness table accessor for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor and conformance ForEachState<A, B, C>.Evictor();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphSetFlags();
LABEL_19:
    v30 = v13;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachList.Init);
    lazy protocol witness table accessor for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init();
    v29 = Attribute.init<A>(body:value:flags:update:)();
    v12[30] = v29;
    *((_BYTE *)v12 + 124) = 0;
    swift_release();
    *(_DWORD *)a3 = v29;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 64) = 1;
    return;
  }
  __break(1u);
LABEL_21:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  void *v6;
  __int128 v7;
  __int128 v8;
  void (*v9)(_OWORD *__return_ptr, unint64_t *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _DWORD *v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int *v24;
  __int128 v25;
  __int128 v26;
  int v27;
  int v28;
  id v29;
  void *v30;
  id v31;
  uint64_t Context;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  char v49;
  _QWORD v50[3];

  v50[1] = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v6 = static CoreGlue.shared;
  LODWORD(v36) = a1;
  v7 = *(_OWORD *)(a2 + 48);
  v42 = *(_OWORD *)(a2 + 32);
  v43 = v7;
  v44 = *(_OWORD *)(a2 + 64);
  v45 = *(_BYTE *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 16);
  v40 = *(_OWORD *)a2;
  v41 = v8;
  v9 = *(void (**)(_OWORD *__return_ptr, unint64_t *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xD0);
  v10 = MEMORY[0x24BEE1768];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v12 = v11;
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(0);
  v14 = v13;
  v15 = _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
  v16 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _OffsetEffect);
  v17 = v6;
  v9(v46, &v36, &v40, v12, v10, v14, v15, MEMORY[0x24BEE1778], v16);

  if (BYTE8(v47) != 0xFF)
  {
    v25 = v48;
    *(_OWORD *)(a3 + 32) = v47;
    *(_OWORD *)(a3 + 48) = v25;
    *(_BYTE *)(a3 + 64) = v49;
    v26 = v46[1];
    *(_OWORD *)a3 = v46[0];
    *(_OWORD *)(a3 + 16) = v26;
    return;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v46, &lazy cache variable for type metadata for _ViewListOutputs?, (uint64_t)&type metadata for _ViewListOutputs);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState);
  swift_allocObject();
  v18 = specialized ForEachState.init(inputs:)(a2);
  LODWORD(v40) = a1;
  *((_QWORD *)&v40 + 1) = v18;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info.Init);
  lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info.Init and conformance ForEachState<A, B, C>.Info.Init, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info.Init, (uint64_t)&protocol conformance descriptor for ForEachState<A, B, C>.Info.Init);
  v19 = Attribute.init<A>(body:value:flags:update:)();
  v18[28] = v19;
  *((_BYTE *)v18 + 116) = 0;
  v20 = *(_OWORD *)(a2 + 16);
  v40 = *(_OWORD *)a2;
  v41 = v20;
  v42 = *(_OWORD *)(a2 + 32);
  v21 = v40;
  v50[0] = v40;
  outlined retain of _GraphInputs((uint64_t)&v40);
  outlined retain of ViewTransform((uint64_t)v50);
  v22 = specialized find<A>(_:key:)(v21);
  if (v22)
  {
    v23 = (uint64_t *)(v22 + 72);
    v24 = (int *)(v22 + 76);
  }
  else
  {
    v23 = &static ForEachEvictionInput.defaultValue;
    v24 = (int *)&static ForEachEvictionInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v27 = *v24;
  v28 = *(_DWORD *)v23;
  outlined release of ViewTransform((uint64_t)v50);
  outlined release of _GraphInputs((uint64_t)&v40);
  if ((static WeakAttribute.== infix(_:_:)() & 1) != 0)
  {
    if (one-time initialization token for evictByDefault != -1)
      swift_once();
    if (static ForEachEvictionInput.evictByDefault != 1)
      goto LABEL_19;
  }
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v29 = (id)AGSubgraphGetCurrent();
    if (!v29)
      goto LABEL_21;
    v30 = v29;
    v31 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v31 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v33 = Context;
    swift_retain();

    swift_beginAccess();
    v34 = *(_DWORD *)(v33 + 64);
    swift_release();
    v36 = (unint64_t)v18;
    v37 = v28;
    v38 = v27;
    v39 = v34;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Evictor, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Evictor);
    lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Evictor and conformance ForEachState<A, B, C>.Evictor, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Evictor, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Evictor, (uint64_t)&protocol conformance descriptor for ForEachState<A, B, C>.Evictor);
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphSetFlags();
LABEL_19:
    v36 = v19;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachList.Init);
    lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init, &lazy cache variable for type metadata for ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachList.Init, (uint64_t)&protocol conformance descriptor for ForEachList<A, B, C>.Init);
    v35 = Attribute.init<A>(body:value:flags:update:)();
    v18[30] = v35;
    *((_BYTE *)v18 + 124) = 0;
    swift_release();
    *(_DWORD *)a3 = v35;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 64) = 1;
    return;
  }
  __break(1u);
LABEL_21:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static _VariadicView_Children._viewListCount(inputs:)()
{
  return 0;
}

uint64_t closure #1 in _VariadicView_Children.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _VariadicView_Children.Element(a1, a2);
}

uint64_t specialized ForEach<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[3];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[56];

  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v20);
  lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
  lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element();
  KeyPath = swift_getKeyPath();
  *(_QWORD *)&v19 = 0;
  outlined init with copy of _VariadicView_Children((uint64_t)v20, (uint64_t)v16);
  *(_QWORD *)&v18 = a3;
  *((_QWORD *)&v18 + 1) = KeyPath;
  *((_QWORD *)&v17 + 1) = a2;
  v9 = one-time initialization token for v6;
  swift_retain();
  if (v9 != -1)
    swift_once();
  v10 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v10)
      goto LABEL_7;
LABEL_9:
    v11 = 0;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v11 = AGMakeUniqueID();
LABEL_10:
  swift_release();
  outlined destroy of _VariadicView_Children((uint64_t)v20);
  *((_QWORD *)&v19 + 1) = v11;
  v12 = v17;
  a4[2] = v16[2];
  a4[3] = v12;
  v13 = v16[1];
  *a4 = v16[0];
  a4[1] = v13;
  v14 = v19;
  a4[4] = v18;
  a4[5] = v14;
  return outlined destroy of _VariadicView_Children(a1);
}

double protocol witness for static Rule.initialValue.getter in conformance _VariadicView_Children.Child@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _VariadicView_Children.Child@<X0>(_OWORD *a1@<X8>)
{
  uint64_t Value;
  _BYTE v4[56];

  Value = AGGraphGetValue();
  outlined init with copy of _VariadicView_Children(Value, (uint64_t)v4);
  return specialized ForEach<>.init(_:content:)((uint64_t)v4, (uint64_t)closure #1 in _VariadicView_Children.Child.value.getter, 0, a1);
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance _VariadicView_Children(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  int v5;
  _OWORD v6[5];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  v5 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v6, a2);
}

uint64_t _VariadicView_Children.Element.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _ViewList_View(v1, a1);
}

uint64_t _VariadicView_Children.Element.view.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of _ViewList_View(a1, v1);
}

uint64_t (*_VariadicView_Children.Element.view.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView_Children.Element.traits.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 88);
  return swift_bridgeObjectRetain();
}

uint64_t _VariadicView_Children.Element.traits.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 88) = v2;
  return result;
}

uint64_t (*_VariadicView_Children.Element.traits.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ViewList_View.viewID.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v1 = *(_DWORD *)(v0 + 52);
  v2 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v2 + 32);
    v4 = *(_QWORD *)(v0 + 72);
    if ((*(_BYTE *)(v2 + 52) & 1) != 0)
    {
      v5 = swift_retain();
      if (v4 != 1)
      {
        v1 = -1;
        goto LABEL_12;
      }
LABEL_11:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 96))(v12, v5);
      v6 = __swift_project_boxed_opaque_existential_1(v12, v12[3]);
      v7 = MEMORY[0x24BDAC7A8](v6);
      (*(void (**)(char *, double))(v9 + 16))((char *)&v12[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      swift_retain();
      AnyHashable.init<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      swift_release_n();
      return;
    }
    v5 = swift_retain();
    if (v4 == 1 && v1 < 0)
    {
      if (!v3)
      {
LABEL_18:
        __break(1u);
        return;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v3 = 0;
    if (*(_QWORD *)(v0 + 72) == 1 && v1 < 0)
      goto LABEL_18;
  }
LABEL_12:
  v10 = *(_QWORD *)(v0 + 64);
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12[0] = __PAIR64__(v1, v10);
  v12[1] = v3;
  lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  AnyHashable.init<A>(_:)();
}

uint64_t _VariadicView_Children.Element.id<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  if (*(_QWORD *)(*(_QWORD *)(v3 + 56) + 16))
    v7 = swift_retain();
  else
    v7 = 0;
  v10[5] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10[2] = a1;
  v10[3] = a2;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyHashable2?, (uint64_t)&type metadata for AnyHashable2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _VariadicView_Children.Element.id<A>(as:), (uint64_t)v10, MEMORY[0x24BEE4078], a1, v8, a3);
  return swift_release();
}

uint64_t _VariadicView_Children.Element.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return ViewTraitCollection.subscript.getter(a1, a2, a3);
}

uint64_t _VariadicView_Children.Element.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _VariadicView_Children.Element.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*_VariadicView_Children.Element.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  ViewTraitCollection.subscript.getter(a3, a4, (uint64_t)v13);
  return _VariadicView_Children.Element.subscript.modify;
}

void _VariadicView_Children.Element.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized _VariadicView_Children.Element.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized _VariadicView_Children.Element.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t static _VariadicView_Children.Element._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int OffsetAttribute2;

  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 80);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a1 + 40);
  v13 = *(_OWORD *)(a1 + 24);
  v14 = v8;
  v15 = *(_OWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = v7;
  return static _ViewList_View._makeView(view:inputs:)(&OffsetAttribute2, &v10, a2);
}

uint64_t static _ViewList_View._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[64];
  int v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v29 = *a1;
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v27 = *((_DWORD *)a2 + 7);
  v28 = *((_DWORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 9);
  v7 = a2[5];
  v8 = a2[6];
  v9 = *((_DWORD *)a2 + 15);
  v25 = *((_DWORD *)a2 + 14);
  v26 = *((_DWORD *)a2 + 8);
  v10 = *((_DWORD *)a2 + 16);
  v11 = *((_DWORD *)a2 + 17);
  v23 = *((_DWORD *)a2 + 19);
  v24 = *((_DWORD *)a2 + 18);
  v22 = *((_DWORD *)a2 + 20);
  v32 = *a2;
  v3 = v32;
  LODWORD(v33) = v4;
  v34 = v5;
  v35 = __PAIR64__(v27, v28);
  v36 = v26;
  v37 = v6;
  v38 = v7;
  v39 = v8;
  v40 = __PAIR64__(v9, v25);
  v41 = v10;
  v42 = v11;
  v43 = v24;
  v44 = v23;
  v45 = v22;
  _ViewInputs.makeIndirectOutputs()((uint64_t)v30);
  v12 = *(_QWORD *)&v30[0];
  v13 = DWORD2(v30[0]);
  v14 = HIDWORD(v30[0]);
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  LODWORD(v32) = v29;
  v33 = v3;
  LODWORD(v34) = v4;
  v35 = v5;
  v36 = v28;
  v37 = v27;
  v38 = __PAIR64__(v6, v26);
  v15 = v14;
  v39 = v7;
  v40 = v8;
  v41 = v25;
  v42 = v9;
  v43 = v10;
  v44 = v11;
  v45 = v24;
  v46 = v23;
  v47 = v22;
  v48 = v12;
  v16 = v13;
  v49 = v13;
  v50 = v14;
  v17 = (id)AGSubgraphGetCurrent();
  if (!v17)
    __break(1u);
  v51 = v17;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  outlined init with take of _ViewList_Elements?((uint64_t)v30, (uint64_t)v55);
  memset(&v55[40], 0, 24);
  v56 = 0;
  v57 = 1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type PlaceholderInfo and conformance PlaceholderInfo();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  result = outlined destroy of PlaceholderInfo((uint64_t)&v32);
  v19 = *(_QWORD *)(v12 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    v20 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v20 += 24;
      --v19;
    }
    while (v19);
    result = swift_bridgeObjectRelease();
  }
  if (v15 != *MEMORY[0x24BE096C0])
    result = AGGraphSetIndirectDependency();
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 8) = v16;
  *(_DWORD *)(a3 + 12) = v15;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children.Element@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int OffsetAttribute2;

  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 80);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a1 + 40);
  v13 = *(_OWORD *)(a1 + 24);
  v14 = v8;
  v15 = *(_OWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = v7;
  return static _ViewList_View._makeView(view:inputs:)(&OffsetAttribute2, &v10, a2);
}

uint64_t _VariadicView_Children.startIndex.getter()
{
  return 0;
}

uint64_t _VariadicView_Children.endIndex.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  v4 = ViewList.count.getter(v2, v3);
  static Update.end()();
  _MovableLockUnlock(v1);
  return v4;
}

uint64_t _VariadicView_Children.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[7];

  memset(v32, 0, 96);
  if (one-time initialization token for _lock != -1)
    swift_once();
  v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v30 = *(_QWORD *)(v2 + 48);
  v31 = a1;
  outlined init with copy of AnyTrackedValue(v2, (uint64_t)&v23);
  v22 = a1;
  v6 = *((_QWORD *)&v24 + 1);
  v7 = v25;
  v8 = __swift_project_boxed_opaque_existential_1(&v23, *((uint64_t *)&v24 + 1));
  MEMORY[0x24BDAC7A8](v8);
  v21[2] = v2;
  v21[3] = v32;
  swift_bridgeObjectRetain();
  v29 = 1;
  ViewList.applySublists(from:list:transform:to:)((uint64_t)&v31, 0x100000000, (uint64_t)&v30, (uint64_t)partial apply for closure #1 in closure #1 in _VariadicView_Children.subscript.getter, (uint64_t)v21, v6, v7);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  static Update.end()();
  _MovableLockUnlock(v5);
  outlined init with copy of _VariadicView_Children.Element?((uint64_t)v32, (uint64_t)&v23);
  if (*((_QWORD *)&v24 + 1))
  {
    v9 = v26;
    *(_OWORD *)(a2 + 32) = v25;
    *(_OWORD *)(a2 + 48) = v9;
    v10 = v28;
    *(_OWORD *)(a2 + 64) = v27;
    *(_OWORD *)(a2 + 80) = v10;
    v11 = v24;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v11;
    return outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v32, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
  }
  v12 = v22;
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v23, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
  static os_log_type_t.fault.getter();
  if (one-time initialization token for internalErrorsLog != -1)
    swift_once();
  swift_beginAccess();
  v13 = (void *)static Log.internalErrorsLog;
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v14 = swift_allocObject();
  v15 = MEMORY[0x24BEE1768];
  *(_OWORD *)(v14 + 16) = xmmword_23527E860;
  v16 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  v17 = v12;
  *(_QWORD *)(v14 + 32) = v12;
  v18 = v13;
  os_log(_:dso:log:_:_:)();

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 24) = &type metadata for EmptyViewListElements;
  *(_QWORD *)(a2 + 32) = &protocol witness table for EmptyViewListElements;
  *(_QWORD *)(a2 + 40) = 0;
  if (v17 > 0x7FFFFFFF)
  {
    __break(1u);
  }
  else if (v17 >= (uint64_t)0xFFFFFFFF80000000)
  {
    v20 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 52) = ~(_DWORD)v17;
    *(_QWORD *)(a2 + 56) = v20;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = v20;
    return outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v32, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
  }
  __break(1u);
  return result;
}

BOOL closure #1 in closure #1 in _VariadicView_Children.subscript.getter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v20[40];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v4 = *a1;
  v3 = a1[1];
  if (*a1 < v3)
  {
    outlined init with copy of AnyTrackedValue((uint64_t)(a1 + 4), (uint64_t)v27);
    v8 = a1[3];
    v9 = *(void **)(a2 + 40);
    v21 = 0;
    v26 = 0;
    v10 = a1[2];
    outlined init with copy of AnyTrackedValue((uint64_t)v27, (uint64_t)v20);
    v11 = v28;
    v12 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 32);
    swift_bridgeObjectRetain();
    v14 = v9;
    v21 = v13(v11, v12);
    v22 = v10;
    v23 = v8;
    v24 = v4;
    v25 = v3;
    v26 = v14;
    outlined init with copy of _ViewList_View((uint64_t)v20, (uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    outlined destroy of _ViewList_View((uint64_t)v20);
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(a3, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
    v15 = a1[9];
    v16 = v30[3];
    *(_OWORD *)(a3 + 32) = v30[2];
    *(_OWORD *)(a3 + 48) = v16;
    *(_OWORD *)(a3 + 64) = v30[4];
    v17 = v31;
    v18 = v30[1];
    *(_OWORD *)a3 = v30[0];
    *(_OWORD *)(a3 + 16) = v18;
    *(_QWORD *)(a3 + 80) = v17;
    *(_QWORD *)(a3 + 88) = v15;
    swift_bridgeObjectRetain();
  }
  return v4 >= v3;
}

uint64_t _ViewList_View.init(elements:id:index:count:contentSubgraph:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[40];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = a2[1];
  v17 = 0;
  v22 = 0;
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v16);
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  v18 = *a2;
  v19 = v12;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  outlined init with copy of _ViewList_View((uint64_t)v16, a6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of _ViewList_View((uint64_t)v16);
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance _VariadicView_Children(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _VariadicView_Children@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1)
LABEL_7:
    swift_once();
  v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v6 = v2[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  result = _MovableLockUnlock(v5);
  if (v4 < 0 || v4 >= v8)
    __break(1u);
  else
    *a2 = v4;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance _VariadicView_Children(uint64_t *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  v1 = a1;
  if (one-time initialization token for _lock != -1)
LABEL_7:
    swift_once();
  v4 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v7 = ViewList.count.getter(v5, v6);
  static Update.end()();
  result = _MovableLockUnlock(v4);
  if (v3 < 0 || v3 >= v7)
    __break(1u);
  else
    *v1 = v3;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v3 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v6 = ViewList.count.getter(v4, v5);
  static Update.end()();
  result = _MovableLockUnlock(v3);
  *a1 = v6;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _VariadicView_Children(_QWORD *a1, uint64_t *a2))(uint64_t *a1)
{
  void *v4;

  v4 = malloc(0x60uLL);
  *a1 = v4;
  _VariadicView_Children.subscript.getter(*a2, (uint64_t)v4);
  return protocol witness for Collection.subscript.read in conformance _VariadicView_Children;
}

void protocol witness for Collection.subscript.read in conformance _VariadicView_Children(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of _VariadicView_Children.Element(*a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = v2;
  v5 = *a1;
  v6 = a1[1];
  if (one-time initialization token for _lock != -1)
    swift_once();
  v7 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v8 = v2[3];
  v9 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v10 = ViewList.count.getter(v8, v9);
  static Update.end()();
  result = _MovableLockUnlock(v7);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v10 >= v6)
  {
    result = outlined init with copy of _VariadicView_Children((uint64_t)v3, (uint64_t)(a2 + 2));
    *a2 = v5;
    a2[1] = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _VariadicView_Children@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v3 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v6 = ViewList.count.getter(v4, v5);
  static Update.end()();
  result = _MovableLockUnlock(v3);
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v6;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _VariadicView_Children()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  v4 = ViewList.count.getter(v2, v3);
  static Update.end()();
  _MovableLockUnlock(v1);
  return v4 == 0;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _VariadicView_Children@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a1 + a2;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1)
LABEL_7:
    swift_once();
  v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  v9 = ViewList.count.getter(v7, v8);
  static Update.end()();
  result = _MovableLockUnlock(v6);
  if (v5 < 0 || v9 < v5)
    __break(1u);
  else
    *a3 = v5;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _VariadicView_Children(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  v4 = *a1;
  v5 = *a2;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v7 = v2[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = ViewList.count.getter(v7, v8);
  static Update.end()();
  result = _MovableLockUnlock(v6);
  if (v4 < 0 || v9 < v4)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v6);
    specialized static Update.begin()();
    v11 = v3[3];
    v12 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v11);
    v13 = ViewList.count.getter(v11, v12);
    static Update.end()();
    result = _MovableLockUnlock(v6);
    if ((v5 & 0x8000000000000000) == 0 && v13 >= v5)
      return v5 - v4;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v6 = v2[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  result = _MovableLockUnlock(v5);
  if (v4 < 0 || v4 >= v8)
    __break(1u);
  else
    *a2 = v4 + 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance _VariadicView_Children(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v4 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v5 = v1[3];
  v6 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v5);
  v7 = ViewList.count.getter(v5, v6);
  static Update.end()();
  result = _MovableLockUnlock(v4);
  if (v3 < 0 || v3 >= v7)
    __break(1u);
  else
    *a1 = v3 + 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _VariadicView_Children@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _VariadicView_Children()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of _VariadicView_Children((uint64_t)v0);
  return v1;
}

uint64_t _ViewList_Backing.children.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _VariadicView_Children(v1, a1);
}

uint64_t _ViewList_Backing.children.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of _VariadicView_Children(a1, v1);
}

uint64_t (*_ViewList_Backing.children.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Backing.viewCount.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return ViewList.count.getter(v2, v3);
}

uint64_t _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;

  v5 = v4;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v10 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(v5, a2, a1, a3, a4, &v13);
  static Update.end()();
  v11 = v13;
  _MovableLockUnlock(v10);
  return v11;
}

{
  uint64_t v5;

  v5 = a2;
  return _ViewList_Backing.visitViews<A>(applying:from:)(a1, (uint64_t)&v5, a3, a4);
}

uint64_t closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[7];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  char v19;

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v16);
  v12 = v17;
  v13 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = a1;
  v15[5] = a3;
  v19 = 1;
  *a6 = ViewList.applySublists(from:list:to:)(a2, 0x100000000uLL, (uint64_t)partial apply for closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:), (uint64_t)v15, v12, v13) & 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  id v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[96];

  v3 = *a1;
  v4 = a1[1];
  if (*a1 < v4)
  {
    v22 = (uint64_t)(a1 + 4);
    do
    {
      outlined init with copy of AnyTrackedValue(v22, (uint64_t)v32);
      v7 = a1[3];
      v8 = *(void **)(a2 + 40);
      v26 = 0;
      v31 = 0;
      v9 = a1[2];
      outlined init with copy of AnyTrackedValue((uint64_t)v32, (uint64_t)v24);
      v10 = v33;
      v11 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 32);
      swift_bridgeObjectRetain();
      v13 = v8;
      v26 = v12(v10, v11);
      v27 = v9;
      v28 = v7;
      v29 = v3;
      v30 = v4;
      v31 = v13;
      outlined init with copy of _ViewList_View((uint64_t)v24, (uint64_t)v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      outlined destroy of _ViewList_View((uint64_t)v24);
      _ViewList_View.viewID.getter();
      v14 = *a3;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        *a3 = v14;
      }
      v17 = v14[2];
      v16 = v14[3];
      if (v17 >= v16 >> 1)
      {
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
        *a3 = v14;
      }
      ++v3;
      v14[2] = v17 + 1;
      v18 = &v14[5 * v17];
      v19 = v24[0];
      v20 = v24[1];
      v18[8] = v25;
      *((_OWORD *)v18 + 2) = v19;
      *((_OWORD *)v18 + 3) = v20;
      outlined destroy of _ViewList_View((uint64_t)v35);
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  id v15;
  char v16;
  uint64_t (*v17)(_BYTE *, _QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[96];

  v6 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v5)
    return 1;
  v8 = (_QWORD *)result;
  v17 = *(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t))(a5 + 8);
  v18 = result + 32;
  while (v6 < v5)
  {
    outlined init with copy of AnyTrackedValue(v18, (uint64_t)v28);
    v9 = v8[3];
    v10 = *(void **)(a2 + 40);
    v22 = 0;
    v27 = 0;
    v11 = v8[2];
    outlined init with copy of AnyTrackedValue((uint64_t)v28, (uint64_t)v21);
    v12 = v29;
    v13 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 32);
    swift_bridgeObjectRetain();
    v15 = v10;
    v22 = v14(v12, v13);
    v23 = v11;
    v24 = v9;
    v25 = v6;
    v26 = v5;
    v27 = v15;
    outlined init with copy of _ViewList_View((uint64_t)v21, (uint64_t)v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    outlined destroy of _ViewList_View((uint64_t)v21);
    v21[0] = v8[9];
    v16 = v17(v31, v21, a4, a5);
    result = outlined destroy of _ViewList_View((uint64_t)v31);
    if ((v16 & 1) == 0)
      return 0;
    if (v5 == ++v6)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t _ViewList_Backing.visitAll<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = 0;
  return _ViewList_Backing.visitViews<A>(applying:from:)(a1, (uint64_t)&v4, a2, a3);
}

uint64_t _ViewList_Backing.ids.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[4];
  char v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = MEMORY[0x24BEE4AF8];
  if (one-time initialization token for _lock != -1)
    swift_once();
  v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  outlined init with copy of AnyTrackedValue(v0, (uint64_t)v8);
  v2 = v9;
  v3 = v10;
  v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  MEMORY[0x24BDAC7A8](v4);
  v6[2] = v0;
  v6[3] = &v12;
  v7 = 1;
  ViewList.applySublists(from:list:to:)((uint64_t)&v11, 0x100000000uLL, (uint64_t)partial apply for specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:), (uint64_t)v6, v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  static Update.end()();
  _MovableLockUnlock(v1);
  return v12;
}

uint64_t _ViewList_View.id.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *a1 = *(_QWORD *)(v1 + 48);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double _ViewList_View.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRelease();
  result = *(double *)a1;
  *(_QWORD *)(v1 + 48) = *(_QWORD *)a1;
  *(_QWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*_ViewList_View.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_View.elementID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 64);
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    v3 = *(_DWORD *)(v1 + 52);
    v4 = *(_QWORD *)(v1 + 56);
    *(_DWORD *)a1 = v2;
    *(_DWORD *)(a1 + 4) = v3;
    *(_QWORD *)(a1 + 8) = v4;
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

Swift::Int _ViewList_View.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int result;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    return _ViewList_ID.reuseIdentifier.getter();
  }
  __break(1u);
  return result;
}

uint64_t PlaceholderInfo.updateValue()()
{
  uint64_t v0;
  uint64_t OutputValue;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t Value;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  OutputValue = AGGraphGetOutputValue();
  if (!OutputValue)
  {
    v15 = 0;
    if (!*(_QWORD *)(v0 + 120))
    {
LABEL_16:
      Value = AGGraphGetValue();
      outlined init with copy of _ViewList_View(Value, (uint64_t)v21);
      PlaceholderInfo.makeItem(placeholder:seed:)((uint64_t)v21, v15, (uint64_t)&v17);
      outlined destroy of _ViewList_View((uint64_t)v21);
      v14 = v18;
      goto LABEL_17;
    }
LABEL_15:
    PlaceholderInfo.eraseItem()();
    goto LABEL_16;
  }
  v2 = OutputValue;
  v3 = *(_QWORD *)(OutputValue + 24);
  v4 = AGGraphGetValue();
  if (v3 != *(_QWORD *)(v4 + 64))
    goto LABEL_9;
  v5 = *(_DWORD *)v2 == *(_DWORD *)(v4 + 48) && *(_DWORD *)(v2 + 4) == *(_DWORD *)(v4 + 52);
  if (!v5
    || (v6 = *(_QWORD *)(v4 + 56),
        v7 = *(_QWORD *)(v2 + 8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        v8 = specialized static Array<A>.== infix(_:_:)(v7, v6),
        swift_bridgeObjectRelease(),
        result = swift_bridgeObjectRelease(),
        (v8 & 1) == 0))
  {
LABEL_9:
    result = AGGraphGetOutputValue();
    if (result)
    {
      v10 = *(_QWORD *)(result + 8);
      v11 = *(_DWORD *)(result + 16);
      v12 = *(_QWORD *)(result + 24);
      v17 = *(_QWORD *)result;
      v18 = v10;
      v19 = v11;
      v20 = v12;
      v13 = AGGraphGetValue();
      outlined init with copy of _ViewList_View(v13, (uint64_t)v21);
      swift_bridgeObjectRetain();
      LOBYTE(v10) = PlaceholderInfo.reuseItem(info:placeholder:)(&v17, v21);
      outlined destroy of _ViewList_View((uint64_t)v21);
      v14 = v18;
      if ((v10 & 1) != 0)
      {
LABEL_17:
        v21[0] = v17;
        v21[1] = v14;
        v22 = v19;
        v23 = v20;
        AGGraphSetOutputValue();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      result = AGGraphGetOutputValue();
      if (result)
      {
        v15 = *(_DWORD *)(result + 16) + 1;
        if (!*(_QWORD *)(v0 + 120))
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t PlaceholderInfo.reuseItem(info:placeholder:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(v2 + 168))
    goto LABEL_6;
  v3 = v2;
  outlined init with copy of AnyTrackedValue(v2 + 144, (uint64_t)v21);
  v6 = v22;
  v7 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  v8 = a1[3];
  result = outlined init with copy of AnyTrackedValue((uint64_t)a2, (uint64_t)v20);
  v10 = *(_QWORD *)(v2 + 184);
  if (!v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  v11 = a2[8];
  v12 = *(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 24);
  swift_retain();
  v13 = v12(v8, v20, v11, v10, 0, v6, v7);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if ((v13 & 1) == 0)
  {
LABEL_6:
    swift_beginAccess();
    if (static ReuseTrace.recorder)
    {
      v20[0] = &type metadata for _ViewList_View;
      AGGraphAddTraceEvent();
    }
    return 0;
  }
  if ((*(_BYTE *)(v3 + 212) & 1) == 0)
  {
    v14 = 1;
    AGGraphMutateAttribute();
    v15 = a2[3];
    v16 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v15);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    swift_release();
    *(_QWORD *)(v3 + 136) = v17;
    v18 = a2[7];
    swift_bridgeObjectRetain();
    v19 = a2[6];
    swift_bridgeObjectRelease();
    *a1 = v19;
    a1[1] = v18;
    a1[3] = a2[8];
    return v14;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PlaceholderInfo.eraseItem()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t result;

  v1 = v0;
  _ViewOutputs.detachIndirectOutputs()();
  if (*(_QWORD *)(v0 + 120))
  {
    MEMORY[0x24BDAC7A8](v2);
    v4 = v3;
    AGSubgraphApply();
    AGSubgraphInvalidate();

    *(_QWORD *)(v0 + 120) = 0;
  }
  v5 = *(void **)(v0 + 192);
  if (v5)
  {
    AGSubgraphRemoveObserver();

    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 200) = 0;
  }
  swift_release();
  *(_QWORD *)(v1 + 128) = 0;
  swift_release();
  *(_QWORD *)(v1 + 136) = 0;
  outlined destroy of _ViewList_Elements?(v1 + 144);
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_QWORD *)(v1 + 176) = 0;
  result = swift_release();
  *(_QWORD *)(v1 + 184) = 0;
  *(_DWORD *)(v1 + 208) = 0;
  *(_BYTE *)(v1 + 212) = 1;
  return result;
}

uint64_t PlaceholderInfo.makeItem(placeholder:seed:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  int v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;

  v4 = v3;
  v7 = *(void **)(result + 80);
  if (!v7 || (v8 = (_QWORD *)result, result = AGSubgraphIsValid(), !(_DWORD)result))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a3 + 16) = a2;
    *(_QWORD *)(a3 + 24) = 0x8000000000000000;
    return result;
  }
  v31 = a2;
  v9 = *(id *)(v4 + 112);
  v10 = (id)AGSubgraphGetGraph();
  v30 = v7;
  v11 = v7;
  v12 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  v13 = *(_QWORD *)(v4 + 8);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = specialized closure #1 in PropertyList.subscript.getter(v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (v9 != v11 && (v14 & 1) != 0)
    AGSubgraphAddChild2();
  AGGraphClearUpdate();
  v15 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)(v12, (uint64_t)v8, v4);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v16 = *(void **)(v4 + 120);
  v17 = v12;

  *(_QWORD *)(v4 + 120) = v12;
  v18 = v8[3];
  v19 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v18);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  swift_release();
  *(_QWORD *)(v4 + 128) = v20;
  outlined destroy of _ViewList_Elements?(v4 + 144);
  outlined init with copy of AnyTrackedValue((uint64_t)v8, v4 + 144);
  v21 = (id)AGSubgraphGetGraph();
  v22 = (id)AGSubgraphGetGraph();

  if (v21 == v22)
  {

  }
  else
  {
    result = AGGraphGetCurrentAttribute();
    if ((_DWORD)result == *MEMORY[0x24BE096C0])
    {
      __break(1u);
      return result;
    }
    v23 = result;
    v24 = *(void **)(v4 + 112);
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v24;
    *(_DWORD *)(v25 + 24) = v23;
    v26 = v24;
    v27 = AGSubgraphAddObserver();

    swift_release();
    *(_QWORD *)(v4 + 192) = v30;
    *(_QWORD *)(v4 + 200) = v27;
  }
  v28 = v8[7];
  v29 = v8[8];
  *(_QWORD *)a3 = v8[6];
  *(_QWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 16) = v31;
  *(_QWORD *)(a3 + 24) = v29;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t *, uint64_t *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  type metadata accessor for IndirectAttributeMap();
  v6 = swift_allocObject();
  v7 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v7;
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)&v42);
  v25 = v44;
  v23 = v45;
  __swift_project_boxed_opaque_existential_1(&v42, v44);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a3 + 8);
  v10 = *(_DWORD *)(a3 + 16);
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 48);
  v13 = *(_QWORD *)(a3 + 56);
  v14 = *(_DWORD *)(a3 + 88);
  v30 = a3;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:);
  *(_QWORD *)(v15 + 24) = &v29;
  v41 = v8;
  v31 = v9;
  v32 = v10;
  v33 = v11;
  v34 = *(_OWORD *)(a3 + 32);
  v35 = v12;
  v36 = v13;
  v37 = *(_OWORD *)(a3 + 64);
  v38 = *(_QWORD *)(a3 + 80);
  v39 = v14;
  v27 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?);
  v28 = v15;
  v16 = *(void (**)(_QWORD *, uint64_t *, uint64_t *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t))(v23 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = a1;
  swift_retain();
  v16(v40, &v41, &v31, v6, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), v26, v25, v23);
  v18 = v40[0];
  v19 = v40[1];
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    if (v18)
    {
      v21 = *(_DWORD *)(a3 + 104);
      v22 = *(_DWORD *)(a3 + 108);
      v31 = *(_QWORD *)(a3 + 96);
      v32 = v21;
      v42 = v18;
      v43 = v19;
      swift_bridgeObjectRetain();
      PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v42);
      if (v22 != *MEMORY[0x24BE096C0] && *MEMORY[0x24BE096C0] != HIDWORD(v19))
        AGGraphSetIndirectAttribute();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)(a3 + 184) = v6;
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)@<X0>(uint64_t *a1@<X0>, void (*a2)(_QWORD *__return_ptr, uint64_t *)@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  _QWORD v32[2];
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  int v48;
  uint64_t v49;

  v5 = a1;
  v49 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v10 = a1[5];
  v9 = a1[6];
  v29 = *(_OWORD *)(a1 + 7);
  v11 = a1[9];
  v12 = *((_DWORD *)a1 + 20);
  *(_QWORD *)&v42[4] = *(unsigned int *)(a3 + 32);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type PlaceholderViewPhase and conformance PlaceholderViewPhase();
  v27 = v5[3];
  *(_DWORD *)(a3 + 208) = Attribute.init<A>(body:value:flags:update:)();
  *(_BYTE *)(a3 + 212) = 0;
  *(_QWORD *)v42 = v6;
  *(_DWORD *)&v42[8] = v7;
  v43 = v8;
  v13 = v5[4];
  v31 = v13;
  *(_QWORD *)&v44 = v27;
  *((_QWORD *)&v44 + 1) = v13;
  v45 = v10;
  v46 = v9;
  *(_OWORD *)v47 = v29;
  *(_QWORD *)&v47[16] = v11;
  v48 = v12;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)v42, 1);
  swift_release();
  swift_beginAccess();
  LODWORD(v11) = *(_DWORD *)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v28 = *(_OWORD *)(v8 + 48);
  v30 = *(_OWORD *)(v8 + 32);
  v15 = *(_QWORD *)(v8 + 64);
  v16 = *(_QWORD *)(v8 + 72);
  LOBYTE(v5) = *(_BYTE *)(v8 + 80);
  v17 = *(_BYTE *)(v8 + 81);
  v18 = *(_QWORD *)(v8 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = v11;
  *(_QWORD *)(v19 + 24) = v14;
  *(_OWORD *)(v19 + 32) = v30;
  *(_OWORD *)(v19 + 48) = v28;
  *(_QWORD *)(v19 + 64) = v15;
  *(_QWORD *)(v19 + 72) = v16;
  *(_BYTE *)(v19 + 80) = (_BYTE)v5;
  *(_BYTE *)(v19 + 81) = v17;
  *(_QWORD *)(v19 + 88) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v43 = v19;
  *(_OWORD *)&v47[4] = *(_OWORD *)(a3 + 68);
  DWORD2(v44) = v31 | 0x1C;
  v20 = *(_DWORD *)(a3 + 16);
  v21 = *(_QWORD *)(a3 + 24);
  v22 = *(_QWORD *)(a3 + 48);
  v33 = *(_QWORD *)(a3 + 8);
  v34 = v20;
  v35 = v21;
  v36 = *(_OWORD *)(a3 + 32);
  v37 = v22;
  _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v33, 1);
  if ((*(_BYTE *)(a3 + 212) & 1) != 0)
    __break(1u);
  LODWORD(v44) = *(_DWORD *)(a3 + 208);
  if ((BYTE8(v44) & 0x40) == 0)
    DWORD2(v44) |= 0x40u;
  specialized Set._Variant.insert(_:)(&v33, *(unsigned int *)(a3 + 32));
  v33 = *(_QWORD *)v42;
  v34 = *(_DWORD *)&v42[8];
  v35 = v43;
  v36 = v44;
  v37 = v45;
  v38 = v46;
  v39 = *(_OWORD *)v47;
  v40 = *(_QWORD *)&v47[16];
  v41 = v48;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(v32, &v33);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  v24 = v32[1];
  *a4 = v32[0];
  a4[1] = v24;
  return result;
}

uint64_t closure #2 in PlaceholderInfo.makeItem(placeholder:seed:)()
{
  uint64_t result;
  uint64_t v1;
  void *v2;

  result = AGSubgraphIsValid();
  if ((_DWORD)result)
  {
    AGGraphGetAttributeInfo();
    v2 = *(void **)(v1 + 192);
    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 200) = 0;

    return PlaceholderInfo.eraseItem()();
  }
  return result;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance PlaceholderInfo@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance PlaceholderInfo()
{
  _QWORD *v0;
  void *v1;
  uint64_t result;

  v1 = (void *)v0[24];
  if (v1)
  {
    AGSubgraphRemoveObserver();

    v0[24] = 0;
    v0[25] = 0;
  }
  swift_release();
  v0[16] = 0;
  result = swift_release();
  v0[17] = 0;
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance PlaceholderInfo(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t result;

  v3 = a1 + 24;
  v2 = (void *)a1[24];
  if (v2)
  {
    AGSubgraphRemoveObserver();

    *v3 = 0;
    v3[1] = 0;
  }
  swift_release();
  a1[16] = 0;
  result = swift_release();
  a1[17] = 0;
  return result;
}

_DWORD *PlaceholderViewPhase.value.getter@<X0>(int a1@<W1>, unsigned int *a2@<X8>)
{
  int v4;
  _DWORD *result;

  v4 = *(_DWORD *)AGGraphGetValue();
  result = (_DWORD *)AGGraphGetValue();
  *a2 = ((v4 & 0xFFFFFFFE) + 2 * a1 + *result) & 0xFFFFFFFE | (*result | v4) & 1;
  return result;
}

_DWORD *protocol witness for Rule.value.getter in conformance PlaceholderViewPhase@<X0>(unsigned int *a1@<X8>)
{
  uint64_t v1;

  return PlaceholderViewPhase.value.getter(*(_DWORD *)(v1 + 8), a1);
}

uint64_t static ViewListShouldParentToPlaceholderSubgraph.defaultValue.getter()
{
  return 1;
}

id specialized ForEachState.init(inputs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  id result;

  *(_DWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 116) = 1;
  *(_DWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 124) = 1;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 217) = 0u;
  *(_BYTE *)(v1 + 233) = 1;
  *(_QWORD *)(v1 + 240) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 248) = 2;
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 256) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 264) = v2;
  *(_OWORD *)(v1 + 272) = xmmword_2352C1ED0;
  *(_QWORD *)(v1 + 288) = 0;
  *(_DWORD *)(v1 + 296) = 0;
  *(_BYTE *)(v1 + 300) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(_BYTE *)(v1 + 308) = 0;
  *(_QWORD *)(v1 + 312) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v1 + 320) = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v1 + 96) = *(_BYTE *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v4;
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_QWORD *)(v1 + 104) = result;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  id result;

  *(_DWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 116) = 1;
  *(_DWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 124) = 1;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_WORD *)(v1 + 192) = 256;
  *(_QWORD *)(v1 + 200) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 208) = 2;
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 216) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 224) = v2;
  *(_OWORD *)(v1 + 232) = xmmword_2352C1ED0;
  *(_QWORD *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 256) = 0;
  *(_BYTE *)(v1 + 260) = 0;
  *(_DWORD *)(v1 + 264) = 0;
  *(_BYTE *)(v1 + 268) = 0;
  *(_QWORD *)(v1 + 272) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v1 + 280) = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v1 + 96) = *(_BYTE *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v4;
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_QWORD *)(v1 + 104) = result;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VariadicView_Children.Child, &unk_250636710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child);
  }
  return result;
}

uint64_t outlined init with copy of _ViewList_View(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _ViewList_View(a2, a1);
  return a2;
}

uint64_t outlined assign with take of _ViewList_View(uint64_t a1, uint64_t a2)
{
  assignWithTake for _ViewList_View(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in _VariadicView_Children.Element.id<A>(as:)()
{
  return AnyHashable2.as<A>(type:)();
}

uint64_t specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t result)
{
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t specialized _VariadicView_Children.Element.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return ViewTraitCollection.subscript.setter((uint64_t)v11, a2, a3, a4);
}

uint64_t outlined init with take of _ViewList_Elements?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for _ViewList_Elements?, &lazy cache variable for type metadata for _ViewList_Elements, (uint64_t)&protocol descriptor for _ViewList_Elements, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type PlaceholderInfo and conformance PlaceholderInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaceholderInfo and conformance PlaceholderInfo;
  if (!lazy protocol witness table cache variable for type PlaceholderInfo and conformance PlaceholderInfo)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PlaceholderInfo, &unk_25061EAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderInfo and conformance PlaceholderInfo);
  }
  return result;
}

uint64_t outlined destroy of PlaceholderInfo(uint64_t a1)
{
  destroy for PlaceholderInfo(a1);
  return a1;
}

uint64_t outlined init with copy of _VariadicView_Children.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _ViewList_View(uint64_t a1)
{
  destroy for _ViewList_View(a1);
  return a1;
}

uint64_t partial apply for specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD ***)(v1 + 24));
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in _VariadicView_Children.Element()
{
  return MEMORY[0x24BEE23D8];
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_VariadicView_Children>(255, &lazy cache variable for type metadata for Slice<_VariadicView_Children>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<_VariadicView_Children>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<_VariadicView_Children> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

uint64_t lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_VariadicView_Children>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v7 = a3(a1, &type metadata for _VariadicView_Children, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t destroy for _VariadicView_Children.Element(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _VariadicView_Children.Element()
{
  return &type metadata for _VariadicView_Children.Element;
}

uint64_t dispatch thunk of ViewListVisitor.visit(view:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for _ViewList_Backing()
{
  return &type metadata for _ViewList_Backing;
}

void destroy for _ViewList_View(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for _ViewList_View(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  id v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for _ViewList_View(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for _ViewList_View(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_View(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewList_View(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_View()
{
  return &type metadata for _ViewList_View;
}

ValueMetadata *type metadata accessor for ViewListShouldParentToPlaceholderSubgraph()
{
  return &type metadata for ViewListShouldParentToPlaceholderSubgraph;
}

void destroy for PlaceholderInfo(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 168))
    __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  swift_release();

}

uint64_t initializeWithCopy for PlaceholderInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  id v14;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = *(void **)(a2 + 112);
  v5 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = v5;
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  v16 = a2 + 144;
  v17 = a1 + 144;
  v8 = *(_QWORD *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v6;
  v10 = v5;
  swift_retain();
  swift_retain();
  if (v8)
  {
    v11 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = v8;
    *(_QWORD *)(a1 + 176) = v11;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(v17, v16, v8);
  }
  else
  {
    v12 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_OWORD *)(v17 + 16) = v12;
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v16 + 32);
  }
  v13 = *(void **)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v13;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  swift_retain();
  v14 = v13;
  return a1;
}

uint64_t assignWithCopy for PlaceholderInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  void *v14;
  id v15;
  int v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  v4 = *(void **)(a2 + 112);
  v5 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  v6 = v4;

  v7 = *(void **)(a1 + 120);
  v8 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a2 + 168);
  if (!*(_QWORD *)(a1 + 168))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 168) = v10;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 144, a2 + 144);
      goto LABEL_8;
    }
LABEL_7:
    v11 = *(_OWORD *)(a2 + 144);
    v12 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 144) = v11;
    *(_OWORD *)(a1 + 160) = v12;
    goto LABEL_8;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 144);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 144), (uint64_t *)(a2 + 144));
LABEL_8:
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  swift_release();
  v13 = *(void **)(a2 + 192);
  v14 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v16 = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v16;
  return a1;
}

__n128 __swift_memcpy213_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for PlaceholderInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  void *v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v4 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  v5 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release();
  if (*(_QWORD *)(a1 + 168))
    __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  v7 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v7;
  swift_release();
  v8 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);

  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceholderInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 213))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceholderInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 212) = 0;
    *(_DWORD *)(result + 208) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 213) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 213) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for PlaceholderInfo()
{
  return &unk_25061EAC8;
}

uint64_t initializeWithCopy for PlaceholderInfo.Value(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlaceholderInfo.Value(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PlaceholderInfo.Value(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void *type metadata accessor for PlaceholderInfo.Value()
{
  return &unk_25061EA30;
}

void *type metadata accessor for _VariadicView_Children.Child()
{
  return &unk_250636710;
}

unint64_t instantiation function for generic protocol witness table for _VariadicView_Children.Child(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PlaceholderInfo(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlaceholderInfo and conformance PlaceholderInfo();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined destroy of _ViewList_Elements?(uint64_t a1)
{
  uint64_t v2;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for _ViewList_Elements?, &lazy cache variable for type metadata for _ViewList_Elements, (uint64_t)&protocol descriptor for _ViewList_Elements, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23506CC5C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PlaceholderInfo.makeItem(placeholder:seed:)()
{
  return closure #2 in PlaceholderInfo.makeItem(placeholder:seed:)();
}

uint64_t partial apply for closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)@<X0>(uint64_t *a1@<X0>, void (*a2)(_QWORD *__return_ptr, uint64_t *)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_23506CC94()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PlaceholderViewPhase and conformance PlaceholderViewPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaceholderViewPhase and conformance PlaceholderViewPhase;
  if (!lazy protocol witness table cache variable for type PlaceholderViewPhase and conformance PlaceholderViewPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PlaceholderViewPhase, &unk_2506303A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderViewPhase and conformance PlaceholderViewPhase);
  }
  return result;
}

uint64_t sub_23506CCEC()
{
  return 48;
}

__n128 sub_23506CCF8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VariadicView_Children.Element, &type metadata for _VariadicView_Children.Element);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element);
  }
  return result;
}

uint64_t outlined init with copy of _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _VariadicView_Children.Element(a2, a1);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[6];

  if (!*a2)
  {
    v6 = MEMORY[0x24BEE1768];
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v8 = v7;
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(255);
    v10 = v9;
    v11 = _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
    v12 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _OffsetEffect);
    v15[0] = v8;
    v15[1] = v6;
    v15[2] = v10;
    v15[3] = v11;
    v15[4] = MEMORY[0x24BEE1778];
    v15[5] = v12;
    v13 = a3(a1, v15);
    if (!v14)
      atomic_store(v13, a2);
  }
}

uint64_t partial apply for closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

unint64_t lazy protocol witness table accessor for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init and conformance ForEachState<A, B, C>.Info.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init and conformance ForEachState<A, B, C>.Info.Init;
  if (!lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init and conformance ForEachState<A, B, C>.Info.Init)
  {
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(255, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Info.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.Info.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init and conformance ForEachState<A, B, C>.Info.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor and conformance ForEachState<A, B, C>.Evictor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor and conformance ForEachState<A, B, C>.Evictor;
  if (!lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor and conformance ForEachState<A, B, C>.Evictor)
  {
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(255, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Evictor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.Evictor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor and conformance ForEachState<A, B, C>.Evictor);
  }
  return result;
}

void type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v9[0] = &type metadata for _VariadicView_Children;
    v9[1] = MEMORY[0x24BEE23D0];
    v9[2] = &type metadata for _VariadicView_Children.Element;
    v9[3] = v6;
    v9[4] = MEMORY[0x24BEE23D8];
    v9[5] = &protocol witness table for _VariadicView_Children.Element;
    v7 = a3(a1, v9);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init;
  if (!lazy protocol witness table cache variable for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init)
  {
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(255, &lazy cache variable for type metadata for ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachList.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachList<A, B, C>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init);
  }
  return result;
}

void *type metadata accessor for PlaceholderViewPhase()
{
  return &unk_2506303A0;
}

unint64_t instantiation function for generic protocol witness table for PlaceholderViewPhase(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlaceholderViewPhase and conformance PlaceholderViewPhase();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized Collection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  v48 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v43 - v6;
  v8 = type metadata accessor for IndexSet.Index();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320];
  v52 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v43 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)v43 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v43 - v18;
  type metadata accessor for Range<IndexSet.Index>();
  v47 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v45 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v44 = (uint64_t)v43 - v23;
  type metadata accessor for PartialRangeFrom<IndexSet.Index>();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for IndexSet();
  v28 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
  v53 = v1;
  v50 = v28;
  v51 = v27;
  dispatch thunk of Collection.startIndex.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, v9, MEMORY[0x24BDCF330]);
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    v43[1] = a1;
    v30 = v52;
    v31 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    v31(v19, v26, v8);
    v32 = v49;
    dispatch thunk of Collection.endIndex.getter();
    v43[0] = v19;
    v31(v14, v19, v8);
    v31(v11, v32, v8);
    outlined destroy of TypesettingConfiguration((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for PartialRangeFrom<IndexSet.Index>);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF328]);
    v33 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v34 = *(void (**)(char *, uint64_t))(v30 + 8);
    v34(v11, v8);
    result = ((uint64_t (*)(char *, uint64_t))v34)(v14, v8);
    if ((v33 & 1) != 0)
    {
      v35 = (uint64_t)v45;
      v36 = v46;
      v37 = v48;
      v38 = &v7[*(int *)(v48 + 48)];
      v39 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      v39(v7, (char *)v43[0], v8);
      v39(v38, v49, v8);
      v40 = &v36[*(int *)(v37 + 48)];
      v31(v36, v7, v8);
      v31(v40, v38, v8);
      v39((char *)v35, v36, v8);
      v34(v40, v8);
      v41 = &v36[*(int *)(v37 + 48)];
      v39(v36, v7, v8);
      v39(v41, v38, v8);
      v39((char *)(v35 + *(int *)(v47 + 36)), v41, v8);
      v34(v36, v8);
      v42 = v44;
      outlined init with take of Range<IndexSet.Index>(v35, v44);
      dispatch thunk of Collection.subscript.getter();
      return outlined destroy of TypesettingConfiguration(v42, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.remove(atOffsets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  char *v22;

  v20 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for PartialRangeFrom();
  v19 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - v12;
  type metadata accessor for Slice<IndexSet>();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Collection.subscript.getter((uint64_t)v16);
  v22 = v16;
  MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(partial apply for closure #1 in RangeReplaceableCollection<>.remove(atOffsets:), (uint64_t)v21, a2, a3, (uint64_t)v13);
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v9, v13, AssociatedTypeWitness);
    MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C50], v7);
    RangeReplaceableCollection.removeSubrange<A>(_:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    return outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for Slice<IndexSet>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Slice<IndexSet>)
  {
    type metadata accessor for IndexSet();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    v0 = type metadata accessor for Slice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>);
  }
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(uint64_t *a1, uint64_t a2)
{
  return specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  return specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;

  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v7 = 0;
    for (i = -104; ; i -= 40)
    {
      v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2)
        return v7;
      if ((v9 & 1) != 0)
        break;
      if (v4 == ++v7)
        return v3[2];
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2])
        return v7;
      v4 = v7 + 1;
      v20 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_11;
    }
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    v10 = (_QWORD *)((char *)v3 - i);
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_26;
          v11 = v3[2];
          if (v7 >= v11)
            goto LABEL_27;
          if (v4 >= v11)
            goto LABEL_28;
          v12 = (uint64_t)&v3[5 * v7 + 4];
          v13 = *(_OWORD *)v12;
          v14 = *(v10 - 3);
          i = *v10;
          *(_QWORD *)v12 = *(v10 - 4);
          v21 = *(_OWORD *)(v12 + 16);
          v22 = v13;
          v15 = *(_QWORD *)(v12 + 32);
          *(_QWORD *)(v12 + 8) = v14;
          *(_OWORD *)(v12 + 16) = *((_OWORD *)v10 - 1);
          *(_QWORD *)(v12 + 32) = i;
          v16 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v16)
            goto LABEL_29;
          i = *(v10 - 4);
          *((_OWORD *)v10 - 2) = v22;
          *((_OWORD *)v10 - 1) = v21;
          *v10 = v15;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_25;
      }
      v18 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 5;
    }
    while (v18 != v3[2]);
    *v20 = v3;
    return v7;
  }
  return 0;
}

{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  _QWORD *v21;
  __int128 v22;

  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v7 = 0;
    for (i = -88; ; i -= 32)
    {
      v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2)
        return v7;
      if ((v9 & 1) != 0)
        break;
      if (v4 == ++v7)
        return v3[2];
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2])
        return v7;
      v4 = v7 + 1;
      v21 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_11;
    }
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    v10 = (_QWORD *)((char *)v3 - i);
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_26;
          v11 = v3[2];
          if (v7 >= v11)
            goto LABEL_27;
          if (v4 >= v11)
            goto LABEL_28;
          v12 = (uint64_t)&v3[4 * v7 + 4];
          v22 = *(_OWORD *)v12;
          v13 = *(_QWORD *)(v12 + 16);
          v14 = *(v10 - 2);
          v15 = *(v10 - 1);
          i = *v10;
          *(_QWORD *)v12 = *(v10 - 3);
          *(_QWORD *)(v12 + 8) = v14;
          v16 = *(_QWORD *)(v12 + 24);
          *(_QWORD *)(v12 + 16) = v15;
          *(_QWORD *)(v12 + 24) = i;
          v17 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v17)
            goto LABEL_29;
          i = *(v10 - 3);
          *(_OWORD *)(v10 - 3) = v22;
          *(v10 - 1) = v13;
          *v10 = v16;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_25;
      }
      v19 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 4;
    }
    while (v19 != v3[2]);
    *v21 = v3;
    return v7;
  }
  return 0;
}

{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;

  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v7 = 0;
    for (i = -120; ; i -= 48)
    {
      v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2)
        return v7;
      if ((v9 & 1) != 0)
        break;
      if (v4 == ++v7)
        return v3[2];
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2])
        return v7;
      v4 = v7 + 1;
      v21 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_11;
    }
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    v10 = (_QWORD *)((char *)v3 - i);
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_26;
          v11 = v3[2];
          if (v7 >= v11)
            goto LABEL_27;
          if (v4 >= v11)
            goto LABEL_28;
          v12 = (uint64_t)&v3[6 * v7 + 4];
          v22 = *(_OWORD *)(v12 + 16);
          v23 = *(_OWORD *)v12;
          v13 = *(v10 - 4);
          v14 = *(v10 - 1);
          i = *v10;
          *(_QWORD *)v12 = *(v10 - 5);
          v15 = *(_QWORD *)(v12 + 32);
          v16 = *(_QWORD *)(v12 + 40);
          *(_QWORD *)(v12 + 8) = v13;
          *(_OWORD *)(v12 + 16) = *(_OWORD *)(v10 - 3);
          *(_QWORD *)(v12 + 32) = v14;
          *(_QWORD *)(v12 + 40) = i;
          v17 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v17)
            goto LABEL_29;
          i = *(v10 - 5);
          *(_OWORD *)(v10 - 5) = v23;
          *(_OWORD *)(v10 - 3) = v22;
          *(v10 - 1) = v15;
          *v10 = v16;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_25;
      }
      v19 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 6;
    }
    while (v19 != v3[2]);
    *v21 = v3;
    return v7;
  }
  return 0;
}

{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v7 = 0;
    for (i = -88; ; i -= 56)
    {
      v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2)
        return v7;
      if ((v9 & 1) != 0)
        break;
      if (v4 == ++v7)
        return v3[2];
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2])
        return v7;
      v4 = v7 + 1;
      v20 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_11;
    }
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    v10 = (char *)v3 - i;
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_26;
          v11 = v3[2];
          if (v7 >= v11)
            goto LABEL_27;
          if (v4 >= v11)
            goto LABEL_28;
          v12 = (uint64_t)&v3[7 * v7 + 4];
          v13 = *(_OWORD *)v12;
          v14 = *((_QWORD *)v10 + 1);
          i = *((_QWORD *)v10 + 6);
          *(_QWORD *)v12 = *(_QWORD *)v10;
          v21 = *(_OWORD *)(v12 + 16);
          v22 = *(_OWORD *)(v12 + 32);
          v23 = v13;
          v15 = *(_QWORD *)(v12 + 48);
          *(_QWORD *)(v12 + 8) = v14;
          *(_OWORD *)(v12 + 16) = *((_OWORD *)v10 + 1);
          *(_OWORD *)(v12 + 32) = *((_OWORD *)v10 + 2);
          *(_QWORD *)(v12 + 48) = i;
          v16 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v16)
            goto LABEL_29;
          i = *(_QWORD *)v10;
          *(_OWORD *)v10 = v23;
          *((_OWORD *)v10 + 1) = v21;
          *((_OWORD *)v10 + 2) = v22;
          *((_QWORD *)v10 + 6) = v15;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_25;
      }
      v18 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 56;
    }
    while (v18 != v3[2]);
    *v20 = v3;
    return v7;
  }
  return 0;
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t i;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  __int128 v19;
  __int128 v20;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  if (v5)
  {
    v8 = 0;
    for (i = -64; ; i -= 32)
    {
      v10 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
      if (v3)
        return v8;
      if ((v10 & 1) != 0)
        break;
      if (v5 == ++v8)
        return *(_QWORD *)(v4 + 16);
    }
    if (__OFADD__(v8, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v8 + 1 == *(_QWORD *)(v4 + 16))
        return v8;
      v5 = v8 + 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_11;
    }
    v4 = a3(v4);
LABEL_11:
    i = v4 - i;
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v5, a2) & 1) == 0)
      {
        if (v5 != v8)
        {
          if ((v8 & 0x8000000000000000) != 0)
            goto LABEL_26;
          v11 = *(_QWORD *)(v4 + 16);
          if (v8 >= v11)
            goto LABEL_27;
          if (v5 >= v11)
            goto LABEL_28;
          v12 = v4 + 32 + 32 * v8;
          v19 = *(_OWORD *)(v12 + 16);
          v20 = *(_OWORD *)v12;
          v13 = *(_QWORD *)(i + 8);
          a3 = *(uint64_t (**)(uint64_t))(i + 16);
          v14 = *(_QWORD *)(i + 24);
          *(_QWORD *)v12 = *(_QWORD *)i;
          *(_QWORD *)(v12 + 8) = v13;
          *(_QWORD *)(v12 + 16) = a3;
          *(_QWORD *)(v12 + 24) = v14;
          v15 = *(_QWORD *)(v4 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v5 >= v15)
            goto LABEL_29;
          a3 = *(uint64_t (**)(uint64_t))i;
          *(_OWORD *)i = v20;
          *(_OWORD *)(i + 16) = v19;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v8++, 1))
          goto LABEL_25;
      }
      v17 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v5;
      i += 32;
    }
    while (v17 != *(_QWORD *)(v4 + 16));
    *a1 = v4;
    return v8;
  }
  return 0;
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return 0;
  v6 = a1;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
    if (v2)
      return v8;
    if ((v9 & 1) != 0)
      break;
    ++v8;
    v7 += 11;
    if (v4 == v8)
      return v3[2];
  }
  if (__OFADD__(v8, 1))
    goto LABEL_29;
  if (v8 + 1 != v3[2])
  {
    v20 = (_QWORD *)v6;
    v6 = v8 + 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_30;
    while (1)
    {
      while (1)
      {
        if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2) & 1) != 0)
          goto LABEL_19;
        if (v6 != v8)
          break;
LABEL_18:
        if (__OFADD__(v8++, 1))
          goto LABEL_24;
LABEL_19:
        v18 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        ++v6;
        v7 += 11;
        if (v18 == v3[2])
        {
          *v20 = v3;
          return v8;
        }
      }
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_25;
      v10 = v3[2];
      if (v8 >= v10)
        goto LABEL_26;
      if (v6 >= v10)
        goto LABEL_27;
      v11 = (uint64_t)&v3[11 * v8 + 4];
      v12 = *(_OWORD *)v11;
      v13 = &v3[v7];
      v14 = v3[v7 + 16];
      v15 = v3[v7 + 25];
      *(_QWORD *)v11 = v3[v7 + 15];
      v21 = *(_OWORD *)(v11 + 16);
      v22 = *(_OWORD *)(v11 + 32);
      v23 = *(_OWORD *)(v11 + 48);
      v24 = *(_OWORD *)(v11 + 64);
      v25 = v12;
      v16 = *(_QWORD *)(v11 + 80);
      *(_QWORD *)(v11 + 8) = v14;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)&v3[v7 + 17];
      *(_OWORD *)(v11 + 32) = *(_OWORD *)&v3[v7 + 19];
      *(_OWORD *)(v11 + 48) = *(_OWORD *)&v3[v7 + 21];
      *(_OWORD *)(v11 + 64) = *(_OWORD *)&v3[v7 + 23];
      *(_QWORD *)(v11 + 80) = v15;
      v26 = v3[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v6 < v26)
      {
        *(_OWORD *)(v13 + 15) = v25;
        *(_OWORD *)(v13 + 17) = v21;
        *(_OWORD *)(v13 + 19) = v22;
        *(_OWORD *)(v13 + 21) = v23;
        *(_OWORD *)(v13 + 23) = v24;
        v13[25] = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_18;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    }
  }
  return v8;
}

uint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t result;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v7)
    return v6[2];
  v9 = 0;
  while (1)
  {
    v10 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v9, a2);
    if (v2)
      return v9;
    if ((v10 & 1) != 0)
    {
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v11 != v6[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v11, a2);
        if ((result & 1) == 0)
        {
          if (v9 != v11)
          {
            if ((v9 & 0x8000000000000000) != 0)
              goto LABEL_27;
            v15 = v6[2];
            if (v9 >= v15)
              goto LABEL_28;
            if (v11 >= v15)
              goto LABEL_29;
            v16 = &v6[4 * v9 + 4];
            v17 = v16[1];
            v5 = v16[2];
            v18 = v16[3];
            v19 = &v6[4 * v11 + 4];
            v20 = *v19;
            v21 = v19[1];
            v22 = v19[2];
            v23 = v19[3];
            v27 = *v16;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            v28 = v21;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
              v6 = (_QWORD *)result;
            }
            if (v9 >= v6[2])
              goto LABEL_30;
            v25 = v18;
            v26 = v17;
            v4 = v27;
            v3 = v6 + 4;
            v24 = &v6[4 * v9 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v24 = v20;
            v24[1] = v28;
            v24[2] = v22;
            v24[3] = v23;
            if (v11 >= v6[2])
              goto LABEL_31;
LABEL_10:
            v12 = &v3[4 * v11];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v12 = v4;
            v12[1] = v26;
            v12[2] = v5;
            v12[3] = v25;
            *(_QWORD *)a1 = v6;
          }
          v14 = __OFADD__(v9++, 1);
          if (v14)
            goto LABEL_26;
        }
        v14 = __OFADD__(v11++, 1);
        if (v14)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v9;
    }
    if (v7 == ++v9)
      return v6[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v11;
  char v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t result;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = *(_QWORD **)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v9)
    return v8[2];
  v11 = 0;
  while (1)
  {
    v12 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v11, a2);
    if (v2)
      return v11;
    if ((v12 & 1) != 0)
    {
      v13 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v13 != v8[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v13, a2);
        if ((result & 1) == 0)
        {
          if (v11 != v13)
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_27;
            v17 = v8[2];
            if (v11 >= v17)
              goto LABEL_28;
            if (v13 >= v17)
              goto LABEL_29;
            v18 = &v8[7 * v11 + 4];
            v19 = v18[1];
            v4 = v18[2];
            v5 = v18[3];
            v6 = v18[4];
            v7 = v18[5];
            v20 = v18[6];
            v21 = &v8[7 * v13 + 4];
            v22 = *v21;
            v23 = v21[1];
            v24 = v21[2];
            v25 = v21[3];
            v26 = v21[4];
            v27 = v21[5];
            v28 = v21[6];
            v32 = *v18;
            swift_retain();
            swift_bridgeObjectRetain();
            v31 = v20;
            swift_bridgeObjectRetain();
            swift_retain();
            v34 = v23;
            swift_bridgeObjectRetain();
            v33 = v28;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
              v8 = (_QWORD *)result;
            }
            if (v11 >= v8[2])
              goto LABEL_30;
            v30 = v19;
            v3 = v8 + 4;
            v29 = &v8[7 * v11 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v29 = v22;
            v29[1] = v34;
            v29[2] = v24;
            v29[3] = v25;
            v29[4] = v26;
            v29[5] = v27;
            v29[6] = v33;
            if (v13 >= v8[2])
              goto LABEL_31;
LABEL_10:
            v14 = &v3[7 * v13];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v14 = v32;
            v14[1] = v30;
            v14[2] = v4;
            v14[3] = v5;
            v14[4] = v6;
            v14[5] = v7;
            v14[6] = v31;
            *(_QWORD *)a1 = v8;
          }
          v16 = __OFADD__(v11++, 1);
          if (v16)
            goto LABEL_26;
        }
        v16 = __OFADD__(v13++, 1);
        if (v16)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v11;
    }
    if (v9 == ++v11)
      return v8[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t result;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v8)
    return v7[2];
  v10 = 0;
  while (1)
  {
    v11 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
    if (v2)
      return v10;
    if ((v11 & 1) != 0)
    {
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v12 != v7[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v12, a2);
        if ((result & 1) == 0)
        {
          if (v10 != v12)
          {
            if ((v10 & 0x8000000000000000) != 0)
              goto LABEL_27;
            v16 = v7[2];
            if (v10 >= v16)
              goto LABEL_28;
            if (v12 >= v16)
              goto LABEL_29;
            v17 = &v7[5 * v10 + 4];
            v18 = v17[1];
            v5 = v17[2];
            v6 = v17[3];
            v19 = v17[4];
            v20 = &v7[5 * v12 + 4];
            v21 = *v20;
            v22 = v20[1];
            v23 = v20[2];
            v24 = v20[3];
            v25 = v20[4];
            v29 = *v17;
            swift_retain();
            swift_bridgeObjectRetain();
            v28 = v19;
            swift_bridgeObjectRetain();
            swift_retain();
            v31 = v22;
            swift_bridgeObjectRetain();
            v30 = v25;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
              v7 = (_QWORD *)result;
            }
            if (v10 >= v7[2])
              goto LABEL_30;
            v27 = v18;
            v4 = v29;
            v3 = v7 + 4;
            v26 = &v7[5 * v10 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v26 = v21;
            v26[1] = v31;
            v26[2] = v23;
            v26[3] = v24;
            v26[4] = v30;
            if (v12 >= v7[2])
              goto LABEL_31;
LABEL_10:
            v13 = &v3[5 * v12];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v13 = v4;
            v13[1] = v27;
            v13[2] = v5;
            v13[3] = v6;
            v13[4] = v28;
            *(_QWORD *)a1 = v7;
          }
          v15 = __OFADD__(v10++, 1);
          if (v15)
            goto LABEL_26;
        }
        v15 = __OFADD__(v12++, 1);
        if (v15)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v10;
    }
    if (v8 == ++v10)
      return v7[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t result;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v8)
    return v7[2];
  v10 = 0;
  while (1)
  {
    v11 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
    if (v2)
      return v10;
    if ((v11 & 1) != 0)
    {
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v12 != v7[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v12, a2);
        if ((result & 1) == 0)
        {
          if (v10 != v12)
          {
            if ((v10 & 0x8000000000000000) != 0)
              goto LABEL_27;
            v16 = v7[2];
            if (v10 >= v16)
              goto LABEL_28;
            if (v12 >= v16)
              goto LABEL_29;
            v17 = &v7[6 * v10 + 4];
            v18 = v17[1];
            v4 = v17[2];
            v5 = v17[3];
            v6 = v17[4];
            v19 = v17[5];
            v20 = &v7[6 * v12 + 4];
            v21 = *v20;
            v22 = v20[1];
            v23 = v20[2];
            v24 = v20[3];
            v25 = v20[4];
            v26 = v20[5];
            v30 = *v17;
            swift_retain();
            swift_bridgeObjectRetain();
            v29 = v19;
            swift_bridgeObjectRetain();
            swift_retain();
            v32 = v22;
            swift_bridgeObjectRetain();
            v31 = v26;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
              v7 = (_QWORD *)result;
            }
            if (v10 >= v7[2])
              goto LABEL_30;
            v28 = v18;
            v3 = v7 + 4;
            v27 = &v7[6 * v10 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v27 = v21;
            v27[1] = v32;
            v27[2] = v23;
            v27[3] = v24;
            v27[4] = v25;
            v27[5] = v31;
            if (v12 >= v7[2])
              goto LABEL_31;
LABEL_10:
            v13 = &v3[6 * v12];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v13 = v30;
            v13[1] = v28;
            v13[2] = v4;
            v13[3] = v5;
            v13[4] = v6;
            v13[5] = v29;
            *(_QWORD *)a1 = v7;
          }
          v15 = __OFADD__(v10++, 1);
          if (v15)
            goto LABEL_26;
        }
        v15 = __OFADD__(v12++, 1);
        if (v15)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v10;
    }
    if (v8 == ++v10)
      return v7[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v23 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v10 = v3[2];
            if (v6 >= v10)
              goto LABEL_27;
            if (v8 >= v10)
              goto LABEL_28;
            v11 = (uint64_t)&v3[7 * v6 + 4];
            v12 = *(_QWORD *)(v11 + 8);
            v13 = *(_QWORD *)(v11 + 16);
            v14 = *(_QWORD *)(v11 + 24);
            v25 = *(_OWORD *)(v11 + 32);
            v15 = *(_QWORD *)(v11 + 48);
            v16 = &v3[7 * v8 + 4];
            v17 = *v16;
            v31 = v16[1];
            v27 = v3;
            v18 = v16[2];
            v19 = v16[4];
            v20 = v16[5];
            v29 = v16[6];
            v30 = v16[3];
            v24 = *(_QWORD *)v11;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            v26 = v18;
            v3 = v27;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v21 = &v3[7 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v21 = v17;
            v21[1] = v31;
            v21[2] = v26;
            v21[3] = v30;
            v21[4] = v19;
            v21[5] = v20;
            v21[6] = v29;
            if (v8 >= v3[2])
              goto LABEL_30;
            v22 = (uint64_t)&v3[7 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v22 = v24;
            *(_QWORD *)(v22 + 8) = v12;
            *(_QWORD *)(v22 + 16) = v13;
            *(_QWORD *)(v22 + 24) = v14;
            *(_OWORD *)(v22 + 32) = v25;
            *(_QWORD *)(v22 + 48) = v15;
            *(_QWORD *)a1 = v3;
            a2 = v23;
          }
          v9 = __OFADD__(v6++, 1);
          if (v9)
            goto LABEL_25;
        }
        v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v28 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v11 = v3[2];
            if (v6 >= v11)
              goto LABEL_27;
            if (v8 >= v11)
              goto LABEL_28;
            v12 = &v3[8 * v6 + 4];
            v13 = v12[1];
            v14 = v12[4];
            v30 = v12[3];
            v31 = v12[2];
            v15 = v12[5];
            v16 = v12[6];
            v17 = v12[7];
            v18 = &v3[8 * v8 + 4];
            v19 = *v18;
            v20 = v18[1];
            v21 = v18[2];
            v22 = v18[3];
            v24 = v18[4];
            v23 = v18[5];
            v25 = v18[6];
            v26 = v18[7];
            v32 = *v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v29 = v13;
            v27 = &v3[8 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v27 = v19;
            v27[1] = v20;
            v27[2] = v21;
            v27[3] = v22;
            v27[4] = v24;
            v27[5] = v23;
            v27[6] = v25;
            v27[7] = v26;
            if (v8 >= v3[2])
              goto LABEL_30;
            v9 = &v3[8 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v9 = v32;
            v9[1] = v29;
            v9[2] = v31;
            v9[3] = v30;
            v9[4] = v14;
            v9[5] = v15;
            v9[6] = v16;
            a2 = v28;
            v9[7] = v17;
            *(_QWORD *)a1 = v3;
          }
          v10 = __OFADD__(v6++, 1);
          if (v10)
            goto LABEL_25;
        }
        v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v31 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v10 = v3[2];
            if (v6 >= v10)
              goto LABEL_27;
            if (v8 >= v10)
              goto LABEL_28;
            v11 = v3 + 4;
            v12 = (uint64_t)&v3[9 * v6 + 4];
            v37 = v3;
            v13 = *(_QWORD *)(v12 + 8);
            v14 = *(_QWORD *)(v12 + 16);
            v15 = *(_QWORD *)(v12 + 24);
            v16 = *(_QWORD *)(v12 + 32);
            v17 = *(_QWORD *)(v12 + 40);
            v18 = *(_QWORD *)(v12 + 48);
            v32 = *(_BYTE *)(v12 + 56);
            v19 = *(_QWORD *)(v12 + 64);
            v20 = &v11[9 * v8];
            v21 = *v20;
            v22 = v20[1];
            v23 = v20[2];
            v24 = v20[3];
            v25 = v20[4];
            v26 = v20[5];
            v27 = v20[6];
            v36 = *((_BYTE *)v20 + 56);
            v28 = v20[8];
            v34 = *(_QWORD *)v12;
            swift_retain();
            v33 = v13;
            v3 = v37;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v35 = v28;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v29 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v29 = v21;
            *(_QWORD *)(v29 + 8) = v22;
            *(_QWORD *)(v29 + 16) = v23;
            *(_QWORD *)(v29 + 24) = v24;
            *(_QWORD *)(v29 + 32) = v25;
            *(_QWORD *)(v29 + 40) = v26;
            *(_QWORD *)(v29 + 48) = v27;
            *(_BYTE *)(v29 + 56) = v36;
            *(_QWORD *)(v29 + 64) = v35;
            if (v8 >= v3[2])
              goto LABEL_30;
            v30 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v30 = v34;
            *(_QWORD *)(v30 + 8) = v33;
            *(_QWORD *)(v30 + 16) = v14;
            *(_QWORD *)(v30 + 24) = v15;
            *(_QWORD *)(v30 + 32) = v16;
            *(_QWORD *)(v30 + 40) = v17;
            *(_QWORD *)(v30 + 48) = v18;
            *(_BYTE *)(v30 + 56) = v32;
            *(_QWORD *)(v30 + 64) = v19;
            *(_QWORD *)a1 = v3;
            a2 = v31;
          }
          v9 = __OFADD__(v6++, 1);
          if (v9)
            goto LABEL_25;
        }
        v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v31 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v10 = v3[2];
            if (v6 >= v10)
              goto LABEL_27;
            if (v8 >= v10)
              goto LABEL_28;
            v11 = v3 + 4;
            v12 = (uint64_t)&v3[9 * v6 + 4];
            v37 = v3;
            v13 = *(_QWORD *)(v12 + 8);
            v14 = *(_QWORD *)(v12 + 16);
            v15 = *(_QWORD *)(v12 + 24);
            v16 = *(_QWORD *)(v12 + 32);
            v32 = *(_BYTE *)(v12 + 40);
            v17 = *(_QWORD *)(v12 + 48);
            v18 = *(_QWORD *)(v12 + 56);
            v19 = *(_QWORD *)(v12 + 64);
            v20 = &v11[9 * v8];
            v21 = *v20;
            v22 = v20[1];
            v23 = v20[2];
            v24 = v20[3];
            v25 = v20[4];
            v36 = *((_BYTE *)v20 + 40);
            v26 = v20[6];
            v27 = v20[7];
            v28 = v20[8];
            v34 = *(_QWORD *)v12;
            swift_retain();
            v33 = v13;
            v3 = v37;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v35 = v28;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v29 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v29 = v21;
            *(_QWORD *)(v29 + 8) = v22;
            *(_QWORD *)(v29 + 16) = v23;
            *(_QWORD *)(v29 + 24) = v24;
            *(_QWORD *)(v29 + 32) = v25;
            *(_BYTE *)(v29 + 40) = v36;
            *(_QWORD *)(v29 + 48) = v26;
            *(_QWORD *)(v29 + 56) = v27;
            *(_QWORD *)(v29 + 64) = v35;
            if (v8 >= v3[2])
              goto LABEL_30;
            v30 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v30 = v34;
            *(_QWORD *)(v30 + 8) = v33;
            *(_QWORD *)(v30 + 16) = v14;
            *(_QWORD *)(v30 + 24) = v15;
            *(_QWORD *)(v30 + 32) = v16;
            *(_BYTE *)(v30 + 40) = v32;
            *(_QWORD *)(v30 + 48) = v17;
            *(_QWORD *)(v30 + 56) = v18;
            *(_QWORD *)(v30 + 64) = v19;
            *(_QWORD *)a1 = v3;
            a2 = v31;
          }
          v9 = __OFADD__(v6++, 1);
          if (v9)
            goto LABEL_25;
        }
        v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v31 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v10 = v3[2];
            if (v6 >= v10)
              goto LABEL_27;
            if (v8 >= v10)
              goto LABEL_28;
            v11 = v3 + 4;
            v12 = (uint64_t)&v3[9 * v6 + 4];
            v37 = v3;
            v13 = *(_QWORD *)(v12 + 8);
            v14 = *(_QWORD *)(v12 + 16);
            v15 = *(_QWORD *)(v12 + 24);
            v16 = *(_QWORD *)(v12 + 32);
            v32 = *(_BYTE *)(v12 + 40);
            v17 = *(_QWORD *)(v12 + 48);
            v18 = *(_QWORD *)(v12 + 56);
            v19 = *(_QWORD *)(v12 + 64);
            v20 = &v11[9 * v8];
            v21 = *v20;
            v22 = v20[1];
            v23 = v20[2];
            v24 = v20[3];
            v25 = v20[4];
            v36 = *((_BYTE *)v20 + 40);
            v26 = v20[6];
            v27 = v20[7];
            v28 = v20[8];
            v34 = *(_QWORD *)v12;
            swift_retain();
            v33 = v13;
            v3 = v37;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v35 = v28;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v29 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v29 = v21;
            *(_QWORD *)(v29 + 8) = v22;
            *(_QWORD *)(v29 + 16) = v23;
            *(_QWORD *)(v29 + 24) = v24;
            *(_QWORD *)(v29 + 32) = v25;
            *(_BYTE *)(v29 + 40) = v36;
            *(_QWORD *)(v29 + 48) = v26;
            *(_QWORD *)(v29 + 56) = v27;
            *(_QWORD *)(v29 + 64) = v35;
            if (v8 >= v3[2])
              goto LABEL_30;
            v30 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v30 = v34;
            *(_QWORD *)(v30 + 8) = v33;
            *(_QWORD *)(v30 + 16) = v14;
            *(_QWORD *)(v30 + 24) = v15;
            *(_QWORD *)(v30 + 32) = v16;
            *(_BYTE *)(v30 + 40) = v32;
            *(_QWORD *)(v30 + 48) = v17;
            *(_QWORD *)(v30 + 56) = v18;
            *(_QWORD *)(v30 + 64) = v19;
            *(_QWORD *)a1 = v3;
            a2 = v31;
          }
          v9 = __OFADD__(v6++, 1);
          if (v9)
            goto LABEL_25;
        }
        v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v23 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v10 = v3[2];
            if (v6 >= v10)
              goto LABEL_27;
            if (v8 >= v10)
              goto LABEL_28;
            v11 = v3 + 4;
            v12 = (uint64_t)&v3[5 * v6 + 4];
            v29 = v3;
            v13 = *(_QWORD *)(v12 + 8);
            v14 = *(_QWORD *)(v12 + 16);
            v24 = *(_BYTE *)(v12 + 24);
            v15 = *(_QWORD *)(v12 + 32);
            v16 = &v11[5 * v8];
            v18 = *v16;
            v17 = v16[1];
            v19 = v16[2];
            v27 = *((_BYTE *)v16 + 24);
            v20 = v16[4];
            v26 = *(_QWORD *)v12;
            swift_retain();
            v25 = v13;
            v3 = v29;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            v28 = v19;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v21 = (uint64_t)&v3[5 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v21 = v18;
            *(_QWORD *)(v21 + 8) = v17;
            *(_QWORD *)(v21 + 16) = v28;
            *(_BYTE *)(v21 + 24) = v27;
            *(_QWORD *)(v21 + 32) = v20;
            if (v8 >= v3[2])
              goto LABEL_30;
            v22 = (uint64_t)&v3[5 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v22 = v26;
            *(_QWORD *)(v22 + 8) = v25;
            *(_QWORD *)(v22 + 16) = v14;
            *(_BYTE *)(v22 + 24) = v24;
            *(_QWORD *)(v22 + 32) = v15;
            *(_QWORD *)a1 = v3;
            a2 = v23;
          }
          v9 = __OFADD__(v6++, 1);
          if (v9)
            goto LABEL_25;
        }
        v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t result;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v8)
    return v7[2];
  v10 = 0;
  while (1)
  {
    v11 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
    if (v2)
      return v10;
    if ((v11 & 1) != 0)
    {
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v12 != v7[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v12, a2);
        if ((result & 1) == 0)
        {
          if (v10 != v12)
          {
            if ((v10 & 0x8000000000000000) != 0)
              goto LABEL_27;
            v16 = v7[2];
            if (v10 >= v16)
              goto LABEL_28;
            if (v12 >= v16)
              goto LABEL_29;
            v17 = &v7[6 * v10 + 4];
            v18 = v17[1];
            v4 = v17[2];
            v5 = v17[3];
            v6 = v17[4];
            v19 = v17[5];
            v20 = &v7[6 * v12 + 4];
            v21 = *v20;
            v22 = v20[1];
            v23 = v20[2];
            v24 = v20[3];
            v25 = v20[4];
            v26 = v20[5];
            v30 = *v17;
            swift_retain();
            swift_bridgeObjectRetain();
            v29 = v19;
            swift_bridgeObjectRetain();
            swift_retain();
            v32 = v22;
            swift_bridgeObjectRetain();
            v31 = v26;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
              v7 = (_QWORD *)result;
            }
            if (v10 >= v7[2])
              goto LABEL_30;
            v28 = v18;
            v3 = v7 + 4;
            v27 = &v7[6 * v10 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v27 = v21;
            v27[1] = v32;
            v27[2] = v23;
            v27[3] = v24;
            v27[4] = v25;
            v27[5] = v31;
            if (v12 >= v7[2])
              goto LABEL_31;
LABEL_10:
            v13 = &v3[6 * v12];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v13 = v30;
            v13[1] = v28;
            v13[2] = v4;
            v13[3] = v5;
            v13[4] = v6;
            v13[5] = v29;
            *(_QWORD *)a1 = v7;
          }
          v15 = __OFADD__(v10++, 1);
          if (v15)
            goto LABEL_26;
        }
        v15 = __OFADD__(v12++, 1);
        if (v15)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v10;
    }
    if (v8 == ++v10)
      return v7[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v8;
  char v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  BOOL v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[8];
  _OWORD v55[8];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v5)
    return v4[2];
  v8 = 0;
  while (1)
  {
    v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
    if (v2)
      return v8;
    if ((v9 & 1) != 0)
    {
      v10 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v10 != v4[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
        if ((result & 1) == 0)
        {
          if (v8 != v10)
          {
            if ((v8 & 0x8000000000000000) != 0)
              goto LABEL_27;
            v26 = v4[2];
            if (v8 >= v26)
              goto LABEL_28;
            v27 = (__int128 *)&v4[16 * v8 + 4];
            v28 = *v27;
            v29 = v27[1];
            v30 = v27[3];
            v58 = v27[2];
            v59 = v30;
            v56 = v28;
            v57 = v29;
            v31 = v27[4];
            v32 = v27[5];
            v33 = v27[7];
            v62 = v27[6];
            v63 = v33;
            v60 = v31;
            v61 = v32;
            if (v10 >= v26)
              goto LABEL_29;
            v34 = (__int128 *)&v4[16 * v10 + 4];
            v35 = *v34;
            v36 = v34[1];
            v37 = v34[3];
            v66 = v34[2];
            v67 = v37;
            v64 = v35;
            v65 = v36;
            v38 = v34[4];
            v39 = v34[5];
            v40 = v34[7];
            v70 = v34[6];
            v71 = v40;
            v68 = v38;
            v69 = v39;
            outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)&v56);
            outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)&v64);
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
              v4 = (_QWORD *)result;
            }
            if (v8 >= v4[2])
              goto LABEL_30;
            v3 = v4 + 4;
            v41 = (__int128 *)&v4[16 * v8 + 4];
            v42 = *v41;
            v43 = v41[1];
            v44 = v41[3];
            v54[2] = v41[2];
            v54[3] = v44;
            v54[0] = v42;
            v54[1] = v43;
            v45 = v41[4];
            v46 = v41[5];
            v47 = v41[7];
            v54[6] = v41[6];
            v54[7] = v47;
            v54[4] = v45;
            v54[5] = v46;
            result = outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v54);
            v49 = v68;
            v48 = v69;
            v50 = v70;
            v41[7] = v71;
            v51 = v67;
            v53 = v64;
            v52 = v65;
            v41[2] = v66;
            v41[3] = v51;
            *v41 = v53;
            v41[1] = v52;
            v41[5] = v48;
            v41[6] = v50;
            v41[4] = v49;
            if (v10 >= v4[2])
              goto LABEL_31;
LABEL_10:
            v11 = (__int128 *)&v3[16 * v10];
            v12 = *v11;
            v13 = v11[1];
            v14 = v11[3];
            v55[2] = v11[2];
            v55[3] = v14;
            v55[0] = v12;
            v55[1] = v13;
            v15 = v11[4];
            v16 = v11[5];
            v17 = v11[7];
            v55[6] = v11[6];
            v55[7] = v17;
            v55[4] = v15;
            v55[5] = v16;
            result = outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v55);
            v19 = v59;
            v21 = v56;
            v20 = v57;
            v11[2] = v58;
            v11[3] = v19;
            *v11 = v21;
            v11[1] = v20;
            v22 = v63;
            v24 = v60;
            v23 = v61;
            v11[6] = v62;
            v11[7] = v22;
            v11[4] = v24;
            v11[5] = v23;
            *(_QWORD *)a1 = v4;
          }
          v25 = __OFADD__(v8++, 1);
          if (v25)
            goto LABEL_26;
        }
        v25 = __OFADD__(v10++, 1);
        if (v25)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v8;
    }
    if (v5 == ++v8)
      return v4[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v28 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v10 = v3[2];
            if (v6 >= v10)
              goto LABEL_27;
            if (v8 >= v10)
              goto LABEL_28;
            v11 = (uint64_t)&v3[14 * v6 + 4];
            v12 = *(_QWORD *)(v11 + 8);
            v51 = *(_QWORD *)(v11 + 24);
            v52 = *(_QWORD *)(v11 + 16);
            v50 = *(_QWORD *)(v11 + 32);
            v48 = *(_QWORD *)(v11 + 48);
            v49 = *(_QWORD *)(v11 + 40);
            v46 = *(_QWORD *)(v11 + 64);
            v47 = *(_QWORD *)(v11 + 56);
            v13 = *(_QWORD *)(v11 + 80);
            v14 = *(_QWORD *)(v11 + 88);
            v15 = *(_BYTE *)(v11 + 96);
            v44 = *(_QWORD *)(v11 + 104);
            v45 = *(_QWORD *)(v11 + 72);
            v16 = (uint64_t)&v3[14 * v8 + 4];
            v71 = *(_QWORD *)v16;
            v67 = *(_QWORD *)(v16 + 16);
            v69 = *(_QWORD *)(v16 + 8);
            v63 = *(_QWORD *)(v16 + 32);
            v65 = *(_QWORD *)(v16 + 24);
            v59 = *(_QWORD *)(v16 + 48);
            v61 = *(_QWORD *)(v16 + 40);
            v57 = *(_QWORD *)(v16 + 64);
            v58 = *(_QWORD *)(v16 + 56);
            v55 = *(_QWORD *)(v16 + 80);
            v56 = *(_QWORD *)(v16 + 72);
            v17 = *(_BYTE *)(v16 + 96);
            v53 = *(_QWORD *)(v16 + 104);
            v54 = *(_QWORD *)(v16 + 88);
            v40 = *(_QWORD *)v11;
            swift_retain();
            v39 = v12;
            swift_bridgeObjectRetain();
            v37 = v15;
            v38 = v14;
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v52, v51, v50, v49, v48, v47, v46, v45, v13, v14, v15);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            v41 = v17;
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v67, v65, v63, v61, v59, v58, v57, v56, v55, v54, v17);
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v18 = v3 + 4;
            v43 = v3;
            v19 = (uint64_t)&v3[14 * v6 + 4];
            v35 = *(_QWORD *)(v19 + 24);
            v36 = *(_QWORD *)(v19 + 16);
            v33 = *(_QWORD *)(v19 + 40);
            v34 = *(_QWORD *)(v19 + 32);
            v31 = *(_QWORD *)(v19 + 56);
            v32 = *(_QWORD *)(v19 + 48);
            v20 = *(_QWORD *)(v19 + 80);
            v29 = *(_QWORD *)(v19 + 72);
            v30 = *(_QWORD *)(v19 + 64);
            v21 = *(_QWORD *)(v19 + 88);
            v22 = *(_BYTE *)(v19 + 96);
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v36, v35, v34, v33, v32, v31, v30, v29, v20, v21, v22);
            result = swift_bridgeObjectRelease();
            *(_QWORD *)v19 = v71;
            *(_QWORD *)(v19 + 8) = v69;
            *(_QWORD *)(v19 + 16) = v67;
            *(_QWORD *)(v19 + 24) = v65;
            *(_QWORD *)(v19 + 32) = v63;
            *(_QWORD *)(v19 + 40) = v61;
            *(_QWORD *)(v19 + 48) = v59;
            *(_QWORD *)(v19 + 56) = v58;
            *(_QWORD *)(v19 + 64) = v57;
            *(_QWORD *)(v19 + 72) = v56;
            *(_QWORD *)(v19 + 80) = v55;
            *(_QWORD *)(v19 + 88) = v54;
            *(_BYTE *)(v19 + 96) = v41;
            *(_QWORD *)(v19 + 104) = v53;
            if (v8 >= v43[2])
              goto LABEL_30;
            v23 = &v18[14 * v8];
            v72 = v23[2];
            v68 = v23[4];
            v70 = v23[3];
            v24 = v23[6];
            v64 = v23[7];
            v66 = v23[5];
            v25 = v23[10];
            v60 = v23[9];
            v62 = v23[8];
            v26 = v23[11];
            v27 = *((_BYTE *)v23 + 96);
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v72, v70, v68, v66, v24, v64, v62, v60, v25, v26, v27);
            result = swift_bridgeObjectRelease();
            *v23 = v40;
            v23[1] = v39;
            v23[2] = v52;
            v23[3] = v51;
            v23[4] = v50;
            v23[5] = v49;
            v23[6] = v48;
            v23[7] = v47;
            v23[8] = v46;
            v23[9] = v45;
            v23[10] = v13;
            v23[11] = v38;
            *((_BYTE *)v23 + 96) = v37;
            v23[13] = v44;
            v3 = v43;
            *(_QWORD *)a1 = v43;
            a2 = v28;
          }
          v9 = __OFADD__(v6++, 1);
          if (v9)
            goto LABEL_25;
        }
        v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v20 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v11 = v3[2];
            if (v6 >= v11)
              goto LABEL_27;
            if (v8 >= v11)
              goto LABEL_28;
            v12 = (uint64_t)&v3[9 * v6 + 4];
            v13 = *(_QWORD *)(v12 + 8);
            v26 = *(_QWORD *)(v12 + 16);
            v25 = *(_QWORD *)(v12 + 24);
            v24 = *(_QWORD *)(v12 + 32);
            v23 = *(_QWORD *)(v12 + 40);
            v22 = *(_QWORD *)(v12 + 48);
            v21 = *(_BYTE *)(v12 + 56);
            v14 = *(_QWORD *)(v12 + 64);
            v15 = (uint64_t)&v3[9 * v8 + 4];
            v16 = *(_QWORD *)v15;
            v17 = *(_QWORD *)(v15 + 8);
            v33 = *(_QWORD *)(v15 + 24);
            v34 = *(_QWORD *)(v15 + 16);
            v31 = *(_QWORD *)(v15 + 40);
            v32 = *(_QWORD *)(v15 + 32);
            v30 = *(_QWORD *)(v15 + 48);
            v29 = *(_BYTE *)(v15 + 56);
            v18 = *(_QWORD *)(v15 + 64);
            v27 = *(_QWORD *)v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            v28 = v18;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v19 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v19 = v16;
            *(_QWORD *)(v19 + 8) = v17;
            *(_QWORD *)(v19 + 16) = v34;
            *(_QWORD *)(v19 + 24) = v33;
            *(_QWORD *)(v19 + 32) = v32;
            *(_QWORD *)(v19 + 40) = v31;
            *(_QWORD *)(v19 + 48) = v30;
            *(_BYTE *)(v19 + 56) = v29;
            *(_QWORD *)(v19 + 64) = v28;
            if (v8 >= v3[2])
              goto LABEL_30;
            v9 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v9 = v27;
            *(_QWORD *)(v9 + 8) = v13;
            *(_QWORD *)(v9 + 16) = v26;
            *(_QWORD *)(v9 + 24) = v25;
            *(_QWORD *)(v9 + 32) = v24;
            *(_QWORD *)(v9 + 40) = v23;
            *(_QWORD *)(v9 + 48) = v22;
            *(_BYTE *)(v9 + 56) = v21;
            *(_QWORD *)(v9 + 64) = v14;
            *(_QWORD *)a1 = v3;
            a2 = v20;
          }
          v10 = __OFADD__(v6++, 1);
          if (v10)
            goto LABEL_25;
        }
        v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v22 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v11 = v3[2];
            if (v6 >= v11)
              goto LABEL_27;
            if (v8 >= v11)
              goto LABEL_28;
            v12 = (uint64_t)&v3[10 * v6 + 4];
            v13 = *(_QWORD *)(v12 + 8);
            v14 = *(_DWORD *)(v12 + 16);
            v28 = *(_QWORD *)(v12 + 24);
            v27 = *(_QWORD *)(v12 + 32);
            v26 = *(_QWORD *)(v12 + 40);
            v25 = *(_QWORD *)(v12 + 48);
            v24 = *(_QWORD *)(v12 + 56);
            v23 = *(_BYTE *)(v12 + 64);
            v15 = *(_QWORD *)(v12 + 72);
            v16 = (uint64_t)&v3[10 * v8 + 4];
            v17 = *(_QWORD *)v16;
            v18 = *(_QWORD *)(v16 + 8);
            v19 = *(_DWORD *)(v16 + 16);
            v35 = *(_QWORD *)(v16 + 32);
            v36 = *(_QWORD *)(v16 + 24);
            v33 = *(_QWORD *)(v16 + 48);
            v34 = *(_QWORD *)(v16 + 40);
            v32 = *(_QWORD *)(v16 + 56);
            v31 = *(_BYTE *)(v16 + 64);
            v20 = *(_QWORD *)(v16 + 72);
            v29 = *(_QWORD *)v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            v30 = v20;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v21 = (uint64_t)&v3[10 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v21 = v17;
            *(_QWORD *)(v21 + 8) = v18;
            *(_DWORD *)(v21 + 16) = v19;
            *(_QWORD *)(v21 + 24) = v36;
            *(_QWORD *)(v21 + 32) = v35;
            *(_QWORD *)(v21 + 40) = v34;
            *(_QWORD *)(v21 + 48) = v33;
            *(_QWORD *)(v21 + 56) = v32;
            *(_BYTE *)(v21 + 64) = v31;
            *(_QWORD *)(v21 + 72) = v30;
            if (v8 >= v3[2])
              goto LABEL_30;
            v9 = (uint64_t)&v3[10 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *(_QWORD *)v9 = v29;
            *(_QWORD *)(v9 + 8) = v13;
            *(_DWORD *)(v9 + 16) = v14;
            *(_QWORD *)(v9 + 24) = v28;
            *(_QWORD *)(v9 + 32) = v27;
            *(_QWORD *)(v9 + 40) = v26;
            *(_QWORD *)(v9 + 48) = v25;
            *(_QWORD *)(v9 + 56) = v24;
            *(_BYTE *)(v9 + 64) = v23;
            *(_QWORD *)(v9 + 72) = v15;
            *(_QWORD *)a1 = v3;
            a2 = v22;
          }
          v10 = __OFADD__(v6++, 1);
          if (v10)
            goto LABEL_25;
        }
        v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v6 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2)
      return v6;
    if ((result & 1) != 0)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      v28 = a2;
      while (v8 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v11 = v3[2];
            if (v6 >= v11)
              goto LABEL_27;
            if (v8 >= v11)
              goto LABEL_28;
            v12 = &v3[8 * v6 + 4];
            v13 = v12[1];
            v14 = v12[4];
            v30 = v12[3];
            v31 = v12[2];
            v15 = v12[5];
            v16 = v12[6];
            v17 = v12[7];
            v18 = &v3[8 * v8 + 4];
            v19 = *v18;
            v20 = v18[1];
            v21 = v18[2];
            v22 = v18[3];
            v24 = v18[4];
            v23 = v18[5];
            v25 = v18[6];
            v26 = v18[7];
            v32 = *v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              v3 = (_QWORD *)result;
            }
            if (v6 >= v3[2])
              goto LABEL_29;
            v29 = v13;
            v27 = &v3[8 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v27 = v19;
            v27[1] = v20;
            v27[2] = v21;
            v27[3] = v22;
            v27[4] = v24;
            v27[5] = v23;
            v27[6] = v25;
            v27[7] = v26;
            if (v8 >= v3[2])
              goto LABEL_30;
            v9 = &v3[8 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v9 = v32;
            v9[1] = v29;
            v9[2] = v31;
            v9[3] = v30;
            v9[4] = v14;
            v9[5] = v15;
            v9[6] = v16;
            a2 = v28;
            v9[7] = v17;
            *(_QWORD *)a1 = v3;
          }
          v10 = __OFADD__(v6++, 1);
          if (v10)
            goto LABEL_25;
        }
        v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6)
      return v3[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t result;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v6)
    return v5[2];
  v8 = 0;
  while (1)
  {
    v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
    if (v2)
      return v8;
    if ((v9 & 1) != 0)
    {
      v10 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v10 != v5[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
        if ((result & 1) == 0)
        {
          if (v8 != v10)
          {
            if ((v8 & 0x8000000000000000) != 0)
              goto LABEL_27;
            v14 = v5[2];
            if (v8 >= v14)
              goto LABEL_28;
            if (v10 >= v14)
              goto LABEL_29;
            v15 = (uint64_t)&v5[6 * v8 + 4];
            v16 = *(_QWORD *)(v15 + 8);
            v29 = *(_OWORD *)(v15 + 16);
            v4 = *(_QWORD *)(v15 + 32);
            v17 = *(_QWORD *)(v15 + 40);
            v18 = &v5[6 * v10 + 4];
            v19 = *v18;
            v20 = v18[1];
            v21 = v18[2];
            v22 = v18[3];
            v23 = v18[4];
            v24 = v18[5];
            v28 = *(_QWORD *)v15;
            swift_retain();
            swift_bridgeObjectRetain();
            v27 = v17;
            swift_bridgeObjectRetain();
            swift_retain();
            v31 = v20;
            swift_bridgeObjectRetain();
            v30 = v24;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
              v5 = (_QWORD *)result;
            }
            if (v8 >= v5[2])
              goto LABEL_30;
            v26 = v16;
            v3 = v5 + 4;
            v25 = &v5[6 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v25 = v19;
            v25[1] = v31;
            v25[2] = v21;
            v25[3] = v22;
            v25[4] = v23;
            v25[5] = v30;
            if (v10 >= v5[2])
              goto LABEL_31;
LABEL_10:
            v11 = &v3[6 * v10];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_release();
            *v11 = v28;
            v11[1] = v26;
            *((_OWORD *)v11 + 1) = v29;
            v11[4] = v4;
            v11[5] = v27;
            *(_QWORD *)a1 = v5;
          }
          v13 = __OFADD__(v8++, 1);
          if (v13)
            goto LABEL_26;
        }
        v13 = __OFADD__(v10++, 1);
        if (v13)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v8;
    }
    if (v6 == ++v8)
      return v5[2];
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  _BYTE v12[64];
  _BYTE v13[64];

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return v3[2];
  v7 = 0;
  while (1)
  {
    result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
    if (v2)
      return v7;
    if ((result & 1) != 0)
    {
      v9 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      while (v9 != v3[2])
      {
        result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v9, a2);
        if ((result & 1) == 0)
        {
          if (v7 != v9)
          {
            if ((v7 & 0x8000000000000000) != 0)
              goto LABEL_26;
            v11 = v3[2];
            if (v7 >= v11)
              goto LABEL_27;
            result = outlined init with copy of TypesettingLanguage((uint64_t)&v3[8 * v7 + 4], (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            if (v9 >= v11)
              goto LABEL_28;
            outlined init with copy of TypesettingLanguage((uint64_t)&v3[8 * v9 + 4], (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            result = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)a1 = v3;
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              v3 = (_QWORD *)result;
              *(_QWORD *)a1 = result;
            }
            if (v7 >= v3[2])
              goto LABEL_29;
            result = outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v12, (uint64_t)&v3[8 * v7 + 4], (uint64_t (*)(_QWORD))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            if (v9 >= *(_QWORD *)(*(_QWORD *)a1 + 16))
              goto LABEL_30;
            result = outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v13, *(_QWORD *)a1 + (v9 << 6) + 32, (uint64_t (*)(_QWORD))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            v3 = *(_QWORD **)a1;
          }
          v10 = __OFADD__(v7++, 1);
          if (v10)
            goto LABEL_25;
        }
        v10 = __OFADD__(v9++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v7;
    }
    if (v4 == ++v7)
      return v3[2];
  }
}

uint64_t MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t result;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *TupleTypeMetadata2;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;

  v37 = a4;
  v34 = a5;
  v8 = *(char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = (int *)swift_getTupleTypeMetadata2();
  v10 = type metadata accessor for Optional();
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - v11;
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v31 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v31 - v20;
  v38 = a1;
  v39 = a2;
  v22 = v36;
  result = Collection.firstIndexByOffset(where:)(a1, a2, a3, v8, (uint64_t)v12);
  if (!v22)
  {
    v36 = v21;
    v24 = TupleTypeMetadata2;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)TupleTypeMetadata2 - 1) + 48))(v12, 1, TupleTypeMetadata2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
      return dispatch thunk of Collection.endIndex.getter();
    }
    else
    {
      v25 = *(_QWORD *)&v12[v24[12]];
      TupleTypeMetadata2 = *(int **)(v40 + 32);
      ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v36, v12, AssociatedTypeWitness);
      result = dispatch thunk of Collection.index(after:)();
      v26 = v25 + 1;
      if (!__OFADD__(v25, 1))
      {
        v27 = v40;
        do
        {
          dispatch thunk of Collection.endIndex.getter();
          swift_getAssociatedConformanceWitness();
          v29 = dispatch thunk of static Equatable.== infix(_:_:)();
          v30 = *(void (**)(char *, uint64_t))(v27 + 8);
          v30(v15, AssociatedTypeWitness);
          if ((v29 & 1) != 0)
          {
            v30(v18, AssociatedTypeWitness);
            return ((uint64_t (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2)(v34, v36, AssociatedTypeWitness);
          }
          if ((v38(v26) & 1) == 0)
          {
            dispatch thunk of MutableCollection.swapAt(_:_:)();
            dispatch thunk of Collection.formIndex(after:)();
          }
          result = dispatch thunk of Collection.formIndex(after:)();
          v28 = __OFADD__(v26++, 1);
          v27 = v40;
        }
        while (!v28);
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t RangeReplaceableCollection._remove(atOffsets:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  void (*v59)(_QWORD *, _QWORD);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t TupleTypeMetadata2;
  char *v104;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  _QWORD v119[2];

  v108 = a3;
  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v104 = (char *)&v88 - v6;
  v7 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v102 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v101 = (char *)&v88 - v10;
  v118 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v100 = type metadata accessor for Range();
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v98 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v97 = (char *)&v88 - v13;
  v115 = v7;
  v96 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v107 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v117 = (char *)&v88 - v17;
  v18 = type metadata accessor for IndexSet.RangeView();
  v110 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v109 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexSet.RangeView>();
  v21 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v113 = (uint64_t)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = a2;
  v23 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v111 = (char *)&v88 - v28;
  v90 = type metadata accessor for IndexSet();
  v29 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v31 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v88 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v88 - v36;
  MEMORY[0x24BDAC7A8](v38);
  v89 = (char *)&v88 - v39;
  result = IndexSet.isEmpty.getter();
  if ((result & 1) != 0)
    return result;
  result = dispatch thunk of Collection.count.getter();
  if (__OFSUB__(result, 1))
    goto LABEL_12;
  if (result - 1 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v94 = v23;
  v93 = v26;
  v119[0] = 0;
  v119[1] = result - 1;
  type metadata accessor for ClosedRange<Int>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Int>, MEMORY[0x24BEE08F8]);
  v41 = a1;
  v42 = v89;
  IndexSet.init<A>(integersIn:)();
  v43 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v44 = v90;
  v43(v34, v42, v90);
  v43(v31, v41, v44);
  v45 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
  v95 = v18;
  v46 = v45;
  dispatch thunk of SetAlgebra.symmetricDifference(_:)();
  MEMORY[0x23B7C6B5C](v37, v44, v46);
  v88 = *(void (**)(char *, uint64_t))(v29 + 8);
  v88(v37, v44);
  dispatch thunk of RangeReplaceableCollection.init()();
  IndexSet.count.getter();
  v47 = v95;
  dispatch thunk of RangeReplaceableCollection.reserveCapacity(_:)();
  v48 = v109;
  IndexSet.rangeView.getter();
  v49 = v113;
  IndexSet.RangeView.makeIterator()();
  v92 = *(void (**)(char *, uint64_t))(v110 + 8);
  v92(v48, v47);
  v50 = (uint64_t *)(v49 + *(int *)(v21 + 36));
  v51 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF3E8], MEMORY[0x24BDCF400]);
  v52 = *v50;
  v53 = v51;
  dispatch thunk of Collection.endIndex.getter();
  if (v52 != v119[0])
  {
    v114 = v53;
    v56 = v107;
    v54 = v94;
    v57 = v113;
    v58 = v93;
    v91 = v50;
    while (1)
    {
      v59 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v60 = v57;
      v59(v119, 0);
      v61 = v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v60, v47);
      dispatch thunk of Collection.formIndex(after:)();
      v92(v61, v47);
      v62 = v116;
      v63 = v112;
      Collection.index(atOffset:)();
      Collection.index(atOffset:)();
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v58, v63, v62);
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
        break;
      v64 = TupleTypeMetadata2;
      v65 = v101;
      v66 = &v101[*(int *)(TupleTypeMetadata2 + 48)];
      v67 = v96;
      v68 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
      v69 = v115;
      v68(v101, v117, v115);
      v68(v66, v56, v69);
      v70 = v102;
      v71 = &v102[*(int *)(v64 + 48)];
      v68(v102, v65, v69);
      v68(v71, v66, v69);
      v72 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v73 = v98;
      v72(v98, v70, v69);
      v74 = *(void (**)(char *, uint64_t))(v67 + 8);
      v74(v71, v69);
      v75 = &v70[*(int *)(v64 + 48)];
      v76 = v116;
      v72(v70, v65, v69);
      v72(v75, v66, v69);
      v77 = v100;
      v72(&v73[*(int *)(v100 + 36)], v75, v69);
      v74(v70, v69);
      v78 = v99;
      v79 = v97;
      v80 = v73;
      v81 = v69;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v97, v80, v77);
      v82 = v93;
      dispatch thunk of Collection.subscript.getter();
      v83 = v79;
      v56 = v107;
      v84 = v77;
      v47 = v95;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v83, v84);
      v54 = v94;
      v55 = *(void (**)(char *, uint64_t))(v94 + 8);
      v58 = v82;
      v55(v82, v76);
      swift_getAssociatedConformanceWitness();
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      v74(v56, v81);
      v74(v117, v81);
      v85 = *v91;
      v57 = v113;
      dispatch thunk of Collection.endIndex.getter();
      if (v85 == v119[0])
        goto LABEL_9;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v54 = v94;
  v55 = *(void (**)(char *, uint64_t))(v94 + 8);
LABEL_9:
  v86 = v112;
  v87 = v116;
  v55(v112, v116);
  outlined destroy of TypesettingConfiguration(v113, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<IndexSet.RangeView>);
  v88(v89, v90);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v54 + 32))(v86, v111, v87);
}

uint64_t Collection.firstIndexByOffset(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v30 = a1;
  v31 = a2;
  v29 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - v11;
  dispatch thunk of Collection.startIndex.getter();
  v13 = 0;
  v14 = v32;
  while (1)
  {
    v15 = v5;
    dispatch thunk of Collection.endIndex.getter();
    v16 = a4;
    v17 = a3;
    v18 = v34;
    swift_getAssociatedConformanceWitness();
    a4 = v12;
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v12 = *(char **)(v33 + 8);
    ((void (*)(char *, uint64_t))v12)(v14, v18);
    if ((v19 & 1) != 0)
      goto LABEL_8;
    v20 = v35;
    v21 = v30(v13);
    if (v20)
      return ((uint64_t (*)(char *, uint64_t))v12)(a4, v34);
    v35 = 0;
    if ((v21 & 1) != 0)
      break;
    v12 = a4;
    v5 = v15;
    a3 = v17;
    a4 = v16;
    dispatch thunk of Collection.formIndex(after:)();
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
LABEL_8:
      ((void (*)(char *, uint64_t))v12)(a4, v34);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v29, 1, 1, TupleTypeMetadata2);
    }
  }
  v25 = v34;
  v26 = swift_getTupleTypeMetadata2();
  v27 = *(int *)(v26 + 48);
  v28 = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v29, a4, v25);
  *(_QWORD *)(v28 + v27) = v13;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v28, 0, 1, v26);
}

void type metadata accessor for IndexingIterator<IndexSet.RangeView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<IndexSet.RangeView>)
  {
    type metadata accessor for IndexSet.RangeView();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF3E8], MEMORY[0x24BDCF400]);
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<IndexSet.RangeView>);
  }
}

void type metadata accessor for ClosedRange<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ClosedRange<Int>)
  {
    v0 = type metadata accessor for ClosedRange();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Int>);
  }
}

uint64_t MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t result;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t (*v65)(char *, char *, uint64_t);
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t TupleTypeMetadata2;
  uint64_t v78;
  uint64_t v79;
  void (*AssociatedConformanceWitness)(char *, uint64_t);
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;

  v79 = a4;
  v6 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v74 = (char *)v64 - v11;
  AssociatedConformanceWitness = (void (*)(char *, uint64_t))swift_getAssociatedConformanceWitness();
  v73 = type metadata accessor for Range();
  v69 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v72 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)v64 - v14;
  v15 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v64 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v64 - v23;
  type metadata accessor for Slice<IndexSet>();
  MEMORY[0x24BDAC7A8](v25);
  v71 = (uint64_t)v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Collection.subscript.getter(v71);
  dispatch thunk of Collection.startIndex.getter();
  v67 = a2;
  dispatch thunk of Collection.index(_:offsetBy:)();
  v68 = v15;
  v27 = (void (*)(char *, uint64_t))*((_QWORD *)v15 + 1);
  v76 = v21;
  v82 = v27;
  v27(v21, AssociatedTypeWitness);
  v78 = a3;
  v70 = v6;
  dispatch thunk of Collection.startIndex.getter();
  v81 = v18;
  v83 = v24;
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v29 = TupleTypeMetadata2;
    v30 = v74;
    v31 = &v74[*(int *)(TupleTypeMetadata2 + 48)];
    v32 = v68;
    v33 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v68 + 4);
    v33(v74, v81, AssociatedTypeWitness);
    v34 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v32 + 2);
    v34(v31, v83, AssociatedTypeWitness);
    v35 = &v9[*(int *)(v29 + 48)];
    v34(v9, v30, AssociatedTypeWitness);
    v66 = v34;
    v34(v35, v31, AssociatedTypeWitness);
    v36 = v72;
    v33(v72, v9, AssociatedTypeWitness);
    v37 = v35;
    v38 = v82;
    v82(v37, AssociatedTypeWitness);
    v39 = v38;
    v40 = &v9[*(int *)(v29 + 48)];
    v33(v9, v30, AssociatedTypeWitness);
    v33(v40, v31, AssociatedTypeWitness);
    v41 = v73;
    v33(&v36[*(int *)(v73 + 36)], v40, AssociatedTypeWitness);
    v68 = v9;
    v39(v9, AssociatedTypeWitness);
    v42 = v69;
    v43 = v75;
    v65 = *(uint64_t (**)(char *, char *, uint64_t))(v69 + 32);
    v44 = v65(v75, v36, v41);
    MEMORY[0x24BDAC7A8](v44);
    v64[-2] = v71;
    v45 = (uint64_t)v76;
    MutableCollection.stablePartitionByOffset(in:startOffset:isSuffixElementAtOffset:)(v43, 0, (uint64_t (*)(uint64_t, double))partial apply for closure #1 in MutableCollection.move(fromOffsets:toOffset:), (uint64_t)&v64[-4], v78, v79, (uint64_t)v76);
    v64[1] = 0;
    v46 = *(void (**)(char *, uint64_t))(v42 + 8);
    v46(v43, v41);
    v82((char *)v45, AssociatedTypeWitness);
    dispatch thunk of Collection.endIndex.getter();
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v47 = TupleTypeMetadata2;
      v48 = *(int *)(TupleTypeMetadata2 + 48);
      AssociatedConformanceWitness = v46;
      v49 = v74;
      v50 = &v74[v48];
      v51 = v83;
      v52 = v66;
      v66(v74, v83, AssociatedTypeWitness);
      v33(v50, v81, AssociatedTypeWitness);
      v53 = v68;
      v54 = &v68[*(int *)(v47 + 48)];
      v52(v68, v49, AssociatedTypeWitness);
      v52(v54, v50, AssociatedTypeWitness);
      v55 = v72;
      v33(v72, v53, AssociatedTypeWitness);
      v56 = v54;
      v57 = v82;
      v82(v56, AssociatedTypeWitness);
      v58 = &v53[*(int *)(v47 + 48)];
      v33(v53, v49, AssociatedTypeWitness);
      v33(v58, v50, AssociatedTypeWitness);
      v59 = v73;
      v33(&v55[*(int *)(v73 + 36)], v58, AssociatedTypeWitness);
      v57(v53, AssociatedTypeWitness);
      v60 = v75;
      v61 = v65(v75, v55, v59);
      MEMORY[0x24BDAC7A8](v61);
      v62 = v71;
      v64[-2] = v71;
      v63 = (uint64_t)v76;
      MutableCollection.stablePartitionByOffset(in:startOffset:isSuffixElementAtOffset:)(v60, v67, (uint64_t (*)(uint64_t, double))partial apply for closure #2 in MutableCollection.move(fromOffsets:toOffset:), (uint64_t)&v64[-4], v78, v79, (uint64_t)v76);
      AssociatedConformanceWitness(v60, v59);
      v57((char *)v63, AssociatedTypeWitness);
      v57(v51, AssociatedTypeWitness);
      return outlined destroy of TypesettingConfiguration(v62, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, _QWORD);
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t result;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111[40];
  uint64_t v112;

  v98 = a1;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  v109 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v107 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v105 = (char *)&v89 - v6;
  type metadata accessor for Range<IndexSet.Index>();
  v106 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v108 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v110 = (uint64_t)&v89 - v10;
  v11 = type metadata accessor for IndexSet.Index();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320];
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v91 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v94 = (char *)&v89 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v93 = (char *)&v89 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v95 = (char *)&v89 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v96 = (char *)&v89 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v89 - v24;
  type metadata accessor for Slice<IndexSet>();
  v27 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v90 = (uint64_t)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v89 - v30;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v89 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v89 = (char *)&v89 - v36;
  v92 = a2;
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
  v112 = v13;
  v37 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v37(v25, v34, v11);
  v38 = &v34[*(int *)(v27 + 36)];
  v39 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, v12, MEMORY[0x24BDCF330]);
  v101 = v25;
  v102 = v38;
  v99 = v39;
  v40 = (uint64_t)v31;
  LOBYTE(v31) = dispatch thunk of static Equatable.== infix(_:_:)();
  v100 = v34;
  outlined init with copy of TypesettingLanguage((uint64_t)v34, v40, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
  v103 = v37;
  v104 = v27;
  if ((v31 & 1) != 0)
  {
LABEL_5:
    outlined destroy of TypesettingConfiguration(v40, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    v56 = v101;
  }
  else
  {
    v97 = v40;
    while (1)
    {
      v41 = v40 + *(int *)(v27 + 36);
      v42 = v109;
      v43 = v105;
      v44 = v40;
      v45 = &v105[*(int *)(v109 + 48)];
      v37(v105, (char *)v44, v11);
      v37(v45, (char *)v41, v11);
      v46 = v107;
      v47 = &v107[*(int *)(v42 + 48)];
      v37(v107, v43, v11);
      v37(v47, v45, v11);
      v48 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
      v49 = v108;
      v48(v108, v46, v11);
      v50 = *(void (**)(char *, uint64_t))(v112 + 8);
      v50(v47, v11);
      v51 = *(int *)(v42 + 48);
      v27 = v104;
      v52 = &v46[v51];
      v48(v46, v43, v11);
      v48(v52, v45, v11);
      v48(&v49[*(int *)(v106 + 36)], v52, v11);
      v50(v46, v11);
      v53 = (uint64_t)v49;
      v37 = v103;
      v54 = v110;
      outlined init with take of Range<IndexSet.Index>(v53, v110);
      v55 = v97;
      type metadata accessor for IndexSet();
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
      v56 = v101;
      dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
      outlined destroy of TypesettingConfiguration(v54, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
      v57 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v59 = *v58;
      v57(v111, 0);
      outlined destroy of TypesettingConfiguration(v55, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
      if (v59 >= v98)
        break;
      v60 = (uint64_t)v100;
      dispatch thunk of Collection.formIndex(after:)();
      v61 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined init with copy of TypesettingLanguage(v60, v55, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
      v40 = v55;
      if ((v61 & 1) != 0)
        goto LABEL_5;
    }
  }
  v62 = v96;
  v37(v96, v56, v11);
  v63 = v56;
  v64 = v95;
  v37(v95, v102, v11);
  v65 = v93;
  v37(v93, v62, v11);
  v66 = v94;
  v37(v94, v64, v11);
  v67 = *(char **)(v112 + 8);
  ((void (*)(char *, uint64_t))v67)(v63, v11);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF328]);
  LOBYTE(v62) = dispatch thunk of static Comparable.<= infix(_:_:)();
  ((void (*)(char *, uint64_t))v67)(v66, v11);
  v102 = v67;
  result = ((uint64_t (*)(char *, uint64_t))v67)(v65, v11);
  if ((v62 & 1) != 0)
  {
    v69 = v109;
    v70 = v105;
    v71 = &v105[*(int *)(v109 + 48)];
    v72 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
    v72(v105, v96, v11);
    v72(v71, v64, v11);
    v73 = v11;
    v74 = v107;
    v75 = &v107[*(int *)(v69 + 48)];
    v37(v107, v70, v73);
    v37(v75, v71, v73);
    v76 = (uint64_t)v108;
    v72(v108, v74, v73);
    v77 = v102;
    ((void (*)(char *, uint64_t))v102)(v75, v73);
    v78 = &v74[*(int *)(v69 + 48)];
    v72(v74, v70, v73);
    v72(v78, v71, v73);
    v72((char *)(v76 + *(int *)(v106 + 36)), v78, v73);
    v79 = v73;
    ((void (*)(char *, uint64_t))v77)(v74, v73);
    v80 = v110;
    outlined init with take of Range<IndexSet.Index>(v76, v110);
    v81 = v89;
    v82 = (uint64_t)v100;
    specialized Slice.subscript.getter(v80, v89);
    outlined destroy of TypesettingConfiguration(v82, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    outlined destroy of TypesettingConfiguration(v80, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
    v83 = v92;
    outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v81, v92, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    v84 = v90;
    outlined init with copy of TypesettingLanguage(v83, v90, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    v85 = (uint64_t)v91;
    v103(v91, (char *)v84, v79);
    v86 = v84;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v87 = 0;
    }
    else
    {
      v88 = specialized Slice.subscript.getter(v85);
      v87 = v88 == v98;
    }
    ((void (*)(uint64_t, uint64_t))v77)(v85, v79);
    outlined destroy of TypesettingConfiguration(v86, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    return v87;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t MutableCollection.stablePartitionByOffset(in:startOffset:isSuffixElementAtOffset:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  v12 = dispatch thunk of Collection.distance(from:to:)();
  return MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)(a1, a2, v12, a3, a4, a5, a6, a7);
}

uint64_t closure #2 in MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, _QWORD);
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t result;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char v110[40];
  uint64_t v111;

  v97 = a1;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  v108 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v106 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v104 = (char *)&v88 - v6;
  type metadata accessor for Range<IndexSet.Index>();
  v105 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v107 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v109 = (uint64_t)&v88 - v10;
  v11 = type metadata accessor for IndexSet.Index();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320];
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v90 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v93 = (char *)&v88 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v92 = (char *)&v88 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v94 = (char *)&v88 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v95 = (char *)&v88 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v88 - v24;
  type metadata accessor for Slice<IndexSet>();
  v27 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v89 = (uint64_t)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v88 - v30;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v88 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v88 = (char *)&v88 - v36;
  v91 = a2;
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
  v111 = v13;
  v37 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v37(v25, v34, v11);
  v38 = &v34[*(int *)(v27 + 36)];
  v39 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, v12, MEMORY[0x24BDCF330]);
  v100 = v25;
  v101 = v38;
  v98 = v39;
  v40 = (uint64_t)v31;
  LOBYTE(v31) = dispatch thunk of static Equatable.== infix(_:_:)();
  v99 = v34;
  outlined init with copy of TypesettingLanguage((uint64_t)v34, v40, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
  v102 = v37;
  v103 = v27;
  if ((v31 & 1) != 0)
  {
LABEL_5:
    outlined destroy of TypesettingConfiguration(v40, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    v56 = v100;
  }
  else
  {
    v96 = v40;
    while (1)
    {
      v41 = v40 + *(int *)(v27 + 36);
      v42 = v108;
      v43 = v104;
      v44 = v40;
      v45 = &v104[*(int *)(v108 + 48)];
      v37(v104, (char *)v44, v11);
      v37(v45, (char *)v41, v11);
      v46 = v106;
      v47 = &v106[*(int *)(v42 + 48)];
      v37(v106, v43, v11);
      v37(v47, v45, v11);
      v48 = *(void (**)(char *, char *, uint64_t))(v111 + 32);
      v49 = v107;
      v48(v107, v46, v11);
      v50 = *(void (**)(char *, uint64_t))(v111 + 8);
      v50(v47, v11);
      v51 = *(int *)(v42 + 48);
      v27 = v103;
      v52 = &v46[v51];
      v48(v46, v43, v11);
      v48(v52, v45, v11);
      v48(&v49[*(int *)(v105 + 36)], v52, v11);
      v50(v46, v11);
      v53 = (uint64_t)v49;
      v37 = v102;
      v54 = v109;
      outlined init with take of Range<IndexSet.Index>(v53, v109);
      v55 = v96;
      type metadata accessor for IndexSet();
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
      v56 = v100;
      dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
      outlined destroy of TypesettingConfiguration(v54, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
      v57 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v59 = *v58;
      v57(v110, 0);
      outlined destroy of TypesettingConfiguration(v55, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
      if (v59 >= v97)
        break;
      v60 = (uint64_t)v99;
      dispatch thunk of Collection.formIndex(after:)();
      v61 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined init with copy of TypesettingLanguage(v60, v55, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
      v40 = v55;
      if ((v61 & 1) != 0)
        goto LABEL_5;
    }
  }
  v62 = v95;
  v37(v95, v56, v11);
  v63 = v56;
  v64 = v94;
  v37(v94, v101, v11);
  v65 = v92;
  v37(v92, v62, v11);
  v66 = v93;
  v37(v93, v64, v11);
  v67 = *(char **)(v111 + 8);
  ((void (*)(char *, uint64_t))v67)(v63, v11);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF328]);
  LOBYTE(v62) = dispatch thunk of static Comparable.<= infix(_:_:)();
  ((void (*)(char *, uint64_t))v67)(v66, v11);
  v101 = v67;
  result = ((uint64_t (*)(char *, uint64_t))v67)(v65, v11);
  if ((v62 & 1) != 0)
  {
    v69 = v108;
    v70 = v104;
    v71 = &v104[*(int *)(v108 + 48)];
    v72 = *(void (**)(char *, char *, uint64_t))(v111 + 32);
    v72(v104, v95, v11);
    v72(v71, v64, v11);
    v73 = v11;
    v74 = v106;
    v75 = &v106[*(int *)(v69 + 48)];
    v37(v106, v70, v73);
    v37(v75, v71, v73);
    v76 = (uint64_t)v107;
    v72(v107, v74, v73);
    v77 = v101;
    ((void (*)(char *, uint64_t))v101)(v75, v73);
    v78 = &v74[*(int *)(v69 + 48)];
    v72(v74, v70, v73);
    v72(v78, v71, v73);
    v72((char *)(v76 + *(int *)(v105 + 36)), v78, v73);
    v79 = v73;
    ((void (*)(char *, uint64_t))v77)(v74, v73);
    v80 = v109;
    outlined init with take of Range<IndexSet.Index>(v76, v109);
    v81 = v88;
    v82 = (uint64_t)v99;
    specialized Slice.subscript.getter(v80, v88);
    outlined destroy of TypesettingConfiguration(v82, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    outlined destroy of TypesettingConfiguration(v80, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
    v83 = v91;
    outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v81, v91, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    v84 = v89;
    outlined init with copy of TypesettingLanguage(v83, v89, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
    v85 = (uint64_t)v90;
    v102(v90, (char *)v84, v79);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      ((void (*)(uint64_t, uint64_t))v77)(v85, v79);
      outlined destroy of TypesettingConfiguration(v84, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
      return 1;
    }
    else
    {
      v86 = v84;
      v87 = specialized Slice.subscript.getter(v85);
      ((void (*)(uint64_t, uint64_t))v77)(v85, v79);
      outlined destroy of TypesettingConfiguration(v86, (uint64_t (*)(_QWORD))type metadata accessor for Slice<IndexSet>);
      return v87 != v97;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #2 in MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in MutableCollection.move(fromOffsets:toOffset:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, double)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  double v34;
  uint64_t v35;
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t (*v60)(uint64_t, char *, uint64_t);
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  char *v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, char *, uint64_t);
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t TupleTypeMetadata2;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, double);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v117 = a5;
  v118 = a4;
  v119 = a2;
  v115 = a8;
  v112 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v113 = (char *)&v95 - v15;
  v120 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v116 = type metadata accessor for Range();
  MEMORY[0x24BDAC7A8](v116);
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8]((char *)&v95 - v18);
  MEMORY[0x24BDAC7A8](v19);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  MEMORY[0x24BDAC7A8](v25);
  v34 = MEMORY[0x24BDAC7A8](v26);
  v36 = (char *)&v95 - v35;
  if (a3 != 1)
  {
    if (!a3)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t, double))(v20 + 16))(v115, (char *)a1, AssociatedTypeWitness, v34);
    v111 = v28;
    v108 = v32;
    v109 = v13;
    v104 = v29;
    v102 = v27;
    v107 = (char *)v33;
    v96 = v31;
    v98 = a3;
    if (a3 >= 0)
      v39 = a3;
    else
      v39 = a3 + 1;
    v40 = v30;
    v106 = v39 >> 1;
    dispatch thunk of Collection.index(_:offsetBy:)();
    v41 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v99 = a1;
    v42 = a1;
    v43 = v40;
    v110 = v41;
    v41((char *)v40, (char *)v42, AssociatedTypeWitness);
    v101 = AssociatedConformanceWitness;
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v100 = v23;
      v44 = v109;
      v45 = (uint64_t)v36;
      v46 = v113;
      v47 = TupleTypeMetadata2;
      v48 = &v113[*(int *)(TupleTypeMetadata2 + 48)];
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
      v97 = (char *)v43;
      v49(v113, v43, AssociatedTypeWitness);
      v50 = v48;
      v51 = v48;
      v103 = v48;
      v105 = v45;
      v52 = v110;
      v110(v50, (char *)v45, AssociatedTypeWitness);
      v53 = &v44[*(int *)(v47 + 48)];
      v52(v44, v46, AssociatedTypeWitness);
      v52(v53, v51, AssociatedTypeWitness);
      v54 = v108;
      v49(v108, (uint64_t)v44, AssociatedTypeWitness);
      v55 = *(char **)(v20 + 8);
      ((void (*)(char *, uint64_t))v55)(v53, AssociatedTypeWitness);
      v56 = &v44[*(int *)(v47 + 48)];
      v49(v44, (uint64_t)v46, AssociatedTypeWitness);
      v49(v56, (uint64_t)v103, AssociatedTypeWitness);
      v57 = v116;
      v49(&v54[*(int *)(v116 + 36)], (uint64_t)v56, AssociatedTypeWitness);
      v58 = v44;
      v59 = v55;
      ((void (*)(char *, uint64_t))v55)(v58, AssociatedTypeWitness);
      v60 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v111 + 32);
      v61 = v104;
      v60((uint64_t)v104, v54, v57);
      v62 = v121;
      MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)(v61, v119, v106, v118, v117, v120, v112);
      if (v62)
      {
        (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v111 + 8))(v61, v57);
        return ((uint64_t (*)(uint64_t, uint64_t))v59)(v105, AssociatedTypeWitness);
      }
      v95 = v60;
      v103 = v59;
      v121 = 0;
      v111 = *(_QWORD *)(v111 + 8);
      ((void (*)(void (*)(char *, char *, uint64_t), uint64_t))v111)(v61, v57);
      v63 = (uint64_t)v97;
      v64 = (void (*)(char *, uint64_t, uint64_t))v110;
      v110(v97, (char *)(v99 + *(int *)(v57 + 36)), AssociatedTypeWitness);
      v65 = v105;
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        v66 = v64;
        v67 = v113;
        v68 = TupleTypeMetadata2;
        v69 = &v113[*(int *)(TupleTypeMetadata2 + 48)];
        v66(v113, v65, AssociatedTypeWitness);
        v49(v69, v63, AssociatedTypeWitness);
        v70 = v109;
        v71 = &v109[*(int *)(v68 + 48)];
        v66(v109, (uint64_t)v67, AssociatedTypeWitness);
        v66(v71, (uint64_t)v69, AssociatedTypeWitness);
        v72 = (void (*)(char *, char *, uint64_t))v49;
        v73 = v108;
        v72(v108, v70, AssociatedTypeWitness);
        v74 = v103;
        ((void (*)(char *, uint64_t))v103)(v71, AssociatedTypeWitness);
        v75 = &v70[*(int *)(v68 + 48)];
        v72(v70, v67, AssociatedTypeWitness);
        v72(v75, v69, AssociatedTypeWitness);
        v76 = v116;
        v77 = &v73[*(int *)(v116 + 36)];
        v104 = v72;
        v72(v77, v75, AssociatedTypeWitness);
        ((void (*)(char *, uint64_t))v74)(v70, AssociatedTypeWitness);
        result = v95(v102, v73, v76);
        if (!__OFADD__(v119, v106))
        {
          v78 = v100;
          if (!__OFSUB__(v98, v106))
          {
            v79 = v102;
            v80 = v121;
            MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)(v102, v119 + v106, v98 - v106, v118, v117, v120, v112);
            if (v80)
            {
              ((void (*)(uint64_t, uint64_t))v111)(v79, v76);
              v59 = v74;
              ((void (*)(char *, uint64_t))v74)(v107, AssociatedTypeWitness);
              return ((uint64_t (*)(_QWORD, _QWORD))v59)(v105, AssociatedTypeWitness);
            }
            v121 = 0;
            ((void (*)(uint64_t, uint64_t))v111)(v79, v76);
            v81 = v107;
            result = dispatch thunk of static Comparable.<= infix(_:_:)();
            if ((result & 1) != 0)
            {
              v83 = v113;
              v82 = TupleTypeMetadata2;
              v84 = &v113[*(int *)(TupleTypeMetadata2 + 48)];
              v85 = v110;
              v110(v113, v81, AssociatedTypeWitness);
              v85(v84, v78, AssociatedTypeWitness);
              v86 = v109;
              v87 = &v109[*(int *)(v82 + 48)];
              v85(v109, v83, AssociatedTypeWitness);
              v85(v87, v84, AssociatedTypeWitness);
              v88 = v96;
              v89 = v104;
              v104(v96, v86, AssociatedTypeWitness);
              v90 = v103;
              ((void (*)(char *, uint64_t))v103)(v87, AssociatedTypeWitness);
              v91 = &v86[*(int *)(v82 + 48)];
              v89(v86, v83, AssociatedTypeWitness);
              v89(v91, v84, AssociatedTypeWitness);
              v92 = v116;
              v89(&v88[*(int *)(v116 + 36)], v91, AssociatedTypeWitness);
              ((void (*)(char *, uint64_t))v90)(v86, AssociatedTypeWitness);
              v93 = v108;
              v95((uint64_t)v108, v88, v92);
              v94 = v105;
              MutableCollection.rotate(in:shiftingToStart:)(v93, v105, v120, v112, v115);
              ((void (*)(char *, uint64_t))v111)(v93, v92);
              ((void (*)(char *, uint64_t))v90)(v100, AssociatedTypeWitness);
              ((void (*)(char *, uint64_t))v90)(v107, AssociatedTypeWitness);
              return ((uint64_t (*)(uint64_t, uint64_t))v90)(v94, AssociatedTypeWitness);
            }
            goto LABEL_27;
          }
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
  v38 = v121;
  result = v118(v119, v34);
  if (!v38)
  {
    if ((result & 1) != 0)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 16))(v115, (char *)a1, AssociatedTypeWitness);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v115, a1 + *(int *)(v116 + 36), AssociatedTypeWitness);
  }
  return result;
}

uint64_t MutableCollection.rotate(in:shiftingToStart:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, double);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t result;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  char v85;
  void (*v86)(char *, uint64_t, uint64_t);
  char v87;
  uint64_t v88;
  char *v89;
  char v90;
  char v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t (*v107)(uint64_t, char *, uint64_t);
  void (*v108)(uint64_t, char *, uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t);

  v102 = a4;
  v109 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v103 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v92 - v12;
  v101 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Range();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v100 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v112 = (char *)&v92 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v113 = (uint64_t)&v92 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v99 = (uint64_t)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v98 = (uint64_t)&v92 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v93 = (char *)&v92 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v114 = (char *)&v92 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v92 - v31;
  v106 = (char *)&v92 - v31;
  v34 = MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v92 - v35;
  v105 = v37;
  v38 = *(void (**)(char *, uint64_t, uint64_t, double))(v37 + 16);
  v39 = a2;
  v41 = v40;
  v38((char *)&v92 - v35, v39, AssociatedTypeWitness, v34);
  v42 = v32;
  v43 = v109;
  ((void (*)(char *, char *, uint64_t))v38)(v42, v109, AssociatedTypeWitness);
  v104 = v41;
  v44 = &v43[*(int *)(v41 + 36)];
  v45 = v36;
  v46 = v106;
  v115 = (void (*)(char *, char *, uint64_t))v38;
  ((void (*)(char *, char *, uint64_t))v38)(v114, v44, AssociatedTypeWitness);
  v47 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v48 = v45;
    v49 = v105;
    v50 = *(void (**)(char *, uint64_t))(v105 + 8);
    v50(v46, AssociatedTypeWitness);
    v50(v48, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(a5, v114, AssociatedTypeWitness);
  }
  else
  {
    v52 = v114;
    v97 = v47;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v53 = v105;
      v54 = *(void (**)(char *, uint64_t))(v105 + 8);
      v54(v52, AssociatedTypeWitness);
      v54(v45, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 32))(a5, v106, AssociatedTypeWitness);
    }
    else
    {
      v115(v93, v52, AssociatedTypeWitness);
      v55 = v106;
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        v56 = v45;
        v95 = TupleTypeMetadata2;
        v92 = a5;
        v94 = v13;
        v110 = AssociatedConformanceWitness;
        v111 = v16;
        v96 = v45;
        while (1)
        {
          v57 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
          v58 = v55;
          v59 = v115;
          v115(v13, v58, AssociatedTypeWitness);
          v109 = v57;
          v59(v57, v56, AssociatedTypeWitness);
          v60 = v112;
          v61 = v103;
          v62 = &v103[*(int *)(TupleTypeMetadata2 + 48)];
          v59(v103, v13, AssociatedTypeWitness);
          v59(v62, v57, AssociatedTypeWitness);
          v63 = v105;
          v64 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
          v64(v60, v61, AssociatedTypeWitness);
          v65 = *(char **)(v63 + 8);
          ((void (*)(char *, uint64_t))v65)(v62, AssociatedTypeWitness);
          v66 = &v61[*(int *)(TupleTypeMetadata2 + 48)];
          v64(v61, v13, AssociatedTypeWitness);
          v64(v66, v109, AssociatedTypeWitness);
          v67 = v104;
          v64(&v60[*(int *)(v104 + 36)], v66, AssociatedTypeWitness);
          v109 = v65;
          ((void (*)(char *, uint64_t))v65)(v61, AssociatedTypeWitness);
          v108 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
          v108(v113, v60, v67);
          v68 = v114;
          result = dispatch thunk of static Comparable.<= infix(_:_:)();
          if ((result & 1) == 0)
            break;
          v69 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
          v70 = v56;
          v71 = v115;
          v115(v13, v70, AssociatedTypeWitness);
          v71(v69, v68, AssociatedTypeWitness);
          v72 = &v61[*(int *)(TupleTypeMetadata2 + 48)];
          v71(v61, v13, AssociatedTypeWitness);
          v71(v72, v69, AssociatedTypeWitness);
          v73 = v100;
          v64(v100, v61, AssociatedTypeWitness);
          v74 = v109;
          ((void (*)(char *, uint64_t))v109)(v72, AssociatedTypeWitness);
          v75 = &v61[*(int *)(TupleTypeMetadata2 + 48)];
          v64(v61, v13, AssociatedTypeWitness);
          v64(v75, v69, AssociatedTypeWitness);
          v76 = &v73[*(int *)(v67 + 36)];
          v77 = v75;
          v78 = v111;
          v107 = (uint64_t (*)(uint64_t, char *, uint64_t))v64;
          v64(v76, v77, AssociatedTypeWitness);
          v79 = v74;
          ((void (*)(char *, uint64_t))v74)(v61, AssociatedTypeWitness);
          v80 = (uint64_t)v112;
          v108((uint64_t)v112, v73, v67);
          v82 = v98;
          v81 = v99;
          v83 = v113;
          MutableCollection._swapNonemptySubrangePrefixes(_:_:)(v98, v99, v113, v80, v101, v102);
          v84 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
          v84(v80, v67);
          v84(v83, v67);
          v85 = dispatch thunk of static Equatable.== infix(_:_:)();
          v86 = (void (*)(char *, uint64_t, uint64_t))v115;
          if ((v85 & 1) != 0)
          {
            v87 = dispatch thunk of static Equatable.== infix(_:_:)();
            v88 = v92;
            if ((v87 & 1) != 0)
            {
              v89 = v93;
              ((void (*)(char *, uint64_t))v79)(v93, AssociatedTypeWitness);
              v86(v89, v82, AssociatedTypeWitness);
            }
            v56 = v96;
            v90 = dispatch thunk of static Equatable.== infix(_:_:)();
            v55 = v106;
            ((void (*)(char *, uint64_t))v79)(v106, AssociatedTypeWitness);
            if ((v90 & 1) != 0)
            {
              ((void (*)(uint64_t, uint64_t))v79)(v81, AssociatedTypeWitness);
              ((void (*)(uint64_t, uint64_t))v79)(v82, AssociatedTypeWitness);
              ((void (*)(char *, uint64_t))v79)(v114, AssociatedTypeWitness);
              ((void (*)(char *, uint64_t))v79)(v56, AssociatedTypeWitness);
              return v107(v88, v93, AssociatedTypeWitness);
            }
          }
          else
          {
            v55 = v106;
            ((void (*)(char *, uint64_t))v79)(v106, AssociatedTypeWitness);
            v56 = v96;
          }
          v115(v55, (char *)v82, AssociatedTypeWitness);
          v91 = dispatch thunk of static Equatable.== infix(_:_:)();
          ((void (*)(uint64_t, uint64_t))v79)(v82, AssociatedTypeWitness);
          if ((v91 & 1) != 0)
          {
            ((void (*)(char *, uint64_t))v79)(v56, AssociatedTypeWitness);
            v107((uint64_t)v56, (char *)v81, AssociatedTypeWitness);
          }
          else
          {
            ((void (*)(uint64_t, uint64_t))v79)(v81, AssociatedTypeWitness);
          }
          TupleTypeMetadata2 = v95;
          v13 = v94;
          result = dispatch thunk of static Comparable.<= infix(_:_:)();
          if ((result & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t MutableCollection._swapNonemptySubrangePrefixes(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, double);
  char v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a4;
  v26 = a1;
  v31 = a6;
  v8 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Range();
  v34 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v25 - v18;
  v32 = v20;
  v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16);
  v21((char *)&v25 - v18, a3, AssociatedTypeWitness, v17);
  v28 = (void (*)(char *, uint64_t, uint64_t))v21;
  ((void (*)(uint64_t, uint64_t, uint64_t))v21)(a2, v33, AssociatedTypeWitness);
  v27 = a3 + *(int *)(v10 + 36);
  while (1)
  {
    dispatch thunk of MutableCollection.swapAt(_:_:)();
    dispatch thunk of Collection.formIndex(after:)();
    dispatch thunk of Collection.formIndex(after:)();
    v28(v15, v27, AssociatedTypeWitness);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v12, v33, v10);
    if ((v22 & 1) != 0)
      break;
    v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
    if ((v23 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v26, v19, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v26, v19, AssociatedTypeWitness);
}

void type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork)
  {
    v2 = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
    v4 = type metadata accessor for AnimatorState.Fork(a1, (uint64_t)&type metadata for _AnyAnimatableData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork);
  }
}

uint64_t specialized Slice.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v3 = v2;
  v41 = a1;
  v42 = a2;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - v9;
  type metadata accessor for Range<IndexSet.Index>();
  v40 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v37 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v37 - v14;
  type metadata accessor for Slice<IndexSet>();
  v38 = v2;
  v39 = v16;
  v17 = v2 + *(int *)(v16 + 36);
  v18 = &v10[*(int *)(v5 + 48)];
  v19 = type metadata accessor for IndexSet.Index();
  v20 = *(_QWORD **)(v19 - 8);
  v21 = (void (*)(char *, uint64_t, uint64_t))v20[2];
  v21(v10, v3, v19);
  v21(v18, v17, v19);
  v22 = v5;
  v23 = &v7[*(int *)(v5 + 48)];
  v21(v7, (uint64_t)v10, v19);
  v21(v23, (uint64_t)v18, v19);
  v24 = (void (*)(char *, char *, uint64_t))v20[4];
  v25 = (uint64_t)v37;
  v24(v37, v7, v19);
  v26 = (void (*)(char *, uint64_t))v20[1];
  v26(v23, v19);
  v27 = &v7[*(int *)(v22 + 48)];
  v24(v7, v10, v19);
  v24(v27, v18, v19);
  v28 = v40;
  v24((char *)(v25 + *(int *)(v40 + 36)), v27, v19);
  v26(v7, v19);
  outlined init with take of Range<IndexSet.Index>(v25, (uint64_t)v15);
  v29 = v39;
  v30 = v38 + *(int *)(v39 + 40);
  v31 = type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
  v32 = v41;
  dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
  outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
  v33 = *(int *)(v29 + 40);
  v34 = v29;
  v35 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(&v42[v33], v30, v31);
  outlined init with copy of TypesettingLanguage(v32, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
  v24(v35, v15, v19);
  return ((uint64_t (*)(char *, char *, uint64_t))v24)(&v35[*(int *)(v34 + 36)], &v15[*(int *)(v28 + 36)], v19);
}

uint64_t specialized Slice.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _QWORD);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[32];

  v2 = v1;
  v33 = a1;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  v4 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - v8;
  type metadata accessor for Range<IndexSet.Index>();
  v32 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v31 = (uint64_t)&v30 - v14;
  type metadata accessor for Slice<IndexSet>();
  v30 = v15;
  v16 = v1 + *(int *)(v15 + 36);
  v17 = &v9[*(int *)(v4 + 48)];
  v18 = type metadata accessor for IndexSet.Index();
  v19 = *(_QWORD **)(v18 - 8);
  v20 = (void (*)(char *, uint64_t, uint64_t))v19[2];
  v20(v9, v2, v18);
  v20(v17, v16, v18);
  v21 = &v6[*(int *)(v4 + 48)];
  v20(v6, (uint64_t)v9, v18);
  v20(v21, (uint64_t)v17, v18);
  v22 = (void (*)(char *, char *, uint64_t))v19[4];
  v22(v12, v6, v18);
  v23 = (void (*)(char *, uint64_t))v19[1];
  v23(v21, v18);
  v24 = &v6[*(int *)(v4 + 48)];
  v22(v6, v9, v18);
  v22(v24, v17, v18);
  v22(&v12[*(int *)(v32 + 36)], v24, v18);
  v23(v6, v18);
  v25 = v31;
  outlined init with take of Range<IndexSet.Index>((uint64_t)v12, v31);
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
  dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
  outlined destroy of TypesettingConfiguration(v25, (uint64_t (*)(_QWORD))type metadata accessor for Range<IndexSet.Index>);
  v26 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v28 = *v27;
  v26(v34, 0);
  return v28;
}

void type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (lower: IndexSet.Index, upper: IndexSet.Index))
  {
    type metadata accessor for IndexSet.Index();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: IndexSet.Index, upper: IndexSet.Index));
  }
}

void type metadata accessor for Range<IndexSet.Index>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<IndexSet.Index>)
  {
    type metadata accessor for IndexSet.Index();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF328]);
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<IndexSet.Index>);
  }
}

uint64_t outlined init with take of Range<IndexSet.Index>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Range<IndexSet.Index>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PartialRangeFrom<IndexSet.Index>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PartialRangeFrom<IndexSet.Index>)
  {
    type metadata accessor for IndexSet.Index();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF328]);
    v0 = type metadata accessor for PartialRangeFrom();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<IndexSet.Index>);
  }
}

uint64_t partial apply for closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(uint64_t a1)
{
  return partial apply for closure #1 in MutableCollection.move(fromOffsets:toOffset:)(a1) & 1;
}

uint64_t _ViewInputs.needsAccessibility.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 37) >> 4) & 1;
}

uint64_t _GraphInputs.needsAccessibility.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 37) >> 4) & 1;
}

uint64_t _GraphInputs.needsAccessibility.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 4096;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFEFFF | v2;
  return result;
}

_BYTE *(*_GraphInputs.needsAccessibility.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x1000) != 0;
  return _GraphInputs.needsAccessibility.modify;
}

_BYTE *_GraphInputs.needsAccessibility.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 4096;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFEFFF | v1;
  return result;
}

uint64_t _ViewInputs.needsAccessibility.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 4096;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFEFFF | v2;
  return result;
}

_BYTE *(*_ViewInputs.needsAccessibility.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x1000) != 0;
  return _GraphInputs.needsAccessibility.modify;
}

id NSObject.rotorOwnerElement.getter()
{
  void *v0;

  return v0;
}

BOOL static AccessibilityLayoutRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AccessibilityLayoutRole.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AccessibilityLayoutRole.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Locale.bcp47LanguageCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v0 = type metadata accessor for Locale.Language();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - v5;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Locale.LanguageCode?, (void (*)(uint64_t))MEMORY[0x24BDCEB60]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - v8;
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  v11 = type metadata accessor for Locale.LanguageCode();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, &lazy cache variable for type metadata for Locale.LanguageCode?, (void (*)(uint64_t))MEMORY[0x24BDCEB60]);
    return 0;
  }
  v13 = MEMORY[0x23B7C5200]();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
  swift_bridgeObjectRelease();
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v16)
    return 0;
  Locale.language.getter();
  v17 = Locale.Language.maximalIdentifier.getter();
  v10(v3, v0);
  return v17;
}

uint64_t specialized static AccessibilityCore.description(for:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[4];

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v30 - v7;
  v9 = type metadata accessor for Locale();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a3;
  v15 = a3[1];
  v16 = (void *)MEMORY[0x23B7C5DAC](a1, a2, v11);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v14, (uint64_t)v13);
  }
  else
  {
    v17 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v13);
  }
  swift_release_n();
  swift_release_n();
  v18 = Locale.identifier.getter();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v21 = (void *)MEMORY[0x23B7C5DAC](v18, v20);
  swift_bridgeObjectRelease();
  v22 = soft_AXSSAccessibilityDescriptionForSymbolName(v16, v21);

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v26 = v23 & 0xFFFFFFFFFFFFLL;
  if (v26)
  {
    v30[2] = v23;
    v30[3] = v25;
    if (v15)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v14, (uint64_t)v8);
    }
    else
    {
      v28 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v28, (uint64_t)v8);
    }
    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    lazy protocol witness table accessor for type String and conformance String();
    v27 = StringProtocol.capitalized(with:)();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v8, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v27;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in WithinAccessibilityRotor()
{
  return &protocol witness table for WithinAccessibilityRotor;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole;
  if (!lazy protocol witness table cache variable for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityLayoutRole, &type metadata for AccessibilityLayoutRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole);
  }
  return result;
}

uint64_t sub_2350758D4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x1000) != 0;
  return result;
}

_BYTE *sub_2350758E4(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 4096;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFEFFF | v2;
  return result;
}

uint64_t sub_235075908@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x1000) != 0;
  return result;
}

_BYTE *sub_235075918(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 4096;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFEFFF | v2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCore()
{
  return &type metadata for AccessibilityCore;
}

ValueMetadata *type metadata accessor for WithinAccessibilityRotor()
{
  return &type metadata for WithinAccessibilityRotor;
}

uint64_t storeEnumTagSinglePayload for AccessibilityLayoutRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2350759A8 + 4 * byte_2352C24E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2350759DC + 4 * byte_2352C24E0[v4]))();
}

uint64_t sub_2350759DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350759E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350759ECLL);
  return result;
}

uint64_t sub_2350759F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235075A00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_235075A04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235075A0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLayoutRole()
{
  return &type metadata for AccessibilityLayoutRole;
}

uint64_t static MainActor.assumeIsolatedIfLinkedOnOrAfterV6<A>(_:file:line:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unsigned int v13;
  _QWORD *v14;
  uint64_t result;
  char isEscapingClosureAtFileLocation;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v13 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_7;
    return static MainActor.assumeIsolated<A>(_:file:line:)(a1, a2, a3, a4, a5, a6, a7);
  }
  if (static Semantics.forced >= v13)
    return static MainActor.assumeIsolated<A>(_:file:line:)(a1, a2, a3, a4, a5, a6, a7);
LABEL_7:
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a7;
  v14[3] = a1;
  v14[4] = a2;
  a1();
  if (v7)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t static MainActor.assumeIsolated<A>(_:file:line:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;
  uint64_t result;
  int isEscapingClosureAtFileLocation;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0)
    goto LABEL_6;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a7;
  v11[3] = a1;
  v11[4] = a2;
  a1();
  if (v7)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v14._object = (void *)0x80000002352E6AE0;
    v14._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_235075D78()
{
  return swift_deallocObject();
}

uint64_t sub_235075D88()
{
  return swift_deallocObject();
}

uint64_t one-time initialization function for colorCache()
{
  uint64_t result;

  type metadata accessor for AtomicBuffer<[ColorCacheKey : NamedColorInfo]>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  colorCache = (_UNKNOWN *)result;
  return result;
}

void ColorCacheKey.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  void *v3;
  id v4;

  v1 = v0[1];
  v2 = v0[2];
  v3 = (void *)*((_QWORD *)v0 + 3);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    v4 = v3;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int ColorCacheKey.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  void *v4;
  id v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = (void *)*((_QWORD *)v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
    Hasher._combine(_:)(1u);
    v5 = v4;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColorCacheKey()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  void *v4;
  id v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = (void *)*((_QWORD *)v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
    Hasher._combine(_:)(1u);
    v5 = v4;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

_QWORD *Color.init(_:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  type metadata accessor for ColorBox<Color.NamedColor>(0);
  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void type metadata accessor for ColorBox<Color.NamedColor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ColorBox<Color.NamedColor>)
  {
    v2 = lazy protocol witness table accessor for type Color.NamedColor and conformance Color.NamedColor();
    v4 = type metadata accessor for ColorBox(a1, (uint64_t)&unk_25064AA50, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.NamedColor>);
  }
}

unint64_t lazy protocol witness table accessor for type Color.NamedColor and conformance Color.NamedColor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor;
  if (!lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.NamedColor, &unk_25064AA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor;
  if (!lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.NamedColor, &unk_25064AA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor;
  if (!lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.NamedColor, &unk_25064AA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor);
  }
  return result;
}

id Color.NamedColor.resolveCGColor(in:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  os_unfair_lock_s *v20;
  id v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  char v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  id v41;
  id v42;
  id v43;
  _QWORD *v44;
  os_unfair_lock_s *v45;
  id v46;
  char isUniquelyReferenced_nonNull_native;
  id v48;
  id v50;
  int v51;
  uint64_t v52;
  void *v53;
  void *v55;
  char v56[16];
  uint64_t v57;
  uint64_t v58;
  char v59[2];

  v6 = *a1;
  v7 = a1[1];
  v57 = *a1;
  v58 = v7;
  swift_retain();
  swift_retain();
  CatalogKey.init(_:)(&v57, v59);
  v11 = v59[0];
  v12 = v59[1];
  if (v7)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, (char *)&v57);
    swift_release_n();
    swift_release_n();
    v13 = v57;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DisplayGamutKey>(0, v8, v9, v10);
    BloomFilter.init(hashValue:)(v14);
    v15 = v57;
    swift_retain_n();
    swift_retain();
    v16 = specialized find1<A>(_:key:filter:)(v6, v15);
    if (v16)
      v13 = *(unsigned __int8 *)(v16 + 72);
    else
      v13 = 0;
    swift_release();
    swift_release_n();
  }
  v17 = one-time initialization token for colorCache;
  swift_bridgeObjectRetain();
  v55 = a4;
  v18 = a4;
  if (v17 != -1)
    swift_once();
  v19 = colorCache;
  v20 = (os_unfair_lock_s *)((char *)colorCache + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v21 = v18;
  os_unfair_lock_lock(v20);
  v22 = v19[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v20);
  swift_release();
  if (!*(_QWORD *)(v22 + 16)
    || (!v12 ? (v23 = 0) : (v23 = 256),
        (v24 = v23 | v11, !v13) ? (v25 = 0) : (v25 = 0x10000),
        v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24 | v25, a2, a3, v55),
        (v27 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = objc_msgSend((id)objc_opt_self(), sel_defaultUICatalogForBundle_, v21);
    if (v32)
    {
      v33 = v32;
      swift_retain();
      swift_retain_n();
      if (v7)
      {
        v34 = swift_retain();
        v52 = specialized PropertyList.Tracker.value<A>(_:for:)(v34);
        swift_release();
        swift_release();
        swift_retain_n();
        swift_retain_n();
        v35 = specialized PropertyList.Tracker.value<A>(_:for:)(v6);
      }
      else
      {
        v36 = swift_retain_n();
        v52 = specialized closure #1 in PropertyList.subscript.getter(v36, (uint64_t)v56);
        swift_release();
        swift_release_n();
        swift_retain_n();
        swift_retain();
        v35 = specialized closure #1 in PropertyList.subscript.getter(v6);
        swift_bridgeObjectRetain();
      }
      swift_release_n();
      swift_release_n();
      if (v12)
        v37 = 256;
      else
        v37 = 0;
      v38 = v37 | v11;
      if (v13)
        v39 = 0x10000;
      else
        v39 = 0;
      v40 = v38 | v39;
      v51 = v38 | v39;
      swift_bridgeObjectRetain_n();
      v41 = v21;
      v42 = v33;
      v43 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v38, v35, (uint64_t)v42, v42, a2, a3, v55, v40, a2, a3, v55, v52);
      swift_bridgeObjectRelease();
      v53 = v42;

      swift_bridgeObjectRelease_n();
      v44 = colorCache;
      v45 = (os_unfair_lock_s *)((char *)colorCache + 16);
      v50 = v43;
      swift_bridgeObjectRetain();
      v46 = v41;
      swift_retain();
      os_unfair_lock_lock(v45);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v57 = v44[3];
      v44[3] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v43, v51, a2, a3, v55, isUniquelyReferenced_nonNull_native);
      v44[3] = v57;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v45);
      swift_release();
      if (v43)
      {
        v57 = v6;
        v58 = v7;
        v48 = v50;
        v31 = CUINamedColor.effectiveCGColor(in:)(&v57);

        swift_bridgeObjectRelease();
        return v31;
      }

      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_22:

    swift_bridgeObjectRelease();
    return 0;
  }
  v28 = *(void **)(*(_QWORD *)(v22 + 56) + 8 * v26);
  v29 = v28;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v28)
    goto LABEL_22;
  v57 = v6;
  v58 = v7;
  v30 = v29;
  v31 = CUINamedColor.effectiveCGColor(in:)(&v57);

  swift_bridgeObjectRelease();
  return v31;
}

id CUINamedColor.effectiveCGColor(in:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _BYTE v12[16];

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  if (objc_msgSend(v2, sel_substituteWithSystemColor))
  {
    if (v3)
    {
      swift_retain_n();
      swift_retain_n();
      v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
      v7 = v6;
      swift_release_n();
      swift_release_n();
      if (v5)
      {
LABEL_4:
        v11[0] = v4;
        v11[1] = v3;
        return (id)(*(uint64_t (**)(void *, _QWORD *, uint64_t, uint64_t))(v7 + 8))(v2, v11, v5, v7);
      }
    }
    else
    {
      v9 = swift_retain_n();
      v5 = specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v12);
      v7 = v10;
      swift_release_n();
      if (v5)
        goto LABEL_4;
    }
  }
  return objc_msgSend(v2, sel_cgColor);
}

float Color.NamedColor.resolve(in:)(__int128 *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  float result;
  char v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  __int128 v24;

  v24 = *a1;
  v7 = Color.NamedColor.resolveCGColor(in:)((uint64_t *)&v24, a2, (uint64_t)a3, a4);
  if (v7)
  {
    LODWORD(result) = specialized Color.Resolved.init(failableCGColor:)(v7);
    if ((v9 & 1) != 0)
      return 0.0;
  }
  else
  {
    if (a4)
    {
      v10 = objc_msgSend(a4, sel_bundlePath);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;

    }
    else
    {
      *(_QWORD *)&v24 = 0;
      *((_QWORD *)&v24 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v24, "main bundle (");
      HIWORD(v24) = -4864;
      v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
      v15 = objc_msgSend(v14, sel_bundlePath);

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v17;

      v19._countAndFlagsBits = v16;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 41;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      v13 = (void *)*((_QWORD *)&v24 + 1);
      v11 = v24;
    }
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v24 = 0xD000000000000010;
    *((_QWORD *)&v24 + 1) = 0x80000002352E6B60;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = a2;
    v21._object = a3;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0xD00000000000001DLL;
    v22._object = (void *)0x80000002352E4400;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v11;
    v23._object = v13;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(v24, *((unint64_t *)&v24 + 1));
    swift_bridgeObjectRelease();
    return 0.0;
  }
  return result;
}

float protocol witness for ColorProvider.resolve(in:) in conformance Color.NamedColor(__int128 *a1)
{
  uint64_t v1;

  return Color.NamedColor.resolve(in:)(a1, *(_QWORD *)v1, *(void **)(v1 + 8), *(void **)(v1 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.NamedColor()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v2 = v1;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.NamedColor()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v2 = v1;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.NamedColor()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v2 = v1;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color.NamedColor(uint64_t a1, uint64_t a2)
{
  return specialized static Color.NamedColor.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(void **)(a2 + 16));
}

uint64_t static Color._mainNamedBundle.getter()
{
  return 0;
}

_QWORD *Color.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;

  v2 = type metadata accessor for NamedResource();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ResourceReference();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B7C55C0](v8);
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v10, v6) == *MEMORY[0x24BDC6E00])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
    v11 = NamedResource.name.getter();
    v13 = v12;
    v14 = NamedResource.bundle.getter();
    v15 = type metadata accessor for ColorResource();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    type metadata accessor for ColorBox<Color.NamedColor>(0);
    result = (_QWORD *)swift_allocObject();
    result[2] = v11;
    result[3] = v13;
    result[4] = v14;
  }
  else
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Color.NamedColor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for Color.NamedColor(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[2];
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for Color.NamedColor(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

void *type metadata accessor for Color.NamedColor()
{
  return &unk_25064AA50;
}

unint64_t instantiation function for generic protocol witness table for Color.NamedColor(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.NamedColor and conformance Color.NamedColor();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static ColorCacheKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  void *v4;
  void *v5;
  char v6;
  id v7;
  id v8;
  char v9;

  result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0 && ((a1[2] ^ a2[2]) & 1) == 0)
  {
    if ((v4 = (void *)*((_QWORD *)a1 + 3), v5 = (void *)*((_QWORD *)a2 + 3), *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1))
      && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2)
      || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
    {
      if (v4)
      {
        if (v5)
        {
          type metadata accessor for NSBundle();
          v7 = v5;
          v8 = v4;
          v9 = static NSObject.== infix(_:_:)();

          if ((v9 & 1) != 0)
            return 1;
        }
      }
      else if (!v5)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t specialized static Color.NamedColor.== infix(_:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  char v8;
  uint64_t result;
  id v10;
  id v11;
  char v12;

  if (a1 == a4 && a2 == a5 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
  {
    if (a3)
    {
      if (a6)
      {
        type metadata accessor for NSBundle();
        v10 = a6;
        v11 = a3;
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          return 1;
      }
    }
    else if (!a6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DisplayGamutKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>);
  }
}

unint64_t specialized static Color.Resolved.named(_:bundle:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *a4;
  v7 = a4[1];
  if (one-time initialization token for namedTypes != -1)
    swift_once();
  v9 = static SystemColorType.namedTypes;
  if (*(_QWORD *)(static SystemColorType.namedTypes + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v11 & 1) != 0)
    {
      v12 = *(_BYTE *)(*(_QWORD *)(v9 + 56) + v10);
      swift_bridgeObjectRelease();
      EnvironmentValues.systemColorDefinition.getter();
      v23 = v12;
      v24 = v8;
      v25 = v7;
      *(float *)&v14 = (*(float (**)(char *, uint64_t *))(v13 + 8))(&v23, &v24);
      return v14 | ((unint64_t)v15 << 32);
    }
    swift_bridgeObjectRelease();
  }
  if (!a3)
    return 0;
  v24 = v8;
  v25 = v7;
  v17 = a3;
  swift_bridgeObjectRetain();
  v18 = Color.NamedColor.resolveCGColor(in:)(&v24, a1, a2, a3);
  swift_bridgeObjectRelease();
  if (!v18)
  {

    return 0;
  }
  v19 = v18;
  v20 = specialized Color.Resolved.init(failableCGColor:)(v19);
  v22 = v21;

  if ((v22 & 1) != 0)
    return 0;
  else
    return v20;
}

ValueMetadata *type metadata accessor for NamedColorInfo()
{
  return &type metadata for NamedColorInfo;
}

void destroy for ColorCacheKey(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for ColorCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for ColorCacheKey(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for ColorCacheKey(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for ColorCacheKey()
{
  return &type metadata for ColorCacheKey;
}

ValueMetadata *type metadata accessor for ShakeVerticalTextEffect()
{
  return &type metadata for ShakeVerticalTextEffect;
}

unint64_t lazy protocol witness table accessor for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeVerticalTextEffect.LayoutState, &type metadata for ShakeVerticalTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeVerticalTextEffect.LayoutState, &type metadata for ShakeVerticalTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState);
  }
  return result;
}

id closure #1 in ShakeVerticalTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<WeightDeltaModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier, (uint64_t)&type metadata for WeightDeltaModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2352C2750;
  *(_QWORD *)(v4 + 32) = 0x408F400000000000;
  v5 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = swift_retain();
  MEMORY[0x23B7C61A8](v6);
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v5;
}

uint64_t closure #2 in ShakeVerticalTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t inited;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  __n128 v28[5];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a2, a3, 1, a2, v28, 0.0);
  v30 = v6;
  v31 = v7;
  v32 = v8;
  v33 = v9;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = v7;
  *(_QWORD *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 56) = v9;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 80) = v11;
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v10 + 112) = *(_QWORD *)(a2 + 48);
  v12 = swift_allocObject();
  v13 = v28[3];
  *(__n128 *)(v12 + 48) = v28[2];
  *(__n128 *)(v12 + 64) = v13;
  *(__n128 *)(v12 + 80) = v28[4];
  v14 = v29;
  v15 = v28[1];
  *(__n128 *)(v12 + 16) = v28[0];
  *(__n128 *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 96) = v14;
  *(_QWORD *)(v12 + 104) = partial apply for closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:);
  *(_QWORD *)(v12 + 112) = v10;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23527E860;
  *(_QWORD *)(v16 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  v17 = v16 + 32;
  *(_QWORD *)(v16 + 40) = v12;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v16;
  v19 = *(_QWORD *)(v16 + 16);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  outlined retain of LinearGradient((uint64_t)&v30);
  outlined retain of LinearGradient((uint64_t)&v31);
  outlined retain of LinearGradient((uint64_t)&v32);
  outlined retain of LinearGradient((uint64_t)&v33);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 1, MEMORY[0x24BEE4AF8]);
  v21 = v20;
  if (!*(_QWORD *)(v16 + 16))
  {
    if (!v19)
      goto LABEL_9;
    __break(1u);
    goto LABEL_11;
  }
  v22 = v20[2];
  if ((v20[3] >> 1) - v22 < v19)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v23 = (unint64_t)&v20[2 * v22 + 4];
  if (v17 < v23 + 16 * v19 && v23 < v17 + 16 * v19)
    goto LABEL_13;
  swift_arrayInitWithCopy();
  if (!v19)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v28);
    return (uint64_t)v21;
  }
  v24 = v21[2];
  v25 = __OFADD__(v24, v19);
  v26 = v24 + v19;
  if (!v25)
  {
    v21[2] = v26;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(_QWORD *a1, uint64_t a2)
{
  Swift::UInt64 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  _QWORD v13[7];
  _QWORD v14[7];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v13);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, isUniquelyReferenced_nonNull_native, 0.0);
  *a1 = v14[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v13);
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 1;
  v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v14);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v14);
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v12 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v10, 1.0);
  *a1 = v12;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v14);
}

void closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(unint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  long double v20;
  long double v21;
  double Size;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  const __CTLine *v32;
  void *v33;
  const __CTFont *v34;
  double v35[3];
  _BYTE v36[80];
  uint64_t v37;
  _QWORD v38[6];
  __int128 v39;
  uint64_t v40;
  char v41;

  v5 = a2[8];
  v6 = a2[5] - a2[4];
  if (v6 >= 0.0)
  {
    v8 = v6 / v5;
    v7 = 0.0;
    if (v8 < 0.0)
      goto LABEL_8;
  }
  else
  {
    v7 = 0.0;
    v8 = 0.0 / v5;
    if (v8 < 0.0)
      goto LABEL_8;
  }
  if (v8 <= 1.0)
    v7 = v8;
  else
    v7 = 1.0;
LABEL_8:
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) > a1)
  {
    v9 = *(_QWORD *)(a3 + 32);
    if (*(_QWORD *)(v9 + 16) <= a1)
      goto LABEL_30;
    v10 = (double *)(v9 + 40 * a1);
    v11 = v10[6];
    v12 = v10[7];
    v13 = v10[8];
    v14 = *(_QWORD *)(a4 + 24);
    v37 = v14;
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    swift_retain_n();
    v17 = 0.0;
    v18 = 0.0;
    if (v15 == v16)
    {
LABEL_12:
      outlined release of ViewTransform((uint64_t)&v37);
      outlined release of ViewTransform((uint64_t)&v37);
      if (v7 < 1.0)
      {
        v19 = sin(v7 * -6.0 * 3.0);
        v17 = pow(2.71828183, -v7) * v19;
      }
      v20 = pow(v7, 0.8);
      v21 = 1.0 - (v20 + -1.0) * (v20 + -1.0) + 1.0 - (v20 + -1.0) * (v20 + -1.0) + -1.0;
      v38[0] = pow(1.0 - v21 * v21, 0.4);
      v38[1] = 0;
      *(double *)&v38[2] = v18 / 3.0 * v17;
      memset(&v38[3], 0, 24);
      __asm { FMOV            V0.2D, #1.0 }
      v39 = _Q0;
      v40 = 0x3FF0000000000000;
      v41 = 0;
      v35[0] = v11;
      v35[1] = v12;
      v35[2] = v13;
      Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v38, *(double *)&a1, v35, (uint64_t)v36);
      Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v36, 0, 0, 0, 1);
      return;
    }
    while (1)
    {
      v29 = *(void **)(v14 + 32);
      v28 = *(_QWORD *)(v14 + 40);
      if ((*(_BYTE *)(v14 + 48) & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v14 + 32), *(_QWORD *)(v14 + 40), 1);
        v30 = (id)_NSTextLineFragmentGetCTLine(v29);
        if (!v30)
          goto LABEL_31;
        v31 = v30;
        outlined consume of Text.Layout.Line.Line(v29, v28, 1);
        v29 = v31;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v14 + 32), *(_QWORD *)(v14 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v29, v28, 0);

        swift_release();
      }
      if (v15 < *(_QWORD *)(v14 + 16) || v15 >= *(_QWORD *)(v14 + 24))
        break;
      swift_retain();
      v32 = v29;
      v33 = (id)_CTLineGetRunAtIndex(v32, v15);
      v34 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      if (v34)
      {
        Size = CTFontGetSize(v34);
        swift_release();

        v32 = v34;
      }
      else
      {
        swift_release();
        Size = 0.0;
      }
      ++v15;

      if (v18 <= Size)
        v18 = Size;
      if (v15 == *(_QWORD *)(v14 + 24))
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t protocol witness for static TextEffect.staticUnitProgress.getter in conformance ShakeVerticalTextEffect()
{
  return 0x3FE3333333333333;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance ShakeVerticalTextEffect()
{
  return 0x726556656B616873;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance ShakeVerticalTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance ShakeVerticalTextEffect;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance ShakeVerticalTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  double v12;
  __int128 v13;
  double result;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - v9;
  v35 = 1;
  v34 = 1;
  v33 = 0;
  v17 = xmmword_23529C560;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 2;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v29 = MEMORY[0x24BEE4AF8];
  v30 = 0;
  v31 = xmmword_235281F60;
  v32 = 0;
  if (one-time initialization token for spring != -1)
    swift_once();
  v11 = static ShakeVerticalTextEffect.spring;
  v12 = *(double *)&qword_25622D2C0;
  outlined init with copy of Text.Effect.DrawableContent<ShakeVerticalTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShakeVerticalTextEffect(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect();
  result = lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_QWORD *specialized ShakeVerticalTextEffect.configuration(_:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in ShakeVerticalTextEffect.configuration(_:);
  v3[6] = 0;
  *((_BYTE *)v3 + 56) = 1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #2 in ShakeVerticalTextEffect.configuration(_:);
  *(_QWORD *)(v4 + 24) = 0;
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[2 * v7];
  v8[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v8[5] = v4;
  return v0;
}

uint64_t sub_2350780C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2350780E4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(unint64_t a1, double *a2)
{
  uint64_t v2;

  closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(a1, a2, v2 + 16, v2 + 64);
}

uint64_t sub_235078144()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96) >= 3uLL)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<ShakeVerticalTextEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ShakeVerticalTextEffect.LayoutState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_235078248 + 4 * byte_2352C2765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23507827C + 4 * byte_2352C2760[v4]))();
}

uint64_t sub_23507827C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235078284(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23507828CLL);
  return result;
}

uint64_t sub_235078298(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350782A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350782A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350782AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShakeVerticalTextEffect.LayoutState()
{
  return &type metadata for ShakeVerticalTextEffect.LayoutState;
}

uint64_t ResolvableStringResolutionContext.init(environment:maximumWidth:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  _BYTE v19[16];

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-v9];
  v12 = *a1;
  v11 = a1[1];
  v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a4, 1, 1, v13);
  v14 = type metadata accessor for ResolvableStringResolutionContext();
  v15 = a4 + *(int *)(v14 + 24);
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  if (v11)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v10);
  }
  else
  {
    v16 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v10);
  }
  swift_release_n();
  swift_release_n();
  result = outlined assign with take of Date?((uint64_t)v10, a4);
  v18 = (uint64_t *)(a4 + *(int *)(v14 + 20));
  *v18 = v12;
  v18[1] = v11;
  *(_QWORD *)v15 = a2;
  *(_BYTE *)(v15 + 8) = a3 & 1;
  return result;
}

uint64_t static ResolvableStringAttributeRepresentation.attribute.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t ResolvableStringResolutionContext.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[16];

  v2 = v1;
  v4 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v20[-v11];
  outlined init with copy of Date?(v2, (uint64_t)&v20[-v11]);
  outlined init with copy of TypesettingLanguage(v2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13) == 1)
  {
    v16 = (uint64_t *)&v6[*(int *)(v4 + 20)];
    v17 = *v16;
    if (v16[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v17, (uint64_t)v9);
    }
    else
    {
      v19 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v9);
    }
    swift_release_n();
    swift_release_n();
    if (v15(v9, 1, v13) == 1)
    {
      static Date.now.getter();
      outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v9, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    }
    else
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(a1, v9, v13);
    }
    return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v12, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(a1, v12, v13);
  }
}

uint64_t ResolvableStringResolutionContext.init(referenceDate:environment:maximumWidth:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v9 = *a2;
  v10 = a2[1];
  v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a5, 1, 1, v11);
  v12 = type metadata accessor for ResolvableStringResolutionContext();
  v13 = a5 + *(int *)(v12 + 24);
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  result = outlined assign with take of Date?(a1, a5);
  v15 = (_QWORD *)(a5 + *(int *)(v12 + 20));
  *v15 = v9;
  v15[1] = v10;
  *(_QWORD *)v13 = a3;
  *(_BYTE *)(v13 + 8) = a4 & 1;
  return result;
}

uint64_t EnvironmentValues.resolvableStringReferenceDate.setter(uint64_t a1)
{
  return EnvironmentValues.resolvableStringReferenceDate.setter(a1, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.stringResolutionDate.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.stringResolutionDate.setter(uint64_t a1)
{
  return EnvironmentValues.resolvableStringReferenceDate.setter(a1, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.resolvableStringReferenceDate.setter(uint64_t a1, void (*a2)(char *))
{
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - v6;
  outlined init with copy of Date?(a1, (uint64_t)&v9 - v6);
  a2(v7);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v7, &lazy cache variable for type metadata for Date?, v4);
  return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(a1, &lazy cache variable for type metadata for Date?, v4);
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableAbsoluteDate(uint64_t a1, _QWORD *a2)
{
  return ResolvableAbsoluteDate.encode(to:)(a2);
}

uint64_t static ResolvableStringAttributeRepresentation<>.encode(_:to:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableAbsoluteDate, a3);
}

uint64_t ResolvableStringAttributeRepresentation.representation(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
}

void specialized ConfigurationBasedResolvableStringAttributeRepresentation.schedule.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  char *v9;
  uint64_t v10;

  v0 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - v5;
  v7 = ResolvableCurrentDate.provider.getter();
  if (v7)
  {
    v8 = v7;
    BaseDateProvider.updateConfiguration.getter((uint64_t)v3);

    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v3, (uint64_t)v6, type metadata accessor for ResolvableAttributeConfiguration);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
  }
  v9 = (char *)sub_235078A3C + 4 * byte_2352C2860[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_235078A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(v5 + 8) & 1) == 0)
  {
    *v4 = *(_QWORD *)v5;
    type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
    swift_storeEnumTagMultiPayload();
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v4, v2, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
    a2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v2, a2, 1, v3);
}

uint64_t ResolvableStringResolutionContext.referenceDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Date?(v1, a1);
}

uint64_t ResolvableStringResolutionContext.referenceDate.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Date?(a1, v1);
}

uint64_t (*ResolvableStringResolutionContext.referenceDate.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableStringResolutionContext.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t ResolvableStringResolutionContext.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(v1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  swift_release();
  result = swift_release();
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t (*ResolvableStringResolutionContext.environment.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ResolvableStringResolutionContext();
  return _ViewInputs.base.modify;
}

uint64_t ResolvableStringResolutionContext.maximumWidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 24));
}

uint64_t ResolvableStringResolutionContext.maximumWidth.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ResolvableStringResolutionContext();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ResolvableStringResolutionContext.maximumWidth.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ResolvableStringResolutionContext();
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentValues.resolvableStringReferenceDate.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t type metadata accessor for ResolvableStringResolutionContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvableStringResolutionContext;
  if (!type metadata singleton initialization cache for ResolvableStringResolutionContext)
    return swift_getSingletonMetadata();
  return result;
}

void ResolvableStringAttribute.requiredFeatures.getter(_WORD *a1@<X8>)
{
  ResolvableStringAttribute.requiredFeatures.getter(a1);
}

{
  *a1 = 0;
}

BOOL ResolvableStringAttribute.sizeVariant(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a1, v3);
  return v4 == 0;
}

uint64_t static ResolvableStringAttribute<>.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v9[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v9);
  a4[3] = a2;
  a4[4] = a3;
  __swift_allocate_boxed_opaque_existential_1(a4);
  result = dispatch thunk of Decodable.init(from:)();
  if (v4)
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
  return result;
}

BOOL ResolvableStringAttribute.isDynamic.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  _BOOL8 v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 48))(a1, a2, v7);
  v10 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v10;
}

uint64_t specialized ResolvableStringAttribute.entries(from:mode:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[15];
  unsigned __int8 v16;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for ResolvableAttributeConfiguration.Schedule?, type metadata accessor for ResolvableAttributeConfiguration.Schedule, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v15[-v5];
  v7 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  specialized ConfigurationBasedResolvableStringAttributeRepresentation.schedule.getter();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v6, &lazy cache variable for type metadata for ResolvableAttributeConfiguration.Schedule?, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
    type metadata accessor for _SequenceBox<[Date]>();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = MEMORY[0x24BEE4AF8];
  }
  else
  {
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, (uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
    v16 = a2 & 1;
    ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(a1, &v16);
    v13 = v12;
    type metadata accessor for _SequenceBox<AnySequence<Date>>();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v13;
    outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
  }
  return v11;
}

{
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[15];
  unsigned __int8 v30;

  v4 = a2 & 1;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v29[-v10];
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  v13 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = &v29[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v6 + 16);
  v20(v11, v2, v5, v17);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(_BYTE *, uint64_t, uint64_t))v20)(v8, v2 + *(int *)(v21 + 36), v5);
  DateInterval.init(start:end:)();
  v22 = *(_BYTE *)(v2 + *(int *)(type metadata accessor for ResolvableProgress() + 20));
  v23 = *(int *)(v13 + 48);
  v24 = type metadata accessor for DateInterval();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v19, v15, v24);
  v19[v23] = v22;
  type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  swift_storeEnumTagMultiPayload();
  v30 = v4;
  ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(a1, &v30);
  v26 = v25;
  type metadata accessor for _SequenceBox<AnySequence<Date>>();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v26;
  outlined destroy of TypesettingConfiguration((uint64_t)v19, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
  return v27;
}

uint64_t ResolvableStringAttribute.entries(from:mode:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[4];
  int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v25 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v24);
  v23 = &v21[-v9];
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v21[-v12];
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = &v21[-v17];
  v22 = *a2;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(a3, a4, v16);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    type metadata accessor for _SequenceBox<[Date]>();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = MEMORY[0x24BEE4AF8];
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v18, v13, AssociatedTypeWitness);
    v26 = v22;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v25, &v26, AssociatedTypeWitness, AssociatedConformanceWitness);
    type metadata accessor for Date();
    swift_getAssociatedConformanceWitness();
    v19 = AnySequence.init<A>(_:)();
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v18, AssociatedTypeWitness);
  }
  return v19;
}

void (*EnvironmentValues.resolvableStringReferenceDate.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[2] = malloc(v5);
  v3[3] = malloc(v5);
  v6 = malloc(v5);
  v3[4] = v6;
  v7 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (uint64_t)v6);
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)v6);
  }
  swift_release_n();
  return EnvironmentValues.resolvableStringReferenceDate.modify;
}

void EnvironmentValues.resolvableStringReferenceDate.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.resolvableStringReferenceDate.modify(a1, a2, (void (*)(void *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t one-time initialization function for defaultValue(uint64_t a1)
{
  return one-time initialization function for defaultValue(a1, static EnvironmentValues.ResolvableStringReferenceDateKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static EnvironmentValues.StringResolutionDate.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], static CalendarKey.defaultValue, MEMORY[0x24BDCF0D0]);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], static TimeZoneKey.defaultValue, MEMORY[0x24BDCF4E0]);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey(&one-time initialization token for defaultValue, (uint64_t)static EnvironmentValues.ResolvableStringReferenceDateKey.defaultValue, a1);
}

uint64_t key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t, uint64_t *))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a4(v5);
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    a5(v8, &v10);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v15 - v12;
  outlined init with copy of Date?(a1, (uint64_t)&v15 - v12);
  outlined init with copy of Date?((uint64_t)v13, (uint64_t)v10);
  a5(v10);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v10, &lazy cache variable for type metadata for Date?, v7);
  return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v13, &lazy cache variable for type metadata for Date?, v7);
}

void (*EnvironmentValues.stringResolutionDate.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[2] = malloc(v5);
  v3[3] = malloc(v5);
  v6 = malloc(v5);
  v3[4] = v6;
  v7 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (uint64_t)v6);
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)v6);
  }
  swift_release_n();
  return EnvironmentValues.stringResolutionDate.modify;
}

void EnvironmentValues.stringResolutionDate.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.resolvableStringReferenceDate.modify(a1, a2, (void (*)(void *))specialized EnvironmentValues._set<A>(_:for:));
}

void EnvironmentValues.resolvableStringReferenceDate.modify(uint64_t **a1, char a2, void (*a3)(void *))
{
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(uint64_t);

  v5 = *a1;
  outlined init with copy of Date?((*a1)[4], (*a1)[3]);
  v6 = (void *)v5[3];
  v7 = (void *)v5[4];
  v8 = (void *)v5[2];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of Date?((uint64_t)v6, v5[2]);
    a3(v8);
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v8, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    a3(v6);
  }
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v6, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v7, &lazy cache variable for type metadata for Date?, v9);
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  v5 = __swift_project_value_buffer(v4, (uint64_t)a2);
  v6 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.StringResolutionDate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey(&one-time initialization token for defaultValue, (uint64_t)static EnvironmentValues.StringResolutionDate.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of Date?(v6, a3);
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableTimer(uint64_t a1, _QWORD *a2)
{
  return ResolvableTimer.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableTimer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTimer, a3);
}

BOOL protocol witness for ResolvableStringAttribute.sizeVariant(_:) in conformance ResolvableProgress(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  outlined init with copy of TypesettingLanguage(v2, a1, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableProgress);
  return v3 == 0;
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableProgress(uint64_t a1, _QWORD *a2)
{
  return ResolvableProgress.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableProgress, a3);
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress(a1, a2, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress, (uint64_t (*)(_BYTE *))ResolvableProgress.init(from:), a3);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableStringAttribute.entries(from:mode:)(a1, *a2);
  *a3 = result;
  return result;
}

BOOL protocol witness for ResolvableStringAttribute.sizeVariant(_:) in conformance ResolvableDateInterval(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  outlined init with copy of TypesettingLanguage(v2, a1, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableDateInterval);
  return v3 == 0;
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableDateInterval@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress(a1, a2, &lazy protocol witness table cache variable for type ResolvableDateInterval and conformance ResolvableDateInterval, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t)&protocol conformance descriptor for ResolvableDateInterval, (uint64_t (*)(_BYTE *))ResolvableDateInterval.init(from:), a3);
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableDateInterval(uint64_t a1, _QWORD *a2)
{
  return ResolvableDateInterval.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableDateInterval@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableDateInterval, a3);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableDateInterval@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for _SequenceBox<[Date]>();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *a1 = result;
  return result;
}

BOOL protocol witness for ResolvableStringAttribute.sizeVariant(_:) in conformance ResolvableCurrentDate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  outlined init with copy of TypesettingLanguage(v2, a1, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableCurrentDate);
  return v3 == 0;
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableCurrentDate(uint64_t a1, _QWORD *a2)
{
  return ResolvableCurrentDate.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableCurrentDate, a3);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(_QWORD)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a1;
  a4[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return outlined init with copy of TypesettingLanguage(v4, (uint64_t)boxed_opaque_existential_1, a3);
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress(a1, a2, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate, (uint64_t (*)(_BYTE *))ResolvableCurrentDate.init(from:), a3);
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t (*a6)(_BYTE *)@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t result;
  _BYTE v15[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v15);
  a7[3] = a2;
  a7[4] = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a3, a4, a5);
  __swift_allocate_boxed_opaque_existential_1(a7);
  result = a6(v15);
  if (v7)
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a7);
  return result;
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableStringAttribute.entries(from:mode:)(a1, *a2);
  *a3 = result;
  return result;
}

void type metadata accessor for _SequenceBox<[Date]>()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for _SequenceBox<[Date]>)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250];
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for [Date], (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [Date] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [Date] and conformance [A], &lazy cache variable for type metadata for [Date], v0, MEMORY[0x24BEE12C8]);
    v1 = type metadata accessor for _SequenceBox();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<[Date]>);
  }
}

uint64_t sub_235079E20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_235079E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, a4, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_235079E60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_235079E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, a4, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

char *initializeBufferWithCopyOfBuffer for ResolvableStringResolutionContext(char *a1, uint64_t *a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = &v4[v11];
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *(_QWORD *)v13 = *v14;
    *((_QWORD *)v13 + 1) = v15;
    v16 = &v4[v12];
    v17 = (char *)a2 + v12;
    v16[8] = v17[8];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ResolvableStringResolutionContext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  swift_release();
  return swift_release();
}

char *initializeWithCopy for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v14[8] = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_retain();
  swift_release();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_retain();
  swift_release();
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  return a1;
}

char *initializeWithTake for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  return a1;
}

char *assignWithTake for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_release();
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableStringResolutionContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23507A4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvableStringResolutionContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23507A594(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
}

void type metadata completion function for ResolvableStringResolutionContext()
{
  unint64_t v0;

  type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t dispatch thunk of static ResolvableStringAttributeFamily.attribute.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static ResolvableStringAttributeFamily.decode(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static ResolvableStringAttributeRepresentation.encode(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ResolvableStringAttributeRepresentation.representation(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.schedule.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.requiredFeatures.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.makePlatformAttributes(resolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.sizeVariant(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t lazy protocol witness table accessor for type [Date] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for [(_:)](255, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.StringResolutionDate()
{
  return &type metadata for EnvironmentValues.StringResolutionDate;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ResolvableStringReferenceDateKey()
{
  return &type metadata for EnvironmentValues.ResolvableStringReferenceDateKey;
}

uint64_t BaseDateProvider.updateConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  switch((unint64_t)objc_msgSend(v1, sel_updateType))
  {
    case 0uLL:
      v3 = objc_msgSend(v1, sel_updateInterval);
      if (v3)
      {
        Double.init(truncating:)();
        v5 = v4;

      }
      else
      {
        v5 = 0;
      }
      *(_QWORD *)a1 = v5;
      *(_BYTE *)(a1 + 8) = v3 == 0;
      type metadata accessor for ResolvableAttributeConfiguration(0);
      return swift_storeEnumTagMultiPayload();
    case 1uLL:
      v6 = objc_msgSend(v1, sel_updateWallClockAlignment);
      if (!v6)
      {
        specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
        goto LABEL_17;
      }
      *(_QWORD *)a1 = v6;
      type metadata accessor for ResolvableAttributeConfiguration(0);
      return swift_storeEnumTagMultiPayload();
    case 2uLL:
      v7 = objc_msgSend(v1, sel_timerEndDate);
      if (!v7)
      {
        specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
        goto LABEL_17;
      }
      v8 = v7;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for ResolvableAttributeConfiguration(0);
      return swift_storeEnumTagMultiPayload();
    case 3uLL:
      v9 = objc_msgSend(v1, sel_timerInterval);
      if (!v9)
        goto LABEL_16;
      v10 = v9;
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      v12 = *(int *)(v11 + 48);
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

      *(_BYTE *)(a1 + v12) = 1;
      goto LABEL_17;
    case 4uLL:
      v13 = objc_msgSend(v1, sel_timerInterval);
      if (v13)
      {
        v14 = v13;
        type metadata accessor for (interval: DateInterval, countdown: Bool)();
        v16 = *(int *)(v15 + 48);
        static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

        *(_BYTE *)(a1 + v16) = 0;
      }
      else
      {
LABEL_16:
        specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
      }
      goto LABEL_17;
    default:
LABEL_17:
      type metadata accessor for ResolvableAttributeConfiguration(0);
      return swift_storeEnumTagMultiPayload();
  }
}

id DateFormattingContext.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  _BYTE v14[16];

  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Date?(a1, (uint64_t)v4);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v4, v5);
  }
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  v9 = *v8;
  if (v8[1])
  {
    swift_retain_n();
    swift_retain_n();
    v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v9);
  }
  else
  {
    v11 = swift_retain_n();
    v10 = specialized closure #1 in PropertyList.subscript.getter(v11);
  }
  swift_release_n();
  swift_release_n();
  v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithReferenceDate_isLuminanceReduced_, isa, v10 & 1);

  outlined destroy of ResolvableStringResolutionContext(a1);
  return v12;
}

uint64_t protocol witness for ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  uint64_t v8;

  v2 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ResolvableCurrentDate.provider.getter();
  if (!v5)
    return swift_storeEnumTagMultiPayload();
  v6 = v5;
  BaseDateProvider.updateConfiguration.getter((uint64_t)v4);

  return outlined init with take of ResolvableAttributeConfiguration((uint64_t)v4, a1);
}

uint64_t outlined init with take of ResolvableAttributeConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvableAttributeConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvableStringResolutionContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ResolvedTextContainer.append(_:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v9 = *a2;
  v8 = a2[1];
  v10 = *a3;
  v18[0] = *a2;
  v18[1] = v8;
  v17 = v10;
  if (v8)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v9, &v16);
    swift_release_n();
    swift_release_n();
    v11 = v16;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey);
    BloomFilter.init(hashValue:)(v12);
    v13 = swift_retain_n();
    v14 = specialized find1<A>(_:key:filter:)(v13, v16);
    if (v14)
      v11 = *(_QWORD *)(v14 + 72);
    else
      v11 = 0;
    swift_release_n();
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, BOOL, uint64_t, uint64_t))(a5 + 48))(a1, v18, &v17, v11 == 0, a4, a5);
}

uint64_t ResolvedTextContainer.append<A>(_:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v13 = *a2;
  v12 = a2[1];
  v14 = *a3;
  v22[0] = *a2;
  v22[1] = v12;
  v21 = v14;
  if (v12)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v13, &v20);
    swift_release_n();
    swift_release_n();
    v15 = v20;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey);
    BloomFilter.init(hashValue:)(v16);
    v17 = swift_retain_n();
    v18 = specialized find1<A>(_:key:filter:)(v17, v20);
    if (v18)
      v15 = *(_QWORD *)(v18 + 72);
    else
      v15 = 0;
    swift_release_n();
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(a1, v22, &v21, v15 == 0, a5, a7, a4, a6);
}

double Text.ResolvedProperties.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_WORD *)(a1 + 32) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 40) = v1;
  *(_QWORD *)(a1 + 48) = v1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  result = -0.0;
  *(_OWORD *)(a1 + 96) = xmmword_235260F00;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = v1;
  return result;
}

double Text.Resolved.init()@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  Text.Style.init()(a1);
  v2 = (int *)type metadata accessor for Text.Resolved(0);
  *(_QWORD *)(a1 + v2[5]) = 0;
  *(_BYTE *)(a1 + v2[6]) = 1;
  v3 = (_QWORD *)(a1 + v2[7]);
  *v3 = 0;
  v3[1] = 0;
  v4 = a1 + v2[8];
  *(_WORD *)(v4 + 32) = 0;
  v5 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = v5;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_QWORD *)(v4 + 88) = 0;
  result = -0.0;
  *(_OWORD *)(v4 + 96) = xmmword_235260F00;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 112) = v5;
  return result;
}

Swift::Void __swiftcall Text.ResolvedProperties.registerCustomAttachment(at:)(Swift::Int at)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD **)(v1 + 112);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v3[v5 + 4] = at;
  *(_QWORD *)(v1 + 112) = v3;
}

uint64_t Text.Style.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v2 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = xmmword_235260F20;
  *(_OWORD *)(a1 + 96) = xmmword_235260F20;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 1;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 248) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 320) = 258;
  v9 = (int *)type metadata accessor for Text.Style(0);
  v10 = v9[21];
  if (one-time initialization token for automatic != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v5, (uint64_t)static TypesettingLanguage.automatic);
  outlined init with copy of TypesettingLanguage(v11, (uint64_t)v7, type metadata accessor for TypesettingLanguage);
  outlined init with copy of TypesettingLanguage(v11, (uint64_t)v4, type metadata accessor for TypesettingLanguage);
  v12 = &v4[*(int *)(v2 + 20)];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v7, (uint64_t)v4, type metadata accessor for TypesettingLanguage);
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v4, a1 + v10, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  *(_QWORD *)(a1 + v9[22]) = v8;
  v13 = a1 + v9[23];
  v14 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)(a1 + v9[24]) = MEMORY[0x24BEE4B08];
  return result;
}

unint64_t Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)(unint64_t *a1, char a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  unint64_t v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];

  v3 = *v2;
  if (v3 >= 2)
  {
    swift_retain();
  }
  else if ((a2 & 1) != 0)
  {
    v4 = *a1;
    v5 = a1[1];
    if (!v3)
    {
      if (!v5)
      {
        v13[0] = *a1;
        v13[1] = 0;
        swift_retain();
        v3 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(v13);
        swift_release();
        return v3;
      }
      swift_retain_n();
      swift_retain_n();
      v6 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4);
      goto LABEL_11;
    }
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
      swift_release_n();
      swift_release_n();
      if (!v3)
      {
        swift_retain_n();
        swift_retain_n();
        v6 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4);
LABEL_11:
        v3 = v6;
        swift_release_n();
LABEL_14:
        swift_release_n();
      }
    }
    else
    {
      v7 = swift_retain_n();
      v3 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v16);
      swift_release_n();
      if (!v3)
      {
        v8 = swift_retain_n();
        specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)v13);
        swift_release_n();
        v9 = v14;
        v10 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        v12[0] = v4;
        v12[1] = 0;
        v3 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 8))(v12, v9, v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
        goto LABEL_14;
      }
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

unint64_t Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  void (*v16)(_QWORD *);
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD v37[10];
  char v38;
  int v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned __int8 v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  _QWORD v59[3];
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  __int16 v69;

  v5 = *a1;
  v6 = a1[1];
  v7 = *a2;
  v8 = *v4;
  v9 = (unint64_t)*v4 >> 62;
  if (!(_DWORD)v9)
    goto LABEL_17;
  if ((_DWORD)v9 != 1)
  {
    if ((a4 & 1) == 0)
      return 0;
    if ((v7 & 2) != 0)
      return 0xBF800000BF800000;
    if (v8 == 0x8000000000000000)
    {
      v44 = *a1;
      v45 = v6;
      swift_retain();
      swift_retain();
      v10 = EnvironmentValues.foregroundStyle.getter();
      if (!v10)
      {
LABEL_9:
        swift_release();
        swift_release();
LABEL_14:
        if (one-time initialization token for primary != -1)
          swift_once();
        v8 = (uint64_t)static Color.primary;
        goto LABEL_17;
      }
    }
    else
    {
      v44 = *a1;
      v45 = v6;
      swift_retain();
      swift_retain();
      v10 = EnvironmentValues.defaultForegroundStyle.getter();
      if (!v10)
        goto LABEL_9;
    }
    v8 = specialized ShapeStyle.fallbackColor(in:level:)(v5, v6, 0, v10);
    swift_release();
    swift_release();
    swift_release();
    if (v8)
      goto LABEL_18;
    goto LABEL_14;
  }
  if ((v7 & 0x20) != 0)
    return 0xBF800000BF800000;
  v8 &= 0x3FFFFFFFFFFFFFFFuLL;
LABEL_17:
  swift_retain();
LABEL_18:
  if ((v7 & 0x20) != 0)
  {
    v59[0] = 0;
    v59[1] = 0;
    v59[2] = 1;
    v60 = 1;
    v61 = 0;
    v62 = 5;
    v63 = v5;
    v64 = v6;
    v65 = 0u;
    v66 = 0u;
    v67 = 0;
    v68 = 1;
    v69 = 1;
    v16 = *(void (**)(_QWORD *))(*(_QWORD *)v8 + 80);
    swift_retain();
    swift_retain();
    v16(v59);
    v36 = v62;
    v35 = v61;
    if (v62 == 1)
      swift_bridgeObjectRetain();
    v43 = 0;
    _ShapeStyle_Pack.subscript.getter(&v43, 0, (uint64_t)&v44);
    swift_bridgeObjectRelease();
    v33 = v45;
    v34 = v44;
    v17 = v46;
    v18 = v47;
    v19 = v48;
    v31 = v50;
    v32 = v49;
    v30 = v51;
    v20 = v52;
    v21 = v53;
    v22 = v54;
    v23 = v56;
    v24 = v57;
    v37[0] = v44;
    v37[1] = v45;
    v37[2] = v46;
    v37[3] = v47;
    v37[4] = v48;
    v37[5] = v49;
    v37[6] = v50;
    v37[7] = v51;
    v37[8] = v52;
    v37[9] = v53;
    v38 = v54;
    v39 = v55;
    v40 = v56;
    v41 = v57;
    v42 = v58;
    Text.ResolvedProperties.addCustomStyle(_:)((uint64_t)v37);
    v26 = v25;
    v28 = v27;
    swift_release();
    outlined consume of _ShapeStyle_Pack.Fill(v34, v33, v17, v18, v19, v32, v31, v30, v20, v21, v22);
    outlined consume of GraphicsBlendMode?(v23, v24);
    swift_bridgeObjectRelease();
    v11 = v26 | ((unint64_t)v28 << 32);
    outlined consume of _ShapeStyle_Shape.Result(v35, v36);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    v12 = specialized ShapeStyle.fallbackColor(in:level:)(v5, v6, 0, v8);
    swift_release();
    if (!v12)
    {
      if (one-time initialization token for foreground != -1)
        swift_once();
      v12 = static Color.foreground;
      swift_retain();
    }
    v44 = v5;
    v45 = v6;
    v13 = (*(float (**)(unint64_t *))(*(_QWORD *)v12 + 104))(&v44);
    v15 = v14;
    swift_release();
    swift_release();
    return LODWORD(v13) | ((unint64_t)v15 << 32);
  }
  return v11;
}

void Text.ResolvedProperties.addColor(_:)(float a1, float a2)
{
  uint64_t v2;
  __int16 v3;

  v3 = *(_WORD *)(v2 + 32);
  if ((v3 & 1) == 0 && a1 == -1.0 && a2 == -1.0)
    *(_WORD *)(v2 + 32) = v3 | 1;
}

uint64_t specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(a1, a2, a3, a4, (void (*)(__int128 *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(__int128 *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a5);
}

{
  return specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(a1, a2, a3, a4, (void (*)(__int128 *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(__int128 *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a5);
}

uint64_t specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(__int128 *__return_ptr, uint64_t)@<X4>, void (*a6)(__int128 *__return_ptr, uint64_t, _BYTE *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t result;
  double (*v18)(__int128 *);
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  unsigned int v28;
  _BYTE v29[16];
  __int128 v30;

  v9 = a2[1];
  if (v9 == 2)
  {
LABEL_7:
    swift_release();
    result = swift_release();
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    *(_WORD *)(a7 + 24) = 256;
    return result;
  }
  v10 = *a1;
  v11 = *a2;
  v12 = *a2;
  v13 = a2[1];
  if (v9 == 1)
  {
    v27 = *a1;
    if (a4)
    {
      swift_retain();
      swift_retain();
      a5(&v30, a3);
      swift_release();
      swift_release();
    }
    else
    {
      v16 = swift_retain_n();
      a6(&v30, v16, v29);
      swift_release_n();
    }
    v13 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) == 1)
      goto LABEL_7;
    v12 = v30;
    swift_retain();
    v10 = v27;
  }
  if (v13)
  {
    v30 = v10;
    v18 = *(double (**)(__int128 *))(*(_QWORD *)v13 + 104);
    outlined copy of Text.Style.LineStyle(v11, v9);
    outlined copy of Text.Style.LineStyle(v11, v9);
    swift_retain();
    v25 = COERCE_UNSIGNED_INT64(v18(&v30));
    v28 = v19;
    v24 = v20;
    v26 = v21;
    outlined consume of Text.LineStyle?(v12, v13);
    swift_release_n();
    swift_release();
    result = swift_release();
    v22.i64[0] = v25;
    v22.i64[1] = v24;
    v23 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v26, v28), 0x20uLL), v22);
  }
  else
  {
    outlined copy of Text.Style.LineStyle(v11, v9);
    outlined copy of Text.Style.LineStyle(v11, v9);
    outlined consume of Text.LineStyle?(v12, 0);
    swift_release();
    result = swift_release();
    v23 = 0uLL;
  }
  *(_QWORD *)a7 = v12;
  *(int8x16_t *)(a7 + 8) = v23;
  *(_BYTE *)(a7 + 24) = v13 == 0;
  *(_BYTE *)(a7 + 25) = 0;
  return result;
}

__int128 *Text.Style.LineStyle.resolve(in:fallbackStyle:)@<X0>(__int128 *result@<X0>, _QWORD *(*a2)(__int128 *__return_ptr)@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(__int128 *);
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  __int128 v21;

  v5 = v3[1];
  if (v5 == 2)
    goto LABEL_4;
  v6 = *result;
  v7 = *v3;
  v8 = *v3;
  v9 = v3[1];
  if (v5 == 1)
  {
    v19 = *result;
    result = (__int128 *)a2(&v21);
    v9 = *((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1) == 1)
    {
LABEL_4:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_WORD *)(a3 + 24) = 256;
      return result;
    }
    v8 = v21;
    swift_retain();
    v6 = v19;
  }
  if (v9)
  {
    v21 = v6;
    v10 = *(double (**)(__int128 *))(*(_QWORD *)v9 + 104);
    outlined copy of Text.Style.LineStyle(v7, v5);
    outlined copy of Text.Style.LineStyle(v7, v5);
    swift_retain();
    v17 = COERCE_UNSIGNED_INT64(v10(&v21));
    v20 = v11;
    v16 = v12;
    v18 = v13;
    outlined consume of Text.LineStyle?(v8, v9);
    result = (__int128 *)swift_release_n();
    v14.i64[0] = v17;
    v14.i64[1] = v16;
    v15 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v18, v20), 0x20uLL), v14);
  }
  else
  {
    outlined copy of Text.Style.LineStyle(v7, v5);
    outlined copy of Text.Style.LineStyle(v7, v5);
    result = (__int128 *)outlined consume of Text.LineStyle?(v8, 0);
    v15 = 0uLL;
  }
  *(_QWORD *)a3 = v8;
  *(int8x16_t *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 24) = v9 == 0;
  *(_BYTE *)(a3 + 25) = 0;
  return result;
}

id Text.ResolvedProperties.Paragraph.style(environment:)(uint64_t *a1)
{
  _QWORD *v1;
  void *v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;
  uint64_t v19;

  v2 = (void *)v1[1];
  if (!v2)
  {
    v4 = v1;
    v6 = *a1;
    v5 = a1[1];
    v18 = *a1;
    v19 = v5;
    v7 = makeParagraphStyle(environment:)((unint64_t *)&v18);
    objc_msgSend(v7, sel_setCompositionLanguage_, *v4);
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      v8 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v6);
      swift_release_n();
      swift_release_n();
      if ((v8 & 1) != 0)
      {
        objc_msgSend(v7, sel_setFullyJustified_, 1);
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v18);
        swift_release_n();
        swift_release_n();
        v9 = v18;
LABEL_11:
        objc_msgSend(v7, sel_setBaseWritingDirection_, v9);
        objc_msgSend(v7, sel_setLineBreakMode_, 1);
      }
    }
    else
    {
      v18 = v6;
      v19 = 0;
      swift_retain();
      v13 = specialized static ShouldRedactContentKey.value(in:)(&v18, v10, v11, v12);
      swift_release();
      if ((v13 & 1) != 0)
      {
        objc_msgSend(v7, sel_setFullyJustified_, 1);
        v14 = swift_retain_n();
        v15 = specialized find<A>(_:key:)(v14);
        if (v15)
          v9 = *(unsigned __int8 *)(v15 + 72);
        else
          v9 = 0;
        swift_release_n();
        goto LABEL_11;
      }
    }
    v4[1] = v7;
    v3 = v7;
    goto LABEL_13;
  }
  v3 = (id)v1[1];
LABEL_13:
  v16 = v2;
  return v3;
}

uint64_t Text.ResolvedProperties.CustomAttachments.init(characterIndices:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Text.ResolvedProperties.Transition.init(transition:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int16 v3;
  char v4;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(_WORD *)(result + 12);
  v4 = *(_BYTE *)(result + 14);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_WORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 14) = v4;
  return result;
}

uint64_t Text.ResolvedProperties.Features.init(rawValue:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL Text.ResolvedProperties.CustomAttachments.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t Text.Style.addFontModifier<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  type metadata accessor for AnyFontModifier();
  static AnyFontModifier.static<A>(_:)(a1, a2, a3);
  MEMORY[0x23B7C61A8]();
  if (*(_QWORD *)((*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

Swift::Void __swiftcall Text.ResolvedProperties.addSensitive()()
{
  uint64_t v0;
  __int16 v1;

  v1 = *(_WORD *)(v0 + 32);
  if ((v1 & 4) == 0)
    *(_WORD *)(v0 + 32) = v1 | 4;
}

void Text.Style.fontTraits(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  const __CTFontDescriptor *v26;
  CFTypeRef v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  __int128 v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  char v48;

  v4 = *a1;
  v5 = a1[1];
  v40 = *(id *)v2;
  v45 = v4;
  *(_QWORD *)&v46 = v5;
  v6 = Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)((unint64_t *)&v45, 1);
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    v39 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v39 = specialized closure #1 in PropertyList.subscript.getter(v7);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 8);
  v9 = v8 >> 62;
  v38 = v8;
  if (v8 >> 62)
    goto LABEL_21;
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  v11 = v39 >> 62;
  if (v10)
  {
    while (1)
    {
LABEL_9:
      if (v5)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4, (uint64_t)&v45);
        swift_release_n();
        swift_release_n();
        v36 = a2;
        v37 = v9;
        if (!v6)
          goto LABEL_20;
      }
      else
      {
        v40 = (id)v4;
        *(_QWORD *)&v41 = 0;
        swift_retain();
        static EnvironmentValues.FontContextKey.value(in:)((uint64_t *)&v40, v18, v19, v20, (uint64_t)&v45);
        swift_release();
        v36 = a2;
        v37 = v9;
        if (!v6)
        {
LABEL_20:
          __break(1u);
LABEL_21:
          swift_bridgeObjectRetain();
          v10 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }
      v12 = v11;
      v13 = v45;
      v14 = BYTE1(v45);
      v11 = *((_QWORD *)&v46 + 1);
      a2 = v46;
      v9 = v47;
      v15 = v48;
      v6 = *(_QWORD *)(*(_QWORD *)v6 + 80);
      swift_retain();
      v16 = (void *)((uint64_t (*)(uint64_t *))v6)(&v45);
      swift_release();
      v40 = v16;
      if (v12)
      {
        v6 = v39;
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v4)
          goto LABEL_23;
      }
      else
      {
        v4 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v4)
          goto LABEL_23;
      }
      if (v4 < 1)
      {
        __break(1u);
        goto LABEL_39;
      }
      v5 = 0;
      do
      {
        if ((v39 & 0xC000000000000001) != 0)
        {
          v17 = MEMORY[0x23B7C6D9C](v5, v39);
        }
        else
        {
          v17 = *(_QWORD *)(v39 + 8 * v5 + 32);
          swift_retain();
        }
        ++v5;
        LOBYTE(v45) = v13;
        BYTE1(v45) = v14;
        *(_QWORD *)&v46 = a2;
        *((_QWORD *)&v46 + 1) = v11;
        v47 = v9;
        v48 = v15;
        (*(void (**)(id *, uint64_t *))(*(_QWORD *)v17 + 80))(&v40, &v45);
        swift_release();
      }
      while (v4 != v5);
LABEL_23:
      swift_bridgeObjectRelease();
      if (v37)
      {
        swift_bridgeObjectRetain();
        v21 = v38;
        v6 = _CocoaArrayWrapper.endIndex.getter();
        if (!v6)
          goto LABEL_33;
      }
      else
      {
        v21 = v38;
        v6 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v6)
          goto LABEL_33;
      }
      if (v6 >= 1)
      {
        v22 = 0;
        v23 = v21 & 0xC000000000000001;
        do
        {
          if (v23)
          {
            v24 = MEMORY[0x23B7C6D9C](v22, v21);
          }
          else
          {
            v24 = *(_QWORD *)(v21 + 8 * v22 + 32);
            swift_retain();
          }
          ++v22;
          LOBYTE(v45) = v13;
          BYTE1(v45) = v14;
          *(_QWORD *)&v46 = a2;
          *((_QWORD *)&v46 + 1) = v11;
          v47 = v9;
          v48 = v15;
          (*(void (**)(id *, uint64_t *))(*(_QWORD *)v24 + 80))(&v40, &v45);
          swift_release();
          v21 = v38;
        }
        while (v6 != v22);
LABEL_33:
        swift_bridgeObjectRelease();
        v25 = (const __CFString *)*MEMORY[0x24BDC4DA8];
        v26 = (const __CTFontDescriptor *)v40;
        v27 = CTFontDescriptorCopyAttribute(v26, v25);
        v28 = 0;
        if (v27)
        {
          v45 = (uint64_t)v27;
          v29 = v36;
          if (swift_dynamicCast())
            v28 = v44;
        }
        else
        {
          v29 = v36;
        }
        CTFontDescriptorGetWeight();
        v31 = v30;
        swift_release();

        *(_QWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = v31;
        *(_QWORD *)(v29 + 16) = 0;
        *(_BYTE *)(v29 + 24) = 1;
        return;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      swift_bridgeObjectRetain();
      v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v32)
        goto LABEL_41;
    }
  }
  if (v11)
    goto LABEL_40;
  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_41:
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4, (uint64_t)&v45);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      v40 = (id)v4;
      *(_QWORD *)&v41 = 0;
      swift_retain();
      swift_retain();
      static EnvironmentValues.FontContextKey.value(in:)((uint64_t *)&v40, v33, v34, v35, (uint64_t)&v45);
      swift_release();
    }
    LOWORD(v40) = v45;
    v41 = v46;
    v42 = v47;
    v43 = v48;
    (*(void (**)(id *))(*(_QWORD *)v6 + 88))(&v40);
    swift_release_n();
  }
  else
  {
    __break(1u);
  }
}

void SwiftUITextAttachment.draw(in:at:)(uint64_t *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t v11;
  id v12;
  char v13;
  char v14;
  char v15;
  __int16 v16;
  char v17;
  __int128 v18;
  _OWORD v19[4];
  uint64_t v20;
  char v21;
  id v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  char v32;
  char v33;
  __int16 v34;

  v4 = v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage;
  v5 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 16);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 24);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 32);
  v8 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 40);
  if (v5 != 0.0)
    __asm { BR              X12 }
  v9 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin) + a2;
  v10 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin + 8) + a3;
  v11 = *a1;
  v13 = *(_BYTE *)(v4 + 60);
  v14 = *(_BYTE *)(v4 + 96);
  v15 = *(_BYTE *)(v4 + 97);
  v16 = *(_WORD *)(v4 + 98);
  v17 = *(_BYTE *)(v4 + 8);
  v22 = *(id *)v4;
  v12 = v22;
  v23 = v17;
  v24 = v5;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = *(_OWORD *)(v4 + 44);
  v29 = v13;
  v18 = *(_OWORD *)(v4 + 80);
  v30 = *(_OWORD *)(v4 + 64);
  v31 = v18;
  v32 = v14;
  v33 = v15;
  v34 = v16;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v21 = -1;
  outlined copy of GraphicsImage.Contents?(v22, v17);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v22, 256, (uint64_t)v19, v11, v9, v10, 0.0, 0.0);
  outlined consume of GraphicsImage.Contents?(v12, v17);
}

uint64_t Text.Resolved.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TypesettingLanguage(v1, a1, type metadata accessor for Text.Style);
}

uint64_t Text.Resolved.style.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ResolvedTextHelper.NextUpdate(a1, v1, type metadata accessor for Text.Style);
}

uint64_t (*Text.Resolved.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void *Text.Resolved.attributedString.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for Text.Resolved(0) + 20));
  v2 = v1;
  return v1;
}

void Text.Resolved.attributedString.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for Text.Resolved(0) + 20);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*Text.Resolved.attributedString.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Text.Resolved(0);
  return _ViewInputs.base.modify;
}

uint64_t Text.Resolved.includeDefaultAttributes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Text.Resolved(0) + 24));
}

uint64_t Text.Resolved.includeDefaultAttributes.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Text.Resolved(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Text.Resolved.includeDefaultAttributes.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Text.Resolved(0);
  return _ViewInputs.base.modify;
}

__n128 Text.Resolved.idiom.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for Text.Resolved(0) + 28));
  *a1 = result;
  return result;
}

uint64_t Text.Resolved.idiom.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  result = type metadata accessor for Text.Resolved(0);
  v5 = (_QWORD *)(v1 + *(int *)(result + 28));
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*Text.Resolved.idiom.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Text.Resolved(0);
  return _ViewInputs.base.modify;
}

_QWORD *Text.Resolved.properties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = v1 + *(int *)(type metadata accessor for Text.Resolved(0) + 32);
  v4 = *(_OWORD *)(v3 + 80);
  v5 = *(_OWORD *)(v3 + 112);
  v21 = *(_OWORD *)(v3 + 96);
  v22 = v5;
  v6 = *(_OWORD *)(v3 + 16);
  v7 = *(_OWORD *)(v3 + 48);
  v17 = *(_OWORD *)(v3 + 32);
  v8 = v17;
  v18 = v7;
  v9 = *(_OWORD *)(v3 + 48);
  v10 = *(_OWORD *)(v3 + 80);
  v19 = *(_OWORD *)(v3 + 64);
  v11 = v19;
  v20 = v10;
  v12 = *(_OWORD *)(v3 + 16);
  v16[0] = *(_OWORD *)v3;
  v13 = v16[0];
  v16[1] = v12;
  v14 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v4;
  v23 = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v3 + 128);
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v6;
  return outlined retain of Text.ResolvedProperties(v16);
}

__n128 Text.Resolved.properties.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  _OWORD v12[8];
  uint64_t v13;

  v3 = v1 + *(int *)(type metadata accessor for Text.Resolved(0) + 32);
  v4 = *(_OWORD *)(v3 + 112);
  v12[6] = *(_OWORD *)(v3 + 96);
  v12[7] = v4;
  v13 = *(_QWORD *)(v3 + 128);
  v5 = *(_OWORD *)(v3 + 48);
  v12[2] = *(_OWORD *)(v3 + 32);
  v12[3] = v5;
  v6 = *(_OWORD *)(v3 + 80);
  v12[4] = *(_OWORD *)(v3 + 64);
  v12[5] = v6;
  v7 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v7;
  outlined release of Text.ResolvedProperties(v12);
  v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v3 + 112) = v8;
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(a1 + 128);
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 48) = v9;
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 80) = v10;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(__n128 *)(v3 + 16) = result;
  return result;
}

uint64_t (*Text.Resolved.properties.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Text.Resolved(0);
  return _ViewInputs.base.modify;
}

void Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t a5)
{
  int *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int16 v28;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v30 = a4;
  v9 = (int *)type metadata accessor for Text.Resolved(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v12);
  v16 = *a2;
  v15 = a2[1];
  v31 = *a3;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v17 + 16))(&v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, a5, v13);
  v18 = String.init<A>(_:)();
  v34 = v16;
  v35 = v15;
  v20 = String.caseConvertedIfNeeded(_:)(&v34, v18, v19);
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = v32;
  outlined init with copy of TypesettingLanguage(v32, (uint64_t)v11, type metadata accessor for Text.Resolved);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v20;
  *(_QWORD *)(v24 + 24) = v22;
  v25 = v23 + v9[8];
  v34 = v16;
  v35 = v15;
  LODWORD(a2) = v11[v9[6]];
  v33 = v31;
  swift_bridgeObjectRetain();
  v26 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #1 in static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:), v24, &v34, (int)a2, &v33, v25);
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v11, type metadata accessor for Text.Resolved);
  v34 = v16;
  v35 = v15;
  Text.Resolved.append(_:with:in:)(v20, v22, v26, &v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = *(void **)(v23 + v9[5]);
  if (v27)
  {
    if (objc_msgSend(v27, sel_isEmptyOrTerminatedByParagraphSeparator))
    {

      *(_QWORD *)(v25 + 128) = 0;
    }
    if ((v30 & 1) != 0)
      v28 = 256;
    else
      v28 = 0;
    *(_WORD *)(v25 + 32) |= v28;
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t Text.Resolved.nsAttributes(content:in:with:properties:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  int v10;
  uint64_t v12;
  __int128 v13;

  v9 = *a4;
  v13 = *a3;
  v10 = *(unsigned __int8 *)(v5 + *(int *)(type metadata accessor for Text.Resolved(0) + 24));
  v12 = v9;
  return Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(a1, a2, (uint64_t *)&v13, v10, &v12, a5);
}

void Text.Resolved.append(_:with:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  Class isa;
  id v30;
  id v31;
  void *v32;
  Class v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v5 = v4;
  v7 = *a4;
  v6 = a4[1];
  v35 = *a4;
  v36 = v6;
  v8 = String.caseConvertedIfNeeded(_:)(&v35, a1, a2);
  v10 = v9;
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    v11 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v7);
    swift_release_n();
    swift_release_n();
    if ((v11 & 1) == 0)
    {
LABEL_6:
      swift_retain_n();
      swift_retain_n();
      v19 = specialized PropertyList.Tracker.value<A>(_:for:)(v7);
      swift_release_n();
      swift_release_n();
      if ((v19 & 1) == 0)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else
  {
    v35 = v7;
    v36 = 0;
    swift_retain();
    v15 = specialized static ShouldRedactContentKey.value(in:)(&v35, v12, v13, v14);
    swift_release();
    if ((v15 & 1) == 0)
      goto LABEL_8;
  }
  v16 = String.count.getter();
  v8 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  v10 = v18;
  if (v6)
    goto LABEL_6;
LABEL_8:
  v20 = swift_retain_n();
  v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
  swift_release_n();
  if ((v21 & 1) == 0)
    goto LABEL_11;
LABEL_9:
  v22 = v5 + *(int *)(type metadata accessor for Text.Resolved(0) + 32);
  v23 = *(_WORD *)(v22 + 32);
  if ((v23 & 4) == 0)
    *(_WORD *)(v22 + 32) = v23 | 4;
LABEL_11:
  v24 = *(int *)(type metadata accessor for Text.Resolved(0) + 20);
  v25 = *(void **)(v5 + v24);
  if (v25)
  {
    v26 = objc_allocWithZone(MEMORY[0x24BDD1458]);
    v27 = v25;
    swift_bridgeObjectRetain();
    v28 = (void *)MEMORY[0x23B7C5DAC](v8, v10);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v30 = objc_msgSend(v26, sel_initWithString_attributes_, v28, isa);

    objc_msgSend(v27, sel_appendAttributedString_, v30);
  }
  else
  {
    v31 = objc_allocWithZone(MEMORY[0x24BDD1688]);
    swift_bridgeObjectRetain();
    v32 = (void *)MEMORY[0x23B7C5DAC](v8, v10);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    v33 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v31, sel_initWithString_attributes_, v32, v33);

    *(_QWORD *)(v5 + v24) = v34;
  }
}

Swift::Void __swiftcall Text.ResolvedProperties.Paragraph.markParagraphBoundary(_:)(Swift::Bool a1)
{
  uint64_t v1;

  if (a1)
  {

    *(_QWORD *)(v1 + 8) = 0;
  }
}

uint64_t Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(void *a1, uint64_t *a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  __int16 v20;
  _QWORD v21[6];

  v7 = *a2;
  v8 = a2[1];
  v9 = *a3;
  v10 = objc_msgSend(a1, sel_length);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v4;
  v11[3] = v9;
  v11[4] = v7;
  v11[5] = v8;
  v11[6] = a1;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:);
  *(_QWORD *)(v12 + 24) = v11;
  v21[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v21[5] = v12;
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 1107296256;
  v21[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v21[3] = &block_descriptor_29;
  v13 = _Block_copy(v21);
  swift_retain();
  v14 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttributesInRange_options_usingBlock_, 0, v10, 0, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v16 = type metadata accessor for Text.Resolved(0);
    v17 = *(int *)(v16 + 20);
    if (!*(_QWORD *)(v4 + v17))
    {
      v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, v14);
      v19 = *(void **)(v4 + v17);
      *(_QWORD *)(v4 + v17) = v18;

    }
    if ((a4 & 1) != 0)
      v20 = 256;
    else
      v20 = 0;
    *(_WORD *)(v4 + *(int *)(v16 + 32) + 32) |= v20;
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  char v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81[8];
  uint64_t v82;
  _OWORD v83[2];
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v78 = a2;
  v79 = a6;
  v14 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (unint64_t *)((char *)&v76 - v18);
  v80 = a5;
  outlined init with copy of TypesettingLanguage(a5, (uint64_t)&v76 - v18, v20);
  v86 = a1;
  swift_bridgeObjectRetain();
  Dictionary<>.transferAttributedStringStyles(to:)((uint64_t)v19);
  if (one-time initialization token for kitLink == -1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_3;
LABEL_26:
    v84 = 0u;
    v85 = 0u;
LABEL_27:
    outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_28;
  }
  swift_once();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_26;
LABEL_3:
  v21 = a3;
  v22 = (id)static NSAttributedStringKey.kitLink;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
  if ((v24 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v23, (uint64_t)&v84);
  }
  else
  {
    v84 = 0u;
    v85 = 0u;
  }

  a3 = v21;
  if (!*((_QWORD *)&v85 + 1))
    goto LABEL_27;
  outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  v25 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000017, 0x80000002352E3830);
  if ((v79 & 0x10) != 0)
  {

    goto LABEL_28;
  }
  v26 = *(_QWORD *)(a1 + 16);
  v77 = (unint64_t *)v25;
  if (v26)
  {
    v27 = v25;
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
    if ((v29 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)&v84);
    }
    else
    {
      v84 = 0u;
      v85 = 0u;
    }

    if (*((_QWORD *)&v85 + 1))
    {

      outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
      a3 = v21;
      goto LABEL_28;
    }
  }
  else
  {
    v84 = 0u;
    v85 = 0u;
  }
  outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  *(_QWORD *)&v84 = a7;
  *((_QWORD *)&v84 + 1) = a8;
  v30 = EnvironmentValues.tintColor.getter();
  if (v30)
  {
    v31 = v30;

    a3 = v21;
  }
  else
  {
    a3 = v21;
    if (a8)
    {
      swift_retain_n();
      swift_retain_n();
      v33 = specialized PropertyList.Tracker.value<A>(_:for:)(a7);
    }
    else
    {
      v35 = swift_retain_n();
      v33 = specialized closure #1 in PropertyList.subscript.getter(v35, (uint64_t)v81);
    }
    v34 = v32;
    swift_release_n();
    swift_release_n();
    if (v33)
    {
      *(_QWORD *)&v84 = a7;
      *((_QWORD *)&v84 + 1) = a8;
      v31 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v34 + 8))(&v84, v33, v34);

    }
    else
    {

      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider, (uint64_t)&type metadata for Color.AccentColorProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorBox);
      v31 = swift_allocObject();
    }
  }
  outlined consume of Text.Style.TextStyleColor(v19[2]);
  v19[2] = v31;
LABEL_28:
  v36 = objc_msgSend(a9, sel_attributedSubstringFromRange_, v78, a3);
  v37 = objc_msgSend(v36, sel_string);

  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  *(_QWORD *)&v84 = a7;
  *((_QWORD *)&v84 + 1) = a8;
  v41 = String.caseConvertedIfNeeded(_:)((uint64_t *)&v84, v38, v40);
  v43 = v42;
  swift_bridgeObjectRelease();
  v77 = v19;
  outlined init with copy of TypesettingLanguage((uint64_t)v19, (uint64_t)v16, type metadata accessor for Text.Style);
  v44 = swift_allocObject();
  v45 = a8;
  v46 = v44;
  *(_QWORD *)(v44 + 16) = v41;
  *(_QWORD *)(v44 + 24) = v43;
  v78 = a7;
  *(_QWORD *)&v84 = a7;
  *((_QWORD *)&v84 + 1) = v45;
  v47 = v45;
  v48 = (int *)type metadata accessor for Text.Resolved(0);
  LODWORD(v38) = *(unsigned __int8 *)(v80 + v48[6]);
  *(_QWORD *)&v83[0] = v79;
  v49 = v80 + v48[8];
  swift_bridgeObjectRetain();
  v50 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:), v46, (uint64_t *)&v84, v38, (uint64_t *)v83, v49);
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for Text.Style);
  v51 = v86;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v84 = v51;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v50, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v84);
  v86 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v53 = specialized Collection.first.getter(v41, v43);
  swift_bridgeObjectRelease();
  v54 = v47;
  v55 = v78;
  if ((v53 & 0x1FFFFFFFFLL) != 0xFFFC)
    goto LABEL_41;
  v56 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001BLL, 0x80000002352E39F0);
  v57 = v56;
  v58 = v86;
  if (*(_QWORD *)(v86 + 16))
  {
    v59 = v56;
    v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v58 + 56) + 32 * v60, (uint64_t)&v84);
    }
    else
    {
      v84 = 0u;
      v85 = 0u;
    }

    if (*((_QWORD *)&v85 + 1))
    {
      v62 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSEmojiImageTextAttachment);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v63 = *(void **)&v83[0];
        if (one-time initialization token for kitAttachment != -1)
          swift_once();
        v64 = (void *)static NSAttributedStringKey.kitAttachment;
        *((_QWORD *)&v85 + 1) = v62;
        *(_QWORD *)&v84 = v63;
        outlined init with take of Any(&v84, v83);
        v65 = v64;
        v66 = v63;
        v67 = v86;
        v68 = swift_isUniquelyReferenced_nonNull_native();
        v82 = v67;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v83, v65, v68);
        v86 = v82;

        swift_bridgeObjectRelease();
        v54 = v47;
        v55 = v78;
      }
      goto LABEL_40;
    }
  }
  else
  {
    v84 = 0u;
    v85 = 0u;
  }
  outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_40:
  v69 = v57;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v69, &v84);

  outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_41:
  v70 = v86;
  *(_QWORD *)&v84 = v55;
  *((_QWORD *)&v84 + 1) = v54;
  swift_bridgeObjectRetain();
  v71 = v80;
  Text.Resolved.append(_:with:in:)(v41, v43, v70, (uint64_t *)&v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v72 = *(void **)(v71 + v48[5]);
  if (v72)
  {
    v73 = objc_msgSend(v72, sel_isEmptyOrTerminatedByParagraphSeparator);
    v74 = (uint64_t)v77;
    if (v73)
    {

      *(_QWORD *)(v49 + 128) = 0;
    }
    swift_bridgeObjectRelease();
    return outlined destroy of TypesettingConfiguration(v74, type metadata accessor for Text.Style);
  }
  else
  {
    __break(1u);
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t EnvironmentValues.resolvedTextProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

unint64_t Text.Resolved.append(_:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  __int128 v42;
  unint64_t result;
  uint64_t v44;
  char v45;
  void *v46;
  id v47;
  id v48;
  __int16 v49;
  int v50;
  unsigned int v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(id, __int128 *, uint64_t, uint64_t);
  void *v81;
  void *v82;
  id v83;
  id v84;
  char isUniquelyReferenced_nonNull_native;
  __int16 v86;
  __int128 v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  Class v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  unint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[19];
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  _BYTE v125[163];
  _OWORD v126[2];
  _OWORD v127[4];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[19];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[27];
  char v139;
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  _OWORD v143[12];

  v4 = v3;
  v101 = type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x24BDAC7A8](v101);
  v102 = (uint64_t)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_OWORD *)(a1 + 144);
  v143[7] = *(_OWORD *)(a1 + 128);
  v143[8] = v9;
  v143[9] = *(_OWORD *)(a1 + 160);
  *(_DWORD *)((char *)&v143[9] + 15) = *(_DWORD *)(a1 + 175);
  v10 = *(_OWORD *)(a1 + 80);
  v143[3] = *(_OWORD *)(a1 + 64);
  v143[4] = v10;
  v11 = *(_OWORD *)(a1 + 112);
  v143[5] = *(_OWORD *)(a1 + 96);
  v143[6] = v11;
  v12 = *(_OWORD *)(a1 + 16);
  v142 = *(_OWORD *)a1;
  v143[0] = v12;
  v13 = *(_OWORD *)(a1 + 48);
  v143[1] = *(_OWORD *)(a1 + 32);
  v143[2] = v13;
  v14 = *a2;
  v15 = a2[1];
  v16 = *a3;
  *(_QWORD *)&v126[0] = 12369903;
  v17 = MEMORY[0x23B7C5EC0](v126, 3);
  v19 = v18;
  *(_QWORD *)&v126[0] = v14;
  *((_QWORD *)&v126[0] + 1) = v15;
  v20 = type metadata accessor for Text.Resolved(0);
  v21 = *(unsigned __int8 *)(v4 + *(int *)(v20 + 24));
  v106 = v16;
  *(_QWORD *)&v124 = v16;
  v22 = v4 + *(int *)(v20 + 32);
  v107 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(0, 0, (uint64_t *)v126, v21, (uint64_t *)&v124, v22);
  if (!v15)
  {
    v126[0] = (unint64_t)v14;
    swift_retain();
    v28 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)v126, v25, v26, v27);
    swift_release();
    if ((v28 & 1) != 0)
      goto LABEL_3;
LABEL_5:
    v29 = (void *)*((_QWORD *)&v143[9] + 1);
    v108 = LOWORD(v143[10]);
    v110 = BYTE2(v143[10]);
    *(_QWORD *)&v100 = v142;
    LODWORD(v103) = BYTE8(v142);
    v30 = *(_QWORD *)&v143[1];
    LODWORD(v92) = BYTE8(v143[1]);
    v109 = *(_QWORD *)((char *)&v143[2] + 4);
    v93 = v143[4];
    v94 = v143[3];
    LODWORD(v91) = LOBYTE(v143[5]);
    v90 = BYTE1(v143[5]);
    v89 = BYTE2(v143[5]);
    v88 = BYTE3(v143[5]);
    v87 = v143[0];
    v140 = v142;
    v141[0] = v143[0];
    *(_OWORD *)((char *)v141 + 12) = *(_OWORD *)((char *)v143 + 12);
    v139 = BYTE12(v143[2]);
    v136 = *(_OWORD *)((char *)&v143[5] + 13);
    v137 = *(_OWORD *)((char *)&v143[6] + 13);
    *(_OWORD *)v138 = *(_OWORD *)((char *)&v143[7] + 13);
    *(_OWORD *)&v138[11] = *(_OWORD *)((char *)&v143[8] + 8);
    v133 = *(_OWORD *)((char *)&v143[2] + 13);
    v134 = *(_OWORD *)((char *)&v143[3] + 13);
    v135 = *(_OWORD *)((char *)&v143[4] + 13);
    LODWORD(v95) = BYTE12(v143[2]);
    v96 = v4;
    v97 = v17;
    v98 = v19;
    v99 = v22;
    if ((BYTE12(v143[2]) & 1) != 0)
    {
      v31 = *(_QWORD *)((char *)&v143[1] + 12);
      outlined retain of Image.Resolved((uint64_t)&v142);
      v32 = v31;
      v33 = (char)v103;
      v34 = (char)v95;
      v36 = v93;
      v35 = v94;
      v37 = v92;
      v39 = v90;
      v38 = v91;
      v41 = v88;
      v40 = v89;
      v42 = v87;
      goto LABEL_18;
    }
    v105 = (id)*((_QWORD *)&v143[9] + 1);
    *(_QWORD *)&v124 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)&v126[0] = v14;
    *((_QWORD *)&v126[0] + 1) = v15;
    *(_QWORD *)&v111 = v106;
    outlined retain of Image.Resolved((uint64_t)&v142);
    result = Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)((uint64_t *)v126, (uint64_t *)&v111, v22, 1);
    v109 = v44;
    if ((v45 & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v139 = 0;
    v104 = result;
    if ((_DWORD)v103 == 2)
    {
      v46 = *(void **)(v100 + 32);
      v47 = *(id *)(v100 + 16);
      outlined copy of Image.Location(v46);
      v48 = v47;
      outlined copy of Image.Location(v46);
      v49 = (unsigned __int16)objc_msgSend(v48, sel_styleMask);
      *(_QWORD *)&v124 = v46;
      outlined copy of Image.Location(v46);
      _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v49, (void **)&v124, (uint64_t)v126);

      outlined consume of Image.Location(v46);
      outlined consume of Image.Location(v46);

      v29 = *(void **)&v126[0];
      v108 = WORD4(v126[0]);
      v50 = BYTE10(v126[0]);
      if ((v110 & 2) == 0)
      {
LABEL_13:
        v51 = v50 & 0xFFFFFFFD;
        goto LABEL_14;
      }
    }
    else
    {
      v108 = (_DWORD)v103 != 255;

      v50 = 0;
      v29 = 0;
      if ((v110 & 2) == 0)
        goto LABEL_13;
    }
    v51 = v50 | 2;
LABEL_14:
    v110 = v51;
    v32 = v104;
    v34 = (char)v95;
    v36 = v93;
    v35 = v94;
    v37 = v92;
    v39 = v90;
    v38 = v91;
    v41 = v88;
    v40 = v89;
    v42 = v87;
    v52 = *(_WORD *)(v22 + 32);
    v33 = (char)v103;
    if ((v52 & 1) == 0 && *(float *)&v104 == -1.0 && *((float *)&v104 + 1) == -1.0)
      *(_WORD *)(v22 + 32) = v52 | 1;
LABEL_18:
    v53 = BYTE8(v143[8]);
    v54 = *((_QWORD *)&v143[5] + 1);
    v55 = *((_QWORD *)&v143[6] + 1);
    *(_QWORD *)&v126[0] = v100;
    BYTE8(v126[0]) = v33;
    v126[1] = v42;
    *(_QWORD *)&v127[0] = v30;
    BYTE8(v127[0]) = v37;
    v104 = v32;
    *(_QWORD *)((char *)v127 + 12) = v32;
    *(_QWORD *)((char *)&v127[1] + 4) = v109;
    BYTE12(v127[1]) = v34;
    v127[2] = v35;
    v127[3] = v36;
    LOBYTE(v128) = v38;
    BYTE1(v128) = v39;
    BYTE2(v128) = v40;
    BYTE3(v128) = v41;
    *((_QWORD *)&v128 + 1) = *((_QWORD *)&v143[5] + 1);
    *(_QWORD *)&v94 = *(_QWORD *)&v143[6];
    v129 = v143[6];
    v100 = v143[7];
    v130 = v143[7];
    *(_QWORD *)&v131 = *(_QWORD *)&v143[8];
    WORD4(v131) = WORD4(v143[8]);
    HIDWORD(v131) = HIDWORD(v143[8]);
    v132[0] = v143[9];
    v105 = v29;
    *(_QWORD *)&v132[8] = v29;
    *(_WORD *)&v132[16] = v108;
    v132[18] = v110;
    *(_OWORD *)&v125[112] = v143[7];
    *(_OWORD *)&v125[128] = v131;
    *(_OWORD *)&v125[144] = *(_OWORD *)v132;
    *(_DWORD *)&v125[159] = *(_DWORD *)&v132[15];
    *(_OWORD *)&v125[80] = v128;
    *(_OWORD *)&v125[96] = v143[6];
    *(_OWORD *)&v125[48] = v35;
    *(_OWORD *)&v125[64] = v36;
    v124 = v126[0];
    *(_OWORD *)v125 = v42;
    *(_OWORD *)&v125[16] = v127[0];
    *(_OWORD *)&v125[32] = v127[1];
    v95 = (Class)type metadata accessor for SwiftUITextAttachment();
    v56 = objc_allocWithZone(v95);
    outlined retain of Image.Resolved((uint64_t)v126);
    v57 = SwiftUITextAttachment.init(image:)(&v124);
    if ((v106 & 1) == 0 || (v53 & 1) != 0 || (v55 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
    {
LABEL_28:
      v103 = v57;
      v75 = v107;
      if (v15)
      {
        swift_retain_n();
        swift_retain_n();
        v77 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
      }
      else
      {
        v79 = swift_retain_n();
        v77 = specialized closure #1 in PropertyList.subscript.getter(v79, (uint64_t)&v123);
      }
      v78 = v76;
      swift_release_n();
      swift_release_n();
      if (v77)
      {
        v124 = v140;
        *(_OWORD *)v125 = v141[0];
        *(_OWORD *)&v125[12] = *(_OWORD *)((char *)v141 + 12);
        *(_OWORD *)&v125[93] = v136;
        *(_OWORD *)&v125[109] = v137;
        *(_OWORD *)&v125[125] = *(_OWORD *)v138;
        *(_OWORD *)&v125[136] = *(_OWORD *)&v138[11];
        *(_OWORD *)&v125[45] = v133;
        *(_QWORD *)&v125[28] = v104;
        *(_QWORD *)&v125[36] = v109;
        v125[44] = v139;
        *(_OWORD *)&v125[61] = v134;
        *(_OWORD *)&v125[77] = v135;
        *(_QWORD *)&v125[152] = v105;
        *(_WORD *)&v125[160] = v108;
        v125[162] = v110;
        v119 = *(_OWORD *)&v125[112];
        v120 = *(_OWORD *)&v125[128];
        *(_OWORD *)v121 = *(_OWORD *)&v125[144];
        *(_DWORD *)&v121[15] = *(_DWORD *)&v125[159];
        v115 = *(_OWORD *)&v125[48];
        v116 = *(_OWORD *)&v125[64];
        v117 = *(_OWORD *)&v125[80];
        v118 = *(_OWORD *)&v125[96];
        v111 = v140;
        v112 = *(_OWORD *)v125;
        v113 = *(_OWORD *)&v125[16];
        v114 = *(_OWORD *)&v125[32];
        v80 = *(void (**)(id, __int128 *, uint64_t, uint64_t))(v78 + 16);
        outlined retain of Image.Resolved((uint64_t)&v124);
        v80(v103, &v111, v77, v78);
        outlined release of Image.Resolved((uint64_t)&v124);
      }
      if (one-time initialization token for kitAttachment != -1)
        swift_once();
      v81 = (void *)static NSAttributedStringKey.kitAttachment;
      *((_QWORD *)&v112 + 1) = v95;
      v82 = v103;
      *(_QWORD *)&v111 = v103;
      outlined init with take of Any(&v111, &v124);
      v83 = v82;
      v84 = v81;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v122 = v75;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v124, v84, isUniquelyReferenced_nonNull_native);
      v24 = v122;

      swift_bridgeObjectRelease();
      v124 = v140;
      *(_OWORD *)v125 = v141[0];
      *(_OWORD *)&v125[12] = *(_OWORD *)((char *)v141 + 12);
      *(_OWORD *)&v125[93] = v136;
      *(_OWORD *)&v125[109] = v137;
      *(_OWORD *)&v125[125] = *(_OWORD *)v138;
      *(_OWORD *)&v125[136] = *(_OWORD *)&v138[11];
      *(_OWORD *)&v125[45] = v133;
      *(_OWORD *)&v125[61] = v134;
      *(_QWORD *)&v125[28] = v104;
      *(_QWORD *)&v125[36] = v109;
      v125[44] = v139;
      *(_OWORD *)&v125[77] = v135;
      *(_QWORD *)&v125[152] = v105;
      *(_WORD *)&v125[160] = v108;
      v125[162] = v110;
      outlined release of Image.Resolved((uint64_t)&v124);
      v19 = v98;
      v22 = v99;
      v17 = v97;
      goto LABEL_36;
    }
    if (v55 < 0)
    {
      v91 = v15;
      type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage();
      v61 = swift_allocObject();
      v58 = v94;
      v62 = v61;
      *(_QWORD *)(v61 + 16) = v54;
      *(_QWORD *)(v61 + 24) = v58;
      outlined copy of AccessibilityImageLabel(v54, v58, v55);
      v63 = 0;
      v64 = v55;
      v65 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v58 = v94;
      if ((v55 & 1) == 0)
      {
        outlined copy of AccessibilityImageLabel?(v54, v94, v55);
        outlined copy of Text.Storage(v54, v58, 0);
        v59 = v57;
        v60 = v54;
LABEL_27:
        v74 = (void *)MEMORY[0x23B7C5DAC](v60, v58);
        swift_bridgeObjectRelease();
        objc_msgSend(v57, sel_setAccessibilityLabel_, v74);

        outlined consume of AccessibilityImageLabel?(v54, v94, v55);
        goto LABEL_28;
      }
      v62 = v54;
      v91 = v15;
      v64 = v55;
      v65 = v100;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v54, v58, 1);
      v63 = v58;
    }
    v92 = v54;
    *(_QWORD *)&v93 = v64;
    outlined copy of AccessibilityImageLabel?(v54, v58, v64);
    v66 = v57;
    v67 = v102;
    Text.Style.init()(v102);
    v68 = v101;
    v69 = (_QWORD *)(v67 + *(int *)(v101 + 20));
    v70 = (uint64_t *)(v67 + *(int *)(v101 + 24));
    *v70 = 0;
    v70[1] = 0xE000000000000000;
    *(_BYTE *)(v67 + *(int *)(v68 + 28)) = 0;
    *v69 = 0;
    v69[1] = 0;
    v71 = v91;
    specialized Text.resolve<A>(into:in:with:)(v67, v14, v91, v106, v62, v63, 1, v65);
    v72 = *v70;
    v58 = v70[1];
    v106 = v72;
    swift_bridgeObjectRetain();
    outlined destroy of TypesettingConfiguration(v67, type metadata accessor for Text.ResolvedString);
    v73 = v63;
    v15 = v71;
    v54 = v92;
    outlined consume of Text.Storage(v62, v73, 1);
    swift_bridgeObjectRelease();
    v60 = v106;
    v55 = v93;
    goto LABEL_27;
  }
  swift_retain_n();
  swift_retain_n();
  v23 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v14);
  swift_release_n();
  swift_release_n();
  if ((v23 & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v24 = v107;
LABEL_36:
  *(_QWORD *)&v126[0] = v14;
  *((_QWORD *)&v126[0] + 1) = v15;
  Text.Resolved.append(_:with:in:)(v17, v19, v24, (uint64_t *)v126);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v86 = *(_WORD *)(v22 + 32);
  if ((v86 & 2) == 0)
    *(_WORD *)(v22 + 32) = v86 | 2;
  return result;
}

Swift::Void __swiftcall Text.ResolvedProperties.addAttachment()()
{
  uint64_t v0;
  __int16 v1;

  v1 = *(_WORD *)(v0 + 32);
  if ((v1 & 2) == 0)
    *(_WORD *)(v0 + 32) = v1 | 2;
}

uint64_t Text.Resolved.append(_:in:with:)(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  char isUniquelyReferenced_nonNull_native;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];
  _BYTE v47[24];

  v4 = v3;
  v5 = *a3;
  if ((*a3 & 4) != 0)
  {
    v6 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    v39 = *(_QWORD *)(result + 16);
    v37 = *(_BYTE *)(result + 28);
    v38 = *(_DWORD *)(result + 24);
    v35 = *(_BYTE *)(result + 30);
    v36 = *(_BYTE *)(result + 29);
    v40 = *(_OWORD *)(result + 32);
    v8 = *a2;
    v9 = a2[1];
    *(_QWORD *)&v41 = 12369903;
    v10 = MEMORY[0x23B7C5EC0](&v41, 3);
    v12 = v11;
    *(_QWORD *)&v41 = v8;
    *((_QWORD *)&v41 + 1) = v9;
    v13 = type metadata accessor for Text.Resolved(0);
    v14 = *(unsigned __int8 *)(v4 + *(int *)(v13 + 24));
    *(_QWORD *)&v46[0] = v5;
    v15 = v4 + *(int *)(v13 + 32);
    v16 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(0, 0, (uint64_t *)&v41, v14, (uint64_t *)v46, v15);
    if (v9)
    {
      swift_retain_n();
      swift_retain_n();
      v17 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v8);
      swift_release_n();
      swift_release_n();
      if ((v17 & 1) != 0)
      {
LABEL_14:
        *(_QWORD *)&v41 = v8;
        *((_QWORD *)&v41 + 1) = v9;
        Text.Resolved.append(_:with:in:)(v10, v12, v16, (uint64_t *)&v41);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v32 = *(_WORD *)(v15 + 32);
        if ((v32 & 2) == 0)
          *(_WORD *)(v15 + 32) = v32 | 2;
        return result;
      }
    }
    else
    {
      v41 = (unint64_t)v8;
      swift_retain();
      v21 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v41, v18, v19, v20);
      swift_release();
      if ((v21 & 1) != 0)
        goto LABEL_14;
    }
    v33 = v7;
    v34 = v10;
    v22 = v6;
    v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4B8]), sel_init);
    if (v9)
    {
      swift_retain_n();
      swift_retain_n();
      v25 = specialized PropertyList.Tracker.value<A>(_:for:)(v8);
    }
    else
    {
      v27 = swift_retain_n();
      v25 = specialized closure #1 in PropertyList.subscript.getter(v27, (uint64_t)v47);
    }
    v26 = v24;
    swift_release_n();
    swift_release_n();
    if (v25)
    {
      *(_QWORD *)&v41 = v22;
      *((_QWORD *)&v41 + 1) = v33;
      v42 = v39;
      LODWORD(v43) = v38;
      BYTE4(v43) = v37;
      BYTE5(v43) = v36;
      BYTE6(v43) = v35;
      v44 = v40;
      (*(void (**)(id, __int128 *, uint64_t, uint64_t))(v26 + 24))(v23, &v41, v25, v26);
    }
    if (one-time initialization token for kitAttachment != -1)
      swift_once();
    v28 = (void *)static NSAttributedStringKey.kitAttachment;
    v43 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
    *(_QWORD *)&v41 = v23;
    outlined init with take of Any(&v41, v46);
    v29 = v28;
    v30 = v23;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = v16;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v46, v29, isUniquelyReferenced_nonNull_native);
    v16 = v45;

    swift_bridgeObjectRelease();
    v10 = v34;
    goto LABEL_14;
  }
  return result;
}

uint64_t Text.Resolved.append<A>(resolvable:in:with:transition:)(char *a1, uint64_t *a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(_QWORD);
  BOOL v23;
  uint64_t v24;
  int *v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  int v39;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;

  v7 = v6;
  v14 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *a2;
  v17 = a2[1];
  v19 = *a3;
  v20 = *(_QWORD *)a4;
  v21 = *(unsigned int *)(a4 + 8) | ((unint64_t)(*(unsigned __int16 *)(a4 + 12) | (*(unsigned __int8 *)(a4 + 14) << 16)) << 32);
  outlined init with copy of TypesettingLanguage(v7, (uint64_t)v16, v22);
  if (v16[39])
    v23 = 1;
  else
    v23 = (v21 & 0xFF000000000000) == 0x2000000000000;
  if (!v23)
  {
    v41 = v7;
    type metadata accessor for TextTransitionModifier();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v20;
    *(_BYTE *)(v24 + 28) = BYTE4(v21);
    *(_DWORD *)(v24 + 24) = v21;
    *(_BYTE *)(v24 + 29) = BYTE5(v21);
    *(_BYTE *)(v24 + 30) = 1;
    v16[39] = v24;
    v7 = v41;
    outlined copy of ContentTransition.Storage(v20, v21, SBYTE5(v21));
  }
  if (v17)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v18, &v43);
    swift_release_n();
    swift_release_n();
    if ((v43 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey);
    BloomFilter.init(hashValue:)(v33);
    v34 = v43;
    v35 = swift_retain_n();
    v36 = specialized find1<A>(_:key:filter:)(v35, v34);
    if (v36)
      v37 = *(_QWORD *)(v36 + 72);
    else
      LOBYTE(v37) = 0;
    swift_release_n();
    if ((v37 & 1) == 0)
    {
LABEL_8:
      v43 = v18;
      v44 = v17;
      v25 = (int *)type metadata accessor for Text.Resolved(0);
      v26 = *(_BYTE *)(v7 + v25[6]);
      v42 = v19;
      v27 = (uint64_t)static ResolvableTextSegmentAttribute.buildDynamicTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(a1, v16, &v43, v26, &v42, v7 + v25[8], a5, a6);
      if (v27)
        goto LABEL_9;
LABEL_17:
      MEMORY[0x24BDAC7A8](v27);
      *(&v41 - 4) = a5;
      *(&v41 - 3) = a6;
      *(&v41 - 2) = (uint64_t)a1;
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in Text.Resolved.append<A>(resolvable:in:with:transition:));
      return outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for Text.Style);
    }
  }
  v43 = v18;
  v44 = v17;
  v25 = (int *)type metadata accessor for Text.Resolved(0);
  v39 = *(unsigned __int8 *)(v7 + v25[6]);
  v42 = v19;
  v27 = static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)((uint64_t)a1, (uint64_t)v16, &v43, v39, (uint64_t *)&v42, v7 + v25[8], a5, a6);
  if (!v27)
    goto LABEL_17;
LABEL_9:
  v28 = (void *)v27;
  type metadata accessor for Text.Resolved(0);
  v29 = v25[5];
  v30 = *(void **)(v7 + v29);
  if (v30)
  {
    v31 = v28;
    v32 = v30;
    objc_msgSend(v32, sel_appendAttributedString_, v31);

  }
  else
  {
    v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, v28);

    *(_QWORD *)(v7 + v29) = v38;
  }
  return outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for Text.Style);
}

uint64_t protocol witness for ResolvedTextContainer.style.getter in conformance Text.Resolved@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TypesettingLanguage(v1, a1, type metadata accessor for Text.Style);
}

uint64_t protocol witness for ResolvedTextContainer.style.setter in conformance Text.Resolved(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ResolvedTextHelper.NextUpdate(a1, v1, type metadata accessor for Text.Style);
}

__n128 protocol witness for ResolvedTextContainer.idiom.getter in conformance Text.Resolved@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 28));
  *a2 = result;
  return result;
}

uint64_t Text.ResolvedString.append<A>(resolvable:in:with:transition:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v69 = a6;
  v70 = a1;
  v71 = a5;
  v66 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x24BDAC7A8](v66);
  v65 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributedString?, (void (*)(uint64_t))MEMORY[0x24BDCC5A8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v63 - v9;
  v72 = type metadata accessor for AttributedString();
  v68 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v64 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v63 = (char *)&v63 - v13;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v63 - v15;
  v17 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v63 - v21;
  v24 = *a2;
  v23 = a2[1];
  v25 = type metadata accessor for Date();
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v16, 1, 1, v25);
  v26(v19, 1, 1, v25);
  v27 = &v19[*(int *)(v17 + 24)];
  *(_QWORD *)v27 = 0;
  v27[8] = 1;
  swift_retain();
  swift_retain();
  v28 = (uint64_t)v16;
  v29 = v69;
  outlined assign with take of Date?(v28, (uint64_t)v19);
  v30 = (uint64_t *)&v19[*(int *)(v17 + 20)];
  *v30 = v24;
  v30[1] = v23;
  v31 = v23;
  *(_QWORD *)v27 = 0;
  v27[8] = 1;
  v32 = (uint64_t)v22;
  v33 = (char *)v70;
  v34 = (char *)v71;
  v35 = v72;
  v36 = (uint64_t)v19;
  v37 = v68;
  outlined init with take of LocalizedStringKey.FormatArgument(v36, v32, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 40))(v32, v34, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v10, 1, v35) == 1)
  {
    v38 = outlined destroy of AttributedString?((uint64_t)v10);
    MEMORY[0x24BDAC7A8](v38);
    *(&v63 - 4) = v34;
    *(&v63 - 3) = (char *)v29;
    *(&v63 - 2) = v33;
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in Text.ResolvedString.append<A>(resolvable:in:with:transition:));
  }
  else
  {
    v71 = v32;
    v39 = v63;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v63, v10, v35);
    v70 = type metadata accessor for Text.ResolvedString(0);
    *(_BYTE *)(v67 + *(int *)(v70 + 28)) = 1;
    v40 = v64;
    v41 = v39;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v64, v39, v35);
    AttributedString.characters.getter();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A8]);
    v42 = String.init<A>(_:)();
    v44 = v43;
    v45 = *(void (**)(char *, uint64_t))(v37 + 8);
    v45(v40, v35);
    if (v31)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v24, &v73);
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey);
      BloomFilter.init(hashValue:)(v46);
      v47 = v73;
      swift_retain_n();
      swift_retain();
      specialized find1<A>(_:key:filter:)(v24, v47);
      swift_release();
    }
    swift_release_n();
    v73 = v42;
    v74 = v44;
    swift_bridgeObjectRetain();
    v48 = String.init<A>(_:)();
    v73 = v24;
    v74 = v31;
    v50 = String.caseConvertedIfNeeded(_:)(&v73, v48, v49);
    v52 = v51;
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_retain_n();
      swift_retain_n();
      v53 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v24);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      v73 = v24;
      v74 = 0;
      swift_retain();
      v53 = specialized static ShouldRedactContentKey.value(in:)(&v73, v54, v55, v56);
      swift_release();
      swift_release();
    }
    v57 = v41;
    v32 = v71;
    if ((v53 & 1) != 0)
    {
      v58 = String.count.getter();
      v50 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v58);
      v60 = v59;
      swift_bridgeObjectRelease();
      v52 = v60;
    }
    v61._countAndFlagsBits = v50;
    v61._object = v52;
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45(v57, v72);
  }
  return outlined destroy of TypesettingConfiguration(v32, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
}

uint64_t implicit closure #1 in Text.Resolved.append<A>(resolvable:in:with:transition:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(37);
  v0._object = (void *)0x80000002352E6BD0;
  v0._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

__n128 protocol witness for ResolvedTextContainer.idiom.getter in conformance Text.ResolvedString@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 20));
  *a2 = result;
  return result;
}

uint64_t protocol witness for ResolvedTextContainer.append<A>(_:in:with:isUniqueSizeVariant:) in conformance Text.ResolvedString(uint64_t a1)
{
  return specialized Text.ResolvedString.append<A>(_:in:with:isUniqueSizeVariant:)(a1);
}

uint64_t protocol witness for ResolvedTextContainer.append(_:in:with:) in conformance Text.ResolvedString()
{
  Swift::String v0;
  uint64_t v2;

  v2 = 12369903;
  v0._countAndFlagsBits = MEMORY[0x23B7C5EC0](&v2, 3);
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t Text.Style.accessibility.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[32];
  v3 = v1[33];
  v4 = v1[34];
  v5 = v1[35];
  v6 = v1[36];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return outlined copy of AccessibilityTextAttributes?(v2, v3, v4, v5, v6);
}

__n128 Text.Style.accessibility.setter(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;

  v4 = (__n128)a1[1];
  v5 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  outlined consume of AccessibilityTextAttributes?(v1[32], v1[33], v1[34], v1[35], v1[36]);
  result = v4;
  *((_OWORD *)v1 + 16) = v5;
  *((__n128 *)v1 + 17) = v4;
  v1[36] = v2;
  return result;
}

uint64_t (*Text.Style.accessibility.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Style.clearedFontModifiers.getter()
{
  type metadata accessor for Text.Style(0);
  return swift_bridgeObjectRetain();
}

uint64_t Text.Style.clearedFontModifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Text.Style(0) + 96);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Text.Style.clearedFontModifiers.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Text.Style(0);
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.addCustomStyle(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t result;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  char v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  float v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  char v90;
  unsigned __int8 v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  void *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  id v139[10];
  char v140;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 24);
  v124 = *(void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(float *)(a1 + 84);
  v108 = *(_QWORD *)(a1 + 88);
  v109 = *(unsigned __int8 *)(a1 + 96);
  v116 = v4;
  v117 = v3;
  v119 = v5;
  v120 = *(_QWORD *)a1;
  v123 = *(_BYTE *)(a1 + 80);
  v118 = v6;
  v121 = v8;
  v122 = v7;
  v114 = v9;
  v115 = v10;
  if (v123)
    goto LABEL_20;
  v12 = *(_BYTE *)(a1 + 96);
  if (v109 == 255)
  {
    v27 = *(_QWORD *)(a1 + 8);
    v28 = *(void **)(a1 + 24);
    v29 = *(void **)a1;
    v30 = *(_QWORD *)(a1 + 32);
    v31 = *(_QWORD *)(a1 + 40);
    v32 = *(_QWORD *)(a1 + 64);
    v33 = *(_QWORD *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v124, v4, v5, v6, v7, v8, v9, v10, 0);
    outlined copy of GraphicsBlendMode?(v108, 0xFFu);
    swift_bridgeObjectRetain();
    outlined copy of _ShapeStyle_Pack.Fill(v29, v27, v124, v28, v30, v31, v122, v121, v32, v33, 0);
    outlined copy of GraphicsBlendMode?(v108, 0xFFu);
    v34 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v34 != -1)
      swift_once();
    v134 = static GraphicsBlendMode.normal;
    v136 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    v14 = v116;
    v13 = v117;
    v20 = v108;
    v22 = (unint64_t)v124;
    v24 = v118;
    v26 = v121;
    v18 = v114;
    v19 = v115;
    v12 = -1;
  }
  else
  {
    v136 = v109 & 1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(void **)(a1 + 24);
    v15 = *(void **)a1;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v124, v4, v5, v6, v7, v8, v9, v10, 0);
    v20 = v108;
    outlined copy of GraphicsBlendMode?(v108, v109);
    swift_bridgeObjectRetain();
    v21 = v15;
    v22 = (unint64_t)v124;
    v23 = v16;
    v24 = v118;
    v25 = v17;
    v26 = v121;
    outlined copy of _ShapeStyle_Pack.Fill(v21, v13, v124, v14, v23, v118, v25, v121, v18, v19, 0);
    outlined copy of GraphicsBlendMode?(v108, v109);
    swift_bridgeObjectRetain();
    v134 = v108;
  }
  outlined copy of GraphicsBlendMode?(v20, v12);
  outlined consume of _ShapeStyle_Pack.Fill(v120, v13, v22, v14, v119, v24, v122, v26, v18, v19, 0);
  outlined consume of GraphicsBlendMode?(v20, v12);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1)
    swift_once();
  v35 = static GraphicsBlendMode.normal;
  v36 = byte_254266040;
  if ((v136 & 1) != 0)
  {
    if (byte_254266040)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(v134, 1);
      outlined consume of GraphicsBlendMode(v35, 1);
      if (v134 == v35)
      {
LABEL_15:
        v137 = *(_QWORD *)(v107 + 16);
        outlined consume of _ShapeStyle_Pack.Fill(v120, v117, (unint64_t)v124, v116, v119, v118, v122, v121, v114, v115, 0);
        outlined consume of GraphicsBlendMode?(v108, v109);
        result = swift_bridgeObjectRelease();
        v10 = v115;
        v9 = v114;
        v8 = v121;
        v7 = v122;
        v6 = v118;
        v5 = v119;
        v4 = v116;
        v2 = (void *)v120;
        v3 = v117;
        v1 = v106;
        if (!v137)
          return result;
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    swift_unknownObjectRetain();
  }
  else if ((byte_254266040 & 1) == 0)
  {
    outlined consume of GraphicsBlendMode(v134, 0);
    outlined consume of GraphicsBlendMode(v35, 0);
    if ((_DWORD)v134 == (_DWORD)v35)
      goto LABEL_15;
    goto LABEL_19;
  }
  outlined copy of GraphicsBlendMode(v35, v36);
  outlined consume of GraphicsBlendMode(v134, v136);
  outlined consume of GraphicsBlendMode(v35, v36);
  outlined consume of GraphicsBlendMode(v134, v136);
LABEL_19:
  outlined consume of _ShapeStyle_Pack.Fill(v120, v117, (unint64_t)v124, v116, v119, v118, v122, v121, v114, v115, 0);
  outlined consume of GraphicsBlendMode?(v108, v109);
  swift_bridgeObjectRelease();
  v10 = v115;
  v9 = v114;
  v8 = v121;
  v7 = v122;
  v6 = v118;
  v5 = v119;
  v4 = v116;
  v2 = (void *)v120;
  v3 = v117;
  v1 = v106;
LABEL_20:
  v125 = *(_QWORD **)(v1 + 40);
  v113 = v125[2];
  if (!v113)
  {
    v1 = 0;
LABEL_84:
    outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v124, v4, v5, v6, v7, v8, v9, v10, v123);
    outlined copy of GraphicsBlendMode?(v108, v109);
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      goto LABEL_93;
    goto LABEL_85;
  }
  v38 = 0;
  while (1)
  {
    if (v38 >= v125[2])
    {
      __break(1u);
      goto LABEL_92;
    }
    v126 = v38;
    v39 = (uint64_t)&v125[14 * v38 + 4];
    v40 = *(void **)(v39 + 8);
    v41 = *(void **)(v39 + 16);
    v42 = *(void **)(v39 + 24);
    v43 = *(void **)(v39 + 32);
    v44 = *(void **)(v39 + 40);
    v46 = *(void **)(v39 + 48);
    v45 = *(void **)(v39 + 56);
    v1 = *(_QWORD *)(v39 + 64);
    v47 = *(void **)(v39 + 72);
    v48 = *(_BYTE *)(v39 + 80);
    v49 = *(float *)(v39 + 84);
    v50 = *(_QWORD *)(v39 + 88);
    v51 = *(unsigned __int8 *)(v39 + 96);
    v52 = *(_QWORD *)(v39 + 104);
    v139[0] = *(id *)v39;
    v139[1] = v40;
    v139[2] = v41;
    v139[3] = v42;
    v139[4] = v43;
    v139[5] = v44;
    v139[6] = v46;
    v139[7] = v45;
    v139[8] = (id)v1;
    v139[9] = v47;
    v140 = v48;
    v132 = (unint64_t)v41;
    v133 = v139[0];
    v127 = (uint64_t)v45;
    v128 = (uint64_t)v40;
    outlined copy of _ShapeStyle_Pack.Fill(v139[0], (uint64_t)v40, v41, v42, (uint64_t)v43, (uint64_t)v44, (uint64_t)v46, (uint64_t)v45, v1, (uint64_t)v47, v48);
    v135 = v50;
    v131 = v51;
    outlined copy of GraphicsBlendMode?(v50, v51);
    v138 = v52;
    swift_bridgeObjectRetain();
    specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)((uint64_t)v139);
    if ((v53 & 1) == 0)
    {
      outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v133, v128, v132, v42, (uint64_t)v43, (uint64_t)v44, (uint64_t)v46, v127, v1, (uint64_t)v47, v48);
      v59 = v50;
      v60 = v51;
      goto LABEL_80;
    }
    v112 = v48;
    v54 = (unint64_t)v133;
    v55 = v128;
    if (v49 != v11)
    {
      outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v133, v128, v132, v42, (uint64_t)v43, (uint64_t)v44, (uint64_t)v46, v127, v1, (uint64_t)v47, v48);
      goto LABEL_78;
    }
    v110 = (uint64_t)v43;
    v111 = (uint64_t)v44;
    v56 = v42;
    v57 = v1;
    if (v131 == 255)
    {
      v58 = v109;
      if (v109 != 255)
      {
LABEL_34:
        v1 = v131;
        v61 = v58;
        outlined copy of GraphicsBlendMode?(v108, v58);
        outlined copy of GraphicsBlendMode?(v135, v131);
        outlined consume of GraphicsBlendMode?(v135, v131);
        outlined consume of GraphicsBlendMode?(v108, v61);
        outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v133, v128, v132, v42, v110, v111, (uint64_t)v46, v127, v57, (uint64_t)v47, v48);
        v59 = v135;
        v60 = v131;
        goto LABEL_80;
      }
    }
    else
    {
      v58 = v109;
      if (v109 == 255)
        goto LABEL_34;
      if ((v131 & 1) != 0)
      {
        v1 = v135;
        if ((v109 & 1) == 0)
        {
          swift_unknownObjectRetain();
          v58 = v109;
          v62 = v132;
          v63 = (uint64_t)v47;
LABEL_71:
          v90 = v58 & 1;
          outlined copy of GraphicsBlendMode(v108, v58 & 1);
          outlined consume of GraphicsBlendMode(v1, v131 & 1);
          outlined consume of GraphicsBlendMode(v108, v90);
          outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v133, v128, v62, v56, v110, v111, (uint64_t)v46, v127, v57, v63, v112);
          v59 = v1;
          goto LABEL_79;
        }
        outlined copy of GraphicsBlendMode?(v108, v109);
        outlined copy of GraphicsBlendMode?(v135, v131);
        outlined consume of GraphicsBlendMode(v135, 1);
        outlined consume of GraphicsBlendMode(v108, 1);
        if (v135 != v108)
          goto LABEL_77;
      }
      else
      {
        v1 = v135;
        v62 = v132;
        v63 = (uint64_t)v47;
        if ((v109 & 1) != 0)
          goto LABEL_71;
        outlined consume of GraphicsBlendMode(v135, 0);
        outlined consume of GraphicsBlendMode(v108, 0);
        if ((_DWORD)v135 != (_DWORD)v108)
        {
LABEL_77:
          outlined consume of _ShapeStyle_Pack.Fill(v54, v55, v132, v56, v110, v111, (uint64_t)v46, v127, v57, (uint64_t)v47, v112);
LABEL_78:
          v59 = v135;
LABEL_79:
          v60 = v131;
LABEL_80:
          outlined consume of GraphicsBlendMode?(v59, v60);
          goto LABEL_81;
        }
      }
    }
    v64 = v138;
    v1 = *(_QWORD *)(v138 + 16);
    v65 = v107;
    if (v1 == *(_QWORD *)(v107 + 16))
      break;
    v1 = v138;
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v133, v128, v132, v56, v110, v111, (uint64_t)v46, v127, v57, (uint64_t)v47, v48);
    outlined consume of GraphicsBlendMode?(v135, v131);
LABEL_81:
    swift_bridgeObjectRelease();
    v38 = v126 + 1;
    v9 = v114;
    v4 = v116;
    v3 = v117;
    v5 = v119;
    v2 = (void *)v120;
    v6 = v118;
    v8 = v121;
    v7 = v122;
    v10 = v115;
    if (v126 + 1 == v113)
    {
      v1 = v125[2];
      goto LABEL_84;
    }
  }
  if (!v1 || v138 == v107)
  {
LABEL_90:
    outlined consume of _ShapeStyle_Pack.Fill(v54, v128, v132, v56, v110, v111, (uint64_t)v46, v127, v57, (uint64_t)v47, v112);
    outlined consume of GraphicsBlendMode?(v135, v131);
    return swift_bridgeObjectRelease();
  }
  v66 = 0;
  v67 = 0;
  v104 = v57;
  v105 = *(_QWORD *)(v138 + 16);
  while (v67 < *(_QWORD *)(v65 + 16))
  {
    v68 = v64 + v66;
    v69 = *(float *)(v68 + 80);
    v70 = *(_QWORD *)(v68 + 88);
    v71 = *(unsigned __int8 *)(v68 + 96);
    v72 = v65 + v66;
    v73 = *(_BYTE *)(v65 + v66 + 77);
    v74 = *(float *)(v72 + 80);
    v75 = *(_QWORD *)(v72 + 88);
    v76 = *(unsigned __int8 *)(v72 + 96);
    if ((*(_BYTE *)(v68 + 77) & 1) != 0)
    {
      if ((v73 & 1) == 0)
        goto LABEL_77;
    }
    else
    {
      if ((v73 & 1) != 0)
        goto LABEL_77;
      v77 = *(_QWORD *)(v68 + 32);
      v78 = *(_QWORD *)(v72 + 32);
      if (*(float *)&v77 != *(float *)&v78)
        goto LABEL_77;
      if (*((float *)&v77 + 1) != *((float *)&v78 + 1))
        goto LABEL_77;
      v79 = *(_QWORD *)(v68 + 40);
      v80 = *(_QWORD *)(v72 + 40);
      if (*(float *)&v79 != *(float *)&v80 || *((float *)&v79 + 1) != *((float *)&v80 + 1))
        goto LABEL_77;
      if (*(double *)(v68 + 48) != *(double *)(v72 + 48)
        || *(double *)(v68 + 56) != *(double *)(v72 + 56)
        || *(double *)(v68 + 64) != *(double *)(v72 + 64))
      {
        outlined consume of _ShapeStyle_Pack.Fill(v54, v128, v132, v56, v110, v111, (uint64_t)v46, v127, v57, (uint64_t)v47, v112);
        goto LABEL_78;
      }
      v81 = *(unsigned int *)(v68 + 72) | ((unint64_t)*(unsigned __int8 *)(v68 + 76) << 32);
      v82 = *(unsigned int *)(v72 + 72) | ((unint64_t)*(unsigned __int8 *)(v72 + 76) << 32);
      if (*(float *)&v81 != *(float *)&v82 || BYTE4(v81) != BYTE4(v82))
        goto LABEL_77;
    }
    if (v69 != v74)
      goto LABEL_77;
    if ((_DWORD)v71 == 255)
    {
      v86 = v70;
      if (v76 != 255)
        goto LABEL_74;
      outlined copy of GraphicsBlendMode?(v75, 0xFFu);
      outlined copy of GraphicsBlendMode?(v86, 0xFFu);
    }
    else
    {
      if (v76 == 255)
      {
        v86 = v70;
LABEL_74:
        v91 = v76;
        v129 = v75;
        v1 = v71;
        outlined copy of GraphicsBlendMode?(v75, v76);
        outlined copy of GraphicsBlendMode?(v86, v1);
        outlined consume of GraphicsBlendMode?(v86, v1);
        outlined consume of GraphicsBlendMode?(v129, v91);
        goto LABEL_77;
      }
      if ((v71 & 1) != 0)
      {
        if ((v76 & 1) == 0)
        {
          v83 = v70;
          v130 = v76;
          v92 = v75;
          v93 = v71;
          outlined copy of GraphicsBlendMode?(v70, v71);
          LOBYTE(v71) = v93;
          LOBYTE(v76) = v130;
          v75 = v92;
LABEL_76:
          v94 = v71 & 1;
          v95 = (v71 & 1) == 0;
          v1 = v75;
          outlined copy of GraphicsBlendMode?(v75, v76);
          outlined consume of GraphicsBlendMode(v83, v94);
          outlined consume of GraphicsBlendMode(v1, v95);
          goto LABEL_77;
        }
        v87 = v70;
        v1 = v66;
        v88 = v75;
        v89 = v71;
        outlined copy of GraphicsBlendMode?(v75, v76);
        outlined copy of GraphicsBlendMode?(v87, v89);
        outlined consume of GraphicsBlendMode(v87, 1);
        outlined consume of GraphicsBlendMode(v88, 1);
        v85 = v87 == v88;
        v66 = v1;
        v54 = (unint64_t)v133;
      }
      else
      {
        v83 = v70;
        if ((v76 & 1) != 0)
          goto LABEL_76;
        v1 = v66;
        v84 = v75;
        outlined copy of GraphicsBlendMode?(v75, v76);
        outlined consume of GraphicsBlendMode(v83, 0);
        outlined consume of GraphicsBlendMode(v84, 0);
        v85 = (_DWORD)v83 == (_DWORD)v84;
        v66 = v1;
      }
      v57 = v104;
      if (!v85)
        goto LABEL_77;
    }
    ++v67;
    v66 += 72;
    v65 = v107;
    v64 = v138;
    if (v105 == v67)
      goto LABEL_90;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 + 1, 1, v125);
  v125 = (_QWORD *)result;
LABEL_85:
  v97 = v125[2];
  v96 = v125[3];
  v99 = v116;
  v98 = v117;
  v100 = v120;
  v101 = v115;
  if (v97 >= v96 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v96 > 1), v97 + 1, 1, v125);
    v101 = v115;
    v99 = v116;
    v100 = v120;
    v98 = v117;
    v125 = (_QWORD *)result;
  }
  v125[2] = v97 + 1;
  v102 = &v125[14 * v97];
  v102[4] = v100;
  v102[5] = v98;
  v102[6] = v124;
  v102[7] = v99;
  v102[8] = v119;
  v102[9] = v118;
  v102[10] = v122;
  v102[11] = v121;
  v102[12] = v114;
  v102[13] = v101;
  *((_BYTE *)v102 + 112) = v123;
  *((float *)v102 + 29) = v11;
  v102[15] = v108;
  *((_BYTE *)v102 + 128) = v109;
  v102[17] = v107;
  *(_QWORD *)(v106 + 40) = v125;
  v103 = *(_WORD *)(v106 + 32);
  if ((v103 & 1) == 0)
    *(_WORD *)(v106 + 32) = v103 | 1;
  return result;
}

uint64_t Text.Style.addFontModifier<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  type metadata accessor for AnyFontModifier();
  static AnyFontModifier.dynamic<A>(_:)(a1, a2);
  MEMORY[0x23B7C61A8]();
  if (*(_QWORD *)((*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t Text.Style.removeFontModifier<A>(ofType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t v27;

  v8 = *(_QWORD *)(v3 + 8);
  v6 = (_QWORD *)(v3 + 8);
  v7 = v8;
  if (v8 >> 62)
    goto LABEL_58;
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v9)
  {
    v10 = 0;
    while (1)
    {
      if ((v7 & 0xC000000000000001) != 0)
        MEMORY[0x23B7C6D9C](v10, v7);
      else
        swift_retain();
      type metadata accessor for AnyDynamicFontModifier(0, a2, a3, v11);
      v12 = swift_dynamicCastClass();
      swift_release();
      if (v12)
      {
        swift_bridgeObjectRelease();
        v16 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
        }
        else if (!(*v6 >> 62))
        {
          a3 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v16 == a3)
            goto LABEL_12;
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        a3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v16 == a3)
          goto LABEL_12;
LABEL_18:
        v17 = v10 + 5;
        while (2)
        {
          v7 = v17 - 4;
          v18 = *v6;
          if ((*v6 & 0xC000000000000001) != 0)
          {
            a3 = MEMORY[0x23B7C6D9C](v17 - 4);
          }
          else
          {
            if ((v7 & 0x8000000000000000) != 0)
              goto LABEL_54;
            if (v7 >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_55;
            a3 = *(_QWORD *)(v18 + 8 * v17);
            swift_retain();
          }
          v19 = swift_dynamicCastClass();
          swift_release();
          if (v19)
            goto LABEL_44;
          if (v7 == v10)
            goto LABEL_43;
          v20 = *v6;
          if ((*v6 & 0xC000000000000001) != 0)
          {
            a3 = MEMORY[0x23B7C6D9C](v10, *v6);
            v20 = *v6;
            if ((*v6 & 0xC000000000000001) == 0)
              goto LABEL_29;
          }
          else
          {
            if (v10 < 0)
              goto LABEL_62;
            if ((unint64_t)v10 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_63;
            a3 = *(_QWORD *)(v20 + 8 * v10 + 32);
            swift_retain();
            if ((v20 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if ((v7 & 0x8000000000000000) != 0)
                goto LABEL_64;
              if (v7 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_65;
              v21 = *(_QWORD *)(v20 + 8 * v17);
              swift_retain();
LABEL_32:
              isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *v6 = v20;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v20 < 0 || (v20 & 0x4000000000000000) != 0)
                specialized _ArrayBuffer._consumeAndCreateNew()(v20);
              *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20) = v21;
              swift_release();
              specialized Array._endMutation()();
              v23 = *v6;
              v24 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *v6 = v23;
              if (!v24 || v23 < 0 || (v23 & 0x4000000000000000) != 0)
                specialized _ArrayBuffer._consumeAndCreateNew()(v23);
              if ((v7 & 0x8000000000000000) != 0)
                goto LABEL_66;
              if (v7 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_67;
              *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v17) = a3;
              swift_release();
              specialized Array._endMutation()();
LABEL_43:
              if (__OFADD__(v10++, 1))
                goto LABEL_57;
LABEL_44:
              v26 = v17 - 3;
              if (__OFADD__(v7, 1))
                goto LABEL_56;
              if (*v6 >> 62)
              {
                swift_bridgeObjectRetain();
                a3 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                a3 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              ++v17;
              if (v26 == a3)
                goto LABEL_12;
              continue;
            }
          }
          break;
        }
        v21 = MEMORY[0x23B7C6D9C](v17 - 4, v20);
        v20 = *v6;
        goto LABEL_32;
      }
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      ++v10;
      if (v13 == v9)
        goto LABEL_10;
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (*v6 >> 62)
    goto LABEL_68;
  v10 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (!(*v6 >> 62))
  {
    v14 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14 >= v10)
      goto LABEL_14;
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14 < v10)
    goto LABEL_61;
LABEL_14:
  specialized Array.replaceSubrange<A>(_:with:)(v10, v14);
  type metadata accessor for Text.Style(0);
  return specialized Set._Variant.insert(_:)(&v27, a2);
}

uint64_t Text.Style.removeFontModifier<A>(ofType:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = *(_QWORD *)(v3 + 8);
  v6 = (_QWORD *)(v3 + 8);
  v7 = v8;
  if (v8 >> 62)
    goto LABEL_64;
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v9)
  {
    v10 = 0;
    while (1)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        v12 = MEMORY[0x23B7C6D9C](v10, v7);
      }
      else
      {
        v12 = *(_QWORD *)(v7 + 8 * v10 + 32);
        swift_retain();
      }
      v33 = v12;
      v13 = closure #1 in Text.Style.removeFontModifier<A>(ofType:)((uint64_t)&v33, a2, a3, v11);
      swift_release();
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v17 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
        }
        else if (!(*v6 >> 62))
        {
          if (v17 == *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_12;
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v17 == v32)
          goto LABEL_12;
LABEL_18:
        v18 = v10 + 5;
        while (2)
        {
          v7 = v18 - 4;
          v19 = *v6;
          if ((*v6 & 0xC000000000000001) != 0)
          {
            v20 = MEMORY[0x23B7C6D9C](v18 - 4);
          }
          else
          {
            if ((v7 & 0x8000000000000000) != 0)
              goto LABEL_54;
            if (v7 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_55;
            v20 = *(_QWORD *)(v19 + 8 * v18);
            swift_retain();
          }
          v33 = v20;
          v22 = closure #1 in Text.Style.removeFontModifier<A>(ofType:)((uint64_t)&v33, a2, a3, v21);
          swift_release();
          if ((v22 & 1) != 0)
            goto LABEL_44;
          if (v7 == v10)
            goto LABEL_43;
          v23 = *v6;
          if ((*v6 & 0xC000000000000001) != 0)
          {
            v24 = MEMORY[0x23B7C6D9C](v10, *v6);
            v23 = *v6;
            if ((*v6 & 0xC000000000000001) == 0)
              goto LABEL_29;
          }
          else
          {
            if (v10 < 0)
              goto LABEL_58;
            if ((unint64_t)v10 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_59;
            v24 = *(_QWORD *)(v23 + 8 * v10 + 32);
            swift_retain();
            if ((v23 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if ((v7 & 0x8000000000000000) != 0)
                goto LABEL_60;
              if (v7 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_62;
              v25 = *(_QWORD *)(v23 + 8 * v18);
              swift_retain();
LABEL_32:
              isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *v6 = v23;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v23 < 0 || (v23 & 0x4000000000000000) != 0)
                specialized _ArrayBuffer._consumeAndCreateNew()(v23);
              *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20) = v25;
              swift_release();
              specialized Array._endMutation()();
              v27 = *v6;
              v28 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *v6 = v27;
              if (!v28 || v27 < 0 || (v27 & 0x4000000000000000) != 0)
                specialized _ArrayBuffer._consumeAndCreateNew()(v27);
              if ((v7 & 0x8000000000000000) != 0)
                goto LABEL_61;
              if (v7 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_63;
              *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 8 * v18) = v24;
              swift_release();
              specialized Array._endMutation()();
LABEL_43:
              if (__OFADD__(v10++, 1))
                goto LABEL_57;
LABEL_44:
              v30 = v18 - 3;
              if (__OFADD__(v7, 1))
                goto LABEL_56;
              if (*v6 >> 62)
              {
                swift_bridgeObjectRetain();
                v31 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v31 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              ++v18;
              if (v30 == v31)
                goto LABEL_12;
              continue;
            }
          }
          break;
        }
        v25 = MEMORY[0x23B7C6D9C](v18 - 4, v23);
        v23 = *v6;
        goto LABEL_32;
      }
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      ++v10;
      if (v14 == v9)
        goto LABEL_10;
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (*v6 >> 62)
    goto LABEL_68;
  v10 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (!(*v6 >> 62))
  {
    v15 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15 >= v10)
      goto LABEL_14;
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 < v10)
    goto LABEL_67;
LABEL_14:
  specialized Array.replaceSubrange<A>(_:with:)(v10, v15);
  type metadata accessor for Text.Style(0);
  return specialized Set._Variant.insert(_:)(&v33, (uint64_t)a2);
}

uint64_t closure #1 in Text.Style.removeFontModifier<A>(ofType:)(uint64_t a1, ValueMetadata *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  type metadata accessor for AnyStaticFontModifier(0, (uint64_t)a2, a3, a4);
  if (swift_dynamicCastClass())
    return 1;
  if (a2 != &type metadata for Font.BoldModifier)
    return 0;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  result = swift_dynamicCastClass();
  if (result)
    return *(double *)(result + 16) >= 0.3;
  return result;
}

double Text.ResolvedProperties.insets.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Text.ResolvedProperties.insets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*Text.ResolvedProperties.insets.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Text.ResolvedProperties.features.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 32);
}

_WORD *Text.ResolvedProperties.features.setter(_WORD *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*Text.ResolvedProperties.features.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.styles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.styles.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.styles.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.transitions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.transitions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.transitions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void *Text.ResolvedProperties.suffix.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)v1[7];
  v3 = v1[8];
  v4 = v1[9];
  v5 = v1[10];
  v6 = v1[11];
  v7 = v1[12];
  v8 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return outlined copy of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
}

__n128 Text.ResolvedProperties.suffix.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;

  v5 = a1[1];
  v6 = *a1;
  v4 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  outlined consume of ResolvedTextSuffix(*(void **)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
  *(_OWORD *)(v1 + 56) = v6;
  *(_OWORD *)(v1 + 72) = v5;
  result = v4;
  *(__n128 *)(v1 + 88) = v4;
  *(_QWORD *)(v1 + 104) = v2;
  return result;
}

uint64_t (*Text.ResolvedProperties.suffix.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.CustomAttachments.characterIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.CustomAttachments.characterIndices.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.CustomAttachments.characterIndices.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.customAttachments.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.customAttachments.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = v2;
  return result;
}

uint64_t (*Text.ResolvedProperties.customAttachments.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.Features.rawValue.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

void static Text.ResolvedProperties.Features.keyColor.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

void static Text.ResolvedProperties.Features.attachments.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static Text.ResolvedProperties.Features.sensitive.getter(_WORD *a1@<X8>)
{
  *a1 = 4;
}

void static Text.ResolvedProperties.Features.customRenderer.getter(_WORD *a1@<X8>)
{
  *a1 = 8;
}

void static Text.ResolvedProperties.Features.useTextLayoutManager.getter(_WORD *a1@<X8>)
{
  *a1 = 16;
}

void static Text.ResolvedProperties.Features.useTextSuffix.getter(_WORD *a1@<X8>)
{
  *a1 = 32;
}

void static Text.ResolvedProperties.Features.produceTextLayout.getter(_WORD *a1@<X8>)
{
  *a1 = 64;
}

void static Text.ResolvedProperties.Features.checkInterpolationStrategy.getter(_WORD *a1@<X8>)
{
  *a1 = 128;
}

void static Text.ResolvedProperties.Features.isUniqueSizeVariant.getter(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t type metadata accessor for Text.Resolved(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Resolved);
}

uint64_t Text.ResolvedProperties.Transition.transition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 12);
  v4 = *(unsigned int *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 14);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v6 = *(_BYTE *)(v1 + 13);
  *(_BYTE *)(a1 + 13) = v6;
  *(_BYTE *)(a1 + 14) = v5;
  return outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v6);
}

uint64_t Text.ResolvedProperties.Transition.transition.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  int v4;
  char v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 6);
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 14);
  result = outlined consume of ContentTransition.Storage(*(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(_BYTE *)(v1 + 13));
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(_BYTE *)(v1 + 14) = v5;
  return result;
}

uint64_t (*Text.ResolvedProperties.Transition.transition.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static Text.ResolvedProperties.Transition.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  __int16 v2;
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  v2 = *((_WORD *)a1 + 6);
  v3 = *((_DWORD *)a1 + 2);
  v4 = *((unsigned __int8 *)a1 + 14);
  v5 = *a2;
  v6 = *((_WORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 2);
  v8 = *((unsigned __int8 *)a2 + 14);
  v13 = *a1;
  v14 = v3;
  v15 = v2;
  v10 = v5;
  v11 = v7;
  v12 = v6;
  return specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10) & ~(v4 ^ v8) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.ResolvedProperties.Transition(uint64_t *a1, uint64_t *a2)
{
  __int16 v2;
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  v2 = *((_WORD *)a1 + 6);
  v3 = *((_DWORD *)a1 + 2);
  v4 = *((unsigned __int8 *)a1 + 14);
  v5 = *a2;
  v6 = *((_WORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 2);
  v8 = *((unsigned __int8 *)a2 + 14);
  v13 = *a1;
  v14 = v3;
  v15 = v2;
  v10 = v5;
  v11 = v7;
  v12 = v6;
  return specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10) & ~(v4 ^ v8) & 1;
}

uint64_t Text.ResolvedProperties.Paragraph.compositionLanguage.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Text.ResolvedProperties.Paragraph.compositionLanguage.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Text.ResolvedProperties.Paragraph.compositionLanguage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id Text.ResolvedProperties.paragraph.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 128);
  *a1 = *(_QWORD *)(v1 + 120);
  a1[1] = v2;
  return v2;
}

__n128 Text.ResolvedProperties.paragraph.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(__n128 *)(v1 + 120) = *a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.paragraph.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentValues.disableLinkColor.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.disableLinkColor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.disableLinkColor.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.disableLinkColor.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.disableLinkColor.modify;
}

void EnvironmentValues.disableLinkColor.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

id SwiftUITextAttachment.init(image:)(__int128 *a1)
{
  char *v1;
  objc_class *ObjectType;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  __int16 v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  objc_super v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = a1[9];
  v33 = a1[8];
  v34 = v4;
  v35[0] = a1[10];
  *(_DWORD *)((char *)v35 + 15) = *(_DWORD *)((char *)a1 + 175);
  v5 = a1[5];
  v29 = a1[4];
  v30 = v5;
  v6 = a1[7];
  v31 = a1[6];
  v32 = v6;
  v7 = a1[1];
  v26 = *a1;
  v27 = v7;
  v8 = a1[3];
  *(_OWORD *)v28 = a1[2];
  *(_OWORD *)&v28[16] = v8;
  v9 = (void *)v26;
  v10 = BYTE8(v26);
  v11 = *(_QWORD *)v28;
  v12 = v28[8];
  v13 = v31;
  v14 = BYTE1(v31);
  v15 = WORD1(v31);
  v16 = &v1[OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage];
  *(_QWORD *)v16 = v26;
  v16[8] = v10;
  *((_OWORD *)v16 + 1) = v27;
  *((_QWORD *)v16 + 4) = v11;
  v16[40] = v12;
  *(_OWORD *)(v16 + 44) = *(_OWORD *)&v28[12];
  v16[60] = BYTE12(v8);
  v17 = v30;
  *((_OWORD *)v16 + 4) = v29;
  *((_OWORD *)v16 + 5) = v17;
  v16[96] = v13;
  v16[97] = v14;
  *((_WORD *)v16 + 49) = v15;
  if (v10 == 2)
  {
    if ((_QWORD)v34)
    {
      v19 = *(_QWORD *)(v34 + 48);
      v18 = *(_QWORD *)(v34 + 56);
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    outlined copy of GraphicsImage.Contents?(v9, 2);
    v22 = v1;
    outlined release of Image.Resolved((uint64_t)&v26);
    v23 = &v22[OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin];
    *(_QWORD *)v23 = v19;
    *((_QWORD *)v23 + 1) = v18;
  }
  else
  {
    outlined copy of GraphicsImage.Contents?(v9, v10);
    v20 = v1;
    outlined release of Image.Resolved((uint64_t)&v26);
    v21 = &v20[OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin];
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
  }

  v25.receiver = v1;
  v25.super_class = ObjectType;
  return objc_msgSendSuper2(&v25, sel_initWithData_ofType_, 0, 0);
}

uint64_t key path getter for EnvironmentValues.resolvedTextProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    v6 = v5;
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    v6 = v8;
  }
  result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t EnvironmentValues.resolvedTextProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.resolvedTextProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.resolvedTextProvider.modify;
}

void EnvironmentValues.resolvedTextProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[5];
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    v6 = *(_QWORD *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t outlined copy of Text.Style.LineStyle(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for Text.Style(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Style);
}

uint64_t sub_235081444()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_235081468()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(void **)(v4 + 48));
}

uint64_t sub_2350814C8()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t type metadata accessor for Text.ResolvedString(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, type metadata singleton initialization cache for Text.ResolvedString);
}

uint64_t type metadata accessor for SwiftUITextAttachment()
{
  return objc_opt_self();
}

uint64_t outlined copy of AccessibilityTextAttributes?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
    return outlined copy of Text?(a2, a3, a4, a5);
  return result;
}

uint64_t outlined consume of AccessibilityTextAttributes?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
    return outlined consume of Text?(a2, a3, a4, a5);
  return result;
}

uint64_t specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(void *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v2 = a2[1];
  v4 = objc_msgSend(a1, sel_string);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v25);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey);
    BloomFilter.init(hashValue:)(v8);
    v9 = swift_retain_n();
    specialized find1<A>(_:key:filter:)(v9, v25);
  }
  swift_release_n();
  v25 = v5;
  v26 = v7;
  swift_bridgeObjectRetain();
  v10 = String.init<A>(_:)();
  v25 = v3;
  v26 = v2;
  v12 = String.caseConvertedIfNeeded(_:)(&v25, v10, v11);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v25 = v3;
    v26 = 0;
    swift_retain();
    v24 = specialized static ShouldRedactContentKey.value(in:)(&v25, v21, v22, v23);
    swift_release();
    if ((v24 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  swift_retain_n();
  swift_retain_n();
  v15 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3);
  swift_release_n();
  swift_release_n();
  if ((v15 & 1) != 0)
  {
LABEL_6:
    v16 = String.count.getter();
    v12 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v16);
    v18 = v17;
    swift_bridgeObjectRelease();
    v14 = v18;
  }
LABEL_7:
  type metadata accessor for Text.ResolvedString(0);
  v19._countAndFlagsBits = v12;
  v19._object = v14;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Text.ResolvedString.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v5 = *v3;
  v4 = v3[1];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v7, v1);
  v9 = String.init<A>(_:)();
  v24 = v5;
  v25 = v4;
  v11 = String.caseConvertedIfNeeded(_:)(&v24, v9, v10);
  v13 = v12;
  swift_bridgeObjectRelease();
  if (!v4)
  {
    v24 = v5;
    v25 = 0;
    swift_retain();
    v23 = specialized static ShouldRedactContentKey.value(in:)(&v24, v20, v21, v22);
    swift_release();
    if ((v23 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  swift_retain_n();
  swift_retain_n();
  v14 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5);
  swift_release_n();
  swift_release_n();
  if ((v14 & 1) != 0)
  {
LABEL_3:
    v15 = String.count.getter();
    v11 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v15);
    v17 = v16;
    swift_bridgeObjectRelease();
    v13 = v17;
  }
LABEL_4:
  type metadata accessor for Text.ResolvedString(0);
  v18._countAndFlagsBits = v11;
  v18._object = v13;
  String.append(_:)(v18);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.ResolvedProperties.Features, &type metadata for Text.ResolvedProperties.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.ResolvedProperties.Features, &type metadata for Text.ResolvedProperties.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.ResolvedProperties.Features, &type metadata for Text.ResolvedProperties.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.ResolvedProperties.Features, &type metadata for Text.ResolvedProperties.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

uint64_t sub_235081A28(char *a1)
{
  return EnvironmentValues.disableLinkColor.setter(*a1);
}

uint64_t sub_235081A50(uint64_t *a1)
{
  return EnvironmentValues.resolvedTextProvider.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of ResolvedTextContainer.style.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ResolvedTextContainer.style.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ResolvedTextContainer.style.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ResolvedTextContainer.idiom.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 40))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append(_:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append<A>(resolvable:in:with:transition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

unint64_t initializeBufferWithCopyOfBuffer for Text.Resolved(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(const void *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  void *v70;
  int *v71;
  uint64_t v72;
  uint64_t v74;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= 2uLL)
      v6 = swift_retain();
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v8);
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    v10 = (_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 16) = v8;
    swift_retain();
    if ((unint64_t)(v11 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 80) = *v10;
      *(_QWORD *)(a1 + 88) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v10;
    }
    v13 = (_QWORD *)(a2 + 96);
    v14 = *(_QWORD *)(a2 + 104);
    if ((unint64_t)(v14 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 96) = *v13;
      *(_QWORD *)(a1 + 104) = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
    }
    v15 = (_OWORD *)(a1 + 112);
    v16 = (_OWORD *)(a2 + 112);
    v17 = *(_QWORD *)(a2 + 176);
    if (v17 == 1)
    {
      v18 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v18;
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      v19 = *(_OWORD *)(a2 + 128);
      *v15 = *v16;
      *(_OWORD *)(a1 + 128) = v19;
      v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      v21 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v17;
      *(_QWORD *)(a1 + 184) = v21;
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      swift_retain();
    }
    v22 = *(_QWORD *)(a2 + 248);
    if (v22 == 1)
    {
      v23 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v23;
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    }
    else
    {
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v22;
      swift_bridgeObjectRetain();
    }
    v24 = *(_QWORD *)(a2 + 288);
    if (v24 == 1)
    {
      v25 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v25;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    }
    else
    {
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      if (v24)
      {
        v26 = *(_QWORD *)(a2 + 264);
        v27 = *(_QWORD *)(a2 + 272);
        v28 = *(_BYTE *)(a2 + 280);
        outlined copy of Text.Storage(v26, v27, v28);
        *(_QWORD *)(a1 + 264) = v26;
        *(_QWORD *)(a1 + 272) = v27;
        *(_BYTE *)(a1 + 280) = v28;
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v29;
      }
    }
    v30 = *(void **)(a2 + 296);
    v31 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = v30;
    *(_QWORD *)(a1 + 304) = v31;
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
    v71 = (int *)type metadata accessor for Text.Style(0);
    v32 = v71[21];
    v33 = (char *)(a1 + v32);
    v34 = (char *)(a2 + v32);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    v36 = v35;
    v37 = *(_QWORD *)(v35 - 8);
    v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    v39 = v30;
    swift_retain();
    swift_retain();
    if (v38(v34, 2, v36))
    {
      v40 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v33, v34, v41);
      v33[*(int *)(v36 + 48)] = v34[*(int *)(v36 + 48)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v33, 0, 2, v36);
    }
    v42 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    v43 = &v33[v42];
    v44 = &v34[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    *(_QWORD *)(a1 + v71[22]) = *(_QWORD *)(a2 + v71[22]);
    v45 = v71[23];
    v46 = (void *)(a1 + v45);
    v47 = (const void *)(a2 + v45);
    v48 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v49 + 48);
    swift_bridgeObjectRetain();
    if (v50(v47, 1, v48))
    {
      type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    *(_QWORD *)(a1 + v71[24]) = *(_QWORD *)(a2 + v71[24]);
    v52 = a3[5];
    v53 = a3[6];
    v54 = *(void **)(a2 + v52);
    *(_QWORD *)(a1 + v52) = v54;
    *(_BYTE *)(a1 + v53) = *(_BYTE *)(a2 + v53);
    v55 = a3[8];
    *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
    v56 = a1 + v55;
    v57 = (_QWORD *)(a2 + v55);
    v58 = *(_OWORD *)(a2 + v55 + 16);
    *(_OWORD *)v56 = *(_OWORD *)(a2 + v55);
    *(_OWORD *)(v56 + 16) = v58;
    *(_WORD *)(v56 + 32) = *(_WORD *)(a2 + v55 + 32);
    v59 = *(_QWORD *)(a2 + v55 + 48);
    *(_QWORD *)(v56 + 40) = *(_QWORD *)(a2 + v55 + 40);
    *(_QWORD *)(v56 + 48) = v59;
    v60 = *(_QWORD *)(a2 + v55 + 64);
    v61 = *(_QWORD *)(a2 + v55 + 80);
    v74 = *(_QWORD *)(a2 + v55 + 72);
    v62 = *(_QWORD *)(a2 + v55 + 88);
    v63 = *(_QWORD *)(a2 + v55 + 96);
    v70 = *(void **)(a2 + v55 + 56);
    v72 = *(_QWORD *)(a2 + v55 + 104);
    swift_bridgeObjectRetain();
    v64 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ResolvedTextSuffix(v70, v60, v74, v61, v62, v63);
    *(_QWORD *)(v56 + 56) = v70;
    *(_QWORD *)(v56 + 64) = v60;
    *(_QWORD *)(v56 + 72) = v74;
    *(_QWORD *)(v56 + 80) = v61;
    *(_QWORD *)(v56 + 88) = v62;
    *(_QWORD *)(v56 + 96) = v63;
    v65 = v57[14];
    v66 = v57[15];
    *(_QWORD *)(v56 + 104) = v72;
    *(_QWORD *)(v56 + 112) = v65;
    v67 = (void *)v57[16];
    *(_QWORD *)(v56 + 120) = v66;
    *(_QWORD *)(v56 + 128) = v67;
    swift_bridgeObjectRetain();
    v68 = v67;
  }
  return a1;
}

void destroy for Text.Resolved(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)a1 >= 2uLL)
    swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(_QWORD *)(a1 + 16));
  swift_release();
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) >= 2)
    swift_release();
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) >= 2)
    swift_release();
  if (*(_QWORD *)(a1 + 176) != 1)
    swift_release();
  if (*(_QWORD *)(a1 + 248) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_BYTE *)(a1 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  v4 = type metadata accessor for Text.Style(0);
  v5 = a1 + *(int *)(v4 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 2, v6))
  {
    v7 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(v4 + 92);
  v9 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();

  v11 = a1 + *(int *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(v11 + 56), *(_QWORD *)(v11 + 64), *(_QWORD *)(v11 + 72), *(_QWORD *)(v11 + 80), *(_QWORD *)(v11 + 88), *(_QWORD *)(v11 + 96));
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  void *v68;
  int *v69;
  uint64_t v70;
  uint64_t v72;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 2uLL)
    v5 = swift_retain();
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = (_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain();
  if ((unint64_t)(v10 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 80) = *v9;
    *(_QWORD *)(a1 + 88) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v9;
  }
  v11 = (_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  if ((unint64_t)(v12 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 96) = *v11;
    *(_QWORD *)(a1 + 104) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v11;
  }
  v13 = (_OWORD *)(a1 + 112);
  v14 = (_OWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 176);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v16;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v17 = *(_OWORD *)(a2 + 128);
    *v13 = *v14;
    *(_OWORD *)(a1 + 128) = v17;
    v18 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v18;
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v19 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 184) = v19;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_retain();
  }
  v20 = *(_QWORD *)(a2 + 248);
  if (v20 == 1)
  {
    v21 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v21;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  }
  else
  {
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = v20;
    swift_bridgeObjectRetain();
  }
  v22 = *(_QWORD *)(a2 + 288);
  if (v22 == 1)
  {
    v23 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v23;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  }
  else
  {
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    if (v22)
    {
      v24 = *(_QWORD *)(a2 + 264);
      v25 = *(_QWORD *)(a2 + 272);
      v26 = *(_BYTE *)(a2 + 280);
      outlined copy of Text.Storage(v24, v25, v26);
      *(_QWORD *)(a1 + 264) = v24;
      *(_QWORD *)(a1 + 272) = v25;
      *(_BYTE *)(a1 + 280) = v26;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRetain();
    }
    else
    {
      v27 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v27;
    }
  }
  v28 = *(void **)(a2 + 296);
  v29 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v28;
  *(_QWORD *)(a1 + 304) = v29;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v69 = (int *)type metadata accessor for Text.Style(0);
  v30 = v69[21];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v34 = v33;
  v35 = *(_QWORD *)(v33 - 8);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v28;
  swift_retain();
  swift_retain();
  if (v36(v32, 2, v34))
  {
    v38 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v39 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v31, v32, v39);
    v31[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 2, v34);
  }
  v40 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v41 = &v31[v40];
  v42 = &v32[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *(_QWORD *)(a1 + v69[22]) = *(_QWORD *)(a2 + v69[22]);
  v43 = v69[23];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  v46 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  *(_QWORD *)(a1 + v69[24]) = *(_QWORD *)(a2 + v69[24]);
  v50 = a3[5];
  v51 = a3[6];
  v52 = *(void **)(a2 + v50);
  *(_QWORD *)(a1 + v50) = v52;
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  v53 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v54 = a1 + v53;
  v55 = (_QWORD *)(a2 + v53);
  v56 = *(_OWORD *)(a2 + v53 + 16);
  *(_OWORD *)v54 = *(_OWORD *)(a2 + v53);
  *(_OWORD *)(v54 + 16) = v56;
  *(_WORD *)(v54 + 32) = *(_WORD *)(a2 + v53 + 32);
  v57 = *(_QWORD *)(a2 + v53 + 48);
  *(_QWORD *)(v54 + 40) = *(_QWORD *)(a2 + v53 + 40);
  *(_QWORD *)(v54 + 48) = v57;
  v58 = *(_QWORD *)(a2 + v53 + 64);
  v59 = *(_QWORD *)(a2 + v53 + 80);
  v72 = *(_QWORD *)(a2 + v53 + 72);
  v60 = *(_QWORD *)(a2 + v53 + 88);
  v61 = *(_QWORD *)(a2 + v53 + 96);
  v68 = *(void **)(a2 + v53 + 56);
  v70 = *(_QWORD *)(a2 + v53 + 104);
  swift_bridgeObjectRetain();
  v62 = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v68, v58, v72, v59, v60, v61);
  *(_QWORD *)(v54 + 56) = v68;
  *(_QWORD *)(v54 + 64) = v58;
  *(_QWORD *)(v54 + 72) = v72;
  *(_QWORD *)(v54 + 80) = v59;
  *(_QWORD *)(v54 + 88) = v60;
  *(_QWORD *)(v54 + 96) = v61;
  v63 = v55[14];
  v64 = v55[15];
  *(_QWORD *)(v54 + 104) = v70;
  *(_QWORD *)(v54 + 112) = v63;
  v65 = (void *)v55[16];
  *(_QWORD *)(v54 + 120) = v64;
  *(_QWORD *)(v54 + 128) = v65;
  swift_bridgeObjectRetain();
  v66 = v65;
  return a1;
}

uint64_t assignWithCopy for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  void *v70;
  void *v71;
  id v72;
  int *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(_BYTE *, uint64_t, uint64_t);
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(void *, uint64_t, uint64_t);
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  id v120;
  uint64_t v122;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a2;
  if (v6 >= 2)
  {
    if (v7 >= 2)
    {
      *(_QWORD *)a1 = v7;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v7;
    if (v7 >= 2)
      swift_retain();
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 16);
  outlined copy of Text.Style.TextStyleColor(v8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  outlined consume of Text.Style.TextStyleColor(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 88) - 1;
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) < 2)
  {
    if (v13 >= 2)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v13 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
LABEL_13:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
LABEL_15:
  v14 = *(_QWORD *)(a2 + 104) - 1;
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) < 2)
  {
    if (v14 >= 2)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v14 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
LABEL_22:
  v15 = (__int128 *)(a1 + 112);
  v16 = (__int128 *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176) == 1)
  {
    if (v17 == 1)
    {
      v18 = *v16;
      v19 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v19;
      *v15 = v18;
      v20 = *(_OWORD *)(a2 + 160);
      v21 = *(_OWORD *)(a2 + 176);
      v22 = *(_OWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 192) = v22;
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      v28 = *(_QWORD *)v16;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)v15 = v28;
      v29 = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v29;
      v30 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v30;
      v31 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v31;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v32 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v32;
      v33 = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = v33;
      swift_retain();
    }
  }
  else if (v17 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    v24 = *(_OWORD *)(a2 + 128);
    v23 = *(_OWORD *)(a2 + 144);
    *v15 = *v16;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    v26 = *(_OWORD *)(a2 + 176);
    v25 = *(_OWORD *)(a2 + 192);
    v27 = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 160) = v27;
  }
  else
  {
    v34 = *(_QWORD *)v16;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)v15 = v34;
    v35 = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v35;
    v36 = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v36;
    v37 = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v37;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    swift_retain();
    swift_release();
    v38 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v38;
    v39 = *(_QWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v39;
  }
  v40 = (__int128 *)(a1 + 216);
  v41 = (__int128 *)(a2 + 216);
  v42 = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 248) == 1)
  {
    if (v42 == 1)
    {
      v43 = *v41;
      v44 = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *v40 = v43;
      *(_OWORD *)(a1 + 232) = v44;
    }
    else
    {
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v47 = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = v47;
      *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
    }
  }
  else if (v42 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    v45 = *(_QWORD *)(a2 + 248);
    v46 = *(_OWORD *)(a2 + 232);
    *v40 = *v41;
    *(_OWORD *)(a1 + 232) = v46;
    *(_QWORD *)(a1 + 248) = v45;
  }
  else
  {
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
    v48 = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v48;
    *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v49 = (__int128 *)(a1 + 256);
  v50 = (__int128 *)(a2 + 256);
  v51 = *(_QWORD *)(a1 + 288);
  v52 = *(_QWORD *)(a2 + 288);
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      v53 = *v50;
      v54 = *(_OWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
LABEL_39:
      *v49 = v53;
      v49[1] = v54;
      goto LABEL_50;
    }
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
    if (!*(_QWORD *)(a2 + 288))
    {
      v57 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v57;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v52 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    v55 = *(_QWORD *)(a2 + 288);
    v56 = *(_OWORD *)(a2 + 272);
    *v49 = *v50;
    *(_OWORD *)(a1 + 272) = v56;
    *(_QWORD *)(a1 + 288) = v55;
    goto LABEL_50;
  }
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
  v49 = (__int128 *)(a1 + 264);
  v58 = (__int128 *)(a2 + 264);
  v59 = *(_QWORD *)(a2 + 288);
  if (!v51)
  {
    if (!v59)
    {
      v53 = *v58;
      v54 = *(_OWORD *)(a2 + 280);
      goto LABEL_39;
    }
LABEL_48:
    v66 = *(_QWORD *)(a2 + 264);
    v67 = *(_QWORD *)(a2 + 272);
    v68 = *(_BYTE *)(a2 + 280);
    outlined copy of Text.Storage(v66, v67, v68);
    *(_QWORD *)(a1 + 264) = v66;
    *(_QWORD *)(a1 + 272) = v67;
    *(_BYTE *)(a1 + 280) = v68;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v59)
  {
    v60 = *(_QWORD *)(a2 + 264);
    v61 = *(_QWORD *)(a2 + 272);
    v62 = *(_BYTE *)(a2 + 280);
    outlined copy of Text.Storage(v60, v61, v62);
    v63 = *(_QWORD *)(a1 + 264);
    v64 = *(_QWORD *)(a1 + 272);
    v65 = *(_BYTE *)(a1 + 280);
    *(_QWORD *)(a1 + 264) = v60;
    *(_QWORD *)(a1 + 272) = v61;
    *(_BYTE *)(a1 + 280) = v62;
    outlined consume of Text.Storage(v63, v64, v65);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(a1 + 264);
    v69 = *(_OWORD *)(a2 + 280);
    *v49 = *v58;
    *(_OWORD *)(a1 + 280) = v69;
  }
LABEL_50:
  v70 = *(void **)(a1 + 296);
  v71 = *(void **)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v71;
  v72 = v71;

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
  v73 = (int *)type metadata accessor for Text.Style(0);
  v74 = v73[21];
  v75 = (_BYTE *)(a1 + v74);
  v76 = (_BYTE *)(a2 + v74);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v78 = v77;
  v79 = *(_QWORD *)(v77 - 8);
  v80 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48);
  v81 = v80(v75, 2, v77);
  v82 = v80(v76, 2, v78);
  if (v81)
  {
    if (!v82)
    {
      v83 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v75, v76, v83);
      v75[*(int *)(v78 + 48)] = v76[*(int *)(v78 + 48)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v75, 0, 2, v78);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v82)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_55:
    v84 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_56;
  }
  v122 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v122 - 8) + 24))(v75, v76, v122);
  v75[*(int *)(v78 + 48)] = v76[*(int *)(v78 + 48)];
LABEL_56:
  v85 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v86 = &v75[v85];
  v87 = &v76[v85];
  v88 = v87[8];
  *(_QWORD *)v86 = *(_QWORD *)v87;
  v86[8] = v88;
  *(_QWORD *)(a1 + v73[22]) = *(_QWORD *)(a2 + v73[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89 = v73[23];
  v90 = (void *)(a1 + v89);
  v91 = (void *)(a2 + v89);
  v92 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v93 = *(_QWORD *)(v92 - 8);
  v94 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v93 + 48);
  v95 = v94(v90, 1, v92);
  v96 = v94(v91, 1, v92);
  if (!v95)
  {
    if (!v96)
    {
      (*(void (**)(void *, void *, uint64_t))(v93 + 24))(v90, v91, v92);
      goto LABEL_62;
    }
    (*(void (**)(void *, uint64_t))(v93 + 8))(v90, v92);
    goto LABEL_61;
  }
  if (v96)
  {
LABEL_61:
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(void *, void *, uint64_t))(v93 + 16))(v90, v91, v92);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
LABEL_62:
  *(_QWORD *)(a1 + v73[24]) = *(_QWORD *)(a2 + v73[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v98 = a3[5];
  v99 = *(void **)(a1 + v98);
  v100 = *(void **)(a2 + v98);
  *(_QWORD *)(a1 + v98) = v100;
  v101 = v100;

  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v102 = a3[8];
  v103 = a1 + v102;
  v104 = (_QWORD *)(a2 + v102);
  *(_QWORD *)v103 = *(_QWORD *)(a2 + v102);
  *(_QWORD *)(v103 + 8) = *(_QWORD *)(a2 + v102 + 8);
  *(_QWORD *)(v103 + 16) = *(_QWORD *)(a2 + v102 + 16);
  *(_QWORD *)(v103 + 24) = *(_QWORD *)(a2 + v102 + 24);
  *(_WORD *)(v103 + 32) = *(_WORD *)(a2 + v102 + 32);
  *(_QWORD *)(v103 + 40) = *(_QWORD *)(a2 + v102 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v103 + 48) = v104[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v105 = (void *)v104[7];
  v106 = v104[8];
  v107 = v104[9];
  v108 = v104[10];
  v109 = v104[11];
  v110 = v104[12];
  v111 = v104[13];
  outlined copy of ResolvedTextSuffix(v105, v106, v107, v108, v109, v110);
  v112 = *(void **)(v103 + 56);
  v113 = *(_QWORD *)(v103 + 64);
  v114 = *(_QWORD *)(v103 + 72);
  v115 = *(_QWORD *)(v103 + 80);
  v116 = *(_QWORD *)(v103 + 88);
  v117 = *(_QWORD *)(v103 + 96);
  *(_QWORD *)(v103 + 56) = v105;
  *(_QWORD *)(v103 + 64) = v106;
  *(_QWORD *)(v103 + 72) = v107;
  *(_QWORD *)(v103 + 80) = v108;
  *(_QWORD *)(v103 + 88) = v109;
  *(_QWORD *)(v103 + 96) = v110;
  *(_QWORD *)(v103 + 104) = v111;
  outlined consume of ResolvedTextSuffix(v112, v113, v114, v115, v116, v117);
  *(_QWORD *)(v103 + 112) = v104[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v103 + 120) = v104[15];
  v118 = *(void **)(v103 + 128);
  v119 = (void *)v104[16];
  *(_QWORD *)(v103 + 128) = v119;
  v120 = v119;

  return a1;
}

uint64_t initializeWithTake for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  v11 = *(_OWORD *)(a2 + 216);
  v12 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  v14 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v14;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v15 = (int *)type metadata accessor for Text.Style(0);
  v16 = v15[21];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 2, v19))
  {
    v22 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v17, v18, v23);
    v17[*(int *)(v20 + 48)] = v18[*(int *)(v20 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 2, v20);
  }
  v24 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v25 = &v17[v24];
  v26 = &v18[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)(a1 + v15[22]) = *(_QWORD *)(a2 + v15[22]);
  v27 = v15[23];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  *(_QWORD *)(a1 + v15[24]) = *(_QWORD *)(a2 + v15[24]);
  v33 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  v34 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = *(_OWORD *)(v36 + 112);
  *(_OWORD *)(v35 + 96) = *(_OWORD *)(v36 + 96);
  *(_OWORD *)(v35 + 112) = v37;
  *(_QWORD *)(v35 + 128) = *(_QWORD *)(v36 + 128);
  v38 = *(_OWORD *)(v36 + 48);
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_OWORD *)(v35 + 48) = v38;
  v39 = *(_OWORD *)(v36 + 80);
  *(_OWORD *)(v35 + 64) = *(_OWORD *)(v36 + 64);
  *(_OWORD *)(v35 + 80) = v39;
  v40 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v40;
  return a1;
}

uint64_t assignWithTake for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  int *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_BYTE *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _OWORD *v65;
  _OWORD *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  __int128 v72;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 < 2uLL)
    goto LABEL_4;
  if (v6 < 2)
  {
    outlined destroy of Font(a1);
    v6 = *(_QWORD *)a2;
LABEL_4:
    *(_QWORD *)a1 = v6;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v6;
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  outlined consume of Text.Style.TextStyleColor(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = (_OWORD *)(a2 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(a1 + 80) = *v8;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a2 + 88);
  if ((unint64_t)(v9 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 88) = v9;
  swift_release();
LABEL_11:
  v10 = (_OWORD *)(a2 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(a1 + 96) = *v10;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(a2 + 104);
  if ((unint64_t)(v11 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v10;
  *(_QWORD *)(a1 + 104) = v11;
  swift_release();
LABEL_16:
  v12 = (_OWORD *)(a1 + 112);
  v13 = (_OWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 176) == 1)
  {
LABEL_19:
    v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v16 = *(_OWORD *)(a2 + 128);
    *v12 = *v13;
    *(_OWORD *)(a1 + 128) = v16;
    v17 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v17;
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(a2 + 176);
  if (v14 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    goto LABEL_19;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = v14;
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
LABEL_21:
  if (*(_QWORD *)(a1 + 248) == 1)
  {
LABEL_24:
    v19 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v19;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    goto LABEL_26;
  }
  v18 = *(_QWORD *)(a2 + 248);
  if (v18 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v18;
  swift_bridgeObjectRelease();
LABEL_26:
  v20 = *(_QWORD *)(a1 + 288);
  if (v20 == 1)
  {
LABEL_29:
    v22 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v22;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(a2 + 288);
  if (v21 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    goto LABEL_29;
  }
  v65 = (_OWORD *)(a1 + 264);
  v66 = (_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
  if (v20)
  {
    if (v21)
    {
      v67 = *(_BYTE *)(a2 + 280);
      v68 = *(_QWORD *)(a1 + 264);
      v69 = *(_QWORD *)(a1 + 272);
      v70 = *(_BYTE *)(a1 + 280);
      *v65 = *v66;
      *(_BYTE *)(a1 + 280) = v67;
      outlined consume of Text.Storage(v68, v69, v70);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(a1 + 264);
  }
  v72 = *(_OWORD *)(a2 + 280);
  *v65 = *v66;
  *(_OWORD *)(a1 + 280) = v72;
LABEL_30:
  v23 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_release();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_release();
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v24 = (int *)type metadata accessor for Text.Style(0);
  v25 = v24[21];
  v26 = (_BYTE *)(a1 + v25);
  v27 = (_BYTE *)(a2 + v25);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v29 = v28;
  v30 = *(_QWORD *)(v28 - 8);
  v31 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v26, 2, v28);
  v33 = v31(v27, 2, v29);
  if (v32)
  {
    if (!v33)
    {
      v34 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v26, v27, v34);
      v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 2, v29);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v33)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_35:
    v35 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_36;
  }
  v71 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v71 - 8) + 40))(v26, v27, v71);
  v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
LABEL_36:
  v36 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v37 = &v26[v36];
  v38 = &v27[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)(a1 + v24[22]) = *(_QWORD *)(a2 + v24[22]);
  swift_bridgeObjectRelease();
  v39 = v24[23];
  v40 = (void *)(a1 + v39);
  v41 = (void *)(a2 + v39);
  v42 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 40))(v40, v41, v42);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
    goto LABEL_41;
  }
  if (v46)
  {
LABEL_41:
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, void *, uint64_t))(v43 + 32))(v40, v41, v42);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_42:
  *(_QWORD *)(a1 + v24[24]) = *(_QWORD *)(a2 + v24[24]);
  swift_bridgeObjectRelease();
  v48 = a3[5];
  v49 = *(void **)(a1 + v48);
  *(_QWORD *)(a1 + v48) = *(_QWORD *)(a2 + v48);

  v50 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v50) = *(_OWORD *)(a2 + v50);
  v51 = a3[8];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v54;
  *(_WORD *)(v52 + 32) = *(_WORD *)(v53 + 32);
  *(_QWORD *)(v52 + 40) = *(_QWORD *)(v53 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v52 + 48) = *(_QWORD *)(v53 + 48);
  swift_bridgeObjectRelease();
  v55 = *(_QWORD *)(v53 + 104);
  v56 = *(void **)(v52 + 56);
  v57 = *(_QWORD *)(v52 + 64);
  v58 = *(_QWORD *)(v52 + 72);
  v59 = *(_QWORD *)(v52 + 80);
  v60 = *(_QWORD *)(v52 + 88);
  v61 = *(_QWORD *)(v52 + 96);
  *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 56);
  *(_OWORD *)(v52 + 72) = *(_OWORD *)(v53 + 72);
  *(_OWORD *)(v52 + 88) = *(_OWORD *)(v53 + 88);
  *(_QWORD *)(v52 + 104) = v55;
  outlined consume of ResolvedTextSuffix(v56, v57, v58, v59, v60, v61);
  *(_QWORD *)(v52 + 112) = *(_QWORD *)(v53 + 112);
  swift_bridgeObjectRelease();
  v62 = *(void **)(v52 + 128);
  v63 = *(_QWORD *)(v53 + 128);
  *(_QWORD *)(v52 + 120) = *(_QWORD *)(v53 + 120);
  *(_QWORD *)(v52 + 128) = v63;

  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Resolved()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235083888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Text.Style(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 40);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Resolved()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235083914(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Text.Style(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for Text.Resolved()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for Text.Style(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(const void *, uint64_t, uint64_t);
  uint64_t v52;
  int *v54;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= 2uLL)
      v7 = swift_retain();
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v9);
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    v11 = (_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 16) = v9;
    swift_retain();
    if ((unint64_t)(v12 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 80) = *v11;
      *(_QWORD *)(a1 + 88) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v11;
    }
    v14 = (_QWORD *)(a2 + 96);
    v15 = *(_QWORD *)(a2 + 104);
    if ((unint64_t)(v15 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 96) = *v14;
      *(_QWORD *)(a1 + 104) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v14;
    }
    v16 = (_OWORD *)(a1 + 112);
    v17 = (_OWORD *)(a2 + 112);
    v18 = *(_QWORD *)(a2 + 176);
    if (v18 == 1)
    {
      v19 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v19;
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      v20 = *(_OWORD *)(a2 + 128);
      *v16 = *v17;
      *(_OWORD *)(a1 + 128) = v20;
      v21 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v21;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      v22 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v18;
      *(_QWORD *)(a1 + 184) = v22;
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      swift_retain();
    }
    v23 = *(_QWORD *)(a2 + 248);
    if (v23 == 1)
    {
      v24 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v24;
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    }
    else
    {
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v23;
      swift_bridgeObjectRetain();
    }
    v25 = *(_QWORD *)(a2 + 288);
    if (v25 == 1)
    {
      v26 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v26;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    }
    else
    {
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      if (v25)
      {
        v27 = *(_QWORD *)(a2 + 264);
        v28 = *(_QWORD *)(a2 + 272);
        v29 = *(_BYTE *)(a2 + 280);
        outlined copy of Text.Storage(v27, v28, v29);
        *(_QWORD *)(a1 + 264) = v27;
        *(_QWORD *)(a1 + 272) = v28;
        *(_BYTE *)(a1 + 280) = v29;
        *(_QWORD *)(a1 + 288) = v25;
        swift_bridgeObjectRetain();
      }
      else
      {
        v30 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v30;
      }
    }
    v32 = *(void **)(a2 + 296);
    v31 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = v32;
    *(_QWORD *)(a1 + 304) = v31;
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
    v54 = a3;
    v33 = a3[21];
    v34 = (char *)(a1 + v33);
    v35 = (char *)(a2 + v33);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    v37 = v36;
    v38 = *(_QWORD *)(v36 - 8);
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    v40 = v32;
    swift_retain();
    swift_retain();
    if (v39(v35, 2, v37))
    {
      v41 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v42 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v34, v35, v42);
      v34[*(int *)(v37 + 48)] = v35[*(int *)(v37 + 48)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v34, 0, 2, v37);
    }
    v43 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    v44 = &v34[v43];
    v45 = &v35[v43];
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v44[8] = v45[8];
    v46 = v54[23];
    *(_QWORD *)(a1 + v54[22]) = *(_QWORD *)(a2 + v54[22]);
    v47 = (void *)(a1 + v46);
    v48 = (const void *)(a2 + v46);
    v49 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    if (v51(v48, 1, v49))
    {
      type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    *(_QWORD *)(a1 + v54[24]) = *(_QWORD *)(a2 + v54[24]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Text.Style(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)a1 >= 2uLL)
    swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(_QWORD *)(a1 + 16));
  swift_release();
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) >= 2)
    swift_release();
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) >= 2)
    swift_release();
  if (*(_QWORD *)(a1 + 176) != 1)
    swift_release();
  if (*(_QWORD *)(a1 + 248) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_BYTE *)(a1 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 2, v5))
  {
    v6 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 92);
  v8 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(const void *, uint64_t, uint64_t);
  uint64_t v50;
  int *v52;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 2uLL)
    v6 = swift_retain();
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v8);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = (_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain();
  if ((unint64_t)(v11 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 80) = *v10;
    *(_QWORD *)(a1 + 88) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v10;
  }
  v12 = (_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  if ((unint64_t)(v13 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 96) = *v12;
    *(_QWORD *)(a1 + 104) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v12;
  }
  v14 = (_OWORD *)(a1 + 112);
  v15 = (_OWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 176);
  if (v16 == 1)
  {
    v17 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v17;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v18 = *(_OWORD *)(a2 + 128);
    *v14 = *v15;
    *(_OWORD *)(a1 + 128) = v18;
    v19 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v19;
  }
  else
  {
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v20 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v16;
    *(_QWORD *)(a1 + 184) = v20;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_retain();
  }
  v21 = *(_QWORD *)(a2 + 248);
  if (v21 == 1)
  {
    v22 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v22;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  }
  else
  {
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = v21;
    swift_bridgeObjectRetain();
  }
  v23 = *(_QWORD *)(a2 + 288);
  if (v23 == 1)
  {
    v24 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v24;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  }
  else
  {
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    if (v23)
    {
      v25 = *(_QWORD *)(a2 + 264);
      v26 = *(_QWORD *)(a2 + 272);
      v27 = *(_BYTE *)(a2 + 280);
      outlined copy of Text.Storage(v25, v26, v27);
      *(_QWORD *)(a1 + 264) = v25;
      *(_QWORD *)(a1 + 272) = v26;
      *(_BYTE *)(a1 + 280) = v27;
      *(_QWORD *)(a1 + 288) = v23;
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v28;
    }
  }
  v30 = *(void **)(a2 + 296);
  v29 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v30;
  *(_QWORD *)(a1 + 304) = v29;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v52 = a3;
  v31 = a3[21];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v35 = v34;
  v36 = *(_QWORD *)(v34 - 8);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v30;
  swift_retain();
  swift_retain();
  if (v37(v33, 2, v35))
  {
    v39 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v32, v33, v40);
    v32[*(int *)(v35 + 48)] = v33[*(int *)(v35 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v32, 0, 2, v35);
  }
  v41 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v42 = &v32[v41];
  v43 = &v33[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v52[23];
  *(_QWORD *)(a1 + v52[22]) = *(_QWORD *)(a2 + v52[22]);
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  v47 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  if (v49(v46, 1, v47))
  {
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  *(_QWORD *)(a1 + v52[24]) = *(_QWORD *)(a2 + v52[24]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(_BYTE *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(void *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v98;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a2;
  if (v6 >= 2)
  {
    if (v7 >= 2)
    {
      *(_QWORD *)a1 = v7;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v7;
    if (v7 >= 2)
      swift_retain();
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 16);
  outlined copy of Text.Style.TextStyleColor(v8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  outlined consume of Text.Style.TextStyleColor(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 88) - 1;
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) < 2)
  {
    if (v13 >= 2)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v13 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
LABEL_13:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
LABEL_15:
  v14 = *(_QWORD *)(a2 + 104) - 1;
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) < 2)
  {
    if (v14 >= 2)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v14 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
LABEL_22:
  v15 = (__int128 *)(a1 + 112);
  v16 = (__int128 *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176) == 1)
  {
    if (v17 == 1)
    {
      v18 = *v16;
      v19 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v19;
      *v15 = v18;
      v20 = *(_OWORD *)(a2 + 160);
      v21 = *(_OWORD *)(a2 + 176);
      v22 = *(_OWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 192) = v22;
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      v28 = *(_QWORD *)v16;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)v15 = v28;
      v29 = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v29;
      v30 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v30;
      v31 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v31;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v32 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v32;
      v33 = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = v33;
      swift_retain();
    }
  }
  else if (v17 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    v24 = *(_OWORD *)(a2 + 128);
    v23 = *(_OWORD *)(a2 + 144);
    *v15 = *v16;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    v26 = *(_OWORD *)(a2 + 176);
    v25 = *(_OWORD *)(a2 + 192);
    v27 = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 160) = v27;
  }
  else
  {
    v34 = *(_QWORD *)v16;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)v15 = v34;
    v35 = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v35;
    v36 = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v36;
    v37 = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v37;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    swift_retain();
    swift_release();
    v38 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v38;
    v39 = *(_QWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v39;
  }
  v40 = (__int128 *)(a1 + 216);
  v41 = (__int128 *)(a2 + 216);
  v42 = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 248) == 1)
  {
    if (v42 == 1)
    {
      v43 = *v41;
      v44 = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *v40 = v43;
      *(_OWORD *)(a1 + 232) = v44;
    }
    else
    {
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v47 = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = v47;
      *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
    }
  }
  else if (v42 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    v45 = *(_QWORD *)(a2 + 248);
    v46 = *(_OWORD *)(a2 + 232);
    *v40 = *v41;
    *(_OWORD *)(a1 + 232) = v46;
    *(_QWORD *)(a1 + 248) = v45;
  }
  else
  {
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
    v48 = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v48;
    *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v49 = (__int128 *)(a1 + 256);
  v50 = (__int128 *)(a2 + 256);
  v51 = *(_QWORD *)(a1 + 288);
  v52 = *(_QWORD *)(a2 + 288);
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      v53 = *v50;
      v54 = *(_OWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
LABEL_39:
      *v49 = v53;
      v49[1] = v54;
      goto LABEL_50;
    }
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
    if (!*(_QWORD *)(a2 + 288))
    {
      v57 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v57;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v52 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    v55 = *(_QWORD *)(a2 + 288);
    v56 = *(_OWORD *)(a2 + 272);
    *v49 = *v50;
    *(_OWORD *)(a1 + 272) = v56;
    *(_QWORD *)(a1 + 288) = v55;
    goto LABEL_50;
  }
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
  v49 = (__int128 *)(a1 + 264);
  v58 = (__int128 *)(a2 + 264);
  v59 = *(_QWORD *)(a2 + 288);
  if (!v51)
  {
    if (!v59)
    {
      v53 = *v58;
      v54 = *(_OWORD *)(a2 + 280);
      goto LABEL_39;
    }
LABEL_48:
    v66 = *(_QWORD *)(a2 + 264);
    v67 = *(_QWORD *)(a2 + 272);
    v68 = *(_BYTE *)(a2 + 280);
    outlined copy of Text.Storage(v66, v67, v68);
    *(_QWORD *)(a1 + 264) = v66;
    *(_QWORD *)(a1 + 272) = v67;
    *(_BYTE *)(a1 + 280) = v68;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v59)
  {
    v60 = *(_QWORD *)(a2 + 264);
    v61 = *(_QWORD *)(a2 + 272);
    v62 = *(_BYTE *)(a2 + 280);
    outlined copy of Text.Storage(v60, v61, v62);
    v63 = *(_QWORD *)(a1 + 264);
    v64 = *(_QWORD *)(a1 + 272);
    v65 = *(_BYTE *)(a1 + 280);
    *(_QWORD *)(a1 + 264) = v60;
    *(_QWORD *)(a1 + 272) = v61;
    *(_BYTE *)(a1 + 280) = v62;
    outlined consume of Text.Storage(v63, v64, v65);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(a1 + 264);
    v69 = *(_OWORD *)(a2 + 280);
    *v49 = *v58;
    *(_OWORD *)(a1 + 280) = v69;
  }
LABEL_50:
  v70 = *(void **)(a1 + 296);
  v71 = *(void **)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v71;
  v72 = v71;

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
  v73 = a3[21];
  v74 = (_BYTE *)(a1 + v73);
  v75 = (_BYTE *)(a2 + v73);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v77 = v76;
  v78 = *(_QWORD *)(v76 - 8);
  v79 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v78 + 48);
  v80 = v79(v74, 2, v76);
  v81 = v79(v75, 2, v77);
  if (v80)
  {
    if (!v81)
    {
      v82 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v74, v75, v82);
      v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v74, 0, 2, v77);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v81)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_55:
    v83 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_56;
  }
  v98 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v98 - 8) + 24))(v74, v75, v98);
  v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
LABEL_56:
  v84 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v85 = &v74[v84];
  v86 = &v75[v84];
  v87 = v86[8];
  *(_QWORD *)v85 = *(_QWORD *)v86;
  v85[8] = v87;
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = a3[23];
  v89 = (void *)(a1 + v88);
  v90 = (void *)(a2 + v88);
  v91 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 24))(v89, v90, v91);
      goto LABEL_62;
    }
    (*(void (**)(void *, uint64_t))(v92 + 8))(v89, v91);
    goto LABEL_61;
  }
  if (v95)
  {
LABEL_61:
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(void *, void *, uint64_t))(v92 + 16))(v89, v90, v91);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_62:
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  v11 = *(_OWORD *)(a2 + 216);
  v12 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  v14 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v14;
  v15 = *(_OWORD *)(a2 + 304);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v16 = a3[21];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  *(_OWORD *)(a1 + 304) = v15;
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 2, v19))
  {
    v22 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v17, v18, v23);
    v17[*(int *)(v20 + 48)] = v18[*(int *)(v20 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 2, v20);
  }
  v24 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v25 = &v17[v24];
  v26 = &v18[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = a3[23];
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  return a1;
}

uint64_t assignWithTake for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_BYTE *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  _OWORD *v48;
  _OWORD *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  __int128 v55;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 < 2uLL)
    goto LABEL_4;
  if (v6 < 2)
  {
    outlined destroy of Font(a1);
    v6 = *(_QWORD *)a2;
LABEL_4:
    *(_QWORD *)a1 = v6;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v6;
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  outlined consume of Text.Style.TextStyleColor(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = (_OWORD *)(a2 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(a1 + 80) = *v8;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a2 + 88);
  if ((unint64_t)(v9 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 88) = v9;
  swift_release();
LABEL_11:
  v10 = (_OWORD *)(a2 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(a1 + 96) = *v10;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(a2 + 104);
  if ((unint64_t)(v11 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v10;
  *(_QWORD *)(a1 + 104) = v11;
  swift_release();
LABEL_16:
  v12 = (_OWORD *)(a1 + 112);
  v13 = (_OWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 176) == 1)
  {
LABEL_19:
    v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v16 = *(_OWORD *)(a2 + 128);
    *v12 = *v13;
    *(_OWORD *)(a1 + 128) = v16;
    v17 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v17;
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(a2 + 176);
  if (v14 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    goto LABEL_19;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = v14;
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
LABEL_21:
  if (*(_QWORD *)(a1 + 248) == 1)
  {
LABEL_24:
    v19 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v19;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    goto LABEL_26;
  }
  v18 = *(_QWORD *)(a2 + 248);
  if (v18 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v18;
  swift_bridgeObjectRelease();
LABEL_26:
  v20 = *(_QWORD *)(a1 + 288);
  if (v20 == 1)
  {
LABEL_29:
    v22 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v22;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(a2 + 288);
  if (v21 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    goto LABEL_29;
  }
  v48 = (_OWORD *)(a1 + 264);
  v49 = (_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
  if (v20)
  {
    if (v21)
    {
      v50 = *(_BYTE *)(a2 + 280);
      v51 = *(_QWORD *)(a1 + 264);
      v52 = *(_QWORD *)(a1 + 272);
      v53 = *(_BYTE *)(a1 + 280);
      *v48 = *v49;
      *(_BYTE *)(a1 + 280) = v50;
      outlined consume of Text.Storage(v51, v52, v53);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(a1 + 264);
  }
  v55 = *(_OWORD *)(a2 + 280);
  *v48 = *v49;
  *(_OWORD *)(a1 + 280) = v55;
LABEL_30:
  v23 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_release();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_release();
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v24 = a3[21];
  v25 = (_BYTE *)(a1 + v24);
  v26 = (_BYTE *)(a2 + v24);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v28 = v27;
  v29 = *(_QWORD *)(v27 - 8);
  v30 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v25, 2, v27);
  v32 = v30(v26, 2, v28);
  if (v31)
  {
    if (!v32)
    {
      v33 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v25, v26, v33);
      v25[*(int *)(v28 + 48)] = v26[*(int *)(v28 + 48)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v25, 0, 2, v28);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v32)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_35:
    v34 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_36;
  }
  v54 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v25, v26, v54);
  v25[*(int *)(v28 + 48)] = v26[*(int *)(v28 + 48)];
LABEL_36:
  v35 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v36 = &v25[v35];
  v37 = &v26[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  swift_bridgeObjectRelease();
  v38 = a3[23];
  v39 = (void *)(a1 + v38);
  v40 = (void *)(a2 + v38);
  v41 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v42 + 40))(v39, v40, v41);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v42 + 8))(v39, v41);
    goto LABEL_41;
  }
  if (v45)
  {
LABEL_41:
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, void *, uint64_t))(v42 + 32))(v39, v40, v41);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_42:
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Style()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2350853B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for TypesettingConfiguration();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 84);
    }
    else
    {
      type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 92);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Style()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235085474(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for TypesettingConfiguration();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 84);
    }
    else
    {
      type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 92);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for Text.Style()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for TypesettingConfiguration();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t destroy for Text.Style.LineStyle(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_release();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Text.Style.LineStyle(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for Text.Style.LineStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = a1[1];
  v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v4 = a2[1];
  v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_retain();
      swift_release();
      return a1;
    }
    swift_release();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  return a1;
}

_QWORD *assignWithTake for Text.Style.LineStyle(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = a2[1];
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_release();
      return a1;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Style.LineStyle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 1;
  if (v5 >= 3)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Text.Style.LineStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for Text.Style.LineStyle(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *destructiveInjectEnumTag for Text.Style.LineStyle(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Style.LineStyle()
{
  return &type metadata for Text.Style.LineStyle;
}

unint64_t *initializeBufferWithCopyOfBuffer for Text.Style.TextStyleColor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of Text.Style.TextStyleColor(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for Text.Style.TextStyleColor(unint64_t *a1)
{
  return outlined consume of Text.Style.TextStyleColor(*a1);
}

unint64_t *assignWithCopy for Text.Style.TextStyleColor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of Text.Style.TextStyleColor(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of Text.Style.TextStyleColor(v4);
  return a1;
}

unint64_t *assignWithTake for Text.Style.TextStyleColor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of Text.Style.TextStyleColor(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Style.TextStyleColor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Text.Style.TextStyleColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Style.TextStyleColor(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

unint64_t *destructiveInjectEnumTag for Text.Style.TextStyleColor(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Style.TextStyleColor()
{
  return &type metadata for Text.Style.TextStyleColor;
}

unint64_t *assignWithTake for Text.Style.TextStyleFont(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Style.TextStyleFont()
{
  return &type metadata for Text.Style.TextStyleFont;
}

void destroy for Text.ResolvedProperties(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for Text.ResolvedProperties(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(void **)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v6, v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  v13 = *(_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v13;
  v15 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v14;
  *(_QWORD *)(a1 + 128) = v15;
  swift_bridgeObjectRetain();
  v16 = v15;
  return a1;
}

uint64_t assignWithCopy for Text.ResolvedProperties(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  outlined copy of ResolvedTextSuffix(v4, v5, v6, v7, v8, v9);
  v11 = *(void **)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  outlined consume of ResolvedTextSuffix(v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v17 = *(void **)(a1 + 128);
  v18 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  v19 = v18;

  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for Text.ResolvedProperties(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 104);
  v6 = *(void **)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v5;
  outlined consume of ResolvedTextSuffix(v6, v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  v12 = *(void **)(a1 + 128);
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v13;

  return a1;
}

uint64_t getEnumTagSinglePayload for Text.ResolvedProperties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.ResolvedProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties()
{
  return &type metadata for Text.ResolvedProperties;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.CustomAttachments()
{
  return &type metadata for Text.ResolvedProperties.CustomAttachments;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.Features()
{
  return &type metadata for Text.ResolvedProperties.Features;
}

uint64_t destroy for Text.ResolvedProperties.Transition(uint64_t a1)
{
  return outlined consume of ContentTransition.Storage(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(_BYTE *)(a1 + 13));
}

uint64_t initializeBufferWithCopyOfBuffer for Text.ResolvedProperties.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 13) = v7;
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  return a1;
}

uint64_t assignWithCopy for Text.ResolvedProperties.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 12) = v5;
  v10 = *(_BYTE *)(a1 + 13);
  *(_BYTE *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  return a1;
}

_QWORD *__swift_memcpy15_8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *result = v2;
  return result;
}

uint64_t assignWithTake for Text.ResolvedProperties.Transition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 2);
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  v9 = *(_BYTE *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.ResolvedProperties.Transition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 15))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 14);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.ResolvedProperties.Transition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 15) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 15) = 0;
    if (a2)
      *(_BYTE *)(result + 14) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.Transition()
{
  return &type metadata for Text.ResolvedProperties.Transition;
}

_QWORD *initializeBufferWithCopyOfBuffer for Text.ResolvedProperties.Paragraph(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for Text.ResolvedProperties.Paragraph(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a1[1];
  v4 = (void *)a2[1];
  a1[1] = v4;
  v5 = v4;

  return a1;
}

_QWORD *assignWithTake for Text.ResolvedProperties.Paragraph(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;

  v3 = (void *)a1[1];
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;

  return a1;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.Paragraph()
{
  return &type metadata for Text.ResolvedProperties.Paragraph;
}

uint64_t dispatch thunk of static ResolvedTextProvider.defaultLinkColor(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static ResolvedTextProvider.updateImageTextAttachment(in:image:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static ResolvedTextProvider.updateWidgetTextAttachment(_:namedImage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t initializeBufferWithCopyOfBuffer for Text.ResolvedString(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(const void *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int *v57;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= 2uLL)
      v6 = swift_retain();
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v8);
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    v10 = (_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 16) = v8;
    swift_retain();
    if ((unint64_t)(v11 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 80) = *v10;
      *(_QWORD *)(a1 + 88) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v10;
    }
    v13 = (_QWORD *)(a2 + 96);
    v14 = *(_QWORD *)(a2 + 104);
    if ((unint64_t)(v14 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 96) = *v13;
      *(_QWORD *)(a1 + 104) = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
    }
    v15 = (_OWORD *)(a1 + 112);
    v16 = (_OWORD *)(a2 + 112);
    v17 = *(_QWORD *)(a2 + 176);
    if (v17 == 1)
    {
      v18 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v18;
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      v19 = *(_OWORD *)(a2 + 128);
      *v15 = *v16;
      *(_OWORD *)(a1 + 128) = v19;
      v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      v21 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v17;
      *(_QWORD *)(a1 + 184) = v21;
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      swift_retain();
    }
    v22 = *(_QWORD *)(a2 + 248);
    if (v22 == 1)
    {
      v23 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v23;
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    }
    else
    {
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v22;
      swift_bridgeObjectRetain();
    }
    v24 = *(_QWORD *)(a2 + 288);
    if (v24 == 1)
    {
      v25 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v25;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    }
    else
    {
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      if (v24)
      {
        v26 = *(_QWORD *)(a2 + 264);
        v27 = *(_QWORD *)(a2 + 272);
        v28 = *(_BYTE *)(a2 + 280);
        outlined copy of Text.Storage(v26, v27, v28);
        *(_QWORD *)(a1 + 264) = v26;
        *(_QWORD *)(a1 + 272) = v27;
        *(_BYTE *)(a1 + 280) = v28;
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v29;
      }
    }
    v30 = *(void **)(a2 + 296);
    v31 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = v30;
    *(_QWORD *)(a1 + 304) = v31;
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
    v57 = (int *)type metadata accessor for Text.Style(0);
    v32 = v57[21];
    v33 = (char *)(a1 + v32);
    v34 = (char *)(a2 + v32);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    v36 = v35;
    v37 = *(_QWORD *)(v35 - 8);
    v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    v39 = v30;
    swift_retain();
    swift_retain();
    if (v38(v34, 2, v36))
    {
      v40 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v33, v34, v41);
      v33[*(int *)(v36 + 48)] = v34[*(int *)(v36 + 48)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v33, 0, 2, v36);
    }
    v42 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    v43 = &v33[v42];
    v44 = &v34[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    *(_QWORD *)(a1 + v57[22]) = *(_QWORD *)(a2 + v57[22]);
    v45 = v57[23];
    v46 = (void *)(a1 + v45);
    v47 = (const void *)(a2 + v45);
    v48 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v49 + 48);
    swift_bridgeObjectRetain();
    if (v50(v47, 1, v48))
    {
      type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    *(_QWORD *)(a1 + v57[24]) = *(_QWORD *)(a2 + v57[24]);
    v52 = a3[6];
    *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
    v53 = (_QWORD *)(a1 + v52);
    v54 = (_QWORD *)(a2 + v52);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Text.ResolvedString(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)a1 >= 2uLL)
    swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(_QWORD *)(a1 + 16));
  swift_release();
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) >= 2)
    swift_release();
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) >= 2)
    swift_release();
  if (*(_QWORD *)(a1 + 176) != 1)
    swift_release();
  if (*(_QWORD *)(a1 + 248) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_BYTE *)(a1 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  v2 = type metadata accessor for Text.Style(0);
  v3 = a1 + *(int *)(v2 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 2, v4))
  {
    v5 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  }
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(v2 + 92);
  v7 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int *v55;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 2uLL)
    v5 = swift_retain();
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = (_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain();
  if ((unint64_t)(v10 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 80) = *v9;
    *(_QWORD *)(a1 + 88) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v9;
  }
  v11 = (_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  if ((unint64_t)(v12 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 96) = *v11;
    *(_QWORD *)(a1 + 104) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v11;
  }
  v13 = (_OWORD *)(a1 + 112);
  v14 = (_OWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 176);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v16;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v17 = *(_OWORD *)(a2 + 128);
    *v13 = *v14;
    *(_OWORD *)(a1 + 128) = v17;
    v18 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v18;
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v19 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 184) = v19;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_retain();
  }
  v20 = *(_QWORD *)(a2 + 248);
  if (v20 == 1)
  {
    v21 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v21;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  }
  else
  {
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = v20;
    swift_bridgeObjectRetain();
  }
  v22 = *(_QWORD *)(a2 + 288);
  if (v22 == 1)
  {
    v23 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v23;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  }
  else
  {
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    if (v22)
    {
      v24 = *(_QWORD *)(a2 + 264);
      v25 = *(_QWORD *)(a2 + 272);
      v26 = *(_BYTE *)(a2 + 280);
      outlined copy of Text.Storage(v24, v25, v26);
      *(_QWORD *)(a1 + 264) = v24;
      *(_QWORD *)(a1 + 272) = v25;
      *(_BYTE *)(a1 + 280) = v26;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRetain();
    }
    else
    {
      v27 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v27;
    }
  }
  v28 = *(void **)(a2 + 296);
  v29 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v28;
  *(_QWORD *)(a1 + 304) = v29;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v55 = (int *)type metadata accessor for Text.Style(0);
  v30 = v55[21];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v34 = v33;
  v35 = *(_QWORD *)(v33 - 8);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v28;
  swift_retain();
  swift_retain();
  if (v36(v32, 2, v34))
  {
    v38 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v39 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v31, v32, v39);
    v31[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 2, v34);
  }
  v40 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v41 = &v31[v40];
  v42 = &v32[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *(_QWORD *)(a1 + v55[22]) = *(_QWORD *)(a2 + v55[22]);
  v43 = v55[23];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  v46 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  *(_QWORD *)(a1 + v55[24]) = *(_QWORD *)(a2 + v55[24]);
  v50 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v51 = (_QWORD *)(a1 + v50);
  v52 = (_QWORD *)(a2 + v50);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  void *v70;
  void *v71;
  id v72;
  int *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(_BYTE *, uint64_t, uint64_t);
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(void *, uint64_t, uint64_t);
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v102;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a2;
  if (v6 >= 2)
  {
    if (v7 >= 2)
    {
      *(_QWORD *)a1 = v7;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v7;
    if (v7 >= 2)
      swift_retain();
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 16);
  outlined copy of Text.Style.TextStyleColor(v8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  outlined consume of Text.Style.TextStyleColor(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 88) - 1;
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) < 2)
  {
    if (v13 >= 2)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v13 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
LABEL_13:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
LABEL_15:
  v14 = *(_QWORD *)(a2 + 104) - 1;
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) < 2)
  {
    if (v14 >= 2)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v14 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
LABEL_22:
  v15 = (__int128 *)(a1 + 112);
  v16 = (__int128 *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176) == 1)
  {
    if (v17 == 1)
    {
      v18 = *v16;
      v19 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v19;
      *v15 = v18;
      v20 = *(_OWORD *)(a2 + 160);
      v21 = *(_OWORD *)(a2 + 176);
      v22 = *(_OWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 192) = v22;
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      v28 = *(_QWORD *)v16;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)v15 = v28;
      v29 = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v29;
      v30 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v30;
      v31 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v31;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v32 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v32;
      v33 = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = v33;
      swift_retain();
    }
  }
  else if (v17 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    v24 = *(_OWORD *)(a2 + 128);
    v23 = *(_OWORD *)(a2 + 144);
    *v15 = *v16;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    v26 = *(_OWORD *)(a2 + 176);
    v25 = *(_OWORD *)(a2 + 192);
    v27 = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 160) = v27;
  }
  else
  {
    v34 = *(_QWORD *)v16;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)v15 = v34;
    v35 = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v35;
    v36 = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v36;
    v37 = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v37;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    swift_retain();
    swift_release();
    v38 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v38;
    v39 = *(_QWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v39;
  }
  v40 = (__int128 *)(a1 + 216);
  v41 = (__int128 *)(a2 + 216);
  v42 = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 248) == 1)
  {
    if (v42 == 1)
    {
      v43 = *v41;
      v44 = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *v40 = v43;
      *(_OWORD *)(a1 + 232) = v44;
    }
    else
    {
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v47 = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = v47;
      *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
    }
  }
  else if (v42 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    v45 = *(_QWORD *)(a2 + 248);
    v46 = *(_OWORD *)(a2 + 232);
    *v40 = *v41;
    *(_OWORD *)(a1 + 232) = v46;
    *(_QWORD *)(a1 + 248) = v45;
  }
  else
  {
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
    v48 = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v48;
    *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v49 = (__int128 *)(a1 + 256);
  v50 = (__int128 *)(a2 + 256);
  v51 = *(_QWORD *)(a1 + 288);
  v52 = *(_QWORD *)(a2 + 288);
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      v53 = *v50;
      v54 = *(_OWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
LABEL_39:
      *v49 = v53;
      v49[1] = v54;
      goto LABEL_50;
    }
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
    if (!*(_QWORD *)(a2 + 288))
    {
      v57 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v57;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v52 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    v55 = *(_QWORD *)(a2 + 288);
    v56 = *(_OWORD *)(a2 + 272);
    *v49 = *v50;
    *(_OWORD *)(a1 + 272) = v56;
    *(_QWORD *)(a1 + 288) = v55;
    goto LABEL_50;
  }
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
  v49 = (__int128 *)(a1 + 264);
  v58 = (__int128 *)(a2 + 264);
  v59 = *(_QWORD *)(a2 + 288);
  if (!v51)
  {
    if (!v59)
    {
      v53 = *v58;
      v54 = *(_OWORD *)(a2 + 280);
      goto LABEL_39;
    }
LABEL_48:
    v66 = *(_QWORD *)(a2 + 264);
    v67 = *(_QWORD *)(a2 + 272);
    v68 = *(_BYTE *)(a2 + 280);
    outlined copy of Text.Storage(v66, v67, v68);
    *(_QWORD *)(a1 + 264) = v66;
    *(_QWORD *)(a1 + 272) = v67;
    *(_BYTE *)(a1 + 280) = v68;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v59)
  {
    v60 = *(_QWORD *)(a2 + 264);
    v61 = *(_QWORD *)(a2 + 272);
    v62 = *(_BYTE *)(a2 + 280);
    outlined copy of Text.Storage(v60, v61, v62);
    v63 = *(_QWORD *)(a1 + 264);
    v64 = *(_QWORD *)(a1 + 272);
    v65 = *(_BYTE *)(a1 + 280);
    *(_QWORD *)(a1 + 264) = v60;
    *(_QWORD *)(a1 + 272) = v61;
    *(_BYTE *)(a1 + 280) = v62;
    outlined consume of Text.Storage(v63, v64, v65);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(a1 + 264);
    v69 = *(_OWORD *)(a2 + 280);
    *v49 = *v58;
    *(_OWORD *)(a1 + 280) = v69;
  }
LABEL_50:
  v70 = *(void **)(a1 + 296);
  v71 = *(void **)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v71;
  v72 = v71;

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
  v73 = (int *)type metadata accessor for Text.Style(0);
  v74 = v73[21];
  v75 = (_BYTE *)(a1 + v74);
  v76 = (_BYTE *)(a2 + v74);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v78 = v77;
  v79 = *(_QWORD *)(v77 - 8);
  v80 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48);
  v81 = v80(v75, 2, v77);
  v82 = v80(v76, 2, v78);
  if (v81)
  {
    if (!v82)
    {
      v83 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v75, v76, v83);
      v75[*(int *)(v78 + 48)] = v76[*(int *)(v78 + 48)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v75, 0, 2, v78);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v82)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_55:
    v84 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_56;
  }
  v102 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v102 - 8) + 24))(v75, v76, v102);
  v75[*(int *)(v78 + 48)] = v76[*(int *)(v78 + 48)];
LABEL_56:
  v85 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v86 = &v75[v85];
  v87 = &v76[v85];
  v88 = v87[8];
  *(_QWORD *)v86 = *(_QWORD *)v87;
  v86[8] = v88;
  *(_QWORD *)(a1 + v73[22]) = *(_QWORD *)(a2 + v73[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89 = v73[23];
  v90 = (void *)(a1 + v89);
  v91 = (void *)(a2 + v89);
  v92 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v93 = *(_QWORD *)(v92 - 8);
  v94 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v93 + 48);
  v95 = v94(v90, 1, v92);
  v96 = v94(v91, 1, v92);
  if (!v95)
  {
    if (!v96)
    {
      (*(void (**)(void *, void *, uint64_t))(v93 + 24))(v90, v91, v92);
      goto LABEL_62;
    }
    (*(void (**)(void *, uint64_t))(v93 + 8))(v90, v92);
    goto LABEL_61;
  }
  if (v96)
  {
LABEL_61:
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(void *, void *, uint64_t))(v93 + 16))(v90, v91, v92);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
LABEL_62:
  *(_QWORD *)(a1 + v73[24]) = *(_QWORD *)(a2 + v73[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v98 = a3[6];
  v99 = (_QWORD *)(a1 + v98);
  v100 = (_QWORD *)(a2 + v98);
  *v99 = *v100;
  v99[1] = v100[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  v11 = *(_OWORD *)(a2 + 216);
  v12 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  v14 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v14;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v15 = (int *)type metadata accessor for Text.Style(0);
  v16 = v15[21];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 2, v19))
  {
    v22 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v17, v18, v23);
    v17[*(int *)(v20 + 48)] = v18[*(int *)(v20 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 2, v20);
  }
  v24 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v25 = &v17[v24];
  v26 = &v18[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)(a1 + v15[22]) = *(_QWORD *)(a2 + v15[22]);
  v27 = v15[23];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  *(_QWORD *)(a1 + v15[24]) = *(_QWORD *)(a2 + v15[24]);
  v33 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  int *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_BYTE *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v54;
  _OWORD *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  __int128 v61;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 < 2uLL)
    goto LABEL_4;
  if (v6 < 2)
  {
    outlined destroy of Font(a1);
    v6 = *(_QWORD *)a2;
LABEL_4:
    *(_QWORD *)a1 = v6;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v6;
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  outlined consume of Text.Style.TextStyleColor(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = (_OWORD *)(a2 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(a1 + 80) = *v8;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a2 + 88);
  if ((unint64_t)(v9 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 88) = v9;
  swift_release();
LABEL_11:
  v10 = (_OWORD *)(a2 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(a1 + 96) = *v10;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(a2 + 104);
  if ((unint64_t)(v11 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v10;
  *(_QWORD *)(a1 + 104) = v11;
  swift_release();
LABEL_16:
  v12 = (_OWORD *)(a1 + 112);
  v13 = (_OWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 176) == 1)
  {
LABEL_19:
    v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v16 = *(_OWORD *)(a2 + 128);
    *v12 = *v13;
    *(_OWORD *)(a1 + 128) = v16;
    v17 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v17;
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(a2 + 176);
  if (v14 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    goto LABEL_19;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = v14;
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
LABEL_21:
  if (*(_QWORD *)(a1 + 248) == 1)
  {
LABEL_24:
    v19 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v19;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    goto LABEL_26;
  }
  v18 = *(_QWORD *)(a2 + 248);
  if (v18 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v18;
  swift_bridgeObjectRelease();
LABEL_26:
  v20 = *(_QWORD *)(a1 + 288);
  if (v20 == 1)
  {
LABEL_29:
    v22 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v22;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(a2 + 288);
  if (v21 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    goto LABEL_29;
  }
  v54 = (_OWORD *)(a1 + 264);
  v55 = (_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
  if (v20)
  {
    if (v21)
    {
      v56 = *(_BYTE *)(a2 + 280);
      v57 = *(_QWORD *)(a1 + 264);
      v58 = *(_QWORD *)(a1 + 272);
      v59 = *(_BYTE *)(a1 + 280);
      *v54 = *v55;
      *(_BYTE *)(a1 + 280) = v56;
      outlined consume of Text.Storage(v57, v58, v59);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(a1 + 264);
  }
  v61 = *(_OWORD *)(a2 + 280);
  *v54 = *v55;
  *(_OWORD *)(a1 + 280) = v61;
LABEL_30:
  v23 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_release();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_release();
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  v24 = (int *)type metadata accessor for Text.Style(0);
  v25 = v24[21];
  v26 = (_BYTE *)(a1 + v25);
  v27 = (_BYTE *)(a2 + v25);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v29 = v28;
  v30 = *(_QWORD *)(v28 - 8);
  v31 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v26, 2, v28);
  v33 = v31(v27, 2, v29);
  if (v32)
  {
    if (!v33)
    {
      v34 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v26, v27, v34);
      v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 2, v29);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v33)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_35:
    v35 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_36;
  }
  v60 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 40))(v26, v27, v60);
  v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
LABEL_36:
  v36 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v37 = &v26[v36];
  v38 = &v27[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)(a1 + v24[22]) = *(_QWORD *)(a2 + v24[22]);
  swift_bridgeObjectRelease();
  v39 = v24[23];
  v40 = (void *)(a1 + v39);
  v41 = (void *)(a2 + v39);
  v42 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 40))(v40, v41, v42);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
    goto LABEL_41;
  }
  if (v46)
  {
LABEL_41:
    type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, void *, uint64_t))(v43 + 32))(v40, v41, v42);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_42:
  *(_QWORD *)(a1 + v24[24]) = *(_QWORD *)(a2 + v24[24]);
  swift_bridgeObjectRelease();
  v48 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v49 = (_QWORD *)(a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.ResolvedString()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235087CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Text.Style(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.ResolvedString()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235087D30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Text.Style(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for Text.ResolvedString()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of AttributedString?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributedString?, (void (*)(uint64_t))MEMORY[0x24BDCC5A8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #1 in Text.ResolvedString.append<A>(resolvable:in:with:transition:)()
{
  return implicit closure #1 in Text.Resolved.append<A>(resolvable:in:with:transition:)();
}

ValueMetadata *type metadata accessor for EnvironmentValues.DisableLinkColorKey()
{
  return &type metadata for EnvironmentValues.DisableLinkColorKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ResolvedTextProviderKey()
{
  return &type metadata for EnvironmentValues.ResolvedTextProviderKey;
}

uint64_t ResolvableTimer.init(interval:pause:countdown:units:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v38 = a4;
  v39 = a6;
  v40 = a5;
  v37 = a3;
  v36 = a2;
  v11 = type metadata accessor for TimeZone();
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v44 = (uint64_t)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale();
  v41 = *(_QWORD *)(v13 - 8);
  v42 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Calendar();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a7;
  v20 = a7[1];
  v22 = (int *)type metadata accessor for ResolvableTimer();
  v23 = a8 + v22[5];
  v24 = type metadata accessor for DateInterval();
  v43 = *(_QWORD *)(v24 - 8);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
  v45 = a1;
  v26 = a1;
  v27 = v24;
  v25(a8, v26, v24);
  *(_QWORD *)v23 = v36;
  v28 = v38;
  *(_BYTE *)(v23 + 8) = v37 & 1;
  *(_BYTE *)(a8 + v22[6]) = v28;
  v29 = 224;
  if ((v39 & 1) == 0)
    v29 = v40;
  *(_QWORD *)(a8 + v22[7]) = v29;
  if (v20)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v21, (uint64_t)v19);
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a8 + v22[8], v19, v16);
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v21, (uint64_t)v15);
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(a8 + v22[9], v15, v42);
    swift_retain_n();
    swift_retain_n();
    v30 = v44;
    specialized PropertyList.Tracker.value<A>(_:for:)(v21, v44);
    swift_release_n();
  }
  else
  {
    v31 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v31, (uint64_t)v19);
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a8 + v22[8], v19, v16);
    v32 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v32, (uint64_t)v15);
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(a8 + v22[9], v15, v42);
    v33 = swift_retain_n();
    v30 = v44;
    specialized closure #1 in PropertyList.subscript.getter(v33, v44);
    swift_release();
  }
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v27);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(a8 + v22[10], v30, v47);
}

uint64_t type metadata accessor for ResolvableTimer()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvableTimer;
  if (!type metadata singleton initialization cache for ResolvableTimer)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ResolvableTimer.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ResolvableTimer();
  if ((*(_BYTE *)(v1 + *(int *)(v7 + 20) + 8) & 1) != 0)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    if (*(_BYTE *)(v1 + *(int *)(v7 + 24)) == 1)
    {
      DateInterval.end.getter();
      static Date.- infix(_:_:)();
    }
    else
    {
      DateInterval.start.getter();
      static Date.+ infix(_:_:)();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
  }
}

uint64_t ResolvableTimer.format.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  void (*v41)(char *, uint64_t);
  char *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  unint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v91 = a1;
  v2 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x24BDAC7A8](v2);
  v89 = (uint64_t)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v90 = (uint64_t)&v81 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v88 = (char *)&v81 - v7;
  type metadata accessor for (lower: Date, upper: Date)();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v81 - v13;
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v81 - v20;
  type metadata accessor for Range<Date>();
  v92 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v83 = (uint64_t)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v84 = (uint64_t)&v81 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v81 = (uint64_t)&v81 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v82 = (uint64_t)&v81 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v81 - v31;
  MEMORY[0x24BDAC7A8](v33);
  v94 = (uint64_t)&v81 - v34;
  DateInterval.start.getter();
  v93 = v1;
  DateInterval.end.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v85 = (int *)v2;
    v36 = &v14[*(int *)(v9 + 48)];
    v37 = v16;
    v38 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v38(v14, v21, v15);
    v38(v36, v18, v15);
    v39 = &v11[*(int *)(v9 + 48)];
    v40 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v40(v11, v14, v15);
    v87 = v40;
    v40(v39, v36, v15);
    v38(v32, v11, v15);
    v41 = *(void (**)(char *, uint64_t))(v37 + 8);
    v41(v39, v15);
    v42 = &v11[*(int *)(v9 + 48)];
    v38(v11, v14, v15);
    v38(v42, v36, v15);
    v38(&v32[*(int *)(v92 + 36)], v42, v15);
    v41(v11, v15);
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v32, v94, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v43 = (int *)type metadata accessor for ResolvableTimer();
    v44 = v43[6];
    v45 = *(_QWORD *)(v93 + v43[7]);
    v86 = v45 & 0x20;
    v46 = 1000000000000000000;
    if ((v45 & 0x80) == 0)
      v46 = 0x40AAD21B3B700000;
    if ((v45 & 0x8000) != 0)
      v47 = 10000000000000000;
    else
      v47 = v46;
    if ((v45 & 0x8080) != 0)
      v48 = 0;
    else
      v48 = 3;
    if (*(_BYTE *)(v93 + v44) == 1)
    {
      v49 = v82;
      outlined init with copy of TypesettingLanguage(v94, v82, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      v50 = v81;
      outlined init with copy of TypesettingLanguage(v49, v81, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      v51 = v85;
      v52 = v88;
      *(_QWORD *)&v88[v85[11]] = 0;
      v53 = static Locale.autoupdatingCurrent.getter();
      v52[v51[13]] = 1;
      v52[v51[14]] = 0;
      MEMORY[0x23B7C4858](v53);
      v52[v51[16]] = 3;
      *(_QWORD *)&v52[v51[17]] = 0;
      *(_QWORD *)&v52[v51[18]] = 0;
      *(_QWORD *)&v52[v51[19]] = 0;
      v54 = 195;
      v55 = static Duration.< infix(_:_:)();
      if ((v55 & 1) != 0)
        v56 = 0x28093E61EE400000;
      else
        v56 = v47;
      if ((v55 & 1) == 0)
        v54 = v48;
      *v52 = 1;
      v87(&v52[v51[5]], (char *)v50, v15);
      Date.timeIntervalSince(_:)();
      v57 = static Duration.seconds(_:)();
      v59 = v58;
      outlined destroy of TypesettingConfiguration(v50, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      v60 = (uint64_t *)&v52[v51[6]];
      *v60 = v57;
      v60[1] = v59;
      v52[v51[7]] = v86 >> 5;
      *(_QWORD *)&v52[v51[8]] = 3;
      v61 = (uint64_t *)&v52[v51[9]];
      *v61 = v56;
      v61[1] = v54;
      v62 = (uint64_t *)&v52[v51[10]];
      *v62 = v56;
      v62[1] = v54;
      outlined destroy of TypesettingConfiguration(v49, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    }
    else
    {
      v63 = v84;
      outlined init with copy of TypesettingLanguage(v94, v84, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      v64 = v83;
      outlined init with copy of TypesettingLanguage(v63, v83, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      v51 = v85;
      v52 = v88;
      *(_QWORD *)&v88[v85[11]] = 0;
      v65 = static Locale.autoupdatingCurrent.getter();
      v52[v51[13]] = 1;
      v82 = v51[14];
      v52[v82] = 0;
      MEMORY[0x23B7C4858](v65);
      v52[v51[16]] = 3;
      *(_QWORD *)&v52[v51[17]] = 0;
      *(_QWORD *)&v52[v51[18]] = 0;
      *(_QWORD *)&v52[v51[19]] = 0;
      v66 = 195;
      v67 = static Duration.< infix(_:_:)();
      if ((v67 & 1) != 0)
        v68 = 0x28093E61EE400000;
      else
        v68 = v47;
      if ((v67 & 1) == 0)
        v66 = v48;
      *v52 = 0;
      v87(&v52[v51[5]], (char *)v64, v15);
      Date.timeIntervalSince(_:)();
      v69 = static Duration.seconds(_:)();
      v71 = v70;
      outlined destroy of TypesettingConfiguration(v64, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      v72 = (uint64_t *)&v52[v51[6]];
      *v72 = v69;
      v72[1] = v71;
      v52[v51[7]] = v86 >> 5;
      *(_QWORD *)&v52[v51[8]] = 3;
      v73 = (uint64_t *)&v52[v51[9]];
      *v73 = v68;
      v73[1] = v66;
      v74 = (uint64_t *)&v52[v51[10]];
      *v74 = v68;
      v74[1] = v66;
      outlined destroy of TypesettingConfiguration(v63, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      *v52 = 2;
      v52[v82] = 1;
    }
    v75 = v93 + v43[9];
    v76 = v89;
    outlined init with copy of TypesettingLanguage((uint64_t)v52, v89, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    v77 = v76 + v51[12];
    v78 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 24))(v77, v75, v78);
    v79 = v90;
    outlined init with take of LocalizedStringKey.FormatArgument(v76, v90, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    outlined destroy of TypesettingConfiguration((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    outlined destroy of TypesettingConfiguration(v94, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v80 = v91;
    outlined init with copy of TypesettingLanguage(v79, v91, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    *(_BYTE *)(v80 + v51[13]) = 1;
    return outlined destroy of TypesettingConfiguration(v79, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ResolvableTimer.defaultUnits.getter()
{
  return 224;
}

uint64_t ResolvableTimer.interval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ResolvableTimer.interval.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ResolvableTimer.interval.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableTimer.pause.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ResolvableTimer() + 20));
}

uint64_t ResolvableTimer.pause.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ResolvableTimer();
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ResolvableTimer.pause.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ResolvableTimer();
  return _ViewInputs.base.modify;
}

uint64_t ResolvableTimer.countdown.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ResolvableTimer() + 24));
}

uint64_t ResolvableTimer.countdown.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ResolvableTimer();
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*ResolvableTimer.countdown.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ResolvableTimer();
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of ResolvableTimer.units@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ResolvableTimer.units.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ResolvableTimer() + 28));
}

uint64_t ResolvableTimer.units.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ResolvableTimer();
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*ResolvableTimer.units.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ResolvableTimer();
  return _ViewInputs.base.modify;
}

uint64_t ResolvableTimer.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableTimer() + 32);
  v4 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableTimer.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableTimer() + 36);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableTimer.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableTimer() + 40);
  v4 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableTimer.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_235088E3C + 4 * byte_2352C2EF8[*v0]))(0x6C61767265746E69, 0xE800000000000000);
}

uint64_t sub_235088E3C()
{
  return 0x6573756170;
}

uint64_t sub_235088E50()
{
  return 0x776F64746E756F63;
}

uint64_t sub_235088E6C()
{
  return 0x7374696E75;
}

uint64_t sub_235088E80()
{
  return 0x7261646E656C6163;
}

uint64_t sub_235088E94()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_235088EA8()
{
  return 0x656E6F5A656D6974;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableTimer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableTimer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableTimer.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableTimer.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id static ResolvableTimer.attribute.getter()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableTimer.attribute;
}

uint64_t static ResolvableTimer.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  _QWORD v31[5];

  v29 = a2;
  v3 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - v14;
  v16 = type metadata accessor for ResolvableTimer();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v31);
  v19 = (uint64_t)v30;
  result = ResolvableTimer.init(from:)(v31, (uint64_t)v18);
  if (!v19)
  {
    v30 = v15;
    v21 = (uint64_t)v5;
    if ((v18[*(int *)(v16 + 20) + 8] & 1) != 0)
    {
      type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
      v23 = v29;
    }
    else
    {
      v23 = v29;
      if ((v18[*(int *)(v16 + 24)] & 1) != 0)
      {
        DateInterval.end.getter();
        static Date.- infix(_:_:)();
      }
      else
      {
        DateInterval.start.getter();
        static Date.+ infix(_:_:)();
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v12, 0, 1, v24);
    }
    v25 = (uint64_t)v30;
    outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v12, (uint64_t)v30);
    ResolvableTimer.format.getter(v21);
    v26 = (int *)type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>();
    v23[3] = (uint64_t)v26;
    v23[4] = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance TimeDataFormatting.Resolvable<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t)&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    specialized static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)((uint64_t)boxed_opaque_existential_1 + v26[17], v25, 60.0, v21, 0);
    outlined init with copy of TimeDataSource<Date><A>.DateStorage(v25, (uint64_t)boxed_opaque_existential_1);
    outlined init with copy of TypesettingLanguage(v21, (uint64_t)boxed_opaque_existential_1 + v26[15], (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    *(uint64_t *)((char *)boxed_opaque_existential_1 + v26[16]) = 0x404E000000000000;
    *(uint64_t *)((char *)boxed_opaque_existential_1 + v26[18]) = 0;
    outlined destroy of TypesettingConfiguration(v21, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    outlined destroy of TimeDataSource<Date><A>.DateStorage(v25);
    return outlined destroy of TypesettingConfiguration((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTimer);
  }
  return result;
}

uint64_t ResolvableTimer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  int *v24;
  char *v25;
  uint64_t v26;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v30 = a2;
  v31 = type metadata accessor for TimeZone();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v32 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Locale();
  v33 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v34 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Calendar();
  v35 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateInterval();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v41 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<ResolvableTimer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableTimer.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v43 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - v10;
  v12 = type metadata accessor for ResolvableTimer();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v14[*(int *)(v15 + 20)];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
  v42 = v11;
  v17 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v18 = v9;
  v28 = (int *)v12;
  v19 = (uint64_t)v14;
  v20 = v40;
  v52 = 0;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB8A8]);
  v21 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v19, v41, v21);
  v51 = 1;
  *(_QWORD *)v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v16[8] = v22 & 1;
  v50 = 2;
  v23 = KeyedDecodingContainer.decode(_:forKey:)();
  v24 = v28;
  *(_BYTE *)(v19 + v28[6]) = v23 & 1;
  type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
  v49 = 3;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>, (uint64_t)&protocol conformance descriptor for CodableRawRepresentable<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_QWORD *)(v19 + v24[7]) = v45;
  v48 = 4;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
  v25 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v19 + v24[8], v25, v37);
  v47 = 5;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v19 + v24[9], v34, v20);
  v46 = 6;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
  v26 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v42, v43);
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v19 + v28[10], v32, v26);
  outlined init with copy of TypesettingLanguage(v19, v30, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTimer);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of TypesettingConfiguration(v19, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTimer);
}

uint64_t ResolvableTimer.invalidationConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  v4 = *(int *)(v3 + 48);
  v5 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v1, v5);
  *(_BYTE *)(a1 + v4) = *(_BYTE *)(v1 + *(int *)(type metadata accessor for ResolvableTimer() + 24));
  type metadata accessor for ResolvableAttributeConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ResolvableTimer.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v3 = v1;
  type metadata accessor for KeyedDecodingContainer<ResolvableTimer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableTimer.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  type metadata accessor for DateInterval();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB888]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = type metadata accessor for ResolvableTimer();
    v15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = *(_QWORD *)(v3 + *(int *)(v10 + 28));
    v12[15] = 3;
    type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>, (uint64_t)")\x1B=\x1Bе\v");
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[14] = 4;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[13] = 5;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[12] = 6;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter in conformance ResolvableTimer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  v6 = *(int *)(v5 + 48);
  v7 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v2, v7);
  *(_BYTE *)(a2 + v6) = *(_BYTE *)(v2 + *(int *)(a1 + 24));
  type metadata accessor for ResolvableAttributeConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableTimer()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableTimer.attribute;
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableTimer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static ResolvableTimer.decode(from:)(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableTimer@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableTimer.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableTimer(_QWORD *a1)
{
  return ResolvableTimer.encode(to:)(a1);
}

uint64_t ResolvableTimer.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;

  _StringGuts.grow(_:)(82);
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  v1._object = (void *)0x80000002352E6C70;
  String.append(_:)(v1);
  type metadata accessor for DateInterval();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB8B8]);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x756170202020202CLL;
  v3._object = (void *)0xEC000000203A6573;
  String.append(_:)(v3);
  v4 = type metadata accessor for ResolvableTimer();
  if ((*(_BYTE *)(v0 + *(int *)(v4 + 20) + 8) & 1) != 0)
  {
    v5 = 0xA300000000000000;
    v6 = 9666786;
  }
  else
  {
    v6 = Double.debugDescription.getter();
    v5 = v7;
  }
  v8 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000002352E6C90;
  v9._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v9);
  if (*(_BYTE *)(v0 + *(int *)(v4 + 24)))
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v4 + 24)))
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6E7520202020202CLL;
  v13._object = (void *)0xED0000203A737469;
  String.append(_:)(v13);
  type metadata accessor for NSCalendarUnit(0);
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 8745;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  return 0;
}

uint64_t type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>;
  if (!lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    type metadata accessor for SystemFormatStyle.Timer();
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  return result;
}

uint64_t outlined destroy of TimeDataSource<Date><A>.DateStorage(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTimer.CodingKeys, &unk_25061F000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTimer.CodingKeys, &unk_25061F000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTimer.CodingKeys, &unk_25061F000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTimer.CodingKeys, &unk_25061F000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<ResolvableTimer.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
    v7 = a3(a1, &unk_25061F000, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t specialized static ResolvableTimer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  double *v7;
  char v8;
  double *v9;
  int v10;

  if ((static DateInterval.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for ResolvableTimer();
  v5 = v4;
  v6 = v4[5];
  v7 = (double *)(a1 + v6);
  v8 = *(_BYTE *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = *(unsigned __int8 *)(a2 + v6 + 8);
  if ((v8 & 1) != 0)
  {
    if (!v10)
      return 0;
    goto LABEL_8;
  }
  if (*v7 != *v9)
    LOBYTE(v10) = 1;
  if ((v10 & 1) == 0)
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6])
      && *(_QWORD *)(a1 + v4[7]) == *(_QWORD *)(a2 + v4[7])
      && (MEMORY[0x23B7C5374](a1 + v4[8], a2 + v4[8]) & 1) != 0
      && (MEMORY[0x23B7C526C](a1 + v5[9], a2 + v5[9]) & 1) != 0)
    {
      JUMPOUT(0x23B7C5488);
    }
  }
  return 0;
}

uint64_t instantiation function for generic protocol witness table for ResolvableTimer(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTimer and conformance ResolvableTimer, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableTimer, (uint64_t)&protocol conformance descriptor for ResolvableTimer);
  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTimer and conformance ResolvableTimer, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableTimer, (uint64_t)&protocol conformance descriptor for ResolvableTimer);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableTimer()
{
  return &protocol witness table for ResolvableTimer;
}

uint64_t sub_23508A1E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for ResolvableTimer();
  *a2 = *(_QWORD *)(a1 + *(int *)(result + 28));
  return result;
}

uint64_t sub_23508A218(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for ResolvableTimer();
  *(_QWORD *)(a2 + *(int *)(result + 28)) = v3;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvableTimer(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DateInterval();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v12 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[9];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[10];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for ResolvableTimer(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[8];
  v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[9];
  v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[10];
  v10 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableTimer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23508A85C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + a3[6]);
    if (v9 >= 2)
      return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Calendar();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[8];
    }
    else
    {
      v14 = type metadata accessor for Locale();
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[9];
      }
      else
      {
        v12 = type metadata accessor for TimeZone();
        v11 = *(_QWORD *)(v12 - 8);
        v13 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvableTimer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23508A964(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for DateInterval();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + a4[6]) = a2 + 1;
      return result;
    }
    v13 = type metadata accessor for Calendar();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[8];
    }
    else
    {
      v16 = type metadata accessor for Locale();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[9];
      }
      else
      {
        v10 = type metadata accessor for TimeZone();
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[10];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for ResolvableTimer()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ResolvableTimer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23508AB74 + 4 * byte_2352C2F04[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23508ABA8 + 4 * byte_2352C2EFF[v4]))();
}

uint64_t sub_23508ABA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23508ABB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23508ABB8);
  return result;
}

uint64_t sub_23508ABC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23508ABCCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23508ABD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23508ABD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableTimer.CodingKeys()
{
  return &unk_25061F000;
}

uint64_t specialized ResolvableTimer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6573756170 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7374696E75 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void Text.init<A, B>(source:format:reducedLuminanceBudget:)()
{
  type metadata accessor for TimeDataFormattingStorage();
}

uint64_t *sub_23508AFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  swift_allocObject();
  return TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)(v2, v1, v0, v3);
}

uint64_t TimeDataSourceStorage.withValue(for:call:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, double);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *);
  uint64_t v33;

  v31 = a3;
  v32 = a2;
  v33 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v13 = (char *)&v28 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v28 - v20;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(a5 + 40);
  v30 = v6;
  v22(a1, a4, a5, v19);
  v32(v17);
  v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v17, AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
    v24 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v33, 1, 1, v24);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v13, AssociatedTypeWitness);
    v26 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(a5 + 48))(v21, a4, a5);
    v23(v21, AssociatedTypeWitness);
    v27 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  }
}

void TimeDataSource.BoxBase.textStorage<A>(for:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t TimeDataSourceStorage.end.getter@<X0>(uint64_t a1@<X8>)
{
  return TimeDataSourceStorage.end.getter(a1);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

void TimeDataSource<A>.DateBox.textStorage<A>(for:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v1);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage((unint64_t *)&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage);
  type metadata accessor for TimeDataFormattingStorage();
}

uint64_t sub_23508B3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1 + direct field offset for TimeDataSource<A>.DateBox.storage, v3, v5, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v0, *(_QWORD *)(v7 - 128), v4);
  v8 = swift_allocObject();
  v9 = *(_QWORD *)v8;
  v10 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 192);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 136) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 176), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 144) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 184), v0);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return v8;
}

uint64_t *TimeDataFormattingStorage.__allocating_init(source:format:reducedLuminanceBudget:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7;

  v7 = a4 & 1;
  swift_allocObject();
  return TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)(a1, a2, a3, v7);
}

uint64_t TimeDataSource<A>.DateBox.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of (pauseDate: Date)(v0 + direct field offset for TimeDataSource<A>.DateBox.storage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
}

uint64_t TimeDataSource<A>.DateBox.__deallocating_deinit()
{
  return TimeDataSource<A>.DateBox.__deallocating_deinit(&direct field offset for TimeDataSource<A>.DateBox.storage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
}

uint64_t TimeDataSource<A>.DateStorage.value(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v3 = v2;
  v6 = type metadata accessor for Date();
  v7 = MEMORY[0x24BDCE900];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - v12;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)&v18 - v12, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 16))(a2, a1, v6);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v6);
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE948]);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    v16 = a2;
    v17 = a1;
  }
  else
  {
    v16 = a2;
    v17 = v10;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v16, v17, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v6);
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateStorage);
}

uint64_t TimeDataSource<A>.DateStorage.date(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v3 = v2;
  v6 = type metadata accessor for Date();
  v7 = MEMORY[0x24BDCE900];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - v12;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)&v18 - v12, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 16))(a2, a1, v6);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v6);
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE948]);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    v16 = a2;
    v17 = a1;
  }
  else
  {
    v16 = a2;
    v17 = v10;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v16, v17, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v6);
}

uint64_t TimeDataSource<A>.DateStorage.round(_:_:toMultipleOf:)(double a1, uint64_t a2, uint64_t a3)
{
  Date.timeIntervalSinceReferenceDate.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a3, a1);
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t TimeDataSource<A>.DateStorage.convergesToZero(_:)()
{
  return 0;
}

uint64_t TimeDataSource<A>.DateStorage.end.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - v5;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v2, (uint64_t)&v13 - v5, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v8 = 1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  if (v9 != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v6, v10);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, v8, 1, v10);
}

void TimeDataSource<A>.DateStorage.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for Date();
  v2 = MEMORY[0x24BDCE900];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - v7;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v10 - v7, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  }
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date();
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x797469746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DateStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TimeDataSource<A>.DateStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return 0x7461446573756170;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7461446573756170 && a2 == 0xE900000000000065)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t TimeDataSource<A>.DateStorage.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;

  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>();
  v30 = v2;
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>();
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v23 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - v8;
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>();
  v33 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v31, (uint64_t)v9, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    v34 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
    v15 = v23;
    v16 = v33;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v16);
  }
  else
  {
    v31 = v11;
    v18 = v26;
    v19 = v29;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v32, v9, v29);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    v35 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
    v20 = v27;
    v21 = v33;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE920]);
    v22 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v22);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v32, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v13, v21);
  }
}

Swift::Int TimeDataSource<A>.DateStorage.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = MEMORY[0x24BDCE900];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - v8;
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v9, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  }
  return Hasher._finalize()();
}

uint64_t TimeDataSource<A>.DateStorage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  char v48;
  char v49;

  v41 = a2;
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>();
  v4 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  v39 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v46 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>();
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>();
  v45 = v8;
  v42 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  v43 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v34 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
  v16 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
    goto LABEL_7;
  v18 = v43;
  v17 = v44;
  v35 = v15;
  v47 = a1;
  v20 = v45;
  v19 = v46;
  v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v21 + 16) != 1)
  {
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v24 = v18;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v20);
    a1 = v47;
LABEL_7:
    v27 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  if ((*(_BYTE *)(v21 + 32) & 1) != 0)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    v49 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE960]);
    v25 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v26 = v42;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v20);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    v31 = v40;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v40, 0, 1, v30);
    v32 = (uint64_t)v31;
    v33 = (uint64_t)v35;
    outlined init with take of TimeDataSource<Date><A>.DateStorage(v32, (uint64_t)v35, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  }
  else
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    v48 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v20);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    v33 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  }
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v33, v41, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  v27 = (uint64_t)v47;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t protocol witness for TimeDataSourceStorage.round(_:_:toMultipleOf:) in conformance TimeDataSource<A><A>.DateStorage(double a1, uint64_t a2, uint64_t a3)
{
  Date.timeIntervalSinceReferenceDate.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a3, a1);
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t protocol witness for TimeDataSourceStorage.end.getter in conformance TimeDataSource<A><A>.DateStorage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v5, (uint64_t)v4, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v7 = 1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  if (v8 != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v4, v9);
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, v7, 1, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataSource<A><A>.DateStorage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataSource<A>.DateStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataSource<A><A>.DateStorage(_QWORD *a1)
{
  return TimeDataSource<A>.DateStorage.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance TimeDataSource<A><A>.DateStorage()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for Date();
  v2 = MEMORY[0x24BDCE900];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)v8, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataSource<A><A>.DateStorage()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = MEMORY[0x24BDCE900];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v9, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  }
  return Hasher._finalize()();
}

void TimeDataSource<A>.DurationBox.textStorage<A>(for:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v1);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage);
  type metadata accessor for TimeDataFormattingStorage();
}

uint64_t sub_23508CE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1 + direct field offset for TimeDataSource<A>.DurationBox.storage, v3, v5, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v0, *(_QWORD *)(v7 - 128), v4);
  v8 = swift_allocObject();
  v9 = *(_QWORD *)v8;
  v10 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 192);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 136) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 176), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 144) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 184), v0);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return v8;
}

uint64_t TimeDataSource<A>.DurationBox.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of (pauseDate: Date)(v0 + direct field offset for TimeDataSource<A>.DurationBox.storage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
}

uint64_t TimeDataSource<A>.DurationBox.__deallocating_deinit()
{
  return TimeDataSource<A>.DateBox.__deallocating_deinit(&direct field offset for TimeDataSource<A>.DurationBox.storage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
}

uint64_t TimeDataSource<A>.DurationStorage.value(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - v6;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v10 - v6, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Date.timeIntervalSince(_:)();
  v8 = static Duration.seconds(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t TimeDataSource<A>.DurationStorage.date(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - v6;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v9 - v6, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t TimeDataSource<A>.DurationStorage.round(_:_:toMultipleOf:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Duration.components.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a4, a1);
  return static Duration.seconds(_:)();
}

uint64_t TimeDataSource<A>.DurationStorage.convergesToZero(_:)()
{
  static Duration.zero.getter();
  return static Duration.< infix(_:_:)();
}

uint64_t TimeDataSource<A>.DurationStorage.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - v2;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v6 - v2, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  v4 = type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t static TimeDataSource<A>.DurationStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage), &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - v9;
  v12 = (char *)&v15 + *(int *)(v11 + 48) - v9;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)&v15 - v9, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v12, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  LOBYTE(a2) = static Date.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v12, v4);
  v13(v7, v4);
  return a2 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return 0x6E6F697461727564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F697461727564 && a2 == 0xEE0074657366664FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return 1702125924;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t TimeDataSource<A>.DurationStorage.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>();
  v26 = v2;
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v24 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date();
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - v8;
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>();
  v11 = v10;
  v27 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
  v15 = v22;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v25, (uint64_t)v9, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  v16 = v9;
  v18 = v23;
  v17 = v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v6, v16, v23);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
  v19 = v26;
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE920]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v19);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v11);
}

Swift::Int TimeDataSource<A>.DurationStorage.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - v2;
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  v4 = type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return Hasher._finalize()();
}

uint64_t TimeDataSource<A>.DurationStorage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a2;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)&v25 - v4;
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>();
  v29 = v5;
  v27 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>();
  v31 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
  v11 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v11)
  {
    v13 = v31;
    v12 = v32;
    v14 = v30;
    v33 = v8;
    v15 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v15 + 16) == 1)
    {
      v32 = v15;
      v16 = v10;
      type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
      lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for Date();
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE960]);
      v17 = (uint64_t)v28;
      v18 = v29;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v18);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v13);
      outlined init with take of TimeDataSource<Date><A>.DateStorage(v17, v26, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
    }
    else
    {
      v19 = v10;
      v20 = type metadata accessor for DecodingError();
      swift_allocError();
      v22 = v21;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v22 = v12;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
      swift_willThrow();
      v23 = v33;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v13);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for TimeDataSourceStorage.value(for:) in conformance TimeDataSource<A><A>.DurationStorage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v9, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  Date.timeIntervalSince(_:)();
  v10 = static Duration.seconds(_:)();
  v12 = v11;
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *a1 = v10;
  a1[1] = v12;
  return result;
}

uint64_t protocol witness for TimeDataSourceStorage.date(for:) in conformance TimeDataSource<A><A>.DurationStorage()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)v7, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t protocol witness for TimeDataSourceStorage.round(_:_:toMultipleOf:) in conformance TimeDataSource<A><A>.DurationStorage@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t result;
  uint64_t v7;

  Duration.components.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a1, a3);
  result = static Duration.seconds(_:)();
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t protocol witness for TimeDataSourceStorage.convergesToZero(_:) in conformance TimeDataSource<A><A>.DurationStorage()
{
  static Duration.zero.getter();
  return static Duration.< infix(_:_:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataSource<A><A>.DurationStorage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataSource<A>.DurationStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataSource<A><A>.DurationStorage(_QWORD *a1)
{
  return TimeDataSource<A>.DurationStorage.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  v4 = type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  v4 = type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  v4 = type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage), &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - v9;
  v12 = (char *)&v15 + *(int *)(v11 + 48) - v9;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)&v15 - v9, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v12, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  LOBYTE(a2) = static Date.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v12, v4);
  v13(v7, v4);
  return a2 & 1;
}

void TimeDataSource<A>.DateRangeBox.textStorage<A>(for:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v1);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage);
  type metadata accessor for TimeDataFormattingStorage();
}

uint64_t sub_23508E580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1 + direct field offset for TimeDataSource<A>.DateRangeBox.storage, v3, v5, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v0, *(_QWORD *)(v7 - 128), v4);
  v8 = swift_allocObject();
  v9 = *(_QWORD *)v8;
  v10 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 192);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 136) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 176), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 144) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 184), v0);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return v8;
}

uint64_t TimeDataSource<A>.DateRangeBox.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of (pauseDate: Date)(v0 + direct field offset for TimeDataSource<A>.DateRangeBox.storage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
}

uint64_t TimeDataSource<A>.DateRangeBox.__deallocating_deinit()
{
  return TimeDataSource<A>.DateBox.__deallocating_deinit(&direct field offset for TimeDataSource<A>.DateRangeBox.storage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
}

uint64_t TimeDataSource<A>.DateBox.__deallocating_deinit(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined destroy of (pauseDate: Date)(v3 + *a1, a2, a3);
  return swift_deallocClassInstance();
}

uint64_t TimeDataSource<A>.DateRangeStorage.value(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  char v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;

  v60 = a1;
  v57 = a2;
  type metadata accessor for (lower: Date, upper: Date)();
  v55 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v54 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v53 - v5;
  type metadata accessor for Range<Date>();
  v56 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v58 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v53 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v53 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v53 - v19;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v53 - v22;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v59, (uint64_t)&v53 - v22, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  v24 = (uint64_t)v9;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v26 = (void (*)(char *, char *, uint64_t))v9[4];
  if (EnumCaseMultiPayload == 1)
  {
    v26(v14, v23, v8);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE948]);
    v27 = v60;
    v28 = dispatch thunk of static Comparable.< infix(_:_:)();
    v59 = v24;
    v29 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    if ((v28 & 1) != 0)
    {
      v30 = v11;
      v31 = v14;
    }
    else
    {
      v30 = v11;
      v31 = v27;
    }
    v29(v30, v31, v8);
    v37 = (uint64_t)v58;
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v39 = v55;
      v40 = v53;
      v41 = &v53[*(int *)(v55 + 48)];
      v26(v53, v11, v8);
      v26(v41, v14, v8);
      v42 = v54;
      v43 = &v54[*(int *)(v39 + 48)];
      v29(v54, v40, v8);
      v29(v43, v41, v8);
      v26((char *)v37, v42, v8);
      v44 = *(void (**)(char *, uint64_t))(v59 + 8);
      v44(v43, v8);
      v45 = *(int *)(v39 + 48);
      v46 = v42;
      v47 = &v42[v45];
      v48 = v42;
      v49 = v40;
LABEL_12:
      v26(v48, v49, v8);
      v26(v47, v41, v8);
      v26((char *)(v37 + *(int *)(v56 + 36)), v47, v8);
      v44(v46, v8);
      return outlined init with take of Range<Date>(v37, v57);
    }
    __break(1u);
  }
  else
  {
    v26(v20, v23, v8);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE948]);
    v32 = v60;
    v33 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v34 = (void (*)(char *, char *, uint64_t))v9[2];
    if ((v33 & 1) != 0)
    {
      v35 = v17;
      v36 = v32;
    }
    else
    {
      v35 = v17;
      v36 = v20;
    }
    v34(v35, v36, v8);
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v50 = v55;
      v51 = v53;
      v41 = &v53[*(int *)(v55 + 48)];
      v26(v53, v20, v8);
      v26(v41, v17, v8);
      v46 = v54;
      v52 = &v54[*(int *)(v50 + 48)];
      v34(v54, v51, v8);
      v34(v52, v41, v8);
      v37 = (uint64_t)v58;
      v26(v58, v46, v8);
      v44 = (void (*)(char *, uint64_t))v9[1];
      v44(v52, v8);
      v47 = &v46[*(int *)(v50 + 48)];
      v48 = v46;
      v49 = v51;
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t TimeDataSource<A>.DateRangeStorage.date(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)&v14 - v7, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  if (EnumCaseMultiPayload != 1)
  {
    type metadata accessor for Range<Date>();
    a1 += *(int *)(v12 + 36);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a2, a1, v10);
}

uint64_t TimeDataSource<A>.DateRangeStorage.round(_:_:toMultipleOf:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int EnumCaseMultiPayload;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;

  v67 = a1;
  v68 = a2;
  v64 = a3;
  type metadata accessor for (lower: Date, upper: Date)();
  v61 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v63 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v60 = (char *)&v59 - v8;
  type metadata accessor for Range<Date>();
  v69 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD **)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v65 = (char *)&v59 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v59 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v59 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v59 = (char *)&v59 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v59 - v26;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v59 - v29;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v66, (uint64_t)&v59 - v29, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v32 = (void (*)(char *, char *, uint64_t))v12[4];
  if (EnumCaseMultiPayload == 1)
  {
    v32(v19, v30, v11);
    v33 = v69;
    Date.timeIntervalSince(_:)();
    v70 = v34;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v68, a4);
    static Date.+ infix(_:_:)();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE948]);
    v35 = dispatch thunk of static Comparable.< infix(_:_:)();
    v36 = (void (*)(char *, char *, uint64_t))v12[2];
    if ((v35 & 1) != 0)
      v37 = v14;
    else
      v37 = v19;
    v36(v65, v37, v11);
    v38 = (void (*)(char *, uint64_t))v12[1];
    v38(v14, v11);
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v40 = v61;
      v41 = *(int *)(v61 + 48);
      v68 = v38;
      v42 = v60;
      v43 = &v60[v41];
      v32(v60, v65, v11);
      v32(v43, v19, v11);
      v44 = v63;
      v45 = &v63[*(int *)(v40 + 48)];
      v36(v63, v42, v11);
      v36(v45, v43, v11);
      v46 = (uint64_t)v62;
      v32(v62, v44, v11);
      v68(v45, v11);
      v47 = &v44[*(int *)(v40 + 48)];
      v48 = v42;
      v49 = v68;
      v32(v44, v48, v11);
      v32(v47, v43, v11);
LABEL_12:
      v32((char *)(v46 + *(int *)(v33 + 36)), v47, v11);
      v49(v44, v11);
      return outlined init with take of Range<Date>(v46, v64);
    }
    __break(1u);
  }
  else
  {
    v32(v27, v30, v11);
    Date.timeIntervalSince(_:)();
    v70 = v50;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v68, a4);
    static Date.+ infix(_:_:)();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE948]);
    v51 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v52 = (void (*)(char *, char *, uint64_t))v12[2];
    if ((v51 & 1) != 0)
      v53 = v22;
    else
      v53 = v27;
    v54 = v59;
    v52(v59, v53, v11);
    v49 = (void (*)(char *, uint64_t))v12[1];
    v49(v22, v11);
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v56 = v60;
      v55 = v61;
      v57 = &v60[*(int *)(v61 + 48)];
      v32(v60, v27, v11);
      v32(v57, v54, v11);
      v44 = v63;
      v58 = &v63[*(int *)(v55 + 48)];
      v52(v63, v56, v11);
      v52(v58, v57, v11);
      v46 = (uint64_t)v62;
      v32(v62, v44, v11);
      v49(v58, v11);
      v47 = &v44[*(int *)(v55 + 48)];
      v32(v44, v56, v11);
      v32(v47, v57, v11);
      v33 = v69;
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

BOOL TimeDataSource<A>.DateRangeStorage.convergesToZero(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v7;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - v2;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v7 - v2, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  v4 = swift_getEnumCaseMultiPayload() == 1;
  v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  return v4;
}

uint64_t TimeDataSource<A>.DateRangeStorage.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::UInt v8;
  uint64_t v10;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - v6;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v10 - v6, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  v8 = swift_getEnumCaseMultiPayload() == 1;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Hasher._combine(_:)(v8);
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0xD000000000000013;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TimeDataSource<A>.DateRangeStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t TimeDataSource<A>.DateRangeStorage.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int EnumCaseMultiPayload;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>();
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v33 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>();
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v30 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Date();
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v38 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)&v29 - v8;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - v10;
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>();
  v39 = v12;
  v36 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v37, (uint64_t)v11, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v16 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  if (EnumCaseMultiPayload == 1)
  {
    v17 = v40;
    v16(v38, v11, v40);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    v43 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    v18 = v33;
    v19 = v39;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE920]);
    v20 = v35;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v21 = v17;
    v22 = v19;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v20);
    v23 = v38;
  }
  else
  {
    v23 = v29;
    v24 = v40;
    v16(v29, v11, v40);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    v42 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    v25 = v30;
    v26 = v39;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE920]);
    v27 = v32;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v21 = v24;
    v22 = v26;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v27);
  }
  (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v14, v22);
}

Swift::Int TimeDataSource<A>.DateRangeStorage.hashValue.getter()
{
  Hasher.init(_seed:)();
  TimeDataSource<A>.DateRangeStorage.hash(into:)();
  return Hasher._finalize()();
}

uint64_t TimeDataSource<A>.DateRangeStorage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  char v54;

  v40 = a2;
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>();
  v42 = v3;
  v44 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v50 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>();
  v41 = v5;
  v43 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>();
  v51 = v7;
  v47 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  v46 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v45 = (char *)&v39 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v39 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
  v17 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
    goto LABEL_7;
  v19 = v48;
  v18 = v49;
  v39 = v16;
  v52 = a1;
  v20 = v50;
  v21 = v51;
  v22 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v22 + 16) != 1)
  {
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v27 = v46;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v21);
    a1 = v52;
LABEL_7:
    v33 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v33);
  }
  if ((*(_BYTE *)(v22 + 32) & 1) != 0)
  {
    v49 = (char *)v22;
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    v54 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    v23 = v51;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v24 = v47;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE960]);
    v29 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v20, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v23);
    swift_storeEnumTagMultiPayload();
    v35 = (uint64_t)v19;
    v37 = (uint64_t)v39;
    v36 = v40;
  }
  else
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    v53 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    v28 = v9;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v37 = (uint64_t)v39;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE960]);
    v30 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v18;
    v32 = v47;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v51);
    v38 = v45;
    swift_storeEnumTagMultiPayload();
    v36 = v40;
    v35 = (uint64_t)v38;
  }
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v35, v37, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v37, v36, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  v33 = (uint64_t)v52;
  return __swift_destroy_boxed_opaque_existential_1(v33);
}

uint64_t protocol witness for TimeDataSourceStorage.date(for:) in conformance TimeDataSource<A><A>.DateRangeStorage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v6, (uint64_t)v5, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  if (EnumCaseMultiPayload != 1)
  {
    type metadata accessor for Range<Date>();
    v2 += *(int *)(v10 + 36);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v2, v8);
}

BOOL protocol witness for TimeDataSourceStorage.convergesToZero(_:) in conformance TimeDataSource<A><A>.DateRangeStorage()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)v2, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  v4 = swift_getEnumCaseMultiPayload() == 1;
  v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  return v4;
}

uint64_t protocol witness for TimeDataSourceStorage.end.getter in conformance TimeDataSource<A><A>.DateRangeStorage@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for Range<Date>();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataSource<A><A>.DateRangeStorage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataSource<A>.DateRangeStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataSource<A><A>.DateRangeStorage(_QWORD *a1)
{
  return TimeDataSource<A>.DateRangeStorage.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeDataSource<A><A>.DateRangeStorage()
{
  Hasher.init(_seed:)();
  TimeDataSource<A>.DateRangeStorage.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataSource<A><A>.DateRangeStorage()
{
  Hasher.init(_seed:)();
  TimeDataSource<A>.DateRangeStorage.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static TimeDataSource.currentDate.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - v3;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateBox, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateBox);
  v6 = swift_allocObject();
  result = outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v4, v6 + direct field offset for TimeDataSource<A>.DateBox.storage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  *a1 = v6;
  return result;
}

uint64_t static TimeDataSource.durationOffset(to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - v5;
  v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a1, v7);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationBox, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationBox);
  v8 = swift_allocObject();
  result = outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v6, v8 + direct field offset for TimeDataSource<A>.DurationBox.storage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage);
  *a2 = v8;
  return result;
}

uint64_t static TimeDataSource.dateRange(startingAt:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static TimeDataSource.dateRange(startingAt:)(a1, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - v5;
  v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeBox, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeBox);
  v8 = swift_allocObject();
  result = outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v6, v8 + direct field offset for TimeDataSource<A>.DateRangeBox.storage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  *a2 = v8;
  return result;
}

uint64_t static TimeDataSource.dateRange(endingAt:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static TimeDataSource.dateRange(startingAt:)(a1, a2);
}

uint64_t Text.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Text.init<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for AttributedString);
}

{
  return Text.init<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for String);
}

uint64_t Text.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = specialized Text.init<A, B>(_:format:)(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  return v8;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for AttributedString);
}

{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for String);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)a1 + 88);
  swift_retain();
  v11 = v10(a2, a4, a5, a6);
  swift_release();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v11, 0, 1, MEMORY[0x24BEE4AF8]);
  outlined consume of Text.Storage(v11, 0, 1);
  return swift_bridgeObjectRelease();
}

uint64_t *TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *v4;
  v9 = (uint64_t)v4 + *(_QWORD *)(*v4 + 192);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 136) - 8) + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 176), a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 144) - 8) + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 184), a2);
  *(_QWORD *)v9 = a3;
  *(_BYTE *)(v9 + 8) = a4 & 1;
  return v4;
}

void TimeDataFormattingStorage.resolve<A>(into:in:with:)()
{
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23509082C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_BYTE *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _UNKNOWN **v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_QWORD, uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  void (*v101)(void);
  _BYTE v102[112];

  *(_QWORD *)(v7 - 408) = a1;
  *(_QWORD *)(v7 - 416) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v7 - 424) = &v102[-v8];
  *(_QWORD *)(v7 - 304) = v4;
  *(_QWORD *)(v7 - 448) = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v7 - 368) = &v102[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v7 - 520) = &v102[-v12];
  v13 = type metadata accessor for FormatStyleCapitalizationContext();
  *(_QWORD *)(v7 - 528) = v13;
  *(_QWORD *)(v7 - 536) = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v7 - 544) = &v102[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for TimeZone();
  *(_QWORD *)(v7 - 400) = v15;
  *(_QWORD *)(v7 - 480) = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v7 - 488) = &v102[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for Calendar();
  *(_QWORD *)(v7 - 496) = v17;
  *(_QWORD *)(v7 - 504) = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v7 - 512) = &v102[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for Locale();
  *(_QWORD *)(v7 - 280) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = &v102[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v7 - 376) = &v102[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v25);
  *(_QWORD *)(v7 - 456) = &v102[-v26];
  MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v7 - 464) = &v102[-v28];
  MEMORY[0x24BDAC7A8](v29);
  *(_QWORD *)(v7 - 472) = &v102[-v30];
  MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)(v7 - 392) = &v102[-v32];
  MEMORY[0x24BDAC7A8](v33);
  *(_QWORD *)(v7 - 552) = &v102[-v34];
  MEMORY[0x24BDAC7A8](v35);
  v37 = &v102[-v36];
  MEMORY[0x24BDAC7A8](v38);
  v40 = &v102[-v39];
  MEMORY[0x24BDAC7A8](v41);
  *(_QWORD *)(v7 - 384) = &v102[-v42];
  v44 = MEMORY[0x24BDAC7A8](v43);
  *(_QWORD *)(v7 - 264) = &v102[-v45];
  v47 = *v5;
  v46 = v5[1];
  *(_QWORD *)(v7 - 440) = *v6;
  v48 = *(_QWORD *)(v2 + 184);
  *(_QWORD *)(v7 - 312) = v3;
  v49 = v3 + v48;
  v50 = v46;
  *(_QWORD *)(v7 - 320) = v51;
  v52 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v51 + 16);
  *(_QWORD *)(v7 - 272) = v52;
  v52(v37, v49, v1, v44);
  *(_QWORD *)(v7 - 296) = v50;
  if (v50)
  {
    v53 = *(_QWORD *)(v7 - 288);
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v47, (uint64_t)v22);
  }
  else
  {
    v54 = swift_retain_n();
    v53 = *(_QWORD *)(v7 - 288);
    specialized closure #1 in PropertyList.subscript.getter(v54, (uint64_t)v22);
    v50 = *(_QWORD *)(v7 - 296);
  }
  swift_release_n();
  swift_release_n();
  dispatch thunk of FormatStyle.locale(_:)();
  (*(void (**)(_BYTE *, _QWORD))(v20 + 8))(v22, *(_QWORD *)(v7 - 280));
  v55 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v7 - 320) + 8);
  v55(v37, v1);
  if (v50)
  {
    swift_retain_n();
    swift_retain_n();
    v56 = *(_QWORD *)(v7 - 512);
    specialized PropertyList.Tracker.value<A>(_:for:)(v47, v56);
  }
  else
  {
    v57 = swift_retain_n();
    v56 = *(_QWORD *)(v7 - 512);
    specialized closure #1 in PropertyList.subscript.getter(v57, v56);
    v50 = *(_QWORD *)(v7 - 296);
  }
  v58 = *(_QWORD *)(v7 - 488);
  swift_release_n();
  swift_release_n();
  FormatStyle.calendar(_:)(v56, v1, *(_QWORD *)(v7 - 384));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 504) + 8))(v56, *(_QWORD *)(v7 - 496));
  *(_QWORD *)(v7 - 280) = v55;
  v55(v40, v1);
  if (v50)
  {
    *(_QWORD *)(v7 - 288) = v53;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v47, v58);
  }
  else
  {
    v59 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v59, v58);
    *(_QWORD *)(v7 - 288) = v53;
    v50 = *(_QWORD *)(v7 - 296);
  }
  v60 = *(_QWORD *)(v7 - 328);
  v61 = *(_QWORD *)(v7 - 312);
  swift_release_n();
  swift_release_n();
  v62 = *(_QWORD *)(v7 - 384);
  FormatStyle.timeZone(_:)(v58, v1, *(_QWORD *)(v7 - 264));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 480) + 8))(v58, *(_QWORD *)(v7 - 400));
  (*(void (**)(uint64_t, uint64_t))(v7 - 280))(v62, v1);
  v63 = (*(uint64_t (**)(_QWORD, uint64_t))(v60 + 32))(*(_QWORD *)(v7 - 336), v60);
  v64 = *(_QWORD *)(v7 - 144);
  *(_QWORD *)(v7 - 400) = v64;
  if (v64)
  {
    v65 = *(_UNKNOWN ***)(v7 - 136);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v63);
    *(_QWORD *)&v102[-16] = 0xD000000000000035;
    *(_QWORD *)&v102[-8] = 0x80000002352E6D50;
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:));
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom);
    *(_QWORD *)(v7 - 400) = v66;
    v65 = &protocol witness table for InterfaceIdiomBox<A>;
  }
  *(_QWORD *)(v7 - 480) = v65;
  v67 = v61;
  v68 = *(_BYTE *)(v61 + *(_QWORD *)(*(_QWORD *)v61 + 192) + 8) == 1;
  v69 = *(_QWORD *)(v7 - 264);
  *(_QWORD *)(v7 - 384) = v47;
  v70 = *(void (**)(uint64_t, uint64_t))(v7 - 280);
  if (v68)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 - 272))(*(_QWORD *)(v7 - 552), v69, v1);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest((__int128 *)(v7 - 224), v7 - 144);
      v71 = *(_QWORD *)(v7 - 120);
      v72 = *(_QWORD *)(v7 - 112);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 144), v71);
      v73 = *(_QWORD *)(v7 - 480);
      *(_QWORD *)(v7 - 256) = *(_QWORD *)(v7 - 400);
      *(_QWORD *)(v7 - 248) = v73;
      v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
      *(_QWORD *)(v7 - 200) = v71;
      *(_QWORD *)(v7 - 192) = v72;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 - 224));
      v74(v7 - 256, v71, v72);
      v50 = *(_QWORD *)(v7 - 296);
      v70(v69, v1);
      v75 = *(_QWORD *)(v7 - 392);
      swift_dynamicCast();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 320) + 32))(v69, v75, v1);
      __swift_destroy_boxed_opaque_existential_1(v7 - 144);
    }
    else
    {
      *(_QWORD *)(v7 - 192) = 0;
      *(_OWORD *)(v7 - 224) = 0u;
      *(_OWORD *)(v7 - 208) = 0u;
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v7 - 224, (uint64_t)&lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle?, (uint64_t)&lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle, (uint64_t)&protocol descriptor for InterfaceIdiomDependentFormatStyle, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 - 272))(*(_QWORD *)(v7 - 472), v69, v1);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v76 = v70;
    outlined init with take of ScrollStateRequest((__int128 *)(v7 - 224), v7 - 144);
    v77 = *(_QWORD *)(v7 - 120);
    v78 = *(_QWORD *)(v7 - 112);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 144), v77);
    if (v50)
    {
      v79 = *(_QWORD *)(v7 - 384);
      swift_retain_n();
      swift_retain_n();
      LODWORD(v80) = specialized PropertyList.Tracker.value<A>(_:for:)(v79);
    }
    else
    {
      v82 = swift_retain_n();
      LODWORD(v80) = specialized closure #1 in PropertyList.subscript.getter(v82);
    }
    swift_release_n();
    swift_release_n();
    v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16);
    if (v80 == 3)
      v80 = 0;
    else
      v80 = v80;
    *(_QWORD *)(v7 - 200) = v77;
    *(_QWORD *)(v7 - 192) = v78;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 - 224));
    v83(v80, v77, v78);
    v69 = *(_QWORD *)(v7 - 264);
    v70 = v76;
    v76(v69, v1);
    v84 = *(_QWORD *)(v7 - 392);
    swift_dynamicCast();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 320) + 32))(v69, v84, v1);
    __swift_destroy_boxed_opaque_existential_1(v7 - 144);
    v81 = *(void (**)(_QWORD, uint64_t, uint64_t))(v7 - 272);
    v67 = *(_QWORD *)(v7 - 312);
    v81(*(_QWORD *)(v7 - 464), v69, v1);
  }
  else
  {
    *(_QWORD *)(v7 - 192) = 0;
    *(_OWORD *)(v7 - 224) = 0u;
    *(_OWORD *)(v7 - 208) = 0u;
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v7 - 224, (uint64_t)&lazy cache variable for type metadata for TextAlignmentDependentFormatStyle?, (uint64_t)&lazy cache variable for type metadata for TextAlignmentDependentFormatStyle, (uint64_t)&protocol descriptor for TextAlignmentDependentFormatStyle, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    v81 = *(void (**)(_QWORD, uint64_t, uint64_t))(v7 - 272);
    v81(*(_QWORD *)(v7 - 464), v69, v1);
  }
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest((__int128 *)(v7 - 224), v7 - 144);
    v85 = *(_QWORD *)(v7 - 120);
    v86 = *(_QWORD *)(v7 - 112);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 144), v85);
    v87 = *(_QWORD *)(v7 - 296);
    *(_QWORD *)(v7 - 224) = *(_QWORD *)(v7 - 384);
    *(_QWORD *)(v7 - 216) = v87;
    v88 = *(_QWORD *)(v7 - 544);
    EnvironmentValues.capitalizationContext.getter(v88);
    v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16);
    *(_QWORD *)(v7 - 200) = v85;
    *(_QWORD *)(v7 - 192) = v86;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 - 224));
    v89(v88, v85, v86);
    v69 = *(_QWORD *)(v7 - 264);
    v90 = v88;
    v67 = *(_QWORD *)(v7 - 312);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 536) + 8))(v90, *(_QWORD *)(v7 - 528));
    v70(v69, v1);
    v91 = *(_QWORD *)(v7 - 392);
    swift_dynamicCast();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 320) + 32))(v69, v91, v1);
    __swift_destroy_boxed_opaque_existential_1(v7 - 144);
  }
  else
  {
    *(_QWORD *)(v7 - 192) = 0;
    *(_OWORD *)(v7 - 224) = 0u;
    *(_OWORD *)(v7 - 208) = 0u;
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v7 - 224, (uint64_t)&lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle?, (uint64_t)&lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle, (uint64_t)&protocol descriptor for CapitalizationContextDependentFormatStyle, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  }
  v92 = *(_QWORD *)(v7 - 352);
  v81(*(_QWORD *)(v7 - 456), v69, v1);
  v93 = *(_QWORD *)(v7 - 304);
  *(_QWORD *)(v7 - 256) = swift_getAssociatedTypeWitness();
  swift_getExtendedExistentialTypeMetadata();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest((__int128 *)(v7 - 224), v7 - 144);
    v94 = *(_QWORD *)(v7 - 120);
    v95 = *(_QWORD *)(v7 - 112);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 144), v94);
    v96 = v67 + *(_QWORD *)(*(_QWORD *)v67 + 176);
    v97 = *(_QWORD *)(v7 - 448);
    v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16);
    v99 = *(_QWORD *)(v7 - 520);
    v98(v99, v96, v93);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 16))(v99, v93, v92, v94, v95);
    v100 = v99;
    v67 = *(_QWORD *)(v7 - 312);
    v81 = *(void (**)(_QWORD, uint64_t, uint64_t))(v7 - 272);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v100, v93);
    __swift_destroy_boxed_opaque_existential_1(v7 - 144);
  }
  else
  {
    if (one-time initialization token for v6 != -1)
      swift_once();
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if ((byte_25426FABC & 1) != 0)
      dyld_program_minos_at_least();
    v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 448) + 16);
    v93 = *(_QWORD *)(v7 - 304);
  }
  v98(*(_QWORD *)(v7 - 368), v67 + *(_QWORD *)(*(_QWORD *)v67 + 176), v93);
  v81(*(_QWORD *)(v7 - 376), *(_QWORD *)(v7 - 264), v1);
  if ((*(_BYTE *)(v67 + *(_QWORD *)(*(_QWORD *)v67 + 192) + 8) & 1) != 0)
  {
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>, (uint64_t)&type metadata for ComplicationInterfaceIdiom, (uint64_t)&protocol witness table for ComplicationInterfaceIdiom);
    v101 = *(void (**)(void))(*(_QWORD *)(v7 - 480) + 8);
    if ((((uint64_t (*)(void))v101)() & 1) == 0)
    {
      type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WidgetInterfaceIdiom>, (uint64_t)&type metadata for WidgetInterfaceIdiom, (uint64_t)&protocol witness table for WidgetInterfaceIdiom);
      if ((((uint64_t (*)(void))v101)() & 1) == 0)
      {
        type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>, (uint64_t)&type metadata for WatchInterfaceIdiom, (uint64_t)&protocol witness table for WatchInterfaceIdiom);
        v101();
      }
    }
  }
  default argument 3 of TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)((_QWORD *)(v7 - 224));
  TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(*(_QWORD *)(v7 - 424));
}

BOOL TimeDataFormattingStorage.isStyled(options:)()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return AssociatedTypeWitness == type metadata accessor for AttributedString();
}

uint64_t TimeDataFormattingStorage.isEqual(to:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v2 = v1;
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v32 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v31 = (char *)&v29 - v8;
  v9 = *(_QWORD *)(v3 + 144);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v29 - v15;
  v17 = swift_dynamicCastClass();
  if (!v17)
    goto LABEL_5;
  v18 = v17;
  v30 = v5;
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v19(v16, &v2[*(_QWORD *)(v3 + 184)], v9);
  v19(v13, (char *)(v18 + *(_QWORD *)(*(_QWORD *)v18 + 184)), v9);
  swift_retain();
  LOBYTE(v19) = dispatch thunk of static Equatable.== infix(_:_:)();
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  v20(v16, v9);
  if ((v19 & 1) == 0)
  {
    swift_release();
LABEL_5:
    v26 = 0;
    return v26 & 1;
  }
  v21 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 176)];
  v22 = v30;
  v23 = v31;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v24(v31, (uint64_t)v21, v4);
  v25 = v32;
  v24(v32, v18 + *(_QWORD *)(*(_QWORD *)v18 + 176), v4);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  v27 = *(void (**)(char *, uint64_t))(v22 + 8);
  v27(v25, v4);
  v27(v23, v4);
  return v26 & 1;
}

uint64_t TimeDataFormattingStorage.__ivar_destroyer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 176));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 184));
}

uint64_t TimeDataFormattingStorage.__deallocating_deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 176));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 184));
  return swift_deallocClassInstance();
}

uint64_t AttributedString.attributedString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t protocol witness for AttributedStringConvertible.attributedString.getter in conformance AttributedString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t String.attributedString.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for AttributeContainer();
  MEMORY[0x24BDAC7A8](v0);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

uint64_t protocol witness for AttributedStringConvertible.attributedString.getter in conformance String()
{
  uint64_t v0;

  v0 = type metadata accessor for AttributeContainer();
  MEMORY[0x24BDAC7A8](v0);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

id one-time initialization function for systemFormatStyle()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for SwiftUICoreClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static NSBundle.systemFormatStyle = (uint64_t)result;
  return result;
}

id static NSBundle.systemFormatStyle.getter()
{
  if (one-time initialization token for systemFormatStyle != -1)
    swift_once();
  return (id)static NSBundle.systemFormatStyle;
}

uint64_t specialized static TimeDataSource<A>.DateStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for Date();
  v5 = MEMORY[0x24BDCE900];
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - v9;
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage), &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - v12;
  v15 = (char *)&v23 + *(int *)(v14 + 48) - v12;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)&v23 - v12, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v15, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v5);
  v17 = v16;
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  if (v18(v13, 1, v16) != 1)
  {
    outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v13, (uint64_t)v10, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    if (v18(v15, 1, v17) != 1)
    {
      v20 = v24;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v7, v15, v4);
      v19 = static Date.== infix(_:_:)();
      v21 = *(void (**)(char *, uint64_t))(v20 + 8);
      v21(v7, v4);
      v21(v10, v4);
      outlined destroy of (pauseDate: Date)((uint64_t)v13, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
      return v19 & 1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v18(v15, 1, v17) != 1)
  {
LABEL_6:
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage), (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage));
    v19 = 0;
    return v19 & 1;
  }
  outlined destroy of (pauseDate: Date)((uint64_t)v13, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  v19 = 1;
  return v19 & 1;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
}

uint64_t lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateStorage.CodingKeys);
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>);
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>);
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DurationStorage);
}

uint64_t outlined init with copy of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DurationStorage.CodingKeys);
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>);
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>);
  }
}

uint64_t outlined init with take of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateRangeStorage);
}

uint64_t outlined init with take of Range<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static TimeDataSource<A>.DateRangeStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  v3 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - v13;
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Range<Date>><A>.DateRangeStorage, TimeDataSource<Range<Date>><A>.DateRangeStorage), &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - v16;
  v19 = (char *)&v28 + *(int *)(v18 + 48) - v16;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)&v28 - v16, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v29, (uint64_t)v19, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v17, (uint64_t)v14, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v24 = v30;
      v25 = v31;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v8, v19, v31);
      v22 = static Date.== infix(_:_:)();
      v26 = *(void (**)(char *, uint64_t))(v24 + 8);
      v26(v8, v25);
      v26(v14, v25);
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v31);
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for (TimeDataSource<Range<Date>><A>.DateRangeStorage, TimeDataSource<Range<Date>><A>.DateRangeStorage), (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage));
    v22 = 0;
    return v22 & 1;
  }
  outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v17, (uint64_t)v11, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v14 = v11;
    goto LABEL_8;
  }
  v20 = v30;
  v21 = v31;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v5, v19, v31);
  v22 = static Date.== infix(_:_:)();
  v23 = *(void (**)(char *, uint64_t))(v20 + 8);
  v23(v5, v21);
  v23(v11, v21);
LABEL_6:
  outlined destroy of (pauseDate: Date)((uint64_t)v17, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  return v22 & 1;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>);
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>);
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
    v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>);
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateBox);
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DurationBox);
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource<A>.DateRangeBox);
}

uint64_t specialized TimeDataSource<A>.DateStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x797469746E656469 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352E6CF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized TimeDataSource<A>.DateRangeStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x80000002352E6D10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352E6D30)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized Text.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)a1 + 88))(a2, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t instantiation function for generic protocol witness table for TimeDataSource<A><A>.DateStorage(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage);
  a1[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage);
  result = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateStorage()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage);
}

uint64_t instantiation function for generic protocol witness table for TimeDataSource<A><A>.DurationStorage(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage);
  a1[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage);
  result = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DurationStorage()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage);
}

uint64_t instantiation function for generic protocol witness table for TimeDataSource<A><A>.DateRangeStorage(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage);
  a1[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage);
  result = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage);
}

uint64_t type metadata accessor for TimeDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource);
}

uint64_t type metadata accessor for TimeDataSource.BoxBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeDataSource.BoxBase);
}

uint64_t dispatch thunk of TimeDataSourceStorage.value(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.date(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.round(_:_:toMultipleOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.convergesToZero(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.end.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

void type metadata completion function for TimeDataSource<A>.DateBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for TimeDataSource<A>.DateBox(a1, a2, a3, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
}

uint64_t type metadata instantiation function for TimeDataSource<A>.DateStorage()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for TimeDataSource<A>.DateStorage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataSource<A>.DateStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v11 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for TimeDataSource<A>.DateStorage(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for TimeDataSource<A>.DateStorage(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for TimeDataSource<A>.DateStorage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      v14 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(a1, a2, v14);
      return a1;
    }
    outlined destroy of (pauseDate: Date)((uint64_t)a1, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for Date();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  return a1;
}

void *initializeWithTake for TimeDataSource<A>.DateStorage(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for TimeDataSource<A>.DateStorage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      v14 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1, a2, v14);
      return a1;
    }
    outlined destroy of (pauseDate: Date)((uint64_t)a1, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for Date();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataSource<A>.DateStorage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235093830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimeDataSource<A>.DateStorage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235093898(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for TimeDataSource<A>.DateStorage(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for TimeDataSource<A>.DateStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t type metadata completion function for TimeDataSource<A>.DurationBox()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for TimeDataSource<A>.DurationStorage(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Date();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataSource<A>.DurationStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataSource<A>.DurationStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (date: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TimeDataSource<A>.DurationStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (date: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

void type metadata completion function for TimeDataSource<A>.DateRangeBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for TimeDataSource<A>.DateBox(a1, a2, a3, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
}

void type metadata completion function for TimeDataSource<A>.DateBox(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(_QWORD))
{
  unint64_t v5;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t type metadata completion function for TimeDataSource<A>.DateRangeStorage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataSource<A>.DateRangeStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v6 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithCopy for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of (pauseDate: Date)(a1, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
    swift_getEnumCaseMultiPayload();
    v4 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of (pauseDate: Date)(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t initializeWithTake for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of (pauseDate: Date)(a1, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
    swift_getEnumCaseMultiPayload();
    v4 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

ValueMetadata *type metadata accessor for SystemFormatStyle()
{
  return &type metadata for SystemFormatStyle;
}

uint64_t type metadata completion function for TimeDataFormattingStorage()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

void type metadata accessor for TimeDataFormattingStorage()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t dispatch thunk of AttributedStringConvertible.attributedString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for TimeDataSource<A>.DateRangeStorage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_235094064 + 4 * byte_2352C3185[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_235094098 + 4 * byte_2352C3180[v4]))();
}

uint64_t sub_235094098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350940A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350940A8);
  return result;
}

uint64_t sub_2350940B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350940BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350940C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350940C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_235094114 + 4 * byte_2352C318A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_235094134 + 4 * byte_2352C318F[v4]))();
}

